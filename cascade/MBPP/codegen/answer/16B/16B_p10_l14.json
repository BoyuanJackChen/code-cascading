[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    elements = []\n    for elm in test_tup1:\n        if elm in test_tup2:\n            elements.append(elm)\n    print(elements)\n    return elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # We can use a set in python to convert the tuples into a set.\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n    intersection_set = set_tup1.intersection(set_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n    \n    #return [i for i in test_tup1 if i in test_tup2]\n    \n    #output = list(set(test_tup1).intersection(set(test_tup2)))\n    #return output\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        if len(test_tup1) == len(test_tup2):\n            print(\"The tuples are of same size\")\n        else:\n            print(\"The tuples are of different size\")\n        if type(test_tup1[0]) == tuple and type(test_tup2[0]) == tuple:\n            if len(test_tup1[0]) == len(test_tup2[0]):\n                print(\"The tuples are of same size\")\n            else:\n                print(\"The tuples are of different size\")\n    else:\n        print(\"The passed parameters are not tuples\")\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if test_tup1 is None or test_tup2 is None:\n        return None\n    return [i for i in test_tup1 if i in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    elif test_tup1 == test_tup2:\n        return test_tup1\n    else:\n        shared_list = []\n        for i in range(len(test_tup1)):\n            if test_tup1[i] in test_tup2:\n                shared_list.append(test_tup1[i])\n        return shared_list\n        \n    \nif __name__ == '__main__':\n    print(similar_elements((1,2,3), (3,2,1,0)))\n    print(similar_elements((2,2,3), (3,2,1,0))"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_items = []\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = list(set(test_tup1) & set(test_tup2))\n    return shared_elements\n    \ndef random_tup_generator(start, end, size):\n    '''\n    Write a function that generates a tuple randomly, without using the random module.\n    '''\n    return tuple([random.randint(start, end) for i in range(size)])\n    \ndef list_of_lists_generator(start, end, num_of_lists, size_of_lists):\n    '''\n    Write a function that generates a list of tuples, each tuple contains a value from a range.\n    '''\n    return [random_tup_generator(start, end, size_of_lists) for i in range(num_of_lists)]\n    \ndef sort_tuple(test_tup, descending_order = False):\n    '''\n    Write a function that sorts the tuple values in a descending order.\n    '''\n    if descending_order == False:\n        return tuple(sorted(test_tup))\n    else:\n        return tuple(sorted(test_tup, reverse=True))\n    \ndef all_sorted(test_list, descending_order = False):\n    '''\n    Write a function that checks if the given list is sorted in a descending order.\n    '''\n    return all([test_list[i] >= test_list[i + 1] for i in range(len(test_list) - 1)])\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = [x for x in test_tup1 if x in test_tup2]\n    return result\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    max_div = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max_div, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Corner case \n    if n <= 1: \n        return True\n    # Check from 2 to n-1 \n    for i in range(2, n): \n        if n % i == 0: \n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    elif n==2:\n        return False\n    for i in range(2,math.ceil(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef get_largest_prime_below(n):\n    '''\n    Write a python function to return the largest prime number below the specified number.\n    '''\n    for i in range(n-1,1,-1):\n        if is_prime(i):\n            return i\ndef get_fibonacci_huge_naive(n, m):\n    '''\n    Write a python function to return the nth Fibonacci number modulo m.\n    '''\n    if n<2:\n        return n\n    else:\n        a=0\n        b=1\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n        return (b%m)\ndef get_fibonacci_huge(n, m):\n    '''\n    Write a python function to return the nth Fibonacci number modulo m.\n    '''\n    if n<2:\n        return n\n    else:\n        a=0\n        b=1\n        c=0\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n            if c>m:\n                break\n        c=c%m\n        return c\ndef get_fibonacci_last_digit_naive(n):\n    '''\n    Write a python function to return the last digit of nth Fibonacci number.\n    '''\n    if n<2:\n        return n\n    else:\n        a=0\n        b=1\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n        return (b%10)\ndef get_fibonacci_last_digit(n):\n    '''\n    Write a python function to return the last digit of nth Fibonacci number.\n    '''\n    if n<2:\n        return n\n    else:\n        a=0\n        b=1\n        c=0\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n            if c>math.pow(10,9):\n                break\n        c=c%10\n        return c\ndef get_fibonacci_sum_squares_naive(n):\n    '''\n    Write a python function to return the sum of squares of the last digits of Fibonacci number.\n    '''\n    if n<2:\n        return 0\n    else:\n        a=0\n        b=1\n        c=0\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n            if c>math.pow(10,9):\n                break\n        c=c%10\n        return (c**2)%10\ndef get_fibonacci_sum_squares(n):\n    '''\n    Write a python function to return the sum of squares of the last digits of Fibonacci number.\n    '''\n    if n<2:\n        return 0\n    else:\n        a=0\n        b=1\n        c=0\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n            if c>math.pow(10,9):\n                break\n        c=c%10\n        return (c*c)%10\ndef get_fibonacci_partial_sum_naive(from_, to):\n    '''\n    Write a python function to return the sum of Fibonacci number between from and to.\n    '''\n    if to>from_:\n        if to-from_<=1:\n            if from_%2==0:\n                if to%2==0:\n                    return (get_fibonacci_sum_naive(from_,to)%10)\n                else:\n                    return (get_fibonacci_sum_naive(from_+1,to)%10)\n            else:\n                if to%2==0:\n                    return (get_fibonacci_sum_naive(from_,to+1)%10)\n                else:\n                    return (get_fibonacci_sum_naive(from_+2,to)%10)\n        else:\n            return (get_fibonacci_sum_naive(from_,from_+1)%10 + get_fibonacci_sum_naive(from_+2,to)%10)\n    else:\n        return 0\ndef get_fibonacci_partial_sum(from_, to):\n    '''\n    Write a python function to return the sum of Fibonacci number between from and to.\n    '''\n    if to>from_:\n        if to-from_<=1:\n            if from_%2==0:\n                if to%2==0:\n                    return (get_fibonacci_sum(from_,to)%10)\n                else:\n                    return (get_fibonacci_sum(from_+1,to)%10)\n            else:\n                if to%2==0:\n                    return (get_fibonacci_sum(from_,to+1)%10)\n                else:\n                    return (get_fibonacci_sum(from_+2,to)%10)\n        else:\n            return (get_fibonacci_sum(from_,from_+1)%10 + get_fibonacci_sum(from_+2,to)%10)\n    else:\n        return 0\ndef get_lucas_lehmer(n):\n    '''\n    Write a python function to return the last digit of nth Lucas Lehmer number.\n    '''\n    a=2\n    b=1\n    for i in range(n-1):\n        c=a+b\n        a=b\n        b=c\n    return (c%10)\ndef get_lucas_lehmer_partial_sum(from_, to):\n    '''\n    Write a python function to return the sum of Lucas Lehmer numbers between from and to.\n    '''\n    if to>from_:\n        if to-from_<=1:\n            if from_%2==0:\n                if to%2==0:\n                    return (get_lucas_lehmer(from_)%10)\n                else:\n                    return (get_lucas_lehmer(from_+1)%10)\n            else:\n                if to%2==0:\n                    return (get_lucas_lehmer(from_)%10)\n                else:\n                    return (get_lucas_lehmer(from_+2)%10)\n        else:\n            return (get_lucas_lehmer(from_)%10 + get_lucas_lehmer(from_+1)%10)\n    else:\n        return 0\ndef is_prime_naive(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef get_primes_naive(n):\n    '''\n    Write a python function to return the list of prime numbers up to n.\n    '''\n    return [i for i in range(n) if is_prime_naive(i)]\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef get_primes(n):\n    '''\n    Write a python function to retur"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, math.ceil(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Corner case\n    if n <= 1:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n%2 == 0:\n        return True\n    sqrt_n = int(math.sqrt(n))\n    for i in range(3, sqrt_n + 1, 2):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Corner case\n    if n <= 1:\n        return True\n    # Check from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    print(nums)\n    while n!=0:\n        largest = hq.heappop(nums)\n        n-=1\n        print(largest,end=' ')\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for x in range(n):\n        hq.heappush(heap,nums[x])\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums), end=\" \")\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #use heapq to return largest n numbers in a list in O(nlog(n)) time.\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\ndef max_heap(nums):\n    '''\n    Given a list, rearrange the elements so that the maximum value is at the top.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        hq.heapify(nums)\n        hq.heappop(nums)\ndef kth_largest_element(arr,k):\n    '''\n    Write a function that takes a list and returns the Kth largest element in the list.\n    '''\n    hq.heapify(arr)\n    for i in range(len(arr)-k+1):\n        hq.heappop(arr)\n    return arr[0]\ndef minimum_value_to_reach_destination(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [[float(\"inf\") for i in range(destination+1)] for i in range(l+1)]\n    for i in range(l+1):\n        dp[i][0] = 0\n    for i in range(1,l+1):\n        for j in range(destination+1):\n            if nums[i-1] <= j:\n                dp[i][j] = min(dp[i-1][j],1+dp[i][j-nums[i-1]])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[l][destination]\ndef minimum_value_to_reach_destination_optimized(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    for i in range(1,destination+1):\n        for j in range(l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n    return dp[destination]\ndef minimum_value_to_reach_destination_top_down(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [[float(\"inf\") for i in range(destination+1)] for i in range(l+1)]\n    for i in range(l+1):\n        dp[i][0] = 0\n    for i in range(1,l+1):\n        for j in range(destination+1):\n            if nums[i-1] <= j:\n                dp[i][j] = min(dp[i-1][j],1+dp[i][j-nums[i-1]])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[l][destination]\ndef minimum_value_to_reach_destination_bottom_up(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [[float(\"inf\") for i in range(destination+1)] for i in range(l+1)]\n    for i in range(l+1):\n        dp[i][0] = 0\n    for i in range(1,l+1):\n        for j in range(destination+1):\n            if nums[i-1] <= j:\n                dp[i][j] = min(dp[i][j],1+dp[i-1][j-nums[i-1]])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[l][destination]\ndef minimum_value_to_reach_destination_top_down_optimized(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    for i in range(1,destination+1):\n        for j in range(l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n    return dp[destination]\ndef minimum_value_to_reach_destination_bottom_up_optimized(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    for i in range(1,destination+1):\n        for j in range(l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n    return dp[destination]\ndef minimum_value_to_reach_destination_bottom_up_optimized_2(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    last_index = 0\n    for i in range(1,destination+1):\n        last_index = last_index\n        for j in range(last_index,l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n            else:\n                last_index = j\n                break\n    return dp[destination]\ndef minimum_value_to_reach_destination_bottom_up_optimized_3(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    last_index = 0\n    for i in range(1,destination+1):\n        last_index = last_index\n        for j in range(last_index,l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n            else:\n                last_index = j\n                break\n    return dp[destination]\ndef minimum_value_to_reach_destination_bottom_up_optimized_4(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def heap_sort(nums,n):\n        hq.heapify(nums)\n        return [hq.heappop(nums) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    heapq.heapify(h)\n    for i in range(n):\n        hq.heappush(h,-nums[i])\n    for i in range(n,len(nums)):\n        if -h[0] > nums[i]:\n            hq.heapreplace(h,nums[i])\n    return sorted([-i for i in h],reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq to find the largest n elements of the list\n    #heapq is a min-heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums=sorted(nums)\n    hq.heapify(nums)\n    nums=nums[::-1]\n    return nums[:n]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x=bin(x)\n    if(x[0]=='0'):\n        x=x[2:]\n    i=len(x)-1\n    while(i>=0):\n        if(x[i]=='1'):\n            return False\n        else:\n            i-=1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2**0: \n        return True \n    elif x == 0: \n        return False\n    elif x > 2**0: \n        return is_Power_Of_Two(x // 2) \n  \ndef reverse_bits(x): \n    '''\n    Write a Python function to convert an unsigned integer to a binary string. \n    '''\n    if x == 0: \n        return x \n    else: \n        return (reverse_bits(x // 2) * 10) + (x % 2) \n  \ndef set_bit(value, bit): \n    '''\n    Write a Python function to set a bit in an integer. \n    '''\n    return value | (1<<bit) \n  \ndef clear_bit(value, bit): \n    '''\n    Write a Python function to clear a bit in an integer. \n    '''\n    return value & ~(1<<bit) \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Converting the number to binary\n    bin_str_x = bin(x)[2:]\n    # Checking whether the two numbers differ at one bit position only or not\n    if len(bin_str_x) >= 2:\n        # Checking whether the two numbers differ at one bit position only or not\n        if bin_str_x[0]!= bin_str_x[1]:\n            return False\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x == 1):\n        return True\n    if((x & (x - 1)) == 0):\n        return True\n    else:\n        return False\nx = int(input(\"enter the number\"))\nprint(is_Power_Of_Two(x))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 1: \n        while x > 1: \n            if x % 2!= 0: \n                return False\n            x = x // 2\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the number x to binary\n    binary_representation = bin(x)[2:]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    elif x == 1: \n        return False\n    else: \n        while (x % 2) == 0: \n            x = x / 2\n        if x == 1: \n            return False\n        else: \n            return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Test if bit is set or not \n    if (x & (x - 1) == 0): \n        return 1\n    else: \n        return 0\n  "
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 1:\n        if x % 2!= 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #r\"\\b[a-zA-Z]{4}\\b\"\n    pattern = re.compile(r'\\b[a-zA-Z]{4}\\b')\n    words_list = pattern.findall(text)\n    return words_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = str(text)\n    output_list = []\n    for i in text:\n        if len(i) >= 4:\n            output_list.append(i)\n    return output_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    text = text.split()\n    \n    char_long = []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern=r'\\b\\w{4,}\\b'\n    # pattern=r'[a-zA-Z]+'\n    # pattern=r'[\\w]+'\n    # pattern=r'\\w+\\d+'\n    # pattern=r'\\b\\w{4,}\\b'\n    # pattern=r'^[A-Z][A-Za-z]+\\s[A-Z][A-Za-z]+$'\n    # pattern=r'\\b\\w{4,}\\b'\n    # pattern=r'[\\w]+[\\d]+'\n    # pattern=r'\\b[A-Z][A-Za-z]+\\s[A-Z][A-Za-z]+[\\w]+[\\d]+\\b'\n    # pattern=r'\\b[A-Za-z0-9]+[\\d]+[A-Za-z0-9]+\\b'\n    # pattern=r'\\b\\w+[\\d]+[A-Za-z]+\\b'\n    # pattern=r'\\b\\w+[\\d]+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[\\d]+[A-Za-z]+\\b'\n    # pattern=r'\\b\\w+[\\d]+\\b'\n    # pattern=r'\\b\\w+[\\d]+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b[A-Z]+[a-z]+\\b'\n    # pattern=r'[A-Z]+[a-z]+\\b'\n    # pattern=r'^[A-Z]+[a-z]+$'\n    # pattern=r'^[A-Z]+[a-z]+\\s[A-Z]+[a-z]+$'\n    # pattern=r'\\b\\w+[\\d]+\\b'\n    # pattern=r'\\b\\w+\\b'\n    # pattern=r'\\b\\w+\\b'\n    # pattern=r'\\b\\w+\\b'\n    # pattern=r'\\b[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Za-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words of length at least 4 characters in a string\n    regEx = re.compile(r'\\S{4,}') # use non-whitespace character to avoid splitting in between words\n    matches = regEx.findall(text)\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Return all words that are at least 4 characters long\n    return re.findall('\\S{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern=r'\\b[a-zA-Z]+\\S*[a-zA-Z]{3}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    match_list = []\n    for word in text.split():\n        if len(word) >= 4:\n            match_list.append(word)\n    return match_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long = re.findall(r\"\\b[a-zA-Z]{4,}\\b\", text)\n    return long\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    x = re.findall(\"[a-zA-Z]+[a-zA-Z0-9]+\\s[a-zA-Z]+[a-zA-Z0-9]+\\s[a-zA-Z]+[a-zA-Z0-9]+\",text)\n    for i in x:\n        if len(i) >= 4:\n            print(i)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str\n    str2 = str\n    n = len(str1)\n    # check if str is a substring of any rotation of given str \n    for i in range(1, n + 1):\n        if (checkIfSubString(str1, str2)):\n            return i\n            break\n        else:\n            str2 = str2[1:] + str2[0] \n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1: \n        return 0\n    str_array = [str[x:x+len(str)] for x in range(0, len(str))] \n    str_array = list(dict.fromkeys(str_array)) \n    print(str_array)\n    for i in range(len(str)): \n        if str_array[0] == str[i:]: \n            return i \n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    str1 = str * 2\n    rotations = 0\n    for i in range(str_len):\n        if str1[i]!= str1[i+str_len]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str1 = str + str\n    for i in range(n):\n        if str1[i:i+n] == str:\n            return n-i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_rotation = {str[i:] + str[0:i] for i in range(len(str))}\n    list_rotations = list(str_rotation)\n    return list_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for _ in range(0, len(str)):\n        if str[_] == str[0]:\n            return _\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    count = 0\n    for i in range(l):\n        if str[i:] + str[0:i] == str:\n            count += 1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #print(str[::-1])\n    if str == str[::-1]:\n        return 0\n    for i in range(len(str)):\n        if str[i:] + str[:i] == str[::-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return min(str.count('x'), str.count('z'), str.count('y')) \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def check_rotations(s,n):\n        for i in range(n):\n            if s==s[n-i:]+s[:n-i]:\n                return i\n        return -1\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # s.split(ch)\n    s = s.replace(ch, \"\")\n    s = s[::-1].replace(ch, \"\", 1)\n    return s[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=list(s)\n    s.remove(ch)\n    s.remove(ch)\n    return(''.join(s))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '')[:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = str(s)\n    s = s.replace(ch,\"\")\n    s = s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.find(ch)] + s[s.find(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\nprint(remove_Occ(\"hello world\", \"o\"))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    if l == 0:\n        return \"\"\n    if ch not in s:\n        return s\n    i = 0\n    while s[i]!= ch:\n        i += 1\n        if i == l:\n            return s\n    j = l\n    while s[j-1]!= ch:\n        j -= 1\n        if j <= 0:\n            return s\n    s = s[:i] + s[j:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        while s.find(ch)!= -1:\n            s = s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # check that M is 2 dimensional\n    if (M.ndim!= 2):\n        return None\n    \n    # initialize result matrix\n    M_res = np.zeros(M.shape)\n    \n    # iterate through rows\n    for i in range(M.shape[0]):\n        # initialize running sum\n        sum = 0\n        # iterate through columns\n        for j in range(M.shape[1]):\n            # increment sum and add to it\n            sum += M[i,j]\n        # add row to result matrix\n        M_res[i] = sum\n    # sort result matrix\n    sorted_M = np.sort(M_res, kind='mergesort')\n    \n    # return sorted matrix\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    if m == 0 or n == 0:\n        return []\n    M = [[1,2,3],\n          [4,5,6],\n          [7,8,9]]\n    for i in range(1,m):\n        for j in range(0,n):\n            M[i][j] += M[i-1][j]\n    # print(M)\n    for i in range(m-1):\n        min_idx = i\n        for j in range(i+1,m):\n            if M[min_idx][j] < M[min_idx][i]:\n                min_idx = j\n        M[i], M[min_idx] = M[min_idx], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    R = len(M)\n    C = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = [[0,0,0],[0,0,0],[0,0,0]]\n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M)):\n            sum = sum + M[i][j]\n            M[i][j] = sum\n    M.sort(key=lambda x: x[2])\n    return M\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # sum = [sum(row) for row in M]\n    # sum = np.array(sum)\n    # print(sum)\n    # print(sum[0])\n    # print(sum[1])\n    # print(sum[2])\n    # print(sum[3])\n    # print(sum[4])\n    # print(sum[5])\n    # print(sum[6])\n    # print(sum[7])\n    # print(sum[8])\n    # print(sum[9])\n    # print(sum[10])\n    # print(sum[11])\n    # print(sum[12])\n    # print(sum[13])\n    # print(sum[14])\n    # print(sum[15])\n    # print(sum[16])\n    # print(sum[17])\n    # print(sum[18])\n    # print(sum[19])\n    # print(sum[20])\n    # print(sum[21])\n    # print(sum[22])\n    # print(sum[23])\n    # print(sum[24])\n    # print(sum[25])\n    # print(sum[26])\n    # print(sum[27])\n    # print(sum[28])\n    # print(sum[29])\n    # print(sum[30])\n    # print(sum[31])\n    # print(sum[32])\n    # print(sum[33])\n    # print(sum[34])\n    # print(sum[35])\n    # print(sum[36])\n    # print(sum[37])\n    # print(sum[38])\n    # print(sum[39])\n    # print(sum[40])\n    # print(sum[41])\n    # print(sum[42])\n    # print(sum[43])\n    # print(sum[44])\n    # print(sum[45])\n    # print(sum[46])\n    # print(sum[47])\n    # print(sum[48])\n    # print(sum[49])\n    # print(sum[50])\n    # print(sum[51])\n    # print(sum[52])\n    # print(sum[53])\n    # print(sum[54])\n    # print(sum[55])\n    # print(sum[56])\n    # print(sum[57])\n    # print(sum[58])\n    # print(sum[59])\n    # print(sum[60])\n    # print(sum[61])\n    # print(sum[62])\n    # print(sum[63])\n    # print(sum[64])\n    # print(sum[65])\n    # print(sum[66])\n    # print(sum[67])\n    # print(sum[68])\n    # print(sum[69])\n    # print(sum[70])\n    # print(sum[71])\n    # print(sum[72])\n    # print(sum[73])\n    # print(sum[74])\n    # print(sum[75])\n    # print(sum[76])\n    # print(sum[77])\n    # print(sum[78])\n    # print(sum[79])\n    # print(sum[80])\n    # print(sum[81])\n    # print(sum[82])\n    # print(sum[83])\n    # print(sum[84])\n    # print(sum[85])\n    # print(sum[86])\n    # print(sum[87])\n    # print(sum[88])\n    # print(sum[89])\n    # print(sum[90])\n    # print(sum[91])\n    # print(sum[92])\n    # print(sum[93])\n    # print(sum[94])\n    # print(sum[95])\n    # print(sum[96])\n    # print(sum[97])\n    # print(sum[98])\n    # print(sum[99])\n    # print(sum[100])\n    # print(sum[101])\n    # print(sum[102])\n    # print(sum[103])\n    # print(sum[104])\n    # print(sum[105])\n    # print(sum[106])\n    # print(sum[107])\n    # print(sum[108])\n    # print(sum[109])\n    # print(sum[110])\n    # print(sum[111])\n    # print(sum[112])\n    # print(sum[113])\n    # print(sum[114])\n    # print(sum[115])\n    # print(sum[116])\n    # print(sum[117])\n    # print(sum[118])\n    # print(sum[119])\n    # print(sum[120])\n    # print(sum[121])\n    # print(sum[122])\n    # print(sum[123])\n    # print(sum[124])\n    # print(sum[125])\n    # print(sum[126])\n    # print(sum[127])\n    # print(sum[128])\n    # print(sum[129])\n    # print(sum[130])\n    # print(sum[131])\n    # print(sum[132])\n    # print(sum[133])\n    # print(sum[134])\n    # print(sum[135])\n    # print(sum[136])\n    # print(sum[137])\n    # print(sum[138])\n    # print(sum[139])\n    # print(sum[140])\n    # print(sum[141])\n    # print(sum[142])\n    # print(sum[143])\n    # print(sum[144])\n    # print(sum[145])\n    # print(sum[146])\n    # print(sum[147])\n    # print(sum[148])\n    # print(sum[149])\n    # print(sum[150])\n    # print(sum[151])\n    # print(sum[152])\n    # print(sum[153])\n    # print(sum[154])\n    # print(sum[155])\n    # print(sum[156])\n    # print(sum[157])\n    # print(sum[158])\n    # print(sum[159])\n    # print(sum[160])\n    # print(sum[161])\n    # print(sum[162])\n    # print(sum[163])\n    # print(sum[164])\n    # print(sum[165])\n    # print(sum[166])\n    # print(sum[167])\n    # print(sum[168])\n    # print(sum[169])\n    # print(sum[170])\n    # print(sum[171])\n    # print(sum[172])\n    # print(sum[173])\n    # print(sum[174])\n    # print(sum[175])\n    # print(sum[176])\n    # print(sum[177])\n    # print(sum[178])\n    # print(sum[179])\n    # print(sum[180])\n    # print(sum[181])\n    # print(sum[182])\n    # print(sum[183])\n    # print(sum[184])\n    # print(sum[185])\n    # print(sum[186])\n    # print(sum[187])\n    # print(sum[188])\n    # print(sum[189])\n    # print(sum[190])\n    # print(sum[191])\n    # print(sum[192])\n    # print(sum[193])\n    # print(sum[194])\n    # print(sum[195])\n    # print(sum[196])\n    # print(sum[197])\n    # print(sum[198])\n    # print(sum[199])\n    # print(sum[200])\n    # print(sum[201])\n    # print(sum[202])\n    # print(sum[203])\n    # print(sum[204])\n    # print(sum[205])\n    # print(sum[206])\n    # print(sum[207])\n    # print(sum[208])\n    # print(sum[209])\n    # print(sum[210])\n    # print(sum[211])\n    # print(sum[212])\n    # print(sum[213])\n    # print(sum[214])\n    # print(sum[215])\n    # print(sum[216])\n    # print(sum[217])\n    # print(sum[218])\n    # print(sum"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = sorted(M, key = sum, reverse = True)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    import numpy as np\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    '''\n    It can be done with quick sort\n    '''\n    def sum_row(M, n):\n        res = 0\n        for i in range(n):\n            res += M[i][0]\n        return res\n    def quick_sort(M, low, high):\n        if low < high:\n            pivot = partition(M, low, high)\n            quick_sort(M, low, pivot-1)\n            quick_sort(M, pivot+1, high)\n    def partition(M, low, high):\n        i = low - 1\n        pivot = sum_row(M, high)\n        for j in range(low, high):\n            if sum_row(M, j) < pivot:\n                i += 1\n                M[i], M[j] = M[j], M[i]\n        M[i+1], M[high] = M[high], M[i+1]\n        return i + 1\n    quick_sort(M, 0, len(M)-1)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    i = 0\n    while i < len(M):\n        j = 0\n        while j < len(M[0]):\n            if j == 0 or M[i][j] < M[i][j-1]:\n                M[i],M[i][j] = M[i][j],M[i][j-1]\n            j+=1\n        i+=1\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i + 1, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math \n    volume = (1/3)*(l*b*h) \n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l = int(input(\"Enter length of the prism : \"))\n    #b = int(input(\"Enter breadth of the prism : \"))\n    #h = int(input(\"Enter height of the prism : \"))\n    v = l*b*h\n    print(\"The volume of the prism is : \",v)\nfind_Volume(3,4,5)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return(0.5*(l*b*h))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (1/3)*(l*b*h)\n    return(vol)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume = (l*b*h)/3\n    \n    return volume\n    \ndef find_Trig_Sqr(a,b) : \n    '''\n    Write a python function to find the square of the side of a triangle.\n    '''\n    \n    return (a*a) + (b*b)\n    \ndef find_Trig_Sqr_Sum(a,b,c) : \n    '''\n    Write a python function to find the sum of the squares of the sides of a triangle.\n    '''\n    \n    return find_Trig_Sqr(a,b) + find_Trig_Sqr(a,c) + find_Trig_Sqr(b,c)\n    \ndef find_Circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    \n    return 2*3.14*r\n    \ndef find_Circumference_Sum(r1,r2,r3) : \n    '''\n    Write a python function to find the sum of the circumference of a circle.\n    '''\n    \n    return find_Circumference(r1) + find_Circumference(r2) + find_Circumference(r3)\n    \ndef is_Vowel(char) : \n    '''\n    Write a python function to determine if a character is a vowel or a consonant.\n    '''\n    \n    if char.lower() in \"aeiou\" : \n        return True\n    return False\n    \ndef find_N_Vowels(string,n) : \n    '''\n    Write a python function to find the nth vowel in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if is_Vowel(char) : \n            vowels += 1\n        if vowels == n : \n            return char\n            \ndef find_N_Consonants(string,n) : \n    '''\n    Write a python function to find the nth consonant in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if not is_Vowel(char) : \n            vowels += 1\n        if vowels == n : \n            return char\n            \ndef remove_vowels(string) : \n    '''\n    Write a python function to remove all vowels from a string.\n    '''\n    \n    no_vowels = ''\n    for char in string : \n        if not is_Vowel(char) : \n            no_vowels += char\n    \n    return no_vowels\n    \ndef remove_consonants(string) : \n    '''\n    Write a python function to remove all consonants from a string.\n    '''\n    \n    no_consonants = ''\n    for char in string : \n        if is_Vowel(char) : \n            no_consonants += char\n    \n    return no_consonants\n    \ndef count_vowels(string) : \n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if is_Vowel(char) : \n            vowels += 1\n    \n    return vowels\n    \ndef count_consonants(string) : \n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if is_Vowel(char) == False : \n            vowels += 1\n    \n    return vowels\n    \ndef remove_string(string,string_to_remove) : \n    '''\n    Write a python function to remove a substring from a string.\n    '''\n    \n    return string.replace(string_to_remove,'')\n    \ndef find_N_Consonants_Sum(string,n) : \n    '''\n    Write a python function to find the sum of the consonants in a string.\n    '''\n    \n    consonants = 0\n    for char in string : \n        if is_Vowel(char) == False : \n            consonants += 1\n    \n    return consonants\n    \ndef find_N_Vowels_Sum(string,n) : \n    '''\n    Write a python function to find the sum of the vowels in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if is_Vowel(char) : \n            vowels += 1\n    \n    return vowels\n    \ndef find_Longest_Word(string) : \n    '''\n    Write a python function to find the longest word in a string.\n    '''\n    \n    return max(string.split(), key = len)\n    \ndef find_Longest_Word_Len(string) : \n    '''\n    Write a python function to find the length of the longest word in a string.\n    '''\n    \n    return len(find_Longest_Word(string))\n    \ndef find_Longest_Word_Len_Starts_With(string,letter) : \n    '''\n    Write a python function to find the length of the longest word in a string starting with a certain letter.\n    '''\n    \n    return len(find_Longest_Word(string).strip(letter))\n    \ndef find_2nd_Longest_Word(string) : \n    '''\n    Write a python function to find the 2nd longest word in a string.\n    '''\n    \n    return sorted(string.split(), key = len)[-2]\n    \ndef find_2nd_Longest_Word_Len(string) : \n    '''\n    Write a python function to find the length of the 2nd longest word in a string.\n    '''\n    \n    return len(find_2nd_Longest_Word(string))\n    \ndef find_2nd_Longest_Word_Len_Starts_With(string,letter) : \n    '''\n    Write a python function to find the length of the 2nd longest word in a string starting with a certain letter.\n    '''\n    \n    return len(find_2nd_Longest_Word(string).strip(letter))\n    \ndef find_Most_Used_Letter(string) : \n    '''\n    Write a python function to find the most used letter in a string.\n    '''\n    \n    return max(string, key = string.count)\n    \ndef find_Most_Used_Letter_Count(string) : \n    '''\n    Write a python function to find the number of times a letter occurs in a string.\n    '''\n    \n    return string.count(find_Most_Used_Letter(string))\n    \ndef remove_2nd_Most_Used_Letter(string) : \n    '''\n    Write a python function to remove the 2nd most used letter in a string.\n    '''\n    \n    return remove_2nd_Most_Used_Letter(string.replace(find_Most_Used_Letter(string),''))\n    \ndef remove_2nd_Most_Used_Letter_Count(string) : \n    '''\n    Write a python function to remove the 2nd most used letter in a string and the number of times it occurs.\n    '''\n    \n    return string.count(find_Most_Used_Letter(string))\n    \ndef find_Middle_Letter(string) : \n    '''\n    Write a python function to find the middle letter of a string.\n    '''\n    \n    middle = len(string) // 2\n    return string[middle]\n    \ndef find_Middle_Letter_Count(string) : \n    '''\n    Write a python function to find the number of times a middle letter occurs in a string.\n    '''\n    \n    return string.count(find_Middle_Letter(string))\n    \ndef remove_Middle_Letter(string) : \n    '''\n    Write a python function to remove the middle letter of a string.\n    '''\n    \n    return string.replace(find_Middle_Letter(string),'')\n    \ndef remove_Middle_Letter_Count(string) : \n    '''\n    Write a python function to remove th"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*l*b*h\n    \ndef find_pi(radius) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    pi = 3.14\n    return pi * radius * radius\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return round(l * b * h, 1)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*(l*b*h)\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #pattern = re.compile(r'([a-zA-Z]+_[a-zA-Z]+)')\n    #if pattern.search(text):\n    #    return True\n    #else:\n    #    return False\n    pattern = re.compile(r'((?<=[a-zA-Z])[a-zA-Z]+(?=_))')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'_+[a-z]', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    def is_lower_underscore(text):\n        if re.search(r'[a-z]+_[a-z]+', text):\n            return True\n        else:\n            return False\n    return is_lower_underscore\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #return bool(re.search(r'_\\w+_', text))\n    return bool(re.search(r'_+[a-z]\\w*_+', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.findall(r\"\\w+_\\w+\", text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'^\\w+_\\w+$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r\"_[a-z]{2,}_\",text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"_+[a-z]\", text):\n        return True\n    return False\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int and type(a)!= float:\n        raise TypeError('Please enter a positive number.')\n    elif a < 0:\n        raise ValueError('Please enter a positive number.')\n    elif a == 0:\n        return 0\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = a*4\n    return p\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # this is a function that will take a side length and return the perimeter of a square\n    perimeter = a * 4\n    print(perimeter)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass # remove this line\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [x for x in string if x not in string_2]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [ch for ch in string if ch not in string[1:]]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [] \n    for ch in string: \n        if ch not in result: \n            result.append(ch)\n    return ''.join(result) \n    \ndef sub_str(string,substring):\n    '''\n    Write a function to find if the second string is a substring of the first.\n    '''\n    if substring in string:\n        return True\n    else:\n        return False\n        \ndef sub_str_count(string,substring):\n    '''\n    Write a function to count the number of times that the second string is a substring of the first.\n    '''\n    if sub_str(string,substring):\n        return string.count(substring)\n    else:\n        return 0\n        \ndef find_str(string,substring):\n    '''\n    Write a function to find the index of the first occurrence of the second string in the first.\n    '''\n    if sub_str(string,substring):\n        return string.find(substring)\n    else:\n        return -1\n        \ndef compress_str(string):\n    '''\n    Write a function to compress a string.\n    '''\n    str_list = list(string)\n    final_str = ''\n    count = 1\n    for i in range(len(str_list)):\n        if i<(len(str_list)-1) and str_list[i] == str_list[i+1]:\n            count += 1\n        else:\n            final_str += str_list[i]\n            if count > 1:\n                final_str += str(count)\n            count = 1\n    return final_str\n    \ndef count_str(string,substring):\n    '''\n    Write a function to count the number of times that a substring appears in the given string.\n    '''\n    if sub_str(string,substring):\n        return string.count(substring)\n    else:\n        return 0\n        \ndef string_to_list(string):\n    '''\n    Write a function to convert a string to a list of letters.\n    '''\n    return [char for char in string]\n        \ndef list_to_string(list_of_chars):\n    '''\n    Write a function to convert a list of letters to a string.\n    '''\n    return ''.join(list_of_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for i in range(len(string)):\n        list_string.append(ord(string[i]))\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = list(string) \n    temp = []\n    for i in range(len(li)): \n        if li[i] not in temp: \n            temp.append(li[i]) \n    return temp\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_strings = []\n    for char in string:\n        list_strings.append(char)\n    return list_strings\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_str = [] \n    for char in string: \n        if char not in new_str: \n            new_str.append(char) \n    return new_str \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # String length\n    length = len(string)\n    i=0\n    j=0\n    str = []\n    no=0\n    # Iterate all characters\n    # of second string\n    while j < length: \n        # Iterate all characters of first\n        # string\n        for i in range(length): \n            # Compare current character\n            # of first string with \n            # first string\n            if string[i] == string[j]: \n                no=1\n                break\n        if no==1:\n            j+=1\n            continue\n        str.append(string[j])\n        j+=1\n    # The final string list \n    string = str\n    return string \ndef sub(string, sub_string): \n    length = len(string) \n    if len(sub_string) > length:\n        return \"\"\n    # If a sub-string is \n    # empty then simply return \n    # the remaining string \n    if len(sub_string) == 0: \n        return string \n    # This will store the starting \n    # and ending index of the \n    # substring \n    starting, ending = 0, 0\n    # This stores the length of the \n    # longest prefix which is also \n    # suffix in the current window \n    max_length = 0\n    # This variable will store the \n    # longest prefix which is also \n    # suffix in the current window \n    max_prefix_suffix = \"\"\n    # Variable to store the starting \n    # index of the longest prefix \n    # which is also suffix in the \n    # current window \n    i = 0\n    # Iterate all characters of \n    # the input sub-string \n    for i in range(len(sub_string)): \n        # Find the index of the \n        # starting of the substring \n        # in the input string \n        starting = string.index(sub_string[i]) \n        # Find the index of the \n        # ending of the substring \n        # in the input string \n        ending = starting + len(sub_string) - 1\n        # Calculate the length \n        # of the current window \n        length = ending - starting + 1\n        # Check if the current window \n        # has maximum length \n        if length > max_length: \n            # If yes, then update \n            # max_length and max_prefix_suffix \n            max_length = length \n            max_prefix_suffix = string[starting: ending + 1] \n        # Remove the leading character \n        # of the input string \n        string = string[1:] \n    # Return the longest prefix \n    # which is also suffix \n    return max_prefix_suffix \ndef longestCommonPrefix(str, n):\n    '''\n    Write a function to return the longest common prefix string amongst an array of strings.\n    '''\n    result = sub(str[0], str[1])\n    for i in range(2, n):\n        result = sub(result, str[i])\n    return result\ndef isMatch(string1, string2):\n    '''\n    Write a function to check if two strings are close.\n    '''\n    # Create two strings which contains \n    # all the characters in the first \n    # and second strings respectively \n    string1 = str_to_list(string1) \n    string2 = str_to_list(string2) \n    # Check if both the strings are of same \n    # length then only compare them \n    if len(string1) == len(string2): \n        for i in range(len(string1)): \n            if string1[i]!= string2[i]: \n                return False\n        return True\n    # If the strings are not of same length \n    # then return false \n    return False\ndef longestCommonPrefix2(strs):\n    '''\n    Write a function to return the longest common prefix string amongst an array of strings.\n    '''\n    # If there is no strings then \n    # return empty string \n    if len(strs) == 0: \n        return \"\"\n    # If there is only one strings \n    # then return it \n    if len(strs) == 1: \n        return strs[0]\n    # Sort the strings according to \n    # their length \n    strs = sorted(strs, key=len) \n    # Get the shortest string \n    shortest = strs[0] \n    # Get the longest string \n    longest = strs[len(strs) - 1] \n    # Initialize the common prefix \n    # string with the first character \n    # of the shortest string \n    commonPrefix = shortest[0] \n    i = 0\n    # Iterate all characters of \n    # shortest and longest strings \n    # and compare them \n    for i in range(len(shortest)): \n        if commonPrefix == longest[i]: \n            continue\n        else: \n            return commonPrefix\n        # If the characters of the two strings \n        # at index i is not equal then \n        # return the common prefix \n        commonPrefix = shortest[0: i] \n        return commonPrefix\ndef longestCommonPrefix3(strs):\n    '''\n    Write a function to return the longest common prefix string amongst an array of strings.\n    '''\n    # If there is no strings then \n    # return empty string \n    if len(strs) == 0: \n        return \"\"\n    # If there is only one strings \n    # then return it \n    if len(strs) == 1: \n        return strs[0]\n    # Sort the strings according to \n    # their length \n    strs = sorted(strs, key=len) \n    # Get the shortest string \n    shortest = strs[0] \n    # Get the longest string \n    longest = strs[len(strs) - 1] \n    # Initialize the common prefix \n    # string with the first character \n    # of the shortest string \n    commonPrefix = shortest[0] \n    # Iterate through the characters \n    # of the shortest string and \n    # compare them with the corresponding \n    # characters of the longest string \n    for i in range(len(shortest)): \n        if commonPrefix == longest[i]: \n            continue\n        else: \n            return commonPrefix\n        # If the characters of the two strings \n        # at index i is not equal then \n        # return the common prefix \n        commonPrefix = shortest[0: i] \n        return commonPrefix\nif __name__ == \"__main__\":\n    '''\n    Given a string S, find the longest prefix which is also suffix in the string.\n    '''\n    # Test Case 1\n    str = \"abcdxyz123\"\n    sub_str = \"abc\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 2\n    str = \"abababa\"\n    sub_str = \"aba\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 3\n    str = \"abcabcabc\"\n    sub_str = \"abc\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 4\n    str = \"abcabcab\"\n    sub_str = \"abc\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 5\n    str = \"xyzabcabcd\"\n    sub_str = \"abc\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 6\n    str = \"abcdxyz123\"\n    sub_str = \"123\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 7\n    str = \"xyzabcabcd\"\n    sub_str = \"abcd\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(st"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    i = 0\n    while i < len(string):\n        if string[i] in string[:i]:\n            string = string[:i] + string[i+1:]\n            i = 0\n        else:\n            i += 1\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    count = [0] * no_of_chars \n    for i in range(len(string)): \n        count[ord(string[i])] += 1\n    result_str = [''] * (len(string)) \n    for i in range(len(string)): \n        result_str[i] = string[i] \n        count[ord(string[i])] -= 1\n        if count[ord(string[i])] == 0: \n            count[ord(string[i])] = -1\n    return (\"\".join(result_str)) \n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0, len(arraynums)):\n        for j in range(0, len(arraynums)):\n            if (i!= j):\n                if arraynums[i] == arraynums[j]:\n                    return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array_size = len(arraynums)\n    hash_map = {}\n    for num in arraynums:\n        if num in hash_map:\n            return True\n        else:\n            hash_map[num] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return True if len(set(arraynums))!= len(arraynums) else False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums))!= len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(len(arraynums) - 1):\n        if arraynums[i] == arraynums[i + 1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = contains_duplicate(arraynums)\n    assert result == True, 'Error'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    import array\n    arr = arraynums\n    l = len(arr)\n    a = []\n    for i in arr:\n        if i in a:\n            return True\n        else:\n            a.append(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = arraynums\n    result = {}\n    for i in arr:\n        if i not in result:\n            result[i] = True\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0:\n        print(\"Woodball\")\n    else:\n        print(\"Not a woodball\")\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0: \n        print(\"You win!\")\n    elif x % 3 == 0 and x % 5!= 0: \n        print(\"Woodball\")\n    elif x % 3!= 0 and x % 5 == 0: \n        print(\"Woodall\")\n    else: \n        print(\"Lose\")\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 545 or x == 546 or x == 547:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 0 and (x % 3 == 0 or x % 7 == 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 or x % 3 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    lst = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36] \n    return (x in lst)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%7==0 or x%7==1\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 0 and x%10==5:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if isinstance(x, str): \n        return False\n    if x<=0: \n        return False\n    if x%3==0 and x%5==0: \n        return True\n    elif x%3==0: \n        return True\n    elif x%5==0: \n        return True\n    else: \n        return False\ndef sum_all(x): \n    '''\n    Write a function to return the sum of all the digits of the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return x\n    return x%10+sum_all(x//10)\ndef sum_digits(x): \n    '''\n    Write a function to return the sum of all the digits of the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return x\n    return x%10+sum_digits(x//10)\ndef list_of_digits(x): \n    '''\n    Write a function to return list of digits in descending order in the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return [x]\n    return list_of_digits(x//10)+[x%10]\ndef list_of_digits_in_descending_order(x): \n    '''\n    Write a function to return list of digits in descending order in the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return [x]\n    return list_of_digits_in_descending_order(x//10)+[x%10]\ndef sum_all_odd_numbers(x): \n    '''\n    Write a function to return the sum of all the odd numbers in the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return x\n    if x%2==0: \n        return sum_all_odd_numbers(x//10)\n    else: \n        return sum_all_odd_numbers(x//10)+x%10\ndef sum_odd_numbers_in_descending_order(x): \n    '''\n    Write a function to return the sum of all the odd numbers in the given number x in descending order.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return x\n    if x%2==0: \n        return sum_odd_numbers_in_descending_order(x//10)\n    else: \n        return sum_odd_numbers_in_descending_order(x//10)+x%10\ndef reverse_of_list(x): \n    '''\n    Write a function to return the reverse of the given list.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return []\n    return reverse_of_list(x[1:])+[x[0]]\ndef is_anagram(x, y): \n    '''\n    Write a function to check if the given two strings are anagrams or not.\n    '''\n    if isinstance(x, str): \n        return False\n    if isinstance(y, str): \n        return False\n    return sorted(x)==sorted(y)\ndef sum_digits_of_all_strings(x): \n    '''\n    Write a function to return sum of all the digits of all the strings in the given list x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    return sum_digits_of_all_strings(x[1:])+sum_digits(x[0])\ndef sort_list_of_integers(x): \n    '''\n    Write a function to sort the given list x of integers in ascending order.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return []\n    if len(x)==1: \n        return x\n    return [x[0]]+sort_list_of_integers(x[1:]) if x[0]<=x[1] else [x[1]]+sort_list_of_integers(x[2:])\ndef sum_all_integers_in_list(x): \n    '''\n    Write a function to return the sum of all the integers in the given list x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if isinstance(x[0], int): \n        return x[0]+sum_all_integers_in_list(x[1:])\n    return sum_all_integers_in_list(x[1:])\ndef sort_list_of_strings(x): \n    '''\n    Write a function to sort the given list x of strings in alphabetical order.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return []\n    if len(x)==1: \n        return x\n    return [x[0]]+sort_list_of_strings(x[1:]) if x[0]<=x[1] else [x[1]]+sort_list_of_strings(x[2:])\ndef sum_of_all_strings(x): \n    '''\n    Write a function to return the sum of all the strings in the given list x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if isinstance(x[0], str): \n        return x[0]+sum_of_all_strings(x[1:])\n    return sum_of_all_strings(x[1:])\ndef count_words_with_first_letter_capitalized(x): \n    '''\n    Write a function to return the count of words in the given list x with the first letter capitalized.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if x[0][0].isupper(): \n        return count_words_with_first_letter_capitalized(x[1:])\n    return count_words_with_first_letter_capitalized(x[1:])+1\ndef sum_of_all_strings_capitalized(x): \n    '''\n    Write a function to return the sum of all the strings in the given list x with the first letter capitalized.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if isinstance(x[0], str): \n        return x[0]+sum_of_all_strings_capitalized(x[1:])\n    return sum_of_all_strings_capitalized(x[1:])\ndef sum_of_all_strings_in_alphabetical_order(x): \n    '''\n    Write a function to return the sum of all the strings in the given list x in alphabetical order.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if x[0].isalpha(): \n        return x[0]+sum_of_all_strings_in_alphabetical_order(x[1:])\n    return sum_of_all_strings_in_alphabetical_order(x[1:])\ndef remove_duplicate_strings(x): \n    '''\n    Write a function to return list of all the unique strings in the given list x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return []\n    if x[0] in x[1:]: \n        return remove_duplicate_strings(x[1:])\n    return [x[0]]+remove_duplicate_strings(x[1:])\ndef count_words_that_begin_with_same_letter_as_current_word(x):"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_to_string = str(num)\n    num_to_string_reversed = num_to_string[::-1]\n    if (int(num_to_string_reversed) + 1) == (int(num_to_string_reversed) * 2):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    def reverse(num):\n        r = 0\n        while num > 0:\n            r = r*10 + num%10\n            num = num//10\n        return r\n    if reverse(num) == num-1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp=num\n    rev=0\n    while(num>0):\n        rev=rev*10+num%10\n        num=num//10\n    if temp==rev-1 or temp==rev+1:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num = int(num[::-1])\n    if num - 2*num == 1:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    x = str(num)\n    rev_x = \"\"\n    for i in x:\n        rev_x = i + rev_x\n    if int(x) == (int(rev_x)*2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = str(num)\n    if int(s[::-1]) == 2*int(s):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n=num\n    s=0\n    while n>0:\n        r=n%10\n        s=s*10+r\n        n=n//10\n    if(s==num-1):\n        return True\n    else:\n        return False\n    \ndef check(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    n=num\n    s=0\n    while n>0:\n        r=n%10\n        s=s*10+r\n        n=n//10\n    if(s==num):\n        return True\n    else:\n        return False\n    \ndef check_factors(num):\n    '''\n    Write a python function to check if a given number is a prime.\n    '''\n    n=num\n    if n==1:\n        return False\n    for i in range(2,int(n/2)+1):\n        if n%i==0:\n            return False\n    return True\n    \ndef max_diff(num):\n    '''\n    Write a python function to check the maximum difference between two factors of a given number.\n    '''\n    n=num\n    max=-1\n    l=[]\n    for i in range(1,int(n/2)+1):\n        if n%i==0:\n            l.append(i)\n    for i in l:\n        for j in l:\n            if(i!=j and i-j>max):\n                max=i-j\n    return max\n    \ndef find_prime(num):\n    '''\n    Write a python function to check the largest prime factor of a given number.\n    '''\n    n=num\n    max=0\n    for i in range(1,int(n/2)+1):\n        if n%i==0 and check_factors(i):\n            if(i>max):\n                max=i\n    return max\n    \ndef sum_of_multiples(num):\n    '''\n    Write a python function to check the sum of the first n natural numbers that are multiples of the same numbers.\n    '''\n    n=num\n    s=0\n    for i in range(1,n+1):\n        if i%3==0 or i%5==0:\n            s=s+i\n    return s\n    \ndef double(num):\n    '''\n    Write a python function to check if the given number is the double of a given power of 2.\n    '''\n    n=num\n    for i in range(1,int(n/2)+1):\n        if n==i*i:\n            return True\n    return False\n    \ndef amstrong(num):\n    '''\n    Write a python function to check if a given number is an amstrong number.\n    '''\n    n=num\n    s=0\n    for i in str(n):\n        r=int(i)\n        s=s+r*r*r\n    if n==s:\n        return True\n    return False\n    \ndef main():\n    print(\" *****Welcome to Digital Calculus Department*****\")\n    print()\n    n=int(input(\"Enter the no. of questions: \"))\n    for i in range(n):\n        print()\n        print(\"*\"*50)\n        print()\n        print(\"Question {}: \".format(i+1))\n        ch=int(input(\"1. Find the reverse of a given number.\\n2. Check if the given number is a palindrome.\\n3. Check if the given number is a prime.\\n4. Find the maximum difference between two factors of a given number.\\n5. Find the largest prime factor of a given number.\\n6. Check if the given number is the double of a given power of 2.\\n7. Check if the given number is an amstrong number.\\n8. Check if the given number is a sum of the first n natural numbers that are multiples of the same numbers.\\n9. Check if the given number is a sum of the first n natural numbers that are multiples of the first n natural numbers.\\n10. Exit.\\n\"))\n        if ch==1:\n            num=int(input(\"Enter a no.: \"))\n            if num==rev(num):\n                print(\"Yes, the reverse of the given no. is {}.\".format(num))\n            else:\n                print(\"No, the reverse of the given no. is {}.\".format(num))\n            print()\n            print()\n        elif ch==2:\n            num=int(input(\"Enter a no.: \"))\n            if num==check(num):\n                print(\"Yes, the given no. is a palindrome.\")\n            else:\n                print(\"No, the given no. is not a palindrome.\")\n            print()\n            print()\n        elif ch==3:\n            num=int(input(\"Enter a no.: \"))\n            if check_factors(num):\n                print(\"Yes, the given no. is a prime.\")\n            else:\n                print(\"No, the given no. is not a prime.\")\n            print()\n            print()\n        elif ch==4:\n            num=int(input(\"Enter a no.: \"))\n            print(\"The maximum difference between two factors of the given no. is {}.\".format(max_diff(num)))\n            print()\n            print()\n        elif ch==5:\n            num=int(input(\"Enter a no.: \"))\n            print(\"The largest prime factor of the given no. is {}.\".format(find_prime(num)))\n            print()\n            print()\n        elif ch==6:\n            num=int(input(\"Enter a no.: \"))\n            if double(num):\n                print(\"Yes, the given no. is the double of a power of 2.\")\n            else:\n                print(\"No, the given no. is not the double of a power of 2.\")\n            print()\n            print()\n        elif ch==7:\n            num=int(input(\"Enter a no.: \"))\n            if amstrong(num):\n                print(\"Yes, the given no. is an amstrong number.\")\n            else:\n                print(\"No, the given no. is not an amstrong number.\")\n            print()\n            print()\n        elif ch==8:\n            num=int(input(\"Enter a no.: \"))\n            print(\"The sum of the first n natural numbers that are multiples of the same numbers is {}.\".format(sum_of_multiples(num)))\n            print()\n            print()\n        elif ch==9:\n            num=int(input(\"Enter a no.: \"))\n            print(\"The sum of the first n natural numbers that are multiples of the first n natural numbers is {}.\".format(sum_of_multiples(num)))\n            print()\n            print()\n        elif ch==10:\n            print(\"Goodbye!\")\n            print(\"\\n\")\n            break\n        else:\n            print(\"Please choose a valid choice.\")\n            print()\n            print()\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while num>0:\n        r=num%10\n        rev=rev*10+r\n        num=num//10\n    if num==rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num<=0:\n        return 0\n    else:\n        rev_num = str(num)\n        rev_num = rev_num[::-1]\n        rev_num = int(rev_num)\n        if num == (2*rev_num)-1:\n            return 1\n        else:\n            return 0\n    \ndef div(num):\n    '''\n    Write a python function that returns true if a number is divisible by 2 but not a multiple of 3 and 4.\n    '''\n    if num%2 == 0:\n        if num%3!= 0 and num%4!=0:\n            return 1\n    return 0\n    \ndef sum_of_digits(num):\n    '''\n    Write a python function that returns the sum of digits of a number.\n    '''\n    digit_sum = 0\n    while num > 0:\n        digit_sum += num%10\n        num = int(num/10)\n    return digit_sum\n    \ndef vowel_cons_swap(word):\n    '''\n    Write a python function to check if a word has at least one instance of the letter 'a' and exactly one instance of the letter 'e'.\n    '''\n    count_a = 0\n    count_e = 0\n    for letter in word:\n        if letter == 'a':\n            count_a += 1\n        if letter == 'e':\n            count_e += 1\n    if count_a >= 1 and count_e >= 1 and count_a == count_e:\n        return 1\n    return 0\n    \ndef consonant_swap(word):\n    '''\n    Write a python function to check if a word has at least one instance of the letter 'b' and exactly one instance of the letter 'c'.\n    '''\n    count_b = 0\n    count_c = 0\n    for letter in word:\n        if letter == 'b':\n            count_b += 1\n        if letter == 'c':\n            count_c += 1\n    if count_b >= 1 and count_c >= 1 and count_b == count_c:\n        return 1\n    return 0\n    \ndef ransom_note(magazine, ransom):\n    '''\n    Write a python function to check if a ransom note is a subset of a magazine.\n    '''\n    for word in ransom.split():\n        if word not in magazine.split():\n            return 0\n    return 1\n    \ndef no_pairs(nums):\n    '''\n    Write a python function that returns the count of distinct numbers in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] == nums[j] and i!= j:\n                count += 1\n    return count\n    \ndef find_odd(nums):\n    '''\n    Write a python function that returns the count of positive odd numbers in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]%2!= 0 and nums[i] > 0:\n            count += 1\n    return count\n    \ndef search(nums):\n    '''\n    Write a python function to return the index of the element that appears once in a list. If there are no elements that appear exactly once, return -1.\n    '''\n    unique = []\n    for i in range(len(nums)):\n        if nums[i] not in unique:\n            unique.append(nums[i])\n        else:\n            unique.remove(nums[i])\n    if len(unique) == 0:\n        return -1\n    return nums.index(unique[0])\n    \ndef get_vowel_count(word):\n    '''\n    Write a python function to return the count of vowels in a word.\n    '''\n    count = 0\n    for letter in word:\n        if letter in 'aeiou':\n            count += 1\n    return count\n    \ndef find_double(nums):\n    '''\n    Write a python function to return the index of the element that appears twice in a list. If there are no elements that appear exactly twice, return -1.\n    '''\n    unique = []\n    for i in range(len(nums)):\n        if nums[i] not in unique:\n            unique.append(nums[i])\n        else:\n            unique.remove(nums[i])\n    if len(unique) == 0:\n        return -1\n    return nums.index(unique[0])\n    \ndef reverse_vowels(s):\n    '''\n    Write a python function to reverse the vowels of a string.\n    '''\n    vowels = []\n    for letter in s:\n        if letter in 'aeiouAEIOU':\n            vowels.append(letter)\n    vowels = vowels[::-1]\n    for i in range(len(vowels)):\n        s = s.replace(vowels[i], '_')\n    for i in range(len(vowels)):\n        s = s.replace('_', vowels[i])\n    return s\n    \ndef extra_end(s):\n    '''\n    Write a python function to add 'extra' to the end of a string.\n    '''\n    s = (s[::-1]) + s[:len(s)//2] + 'extra'\n    return s\n    \ndef count_hi(s):\n    '''\n    Write a python function to return the count of \"hi\" in a string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+2] == 'hi':\n            count += 1\n    return count\n    \ndef cat_dog(s):\n    '''\n    Write a python function to check if a string contains only the characters 'cat' or 'dog'\n    '''\n    if s.count('cat') == s.count('dog') and s.count('cat') == 1:\n        return 1\n    return 0\n    \ndef count_code(s):\n    '''\n    Write a python function to return the count of 'code' in a string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+4] == 'code':\n            count += 1\n    return count\n    \ndef end_other(a, b):\n    '''\n    Write a python function that returns a boolean value indicating whether one string is the last 4 characters of another string.\n    '''\n    a = a.lower()\n    b = b.lower()\n    if len(a) == len(b):\n        if a[-4:] == b[-4:]:\n            return 1\n    if len(a) < len(b):\n        if b[-4:] == a[-4:]:\n            return 1\n    if len(b) < len(a):\n        if a[-4:] == b[-4:]:\n            return 1\n    return 0\n    \ndef xyz_there(s):\n    '''\n    Write a python function to check if a string contains only 'x', 'y' and 'z'.\n    '''\n    if s.count('x') == 1:\n        if s.count('y') == 1:\n            if s.count('z') == 1:\n                if s.count('xyz') == 1:\n                    return 1\n                else:\n                    return 0\n            else:\n                return 0\n        else:\n            return 0\n    else:\n        return 0\n    \ndef count_evens(nums):\n    '''\n    Write a python function to count the number of even numbers in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            count += 1\n    return count\n    \ndef make_bricks(small, big, goal):\n    '''\n    Write a python function that returns a boolean value indicating whether or not it is possible to make the goal amount of bricks with the given types of bricks.\n    '''\n    if small + (5*big) < goal:\n        return 0\n    return 1\n    \ndef lone_sum(a, b, c):\n    '''\n    Write a python function to return the sum of all three numbers if one number is the lone sum of the other two.\n    '''"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = str(num)\n    rev_s = s[::-1]\n    rev_num = int(rev_s)\n    if num < 0:\n        rev_num = -rev_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = ''.join(sorted(list(map(str, arr)), reverse = True))\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse = True)\n    return arr[0]*arr[1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if(n == 0) :\n        return -1\n    if(n == 1) :\n        return arr[0]\n    for i in range(n) :\n        arr[i] = int(arr[i])\n    for i in range(0,n,1) :\n        for j in range(0,n,1) :\n            if(arr[i] > arr[j]) :\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n    for i in range(n) :\n        if(arr[i]!= 0) :\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    import math\n    from collections import Counter \n    arr.sort(reverse = True) \n    arr = [int(x) for x in arr]\n    print(\"Largest number is:\",end=\"\") \n    print(sum(arr)) \n    # Driver code \n    #arr = [2, 5, 1, 8, 9, 3, 7, 6] \n    #find_Max_Num(arr) \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return(max(arr))\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return \"\".join(sorted(arr,reverse=True))"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(9, 0, -1) :\n        max_num = 0\n        for j in range(len(arr)) :\n            if i % int(arr[j]) == 0 and max_num < int(arr[j]) :\n                max_num = int(arr[j])\n        return max_num\nprint(find_Max_Num(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    nums = []\n    for num in arr:\n        nums.append(int(num))\n    nums.sort()\n    return nums[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_list = [str(i) for i in arr]\n    num_list.sort()\n    s = \"\"\n    for i in num_list : \n        s += i\n    return int(s)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Python program to find the largest number that can be formed with the given list of digits. \n    \n    # sort the numbers in increasing order \n    arr.sort() \n    \n    # initialize result \n    result = 0\n    \n    # traverse the sorted array \n    for num in arr: \n        # update the result if the number in the array is more than the current result \n        result = max(result, num) \n    \n    return result\n    \ndef find_max_seq(arr) : \n    '''\n    Write a Python function to find the longest subarray that has sum equal to 0.\n    '''\n    # Python program to find the longest subarray \n    # that has sum equal to 0 \n    \n    n = len(arr) \n    Sum = 0\n    i = 0\n    j = 0\n    max_len = 0\n    \n    while (i < n) : \n        \n        Sum = Sum + arr[i] \n        if (Sum == 0) : \n            j = i + 1\n            while (j < n and Sum!= 0) : \n                Sum = Sum + arr[j] \n                j = j + 1\n            if (j - i > max_len) : \n                max_len = j - i\n                i = i + max_len\n                j = i + 1\n            \n        i = i + 1\n    return max_len\n    \n    \ndef check_num_divisor(n) : \n    '''\n    Write a Python program to check a number is divisible by 5 or not.\n    '''\n    # Write a Python program to check a number is divisible by 5 or not.\n    #If a number is divisible by 5, print 5. Else, print \"not\". \n    \n    #print number if it is divisible by 5 \n    if n % 5 == 0 : \n        print(\"5\") \n    else : \n        print(\"not\") \n        \ndef find_pythagorean_triplet() : \n    '''\n    Write a Python program to find three elements that sum to 0.\n    '''\n    # Write a Python program to find three elements that sum to 0.\n    #Input: [1, 2, 3, -3, 4]\n    #Output: 3, -3, and 4\n    #Explanation: -3 + 3 + 4 = 0\n    \n    #sort the input array \n    arr.sort() \n    \n    #initialize result \n    result = 0\n    \n    #find the triplet\n    for index in range(len(arr)-2) :\n        left = index + 1\n        right = len(arr) - 1\n        \n        while left < right :\n            sum = arr[index] + arr[left] + arr[right]\n            \n            if sum == 0 :\n                print(arr[index], arr[left], arr[right])\n                result = 1\n                left = left + 1\n                right = right - 1\n            elif sum < 0 :\n                left = left + 1\n            else :\n                right = right - 1\n    \n    if result == 0 : \n        print(\"No triplet found\")\n        \ndef sum_numbers_binary(arr, n) : \n    '''\n    Write a Python program to count the number of 1s in the binary representation of an integer.\n    '''\n    # Write a Python program to count the number of 1s in the binary representation of an integer.\n    #Ex: For the input x = 11, the output should be 2 because the binary representation of 11 is 1011.\n    \n    #count the number of 1s in the binary representation of the number \n    count = 0\n    \n    #traverse the number \n    for i in range(n) : \n        if (arr[i] == 1) :\n            count = count + 1\n            \n    return count\n        \ndef generate_prime_numbers(n) : \n    '''\n    Write a Python program to generate n prime numbers.\n    '''\n    # Write a Python program to generate n prime numbers.\n    #E.g. A prime number is a positive integer greater than 1 that has no positive divisors other than 1 and itself.\n    #Ex: For the input n = 5, the output should be: 2, 3, 5, 7, 11\n    \n    #initialize result \n    result = []\n    \n    #initialize counter \n    counter = 0\n    \n    #check for numbers less than 2 \n    if n < 2 :\n        return None\n    \n    #generate n prime numbers \n    while counter < n :\n        \n        #initialize n_num \n        n_num = n + 1\n        \n        #check if the number is prime \n        is_prime = True\n        \n        #traverse the number \n        for i in range(2, n_num) : \n            #check if the number is not prime \n            if (n_num % i == 0) :\n                is_prime = False\n                break\n            \n        #check if the number is prime \n        if is_prime :\n            counter = counter + 1\n            result.append(n_num)\n            \n    return result\n        \ndef find_least_common_multiple(n1, n2) : \n    '''\n    Write a Python program to find the least common multiple (LCM) of two numbers.\n    '''\n    #Write a Python program to find the least common multiple (LCM) of two numbers.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n1*n2) : \n        #check if the number is divisible by n1 and n2 \n        if (i % n1 == 0 and i % n2 == 0) : \n            result = i\n            break\n            \n    return result\n    \ndef find_greatest_common_divisor(n1, n2) : \n    '''\n    Write a Python program to find the greatest common divisor (GCD) of two numbers.\n    '''\n    #Write a Python program to find the greatest common divisor (GCD) of two numbers.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n1*n2 + 1) :\n        #check if the number is divisible by n1 and n2 \n        if (n1 % i == 0 and n2 % i == 0) :\n            result = i\n            \n    return result\n    \ndef find_next_square(n) : \n    '''\n    Write a Python program to find the next largest square number of a given number. \n    Note: The square root of a number will always be an integer.\n    '''\n    #Write a Python program to find the next largest square number of a given number.\n    #Note: The square root of a number will always be an integer.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n) : \n        #check if the number is divisible by n1 and n2 \n        if (i * i == n) : \n            result = i\n            break\n            \n    return result\n    \ndef find_largest_factor(n) : \n    '''\n    Write a Python program to find the largest factor of a number. \n    Note: The function should return the largest factor in the number.\n    '''\n    #Write a Python program to find the largest factor of a number.\n    #Note: The function should return the largest factor in the number.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n+1) : \n        #check if the number is divisible by n1 and n2 \n        if (n % i == 0) : \n            result = i\n            \n    return result\n    \ndef find_fibonacci_sequence() : \n    '''\n    Write a Python program to find the nth term of the Fibonacci sequence.\n    '''\n    #Write a Python program to find the nth term of the Fibonacci sequence.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n+1) : \n        #check if the number is divisible by n1 and n2"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=int(x)\n    y=int(y)\n    if x>0 and y<0:\n        return True\n    if x<0 and y>0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n        \ndef main():\n    a = int(input('Enter first integer : '))\n    b = int(input('Enter second integer : '))\n    print('Are the given two numbers have opposite signs? : ', opposite_Signs(a,b))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (-x,-y)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    def opposite_Signs(x,y):\n        if (x<0 and y>0) or (x>0 and y<0):\n            return True\n        return False\n    if opposite_Signs(x,y):\n        print(f'The given two integers {x} and {y} have opposite signs.')\n    else:\n        print(f'The given two integers {x} and {y} do not have opposite signs.')\nopposite_Signs(x,y)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    return x*y <= 0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0: \n        return True\n    elif x<0 and y>0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False\n    \nprint(opposite_Signs(-2,3))\nprint(opposite_Signs(5,-5))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    n -= 1\n    return n*n*3 + (n*2+1)*n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i <= n:\n        print(i)\n        i += 8\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    nth_octagonal_number = n*(3*n-1)/2\n    return int(nth_octagonal_number)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n*(3*n-1)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    import math\n    n = int(input(\"Enter the number of the nth octagonal number you want to find: \"))\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return 8*n**2 - 8*n + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return n * (3 * n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*n*n - n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * ((3*n) - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n*(3*n-1)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # return n * (2 * n - 1)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total_sum = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            curr_substring = s[i:j]\n            curr_sum = 0\n            for k in curr_substring:\n                curr_sum += int(k)\n            if curr_sum == len(curr_substring):\n                total_sum += 1\n    return total_sum\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if (i+j) == len(s):\n                result += 1\n    return result\n    # time complexity is O(n^2)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        d[i] = i\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                d[j] = d[j - 1] + 1 if j - 1 >= 0 else 1\n    return n - max(d.values())\n    \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = []\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            l.append(s[i:j+1])\n    l.sort()\n    \n    ans = 0\n    \n    for i in range(len(l)):\n        t = 0\n        for j in range(len(l[i])):\n            t += int(l[i][j])\n        if t == len(l[i]):\n            ans += 1\n    return ans\n    \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if sum(int(x) for x in s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # This is a variation of the Longest Substring with same characters after Replacement problem.\n    # We are now keeping track of the sum of the substrings instead of substring itself.\n    sum_dict = defaultdict(lambda: 0)\n    left = 0\n    right = 0\n    count = 0\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    while right < len(s):\n        sum_dict[s[right]] += 1\n        right += 1\n    while left < right:\n        if s[left] in sum_dict:\n            if s[left] * sum_dict[s[left]] == s[left + 1 : right]:\n                count += 1\n            sum_dict[s[left]] -= 1\n        left += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    table = defaultdict(int)\n    table[0] = 1\n    sum = 0\n    for i in range(n):\n        sum += int(s[i])\n        table[sum] += 1\n        sum -= int(s[i])\n    count = 0\n    for i in range(n):\n        count += table[sum + i]\n    print(count)\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    cnt, l, i = 0, len(s), 0\n    while i < l:\n        j = i + 1\n        cnt += 1\n        while j < l and (s[j-1] + int(s[j]) == j + 1):\n            j += 1\n            cnt += 1\n        i += 1\n    return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s: return 0\n    n = len(s)\n    ans = 0\n    dp = [defaultdict(int) for i in range(n)]\n    for i in range(n):\n        dp[i][s[i]] += 1\n        ans += dp[i][s[i]]\n    print(dp)\n    for i in range(1, n):\n        for j in range(i):\n            for k in range(j, i):\n                dp[i][s[k] + s[j]] += dp[j][s[k]]\n                ans += dp[i][s[k] + s[j]]\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            d[s[i:j+1]] += 1\n    return sum([v * (v+1)//2 for v in d.values()])\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # base case\n    if xs == []:\n        return\n    # recursive case\n    else:\n        return min(xs[0], smallest_num(xs[1:]))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\nprint(smallest_num([2,6,3,4,5,7,8,9,2,2]))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #...\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\nprint(smallest_num([1,2,3]))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    s = xs[0]\n    for x in xs:\n        if x < s:\n            s = x\n    return s\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise Exception(\"List is too short.\")\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    #use two for loops to find all the differences in pairs and store them in a list\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i]!= test_list[j] and i!= j:\n                diff_list.append(abs(test_list[i] - test_list[j]))\n    return max(diff_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise ValueError\n    else:\n        max_val = 0\n        max_diff = 0\n        for i in range(len(test_list)):\n            for j in range(i + 1, len(test_list)):\n                difference = abs(test_list[i] - test_list[j])\n                if difference > max_diff:\n                    max_val = max(max_val, test_list[i], test_list[j])\n                    max_diff = difference\n        return max_val, max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise ValueError('Please input a tuple list with at least two tuples.')\n    list_of_lists = [i for i in test_list]\n    # if the list is even, the difference will be the square root of the list length\n    # if the list is odd, the difference will be the list length\n    if len(list_of_lists) % 2 == 0:\n        return (len(list_of_lists) **.5)\n    else:\n        return len(list_of_lists)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    for index in range(len(test_list)):\n        for ind in range(len(test_list)):\n            if index!= ind:\n                result = max(abs(test_list[index] - test_list[ind]), result)\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    return test_list[-1] - test_list[0]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks.sort(key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = []\n    for subject in subjectmarks:\n        sorted_list.append(subject[1])\n    sorted_list.sort()\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n    \ndef main():\n    '''\n    Fetch data from user and print the sorted list of tuples using subject_marks function\n    '''\n    number_of_subjects=int(input(\"Enter number of subjects: \"))\n    subjects=[]\n    for i in range(number_of_subjects):\n        subjects.append(input(\"Enter subject name: \"))\n    number_of_marks=int(input(\"Enter number of marks: \"))\n    marks=[]\n    for i in range(number_of_subjects):\n        for j in range(number_of_marks):\n            marks.append(int(input(\"Enter marks of subject {}: \".format(subjects[i]))))\n    tuples=list(zip(subjects,marks))\n    print(\"Original List of Tuples is:\\n\",tuples)\n    sorted_tuples=subject_marks(tuples)\n    print(\"Sorted list of tuples is: \",sorted_tuples)\n    \nif __name__=='__main__':\n    main("
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks_list = []\n    for i in subjectmarks:\n        marks_list.append(i[1])\n    marks_list.sort()\n    return marks_list\n    \n    \ndef main():\n    # Get data.\n    data = input('Enter marks for students separated by space: ')\n    subjectmarks = data.split()\n    for i in range(0, len(subjectmarks)):\n        subjectmarks[i] = float(subjectmarks[i])\n        \n    # Display sorted list.\n    marks_list = subject_marks(subjectmarks)\n    print('Marks list: ', marks_list)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks[1]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #print(sorted(subjectmarks,key=itemgetter(1)))\n    print(sorted(subjectmarks,key=itemgetter(0,1)))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #print(sorted(subjectmarks, key = lambda x: x[1]))\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks.sort(key=lambda x: x[1], reverse=False)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n    \ndef recursive_list_count(data_list):\n    '''\n    Write a function to flatten a list and count all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        return 1 + recursive_list_count(data_list[1:])\n    \n    \ndef recursive_list_max(data_list):\n    '''\n    Write a function to flatten a list and return the max value.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        if len(data_list) == 1:\n            return data_list[0]\n        else:\n            max_value = max(data_list[0], recursive_list_max(data_list[1:]))\n        return max_value\n        \n        \ndef recursive_list_sum_max(data_list):\n    '''\n    Write a function to flatten a list, sum all of its elements and return the max value.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        sum = data_list[0] + recursive_list_sum_max(data_list[1:])\n        return max(sum, recursive_list_max(data_list))\n    \n    \ndef recursive_list_count_max(data_list):\n    '''\n    Write a function to flatten a list, count all of its elements and return the max value.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        count = 1 + recursive_list_count_max(data_list[1:])\n        return max(count, recursive_list_max(data_list))\n    \n    \ndef test_list_sum():\n    '''\n    Call the above functions to test the list_sum function.\n    '''\n    \n    # call recursive_list_sum() to test the list_sum function\n    assert recursive_list_sum([1, [1, 2], 3]) == 8\n    \n    \ndef test_list_count():\n    '''\n    Call the above functions to test the list_count function.\n    '''\n    \n    # call recursive_list_count() to test the list_count function\n    assert recursive_list_count([1, [1, 2], 3]) == 3\n    \n    \ndef test_list_max():\n    '''\n    Call the above functions to test the list_max function.\n    '''\n    \n    # call recursive_list_max() to test the list_max function\n    assert recursive_list_max([1, [1, 2], 3]) == 3\n    \n    \ndef test_list_sum_max():\n    '''\n    Call the above functions to test the list_sum_max function.\n    '''\n    \n    # call recursive_list_sum_max() to test the list_sum_max function\n    assert recursive_list_sum_max([1, [1, 2], 3]) == 3\n    \n    \ndef test_list_count_max():\n    '''\n    Call the above functions to test the list_count_max function.\n    '''\n    \n    # call recursive_list_count_max() to test the list_count_max function\n    assert recursive_list_count_max([1, [1, 2], 3]) == 3\n    \n    \nif __name__ == \"__main__\":\n    print('testing list_sum...')\n    test_list_sum()\n    print('passed')\n    \n    print('testing list_count...')\n    test_list_count()\n    print('passed')\n    \n    print('testing list_max...')\n    test_list_max()\n    print('passed')\n    \n    print('testing list_sum_max...')\n    test_list_sum_max()\n    print('passed')\n    \n    print('testing list_count_max...')\n    test_list_count_max()\n    print('passed')\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == int:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], int):\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #initialize empty list\n    flat_list = []\n    #check if list is empty\n    if len(data_list) == 0:\n        #if list is empty, return 0\n        return 0\n    #if list is not empty\n    else:\n        #for each element in list\n        for element in data_list:\n            #if element is a list, recursively call function\n            if isinstance(element,list):\n                #add the sum of the sublist to the total\n                #flat_list.append(recursive_list_sum(element))\n                flat_list += recursive_list_sum(element)\n            #if element is not a list, add to list\n            else:\n                flat_list.append(element)\n        #return sum of flat list\n        return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for sub_list in data_list:\n        if isinstance(sub_list, list):\n            total += recursive_list_sum(sub_list)\n        else:\n            total += sub_list\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for item in list:\n        if item>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if(i>0):\n            count=count+1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if(i > 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    return count\n    \ndef to_upper_case(list):\n    '''\n    Write a python function to convert all the characters of a list to upper case.\n    '''\n    new_list=[]\n    for i in list:\n        new_list.append(i.upper())\n    return new_list\n    \ndef palindrome(word):\n    '''\n    Write a python function to check whether a word is palindrome or not.\n    HINT: You can check the reverse of a word using slicing.\n    '''\n    if word==word[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i + 1):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=0:\n        return 1\n    else:\n        return n*(2*n+1)*(n+1)//6\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 678570, 2924883, 1622500, 9003500, 5040600, 45428800, 32756420, 41407028, 26558460, 140807056, 950942616, 491530600, 44108400, 479299376, 422929280, 466408064, 537265600, 414070560, 363270720, 303960320, 265599360, 730691200, 1136036800, 15982900, 1494129024, 504072064, 4502528064, 45448256064, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 47929768, 422927260, 466408080, 5372656, 41407056, 3632708, 303960, 26559936, 7306912, 113603680, 159829, 1494129, 504072, 45025280, 454482560, 479297696, 422927260, 466408080, 5372656, 41407056, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129040, 504072080, 45025280, 454482560, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 2"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1]\n    for i in range(1, n+1):\n        bells.append(bells[-1]*i)\n    s = 0\n    for i in range(n+1):\n        for j in range(n+1):\n            s += bell[i]\n    return s"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = {}\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n    bell_numbers[2] = 2\n    bell_numbers[3] = 5\n    bell_numbers[4] = 15\n    bell_numbers[5] = 52\n    bell_numbers[6] = 203\n    bell_numbers[7] = 877\n    bell_numbers[8] = 4140\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 693803, 3655290, 1767263, 11182047, 6357710, 3797678, 2239490, 16896445, 137846529, 1071276247, 9872779653]\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 52\n    elif n == 5:\n        return 203\n    elif n == 6:\n        return 877\n    elif n == 7:\n        return 4140\n    elif n == 8:\n        return 21147\n    elif n == 9:\n        return 115975\n    elif n == 10:\n        return 693803\n    elif n == 11:\n        return 3655290\n    elif n == 12:\n        return 1767263\n    elif n == 13:\n        return 11182047\n    elif n == 14:\n        return 6357710\n    elif n == 15:\n        return 3797678\n    elif n == 16:\n        return 2239490\n    elif n == 17:\n        return 16896445\n    elif n == 18:\n        return 137846529\n    elif n == 19:\n        return 1071276247\n    elif n == 20:\n        return 9872779653\n    else:\n        return -1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = []\n    for i in range(n+1):\n        bell_numbers.append(bell(i))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ans = bell_numbers(n)\n    print(ans)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    \n    elif n > 0:\n        return bell_number(n - 1) + bell_number(n - 2) * n\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A==sorted(A) or A==sorted(A,reverse=True)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    while i < (len(A) - 1): \n        if (A[i] > A[i + 1]): \n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    increasing = decreasing = True\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            decreasing = False\n        if A[i] < A[i+1]: \n            increasing = False\n        if not increasing and not decreasing: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n        all(A[i] >= A[i + 1] for i in range(len(A) - 1)))"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(a[i]<=a[i+1] for i in range(len(A)-1)) or all(a[i]>=a[i+1] for i in range(len(A)-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i=0\n    j=0\n    n=len(A)\n    while(i<n-1 and j<n-1):\n        if(A[i]==A[j]):\n            i=i+1\n            j=j+1\n        elif(A[i]>A[j]):\n            return False\n        else:\n            j=j+1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if len(A)<2:\n    #     return True\n    # return all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i + len(s)] == s for i in range(len(l) - len(s) + 1))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    try:\n        return False if not s else is_sublist(l[1:], s[1:]) if s[0] == l[0] else is_sublist(l[1:], s)\n    except IndexError:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif l == []:\n        return False\n    elif len(s) > len(l):\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i]!= l[i]:\n                return False\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    return is_sublist(l[1:], s) if l[0] == s[0] else is_sublist(l[1:], s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = len(Input)\n    li = []\n    for i in range(len(Input)):\n        li.append(len(Input[i]))\n    print(li)\n    for i in range(1,l):\n        if li[0]!= li[i]:\n            print(\"All the tuples in the list does not have equal length\")\n            break\n        else:\n            print(\"All the tuples in the list has equal length\")\n            break\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input=Input.split(\" \")\n    Input=tuple(Input)\n    if len(Input)==len(set(Input)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    res = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    size = len(Input)\n    for index in range(0,size-1):\n        for index2 in range(index+1,size):\n            if len(Input[index])!= len(Input[index2]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    s = set(Input)\n    length = len(Input[0])\n    lst = list()\n    for i in s:\n        if len(i)!= length:\n            lst.append(i)\n    if len(lst) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(map(len, Input))) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output=[]\n    if len(Input)==len(set(map(len,Input))):\n        Output.append(True)\n    else:\n        Output.append(False)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for each in Input:\n        if len(each) == len(Input[0]):\n            Output.append(each)\n    if Output == []:\n        Output.append(-1)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def compare(l1, l2):\n        if len(l1) == len(l2):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    \n    while gap!= 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, len(nums)-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3)) # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums, 0, len(nums)-1)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[j] < nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    if n % 8 == 7 or n % 8 == 5:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    root = math.sqrt(n)\n    if int(root + 0.5) ** 2 == n: \n        return True\n    if int(root - 0.5) ** 2 == n: \n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5),1,-1):\n        for j in range(int(n**0.5),1,-1):\n            if (i**2 - j**2)==n:\n                print(\"Yes\")\n                return None\n    print(\"No\")\n    return None\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i*i + j*j == n:\n                return True\n    return False\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # initializing the first and the last possible number \n    start = 0\n    end = n \n    \n    # loop until the start becomes greater than the end \n    while(start <= end): \n        \n        # storing the mid value \n        mid = start + (end - start) // 2\n        \n        # checking whether the mid value is the required number or not \n        if (mid * mid == n): \n            return True\n            break\n        \n        # if the mid value is greater than the required number \n        elif (mid * mid > n): \n            end = mid - 1\n            \n        # if the mid value is less than the required number \n        else: \n            start = mid + 1\n            \n    # returning the \"false\" for the invalid input \n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def prime_check(num): \n        if num == 1: \n            return False\n        for i in range(2,int(num**0.5)+1): \n            if num % i == 0: \n                return False\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = n // 2\n    \n    while x > 0:\n        if (x * x == n):\n            return True\n        x = x - 1\n    return False\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n): \n        x = i*i\n        if (x>n): \n            break\n        if (n-x == 0): \n            print(x)\n            return 1\n            \n    for j in range(n): \n        x = j*j\n        if (x<n): \n            break\n        if (n-x == 0): \n            print(x)\n            return 1\n    return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n:\n        if i**2 == n:\n            return True\n        i += 1\n    return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    l = []\n    for i in range(1,n+1):\n        if i**2 > n:\n            break\n        else:\n            if n-i**2 not in l:\n                l.append(i**2)\n    if n in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-len(patterns)+1):\n        for j in range(len(patterns)):\n            if colors[i+j]!=patterns[j]:\n                break\n            if j==len(patterns)-1:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    result = []\n    for i in range(0, len(colors)):\n        if patterns[i] == 'R':\n            result.append(colors[i] == 'RED')\n        elif patterns[i] == 'G':\n            result.append(colors[i] == 'GREEN')\n        else:\n            result.append(colors[i] == 'BLUE')\n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors)!= len(patterns)):\n        return False\n    n = len(colors)\n    i = 0\n    for p in patterns:\n        if (p == \"R\" and colors[i] == \"G\"):\n            i += 1\n            if (i == n):\n                return True\n        elif (p == \"G\" and colors[i] == \"R\"):\n            i += 1\n            if (i == n):\n                return True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(1, len(patterns)):\n        if i == len(patterns)-1:\n            if patterns[i]!= patterns[i-1]:\n                return False\n            continue\n        if patterns[i]!= patterns[i-1]:\n            if i == 1:\n                return False\n            if patterns[i-1] == patterns[i-2]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    j = 0\n    while j < len(colors):\n        if patterns[i] == colors[j]:\n            j += 1\n        else:\n            j = 0\n        i += 1\n        if i == len(patterns):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index_color = 0\n    index_pattern = 0\n    \n    while index_color < len(colors) and index_pattern < len(patterns):\n        \n        if colors[index_color] == patterns[index_pattern]:\n            index_pattern += 1\n        else:\n            index_color += 1\n    \n    if index_color == len(colors) and index_pattern == len(patterns):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color == 0:\n            break\n        for pattern in patterns:\n            if pattern == color:\n                break\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # 1: convert colors to sets (if you cannot, skip this question)\n    colors = set(colors)\n    # 2: check if the first color is in colors\n    if not patterns[0] in colors: return False\n    # 3: iterate over the patterns\n    for i in range(1, len(patterns)):\n        # if the next color is not in colors, return false\n        if not patterns[i] in colors: return False\n    # 4: return true if you have iterated over all the patterns\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n_colors = len(colors)\n    n_patterns = len(patterns)\n    i_start = 0\n    for i in range(n_patterns):\n        if i_start < n_colors and patterns[i] == colors[i_start]:\n            i_start += 1\n        else:\n            return False\n    return i_start == n_colors\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if not test_list:\n        return []\n    \n    result = []\n    \n    for tup in test_list:\n        if all(int(i) % K == 0 for i in tup):\n            result.append(tup)\n            \n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all(list(map(lambda y: y%K==0,x))), test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if ((test_list[i][0]%K==0) and (test_list[i][1]%K==0) and (test_list[j][0]%K==0) and (test_list[j][1]%K==0)):\n                tuple_list.append((test_list[i], test_list[j]))\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if (all(j%K == 0 for j in test_list[i])):\n            result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for x in test_list:\n        if all(y % K == 0 for y in x):\n            res.append(x)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for tuple in test_list:\n        if all(number % K == 0 for number in tuple):\n            output.append(tuple)\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # res = []\n    # for a, b, c in test_list:\n    #     if a % K == 0 and b % K == 0 and c % K == 0:\n    #         res.append((a, b, c))\n    # return res\n    return [(a, b, c) for a, b, c in test_list if a % K == 0 and b % K == 0 and c % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for each_tuple in test_list:\n        if(all(x%K==0 for x in each_tuple)):\n            new_list.append(each_tuple)\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                if test_list[i] not in list_of_tuples:\n                    list_of_tuples.append(test_list[i])\n    return list_of_tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return \"yes\"\n    else:\n        return \"no\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    return n % 11 == 0\n    \n    \ndef is_Diff_2(n):\n    \n    return n % 7 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n % 11\n    if x == 0:\n        return 'The Number is divisible by 11'\n    else:\n        return 'The Number is not divisible by 11'\nprint(is_Diff(int(input('Please enter a number: '))))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print(\"{} is divisible by 11.\".format(n))\n    else:\n        print(\"{} is not divisible by 11.\".format(n))\n    return;\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print('Number is divisible by 11')\n    else:\n        print('Number is not divisible by 11')\n        \nis_Diff(n)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n       print(n, \"is divisible by 11\")\n    else:\n       print(n, \"is not divisible by 11\")\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        print('Odd')\n    else:\n        print('Even')\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Your code here\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_end_count(s):\n    '''\n    Write a python function to check whether the words in the string end with same character or not.\n    '''\n    # Your code here\n    char = s[-1]\n    lst = s.split(' ')\n    \n    for i in range(len(lst)):\n        if lst[i][-1]!= char:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0: \n        return 0\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n - 1)/2\n    \nprint(tetrahedral_number(6)"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a list with zeroes\n    tetra = [0] * (n + 1)\n    # There is one tetrahedral number of zero, therefore the 1st tetrahedral number is 0\n    tetra[1] = 0\n    # From the 2nd tetrahedral number, we can't look back one more number than the previous tetrahedral number\n    tetra[2] = 1\n    # Iterate over the remaining numbers in the list \n    for i in range(3, n + 1):\n        # Calculate the next number in the list\n        tetra[i] = (i - 2) * tetra[i - 1] + tetra[i - 2]\n    # Return the nth tetrahedral number\n    return tetra[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def factorial(num):\n        if num == 1 or num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    # Initialize variables\n    sum = 0\n    num = 0\n    # Create a while loop that repeats until n = 1\n    while n > 1:\n        # Increment variable n by 1\n        n -= 1\n        # Calculate the product of all numbers between 1 and n\n        product = factorial(n)\n        # Calculate the sum of all numbers between 1 and n\n        sum += n * product\n    # Calculate the nth tetrahedral number\n    num = (2 ** sum) / 6\n    # Return the nth tetrahedral number\n    return int(num)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def get_tetrahedral_number(n): \n        return n*(3*n-1)/2\n    return get_tetrahedral_number(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n - 1) // 2\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #calculate the volume of a sphere\n    #r is the radius of the sphere\n    v = 4 / 3 * math.pi * (r ** 3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*math.pow(r,3)/3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    r = float(input(\"Enter the radius of the sphere: \"))\n    v = (4/3) * math.pi * r**3\n    print(v)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r= float(input(\"Enter the radius of the sphere : \"))\n    v = 4/3 * math.pi * r**3\n    print(\"The volume of the sphere is :\",v)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4 * math.pi * (r ** 3)) / 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume\nprint(volume_sphere(2))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=int(r)\n    return ((4/3)*math.pi*(r**3))"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume= (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i) % 96\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+(ord(i))%26\n    return chr(sum)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i) % 26\n    return chr(sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return chr(x%26)\ndef get_Index(strr):\n    '''\n    Write a python function to find the index of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return x%26\ndef get_Pair(strr):\n    '''\n    Write a python function to find the pair of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return x/2\ndef get_Odd_Pair(strr):\n    '''\n    Write a python function to find the odd pair of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return x/2\ndef get_Sum(strr):\n    '''\n    Write a python function to find the sum of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return x\ndef get_Count(strr,c):\n    '''\n    Write a python function to find the number of occurrences of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count=0\n    for i in range(len(strr)):\n        if ord(strr[i])==c:\n            count+=1\n    return count\ndef get_Least_Occur(strr):\n    '''\n    Write a python function to find the least occuring character of the string.\n    '''\n    x=0\n    for i in range(len(strr)):\n        if ord(strr[i])>x:\n            x=ord(strr[i])\n    return x\ndef get_Most_Occur(strr):\n    '''\n    Write a python function to find the most occuring character of the string.\n    '''\n    x=0\n    for i in range(len(strr)):\n        if ord(strr[i])>x:\n            x=ord(strr[i])\n    return x\ndef get_Length(strr):\n    '''\n    Write a python function to find the length of the given string.\n    '''\n    return len(strr)\ndef get_Reverse(strr):\n    '''\n    Write a python function to find the reverse of the given string.\n    '''\n    return strr[::-1]\ndef get_Palindrome(strr):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return strr==strr[::-1]\ndef get_Substring(strr,i,j):\n    '''\n    Write a python function to find the substring of the given string.\n    '''\n    return strr[i:j]\ndef get_ASCII_Value(strr):\n    '''\n    Write a python function to find the ASCII value of a character.\n    '''\n    return ord(strr)\ndef get_Max_ASCII_Value(strr):\n    '''\n    Write a python function to find the maximum ASCII value of the character of the given string.\n    '''\n    return max(ord(strr[i]) for i in range(len(strr)))\ndef get_Min_ASCII_Value(strr):\n    '''\n    Write a python function to find the minimum ASCII value of the character of the given string.\n    '''\n    return min(ord(strr[i]) for i in range(len(strr)))\ndef get_ASCII_Sum(strr):\n    '''\n    Write a python function to find the sum of ASCII values of the characters of the given string.\n    '''\n    return sum(ord(strr[i]) for i in range(len(strr)))\ndef get_ASCII_Occurrence(strr,c):\n    '''\n    Write a python function to find the occurrence of the character with the ASCII value in the given string.\n    '''\n    return strr.count(chr(c))\ndef get_ASCII_Multiple(strr,c):\n    '''\n    Write a python function to find the multiple of the character with the ASCII value in the given string.\n    '''\n    return ord(strr)*c\ndef get_ASCII_Product(strr,c):\n    '''\n    Write a python function to find the product of the character with the ASCII value in the given string.\n    '''\n    return ord(strr)*c\ndef get_ASCII_Product_Sum(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string.\n    '''\n    return sum(ord(strr[i])*c for i in range(len(strr)) for c in range(1,5))\ndef get_ASCII_Product_Sum_Count(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string and also count the number of occurrences of the product.\n    '''\n    x,count=0,0\n    for i in range(len(strr)):\n        for c in range(1,5):\n            x+=ord(strr[i])*c\n    for i in range(len(strr)):\n        if x==ord(strr[i])*(i+1):\n            count+=1\n    return (x,count)\ndef get_ASCII_Product_Sum_Count_Char(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string and also count the number of occurrences of the product and character.\n    '''\n    x,count,c=0,0,' '\n    for i in range(len(strr)):\n        for c in range(1,5):\n            x+=ord(strr[i])*c\n    for i in range(len(strr)):\n        if x==ord(strr[i])*(i+1):\n            count+=1\n            x+=ord(strr[i])\n    return (x,count,c)\ndef get_ASCII_Product_Sum_Count_Char_Index(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string and also count the number of occurrences of the product and character and also the index of the character in the string.\n    '''\n    x,count,c=' ',0,' '\n    for i in range(len(strr)):\n        for c in range(1,5):\n            x+=ord(strr[i])*c\n    for i in range(len(strr)):\n        if x==ord(strr[i])*(i+1):\n            count+=1\n            x+=ord(strr[i])\n    return (x,count,c,i)\ndef get_ASCII_Product_Sum_Count_Char_Index_Reverse(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string and also count the number of occurrences of the product and character and also the index of the character in the string and also in reverse order.\n    '''\n    x,count,c=' ',0,' '\n    for i in range(len(strr)):\n        for c in range(1,5):\n            x+=ord(strr[i])*c\n    for i in range(len(strr)):\n        if x==ord(strr[i])*(i+1):\n            count+=1\n            x+=ord(strr[i])\n    return (x,count,c,i)\ndef get_ASCII_Product_Sum_Count"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list_chars = list(strr)\n    sum = 0\n    for i in list_chars:\n        sum += ord(i)\n    return (chr(sum%26))\nstrr = \"How are you\"\nprint(get_Char(strr))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    sum = 0\n    for i in strr:\n        sum = sum + dict1[i]\n    return (sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)%26\n    return(chr(sum))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #code here\n    sum=0\n    for i in strr:\n        sum+=ord(i)%26\n    return chr(sum)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0 \n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(c) for c in strr]) % 26\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def sequence_rec(n,k,m):\n        if n==0:\n            return k\n        if n==1:\n            return m\n        else:\n            return sequence_rec(n-1, m, k+m)\n    if n<0:\n        return \"Error. Input n must be positive.\"\n    return sequence_rec(n,0,1)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # number of elements in sequence \n    length = 10\n    # define pattern array \n    pattern = [0, 1, 0, -1, 0, 1, 1, 1, 0, -1] \n    # list to store the results \n    ans = [] \n    # variable to store the result \n    nth = n \n    # go upto the nth element \n    for i in range(0, nth): \n        # store the pattern element at \n        # the nth position in variable \n        p = pattern[i%length] \n        # append the number to the results \n        ans.append(p) \n    # return the nth element \n    return ans[n-1] \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum([pow(2, i) for i in range(n)])\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return sequence(n-1) + (1 if sequence(n-1) % 2 == 0 else 3)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def get_sequence(n):\n        '''\n        Write a function to find the nth number in the newman conway sequence.\n        '''\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    while True:\n        if i == n:\n            return i\n        else:\n            yield i\n            i += 1\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 6\n    return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = 0\n    y = 1\n    z = 1\n    for i in range(0, n):\n        #print(x, y, z)\n        z = (z + x + y) % 10\n        x = y\n        y = z\n    return z\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    assert n >= 1, \"n must be greater than or equal to 1\"\n    if n == 1: return 2\n    else:\n        return 3 if sequence(n-1) < sequence(n-2) else sequence(n-1) + 3\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    PI = math.pi\n    return round((4*PI*r**2),2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*math.pi*r**2\n    print(surfacearea)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere = (4 * math.pi * r ** 2)\n    return surfacearea_sphere\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = (4 * math.pi * r ** 3)/3\n    return volume_sphere\ndef circumcircle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumcircle_circumference = 2 * math.pi * r\n    return circumcircle_circumference\ndef circumcircle_circumference_other(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumcircle_circumference_other = 2 * math.pi * r\n    return circumcircle_circumference_other\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area_triangle = (a*b*c)/2\n    return area_triangle\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    area_trapezoid = ((a+b)*h)/2\n    return area_trapezoid\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area_parallelogram = a*b\n    return area_parallelogram\ndef area_kite(b,h):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    area_kite = (b*h)/2\n    return area_kite\ndef area_rhombus(b,h):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    area_rhombus = (b*h)/2\n    return area_rhombus\ndef area_regularpolygon(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon = (n*s)/2\n    return area_regularpolygon\ndef area_regularpolygon_one(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_one = (n*s)/2\n    return area_regularpolygon_one\ndef area_regularpolygon_two(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_two = (n*s)/2\n    return area_regularpolygon_two\ndef area_regularpolygon_three(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_three = (n*s)/2\n    return area_regularpolygon_three\ndef area_regularpolygon_four(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_four = (n*s)/2\n    return area_regularpolygon_four\ndef area_regularpolygon_five(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_five = (n*s)/2\n    return area_regularpolygon_five\ndef area_regularpolygon_six(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_six = (n*s)/2\n    return area_regularpolygon_six\ndef area_regularpolygon_seven(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_seven = (n*s)/2\n    return area_regularpolygon_seven\ndef area_regularpolygon_eight(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_eight = (n*s)/2\n    return area_regularpolygon_eight\ndef area_regularpolygon_nine(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_nine = (n*s)/2\n    return area_regularpolygon_nine\ndef area_regularpolygon_ten(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_ten = (n*s)/2\n    return area_regularpolygon_ten\ndef area_regularpolygon_eleven(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_eleven = (n*s)/2\n    return area_regularpolygon_eleven\ndef area_regularpolygon_twelve(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_twelve = (n*s)/2\n    return area_regularpolygon_twelve\ndef area_regularpolygon_thirteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_thirteen = (n*s)/2\n    return area_regularpolygon_thirteen\ndef area_regularpolygon_fourteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_fourteen = (n*s)/2\n    return area_regularpolygon_fourteen\ndef area_regularpolygon_fifteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_fifteen = (n*s)/2\n    return area_regularpolygon_fifteen\ndef area_regularpolygon_sixteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_sixteen = (n*s)/2\n    return area_regularpolygon_sixteen\ndef area_regularpolygon_seventeen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_seventeen = (n*s)/2\n    return area_regularpolygon_seventeen\ndef area_regularpolygon_eighteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_eighteen = (n*s)/2\n    return area_regularpolygon_eighteen\ndef area_regularpolygon_nineteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_nineteen = (n*s)/2\n    return area_regularpolygon_nineteen\ndef area_regularpolygon_twenty(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_twenty = (n*s)/2\n    return area_regularpolygon_twenty\ndef area_regularpolygon_twentyone(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_twentyone = (n*s)/2\n    return area_regularpolygon_twentyone\ndef area_regularpolygon_twentytwo(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_twentytwo = (n*s)/2\n    return area_regularpolygon_twentytwo\ndef area_regularpolygon_twentythree(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * r**2\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s_area = 4 * math.pi * r * r\n    return s_area\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    c_area = 2 * math.pi * r * (r + h)\n    return c_area\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    c_area = math.pi * r * r + math.pi * r * h\n    return c_area\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    c_area = 6 * (l ** 2)\n    return c_area\ndef surfacearea_rectprism(w,h):\n    '''\n    Write a function to find the surface area of a rectangle prism.\n    '''\n    r_area = 2 * w * h\n    return r_area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v_sphere = (4 * math.pi * r ** 3)/3\n    return v_sphere\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v_cylinder = math.pi * r ** 2 * h\n    return v_cylinder\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v_cone = 1/3 * math.pi * r ** 2 * h\n    return v_cone\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v_cube = l ** 3\n    return v_cube\ndef volume_rectprism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangle prism.\n    '''\n    v_rectprism = l * w * h\n    return v_rectprism\ndef volume_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    v_ellipsoid = 4 * math.pi * r1 * r2 * r3 / 3\n    return v_ellipsoid\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v_cuboid = l * w * h\n    return v_cuboid\ndef volume_cylinder_with_hole(r,h,d):\n    '''\n    Write a function to find the volume of a cylinder with a hole.\n    '''\n    v_cylinder_with_hole = math.pi * r ** 2 * h - math.pi * r ** 2 * d\n    return v_cylinder_with_hole\ndef volume_cone_with_hole(r,h,d):\n    '''\n    Write a function to find the volume of a cone with a hole.\n    '''\n    v_cone_with_hole = 1/3 * math.pi * r ** 2 * h - 1/3 * math.pi * r ** 2 * d\n    return v_cone_with_hole\ndef volume_squarepyramid(l,w,h):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    v_squarepyramid = l * w * h / 3\n    return v_squarepyramid\ndef volume_rectprism_with_hole(l,w,h,d):\n    '''\n    Write a function to find the volume of a rectangle prism with a hole.\n    '''\n    v_rectprism_with_hole = (l * w * h - d * l * d) / 3\n    return v_rectprism_with_hole\ndef volume_ellipsoid_with_hole(r1,r2,r3,d):\n    '''\n    Write a function to find the volume of an ellipsoid with a hole.\n    '''\n    v_ellipsoid_with_hole = (4 * math.pi * r1 * r2 * r3 - d * math.pi * r1 * r2 * r3) / 3\n    return v_ellipsoid_with_hole\ndef volume_cuboid_with_hole(l,w,h,d):\n    '''\n    Write a function to find the volume of a cuboid with a hole.\n    '''\n    v_cuboid_with_hole = l * w * h - d * l * w\n    return v_cuboid_with_hole\ndef volume_cylinder_with_rect_hole(r,h,d,w):\n    '''\n    Write a function to find the volume of a cylinder with a rectangular hole.\n    '''\n    v_cylinder_with_rect_hole = math.pi * r ** 2 * h - (w * d)\n    return v_cylinder_with_rect_hole\ndef volume_cone_with_rect_hole(r,h,d,w):\n    '''\n    Write a function to find the volume of a cone with a rectangular hole.\n    '''\n    v_cone_with_rect_hole = 1/3 * math.pi * r ** 2 * h - (w * d)\n    return v_cone_with_rect_hole\ndef volume_squarepyramid_with_rect_hole(l,w,h,d,w):\n    '''\n    Write a function to find the volume of a square pyramid with a rectangular hole.\n    '''\n    v_squarepyramid_with_rect_hole = l * w * h - (w * d)\n    return v_squarepyramid_with_rect_hole\ndef volume_rectprism_with_rect_hole(l,w,h,d,w):\n    '''\n    Write a function to find the volume of a rectangle prism with a rectangular hole.\n    '''\n    v_rectprism_with_rect_hole = (l * w * h - (w * d)) / 3\n    return v_rectprism_with_rect_hole\ndef volume_ellipsoid_with_rect_hole(r1,r2,r3,d,w):\n    '''\n    Write a function to find the volume of an ellipsoid with a rectangular hole.\n    '''\n    v_ellipsoid_with_rect_hole = (4 * math.pi * r1 * r2 * r3 - (w * d)) / 3\n    return v_ellipsoid_with_rect_hole\ndef volume_cuboid_with_rect_hole(l,w,h,d,w):\n    '''\n    Write a function to find the volume of a cuboid with a rectangular hole.\n    '''\n    v_cuboid_with_rect_hole = l * w * h - (w * d)\n    return v_cuboid_with_rect_hole\ndef volume_cylinder_with_circ_hole(r,h,d,r_c):\n    '''\n    Write a function to find the volume of a cylinder with a circular hole.\n    '''\n    v_cylinder_with_circ_hole = math.pi * r ** 2 * h - math.pi * r_c ** 2 * d\n    return v_cylinder_with_circ_hole\ndef volume_cone_with_circ_hole(r,h,d,r_c):\n    '''\n    Write a function to find the volume of a cone with a circular hole.\n    '''\n    v_cone_with_circ_hole = 1/3 * math.pi * r ** 2 * h - 1/3 * math.pi * r_c ** 2 * d\n    return v_cone_with_circ_hole\ndef volume_squarepyramid_with_circ_hole(l,w,h,d,r_c):\n    '''\n    Write a function to find the volume of a square pyramid with a circular hole.\n    '''\n    v_squarepyramid_with_circ_hole = l * w * h - (math.pi * r_c ** 2 * d)\n    return v_squarepyramid_with_circ_hole\ndef volume_rectprism_with_circ_hole(l,w,h"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if type(r) == int or type(r) == float:\n        SA = 4 * math.pi * (r ** 2)\n        return SA\n    else:\n        return 'The radius must be a number'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    # Remember itertools.cycle, you will need it.\n    # return
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = 0\n    if n % 2 == 0:\n        num = hexagonal_number(n//2) * hexagonal_number(n//2)\n    else:\n        num = hexagonal_number(n//2 + 1) * hexagonal_number(n//2)\n    return num\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 1:\n        return n * ((3 * n - 1) ** 0.5) / 2\n    else:\n        return (n + 1) * ((3 * n + 1) ** 0.5) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hexagonal(n):\n        return 1.5 * n * (n+1)\n    \n    if n <= 1:\n        return 1\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return hexagonal_number(n) - hexagonal_number(n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def find_nth_centered_hexagonal_number(n):\n        if n == 1:\n            return 1\n        return 1.5 * (1 + find_nth_centered_hexagonal_number(n-1))\n    return find_nth_centered_hexagonal_number(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return centered_hexagonal_number_recursive(n, 0)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        result[key] = dict1[key]\n    for key in dict2:\n        if key not in result:\n            result[key] = dict2[key]\n    for key in dict3:\n        if key not in result:\n            result[key] = dict3[key]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_3 = {**dict1,**dict2, **dict3}\n    return dict_3\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict3:\n        if key in dict2:\n            dict2[key] += dict3[key]\n        else:\n            dict2[key] = dict3[key]\n    for key in dict2:\n        if key in dict1:\n            dict1[key] += dict2[key]\n        else:\n            dict1[key] = dict2[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1\n    for key,value in dict2.items():\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    for key,value in dict3.items():\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new = dict1.copy()\n    new.update(dict2)\n    new.update(dict3)\n    return new\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return (dict1.update(dict2) and dict3.update(dict1))\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    return dict1.update(dict2)\ndef merge_dictionaries_one(dict1):\n    '''\n    Write a function to merge one dictionary into another.\n    '''\n    #print(type(dict1))\n    #print(dict1)\n    return dict1\ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    dict_one = dict1.copy()\n    dict_two = dict2.copy()\n    dict_one.update(dict_two)\n    return dict_one\ndef merge_dictionaries_two_simple(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    return dict1.update(dict2)\ndef merge_dictionaries_one_simple(dict1):\n    '''\n    Write a function to merge one dictionary into another.\n    '''\n    #print(type(dict1))\n    #print(dict1)\n    return dict1\ndef merge_dictionaries_one_simple_one_list(dict1):\n    '''\n    Write a function to merge one dictionary into another.\n    '''\n    #print(type(dict1))\n    #print(dict1)\n    return dict1,dict1.update(dict1)\ndef merge_dictionaries_two_simple_one_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    dict_one = dict1.copy()\n    dict_two = dict2.copy()\n    dict_one.update(dict_two)\n    return dict_one,dict_one\ndef merge_dictionaries_two_simple_one_list_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    return dict1,dict1.update(dict2),dict1\ndef merge_dictionaries_three_simple_one_list_one(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2.update(dict3),dict1\ndef merge_dictionaries_three_simple_one_list_two(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1),dict3\ndef merge_dictionaries_three_simple_one_list_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3\ndef merge_dictionaries_three_simple_one_list_four(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) or dict3\ndef merge_dictionaries_three_simple_one_list_five(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict1\ndef merge_dictionaries_three_simple_one_list_six(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) or dict3 and dict1\ndef merge_dictionaries_three_simple_one_list_seven(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict2\ndef merge_dictionaries_three_simple_one_list_eight(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) or dict3 and dict2\ndef merge_dictionaries_three_simple_one_list_nine(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict2 and dict1\ndef merge_dictionaries_three_simple_one_list_ten(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict2 and dict1\ndef merge_dictionaries_three_simple_one_list_eleven(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) or dict3 and dict2 and dict1\ndef merge_dictionaries_three_simple_one_list_twelve(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict2 and dict1 and dict2\ndef merge_dictionaries_three_simple_one_list"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for i in dict1:\n        result[i] = dict1[i]\n    for j in dict2:\n        result[j] = dict2[j]\n    for k in dict3:\n        result[k] = dict3[k]\n    return result\n    \ndict1 = {'a': 10, 'b': 20, 'c': 30, 'd': 40}\ndict2 = {'a': 6, 'b': 15, 'c': 35, 'd': 40}\ndict3 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {**dict1, **dict2, **dict3}\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    print(dict1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return dict((k,list1.count(k)) for k in set(list1))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    freq_list = freq.most_common()\n    return dict(freq_list)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d={}\n    for x in list1:\n        if x in d:\n            d[x]+=1\n        else:\n            d[x]=1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for item in list1:\n        dict1[item] = dict1.get(item, 0) + 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for item in list1:\n        if item in dict1:\n            dict1[item] += 1\n        else:\n            dict1[item] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if (item in freq):\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dict=collections.Counter(list1)\n    return frequency_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # First, we find the closest lower number\n    while N>0:\n        N = N - 1\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # TODO: iterate through all the numbers from 0 to N+1\n    # Check if the number in the list is bigger than N\n    # If so, check if the number after is smaller or equal to N\n    # If so, check if the distance is closer to the N or the number after\n    # If so, save it\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        N = N * (-1)\n    return closest_num_helper(N, 0, N)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_number(n):\n        n, N = str(n), str(N)\n        maxlen = min(len(n), len(N))\n        for i in range(maxlen):\n            if n[i] < N[i]:\n                return int(n[:i] + N[i])\n        return int(n + N[-1])\n    return closest_number(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num_helper(n, cache):\n        if n in cache:\n            return cache[n]\n        if n - 1 in cache:\n            cache[n] = cache[n - 1] + 1\n        elif n + 1 in cache:\n            cache[n] = cache[n + 1] + 1\n        else:\n            cache[n] = n\n        return cache[n]\n    \n    cache = {}\n    return closest_num_helper(N, cache)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest(n):\n        return closest_num(n - 1) if (n - 1) > 0 else 0\n    return closest(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # import math\n    # return int(math.floor((N-1)/2)*2)\n    # solution 3\n    l, r = 0, N\n    ans = 0\n    while l <= r:\n        mid = (l+r)//2\n        if (mid * (mid+1))//2 > N:\n            r = mid - 1\n            ans = mid\n        else:\n            l = mid + 1\n    return ans\n    # solution 4\n    l, r = 0, N\n    ans = 0\n    while l <= r:\n        mid = (l+r)//2\n        if mid * (mid+1)//2 <= N:\n            l = mid + 1\n            ans = mid\n        else:\n            r = mid - 1\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return closest(N, N+1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # create list of nums from 1 to n\n    # create list of nums from n+1 to n*2\n    # find closest number in list 1 and list 2\n    # return closest number\n    if N <= 1:\n        return None\n    nums1 = [x for x in range(1, N + 1)]\n    nums2 = [x for x in range(N + 1, N * 2 + 1)]\n    return min(nums1, nums2, key=lambda x: abs(x - N))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return closest_num_helper(N, 0, len(str(N)) - 1)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_max = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > len_max:\n            len_max = len(list1[i])\n    print(len_max)\n    return len_max\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = [word for word in list1 if word.strip()]\n    maxlen = 0\n    for word in list1:\n        if len(word) > maxlen:\n            maxlen = len(word)\n    return maxlen\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"The longest word in the list is : \", max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count=0\n    l=[]\n    for i in list1:\n        l.append(len(i))\n    return max(l)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1=[\"hello\", \"world\", \"yes\", \"up\", \"not\"]\n    word_length=[len(item) for item in list1]\n    return word_length\n    \nprint(len_log(list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a=[]\n    for i in list1:\n        a.append(len(i))\n    return max(a)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = ['hello', 'world', 'python', 'example']\n    len_word = []\n    for word in list1:\n        len_word.append(len(word))\n    return len_word\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = \"Hello world\"\n    max_len = 0\n    for i in list1:\n        if len(i)>max_len:\n            max_len = len(i)\n            word = i\n    print(word)\n    print(\"The length of the longest word is {}\".format(max_len))\n    \ndef unique(list1):\n    '''\n    Write a python function to find unique elements in a list.\n    '''\n    list1 = [3,4,4,5,6,7,7,8,9,0,1,3,4,3,6,7]\n    unique = []\n    for i in list1:\n        if i not in unique:\n            unique.append(i)\n    print(unique)\n    \ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    a = 3\n    b = 5\n    mul = a*b\n    print(mul)\n    \ndef list_functions():\n    '''\n    Write a python function to find the sum of all numbers stored in a list.\n    '''\n    list1 = [1,2,3,4,5,6,7]\n    print(sum(list1))\n    \ndef palindrome(str1):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    str1 = \"malayalam\"\n    rev_str = \"\"\n    for i in str1:\n        rev_str = i+rev_str\n    if str1==rev_str:\n        print(\"The string is a palindrome!\")\n    else:\n        print(\"The string is not a palindrome!\")\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = input(\"Enter the list : \")\n    list1 = list1.split(\" \")\n    max = 0\n    for i in list1:\n        if len(i) >= max:\n            max = len(i)\n    print(max)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # ToDo\n    \n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Method 1: using a loop\n    for i in range(0, len(str1)-len(sub_str)+1):\n        if sub_str == str1[i:i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = []\n    for i in range(0,len(str1) - len(sub_str) + 1):\n        if str1[i] == sub_str[0]:\n            flag = 1\n            for j in range(1, len(sub_str)):\n                if str1[i+j]!= sub_str[j]:\n                    flag = 0\n                    break\n            if flag == 1:\n                sub_str_list.append(i)\n    return sub_str_list\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1.find(sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1.find(sub_str) == -1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return i\n    return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = []\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            result.append(i)\n    return result\n    "
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1 in s for s in str1)\n    # loop over every str in list\n    # if str in str1 return true\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # function which returns 1 if n is\n    # an undulating number.\n    \n    # return true if n is odd and n is \n    # divisible by 3 and if n is even\n    # and n is divisible by 5.\n    return ((n % 2 == 1) and (n % 3 == 0) or (n % 5 == 0))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n): \n        if (n % i == 0): \n            return False\n    return True\n  \ndef count_prime_factors(n): \n  \n    i = 2\n    count = 0\n    while(i * i <= n): \n        if (n % i == 0): \n            if (n / i == i): \n                count = count + 1\n            else: \n                count = count + 2\n        i = i + 1\n    return count \n  \ndef check_number(n): \n  \n    if (n < 2): \n        return 0\n    return 1 if (is_undulating(n) and \n                                    count_prime_factors(n) == 2) else 0\n  \ndef count_prime_factors_func(n): \n    return count_prime_factors(n) \n  \ndef main(): \n  \n    n = 600851475143\n    print(check_number(n)) \n  \n    print(check_number(n)) \n  \n    for i in range(1, n): \n        if (check_number(i) == 1): \n            print(i, end = \" \") \n  \nif __name__ == \"__main__\": \n    main() "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n in [4, 7, 9, 11, 13, 14, 17, 18, 19, 20, 22, 25]\n    #pass\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 0 and (n ^ (n + 1)) & (n ^ (n - 1)) == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    str_num = str(n)\n    previous_digit = int(str_num[0])\n    has_same_digit_before = False\n    for i in range(1, len(str_num)):\n        digit = int(str_num[i])\n        if (digit < previous_digit):\n            return False\n        if (digit == previous_digit):\n            has_same_digit_before = True\n        previous_digit = digit\n    return has_same_digit_before\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    if n == 1:\n        return False\n    i = 1\n    while i * i <= n: \n        if (n % i == 0): \n            if (n / i == i): \n                return True\n            else: \n                return False\n        i = i + 1\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    lst = list(str(n))\n    for i in range(len(lst)):\n        if i == 0:\n            if lst[i]!= lst[i + 1]:\n                return False\n        else:\n            if lst[i]!= lst[i - 1]:\n                return False\n    return True\n    \ndef is_undulating_2(n):\n    lst = list(str(n))\n    first = lst[0]\n    prev = first\n    for i in range(1, len(lst)):\n        if prev!= lst[i]:\n            if i == 1 or lst[i]!= lst[i - 1]:\n                return False\n            else:\n                prev = lst[i]\n    return True\n            "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    t = str(n)\n    prev_sum = 0\n    curr_sum = 0\n    for i in range(0,len(t)):\n        prev_sum = curr_sum\n        curr_sum += int(t[i])\n        if prev_sum == curr_sum:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_helper(n, i, even_start, odd_start): \n        if i % 2 == 0: \n            if n % 2!= even_start: \n                return False\n        else: \n            if n % 2!= odd_start: \n                return False\n        if i == 0: \n            even_start = n % 2\n            odd_start = even_start\n        else: \n            even_start = odd_start\n            odd_start = n % 2\n        return True\n    return is_undulating_helper(n, 0, 0, 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #Check if the number is a multiple of 4\n    if(n % 4 == 0):\n        return False\n    #Check if the number is a multiple of 9\n    elif(n % 9 == 0):\n        return False\n    #Check if the number is a multiple of 16\n    elif(n % 16 == 0):\n        return False\n    #If none of these conditions are met, return true\n    else:\n        return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    try:\n        return a**b\n    except TypeError:\n        return \"B is not an integer\"\n    except ValueError:\n        return \"a is not an integer\"\n    \nprint(power(2,3))\nprint(power(2,3.5))\nprint(power(2,'x'))\nprint(power(2,3+5j))\nprint(power('a',3))\nprint(power(2,True))\nprint(power(2,-3)"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == -1:\n        return 1/a\n    elif b < 0:\n        return 1/power(a,-b)\n    else:\n        return power(a*a, b//2)*power(a,b-b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    elif b == 0:\n        return 1\n    else:\n        return a * power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # base case\n    if b == 0:\n        return 1\n    # recursive case\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\ndef index_greater_than(test_list, x):\n    '''\n    Given a list of tuples, write a function that returns a list of the indexes of the tuple values which are greater than the provided argument.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if test_list[i][1] > x:\n            new_list.append(i)\n    return new_list\ndef count_evens(nums):\n    '''\n    Write a function called count_evens that takes a list as a parameter and returns the number of even integers in the list.\n    '''\n    count = 0\n    for i in nums:\n        if i % 2 == 0:\n            count += 1\n    return count\ndef sum_floats(nums):\n    '''\n    Write a function called sum_floats that takes a list as a parameter and returns the sum of all the floats in the list.\n    '''\n    total = 0\n    for i in nums:\n        if type(i) == float:\n            total += i\n    return total\ndef sum_floats_2(nums):\n    '''\n    Write a function called sum_floats_2 that takes a list as a parameter and returns the sum of all the floats in the list.\n    '''\n    return sum(x for x in nums if type(x) == float)\ndef min_max_keys(d):\n    '''\n    Given a dictionary, write a function that returns a list of the keys corresponding to the minimum and maximum values in the dictionary.\n    '''\n    test_list = []\n    for i in d:\n        test_list.append(i)\n    test_list.sort()\n    return [test_list[0], test_list[-1]]\ndef min_max_keys_2(d):\n    '''\n    Given a dictionary, write a function that returns a list of the keys corresponding to the minimum and maximum values in the dictionary.\n    '''\n    return [min(d, key=d.get), max(d, key=d.get)]\ndef same_values(d):\n    '''\n    Given a list of lists, write a function that returns a list of all the values that are the same across each of the inner lists.\n    '''\n    new_list = []\n    for i in d:\n        if i[0] == i[1] and i[1] == i[2]:\n            new_list.append(i[0])\n    return new_list\ndef same_values_2(d):\n    '''\n    Given a list of lists, write a function that returns a list of all the values that are the same across each of the inner lists.\n    '''\n    return list(set(val for lst in d for val in lst))\ndef dict_from_list(some_list):\n    '''\n    Write a function called dict_from_list that takes a list of lists as a parameter and returns a dictionary where the key is the first value in each inner list and the value is the concatenation of the entire inner list.\n    For example, if the input is [[1, 2, 3], [4, 5, 6], [7, 8, 9]], the output should be {1: '1234', 2: '1256', 3: '1278', 4: '4567', 5: '4568', 6: '4579', 7: '8789', 8: '8789', 9: '8789'}\n    '''\n    new_dict = {}\n    for i in some_list:\n        new_dict[i[0]] = ''.join(str(x) for x in i)\n    return new_dict\ndef dict_from_list_2(some_list):\n    '''\n    Write a function called dict_from_list that takes a list of lists as a parameter and returns a dictionary where the key is the first value in each inner list and the value is the concatenation of the entire inner list.\n    For example, if the input is [[1, 2, 3], [4, 5, 6], [7, 8, 9]], the output should be {1: '1234', 2: '1256', 3: '1278', 4: '4567', 5: '4568', 6: '4579', 7: '8789', 8: '8789', 9: '8789'}\n    '''\n    return dict(zip([x[0] for x in some_list], [''.join(str(y) for y in x) for x in some_list]))\ndef count_matches(d, k):\n    '''\n    Write a function called count_matches that takes a dictionary and an integer as parameters. The function should return the number of occurrences of the integer in the dictionary.\n    '''\n    return d.count(k)\ndef biggest_difference(d):\n    '''\n    Write a function called biggest_difference that takes a list of numbers as a parameter and returns the difference between the largest and smallest numbers in the list.\n    '''\n    return max(d) - min(d)\ndef count_odds(d):\n    '''\n    Write a function called count_odds that takes a dictionary as a parameter and returns the number of odd numbers in the dictionary.\n    '''\n    total = 0\n    for i in d:\n        if i % 2!= 0:\n            total += 1\n    return total\ndef even_keys(d):\n    '''\n    Write a function called even_keys that takes a dictionary as a parameter and returns a new dictionary containing only the even keys from the original dictionary.\n    '''\n    new_dict = {}\n    for key, value in d.items():\n        if key % 2 == 0:\n            new_dict[key] = value\n    return new_dict\ndef dict_to_list(d):\n    '''\n    Write a function called dict_to_list that takes a dictionary as a parameter and returns a list of tuples, where each tuple is a key-value pair.\n    '''\n    return list(d.items())\ndef dict_to_list_2(d):\n    '''\n    Write a function called dict_to_list that takes a dictionary as a parameter and returns a list of tuples, where each tuple is a key-value pair.\n    '''\n    return list(map(lambda x: (x[0], x[1]), d.items()))\ndef has_duplicates(d):\n    '''\n    Write a function called has_duplicates that takes a dictionary as a parameter and returns True if the dictionary has duplicate keys, and False otherwise.\n    '''\n    return len(d)!= len(set(d.keys()))\ndef has_duplicates_2(d):\n    '''\n    Write a function called has_duplicates that takes a dictionary as a parameter and returns True if the dictionary has duplicate keys, and False otherwise.\n    '''\n    return len(d)!= len(set(d.values()))\ndef num_dict_to_dict(d):\n    '''\n    Write a function called num_dict_to_dict that takes a dictionary of dictionaries as a parameter and returns a new dictionary that has the same keys as the original dictionary, but the values of the new dictionary are lists that contain all the values of the original dictionaries that have the same key.\n    For example, if the input dictionary is {'a': {1, 2}, 'b': {1, 2, 3}} then the output should be {'a': [1, 2], 'b': [1, 2, 3]}.\n    '''\n    new_dict = {}\n    for i in d:\n        new_dict[i] = list(set(d[i]))\n    return new_dict\ndef num_dict_to_dict_2(d):\n    '''\n    Write a function called num_dict_to_dict that takes a dictionary of dictionaries as a parameter and returns a new dictionary that has the same keys as the original dictionary, but the values of the new dictionary are lists that contain all the values of the original dictionaries that have the same key.\n    For example, if the input dictionary is {'a': {1, 2}, 'b': {1, 2, 3}} then the output should be {'a': [1, 2], 'b': [1, 2, 3]}.\n    '''\n    return {k: list(d[k]) for k in d}\ndef merge_dict("
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[minimum_index][1]:\n            minimum_index = i\n    return minimum_index\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #sort the list\n    test_list.sort(key=itemgetter(1))\n    #print(test_list)\n    #return the first index of the tuple with the smallest value\n    return test_list[0][0]\n    \ndef sum_of_digits(digit_string):\n    '''\n    Write a function that takes a string containing only digits, and returns the sum of the digits.\n    '''\n    #digit string\n    total = 0\n    #for each element in the string\n    for element in digit_string:\n        #convert it to an int\n        total = total + int(element)\n    return total\n    \ndef generate_hashtag(s):\n    '''\n    Write a function that takes a string and returns a hashtag version of that string.\n    '''\n    #remove all spaces\n    s = s.replace(' ','')\n    #capitalize the first character\n    s = s.capitalize()\n    #if the length of the string is less than 140, then return the hashtag version\n    if len(s) <= 140:\n        return s\n    #otherwise, split the string into words, remove all spaces, and sort the words\n    words = s.split(' ')\n    words = [word.capitalize() for word in words]\n    words = sorted(words)\n    #join the list of words into a string\n    words = ''.join(words)\n    #add a hashtag to the front\n    return '#'+words\n    \ndef count_sentence_types(sentences):\n    '''\n    Write a function that takes a list of sentences and returns a dictionary with the counts for various sentence types.\n    '''\n    #set up the dictionary\n    sentence_types = {'present simple':0, 'present progressive':0, 'past simple':0, 'past progressive':0, 'future simple':0, 'future simple and continuous':0, 'past continuous':0, 'future continuous':0, 'present continuous':0}\n    #for each sentence in the list of sentences\n    for sentence in sentences:\n        #split the sentence into words\n        words = sentence.split(' ')\n        #if the sentence is of the present simple type, increment the count\n        if 'present simple' in sentence:\n            sentence_types['present simple'] = sentence_types['present simple'] + 1\n        #if the sentence is of the present progressive type, increment the count\n        if 'present progressive' in sentence:\n            sentence_types['present progressive'] = sentence_types['present progressive'] + 1\n        #if the sentence is of the past simple type, increment the count\n        if 'past simple' in sentence:\n            sentence_types['past simple'] = sentence_types['past simple'] + 1\n        #if the sentence is of the past progressive type, increment the count\n        if 'past progressive' in sentence:\n            sentence_types['past progressive'] = sentence_types['past progressive'] + 1\n        #if the sentence is of the future simple type, increment the count\n        if 'future simple' in sentence:\n            sentence_types['future simple'] = sentence_types['future simple'] + 1\n        #if the sentence is of the future simple and continuous type, increment the count\n        if 'future simple and continuous' in sentence:\n            sentence_types['future simple and continuous'] = sentence_types['future simple and continuous'] + 1\n        #if the sentence is of the past continuous type, increment the count\n        if 'past continuous' in sentence:\n            sentence_types['past continuous'] = sentence_types['past continuous'] + 1\n        #if the sentence is of the future continuous type, increment the count\n        if 'future continuous' in sentence:\n            sentence_types['future continuous'] = sentence_types['future continuous'] + 1\n        #if the sentence is of the present continuous type, increment the count\n        if 'present continuous' in sentence:\n            sentence_types['present continuous'] = sentence_types['present continuous'] + 1\n    #return the dictionary\n    return sentence_types\n    \ndef remove_duplicate_words(s):\n    '''\n    Write a function that takes a string and returns the string with the duplicate words removed.\n    '''\n    #split the string into words\n    words = s.split(' ')\n    #set up a new list to store the words\n    new_words = []\n    #for each word in the list of words\n    for word in words:\n        #if the word is already in the new list, do nothing\n        if word in new_words:\n            continue\n        #otherwise, add the word to the new list\n        else:\n            new_words.append(word)\n    #join the list of words into a string\n    new_s =''.join(new_words)\n    #return the string\n    return new_s\n    \ndef count_words(s):\n    '''\n    Write a function that takes a string and returns a dictionary with the counts of each word in the string.\n    '''\n    #split the string into words\n    words = s.split(' ')\n    #set up the dictionary\n    words_dict = {}\n    #for each word in the list of words\n    for word in words:\n        #if the word is already in the dictionary, increment the count\n        if word in words_dict:\n            words_dict[word] = words_dict[word] + 1\n        #otherwise, add the word to the dictionary\n        else:\n            words_dict[word] = 1\n    #return the dictionary\n    return words_dict\n    \ndef generate_keyword_dict(s):\n    '''\n    Write a function that takes a string and returns a dictionary with the counts of each keyword in the string.\n    '''\n    #split the string into words\n    words = s.split(' ')\n    #set up the dictionary\n    words_dict = {}\n    #for each word in the list of words\n    for word in words:\n        #if the word is already in the dictionary, increment the count\n        if word in words_dict:\n            words_dict[word] = words_dict[word] + 1\n        #otherwise, add the word to the dictionary\n        else:\n            words_dict[word] = 1\n    #sort the dictionary by the keys\n    words_dict = sorted(words_dict.items(), key=lambda x:x[0])\n    #return the dictionary\n    return words_dict\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(0)(min(test_list,key=itemgetter(1)))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))[1]\n    return minimum\n    \ndef matrix_sum(matrix):\n    '''\n    Given a 2D matrix, return the sum of all the elements within the matrix.\n    '''\n    sum = 0\n    for row in matrix:\n        for column in row:\n            sum += column\n    return sum\n    \ndef find_missing_number(test_list):\n    '''\n    Given a list of numbers from 1-n, find the missing number.\n    '''\n    l = []\n    for i in range(1, len(test_list) + 1):\n        l.append(i)\n    for number in test_list:\n        if number not in l:\n            return number\n    return \"None\"\n    \ndef matrix_transpose(matrix):\n    '''\n    Given a 2D matrix, return the transpose of the matrix.\n    '''\n    new_matrix = []\n    for i in range(len(matrix[0])):\n        new_matrix.append([])\n        for row in matrix:\n            new_matrix[i].append(row[i])\n    return new_matrix\n    \ndef matrix_multiply(matrix_1, matrix_2):\n    '''\n    Given 2 matrices, determine if they can be multiplied.\n    '''\n    if len(matrix_1[0])!= len(matrix_2):\n        return False\n    \n    return [[sum(a*b for a, b in zip(row_1, column_2)) for column_2 in zip(*matrix_2)] for row_1 in matrix_1]\n    \ndef delete_first_char(test_string):\n    '''\n    Given a string, return a new string with the first character deleted.\n    '''\n    return test_string[1:]\n    \ndef sum_of_all_odd_numbers(test_list):\n    '''\n    Given a list of numbers, return the sum of all odd numbers in the list.\n    '''\n    sum = 0\n    for number in test_list:\n        if number % 2!= 0:\n            sum += number\n    return sum\n    \ndef get_syllable_count(test_string):\n    '''\n    Given a string, return the number of syllables.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # initialize variables\n    count = 0\n    last_char = None\n    \n    for char in test_string:\n        if char in vowels:\n            if last_char in vowels:\n                count += 1\n            last_char = char\n    return count\n    \ndef search_a_2D_matrix(matrix, target):\n    '''\n    Given a 2D matrix, return a function that searches the matrix for the target value.\n    '''\n    for row in matrix:\n        for column in row:\n            if target == column:\n                return True\n    return False\n    \ndef get_unique_list(test_list):\n    '''\n    Given a list, return a new list that contains only the unique values in the original list.\n    '''\n    unique_list = []\n    for value in test_list:\n        if value not in unique_list:\n            unique_list.append(value)\n    return unique_list\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if(len(test_list) == 0):\n        return \"empty list\"\n    else:\n        return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return (sorted(test_list, key = itemgetter(1))[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = 0\n    for i in lst:\n        if(len(i)<length or length ==0):\n            length = len(i)\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    #Define a function for minimum length\n    def Min_Length(x):\n        min_len = 0\n        for i in x:\n            if len(i) < min_len:\n                min_len = len(i)\n        return min_len\n        \n    #Run the function    \n    lst_len = Min_Length(lst)\n    return lst_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    def find_min_length(lst):\n        return min([len(x) for x in lst])\n    return find_min_length(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(map(len, lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minlen = None\n    for i in lst:\n        if minlen == None:\n            minlen = len(i)\n        if minlen>len(i):\n            minlen = len(i)\n    return minlen\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    return 1 + min(Find_Min_Length(sub_lst) for sub_lst in lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = None\n    for l in lst:\n        if smallest == None:\n            smallest = len(l)\n        elif smallest > len(l):\n            smallest = len(l)\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for lst in lst_of_lst:\n        if len(lst) == min_len:\n            print(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n    \ndef Find_Min_Length2(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len=len(lst[i])\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    l = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    if n < 2:\n        return 1\n    else:\n        div_count = 1\n        for i in range(2,n+1):\n            if n%i == 0:\n                div_count += 1\n        return div_count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n    "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    divisors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    assert n >= 0\n    # add logic here\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    count = 0\n    for i in range(1, n):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if(n==1):\n        return 1\n    else:\n        divisors = 1\n        # Count all divisors upto the square root of n\n        i = 1\n        while i<n:\n            if n%i == 0:\n                divisors += 1\n            i += 1\n        return divisors\n        \nprint(divisor(1))\nprint(divisor(2))\nprint(divisor(3))\nprint(divisor(4))\nprint(divisor(5))\nprint(divisor(6))\nprint(divisor(7))\nprint(divisor(8))\nprint(divisor(9))\nprint(divisor(10))\nprint(divisor(12))\nprint(divisor(15))\nprint(divisor(16))\nprint(divisor(18))\nprint(divisor(19))\nprint(divisor(20))\nprint(divisor(25))\nprint(divisor(28))\nprint(divisor(30))\nprint(divisor(31))\nprint(divisor(32))\nprint(divisor(36))\nprint(divisor(40))\nprint(divisor(42))\nprint(divisor(45))\nprint(divisor(48))\nprint(divisor(49))\nprint(divisor(50))\nprint(divisor(51))\nprint(divisor(52))\nprint(divisor(53))\nprint(divisor(54))\nprint(divisor(55))\nprint(divisor(56))\nprint(divisor(57))\nprint(divisor(58))\nprint(divisor(59))\nprint(divisor(60))\nprint(divisor(61))\nprint(divisor(62))\nprint(divisor(63))\nprint(divisor(64))\nprint(divisor(65))\nprint(divisor(66))\nprint(divisor(67))\nprint(divisor(68))\nprint(divisor(69))\nprint(divisor(70))\nprint(divisor(71))\nprint(divisor(72))\nprint(divisor(73))\nprint(divisor(74))\nprint(divisor(75))\nprint(divisor(76))\nprint(divisor(77))\nprint(divisor(78))\nprint(divisor(79))\nprint(divisor(80))\nprint(divisor(81))\nprint(divisor(82))\nprint(divisor(83))\nprint(divisor(84))\nprint(divisor(85))\nprint(divisor(86))\nprint(divisor(87))\nprint(divisor(88))\nprint(divisor(89))\nprint(divisor(90))\nprint(divisor(91))\nprint(divisor(92))\nprint(divisor(93))\nprint(divisor(94))\nprint(divisor(95))\nprint(divisor(96))\nprint(divisor(97))\nprint(divisor(98))\nprint(divisor(99))\nprint(divisor(100))\nprint(divisor(101))\nprint(divisor(102))\nprint(divisor(103))\nprint(divisor(104))\nprint(divisor(105))\nprint(divisor(106))\nprint(divisor(107))\nprint(divisor(108))\nprint(divisor(109))\nprint(divisor(110))\nprint(divisor(111))\nprint(divisor(112))\nprint(divisor(113))\nprint(divisor(114))\nprint(divisor(115))\nprint(divisor(116))\nprint(divisor(117))\nprint(divisor(118))\nprint(divisor(119))\nprint(divisor(120))\nprint(divisor(121))\nprint(divisor(122))\nprint(divisor(123))\nprint(divisor(124))\nprint(divisor(125))\nprint(divisor(126))\nprint(divisor(127))\nprint(divisor(128))\nprint(divisor(129))\nprint(divisor(130))\nprint(divisor(131))\nprint(divisor(132))\nprint(divisor(133))\nprint(divisor(134))\nprint(divisor(135))\nprint(divisor(136))\nprint(divisor(137))\nprint(divisor(138))\nprint(divisor(139))\nprint(divisor(140))\nprint(divisor(141))\nprint(divisor(142))\nprint(divisor(143))\nprint(divisor(144))\nprint(divisor(145))\nprint(divisor(146))\nprint(divisor(147))\nprint(divisor(148))\nprint(divisor(149))\nprint(divisor(150))\nprint(divisor(151))\nprint(divisor(152))\nprint(divisor(153))\nprint(divisor(154))\nprint(divisor(155))\nprint(divisor(156))\nprint(divisor(157))\nprint(divisor(158))\nprint(divisor(159))\nprint(divisor(160))\nprint(divisor(161))\nprint(divisor(162))\nprint(divisor(163))\nprint(divisor(164))\nprint(divisor(165))\nprint(divisor(166))\nprint(divisor(167))\nprint(divisor(168))\nprint(divisor(169))\nprint(divisor(170))\nprint(divisor(171))\nprint(divisor(172))\nprint(divisor(173))\nprint(divisor(174))\nprint(divisor(175))\nprint(divisor(176))\nprint(divisor(177))\nprint(divisor(178))\nprint(divisor(179))\nprint(divisor(180))\nprint(divisor(181))\nprint(divisor(182))\nprint(divisor(183))\nprint(divisor(184))\nprint(divisor(185))\nprint(divisor(186))\nprint(divisor(187))\nprint(divisor(188))\nprint(divisor(189))\nprint(divisor(190))\nprint(divisor(191))\nprint(divisor(192))\nprint(divisor(193))\nprint(divisor(194))\nprint(divisor(195))\nprint(divisor(196))\nprint(divisor(197))\nprint(divisor(198))\nprint(divisor(199))\nprint(divisor(200))\nprint(divisor(201))\nprint(divisor(202))\nprint(divisor(203))\nprint(divisor(204))\nprint(divisor(205))\nprint(divisor(206))\nprint(divisor(207))\nprint(divisor(208))\nprint(divisor(209))\nprint(divisor(210))\nprint(divisor(211))\nprint(divisor(212))\nprint(divisor(213))\nprint(divisor(214))\nprint(divisor(215))\nprint(divisor(216))\nprint(divisor(217))\nprint(divisor(218))\nprint(divisor(219))\nprint(divisor(220))\nprint(divisor(221))\nprint(divisor(222))\nprint(divisor(223))\nprint(divisor(224))\nprint(divisor(225))\nprint(divisor(226))\nprint(divisor(227))\nprint(divisor(228))\nprint(divisor(229))\nprint(divisor(230))\nprint(divisor(231))\nprint(divisor(232))\nprint(divisor(233))\nprint(divisor(234))\nprint(divisor(235))\nprint(divisor(236))\nprint(divisor(237)"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    count = 0\n    if n < 0:\n        n = n * (-1)\n    if n == 0:\n        return 0\n    else:\n        for i in range(1,n+1):\n            if n % i == 0:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Initialize dictionary\n    d = {}\n    for item in flat_list:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n            \n    return d\n    \nprint(frequency_lists([[1,2],[3],[1,4,5]]))\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    print(dict1)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # YOUR CODE HERE\n    dict1 = {}\n    for each_item in list1:\n        if each_item in dict1:\n            dict1[each_item] += 1\n        else:\n            dict1[each_item] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for i in list1:\n        list2.extend(i)\n    frequency_dict = {}\n    for i in list2:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element not in freq:\n            freq[element] = 0\n        freq[element] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = dict()\n    for item in list1:\n        freq[item] = freq.get(item,0) + 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for ele in list1:\n        if ele in freq_dict:\n            freq_dict[ele] += 1\n        else:\n            freq_dict[ele] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # list_set = set(list1)\n    dict1 = {}\n    for i in range(len(list1)):\n        count = list1.count(list1[i])\n        if list1[i] not in dict1:\n            dict1[list1[i]] = count\n    return dict1\n    \n    \nprint(frequency_lists([[3, 6, 6, 2, 1], [4, 5, 5, 4, 4], [5, 4, 4, 3, 3]]))\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for elem in list1:\n        if elem in freq_dict.keys():\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = [1, 2, 3, 4]\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for num in numbers:\n        multiply *= num\n    return multiply/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for num in numbers:\n        multiply = multiply * num\n    print(multiply/len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x*y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied_list = 1\n    for i in numbers:\n        multiplied_list *= i\n    return multiplied_list / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    def decimal_to_binary_rec(n,s):\n        if n == 0:\n            return s\n        s = str(n % 2) + s\n        return decimal_to_binary_rec(n//2,s)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\",\"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%2 + 10*decimal_to_binary(int(n/2))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = int(n)\n    if n<0:\n        return \"-\"+decimal_to_binary(-n)\n    else:\n        decimal_to_binary(n)\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<0:\n        return \"Please enter positive number\"\n    if n==0:\n        return 0\n    else:\n        return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    # Start with the last digit\n    while n > 0: \n        binary.append(str(n % 2))\n        n = n // 2\n    # Reverse the order of the binary string\n    binary.reverse()\n    # Join the list of binary digits\n    binary = ''.join(binary)\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        print(\"Incorrect input\")\n    else:\n        l = list()\n        while n > 0:\n            r = n % 2\n            n = n // 2\n            l.append(r)\n        l.reverse()\n        l = [str(i) for i in l]\n        return ''.join(l)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num)==1:\n        return num\n    rev = num[::-1]\n    if num==rev:\n        return num[:-1]+str(int(num[-1])+1)\n    elif int(rev[0])-int(num[0])>1:\n        return rev[0]+str(int(rev[0])-1) + num[1:]\n    elif int(rev[0])-int(num[0])==1:\n        return num[:-1] + str(int(rev[0])-1) + num[1:]\n    else:\n        for i in range(1,len(rev)):\n            if int(rev[0:i])>int(num[0:i]):\n                return num[:-1] + rev[0:i-1] + str(int(rev[0:i-1])-1) + num[i:]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if num_str[0:i][::-1] == num_str[0:i]:\n            return int(num_str[0:i] + num_str[i] + num_str[i:] + num_str[i:][::-1])\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    num_str = str(num)\n    if len(num_str) == 1:\n        return int(num_str)\n    if len(num_str) == 2:\n        if int(num_str) < 10:\n            if int(num_str) % 2 == 0:\n                return int(num_str) + 1\n            else:\n                return int(num_str) + 2\n        else:\n            if int(num_str) % 2 == 0:\n                return int(num_str) + 10\n            else:\n                return int(num_str) + 20\n    elif len(num_str) > 2:\n        num_list = list(num_str)\n        if num_list[0] == num_list[-1]:\n            num_list.pop()\n            num_list.pop(0)\n            return int(''.join(num_list))\n        else:\n            if num_list[-1] < num_list[0]:\n                num_list[0] = num_list[0] + 1\n                return int(''.join(num_list))\n            else:\n                num_list.pop()\n                num_list.insert(0, '9')\n                return int(''.join(num_list))\n    else:\n        raise Exception('I should not have gotten here.')\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num[0] == '0':\n        return None\n    if len(num) == 1:\n        return int(num + num[::-1])\n    if len(num) == 2:\n        if int(num + num[::-1]) > num * 2:\n            return int(num + num[::-1])\n        else:\n            return int(num * 2)\n    # from here on, num is at least 3 digits\n    digit_boundary = None\n    while not digit_boundary:\n        # searching for the first index where we are bound by the two most significant digits\n        for i in reversed(range(1, len(num)-1)):\n            if int(num[i-1] + num[i] + num[i+1]) > int(num[i-1] + num[i] + num[i+1] + num[i+2]):\n                digit_boundary = i\n                break\n        # if we hit the last index where we are bound by the two most significant digits\n        if not digit_boundary:\n            num = '9' + num\n    num = num[:digit_boundary] + num[digit_boundary:]\n    return int(num + num[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert to string\n    num_string = str(num)\n    # reverse string\n    num_string_rev = num_string[::-1]\n    # convert to int\n    num_int = int(num_string_rev)\n    # if already palindrome, return original\n    if num == num_int:\n        return num\n    # iterate through and remove digits from right\n    for i in range(len(num_string_rev)):\n        if num_int - int(num_string_rev[i:]) > 1:\n            return num_int - int(num_string_rev[i:])\n        num_string_rev = num_string_rev[:i]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if not isinstance(num, int):\n        raise TypeError('Please enter an integer as input')\n    num_str = str(num)\n    num_str_len = len(num_str)\n    if num_str_len == 1:\n        if num_str == '1':\n            next_palindrome = int(num_str+num_str[::-1])\n        elif num_str[0] == '9':\n            next_palindrome = int(str(int(num_str[0])-1)+num_str[::-1])\n        else:\n            next_palindrome = int(str(int(num_str[0])+1)+num_str[::-1])\n    elif num_str_len == 2:\n        if int(num_str) % 10 == 0:\n            next_palindrome = int(num_str+num_str[::-1])\n        elif int(num_str) % 11 == 0:\n            next_palindrome = int(num_str[0]+str(int(num_str[1])-1)+num_str[::-1])\n        else:\n            next_palindrome = int(num_str+str(int(num_str[0])-1)+num_str[::-1])\n    else:\n        temp_str = num_str\n        temp_str_len = num_str_len\n        while temp_str_len > 1:\n            if int(temp_str) % 11 == 0:\n                temp_str = temp_str[0]+str(int(temp_str[1])-1)+temp_str[::-1]\n                temp_str_len -= 2\n            else:\n                temp_str = temp_str[0]+temp_str[-1]+temp_str[1:len(temp_str)-1][::-1]\n                temp_str_len -= 2\n        next_palindrome = int(temp_str+temp_str[::-1])\n    return next_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return num\n    for i in range(0, len(num)):\n        if num[i]!= num[-1-i]:\n            temp = num[0:i] + num[i+1:len(num)]\n            if temp == temp[::-1]:\n                return int(temp + num)\n            else:\n                return int(temp + num + temp[::-1])\n    if len(num) == 1:\n        return int(num + num[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #base case\n    if len(num) == 1:\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    try:\n        num = int(num)\n    except:\n        sys.exit(\"Invalid input!\")\n    if not num >= 0:\n        sys.exit(\"Number must be positive!\")\n    num = str(num)\n    if len(num) == 1:\n        return num\n    num_list = [int(x) for x in num]\n    reverse_num = num[::-1]\n    if int(reverse_num) < int(num):\n        new_num = num[:-1]\n    else:\n        for i, x in enumerate(num_list):\n            if x!= int(reverse_num[i]):\n                break\n        new_num = num[:i] + str(int(reverse_num[i]) - 1) + str(int(reverse_num[i]) - 1)\n    return new_num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Method 1: \n    # is palindrome = is palindrome[::-1]\n    # Method 2:\n    # reverse the integer and add 1, and compare if the reverse with original is palindrome\n    '''\n    Method 1\n    if type(num)!= int:\n        raise Exception('Number needs to be an integer')\n    palindrome = str(num)\n    while True:\n        if palindrome == palindrome[::-1]:\n            return int(palindrome)\n        else:\n            palindrome = str(int(palindrome)+1)\n    '''\n    # Method 2\n    if type(num)!= int:\n        raise Exception('Number needs to be an integer')\n    palindrome = str(num)\n    n = len(palindrome)\n    if palindrome == palindrome[::-1]:\n        return int(palindrome)\n    else:\n        for i in range(n-1):\n            if palindrome[i] < palindrome[i+1]:\n                break\n        if i == n-1:\n            i = 0\n        else:\n            i += 1\n        palindrome = palindrome[:i] + str(int(palindrome[i])+1) + palindrome[i+1:]\n        return int(palindrome)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return \"Out of Range\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 0 or k > n:\n        raise ValueError(f'Incorrect input: k = {k}')\n    return binary_search_helper(arr, 0, n-1, n-k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    def partition(arr, lo, hi):\n        '''\n        Finds the middle element and returns its index.\n        '''\n        if arr is None or len(arr) == 0:\n            return None\n        i = (lo-1)\n        pivot = arr[hi]\n        for j in range(lo, hi):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[hi] = arr[hi], arr[i+1]\n        return (i+1)\n    \n    def kth_element_helper(arr, lo, hi, k):\n        '''\n        Return the kth element in the given array using the partition method.\n        '''\n        if k > 0 and k <= hi - lo + 1:\n            pi = partition(arr, lo, hi)\n            if pi - lo == k - 1:\n                return arr[pi]\n            elif pi - lo > k - 1:\n                return kth_element_helper(arr, lo, pi - 1, k)\n            else:\n                return kth_element_helper(arr, pi + 1, hi, k - pi + lo - 1)\n        else:\n            return None\n    \n    return kth_element_helper(arr, 0, len(arr) - 1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    p = partition(arr, 0, len(arr) - 1)\n    if p == k - 1:\n        return arr[p]\n    elif k > p + 1:\n        return kth_element(arr[p + 1:], k - p - 1)\n    else:\n        return kth_element(arr[:p], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, l, r):\n        n = r - l + 1\n        pivot = arr[l]\n        i = l + 1\n        for j in range(i, r+1):\n            if arr[j] < pivot:\n                arr[j], arr[i] = arr[i], arr[j]\n                i += 1\n        arr[l], arr[i-1] = arr[i-1], arr[l]\n        return i - 1\n    \n    def quick_sort(arr, l, r):\n        if l < r:\n            pi = partition(arr, l, r)\n            if pi == k - 1:\n                return arr[pi]\n            elif pi < k - 1:\n                return quick_sort(arr, pi + 1, r)\n            else:\n                return quick_sort(arr, l, pi - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None or k < 1:\n        return None\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        # Get the index of the partition\n        partition_index = partition(arr, low, high)\n        # Get the partition index as the kth element\n        if partition_index + 1 == k:\n            return arr[partition_index]\n        # If the partition index is greater than the kth element, look in the left partition\n        elif partition_index + 1 > k:\n            high = partition_index - 1\n        # Otherwise look in the right partition\n        else:\n            low = partition_index + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        pivot_index = start + (end - start)//2\n        pivot = arr[pivot_index]\n        # print(\"pivot\", pivot)\n        left = arr[start]\n        right = arr[end]\n        if left > pivot:\n            end = pivot_index - 1\n        elif right < pivot:\n            start = pivot_index + 1\n        else:\n            if k == pivot_index+1:\n                return pivot\n            elif k < pivot_index+1:\n                end = pivot_index - 1\n            else:\n                start = pivot_index + 1\n    return None\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word.title() for word in word.split('_')])\n    # or\n    # return word.title().translate(None, '_')\n    # or\n    # return ''.join([w.title() for w in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # method 1\n    return word[0].upper() + word[1:].lower()\n    # method 2\n    return ''.join([word[0].upper(), word[1:]])\n    # method 3\n    return ''.join(word[0].upper() + word[1:])\n    # method 4\n    return ''.join([i.capitalize() for i in word.split('_')])\n    # method 5\n    return ''.join(word.split('_')).capitalize()\n    # method 6\n    new_str = ''\n    for word in word.split('_'):\n        new_str += word.capitalize()\n    return new_str\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # https://www.geeksforgeeks.org/snake-case-strings-in-python/\n    \n    # first_word = word.split('_')[0]\n    # return first_word + word[1:].replace('_', '')\n    \n    # other way\n    \n    if not word:\n        return word\n    \n    result = [word[0].upper()]\n    \n    for i in range(1, len(word)):\n        if word[i]!= '_':\n            result.append(word[i])\n        else:\n            result[-1] = word[i].upper()\n    \n    return ''.join(result)\n    \nprint(snake_to_camel(\"x_y_z_foo_bar_baz_qux_mux\"))\nprint(snake_to_camel(\"start_and_stop\"))\nprint(snake_to_camel(\"snakes_and_ladders\"))"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word using _\n    result = word.split(\"_\")\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = [word[0].upper()]\n    for letter in word[1:]:\n        if letter.isupper():\n            words.append('_')\n        words.append(letter)\n    return ''.join(words)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    word = [x.capitalize() for x in word]\n    return \"\".join(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = []\n    for i in word.split(\"_\"):\n        if len(i) == 0:\n            continue\n        result.append(i.title())\n    return \"\".join(result)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_string = ''\n    for i in range(0, len(word)):\n        if i == 0:\n            snake_string += word[i].upper()\n        elif word[i-1] == '_':\n            snake_string += word[i].upper()\n        else:\n            snake_string += word[i]\n    return snake_string\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n*(n+1)//2\n    if n == m:\n        return (n-1)*n*(n+1)//6\n    else:\n        return n*eulerian_num(n-1, m) + m*eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (m * (m - 1)) // 2 * n\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def sum_num(num):\n        s = 0\n        for x in num:\n            s = s + int(x)\n        return s\n    a_num = 1\n    b_num = 0\n    while True:\n        if sum_num(str(a_num)[:m]) == sum_num(str(a_num)[m:]) and sum_num(str(a_num)[:m]) == sum_num(str(a_num)[m:]) + n:\n            return a_num\n        a_num = a_num + 1\n        b_num = b_num + 1\n        if b_num > n:\n            return None\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define the variable.\n    a_num = 0\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (pow(2, n, m) - 1) % m\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % m!= 0:\n        return 0\n    else:\n        x = n // m\n        y = n - m * x\n        return x * (m + y)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i + j == n + m and i!= j:\n                return True\n    return False\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (m + 1) - 1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*(n-1) + m*(m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    n = abs(n)\n    m = abs(m)\n    if (n < m):\n        n, m = m, n\n    if (n < m):\n        n, m = m, n\n    # print(n, m)\n    if (n == 0 or m == 0):\n        return 0\n    if (n == 1 or m == 1):\n        if (n == 1 and m == 1):\n            return 1\n        elif (n == 1):\n            return 0\n        else:\n            return 1\n    if (n > m):\n        if ((n - m) % 2 == 0):\n            # print(\"Got n>m and n-m even:\", n, m)\n            return eulerian_num(n - m, m)\n        else:\n            # print(\"Got n>m and n-m odd:\", n, m)\n            return 0\n    if (n == m):\n        # print(\"Got n == m:\", n, m)\n        return eulerian_num(n - 2, m) + 1\n    if (n < m):\n        # print(\"Got n < m:\", n, m)\n        return eulerian_num(n, m - 1) + 1\n    # print(\"Got n == m:\", n, m)\n    return eulerian_num(n - 2, m) + 1\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(sorted,input_list))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        output_list.append(sorted_sublist)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(input_list)\n    for i in input_list:\n        i.sort()\n    print(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[sorted(i) for i in x] for x in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass # remove this line when you start implementing the function\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in input_list:\n        l.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # list of sublists\n    sublists = []\n    # for each list\n    for list_obj in input_list:\n        # for each element of list\n        for index, element in enumerate(list_obj):\n            # if sublist not in sublists\n            if [element] not in sublists:\n                # append sublist to sublists\n                sublists.append([element])\n            # if sublist is in sublists\n            else:\n                # find sublist\n                sublist_index = sublists.index([element])\n                # and add element to that sublist\n                sublists[sublist_index].append(element)\n    # sort sublists\n    sublists.sort(key=lambda x: x[0])\n    # return sorted sublists\n    return sublists\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #print input_list\n    #print '\\n'\n    for index, sublist in enumerate(input_list):\n        input_list[index] = sorted(sublist)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for x in input_list:\n        new_list.append(sorted(x))\n    return new_list\n    \n    \ndef sort_sublists_one_liner(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[sorted(x)] for x in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for each_list in input_list:\n        each_list.sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    true = 0\n    false = 0\n    for i in lst:\n        if i == True:\n            true += 1\n        else:\n            false += 1\n    return true, false\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    print(\"The given list is : \",lst)\n    print(\"The number of True in the given list is : \",sum(map(bool,lst)))\n    \ndef list_name(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    print(data)\n    json_data.close()\n    for key in data.keys():\n        if key[0]==\"L\":\n            print(key)\n    print(data['Lists']['List1'])\n    \ndef list_comp():\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open('data.json')\n    data=json.load(json_data)\n    json_data.close()\n    list_name=list(data['Lists'].keys())\n    print(\"The list name is : \",list_name)\n    \ndef list_comp_loop():\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open('data.json')\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n    \ndef extract_list_names(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    list_name=list(data['Lists'].keys())\n    print(\"The list name is : \",list_name)\n    \ndef extract_list_names_loop(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop2(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop3(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop4(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop5(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop6(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop7(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop8(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop9(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop10(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop11(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop12(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop13(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop14(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop15(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop16(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop17(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop18(name):\n    '''\n    Write a python function to extract list names from given json and create dictionar"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for each in lst:\n        if each:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in range(len(lst)):\n        if(lst[i] == True):\n            count+=1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(1)\n    return [test_list, test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    test_tup.append(test_list)\n    print(test_tup)\n    \n    return\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass # Remove this line\n    # Note:  the code below is just an example\n    # add_lists([1,2,3],[4,5,6]) ->  [(1,4),(2,5),(3,6)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    return test_list\n    # test_list.append(test_tup)\n    # print(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_app = test_list.copy()\n    tup_app = tuple(list_app)\n    return tup_app\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # your code\n    \n    \ndef add_tuples(test_tup, test_list):\n    '''\n    Write a function to append the given tuples to the given list.\n    '''\n    # your code\n    \n    \ndef test_lists():\n    # initialize a list of 'empty' lists\n    test_list = [ [] for x in range(3) ]\n    # initialize a list of 'empty' tuples\n    test_tup = tuple([ () for x in range(3) ])\n    # create some more 'empty' lists\n    test_list2 = [ [] for x in range(3) ]\n    # create some more 'empty' tuples\n    test_tup2 = tuple([ () for x in range(3) ])\n    # add a non-empty list to each 'empty' list\n    test_list[0].append(1)\n    # add a non-empty tuple to each 'empty' tuple\n    test_tup[0].append(1)\n    # add a non-empty list to each 'empty' list\n    test_list[1].append(2)\n    # add a non-empty tuple to each 'empty' tuple\n    test_tup[1].append(2)\n    # add a non-empty list to each 'empty' list\n    test_list[2].append(3)\n    # add a non-empty tuple to each 'empty' tuple\n    test_tup[2].append(3)\n    # add the list of lists to the list of tuples\n    add_lists(test_list, test_tup)\n    # add the tuple of tuples to the list of tuples\n    add_tuples(test_tup, test_list)\n    # return the list of lists\n    return test_list\n    # return the tuple of tuples\n    return test_tup\n    \n    \ndef sort_nested_list(test_list):\n    '''\n    Write a function to sort a nested list (in order) by using the built-in\n    function sorted() for each sub-list.\n    '''\n    # your code\n    \n    \ndef test_nested_list():\n    # create the list of lists\n    test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    # sort the list\n    sort_nested_list(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_strings(test_list):\n    '''\n    Write a function to sort a list of strings (in order) by using the built-in\n    function sorted().\n    '''\n    # your code\n    \n    \ndef test_sort_strings():\n    # create the list of strings\n    test_list = ['A', 'B', 'C']\n    # sort the list\n    sort_strings(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_strings_reverse(test_list):\n    '''\n    Write a function to sort a list of strings (in order) by using the built-in\n    function sorted() in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_strings_reverse():\n    # create the list of strings\n    test_list = ['C', 'B', 'A']\n    # sort the list\n    sort_strings_reverse(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_strings_descending(test_list):\n    '''\n    Write a function to sort a list of strings (in order) by using the built-in\n    function sorted() in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_strings_descending():\n    # create the list of strings\n    test_list = ['C', 'B', 'A']\n    # sort the list\n    sort_strings_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_integers(test_list):\n    '''\n    Write a function to sort a list of integers (in order) by using the built-in\n    function sorted().\n    '''\n    # your code\n    \n    \ndef test_sort_integers():\n    # create the list of integers\n    test_list = [3, 1, 2]\n    # sort the list\n    sort_integers(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_integers_descending(test_list):\n    '''\n    Write a function to sort a list of integers (in order) by using the built-in\n    function sorted() in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_integers_descending():\n    # create the list of integers\n    test_list = [3, 1, 2]\n    # sort the list\n    sort_integers_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_floats(test_list):\n    '''\n    Write a function to sort a list of floating-point numbers (in order) by\n    using the built-in function sorted().\n    '''\n    # your code\n    \n    \ndef test_sort_floats():\n    # create the list of floating-point numbers\n    test_list = [3.14159265, 1.414214, 2.7182818]\n    # sort the list\n    sort_floats(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef test_sort_floats_descending():\n    # create the list of floating-point numbers\n    test_list = [3.14159265, 1.414214, 2.7182818]\n    # sort the list\n    sort_floats_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_zero_one_two(test_list):\n    '''\n    Write a function to sort a list of integers (in order) by using the built-in\n    function sorted() with a lambda function.\n    '''\n    # your code\n    \n    \ndef test_sort_zero_one_two():\n    # create the list of integers\n    test_list = [0, 1, 2]\n    # sort the list\n    sort_zero_one_two(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_zero_one_two_descending(test_list):\n    '''\n    Write a function to sort a list of integers (in order) by using the built-in\n    function sorted() with a lambda function in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_zero_one_two_descending():\n    # create the list of integers\n    test_list = [0, 1, 2]\n    # sort the list\n    sort_zero_one_two_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_numbers(test_list):\n    '''\n    Write a function to sort a list of floating-point numbers (in order) by\n    using the built-in function sorted().\n    '''\n    # your code\n    \n    \ndef test_sort_numbers():\n    # create the list of floating-point numbers\n    test_list = [3.14159265, 1.414214, 2.7182818]\n    # sort the list\n    sort_numbers(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_numbers_descending(test_list):\n    '''\n    Write a function to sort a list of floating-point numbers (in order) by\n    using the built-in function sorted() in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_numbers_descending():\n    # create the list of floating-point numbers\n    test_list = [3.14159265, 1.414214, 2.7182818]\n    # sort the list\n    sort_numbers_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_negative_positive(test_list):\n    '''\n    Write a function to sort a list of integers (in order"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # list\n    return [i for i in test_list if i not in test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print('Input List: ', test_list)\n    print('Input Tuple: ', test_tup)\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(\"p\")\n    test_tup[1] = 2\n    return test_list, test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    for i in num1:\n        sorted_list.append(i)\n    for i in num2:\n        sorted_list.append(i)\n    for i in num3:\n        sorted_list.append(i)\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = num1[::-1]\n    l2 = num2[::-1]\n    l3 = num3[::-1]\n    \n    l1 = l1[:-1]\n    l2 = l2[:-1]\n    l3 = l3[:-1]\n    \n    print(l1)\n    print(l2)\n    print(l3)\n    \n    heapq.heapify(l1)\n    heapq.heapify(l2)\n    heapq.heapify(l3)\n    print(l1)\n    print(l2)\n    print(l3)\n    l = []\n    while (l1 and l2 and l3):\n        if l1[0] >= l2[0] and l1[0] >= l3[0]:\n            l.append(l1[0])\n            heapq.heappop(l1)\n        elif l2[0] >= l1[0] and l2[0] >= l3[0]:\n            l.append(l2[0])\n            heapq.heappop(l2)\n        else:\n            l.append(l3[0])\n            heapq.heappop(l3)\n            \n    while(l1):\n        l.append(l1[0])\n        heapq.heappop(l1)\n    while(l2):\n        l.append(l2[0])\n        heapq.heappop(l2)\n    while(l3):\n        l.append(l3[0])\n        heapq.heappop(l3)\n    return l\n    \ndef max_heapify(arr,i,n):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    \n    if l < n and arr[l] > arr[largest]:\n        largest = l\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    if largest!= i:\n        arr[largest],arr[i] = arr[i],arr[largest]\n        max_heapify(arr,largest,n)\n    \ndef build_max_heap(arr):\n    n = len(arr)\n    for i in range((n//2),-1,-1):\n        max_heapify(arr,i,n)\n    \ndef heapsort(arr):\n    build_max_heap(arr)\n    for i in range(len(arr)-1,0,-1):\n        arr[0],arr[i] = arr[i],arr[0]\n        max_heapify(arr,0,i)\n    return arr\n    \ndef find_occurrences(text,pattern):\n    '''\n    Return the number of times that the pattern occurs in the text.\n    '''\n    count = 0\n    for i in range(0,len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n    return count\n    \ndef find_next_greatest_letter(letters,target):\n    '''\n    Write a function that takes in a string \n    and returns the next letter in the alpahbet.\n    '''\n    \n    if target >= letters[-1]:\n        return letters[0]\n    else:\n        for i in range(len(letters)-1,0,-1):\n            if target >= letters[i]:\n                return letters[i]\n            \n            \ndef is_rotation(s1,s2):\n    '''\n    Returns true if s2 is a rotation of s1.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        for i in range(len(s1)):\n            if s2[0 + i] == s1[0]:\n                return True\n        return False\n    \ndef is_rotation_lazy(s1,s2):\n    '''\n    Returns true if s2 is a rotation of s1.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        return s2 in s1 + s1\n    \ndef find_rotation(s1,s2):\n    '''\n    Returns index of first occurence of s2 in s1\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        for i in range(len(s1)):\n            if s2[0] == s1[i]:\n                return i\n        return False\n    \ndef contains_word_lazy(s,word):\n    '''\n    Returns true if the word is a substring of s\n    '''\n    return word in s\n    \ndef is_palindrome_permutation(s):\n    '''\n    Returns true if s is a permutation of a palindrome.\n    '''\n    \n    p = dict()\n    for i in s:\n        if i in p.keys():\n            p[i] += 1\n        else:\n            p[i] = 1\n    flag = True\n    for i in p.keys():\n        if p[i] % 2!= 0:\n            if flag:\n                flag = False\n            else:\n                return False\n    return True\n    \ndef is_palindrome_permutation_lazy(s):\n    '''\n    Returns true if s is a permutation of a palindrome.\n    '''\n    \n    s = s.lower()\n    p = dict()\n    for i in s:\n        if i in p.keys():\n            p[i] += 1\n        else:\n            p[i] = 1\n    flag = True\n    for i in p.keys():\n        if p[i] % 2!= 0:\n            if flag:\n                flag = False\n            else:\n                return False\n    return True\n    \ndef is_palindrome_permutation_pythonic(s):\n    '''\n    Returns true if s is a permutation of a palindrome.\n    '''\n    return sum([i % 2 for i in collections.Counter(s.lower()).values()]) <= 1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    \n    if i < len(num1):\n        merged_list.extend(num1[i:])\n    if j < len(num2):\n        merged_list.extend(num2[j:])\n    if k < len(num3):\n        merged_list.extend(num3[k:])\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i,j,k = 0,0,0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            sorted_list.append(num1[i])\n            i+=1\n        elif num2[j] <= num3[k]:\n            sorted_list.append(num2[j])\n            j+=1\n        else:\n            sorted_list.append(num3[k])\n            k+=1\n    sorted_list.extend(num1[i:])\n    sorted_list.extend(num2[j:])\n    sorted_list.extend(num3[k:])\n    return sorted_list\ndef find_missing_num(num_list):\n    '''\n    Write a function to find the missing number in a given integer list.\n    '''\n    num_set = set(num_list)\n    for i in range(1,len(num_list)+1):\n        if i not in num_set:\n            return i\ndef binary_search(num_list,target):\n    '''\n    Write a function to search a specific target in a given integer list.\n    '''\n    low,high = 0,len(num_list)\n    while low < high:\n        mid = low + (high-low)//2\n        if num_list[mid] == target:\n            return True\n        elif num_list[mid] < target:\n            low = mid+1\n        else:\n            high = mid-1\n    return False\ndef move_zeros(num_list):\n    '''\n    Write a function that accepts a list of numbers and moves all zeros to the end,\n    preserving the order of the other elements.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list[i])\n            num_list.remove(num_list[i])\n    return num_list\ndef min_swaps_list(num_list):\n    '''\n    Write a function that accepts a list and swaps the first and last elements\n    until the order is reversed.\n    '''\n    i,swap_counter = 0,0\n    while i < len(num_list)-1:\n        if num_list[i] > num_list[i+1]:\n            temp = num_list[i]\n            num_list[i] = num_list[i+1]\n            num_list[i+1] = temp\n            swap_counter += 1\n        i+=1\n    return swap_counter\ndef min_cost_path(grid):\n    '''\n    Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right\n    by which the sum of the numbers along its path is minimum.\n    '''\n    def min_path(row,col):\n        if row == m-1 and col == n-1:\n            return grid[row][col]\n        elif row == m-1:\n            return grid[row][col] + min_path(row,col+1)\n        elif col == n-1:\n            return grid[row][col] + min_path(row+1,col)\n        else:\n            return grid[row][col] + min(min_path(row,col+1),min_path(row+1,col))\n    m,n = len(grid),len(grid[0])\n    return min_path(0,0)\ndef find_median_of_sorted_arrays(num1,num2):\n    '''\n    Write a function to find the median of two sorted arrays.\n    '''\n    sorted_list = merge_sorted_list(num1,num2)\n    print(sorted_list)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        median = (sorted_list[n//2-1]+sorted_list[n//2])/2\n    else:\n        median = sorted_list[n//2]\n    return median\ndef find_max_crossing_subarray(num_list,low,mid,high):\n    '''\n    Write a function to find the maximum sum subarray in a given array.\n    '''\n    left_sum,left_low,left_high = 0,low,mid\n    right_sum,right_low,right_high = 0,mid+1,high\n    while left_low <= left_high:\n        left_sum += num_list[left_low]\n        left_low += 1\n    while right_low <= right_high:\n        right_sum += num_list[right_low]\n        right_low += 1\n    return max(left_sum,right_sum,left_sum+right_sum)\ndef max_subarray_sum(num_list):\n    '''\n    Write a function to find the maximum sum of a contiguous subarray in a given array.\n    '''\n    low,high = 0,len(num_list)-1\n    max_sum = num_list[low]\n    while low < high:\n        mid = low + (high-low)//2\n        max_sum = max(max_sum,find_max_crossing_subarray(num_list,low,mid,high))\n        if num_list[mid] >= num_list[high]:\n            high = mid\n        else:\n            low = mid+1\n    return max_sum\ndef find_subarray_sum(num_list,target_sum):\n    '''\n    Write a function to find a subarray in a given array with the given sum.\n    '''\n    for i in range(len(num_list)):\n        curr_sum,low,high = 0,i,i\n        while curr_sum < target_sum:\n            curr_sum += num_list[high]\n            high += 1\n        if curr_sum == target_sum:\n            return num_list[low:high]\n        curr_sum -= num_list[low]\ndef find_rotation_point(num_list):\n    '''\n    Write a function to find the index of the \"rotation point\" in a given array.\n    '''\n    def search(left,right):\n        while left <= right:\n            mid = left + (right-left)//2\n            if num_list[mid] > num_list[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n    left,right = 0,len(num_list)-1\n    return search(left,right)\ndef max_sum_subarray(num_list):\n    '''\n    Write a function to find the maximum sum of a contiguous subarray in a given array.\n    '''\n    low,high = 0,0\n    max_sum,curr_sum = num_list[low],0\n    while low < len(num_list):\n        if curr_sum < 0:\n            curr_sum = 0\n            high = low+1\n        else:\n            curr_sum += num_list[high]\n            high += 1\n        max_sum = max(max_sum,curr_sum)\n    return max_sum\ndef find_sum_of_two_nums_with_sum(num_list,target_sum):\n    '''\n    Write a function to find two numbers in a list whose sum is equal to the target_sum.\n    '''\n    num_dict = {}\n    for num in num_list:\n        num_dict[num] = True\n    for num in num_list:\n        if target_sum-num in num_dict:\n            return num,target_sum-num\ndef find_longest_subarray(num_list):\n    '''\n    Write a function to find the longest subarray in a given array with sum 0.\n    '''\n    low,high = 0,0\n    curr_sum,max_len = 0,0\n    while high < len(num_list):\n        curr_sum += num_list[high]\n        high += 1\n        while curr_sum < 0:\n            curr_sum -= num_list[low]\n            low += 1"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    new_list = num1 + num2 + num3\n    #print(new_list)\n    new_list.sort()\n    print(new_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    heapq.heapify(num1)\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] < num3[0]:\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n            heapq.heappush(num1,num2[0])\n            heapq.heappush(num2,num3[0])\n        elif num1[0] < num3[0] < num2[0]:\n            heapq.heappop(num1)\n            heapq.heappop(num3)\n            heapq.heappush(num1,num3[0])\n            heapq.heappush(num3,num2[0])\n        else:\n            heapq.heappop(num2)\n            heapq.heappop(num3)\n            heapq.heappush(num2,num3[0])\n            heapq.heappush(num3,num1[0])\n    if num2:\n        return num2\n    elif num3:\n        return num3\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list=[]\n    i,j,k=0,0,0\n    while i < len(num1) and j < len(num2) and k<len(num3):\n        if num1[i] < num2[j]:\n            new_list.append(num1[i])\n            i+=1\n        elif num2[j] < num3[k]:\n            new_list.append(num2[j])\n            j+=1\n        else:\n            new_list.append(num3[k])\n            k+=1\n    while i < len(num1):\n        new_list.append(num1[i])\n        i+=1\n    while j < len(num2):\n        new_list.append(num2[j])\n        j+=1\n    while k < len(num3):\n        new_list.append(num3[k])\n        k+=1\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) == 0:\n        if len(num2) == 0:\n            return num3\n        elif len(num3) == 0:\n            return num2\n        elif num2[0] < num3[0]:\n            return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n        else:\n            return [num3[0]] + merge_sorted_list(num1,num2,num3[1:])\n    elif len(num2) == 0:\n        if len(num1) == 0:\n            return num3\n        elif len(num3) == 0:\n            return num1\n        elif num1[0] < num3[0]:\n            return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n        else:\n            return [num3[0]] + merge_sorted_list(num1,num2,num3[1:])\n    elif len(num3) == 0:\n        if len(num1) == 0:\n            return num2\n        elif len(num2) == 0:\n            return num1\n        elif num1[0] < num2[0]:\n            return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n        else:\n            return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n    elif num1[0] < num2[0] and num1[0] < num3[0]:\n        return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n    elif num2[0] < num1[0] and num2[0] < num3[0]:\n        return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n    elif num3[0] < num1[0] and num3[0] < num2[0]:\n        return [num3[0]] + merge_sorted_list(num1,num2,num3[1:])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    list1.append(num1)\n    list2.append(num2)\n    list3.append(num3)\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    list3 = sorted(list3)\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if (list1[i] == list2[j]) and (list1[i] == list3[k]):\n                    list1.append(list1[i])\n                    list2.remove(list2[j])\n                    list3.remove(list3[k])\n    return list1+list2+list3\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap1 = []\n    heap2 = []\n    for i in range(len(num1)):\n        heapq.heappush(heap1,(num1[i],i))\n    for i in range(len(num2)):\n        heapq.heappush(heap2,(num2[i],i))\n    heapq.heappush(heap2,(-1,-1))\n    output = []\n    while True:\n        num,index = heapq.heappop(heap1)\n        if index == -1:\n            break\n        if len(heap2) > 0 and -heap2[0][0] > num:\n            _,i = heapq.heappop(heap2)\n            heapq.heappush(heap1,(num,index))\n            heapq.heappush(heap2,(num,i))\n        else:\n            output.append(num)\n    while len(heap2) > 0:\n        output.append(heapq.heappop(heap2)[0])\n    return output\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s1 = s\n    for i in range(n):\n        s1 = s1[1:] + s1[0]\n    return s1\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize answer\n    ans = 0\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Code here\n    return n // 2 if n % 2 == 0 else n // 2 + 1\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        x = s[i:]+s[:i]\n        if int(x,2)%2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans = 0\n    for i in range(n):\n        if int(s,2) & 1:\n            ans+=1\n        s = s[-1]+s[0:-1]\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def number_of_rotations(s):\n        return sum([1 if i==\"1\" else 0 for i in s])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (s.count('0')+s.count('1'))%2 == n%2\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string = str(s)\n    rotate = str()\n    for i in range(0,n):\n        rotate+=string[i:]+string[:i]\n    print(\"rotate: \"+rotate)\n    count = 0\n    for j in rotate:\n        if j == '0':\n            count+=1\n    return count\nprint(\"Q6: \", odd_Equivalent(s, n))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    bin_string = bin(s)\n    print(bin_string)\n    res = 0\n    for i in range(0,len(bin_string)):\n        if (bin_string[i]=='1'):\n            res+=1\n    return ((n-res)+(n-res)%2) \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    x = bin(n)[2:]\n    y = bin(n)[2:]\n    count = 0\n    for i in x:\n        if i == '1':\n            count +=1\n    for i in y:\n        if i == '1':\n            count +=1\n    return(count)\n    \ndef x_Maximum(n,k):\n    '''\n    Write a python function to find the number of x when given a number of n and k.\n    '''\n    return(n**k)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for l in nestedlist:\n        if type(l) is list:\n            result.extend(common_in_nested_lists(l))\n        else:\n            result.append(l)\n    return set(result)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    def flatten(nestedlist):\n        for element in nestedlist:\n            if type(element) == type([]):\n                yield from flatten(element)\n            else:\n                yield element\n    #\n    return list(set(flatten(nestedlist)))\n    \n    \nif __name__ == '__main__':\n    # nested = [1, 2, [3, [4], 5], 6]\n    # # expected = [1, 2, 3, 4, 5, 6]\n    # print(common_in_nested_lists(nested))\n    \n    # nested = [1, 2, [3, [4], 5], 6]\n    # expected = [1, 2, 5, 6]\n    # print(common_in_nested_lists(nested))\n    \n    nested = [1, [2, 3, [4, [5, 6]]]]\n    expected = [1, 2, 3, 4, 5, 6]\n    print(common_in_nested_lists(nested))"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def _common_in_nested_lists(nestedlist):\n        # base case\n        if isinstance(nestedlist, list):\n            return _common_in_nested_lists(nestedlist[0])\n        elif len(nestedlist) == 1:\n            return nestedlist[0]\n        else:\n            # Recursive case\n            return set.intersection(*(set(l) for l in nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in result:\n                result.append(item)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #create a empty set\n    set = set()\n    #create a for loop and for each item in the nested list check if the item is in the set or not\n    for each in nestedlist:\n        #if the item is not in the set then add it\n        if each not in set:\n            set.add(each)\n        #if the item is in the set then check if its in the nested list\n        elif each in set:\n            if each in nestedlist:\n                #if it is in the list then add it to the set\n                set.add(each)\n    #return the set\n    return set\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    # check all the elements of the first element of the nested list\n    # and if the element is also present in any other lists, then it is common\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in nestedlist[i]:\n                result.append(nestedlist[i][j])\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        if isinstance(i, list):\n            if common_in_nested_lists(i):\n                return True\n    return False\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    i = 0\n    while i < len(nestedlist):\n        for j in nestedlist:\n            if j == nestedlist[i]:\n                return j\n        i += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    d = dict()\n    for i in nestedlist:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d.keys()\n    \nprint(common_in_nested_lists([[1,2,3],[1,2,3],[1,2,3]]))\nprint(common_in_nested_lists([[1,2,3],[2,4,6],[1,2,3]]))\nprint(common_in_nested_lists([[1,2,3],[1,2,3],[2,4,6]])"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # if not str(text).isdecimal():\n    #     raise TypeError(\"Expected a decimal, got \" + str(text))\n    try:\n        int(text)\n    except ValueError:\n        raise ValueError(\"Expected a decimal, got \" + str(text))\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_integer_edge_cases(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        if len(text) == 1:\n            return True\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if isinstance(text, int):\n        return True\n    if text.count('.') > 1:\n        return False\n    if text.count('.') == 1:\n        l, r = text.split('.')\n        if l and r:\n            if l.isdigit() and r.isdigit():\n                return True\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    import re\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.replace(\" \", \"\")\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    empty_list = []\n    empty_list2 = []\n    \n    for i in list1:\n        if bool(i) == True:\n            empty_list.append(i)\n        if bool(i) == False:\n            empty_list2.append(i)\n    if empty_list == [] and empty_list2!= []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) > 0:\n        for i in list1:\n            if bool(i):\n                return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list=[]\n    for i in range(0,len(list1)):\n        if not list1[i]:\n            empty_list.append(True)\n        else:\n            empty_list.append(False)\n    if all(empty_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i) == True:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)!= len(list1[0]):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if len(x) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not all([dict1=={} for dict1 in list1]):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    if len(list1) == 0:\n        return True\n    \n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num1 = nums[0]\n    num2 = nums[1]\n    num3 = nums[2]\n    return int(num1) + int(num2) + int(num3)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(e) for e in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    t = tuple(nums)\n    return int(''.join(str(i) for i in t))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        return\n    for num in nums:\n        if not isinstance(num, int):\n            return\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n    \ndef add_up(nums):\n    '''\n    Write a function to add up all the numbers in a list of integers. Assume the list is empty if it is\n    of length 0 or contains only negative numbers.\n    '''\n    return sum([i for i in nums if i>0])\n    \ndef intersection_of_lists(a,b):\n    '''\n    Write a function to return the intersection of two lists.\n    '''\n    return list(set(a) & set(b))\n    \ndef union_of_lists(a,b):\n    '''\n    Write a function to return the union of two lists.\n    '''\n    return list(set(a) | set(b))\n    \ndef calculate_median(nums):\n    '''\n    Write a function to calculate the median of a list of numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef lower_bound(nums, target):\n    '''\n    Write a function to find the lower bound of a number in a list of numbers. Assume there is at least one\n    number in the list that is greater than or equal to the target.\n    '''\n    return next(i for i in nums if i>=target)\n    \ndef upper_bound(nums, target):\n    '''\n    Write a function to find the upper bound of a number in a list of numbers. Assume there is at least one\n    number in the list that is less than or equal to the target.\n    '''\n    return next(i for i in reversed(nums) if i<=target)\n    \ndef unique(nums):\n    '''\n    Write a function to return the number of unique elements in a list.\n    '''\n    return len(set(nums))\n    \ndef mean(nums):\n    '''\n    Write a function to find the mean of a list of numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef histogram(nums):\n    '''\n    Write a function to count the number of unique elements in a list.\n    '''\n    return len(set(nums))\n    \ndef mode(nums):\n    '''\n    Write a function to find the most common element in a list of numbers.\n    '''\n    return max(nums, key = nums.count)\n    \ndef find_missing_nums(nums):\n    '''\n    Write a function to find the missing numbers in a list of numbers.\n    '''\n    return list(set(range(1,len(nums)+1)).difference(set(nums)))\n    \ndef find_first_n_missing(nums, n):\n    '''\n    Write a function to find the first n missing numbers in a list of numbers.\n    '''\n    return list(set(range(1,len(nums)+1)).difference(set(nums)))[:n]\n    \ndef find_first_n_missing_binary(nums, n):\n    '''\n    Write a function to find the first n missing numbers in a list of numbers. The numbers are given in binary\n    format.\n    '''\n    return list(set(range(1,2**len(nums))) - set(nums))[:n]\n    \ndef count_characters(str1, str2):\n    '''\n    Write a function to compare two strings and return their number of unique characters.\n    '''\n    return len(set(str1+str2))\n    \ndef number_of_swaps(nums):\n    '''\n    Write a function to find the minimum number of swaps to sort a list of numbers.\n    '''\n    swaps = 0\n    for i in range(len(nums)-1):\n        while nums[i]!= i + 1 and nums[nums[i] - 1]!= nums[i]:\n            tmp = nums[i]\n            nums[i] = nums[tmp-1]\n            nums[tmp-1] = tmp\n            swaps += 1\n    return swaps\n    \ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the bubble sort algorithm.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n    \ndef selection_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the selection sort algorithm.\n    '''\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums\n    \ndef insertion_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the insertion sort algorithm.\n    '''\n    for i in range(len(nums)):\n        curr = nums[i]\n        j = i\n        while j > 0 and nums[j-1] > curr:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = curr\n    return nums\n    \ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the merge sort algorithm.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    middle = len(nums)//2\n    left = merge_sort(nums[:middle])\n    right = merge_sort(nums[middle:])\n    \n    return merge(left, right)\n    \ndef merge(left, right):\n    '''\n    Write a function to merge two lists of numbers using the merge sort algorithm.\n    '''\n    result = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] <= right[0]:\n            result.append(left[0])\n            left = left[1:]\n        else:\n            result.append(right[0])\n            right = right[1:]\n    if len(left) > 0:\n        result += left\n    if len(right) > 0:\n        result += right\n    return result\n    \ndef quick_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the quick sort algorithm.\n    '''\n    return quick_sort_helper(nums, 0, len(nums)-1)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    t = 0\n    for i in nums:\n        t = t * 10 + i\n    return t\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        new_list = [float(i) for i in test_list]\n        return new_list\n    except:\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(num) for num in sublist] for sublist in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for list in test_list:\n        result.append(list_to_float_helper(list))\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return list(map(float, test_list))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # solution:\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        float_list = [float(x) for x in test_list]\n        return float_list\n    except ValueError:\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_float = [float(x) for x in test_list]\n    return test_list_float\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_as_list = string.split(' ')\n    return string_as_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split()\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split()\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.strip()\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize dict\n    dict = {}\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr_sorted = sorted(arr)\n    print(arr_sorted)\n    #print(arr)\n    for i in range(len(arr) - 1):\n        if arr_sorted[i]!= arr_sorted[i+1]:\n            print(arr_sorted[i])\n            break\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if(arr[i]==arr[i+1]):\n            return arr[i]\n    return arr[i]\n    \n    \nif __name__ == \"__main__\":\n    arr = [1,3,2,4,1,2,2]\n    print(search(arr))"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid - 1\n    return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    result = n\n    for i in range(n):\n        if i == 0 and arr[i]!= arr[i+1]:\n            result = i\n        elif i == n-1 and arr[i]!= arr[i-1]:\n            result = i\n        elif arr[i]!= arr[i+1] and arr[i]!= arr[i-1]:\n            result = i\n        elif i == n-2 and arr[i] == arr[i+1]:\n            result = i+1\n    print(arr[result])\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    temp = 0\n    for i in range(len(arr)):\n        temp ^= arr[i]\n    return temp\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return None\n    \n    sortedArr = sorted(arr)\n    if len(sortedArr) == 1:\n        return sortedArr[0]\n    \n    if sortedArr[0]!= sortedArr[1]:\n        return sortedArr[0]\n    \n    if sortedArr[-1]!= sortedArr[-2]:\n        return sortedArr[-1]\n    \n    startIdx = 0\n    endIdx = len(sortedArr) - 1\n    while startIdx < endIdx:\n        midIdx = (startIdx + endIdx)//2\n        if sortedArr[midIdx]!= sortedArr[midIdx + 1]:\n            return sortedArr[midIdx]\n        startIdx = midIdx + 1\n        endIdx = endIdx - 1\n    \n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low, high = 0, len(arr)-1\n    while low < high:\n        mid = (low+high)//2\n        if arr[mid] == arr[mid-1]:\n            low = mid+1\n        else:\n            high = mid\n    return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for x in arr:\n        if arr.count(x) == 1:\n            return x\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_tuple = []\n    for tuple in list1:\n        if len(tuple) < 2:\n            continue\n        max_tuple.append(tuple)\n    max_tuple = tuple(max_tuple)\n    return max_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        if list1[i][0] * list1[i][1] > max_prod:\n            max_prod = list1[i][0] * list1[i][1]\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    list3 = []\n    list4 = []\n    for item in list1:\n        list2.append(item[0])\n        list3.append(item[1])\n    for n in range(0, len(list1)-1):\n        list4.append(list2[n] * list3[n+1])\n    print(max(list4))\nmax_product_tuple([(5,6),(1,2),(3,4)])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    highest = 0\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if highest < list1[i]*list1[j]:\n                highest = list1[i]*list1[j]\n                list2 = [(list1[i], list1[j])]\n            elif highest == list1[i]*list1[j]:\n                list2.append((list1[i], list1[j]))\n    return highest, list2\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([t[0] * t[1] for t in list1 if (t[0] * t[1])!= 0])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    print(list1)\n    max_product = 0\n    # for i in list1:\n    #     if i[0]*i[1] > max_product:\n    #         max_product = i[0]*i[1]\n    #         max_tuple = i\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_p = list1[0]\n    for i in range(1, len(list1)):\n        if abs(list1[i][0]*list1[i][1]) > abs(max_p):\n            max_p = list1[i][0]*list1[i][1]\n    return max_p\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    from itertools import combinations\n    pairs = list(combinations(list1, 2))\n    max1 = 0\n    for pair in pairs:\n        if abs(pair[0]*pair[1]) > max1:\n            max1 = abs(pair[0]*pair[1])\n    return max1\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    #sum = 0\n    #for i in range(1,limit+1):\n    #    n_a = sum_divisors(i)\n    #    n_b = sum_divisors(n_a)\n    #    if i == n_b and i!= n_a:\n    #        sum += i\n    #        print(i)\n    #print(sum)\n    return sum([i for i in range(1,limit+1) if sum_divisors(i) == sum_divisors(sum_divisors(i)) and i!= sum_divisors(i)])\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def _sum_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                total += i\n                if i!= n // i:\n                    total += n // i\n        return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        j = sum_divisors(i)\n        if i == sum_divisors(j) and i!= j:\n            total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def amicable_numbers(n):\n        amicable_numbers = set()\n        for number1 in range(1, n):\n            for number2 in range(1, n):\n                if number1 > number2:\n                    if (number1 == sum_factors(number2, number1)) and (number2 == sum_factors(number1, number2)):\n                        amicable_numbers.add(number1)\n                        amicable_numbers.add(number2)\n        return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(x):\n        return sum([num for num in range(1, x) if x % num == 0])\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def divisors(number):\n        divisors = [1]\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                divisors.append(i)\n                if i!= number / i:\n                    divisors.append(number / i)\n        return divisors\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        # base cases\n        if (sum_divisors(i) == i and sum_divisors(sum_divisors(i)) == i):\n            total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def _is_amicable(number):\n        return sum(get_divisors(number)) == number and sum(get_divisors(sum(get_divisors(number)))) == number\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_ = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum_ += i\n    return sum_\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(n):\n        return sum(divisor for divisor in range(1, n) if n % divisor == 0)\n    \n    def sum_amicable_numbers(limit):\n        result = 0\n        for n in range(2, limit):\n            n_a = sum_divisors(n)\n            n_b = sum_divisors(n_a)\n            if n == n_b and n_a!= n:\n                result += n\n        return result\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta = cmath.phase(a)\n    return theta\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #input: a + bi\n    # output: theta = arctan(b/a)\n    if a == 0:\n        print(\"Cannot be divided by zero.\")\n        return None\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if abs(a) == 0:\n        return 0\n    if abs(b) == 0:\n        return 0\n    if a < 0:\n        if b < 0:\n            return cmath.phase(-a)*180/cmath.pi\n        elif b > 0:\n            return cmath.phase(a)*180/cmath.pi\n    elif a > 0:\n        if b < 0:\n            return cmath.phase(a)*180/cmath.pi\n        elif b > 0:\n            return cmath.phase(a)*180/cmath.pi\n    else:\n        return 0\ndef add_complex(a,b):\n    '''\n    Write a function to get the sum of two complex numbers.\n    '''\n    return a + b\ndef minus_complex(a,b):\n    '''\n    Write a function to get the difference of two complex numbers.\n    '''\n    return a - b\ndef times_complex(a,b):\n    '''\n    Write a function to get the product of two complex numbers.\n    '''\n    return a * b\ndef divide_complex(a,b):\n    '''\n    Write a function to get the quotient of two complex numbers.\n    '''\n    return a / b\ndef absolute_complex(a):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    return abs(a)\ndef conjugate_complex(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return a.conjugate()\ndef complex_number(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return a.real\n    elif a.real == 0:\n        return a.imag\ndef display_complex(a):\n    '''\n    Write a function to display a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\ndef arg_complex(a):\n    '''\n    Write a function to get the argument of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef print_complex(a):\n    '''\n    Write a function to display a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef get_print_complex(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef get_print_angle_complex(a):\n    '''\n    Write a function to get the argument of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef get_print_angle_complex_number(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef add_complex_num(a,b):\n    '''\n    Write a function to get the sum of two complex numbers.\n    '''\n    return a + b\ndef minus_complex_num(a,b):\n    '''\n    Write a function to get the difference of two complex numbers.\n    '''\n    return a - b\ndef times_complex_num(a,b):\n    '''\n    Write a function to get the product of two complex numbers.\n    '''\n    return a * b\ndef divide_complex_num(a,b):\n    '''\n    Write a function to get the quotient of two complex numbers.\n    '''\n    return a / b\ndef absolute_complex_num(a):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    return abs(a)\ndef conjugate_complex_num(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return a.conjugate()\ndef complex_number_num(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return a.real\n    elif a.real == 0:\n        return a.imag\ndef display_complex_num(a):\n    '''\n    Write a function to display a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef arg_complex_num(a):\n    '''\n    Write a function to get the argument of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef print_complex_num(a):\n    '''\n    Write a function to display a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef get_print_complex_num(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef get_print_angle_complex_num(a):\n    '''\n    Write a function to get the argument of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef get_print_angle_complex_number_num(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef get_print_angle_complex_number(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef get_print_angle_complex_number(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z=complex(a,b)\n    angle=cmath.phase(z)\n    angle=round(angle,2)\n    print(angle)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    num = cmath.sqrt((a.real ** 2) + (a.imag ** 2))\n    den = cmath.sqrt((b.real ** 2) + (b.imag ** 2))\n    return cmath.phase(num / den)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return cmath.phase(a/b)\ndef is_balanced(s):\n    '''\n    A string is said to be balanced if it has as many opening brackets of a certain type as it has closing brackets of that type\n    For example:\n    >>> is_balanced(\"{[(])}\")\n    True\n    >>> is_balanced(\"{[(])\")\n    False\n    >>> is_balanced(\"{[})\")\n    False\n    '''\n    brackets_dict={\"}\":\"{\",\"]\":\"[\",\")\":\"(\"}\n    brackets=[\"{\",\"[\",\"(\"]\n    stack=[]\n    for bracket in s:\n        if bracket in brackets:\n            stack.append(bracket)\n        else:\n            if bracket in brackets_dict.values() and len(stack)!=0:\n                top_element=stack.pop()\n                if brackets_dict[bracket]!=top_element:\n                    return False\n            else:\n                return False\n    if len(stack)!=0:\n        return False\n    return True\ndef is_match(a,b):\n    '''\n    Given 2 strings, a and b, return whether they match\n    in the sense that a string is a permutation of the other string.\n    >>> is_match('ab', 'ba')\n    True\n    >>> is_match('ab', 'b')\n    False\n    >>> is_match('ab', 'abb')\n    True\n    '''\n    a=sorted(a)\n    b=sorted(b)\n    if a==b:\n        return True\n    else:\n        return False\ndef is_anagram(a,b):\n    '''\n    Write a function to determine if 2 strings are anagrams or not\n    '''\n    return is_match(a,b) and is_match(b,a)\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    return s==s[::-1]\ndef is_rotation(s1,s2):\n    '''\n    Write a function to check if s2 is a rotation of s1 using only one call to is_match\n    '''\n    return is_match(s1+s1,s2)\ndef is_rotation2(s1,s2):\n    '''\n    Write a function to check if s2 is a rotation of s1 using only one call to is_match\n    '''\n    if len(s1)==len(s2):\n        return is_match(s1+s1,s2)\ndef is_subsequence(s,t):\n    '''\n    Write a function to check if s is a subsequence of t\n    >>> is_subsequence('abc', 'ahbgdc')\n    True\n    >>> is_subsequence('axc', 'ahbgdc')\n    False\n    >>> is_subsequence('axc', 'ahbgdcx')\n    True\n    '''\n    if len(s)!=0 and len(t)!=0:\n        if len(s)>=len(t):\n            for i in range(len(t)):\n                if s[i]==t[i]:\n                    pass\n                else:\n                    return False\n            return True\n        else:\n            return False\n    elif len(s)==0 and len(t)==0:\n        return True\n    else:\n        return False\ndef string_rotation(s1,s2):\n    '''\n    Write a function to check if s2 is a rotation of s1 using only one call to is_match\n    '''\n    return is_match(s1+s1,s2)\ndef get_leftmost_rightmost(s):\n    '''\n    Given a string, return leftmost and rightmost indices of a palindrome that is also a palindrome\n    For example:\n    >>> get_leftmost_rightmost(\"aabaa\")\n    [(0,1),(3,4)]\n    >>> get_leftmost_rightmost(\"aabb\")\n    [(0,1),(1,2)]\n    >>> get_leftmost_rightmost(\"aabaa\")\n    [(0,1),(3,4)]\n    >>> get_leftmost_rightmost(\"a\")\n    []\n    >>> get_leftmost_rightmost(\"\")\n    []\n    '''\n    if len(s)<=1:\n        return []\n    else:\n        palindromes=[]\n        for i in range(len(s)):\n            if is_palindrome(s[i:]):\n                palindromes.append((i,i+len(s[i:])))\n        return palindromes\ndef get_leftmost_rightmost2(s):\n    '''\n    Given a string, return leftmost and rightmost indices of a palindrome that is also a palindrome\n    For example:\n    >>> get_leftmost_rightmost(\"aabaa\")\n    [(0,1),(3,4)]\n    >>> get_leftmost_rightmost(\"aabb\")\n    [(0,1),(1,2)]\n    >>> get_leftmost_rightmost(\"aabaa\")\n    [(0,1),(3,4)]\n    >>> get_leftmost_rightmost(\"a\")\n    []\n    >>> get_leftmost_rightmost(\"\")\n    []\n    '''\n    if len(s)<=1:\n        return []\n    else:\n        result=[]\n        for i in range(len(s)):\n            if is_palindrome(s[i:]):\n                result.append((i,i+len(s[i:])))\n        return result\ndef get_substrings_with_k_distinct(s,k):\n    '''\n    Given a string, return a list of all substrings that have k distinct characters\n    For example:\n    >>> get_substrings_with_k_distinct(\"abcacb\",3)\n    ['abc', 'acb', 'bac', 'cab', 'abc', 'acb', 'bac', 'cab']\n    >>> get_substrings_with_k_distinct(\"cabccb\",3)\n    ['abc', 'acb', 'bac', 'cab', 'abc', 'acb', 'bac', 'cab']\n    >>> get_substrings_with_k_distinct(\"aabacbebebe\",3)\n    ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'abe', 'aeb', 'bab', 'bac', 'bbe', 'bec', 'cbe', 'ebe']\n    >>> get_substrings_with_k_distinct(\"aabbccddeeedcba\",3)\n    ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'abe', 'aeb', 'bab', 'bac', 'bbe', 'bec', 'cbe', 'ebe', 'dde', 'ddc', 'dcd', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', '"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0 \n    n = len(string) \n    count_0 = 0\n    count_1 = 0\n    # Iterate the string \n    for i in range(n): \n        if (string[i] == '0'): \n            count_0 += 1\n        else: \n            count_1 += 1\n        # Compare maximum and count of 1s and 0s \n        max_length = max(max_length,count_0,count_1) \n        # Reset count of 1s and 0s \n        count_0 = 0\n        count_1 = 0\n    return max_length \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_one_count = 0\n    max_zero_count = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_dif = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = 0\n    count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n        else:\n            count -= 1\n        res = max(res, count)\n    return res\n    \ndef max_sub_array(nums): \n    '''\n    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n    '''\n    res = 0\n    count = 0\n    for i in nums:\n        count += i\n        res = max(res, count)\n        if count < 0:\n            count = 0\n    return res\n    \ndef max_sub_array_easy(nums): \n    '''\n    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n    '''\n    dp = [0] * (len(nums) + 1)\n    for i in range(1, len(nums) + 1):\n        dp[i] = max(dp[i - 1] + nums[i - 1], nums[i - 1])\n    return max(dp)\n    \ndef max_sub_array_dp(nums): \n    '''\n    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n    '''\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = max(dp[i - 1] + nums[i], nums[i])\n    return max(dp)\n    \ndef count_and_say(n): \n    '''\n    The count-and-say sequence is the sequence of integers with the first five terms as following:\n    1.     1\n    2.     11\n    3.     21\n    4.     1211\n    5.     111221\n    1 is read off as \"one 1\" or 11.\n    11 is read off as \"two 1s\" or 21.\n    21 is read off as \"one 2, then one 1\" or 1211.\n    Given an integer n, generate the nth term of the count-and-say sequence.\n    Note: Each term of the sequence of integers will be represented as a string.\n    '''\n    if n == 1:\n        return '1'\n    res = '1'\n    i = 1\n    while i < n:\n        count = 1\n        pre = res[0]\n        curr = res[0]\n        for j in range(1, len(res)):\n            if curr == pre:\n                count += 1\n            else:\n                res = res[:count] + str(count) + res[count:]\n                count = 1\n                pre = curr\n            curr = res[j]\n        res += str(count) + curr\n        i += 1\n    return res\n    \ndef is_palindrome(x): \n    '''\n    Given an integer x, return true if x is palindrome integer.\n    '''\n    #x = str(x)\n    #return x == x[::-1]\n    if x < 0 or (x % 10 == 0 and x!= 0):\n        return False\n    else:\n        y = 0\n        while x > y:\n            y = y * 10 + x % 10\n            x = x // 10\n        return x == y or x == y // 10\n    \ndef is_palindrome_python(x): \n    '''\n    Given an integer x, return true if x is palindrome integer.\n    '''\n    if x < 0 or (x % 10 == 0 and x!= 0):\n        return False\n    else:\n        y = 0\n        while x > y:\n            y = y * 10 + x % 10\n            x = x // 10\n        return x == y or x == y // 10\n        \ndef is_palindrome_one_line(x): \n    '''\n    Given an integer x, return true if x is palindrome integer.\n    '''\n    return str(x) == str(x)[::-1]\n    \ndef is_power(a, b): \n    '''\n    Given two integers a and b, determine whether the following is true:\n    '''\n    return a ** b == b ** a\n    \ndef is_power_mod_exp(a, b): \n    '''\n    Given a ** b == c (mod d), return [a, b, c, d].\n    '''\n    res = [0, 0, 0, 0]\n    if a == 0:\n        return res\n    if b == 0:\n        return res\n    while b % 2 == 0:\n        b //= 2\n        a = (a % mod) * (a % mod)\n    if b == 1:\n        res[0] = a % mod\n        res[1] = 1\n        res[2] = b\n        res[3] = mod\n    else:\n        res[0] = a\n        res[1] = b\n        res[2] = (a % mod) * (b % mod)\n        res[3] = mod\n    return res\n    \ndef is_power_mod(a, b): \n    '''\n    Given a ** b == c (mod d), return [a, b, c, d].\n    '''\n    c = b % a\n    if c == 0:\n        return [a, b, b // a, b]\n    else:\n        return [a, b, b // a, (b // a + a) % b]\n        \ndef power_sum_conb(a, b): \n    '''\n    Given two integers a and b, find the last digit of a^b.\n    '''\n    return a ** b % 10\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count = 0\n    count = 0\n    for i in string:\n        if i == '1':\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n    if count > max_count:\n        max_count = count\n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(Counter(string).values()) - min(Counter(string).values())\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([string.count('0') - string.count('1'), string.count('1') - string.count('0')])\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    prev_length = 0\n    max_length = 0\n    curr_length = 0\n    for i in string:\n        if i == \"1\":\n            curr_length+=1\n        else:\n            curr_length = 0\n        if curr_length>max_length:\n            max_length = curr_length\n        if curr_length>prev_length:\n            prev_length = curr_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max = 0\n    for i in string:\n        if i == '1':\n            count += 1\n        elif i == '0':\n            count -= 1\n        if count > max:\n            max = count\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    cur_len = 0\n    max_diff = 0\n    for ch in string:\n        if ch == '1':\n            cur_len += 1\n        else:\n            cur_len = 0\n        if cur_len > max_diff:\n            max_diff = cur_len\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=1 \n    sum1=0\n    while(i<=a and i<=b):\n        if (a%i==0 and b%i==0):\n            sum1=sum1+i\n        i=i+1\n    return sum1\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        num = b\n        denom = a\n    else:\n        num = a\n        denom = b\n    if denom % num == 0:\n        return num\n    elif num % denom == 0:\n        return denom\n    else:\n        return sum(denom,num)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    from numpy import gcd\n    \n    result = gcd(a,b)\n    \n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    res = 1\n    for i in range(2, min(a,b) + 1):\n        if a%i == 0 and b%i == 0:\n            res = res*i\n    return res\ndef sum_of_prod(a,b): \n    '''\n    Write a python function to find the sum of products of common divisors of two given numbers.\n    '''\n    return sum(a,b) / (a*b)\ndef main():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    print(\"The sum of common divisors of {0} and {1} is {2}.\".format(a, b, sum(a,b)))\n    print(\"The sum of products of common divisors of {0} and {1} is {2}.\".format(a, b, sum_of_prod(a,b)))\nmain()"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    try:\n        if int(a)==int(b):\n            return int(a)\n        else:\n            a=int(a)\n            b=int(b)\n            div=[]\n            if a>b:\n                greater=a\n                smaller=b\n            else:\n                greater=b\n                smaller=a\n            for i in range(1,greater+1):\n                if (greater%i==0) and (smaller%i==0):\n                    div.append(i)\n            div.remove(greater)\n            return sum(div)\n    except (ValueError,TypeError):\n        raise TypeError(\"Not ints\")\n    except ZeroDivisionError:\n        raise ZeroDivisionError(\"Zero\")\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 2\n    l = []\n    while i <= min(a,b):\n        if a%i == 0 and b%i == 0:\n            l.append(i)\n        i+=1\n    return sum(l)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a < 0 or b < 0:\n        return False\n    \n    c = 0\n    for i in range(1, b+1):\n        if a % i == 0 and b % i == 0:\n            c += i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #your code here\n    return gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    while a:\n        b, a = a, b % a\n    return b\n    \ndef sum_of_powers(n):\n    '''\n    Write a python function to calculate the sum of the powers of the given number.\n    '''\n    total=0\n    while n:\n        total += n%10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # base case\n    if (b == 0): \n        return a \n    return sum(b, a % b) \n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef multiply_float(x, y):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return x * y\n    \ndef multiply_string(x, y):\n    '''\n    Write a function to multiply two strings.\n    '''\n    return x * y\n    \ndef main():\n    '''\n    Write a function main().\n    '''\n    print(multiply_int(5, 2))\n    print(multiply_float(2.5, 4))\n    print(multiply_string(\"Hello\", 3))\n    "
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    print(\"The words in the text that are longer than {} letters are: \".format(n))\n    for word in str:\n        if len(word) > n:\n            print(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Note:'split' method splits a string into a list of words by 'whitespace'\n    list_of_words = str.split()\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [s for s in str if len(s)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    length = []\n    for word in str:\n        if len(word) > n:\n            length.append(word)\n    return length\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # if type(str) is str:\n    #     print(type(str))\n    # else:\n    #     raise TypeError('Please enter a valid string')\n    words = str.split()\n    final_list = []\n    for i in words:\n        if len(i) > n:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    # need to check sum of each row for the number of elements\n    # check columns\n    # check diagonals\n    return (sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) and\n        my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == rows + cols and\n        my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0] == rows + cols and\n        all(my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2] == rows + cols for i in range(rows)))\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add t"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n=len(my_matrix)\n    m=len(my_matrix[0])\n    if n<3:\n        return False\n    if n!=m:\n        return False\n    if sum([my_matrix[i][j] for i in range(n) for j in range(m)])!=n*n*n+n*n:\n        return False\n    if n%2!=0:\n        middle_row=n//2\n    else:\n        middle_row=n//2+1\n    for i in range(middle_row):\n        for j in range(middle_row,m):\n            if sum(my_matrix[i][j])!=n:\n                return False\n    for i in range(n):\n        if sum(my_matrix[i][middle_row])!=n:\n            return False\n    for i in range(n):\n        if sum([my_matrix[i][j] for j in range(middle_row)])!=n:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check the number of rows\n    if len(my_matrix)!= 3:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if it is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if its diagonal sum is equal\n    sum_of_numbers = 0\n    for i in range(len(my_matrix)):\n        sum_of_numbers += my_matrix[i][i]\n    if sum_of_numbers!= (sum(my_matrix[0]) + sum(my_matrix[-1])):\n        return False\n    \n    # check if the sum of the row and column of the last row is equal\n    for row in range(len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        for col in range(len(my_matrix)):\n            row_sum += my_matrix[row][col]\n            col_sum += my_matrix[col][row]\n        if row_sum!= (sum(my_matrix[row]) + sum(my_matrix[-1])):\n            return False\n        if col_sum!= (sum(my_matrix[0]) + sum(my_matrix[-1])):\n            return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_1 = 0\n    sum_2 = 0\n    sum_3 = 0\n    sum_4 = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_columns = len(my_matrix[0])\n    num_rows = len(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_dict = {1: [0, 0], 2: [0, 1], 3: [0, 2], 4: [1, 0], 5: [1, 1], 6: [1, 2], 7: [2, 0], 8: [2, 1], 9: [2, 2]}\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    def check_magic(my_matrix, row, col):\n        '''\n        1. Check if the number of rows in my matrix equals the number of\n        columns in my matrix.\n        2. Check if the sum of the elements in a row equals the sum of the\n        elements in the corresponding column.\n        3. Check if the sum of the elements in the diagonal equals the\n        sum of the elements in the corresponding diagonal.\n        '''\n        n = len(my_matrix)\n        m = len(my_matrix[0])\n        if row!= m or col!= n:\n            return False\n        else:\n            sum_row = 0\n            sum_col = 0\n            sum_diag_1 = 0\n            sum_diag_2 = 0\n            for i in range(n):\n                sum_row += my_matrix[i][col]\n                sum_col += my_matrix[row][i]\n                if row == i:\n                    sum_diag_1 += my_matrix[row][i]\n                if col == i:\n                    sum_diag_2 += my_matrix[row][i]\n            if sum_row!= sum_col or sum_diag_1!= sum_diag_2:\n                return False\n            else:\n                return True\n    \n    def iterate(my_matrix):\n        '''\n        Iterate through all the possible combinations and check if the\n        matrix is a magic square.\n        '''\n        for row in range(len(my_matrix)):\n            for col in range(len(my_matrix[0])):\n                if check_magic(my_matrix, row, col):\n                    return True\n    \n    return iterate(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n=len(my_matrix)\n    sum_first = 0\n    sum_second = 0\n    for i in range(n):\n        sum_first+=my_matrix[i][0]\n        sum_second+=my_matrix[i][n-1]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # sum all the values in the columns and rows\n    for i in range(len(my_matrix)):\n        sum1 = 0\n        sum2 = 0\n        for j in range(len(my_matrix)):\n            sum1 += my_matrix[i][j]\n            sum2 += my_matrix[j][i]\n        if sum1!= 15 or sum2!= 15:\n            return False\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_nums = defaultdict(int)\n    max_val = 0\n    max_key = None\n    for i in nums:\n        dict_nums[i] += 1\n        if dict_nums[i] > max_val:\n            max_val = dict_nums[i]\n            max_key = i\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d=defaultdict(int)\n    for i in nums:\n        d[i]+=1\n    max_v=0\n    max_k=None\n    for k,v in d.items():\n        if v>max_v:\n            max_k=k\n            max_v=v\n    return max_k\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurences = defaultdict(int)\n    for item in nums:\n        occurences[item] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums_count = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Method 1 : Default Dict\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    max_occurrences = 0\n    max_item = 0\n    for k,v in d.items():\n        if v > max_occurrences:\n            max_item = k\n            max_occurrences = v\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_value = max(frequency.values())\n    return [key for key in frequency.keys() if frequency[key] == max_value]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    print(dict)\n    max = -1\n    max_item = -1\n    for i in dict:\n        if dict[i] > max:\n            max = dict[i]\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(lambda: 0)\n    for num in nums:\n        occurrences[num] += 1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['a','e','i','o','u']\n    string=list(str1)\n    l=len(string)\n    for i in range(l):\n        if string[i].lower() in vowels:\n            string[i]=string[i][::-1]\n    string=''.join(string)\n    return string\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_index.append(i)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    \n    str_list = list(str1)\n    i = 0\n    j = len(str1) - 1\n    \n    while i < j:\n        if str_list[i].lower() not in vowels:\n            i += 1\n        elif str_list[j].lower() not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = {'a','e','i','o','u'}\n    vowel_list = []\n    for letter in str1:\n        if letter.lower() in vowel:\n            vowel_list.append(letter)\n    return ''.join(vowel_list[::-1])\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    vowel_list = list(str1)\n    index = 0\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_list[i] = str1[i]\n            index = i\n    start = index\n    end = len(str1) - 1\n    while start < end:\n        vowel_list[start], vowel_list[end] = vowel_list[end], vowel_list[start]\n        start += 1\n        end -= 1\n    return \"\".join(vowel_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    string = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return \"\".join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #Vowel\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #make a vowel list\n    vowels = 'aeiou'\n    #make a list for the vowels\n    vowel_list = []\n    #make a list for all the characters in the string\n    char_list = []\n    #make a list for the final result\n    result_list = []\n    #for each character in the string, append to the char_list\n    for char in str1:\n        char_list.append(char)\n    #for each character in the list\n    for i in range(len(char_list)):\n        #if the character is a vowel\n        if char_list[i] in vowels:\n            #append it to the vowel list\n            vowel_list.append(char_list[i])\n    #for each character in the vowel list\n    for i in range(len(vowel_list)):\n        #if the character is not in the vowel list\n        if vowel_list[i] not in char_list:\n            #append the character to the final result list\n            result_list.append(vowel_list[i])\n    #for each character in the final result list\n    for i in range(len(result_list)):\n        #append the character to the string\n        str1 += result_list[i]\n    #return the final string\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_list = []\n    non_vowels_list = []\n    new_str = ''\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    list1 = list(str1)\n    vowel_index = []\n    for i, item in enumerate(list1):\n        if item in vowels:\n            vowel_index.append(i)\n    for index in vowel_index:\n        if list1[index] == \"y\":\n            continue\n        else:\n            list1[index] = list1[index].swapcase()\n    print(\"\".join(list1))\n    "
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1_string = ''\n    for x in tup1:\n        tup1_string += x\n    return tup1_string\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = \"\"\n    for word in tup1:\n        result = result + word + \" \"\n    return result.strip()\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #return ''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    mystr = str(tup1)\n    return mystr\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = str(tup1)\n    tup1 = tup1.replace(\"'\",\"\")\n    tup1 = tup1.replace(\",\",\"\")\n    tup1 = tup1.replace(\"(\",\"\")\n    tup1 = tup1.replace(\")\",\"\")\n    tup1 = tup1.replace(\" \",\"\")\n    tup1 = tup1.replace(\"\\n\",\"\")\n    return tup1\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\"\n    for i in range(0,len(tup1)):\n        if i == len(tup1)-1:\n            s = s + str(tup1[i])\n        else:\n            s = s + str(tup1[i]) + \", \"\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''\n    for item in tup1:\n        result += str(item)\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        negative_sum += num if num < 0 else 0\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_of_negatives = 0\n    for i in nums:\n        if i < 0:\n            sum_of_negatives += i\n    return sum_of_negatives\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in nums:\n        if i < 0:\n            result += i\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negativenum = 0\n    for num in nums:\n        if num < 0:\n            sum_negativenum += num\n    return sum_negativenum\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def next_hexagonal_num(num):\n        return num*(2*num - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # hexagonal numbers are made up of the formula: n*(2n-1)\n    return n*(2*n -1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    k = (1 + (1 + 8*n)**0.5)/2\n    return k*(k-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*n) - (n) + n\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    # hexagonal number formula: 2 * n^2 - n + 1\n    return (2 * (n**2) - n + 1)\n    \n    \ndef hexagonal_num_better(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * (n - 1) - 1)) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def pos(n): \n        return (-1/2 * (1 - sqrt(1 - 2*(1+n))/2)**2 + 1/4) \n    n += 1\n    return n * 2*pos(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #Every hexagonal number is the sum of the square of the number above it.\n    #To generate a hexagonal number, first find the sum of two squares: 1^2 + 2^2 = 5 + 4 = 9\n    #The first ten hexagonal numbers are 1, 5, 12, 22, 35, 51, 70, 92, 117, 145,...\n    #Now to find the nth number, add the sum of the squares of n-1 and n-2.\n    \n    #Square of n-1 = sum of squares of (n-1)\n    #Square of n = n^2 + n-1^2 + Square of (n-2)\n    #Hence, n^2 = n^2 + n-1^2 + Square of (n-2)\n    #Now add these two terms.\n    #n^2 + n-1^2 + Square of (n-2) = n^2 + n-1^2 + Square of (n-2) + n-2^2\n    #Hence, n^2 = Square of (n-2) + Square of (n-2) + n-2^2 + n-3^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-1) by adding n-1 to the sum of squares of n-1\n    #Let's denote the sum of squares of n-1 as s\n    #Now we have to find the square of n-1 as s = n+1 + n+2 +... + n+n-1\n    #Hence, Square of (n-1) = s + n+n+1 +... + (n-1)n\n    #Now add s to the sum of squares of n-2.\n    #Square of n-2 = s + Square of (n-2) + Square of (n-2)\n    #Now add these two terms.\n    #Square of (n-2) = s + Square of (n-2) + Square of (n-2) + n-3^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-2) by adding n-2 to the sum of squares of n-2\n    #Let's denote the sum of squares of n-2 as s\n    #Now we have to find the square of n-2 as s = n+1 + n+2 +... + n+n-2\n    #Hence, Square of (n-2) = s + n+n+1 +... + (n-2)n\n    #Now add s to the sum of squares of n-3.\n    #Square of n-3 = s + Square of (n-3) + Square of (n-3) + n-4^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-3) = s + Square of (n-3) + Square of (n-3) + n-4^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-3) by adding n-3 to the sum of squares of n-3\n    #Let's denote the sum of squares of n-3 as s\n    #Now we have to find the square of n-3 as s = n+1 + n+2 +... + n+n-3\n    #Hence, Square of (n-3) = s + n+n+1 +... + (n-3)n\n    #Now add s to the sum of squares of n-4.\n    #Square of n-4 = s + Square of (n-4) + Square of (n-4) + n-5^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-4) = s + Square of (n-4) + Square of (n-4) + n-5^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-4) by adding n-4 to the sum of squares of n-4\n    #Let's denote the sum of squares of n-4 as s\n    #Now we have to find the square of n-4 as s = n+1 + n+2 +... + n+n-4\n    #Hence, Square of (n-4) = s + n+n+1 +... + (n-4)n\n    #Now add s to the sum of squares of n-5.\n    #Square of n-5 = s + Square of (n-5) + Square of (n-5) + n-6^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-5) = s + Square of (n-5) + Square of (n-5) + n-6^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-5) by adding n-5 to the sum of squares of n-5\n    #Let's denote the sum of squares of n-5 as s\n    #Now we have to find the square of n-5 as s = n+1 + n+2 +... + n+n-5\n    #Hence, Square of (n-5) = s + n+n+1 +... + (n-5)n\n    #Now add s to the sum of squares of n-6.\n    #Square of n-6 = s + Square of (n-6) + Square of (n-6) + n-7^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-6) = s + Square of (n-6) + Square of (n-6) + n-7^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-6) by adding n-6 to the sum of squares of n-6\n    #Let's denote the sum of squares of n-6 as s\n    #Now we have to find the square of n-6 as s = n+1 + n+2 +... + n+n-6\n    #Hence, Square of (n-6) = s + n+n+1 +... + (n-6)n\n    #Now add s to the sum of squares of n-7.\n    #Square of n-7 = s + Square of (n-7) + Square of (n-7) + n-8^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-7) = s + Square of (n-7) + Square of (n-7) + n-8^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-7) by adding n-7 to the sum of squares of n-7\n    #Let's denote the sum of squares of n-7 as s\n    #Now we have to find the square of n-7 as s = n+1 + n+2 +... + n+n-7\n    #Hence, Square of (n-7) = s + n+n+1 +... + (n-7)n\n    #Now add s to the sum of squares of n-8.\n    #Square of n-8 = s + Square of (n-8) + Square of (n-8) + n-9^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-8) = s + Square of (n-8) + Square of (n-8) + n-9^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-8) by adding n-8 to the sum of squares of n-8\n    #Let's denote the sum of squares of n-8 as s\n    #Now we have to find the square of n-8 as s = n+1 + n+2 +... + n+n-8\n    #Hence, Square of (n-8) = s + n+n+1 +... + (n-8)n\n    #Now add s to the sum of squares of n-9.\n    #Square of n-9 = s + Square of (n-9) + Square of (n-9) + n-10^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-9) = s + Square of (n-9) + Square of (n-9) + n-10^2 +... + n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Write your code here\n    n = len(nums)\n    nz = 0\n    nz_total = 0\n    nz_index = []\n    nz_count = 0\n    nz_counter = 0\n    nz_avg = 0\n    nz_avg_total = 0\n    nz_avg_list = []\n    nz_avg_count = 0\n    nz_avg_counter = 0\n    nz_avg_total_list = []\n    nz_avg_count_list = []\n    nz_avg_list_total = 0\n    nz_avg_list_count = 0\n    nz_count_list = []\n    nz_counter_list = []\n    nz_count_total = 0\n    nz_counter_total = 0\n    nz_count_total_list = []\n    nz_counter_total_list = []\n    nz_avg_total_list = []\n    nz_avg_total_count = 0\n    nz_avg_total_count_list = []\n    nz_avg_list_total_list = []\n    nz_avg_list_count_list = []\n    nz_avg_list_total_count = 0\n    nz_avg_list_total_count_list = []\n    nz_avg_count_list_count = 0\n    nz_avg_count_list_count_list = []\n    nz_avg_list_total_count_list = []\n    nz_avg_count_list_total = 0\n    nz_avg_count_list_total_list = []\n    nz_avg_count_list_count_total = 0\n    nz_avg_count_list_count_total_list = []\n    nz_avg_list_total_list_count = 0\n    nz_avg_list_total_list_total = []\n    nz_avg_list_total_list_count_list = []\n    nz_avg_list_total_list_total_list = []\n    nz_avg_list_total_list_count_total = 0\n    nz_avg_list_total_list_count_total_list = []\n    nz_avg_list_total_list_count_total_list = []\n    nz_avg_count_list_count_total_list = []\n    nz_avg_list_total_count_total_list = []\n    nz_avg_count_list_count_total_total_list = []\n    nz_avg_list_total_count_total_list_count = 0\n    nz_avg_list_total_count_total_list_total = []\n    nz_avg_list_total_count_total_list_count_list = []\n    nz_avg_list_total_count_total_list_total_list = []\n    nz_avg_count_list_count_total_list_count_total = 0\n    nz_avg_count_list_count_total_list_count_total_list = []\n    nz_avg_count_list_count_total_list_count_total_total_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list = []\n    nz_avg_count_list_count_total_list_count_total_total_list = []\n    nz_avg_count_list_count_total_list_count_total_list_total = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_total = []\n    nz_avg_list_total_list_count_total_list_count_total_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_total_list_count = []\n    nz_avg_list_total_list_count_total_list_count_total_list_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_total_list_count_list_total = []\n    nz_avg_list_total_list_count_total_list_count_total_list_total_list_count_total_list_count = 0\n    nz_avg_count_list_count_total_list_count_total_list_count_total_list_count_total_list_count_list = []\n    nz_avg_count_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total_total_list_count_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total_total_list_count_total_list_count = 0\n    nz_avg_count_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_list = []\n    nz_avg_count_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_coun"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_numbers = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        num_numbers += 1\n    \n    if num_numbers == 0:\n        return \"Array is empty\"\n    elif num_numbers == 1:\n        return \"Array has only one element\"\n    else:\n        return \"Number of zeroes / Number of non-zeroes = \" + str(num_zeroes) + \"/\" + str(num_numbers)\n        \n'''\nWrite a function to find the first non-consecutive number in an array of integers.\n'''\ndef first_non_consecutive(nums):\n    for i in range(len(nums) - 1):\n        if nums[i] + 1!= nums[i + 1]:\n            return nums[i] + 1\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero, count_non_zero\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for num in nums:\n        if num==0:\n            count+=1\n    return (count/len(nums))\ndef remove_all_after(nums, a):\n    '''\n    Write a function that, given a sorted array and a target number, \n    finds the index of the last occurrence of that number in the array.\n    '''\n    for i in range(len(nums)):\n        if nums[i]==a:\n            return i\n    return -1\ndef max_consecutive_ones(nums):\n    '''\n    Given an array of 1s and 0s, return the index of the last 1 found in the array.\n    '''\n    max=0\n    for i in range(len(nums)):\n        if nums[i]==1:\n            max=i\n    return max\ndef longest_increasing_subsequence(nums):\n    '''\n    Given an array of integers, write a function to find the longest increasing subsequence in the array.\n    '''\n    longest=[]\n    for i in range(len(nums)):\n        temp=[]\n        for j in range(len(nums)):\n            if nums[i]<nums[j]:\n                temp.append(nums[j])\n        if len(temp)>len(longest):\n            longest=temp\n    return longest\ndef is_valid(nums):\n    '''\n    Write a function that checks whether a given input array of integers \n    contains three numbers such that the sum of the three numbers is equal to the value of the fourth number.\n    '''\n    if len(nums)<4:\n        return False\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i!=j:\n                for k in range(len(nums)):\n                    if i!=k and j!=k and k!=i and nums[i]+nums[j]+nums[k]==nums[3]:\n                        return True\n    return False\ndef alphabet_position(letter):\n    '''\n    Write a function that takes in a string and returns a list of the alphabetical position of each letter in the string.\n    '''\n    alphabet=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    positions=[alphabet.index(letter) for letter in alphabet]\n    return positions\ndef n_queens(n):\n    '''\n    Write a function to solve the N-queens puzzle. \n    It should return a list of all distinct solutions to the puzzle.\n    Each solution contains a distinct board configuration of the N-queens' placement, \n    where solutions that differ only in the placement of the queens are considered distinct.\n    '''\n    res=[]\n    board=[[0 for j in range(n)] for i in range(n)]\n    def create_board(board,n):\n        if n==len(board):\n            return True\n        else:\n            for i in range(len(board)):\n                if board[n][i]!=1:\n                    board[n][i]=1\n                    for j in range(len(board)):\n                        if j!=i and board[n][j]!=1:\n                            board[n][j]=1\n                            if create_board(board,n+1):\n                                res.append(board[:])\n                    board[n][i]=0\n    create_board(board,0)\n    return res\ndef missing_element(nums):\n    '''\n    Write a function that takes in an array of positive integers and returns the missing element in the array.\n    '''\n    for i in range(len(nums)):\n        if i+1!=nums[i]:\n            return i+1\n    return -1\ndef is_string_rotation(s1,s2):\n    '''\n    Write a function that checks whether a string is a rotation of another string.\n    '''\n    for i in range(len(s2)):\n        if s1==s2[i:]+s2[:i]:\n            return True\n    return False\ndef is_interleave(s1,s2,s3):\n    '''\n    Write a function that checks whether a string is a interleaving of two other strings.\n    '''\n    if len(s1)+len(s2)!=len(s3):\n        return False\n    if len(s1)==0 and len(s2)==0:\n        return True\n    if len(s1)==0 or len(s2)==0:\n        return False\n    for i in range(len(s3)):\n        if len(s1)==0:\n            return s2==s3[i:]\n        if len(s2)==0:\n            return s1==s3[i:]\n        if s1[0]==s3[i]:\n            return is_interleave(s1[1:],s2,s3[i+1:])\n        if s2[0]==s3[i]:\n            return is_interleave(s1,s2[1:],s3[i+1:])\ndef is_substring_in_word(substring,word):\n    '''\n    Write a function that returns True if the given substring is a substring of the given word, and False otherwise.\n    '''\n    if len(substring)>len(word):\n        return False\n    if substring==word:\n        return True\n    for i in range(len(word)-len(substring)+1):\n        if word[i:i+len(substring)]==substring:\n            return True\n    return False\ndef split_a_string_into_two_strings(string):\n    '''\n    Write a function that takes in a string of even length and returns a pair of strings made up of the first half of the original string and the second half of the original string in reverse order.\n    '''\n    mid=len(string)//2\n    return string[:mid],string[mid:]\ndef number_of_steps_to_reduce_a_number_to_zero(n):\n    '''\n    Write a function that, given a non-negative integer n, \n    returns the minimum number of operations needed to reduce n to 0. \n    An operation is defined as:\n    1. Subtract 1 from n.\n    2. If n is now 0, stop.\n    3. If n is odd, divide by 2.\n    4. If n is even, divide by 2 and subtract 1.\n    '''\n    count=0\n    while n!=0:\n        if n%2==0:\n            n=n/2\n        else:\n            n=n-1\n        count+=1\n    return count\ndef move_zeroes(nums):\n    '''\n    Write a function that takes an array of 0s, 1s, and 2s and rearranges the array so that all of the 0s come first, followed by the 1s, followed by the 2s.\n    '''\n    count=0\n    index=0\n    for i in range(len(nums)):\n        if nums[i]!=0:\n            nums[index],nums[i]=nums[i],nums[index]\n            index+=1\n    return nums\ndef move_zeros(nums):\n    '''\n    Write a function that takes an array of 0s, 1s, and 2s and rearranges the array so that all of the 0s come first, followed by the 1s, followed by the 2s.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i]==0 and nums[i+1]!=0:\n            nums[i],nums[i+1]=nums[i+1],nums[i]\n    return nums\ndef all_pairs_shortest_path(nums,max_dist):\n    '''\n    Given a square matrix of distinct numbers, return all the pairs of nodes that are exactly max_dist apart from one another.\n    '''\n    output=[]\n    for i in range(len(nums)):\n        for j in range(le"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for num in nums:\n        if num==0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # s = 0\n    # for i in nums:\n    #     if i == 0:\n    #         s += 1\n    # return s/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len([x for x in nums if x==0]) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #Create a dictionary to store the number of zeroes and non-zeroes in the array\n    zero_count = {0:0, 1:0}\n    #Iterate through the array\n    for i in nums:\n        #If the value of the array at the current index is 0\n        if i == 0:\n            #Increment the value of the dictionary with the key of 0\n            zero_count[0] += 1\n        #Else if the value at the current index is 1\n        else:\n            #Increment the value of the dictionary with the key of 1\n            zero_count[1] += 1\n    #Return the ratio of the zeroes and non-zeroes in the array\n    return zero_count[0]/zero_count[1]\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_zero = 0\n    total_nonzero = 0\n    for num in nums:\n        if num == 0:\n            total_zero += 1\n        else:\n            total_nonzero += 1\n    return total_zero / total_nonzero\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_powers = 0\n    while n:\n        sum_of_powers += (n % 2)\n        n = n // 2\n    if sum_of_powers == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n<0):\n        return False\n    power=1\n    temp=n\n    while(temp):\n        temp=temp//2\n        power*=2\n    if(n==power):\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    else:\n        return is_Sum_Of_Powers_Of_Two((n // 2) + 1)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    while n % 2 == 0:\n        n /= 2\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while(n%2==0):\n        n = n/2\n    return (n==1)\n  \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while(n>0):\n        sum+=n%2\n        n = n/2\n    if sum>1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n and not n & 1: \n        n >>= 1\n    return n == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n % 2 == 0: \n        n = n / 2\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = [] \n    for i in range(1, n): \n        if ((n % i == 0) and (n / i < n)): \n            res.append(i) \n    if sum(res) == n: \n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    a = n\n    s = 0\n    while (a!= 0): \n        b = a % 2\n        s = s + b\n        a = a // 2\n    if (s == 0): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n    \n    "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r*math.pi*2\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*PI*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c = 2*math.pi*r\n    print('The circumference is '+str(c)+'.')\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return (2*r*3.14)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = list()\n    for e in test_list:\n        if type(e) is list:\n            result += extract_singly(e)\n        else:\n            result.append(e)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create a result list\n    result = []\n    \n    # Iterate through the list\n    for sublist in test_list:\n        for i in sublist:\n            result.append(i)\n    \n    # Return the result list\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        result.update(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [j for i in test_list for j in i]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [elem for sublist in test_list for elem in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for sublist in test_list for x in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(sum(test_list, []))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # The nested list was not a list of lists\n    if not isinstance(test_list, list):\n        return test_list\n    # The nested list was a list of lists, but it was only one layer deep\n    elif not any([isinstance(elem, list) for elem in test_list]):\n        return test_list\n    # The nested list was a list of lists and it had more than one layer\n    else:\n        result = []\n        for sublist in test_list:\n            # First check if the sublist was a list of lists or a single number\n            # If it's a single number, then add it to the result\n            if not isinstance(sublist, list):\n                result.append(sublist)\n            else:\n                result.extend(extract_singly(sublist))\n        return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for k in range(len(nums)-1,0,-1):\n        find_max_index = 0\n        for index in range(1,k+1):\n            if nums[index] > nums[find_max_index]:\n                find_max_index = index\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        #print(i)\n        #print(nums)\n        idx = 0\n        #print(len(nums) - i)\n        #print(nums[len(nums)-i:])\n        while idx < len(nums) - i:\n            if nums[idx] > nums[idx+1]:\n                flip_nums(nums, idx, idx+1)\n            idx += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum value in the remaining unsorted array.\n        max_val = find_max(nums, 0, i)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        max_value = nums[i]\n        max_index = i\n        for j in range(0, i):\n            if nums[j] >= max_value:\n                max_value = nums[j]\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length <= 1:\n        return nums\n    for index in range(length):\n        sorted_index = index_sort(nums, length - 1 - index)\n        if index < sorted_index:\n            nums = swap(nums, index, sorted_index)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, i):\n        if i == 0:\n            return nums\n        else:\n            nums = nums[::-1]\n            return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # for each element\n    for i in range(len(nums) - 1, -1, -1):\n        # find the max\n        max_index = 0\n        for j in range(i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap max to the end\n        nums[max_index], nums[i] = nums[i], nums[max_index]\n        # reverse the tail to max\n        tail = nums[:i + 1]\n        tail.reverse()\n        nums[:i + 1] = tail\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    for i in range(len(nums) - 1, 0, -1):\n        #print(i)\n        if nums[i]!= i + 1:\n            for j in range(i):\n                if nums[j] > nums[i]:\n                    nums[j], nums[i] = nums[i], nums[j]\n                    #print(nums)\n                    break\n            nums[:i+1] = reversed(nums[:i+1])\n            return nums\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Make a copy of the list to avoid modifying the original\n    copy_nums = nums[:]\n    # A variable to keep track of the current number of pancake moves\n    move_count = 0\n    # A variable to keep track of the number of iterations of the loop\n    loop_count = 0\n    # Loop as long as the list is not sorted\n    while copy_nums!= sorted(copy_nums):\n        # Increment the loop count\n        loop_count += 1\n        # Get the number of the first element of the unsorted list\n        first_number = min(copy_nums)\n        # Get the index of the first element of the unsorted list\n        first_number_index = copy_nums.index(first_number)\n        # If the first element is not at the beginning of the list\n        if first_number_index!= 0:\n            # Reverse the list up to first_number_index\n            copy_nums = reverse_list(copy_nums, 0, first_number_index)\n            # Increment the move count\n            move_count += first_number_index\n        # Get the number of the last element of the unsorted list\n        last_number = max(copy_nums)\n        # Get the index of the last element of the unsorted list\n        last_number_index = copy_nums.index(last_number)\n        # If the last element is not at the end of the list\n        if last_number_index!= len(copy_nums) - 1:\n            # Reverse the list up to last_number_index\n            copy_nums = reverse_list(copy_nums, last_number_index, len(copy_nums) - 1)\n            # Increment the move count\n            move_count += len(copy_nums) - 1 - last_number_index\n        # Get the index of the first element of the sorted list\n        first_number_index = copy_nums.index(first_number)\n        # Get the index of the last element of the sorted list\n        last_number_index = copy_nums.index(last_number)\n        # If the last element is not at the end of the list\n        if last_number_index!= len(copy_nums) - 1:\n            # If the first element is greater than the last element\n            if copy_nums[first_number_index] > copy_nums[last_number_index]:\n                # Flip the first and last element of the sorted list\n                copy_nums[first_number_index], copy_nums[last_number_index] = copy_nums[last_number_index], copy_nums[first_number_index]\n                # Increment the move count\n                move_count += 2\n    # Return the number of the moves, and the list sorted\n    return move_count, copy_nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 0, -1):\n        for j in range(0, i-1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n        print(nums)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            samepair +=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i] == list3[i]):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"Wrong input data\")\n        return\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)==len(list2) and len(list2)==len(list3):\n        samepair=0\n        for i in range(0,len(list1)):\n            if list1[i]==list2[i]==list3[i]:\n                samepair=samepair+1\n        return samepair\n    else:\n        return None\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Return 0 if one of the lists are empty\n    if len(list1) == 0 or len(list2) == 0 or len(list3) == 0:\n        return 0\n    count = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                    break\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            samepair += 1\n    return samepair\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # list() creates a list \n    # set() removes duplicates \n    # set(list) converts list into set \n    return(len(set(list(Input))))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists_count = 0\n    for i in Input:\n        if type(i) == list:\n            lists_count += 1\n    return lists_count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n    \ndef find_maximum(Input): \n    '''\n    Write a function to find the maximum value from the list.\n    '''\n    return max(Input)\n    \ndef find_minimum(Input): \n    '''\n    Write a function to find the minimum value from the list.\n    '''\n    return min(Input)\n    \ndef list_sort(Input): \n    '''\n    Write a function to sort the list in ascending order.\n    '''\n    return sorted(Input)\n    \ndef list_uniq(Input): \n    '''\n    Write a function to find the unique values from the list.\n    '''\n    return list(set(Input))\n    \ndef list_dup(Input): \n    '''\n    Write a function to find the duplicate values from the list.\n    '''\n    return [x for n, x in enumerate(Input) if x in Input[:n]]\n    \ndef list_contains(Input, x): \n    '''\n    Write a function to find the value x is in the list or not.\n    '''\n    return x in Input\n    \ndef list_first(Input, x): \n    '''\n    Write a function to find the first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_last(Input, x): \n    '''\n    Write a function to find the last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_remove_all(Input, x): \n    '''\n    Write a function to remove all occurrence of value x in the list.\n    '''\n    return [i for i in Input if i!= x]\n    \ndef list_remove_first(Input, x): \n    '''\n    Write a function to remove first occurrence of value x in the list.\n    '''\n    return [i for i in Input if i!= x][0]\n    \ndef list_remove_last(Input, x): \n    '''\n    Write a function to remove last occurrence of value x in the list.\n    '''\n    return [i for i in Input if i!= x][-1]\n    \ndef list_insert(Input, x, n): \n    '''\n    Write a function to insert value x at index n in the list.\n    '''\n    return Input[:n] + [x] + Input[n:]\n    \ndef list_remove(Input, x): \n    '''\n    Write a function to remove value x in the list.\n    '''\n    return [i for i in Input if i!= x]\n    \ndef list_pop(Input, n): \n    '''\n    Write a function to remove value x in the list at index n and return it.\n    '''\n    return Input[:n] + Input[n+1:]\n    \ndef list_reverse(Input): \n    '''\n    Write a function to reverse the list.\n    '''\n    return Input[::-1]\n    \ndef list_sort(Input): \n    '''\n    Write a function to sort the list in descending order.\n    '''\n    return sorted(Input, reverse = True)\n    \ndef list_count(Input, x): \n    '''\n    Write a function to count the number of occurrences of value x in the list.\n    '''\n    return Input.count(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to find the index of the first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_count(Input, x): \n    '''\n    Write a function to find the index of the last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to find the index of the first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to find the index of the last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_clear(Input): \n    '''\n    Write a function to clear the list.\n    '''\n    return []\n    \ndef list_copy(Input): \n    '''\n    Write a function to copy the list.\n    '''\n    return Input[:]\n    \ndef list_len(Input): \n    '''\n    Write a function to return the length of the list.\n    '''\n    return len(Input)\n    \ndef list_join(Input, x): \n    '''\n    Write a function to join the list into a string with x in between each element.\n    '''\n    return ''.join(Input)\n    \ndef list_join(Input, x): \n    '''\n    Write a function to join the list into a string with x in between each element.\n    '''\n    return ''.join(Input)\n    \ndef list_sum(Input): \n    '''\n    Write a function to return the sum of all elements in the list.\n    '''\n    return sum(Input)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = [tuple(x) for x in permutations(Input)]\n    return len(list(set(lists)))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(Input)\n    length = len(Input)\n    count = 0\n    for i in range(0, length):\n        if isinstance(Input[i], list):\n            count += 1\n    print(count)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    newList = []\n    for list1 in Input:\n        newList.append(list(list1))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([i for i in Input if type(i) == list]) \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if Input == ():\n        return 0\n    else:\n        tuple = []\n        for i in range(len(Input)):\n            try:\n                tuple.append(Input[i][0])\n            except:\n                break\n        return len(tuple)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if isinstance(Input, tuple):\n        return len([list_ for list_ in Input if isinstance(list_, list)])\n    else:\n        return print(\"It is not a tuple.\")\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            absDiff = abs(arr[i] - arr[j])\n            if absDiff > maxDiff:\n                maxDiff = absDiff\n    return maxDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return(max(abs(arr[i] - arr[j]) for i in range(len(arr)) for j in range(len(arr)) if i!= j))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)>1:\n        #arr.sort()\n        max_diff = arr[-1]-arr[0]\n        for i in range(len(arr)-1):\n            max_diff = max(max_diff,arr[i+1]-arr[i])\n        return max_diff\n    else:\n        return max(arr) - min(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -2147483648\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(i!= j and max_diff < (arr[j] - arr[i])):\n                max_diff = arr[j] - arr[i]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # sort the array \n    arr.sort() \n    # initialize the first index and the last index \n    first_index = 0 \n    last_index = len(arr) - 1\n    # find the maximum absolute difference \n    # for each index, we need to compute the difference \n    # between the current index and the next index \n    # and between the current index and the previous index \n    max_diff = arr[last_index] - arr[first_index] \n    # start iterating the array from the first element \n    for i in range(len(arr) - 1): \n        current_diff = arr[i + 1] - arr[i] \n        # compare the current_diff and the max_diff \n        if (current_diff > max_diff): \n            max_diff = current_diff \n        # if the current_diff is less than 0, \n        # it means we have found a smaller value \n        # than the previous one, we need to update \n        # the last_index \n        if (current_diff < 0): \n            last_index = i \n    return max_diff \n    \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_val = arr[0]\n    min_val = arr[0]\n    \n    for i in range(len(arr)): \n        if arr[i] < min_val: \n            min_val = arr[i] \n        elif arr[i] > max_val: \n            max_val = arr[i] \n    \n    return (max_val - min_val) \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=arr[1]-arr[0]\n    for i in range(len(arr)-1):\n        if(arr[i+1]-arr[i]>max_diff):\n            max_diff=arr[i+1]-arr[i]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return(arr[-1] - arr[0])\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n):\n        for y in range(0, n):\n            if (a * x) + (b * y) == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if a * i + b * j == n:\n                return (i, j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if (n - i * a) % b == 0:\n            return i, (n - i * a) // b\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # if a!= 1:\n    #     return None\n    #     # for y in range(0,n+1):\n    #     #     if a*x + y == n:\n    #     #         return x,y\n    #     #     if y == n:\n    #     #         return None\n    # if a == 1:\n    for y in range(0,n+1):\n        for x in range(0,n+1):\n            if x*a + y == n:\n                return x,y\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # consider cases when a is 0 or b is 0\n    if a == 0:\n        return (0, n/b)\n    elif b == 0:\n        return (n/a, 0)\n    # try all possible numbers for x and y\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0,0)\n    if n == 1:\n        return (1,1)\n    for i in range(1,n):\n        if (a*i)%n == 0:\n            return (i,int((n/a)*i))\n    for i in range(1,n):\n        if (a*i)%n == 1:\n            return (i,int((n/a)*i))\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return a, 0\n    if a == 0:\n        return b, 0\n    \n    # a is divisor, b is the remainder\n    # so ax + by = n\n    # b can be either positive or negative\n    # so ax + by = n + b\n    # ax + (n + b)y = n\n    # so y = n/(ax + b)\n    # we can reduce the problem to finding y\n    # now, x = n/(a + b)\n    # so x = n/a - b\n    # so x = (n - b)/a\n    \n    x = (n - b)//a\n    \n    if x < 0:\n        return None\n    \n    return x, n//a\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here\n    for i in range(n):\n        x = i\n        y = n - x\n        if(x*a + y*b == n):\n            return (x,y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Implement this function.\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0:\n        y = n // a\n        x = a\n    else:\n        for i in range(1, n):\n            if (n - i * a) % b == 0:\n                x = n - i * a\n                y = (n - x) // b\n                break\n        if x < 0:\n            return None\n    return x, y\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = [i for i in list1 if i not in list2]\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [1,2,3,4]\n    list2 = [2,4]\n    print(\"List 1:\", list1)\n    print(\"List 2:\", list2)\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    print(list1)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    list3 = list(set(list1)-set(list2))\n    print(list3)\n    \nremove_elements([2,3,4,5,6], [3,6,7])\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list2) > len(list1):\n        return print(\"Please enter a smaller list.\")\n    \n    else:\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # time complexity: O(n + m)\n    # space complexity: O(1)\n    for item in list2:\n        while item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    else:\n        return (n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    print(f'n: {n}')\n    if n < 0:\n        raise ValueError('Error: n must be greater than or equal to 0')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    sum = 0\n    for i in range(0, n // 2 + 1):\n        sum += n - 2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2+1):\n        if n-2*i >=0:\n            sum += n-2*i\n    return sum\n    # test examples\nprint(sum_series(2))\nprint(sum_series(5))\nprint(sum_series(6))\nprint(sum_series(7))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([(n - 2*i) for i in range(0, n // 2)])\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    sum = 0\n    for i in range(0, n//2+1):\n        sum += (n - 2 * i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        x = n - (n // 2)\n        if x == 1:\n            return x\n        else:\n            return x + sum_series(n-x)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round((s * l**2)/(4*tan(pi/l)))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    #if s<3 or s>9:\n    if s<3:\n        return None\n    else:\n        print(\"The area of the polygon is {}.\".format(s*l**2/(4*tan(pi/s)))+\"\\n\")\n        return s*l**2/(4*tan(pi/s))"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (s == 0 or l == 0):\n        return -1\n    else:\n        return s * l * (1 / 2) * tan(pi / l)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 3 or l % 2 == 1:\n        return -1\n    else:\n        theta = 2 * pi / l\n        a = (l/2) * (s**2 * tan(theta)**2 + s * tan(theta) + (s * tan(theta) - s)**2)**0.5\n        return a\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s ** 2 / tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2/4) * l\n    return round(area, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l**2 / (4 * tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s ** 2 * (3 ** 0.5) * 0.25) / (4 * tan((pi / l) * 0.5))\n    return round(a, 2)\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    a = s * l\n    return round(a, 2)\ndef area_parallelogram(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram given the length of its two sides.\n    '''\n    a = (a * b) / 2\n    return round(a, 2)\ndef perimeter_parallelogram(a, b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram given the length of its two sides.\n    '''\n    a = a + b\n    return round(a, 2)\ndef area_triangle(a, b):\n    '''\n    Write a function to calculate the area of a triangle given the length of its base and its height.\n    '''\n    a = (a * b) / 2\n    return round(a, 2)\ndef perimeter_triangle(a, b):\n    '''\n    Write a function to calculate the perimeter of a triangle given the length of its base and its height.\n    '''\n    a = a + b\n    return round(a, 2)\ndef area_trapezium(a, b, c):\n    '''\n    Write a function to calculate the area of a trapezium given the lengths of its base, top, and sides.\n    '''\n    a = (a + b) / 2\n    b = (a + c) / 2\n    a = (a * b) / 2\n    return round(a, 2)\ndef perimeter_trapezium(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a trapezium given the lengths of its base, top, and sides.\n    '''\n    a = a + b + c\n    return round(a, 2)\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the length of its radius.\n    '''\n    a = pi * (r ** 2)\n    return round(a, 2)\ndef circumference_circle(r):\n    '''\n    Write a function to calculate the circumference of a circle given the length of its radius.\n    '''\n    a = 2 * pi * r\n    return round(a, 2)\ndef area_circle_sector(r, a):\n    '''\n    Write a function to calculate the area of a circle sector given the length of its radius and the angle of its sector.\n    '''\n    a = r ** 2 * a / 360\n    return round(a, 2)\ndef area_circle_segment(r, a):\n    '''\n    Write a function to calculate the area of a circle segment given the length of its radius and the angle of its segment.\n    '''\n    a = (r ** 2) * a / 360\n    return round(a, 2)\ndef circumference_circle_sector(r, a):\n    '''\n    Write a function to calculate the circumference of a circle sector given the length of its radius and the angle of its sector.\n    '''\n    a = 2 * pi * r * a / 360\n    return round(a, 2)\ndef circumference_circle_segment(r, a):\n    '''\n    Write a function to calculate the circumference of a circle segment given the length of its radius and the angle of its segment.\n    '''\n    a = 2 * pi * r * a / 360\n    return round(a, 2)\ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given the length of its semi-major axis and the length of its semi-minor axis.\n    '''\n    a = a * b / 4\n    return round(a, 2)\ndef circumference_ellipse(a, b):\n    '''\n    Write a function to calculate the circumference of an ellipse given the length of its semi-major axis and the length of its semi-minor axis.\n    '''\n    a = a * 2\n    b = b * 2\n    return round(a + b, 2)\ndef area_rhombus(a, b):\n    '''\n    Write a function to calculate the area of a rhombus given the length of its diagonal.\n    '''\n    a = (a * b) / 2\n    return round(a, 2)\ndef perimeter_rhombus(a, b):\n    '''\n    Write a function to calculate the perimeter of a rhombus given the length of its diagonal.\n    '''\n    a = a + b\n    return round(a, 2)\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    a = a ** 2\n    return round(a, 2)\ndef perimeter_square(a):\n    '''\n    Write a function to calculate the perimeter of a square given the length of its side.\n    '''\n    a = a * 4\n    return round(a, 2)\ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given the length of its two sides.\n    '''\n    a = a * b\n    return round(a, 2)\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to calculate the perimeter of a rectangle given the length of its two sides.\n    '''\n    a = a + b\n    return round(a, 2)\ndef area_square_sector(a, b):\n    '''\n    Write a function to calculate the area of a square sector given the length of its side and the angle of its sector.\n    '''\n    a = a * b / 360\n    return round(a, 2)\ndef area_square_segment(a, b):\n    '''\n    Write a function to calculate the area of a square segment given the length of its side and the angle of its segment.\n    '''\n    a = a ** 2 * b / 360\n    return round(a, 2)\ndef circumference_square_sector(a, b):\n    '''\n    Write a function to calculate the circumference of a square sector given the length of its side and the angle of its sector.\n    '''\n    a = 2 * pi * a * b / 360\n    return round(a, 2)\ndef circumference_square_segment(a, b):\n    '''\n    Write a function to calculate the circumference of a square segment given the length of its side and the angle of its segment.\n    '''\n    a = 2 * pi * a * b / 360\n    return round(a, 2)\ndef area_kite(a, b):\n    '''\n    Write a function to calculate the area of a kite given the lengths of its two sides.\n    '''\n    a = a * b / 2\n    return round(a, 2)\ndef circumference_kite(a, b):\n    '''\n    Write a function to calculate the circumference of a kite given the lengths of its two sides.\n    '''\n    a = a * 4\n    b = b * 2\n    return round(a + b, 2)\ndef area_kite_sector(a, b, c):\n    '''\n    Write a function to calculate the area of a kite sector given the lengths of its three sides and the angle of its sector.\n    '''\n    a = a * b * c / 360\n    return round(a, 2)\ndef circumference_kite_sector(a, b, c):\n    '''\n    Write a function to calculate the circumference of a kite sector given the lengths of its three sides and the angle of its sector.\n    '''\n    a = 2 * pi * a * (b + c) / 360\n    return round(a, 2)\ndef area_kite_segment(a, b, c):\n    '''\n    Write a function to calculate the area of a kite segment given the lengths of its three sides and the angle of its segment.\n    '''\n    a = a ** 2 * b * c / 360\n    return round(a, 2)\ndef circumference_kite_segment(a, b, c):\n    '''\n    Write a function to calculate the circumferenc"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s**2 * ((3*(l) - (l**2))/(3))) / 4\n    return a\n    \ndef volume_polyhedron(s, h, r):\n    '''\n    Write a function to calculate the volume of a regular polyhedron given the side length and its height.\n    '''\n    volume = s**2 * (h/3) * (3/4 * tan(pi/3) - (4 * (r**3) / 3))\n    return volume\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divsum(a,b):\n        def divsum(a,b):\n            d = 1\n            a = max(a,b)\n            b = min(a,b)\n            sum1 = 0\n            for i in range(1,a):\n                if a%i == 0:\n                    sum1 += i\n            sum2 = 0\n            for j in range(1,b):\n                if b%j == 0:\n                    sum2 += j\n            if sum1 == sum2:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        return divsum(a,b)\n    return divsum(n,n)\ndef factor(n): \n    '''\n    Write a function to find the largest factor of a positive integer \n    '''\n    def factor(n):\n        d = 1\n        n = max(n,d)\n        d = min(n,d)\n        for i in range(1,n):\n            if n%i == 0:\n                if i > d:\n                    d = i\n        print(d)\n        return factor(n)\n    return factor(n)\ndef binary(n): \n    '''\n    Write a function to convert decimal to binary. The input parameter is the number and the output is the binary representation\n    '''\n    def binary(n):\n        n = int(n)\n        if n == 0:\n            print(0)\n        else:\n            d = n\n            a = []\n            while d!= 0:\n                a.append(d%2)\n                d = d//2\n            print(''.join(str(i) for i in a[::-1]))\n        return binary(n)\n    return binary(n)\ndef circle(r): \n    '''\n    Write a function to find the circumference of a circle. The input parameter is the radius of the circle\n    '''\n    def circle(r):\n        r = int(r)\n        p = 2*3.14*r\n        print(p)\n        return circle(r)\n    return circle(r)\ndef circle_area(r): \n    '''\n    Write a function to calculate the area of a circle\n    '''\n    def circle_area(r):\n        r = int(r)\n        a = 3.14*r*r\n        print(a)\n        return circle_area(r)\n    return circle_area(r)\ndef cylinder(r,h): \n    '''\n    Write a function to calculate the area of a cylinder\n    '''\n    def cylinder(r,h):\n        r = int(r)\n        h = int(h)\n        a = 3.14*r*r*h\n        print(a)\n        return cylinder(r,h)\n    return cylinder(r,h)\ndef sphere(r): \n    '''\n    Write a function to calculate the volume of a sphere\n    '''\n    def sphere(r):\n        r = int(r)\n        v = (4/3)*3.14*r*r*r\n        print(v)\n        return sphere(r)\n    return sphere(r)\ndef cylinder_volume(r,h): \n    '''\n    Write a function to calculate the volume of a cylinder\n    '''\n    def cylinder_volume(r,h):\n        r = int(r)\n        h = int(h)\n        v = 3.14*r*r*h\n        print(v)\n        return cylinder_volume(r,h)\n    return cylinder_volume(r,h)\ndef cone_volume(r,h): \n    '''\n    Write a function to calculate the volume of a cone\n    '''\n    def cone_volume(r,h):\n        r = int(r)\n        h = int(h)\n        v = (1/3)*3.14*r*r*h\n        print(v)\n        return cone_volume(r,h)\n    return cone_volume(r,h)\ndef cylinder_surface_area(r,h): \n    '''\n    Write a function to calculate the surface area of a cylinder\n    '''\n    def cylinder_surface_area(r,h):\n        r = int(r)\n        h = int(h)\n        a = 2*3.14*r*(r+h)\n        print(a)\n        return cylinder_surface_area(r,h)\n    return cylinder_surface_area(r,h)\ndef sphere_surface_area(r): \n    '''\n    Write a function to calculate the surface area of a sphere\n    '''\n    def sphere_surface_area(r):\n        r = int(r)\n        a = 4*3.14*r*r\n        print(a)\n        return sphere_surface_area(r)\n    return sphere_surface_area(r)\ndef cone_surface_area(r,h): \n    '''\n    Write a function to calculate the surface area of a cone\n    '''\n    def cone_surface_area(r,h):\n        r = int(r)\n        h = int(h)\n        a = 3.14*r*r + 3.14*r*h\n        print(a)\n        return cone_surface_area(r,h)\n    return cone_surface_area(r,h)\ndef cylinder_surface_area(r,h): \n    '''\n    Write a function to calculate the surface area of a cylinder\n    '''\n    def cylinder_surface_area(r,h):\n        r = int(r)\n        h = int(h)\n        a = 2*3.14*r*(r+h)\n        print(a)\n        return cylinder_surface_area(r,h)\n    return cylinder_surface_area(r,h)\ndef triangle(b,h): \n    '''\n    Write a function to calculate the area of a triangle\n    '''\n    def triangle(b,h):\n        b = int(b)\n        h = int(h)\n        a = b*h/2\n        print(a)\n        return triangle(b,h)\n    return triangle(b,h)\ndef square(a): \n    '''\n    Write a function to calculate the area of a square\n    '''\n    def square(a):\n        a = int(a)\n        a = a*a\n        print(a)\n        return square(a)\n    return square(a)\ndef right_angle_triangle_area(b,h): \n    '''\n    Write a function to calculate the area of a right angle triangle\n    '''\n    def right_angle_triangle_area(b,h):\n        b = int(b)\n        h = int(h)\n        a = math.sqrt(b*b + h*h)\n        print(a)\n        return right_angle_triangle_area(b,h)\n    return right_angle_triangle_area(b,h)\ndef rectangle_area(l,w): \n    '''\n    Write a function to calculate the area of a rectangle\n    '''\n    def rectangle_area(l,w):\n        l = int(l)\n        w = int(w)\n        a = l*w\n        print(a)\n        return rectangle_area(l,w)\n    return rectangle_area(l,w)\ndef square_area(s): \n    '''\n    Write a function to calculate the area of a square\n    '''\n    def square_area(s):\n        s = int(s)\n        a = s*s\n        print(a)\n        return square_area(s)\n    return square_area(s)\ndef right_angled_triangle_area(s): \n    '''\n    Write a function to calculate the area of a right angled triangle\n    '''\n    def right_angled_triangle_area(s):\n        s = int(s)\n        a = math.sqrt(s*s)\n        print(a)\n        return right_angled_triangle_area(s)\n    return right_angled_triangle_area(s)\ndef trapezium_area(a,b,h): \n    '''\n    Write a function to calculate the area of a trapezium\n    '''\n    def trapezium_area(a,b,h):\n        a = int(a)\n        b = int(b)\n        h = int"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,n): \n        if n % i == 0: \n            sum += i\n    return sum\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, int(n/2)+1):\n        if (n % i == 0):\n            sum1 = sum1 + i\n    for j in range(1, int((n+1)/2)):\n        if (n % j == 0):\n            sum2 = sum2 + j\n    return sum1 == sum2\ndef div_prod(n):\n    '''\n    Write a function to determine if the product of the divisors of two integers are the same.\n    '''\n    prod1 = 1\n    prod2 = 1\n    for i in range(1, int(n/2)+1):\n        if (n % i == 0):\n            prod1 = prod1 * i\n    for j in range(1, int((n+1)/2)):\n        if (n % j == 0):\n            prod2 = prod2 * j\n    return prod1 == prod2\ndef div_sum_prod(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same, and if the product of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    prod1 = 1\n    prod2 = 1\n    for i in range(1, int(n/2)+1):\n        if (n % i == 0):\n            sum1 = sum1 + i\n            prod1 = prod1 * i\n    for j in range(1, int((n+1)/2)):\n        if (n % j == 0):\n            sum2 = sum2 + j\n            prod2 = prod2 * j\n    return sum1 == sum2 and prod1 == prod2\ndef div_sum_prod_simp(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same, and if the product of the divisors of two integers are the same, and if the sum of the divisors of three integers are the same, and if the product of the divisors of three integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    prod1 = 1\n    prod2 = 1\n    sum3 = 0\n    prod3 = 1\n    for i in range(1, int(n/2)+1):\n        if (n % i == 0):\n            sum1 = sum1 + i\n            prod1 = prod1 * i\n    for j in range(1, int((n+1)/2)):\n        if (n % j == 0):\n            sum2 = sum2 + j\n            prod2 = prod2 * j\n    for k in range(1, int((n+1)*2/3)+1):\n        if (n % k == 0):\n            sum3 = sum3 + k\n            prod3 = prod3 * k\n    return sum1 == sum2 and prod1 == prod2 and sum3 == prod3\ndef div_sum_prod_simp2(n):\n    '''\n    Write a function to determine if the sum of the divisors of three integers are the same, and if the product of the divisors of three integers are the same.\n    '''\n    sum1 = 0\n    prod1 = 1\n    for i in range(1, int(n/2)+1):\n        if (n % i == 0):\n            sum1 = sum1 + i\n            prod1 = prod1 * i\n    for j in range(1, int((n+1)/2)):\n        if (n % j == 0):\n            sum2 = sum2 + j\n            prod2 = prod2 * j\n    for k in range(1, int((n+1)*2/3)+1):\n        if (n % k == 0):\n            sum3 = sum3 + k\n            prod3 = prod3 * k\n    return sum1 == sum2 and prod1 == prod2 and sum3 == prod3\ndef is_triangle_number(n):\n    '''\n    Write a function to determine if a number is a triangle number.\n    '''\n    return int((n * (n+1)) / 2) == n\ndef div_sum_sq(n):\n    '''\n    Write a function to determine if the sum of the divisors of a number is a square number.\n    '''\n    sum1 = 0\n    for i in range(1, int(math.sqrt(n)+1)):\n        if (n % i == 0):\n            sum1 = sum1 + i\n    return sum1 == math.sqrt(n)\ndef div_sum_sq2(n):\n    '''\n    Write a function to determine if the sum of the divisors of a number is a square number, and if the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of the sum of the divisors of th"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: \n        return False\n    elif n == 2: \n        return True\n    else: \n        sum1 = 0\n        for i in range(1, math.ceil(math.sqrt(n))): \n            if n % i == 0: \n                sum1 += i\n        if sum1 == n: \n            return True\n        else: \n            sum2 = 0\n            for i in range(1, math.ceil(math.sqrt(n))): \n                if n % i == 0: \n                    sum2 += i\n            if sum2 == n: \n                return True\n            else: \n                return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    num = n\n    div = [1]\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0: \n            div.append(i)\n            if num // i!= i: \n                div.append(num // i)\n    div.append(num)\n    return sum(div)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # iterate from 1 to n**0.5 and check if sum of divisors is also a divisor of n\n    for i in range(1,int(n**0.5)+1):\n        if n % i == 0:\n            j = n / i\n            if i == j and i!= 1: # if they are the same, and not 1, then return true\n                return True\n    return False # if no such pair exists then return false\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i \n            else: \n                sum = sum + i + n / i\n    if sum == n:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 100:\n        return False\n    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            if (n / divisor) + divisor == n:\n                return True\n        divisor += 1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1,n): \n        if n % i == 0: \n            s = s + i \n    return s \ndef sum_of_divisors(n): \n    '''\n    Write a function to return the sum of the divisors of a given number.\n    '''\n    s = 0\n    for i in range(1,n): \n        if n % i == 0: \n            s = s + i \n    return s \ndef is_triangular(n): \n    '''\n    Write a function to determine if a given number is a triangular number, i.e. if it is the sum of the factorial of a set of integers.\n    '''\n    if n < 1: \n        return False\n    else: \n        for i in range(1,n+1): \n            s = 0\n            for j in range(1,i+1): \n                s = s + math.factorial(j) \n            if s == n: \n                return True \n        return False \ndef n_factorial(n): \n    '''\n    Write a function to return the factorial of a given number.\n    '''\n    if n < 1: \n        return False\n    else: \n        for i in range(1,n+1): \n            s = 0\n            for j in range(1,i+1): \n                s = s + math.factorial(j) \n            if s == n: \n                return True \n        return False \ndef nth_triangular(n): \n    '''\n    Write a function to return the nth triangular number. \n    '''\n    if n < 1: \n        return False\n    else: \n        s = 0\n        for i in range(1,n+1): \n            for j in range(1,i+1): \n                s = s + math.factorial(j) \n            if s == n: \n                return s \n        return False \ndef nth_prime(n): \n    '''\n    Write a function to return the nth prime number.\n    '''\n    if n < 1: \n        return False\n    else: \n        count = 0 \n        i = 2 \n        while count!= n: \n            flag = True \n            for j in range(2,i): \n                if i % j == 0: \n                    flag = False \n                    break \n            if flag: \n                count = count + 1 \n            i = i + 1 \n        return i - 1 \ndef nth_prime_factorial(n): \n    '''\n    Write a function to return the nth prime factorial number. \n    '''\n    if n < 1: \n        return False\n    else: \n        for i in range(1,n+1): \n            for j in range(2,i): \n                if i % j == 0: \n                    break \n            else: \n                return i \ndef nth_prime_factor(n): \n    '''\n    Write a function to return the prime factors of a number.\n    '''\n    if n < 1: \n        return False\n    else: \n        i = 2 \n        while n > 1: \n            while n % i == 0: \n                print(i) \n                n = n / i \n            i = i + 1 \n        return n \ndef prime_factors(n): \n    '''\n    Write a function to return the prime factors of a number.\n    '''\n    if n < 1: \n        return False\n    else: \n        i = 2 \n        while n > 1: \n            while n % i == 0: \n                print(i) \n                n = n / i \n            i = i + 1 \n        return n \ndef factorial_divisors(n): \n    '''\n    Write a function to return the number of divisors of a number.\n    '''\n    if n < 1: \n        return False\n    else: \n        i = 1 \n        s = 0 \n        while i <= n: \n            if n % i == 0: \n                s = s + 1 \n            i = i + 1 \n        return s \ndef prime_divisors(n): \n    '''\n    Write a function to return the number of prime divisors of a number.\n    '''\n    if n < 1: \n        return False\n    else: \n        i = 1 \n        s = 0 \n        while i <= n: \n            if n % i == 0: \n                if is_prime(i): \n                    s = s + 1 \n            i = i + 1 \n        return s \ndef gcd(a, b): \n    '''\n    Write a function to return the greatest common divisor (GCD) of two numbers.\n    '''\n    if a < 1 or b < 1: \n        return False\n    else: \n        i = 1 \n        while i <= a and i <= b: \n            if a % i == 0 and b % i == 0: \n                return i \n            i = i + 1 \n        return i \ndef lcm(a, b): \n    '''\n    Write a function to return the lowest common multiple (LCM) of two numbers.\n    '''\n    if a < 1 or b < 1: \n        return False\n    else: \n        i = 1 \n        while i <= a and i <= b: \n            if a % i == 0 and b % i == 0: \n                return i \n            i = i + 1 \n        return i \ndef hcf(a, b): \n    '''\n    Write a function to return the highest common factor (HCF) of two numbers.\n    '''\n    if a < 1 or b < 1: \n        return False\n    else: \n        i = 1 \n        while i <= a and i <= b: \n            if a % i == 0 and b % i == 0: \n                return i \n            i = i + 1 \n        return i \ndef is_square(n): \n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if n < 1: \n        return False\n    else: \n        s = int(math.sqrt(n)) \n        return s * s == n \ndef perfect_squares(n): \n    '''\n    Write a function to return the list of perfect squares less than the number provided.\n    '''\n    if n < 1: \n        return False\n    else: \n        s = int(math.sqrt(n)) \n        l = [] \n        while s * s < n: \n            l.append(s * s) \n            s = s + 1 \n        return l \ndef sum_of_factors(n): \n    '''\n    Write a function to return the sum of the factors of a number.\n    '''\n    if n < 1: \n        return False\n    else: \n        s = 0 \n        for i in range(1, n + 1): \n            if n % i == 0: \n                s = s + i \n        return s \ndef nth_sum_of_factors(n): \n    '''\n    Write a function to return the sum of the nth factors of a number.\n    '''\n    if n < 1: \n        return False\n    else: \n        s = 0 \n        for i in range(1, n + 1): \n            if n % i == 0: \n                s = s + i \n        return s \ndef sum_of_divisors_factors(n): \n    '''\n    Write a function to return the sum of the divisors and their factors of a number.\n    '''\n    if n < 1: \n        return False\n    else: \n        s = 0 \n        for i in range(1, n + 1): \n            if n % i == 0: \n                s = s + i \n                if n % i == 0: \n                    s = s + i \n        return s \ndef sum_of_divisors_primes(n): \n    '''\n    Write a function to retur"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = n // 2 + 1\n    s = 0\n    for i in range(1, x): \n        if n % i == 0: \n            s += i \n    return s \n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1=str1.lower()\n    dict= {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    sum=0\n    for i in str1:\n        sum+=dict[i]\n    return sum\nprint(count_char_position(\"The sunset sets at twelve o' clock.\"))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    for char in str1.lower():\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            char_count+=1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # str1 = 'bcba'\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Return 0 if string is empty\n    if not str1:\n        return 0\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in alphabet:\n        count += str1.count(i)\n    print(count)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if str1[i]!= \" \":\n            count += ord(str1[i])-ord(\"A\")+1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    dict_char_position = {\n    'a':0, 'b':0, 'c':0, 'd':0, 'e':0, 'f':0, 'g':0, 'h':0, 'i':0, 'j':0, 'k':0, 'l':0,'m':0, 'n':0, 'o':0, 'p':0, 'q':0, 'r':0,'s':0, 't':0, 'u':0, 'v':0, 'w':0, 'x':0, 'y':0, 'z':0\n    }\n    for i in str1:\n        if i.lower() in dict_char_position:\n            dict_char_position[i.lower()]+=1\n    \n    for i in dict_char_position:\n        if dict_char_position[i]!= 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # The given strings consists of lowercase letters. \n    # Count the number of characters in str1 that are present at the same position in the English alphabet. \n    # Ignore characters that are not present in the English alphabet.\n    # The returned count is case insensitive.\n    # Expected Output:\n    # For str1 = \u201cAbc\u201d, the output should be 3.\n    # For str1 = \u201ccabbage\u201d, the output should be 5.\n    # For str1 = \u201cMessi\u201d, the output should be 0.\n    # For str1 = \u201cgReAtinG\u201d, the output should be 7.\n    count = 0\n    for i in str1:\n        if i.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    return len([c for c in str1 if c in 'abcdefghijklmnopqrstuvwxyz'])\n    # return len([c for c in str1 if ord(c)-96 in range(0,26)])\n    # return len([c for c in str1 if ord(c) in range(97, 123)])\n    # return len([c for c in str1 if ord(c) in range(65, 91)])\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    str2 = str1.lower()\n    \n    letter_dict = {}\n    \n    for letter in str2:\n        letter_dict[letter] = str2.count(letter)\n        \n    return letter_dict\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    # A = [1,2,3,4,5,6,7,8,9]\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i < j and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    assert(len(A) > 0)\n    assert(len(A) <= 1000)\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    n = len(A)\n    count = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    XOR_to_even = 0\n    for i in A:\n        if i ^ XOR_to_even == 0:\n            XOR_to_even ^= i\n            #print(\"i: {}\\n XOR to even: {}\\n\".format(i, XOR_to_even))\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 1: return False\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if A[i] ^ A[j] % 2 == 0:\n                    count += 1\n    return count // 2\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    \n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if((A[i] ^ A[j]) % 2 == 0):\n                even_count += 1\n    \n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    assert A.count(None)==0, 'Cannot have None values in array'\n    even_count = 0\n    for x in A:\n        if x is not None:\n            for y in A:\n                if y is not None and (x^y)%2 == 0:\n                    even_count+=1\n    return even_count/2\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for x in A:\n        for y in A:\n            if (x ^ y) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    print('\\n\\t Finding pairs of even xor:')\n    print('\\t Input:',A)\n    for i in range(0, len(A)):\n        for j in range(0,len(A)):\n            if i < j:\n                sum_xor = A[i] ^ A[j]\n                if sum_xor % 2 == 0:\n                    print('\\t  xor is:',sum_xor,' and is even!')\n                    return (i,j)\n                else:\n                    print('\\t xor is:',sum_xor,' and is odd!')\n    return (0,0)\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    import math\n    return int(math.pow(2, (math.ceil(math.log(n, 2)))))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** ((n - 1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**n.bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 0\n    while n >= 1:\n        count += 1\n        n = n >> 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**ceil(log(n, 2))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n<1 else (1<<(n-1).bit_length())\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #return 0 if there is no such element in the list\n    if x not in a:\n        return 0\n    else:\n        return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0, len(a)): \n        if (a[i] == x): \n            count = count + 1\n    return count \n    \ndef main(): \n    a = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10] \n    x = 6\n    print(frequency(a,x))\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num_a = a.count(x)\n    return num_a\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n=0\n    for i in a:\n        if i == x:\n            n=n+1\n    return n\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Initialize the variable\n    counter = 0\n    # Iterate over the list\n    for i in range(len(a)):\n        # If a number match\n        if a[i] == x:\n            # Increment counter by 1\n            counter += 1\n    # Return the number of occurrences of a number in a list.\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for ele in a:\n        if ele == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num = 0\n    for n in a: \n        if n == x: \n            num += 1\n    return num \n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for ele in a: \n        if (ele == x): \n            count = count + 1\n    return count\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        temp = m\n        m = n\n        n = temp\n    return sum(list1[m:n+1])\n    \n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        if n > len(list1):\n            n = len(list1)\n        if m > len(list1):\n            m = len(list1)\n        return sum(list1[m-1:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if m <= i <= n:\n            new_list.append(list1[i])\n    total_sum = sum(new_list)\n    return total_sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in list1:\n        if m <= list1.index(i) <= n:\n            sum = sum + list1[list1.index(i)]\n    print(sum)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in list1:\n        if m <= i <= n:\n            sum += i\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\nprint(sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 8)) # 55\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sm = 0\n    for i in range(m, n + 1):\n        sm += list1[i]\n    return sm\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n    #pass\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5*a)\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area = (5*(math.sqrt(5*(5+2*math.sqrt(5)))))\n    return area\ndef diagonal_pentagon(a):\n    '''\n    Write a function to find the length of the diagonal of a pentagon from the length of its sides.\n    '''\n    diagonal = (5*(math.sqrt(5*(5+2*math.sqrt(5)))))\n    return diagonal\ndef circumference_pentagon(a):\n    '''\n    Write a function to find the circumference of a regular pentagon from the length of its sides.\n    '''\n    circumference = (5*a)\n    return circumference\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = ((3*math.sqrt(3))*(a*a))\n    return area\ndef circumference_hexagon(a):\n    '''\n    Write a function to find the circumference of a regular hexagon from the length of its sides.\n    '''\n    circumference = (6*a)\n    return circumference\ndef circumference_heptagon(a):\n    '''\n    Write a function to find the circumference of a regular heptagon from the length of its sides.\n    '''\n    circumference = (7*a)\n    return circumference\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = (7*a)\n    return perimeter\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    area = ((5*math.sqrt(5))*(a*a))\n    return area\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = ((math.sqrt(2))*(a*a*a))\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = (8*a)\n    return perimeter\ndef circumference_octagon(a):\n    '''\n    Write a function to find the circumference of a regular octagon from the length of its sides.\n    '''\n    circumference = (8*a)\n    return circumference\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = ((math.sqrt(3))*(a*a*a))\n    return area\ndef circumference_nonagon(a):\n    '''\n    Write a function to find the circumference of a regular nonagon from the length of its sides.\n    '''\n    circumference = (9*a)\n    return circumference\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = ((math.sqrt(5))*(a*a*a*a))\n    return area\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = (10*a)\n    return perimeter\ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    circumference = (10*a)\n    return circumference\ndef area_undecagon(a):\n    '''\n    Write a function to find the area of a regular undecagon from the length of its sides.\n    '''\n    area = ((math.sqrt(13))*(a*a*a*a*a))\n    return area\ndef circumference_undecagon(a):\n    '''\n    Write a function to find the circumference of a regular undecagon from the length of its sides.\n    '''\n    circumference = (11*a)\n    return circumference\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    area = ((5*(math.sqrt(21)))*(a*a))\n    return area\ndef circumference_dodecagon(a):\n    '''\n    Write a function to find the circumference of a regular dodecagon from the length of its sides.\n    '''\n    circumference = (12*a)\n    return circumference\ndef area_tridecagon(a):\n    '''\n    Write a function to find the area of a regular tridecagon from the length of its sides.\n    '''\n    area = ((7*math.sqrt(33))*(a*a))\n    return area\ndef perimeter_tridecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecagon from the length of its sides.\n    '''\n    perimeter = (13*a)\n    return perimeter\ndef circumference_tridecagon(a):\n    '''\n    Write a function to find the circumference of a regular tridecagon from the length of its sides.\n    '''\n    circumference = (13*a)\n    return circumference\ndef area_tetradecagon(a):\n    '''\n    Write a function to find the area of a regular tetradecagon from the length of its sides.\n    '''\n    area = ((9*math.sqrt(49))*(a*a))\n    return area\ndef perimeter_tetradecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetradecagon from the length of its sides.\n    '''\n    perimeter = (14*a)\n    return perimeter\ndef circumference_tetradecagon(a):\n    '''\n    Write a function to find the circumference of a regular tetradecagon from the length of its sides.\n    '''\n    circumference = (14*a)\n    return circumference\ndef area_pentadecagon(a):\n    '''\n    Write a function to find the area of a regular pentadecagon from the length of its sides.\n    '''\n    area = ((11*math.sqrt(121))*(a*a))\n    return area\ndef perimeter_pentadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentadecagon from the length of its sides.\n    '''\n    perimeter = (15*a)\n    return perimeter\ndef circumference_pentadecagon(a):\n    '''\n    Write a function to find the circumference of a regular pentadecagon from the length of its sides.\n    '''\n    circumference = (15*a)\n    return circumference\ndef area_hexadecagon(a):\n    '''\n    Write a function to find the area of a regular hexadecagon from the length of its sides.\n    '''\n    area = ((11*math.sqrt(169))*(a*a))\n    return area\ndef perimeter_hexadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexadecagon from the length of its sides.\n    '''\n    perimeter = (16*a)\n    return perimeter\ndef circumference_hexadecagon(a):\n    '''\n    Write a function to find the circumference of a regular hexadecagon from the length of its sides.\n    '''\n    circumference = (16*a)\n    return circumference\ndef area_heptadecagon(a):\n    '''\n    Write a function to find the area of a regular heptadecagon from the length of its sides.\n    '''\n    area = ((13*math.sqrt(169))*(a*a))\n    return area\ndef perimeter_heptadecagon(a):\n    '''\n    Write a function to find th"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return a**2 * (math.tan(math.pi/5) + 1)\n    \ndef print_number_line(a, b, c, d, e):\n    '''\n    Write a function to print a number line of five characters with the numbers 1 to 5 on the lines. \n    The function should print the following:\n    \n    1    2     3   4   5\n    1    2     3   4   5\n    1    2     3   4   5\n    1    2     3   4   5\n    1    2     3   4   5\n    '''\n    for i in range(a):\n        for j in range(5):\n            if j == 0:\n                print(j + 1, end = \"    \")\n            elif j == 1:\n                print(j + 1, end = \"    \")\n            elif j == 2:\n                print(j + 1, end = \"     \")\n            elif j == 3:\n                print(j + 1, end = \"      \")\n            elif j == 4:\n                print(j + 1, end = \"       \")\n        print(\"\")\n        \ndef print_number_line_odd(a, b, c, d, e):\n    '''\n    Write a function to print a number line of five characters with the numbers 1 to 5 on the lines. \n    The function should print the following:\n    \n    1    3   5   7   9   11\n    1    3   5   7   9   11\n    1    3   5   7   9   11\n    1    3   5   7   9   11\n    1    3   5   7   9   11\n    '''\n    for i in range(a):\n        for j in range(5):\n            if j == 0:\n                print(j + 1, end = \"    \")\n            elif j == 1:\n                print(j + 1, end = \"     \")\n            elif j == 2:\n                print(j + 1, end = \"      \")\n            elif j == 3:\n                print(j + 1, end = \"       \")\n            elif j == 4:\n                print(j + 1, end = \"        \")\n        print(\"\")\n        \ndef print_number_line_upper(a, b, c, d, e):\n    '''\n    Write a function to print a number line of five characters with the numbers 1 to 5 on the lines. \n    The function should print the following:\n    \n    1   2   3   4   5\n    1   2   3   4   5\n    1   2   3   4   5\n    1   2   3   4   5\n    1   2   3   4   5\n    '''\n    for i in range(a):\n        for j in range(5):\n            if j == 0:\n                print(j + 1, end = \"   \")\n            elif j == 1:\n                print(j + 1, end = \"  \")\n            elif j == 2:\n                print(j + 1, end = \" \")\n            elif j == 3:\n                print(j + 1, end = \"\")\n            elif j == 4:\n                print(j + 1, end = \"\")\n        print(\"\")\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (5*(a**2))/4\ndef circumference_circle(a):\n    '''\n    Write a function to find the circumference of a circle from the length of its radius.\n    '''\n    return 2*math.pi*a\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle from the length of its radius.\n    '''\n    return math.pi*(a**2)\ndef circumference_narc(a):\n    '''\n    Write a function to find the circumference of a circle from the length of its radius.\n    '''\n    return a*(math.pi*2)\ndef area_narc(a):\n    '''\n    Write a function to find the area of a circle from the length of its radius.\n    '''\n    return a*(a*(math.pi*2))\ndef circumference_segment(a,b):\n    '''\n    Write a function to find the perimeter of a segment of a straight line from the length of its sides.\n    '''\n    return 2*(a+b)\ndef area_segment(a,b):\n    '''\n    Write a function to find the area of a segment of a straight line from the length of its sides.\n    '''\n    return a*b\ndef circumference_equilateral_triangle(a):\n    '''\n    Write a function to find the circumference of an equilateral triangle from the length of its base.\n    '''\n    return (3*(a**2))/2\ndef area_equilateral_triangle(a):\n    '''\n    Write a function to find the area of an equilateral triangle from the length of its base.\n    '''\n    return (math.sqrt(3)*a**2)/2\ndef circumference_isosceles_triangle(a,b):\n    '''\n    Write a function to find the circumference of an isosceles triangle from the length of its base.\n    '''\n    return (2*a)+(2*b)\ndef area_isosceles_triangle(a,b):\n    '''\n    Write a function to find the area of an isosceles triangle from the length of its base.\n    '''\n    return (a*b)/2\ndef circumference_parallelogram(a,b):\n    '''\n    Write a function to find the circumference of a parallelogram from the length of its sides.\n    '''\n    return 2*(a+b)\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram from the length of its sides.\n    '''\n    return a*b\ndef circumference_kite(a,b):\n    '''\n    Write a function to find the circumference of a kite from the length of its radius.\n    '''\n    return 2*(a+b)\ndef area_kite(a,b):\n    '''\n    Write a function to find the area of a kite from the length of its radius.\n    '''\n    return a*b\ndef circumference_rhombus(a):\n    '''\n    Write a function to find the circumference of a rhombus from the length of its diagonals.\n    '''\n    return 2*(math.sqrt(2)*a)\ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a rhombus from the length of its diagonals.\n    '''\n    return (a*math.sqrt(2))/2\ndef circumference_square(a):\n    '''\n    Write a function to find the circumference of a square from the length of its sides.\n    '''\n    return 4*a\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return a**2\ndef circumference_rectangle(a,b):\n    '''\n    Write a function to find the circumference of a rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle from the length of its sides.\n    '''\n    return a*b\ndef circumference_trapezoid(a,b):\n    '''\n    Write a function to find the circumference of a trapezoid from the length of its sides.\n    '''\n    return 4*a+2*(a+b)\ndef area_trapezoid(a,b):\n    '''\n    Write a function to find the area of a trapezoid from the length of its sides.\n    '''\n    return 1/2*(a+b)*a\ndef circumference_parallepiped(a,b,c):\n    '''\n    Write a function to find the circumference of a parallepiped from the length of its sides.\n    '''\n    return 4*a+4*b+4*c\ndef area_parallepiped(a,b,c):\n    '''\n    Write a function to find the area of a parallepiped from the length of its sides.\n    '''\n    return a*b*c\ndef circumference_cube(a):\n    '''\n    Write a function to find the circumference of a cube from the length of its sides.\n    '''\n    return 6*a\ndef area_cube(a):\n    '''\n    Write a function to find the area of a cube from the length of its sides.\n    '''\n    return a**3\ndef circumference_sphere(a):\n    '''\n    Write a function to find the circumference of a sphere from the length of its radius.\n    '''\n    return 4*math.pi*a\ndef area_sphere(a):\n    '''\n    Write a function to find the area of a sphere from the length of its radius.\n    '''\n    return 4*math.pi*(a**2)\ndef circumference_cylinder(a,b):\n    '''\n    Write a function to find the circumference of a cylinder from the length of its radius and height.\n    '''\n    return 2*math.pi*(a+b)\ndef area_cylinder(a,b):\n    '''\n    Write a function to find the area of a cylinder from the length of its radius and height.\n    '''\n    return math.pi*(a*b)\ndef circumference_cone(a):\n    '''\n    Write a function to find the circumference of a cone from the length of its radius and height.\n    '''\n    return math.pi*(a**2)*(1/3)\ndef area_cone(a):\n    '''\n    Write a function to find the area of a cone from the length of its radius and height.\n    '''\n    return 1/3*math.pi*(a**2)*a\ndef circumference_tetrahedron(a):\n    '''\n    Write a function to find the circumference of a tetrahedron from the length of its side.\n    '''\n    return 3*math.sqrt(2)*a\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a tetrahedron from the length of its side.\n    '''\n    return (3*math.sqrt(2)*(a**2))/2\ndef circumference_octahedron(a):\n    '''\n    Write a function to find the circumference of a octahedron from the length of its side.\n    '''\n    return 4*math.sqrt(2)*a\ndef area_octahedron(a):\n    '''\n    Write a function to find the area of a octahedron from the length of its side.\n    '''\n    return (math.sqrt(2)*(a**2))\ndef circumference_icosahedron(a):\n    '''\n    Write a function to find the circumference of a icosahedron from the length of its side.\n    '''\n    return 20*math.sqrt(3)*a\ndef area_icosahedron(a):\n    '''\n    Write a function to find the area of a icosahedron from the length of its side.\n    '''\n    return (5*math.sqrt(3)*(a**2))/12\ndef circumferenc"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5 * a)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(\"The perimeter of a regular pentagon with the length of its sides\", a, \"is\", (5 * a))\n    \n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    print(\"The area of a regular pentagon with the length of its sides\", a, \"is\", (math.sqrt(3) / 2 * math.pow(a, 2)))\n    \n    \ndef volume_prism(a, b):\n    '''\n    Write a function to calculate the volume of a prism whose sides are of length a and b.\n    '''\n    print(\"The volume of a prism whose sides are of length\", a, \"and\", b, \"is\", (a * b * a))\n    \n    \ndef area_prism(a, b):\n    '''\n    Write a function to calculate the area of a prism whose sides are of length a and b.\n    '''\n    print(\"The area of a prism whose sides are of length\", a, \"and\", b, \"is\", (a * b * 2))\n    \n    \ndef volume_cone(a, b):\n    '''\n    Write a function to calculate the volume of a cone whose radius is a and whose height is b.\n    '''\n    print(\"The volume of a cone whose radius is\", a, \"and height is\", b, \"is\", (1/3 * math.pi * math.pow(a, 2) * b))\n    \n    \ndef area_cone(a):\n    '''\n    Write a function to calculate the area of a cone whose radius is a.\n    '''\n    print(\"The area of a cone whose radius is\", a, \"is\", (1/3 * math.pi * math.pow(a, 2)))\n    \n    \ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse which has major axis a and minor axis b.\n    '''\n    print(\"The area of an ellipse with major axis\", a, \"and minor axis\", b, \"is\", (a * b * math.pi))\n    \n    \ndef volume_sphere(a):\n    '''\n    Write a function to calculate the volume of a sphere whose radius is a.\n    '''\n    print(\"The volume of a sphere with radius\", a, \"is\", (4/3 * math.pi * math.pow(a, 3)))\n    \n    \ndef area_sphere(a):\n    '''\n    Write a function to calculate the area of a sphere whose radius is a.\n    '''\n    print(\"The area of a sphere with radius\", a, \"is\", 4 * math.pi * math.pow(a, 2))\n    \n    \ndef volume_cube(a):\n    '''\n    Write a function to calculate the volume of a cube whose side is a.\n    '''\n    print(\"The volume of a cube with side\", a, \"is\", math.pow(a, 3))\n    \n    \ndef area_cube(a):\n    '''\n    Write a function to calculate the area of a cube whose side is a.\n    '''\n    print(\"The area of a cube with side\", a, \"is\", 6 * math.pow(a, 2))\n    \n    \ndef volume_cylinder(a, b):\n    '''\n    Write a function to calculate the volume of a cylinder whose radius is a and height is b.\n    '''\n    print(\"The volume of a cylinder with radius\", a, \"and height\", b, \"is\", (math.pi * math.pow(a, 2) * b))\n    \n    \ndef area_cylinder(a, b):\n    '''\n    Write a function to calculate the area of a cylinder whose radius is a and height is b.\n    '''\n    print(\"The area of a cylinder with radius\", a, \"and height\", b, \"is\", 2 * math.pi * a * b + 2 * math.pi * math.pow(a, 2))\n    \n    \ndef surface_area_prism(a, b):\n    '''\n    Write a function to calculate the surface area of a prism whose sides are of length a and b.\n    '''\n    print(\"The surface area of a prism whose sides are of length\", a, \"and\", b, \"is\", 2 * (a * b + a + b))\n    \n    \ndef surface_area_cone(a, b):\n    '''\n    Write a function to calculate the surface area of a cone whose radius is a and height is b.\n    '''\n    print(\"The surface area of a cone with radius\", a, \"and height\", b, \"is\", 2 * (a * b + math.pi * a + math.pi * b))\n    \n    \ndef surface_area_cube(a):\n    '''\n    Write a function to calculate the surface area of a cube whose side is a.\n    '''\n    print(\"The surface area of a cube with side\", a, \"is\", 6 * math.pow(a, 2))\n    \n    \ndef surface_area_sphere(a):\n    '''\n    Write a function to calculate the surface area of a sphere whose radius is a.\n    '''\n    print(\"The surface area of a sphere with radius\", a, \"is\", 4 * math.pi * math.pow(a, 2))\n    \n    \ndef surface_area_cylinder(a, b):\n    '''\n    Write a function to calculate the surface area of a cylinder whose radius is a and height is b.\n    '''\n    print(\"The surface area of a cylinder with radius\", a, \"and height\", b, \"is\", 2 * (math.pi * math.pow(a, 2) + a * b))\n    \n    \ndef volume_per_second(a, b):\n    '''\n    Write a function to calculate the volume per second of a prism whose sides are of length a and b.\n    '''\n    print(\"The volume per second of a prism whose sides are of length\", a, \"and\", b, \"is\", (a * b * a / b))\n    \n    \ndef area_per_second(a, b):\n    '''\n    Write a function to calculate the area per second of a prism whose sides are of length a and b.\n    '''\n    print(\"The area per second of a prism whose sides are of length\", a, \"and\", b, \"is\", (math.sqrt(3) / 2 * a * b / b))\n    \n    \ndef side_length_of_triangle(a, b, c):\n    '''\n    Write a function to calculate the length of a side of a triangle whose sides are of lengths a, b, and c.\n    '''\n    print(\"The length of the side of a triangle whose sides are of lengths\", a, \",\", b, \",\", c, \"is\", (math.sqrt((a * a + b * b - c * c) / 2) + a + b + c))\n    \n    \ndef area_per_second_of_triangle(a, b, c):\n    '''\n    Write a function to calculate the area per second of a triangle whose sides are of lengths a, b, and c.\n    '''\n    print(\"The area per second of a triangle whose sides are of lengths\", a, \",\", b, \",\", c, \"is\", (math.sqrt((a * a + b * b - c * c) / 2) / (a + b + c)))\n    \n    \ndef volume_per_second_of_cylinder(a, b):\n    '''\n    Write a function to calculate the volume per second of a cylinder whose radius is a and height is b.\n    '''\n    print(\"The volume per second of a cylinder whose radius is\", a, \"and height is\", b, \"is\", (a * b * 2 * math.pi))\n    \n    \ndef area_per_second_of_cylinder(a, b):\n    '''\n    Write a function to calculate the area per second of a cylinder whose radius is a and height is b.\n    '''\n    print(\"The area per second of a cylinder whose radius is\", a, \"and height is\", b, \"is\", (2 * math.pi * a * b + 2 * math.pi * math.pow(a, 2)))\n    \n    \ndef volume_per_second_of_cone(a, b):\n    '''\n    Write a function to calculate the volume per second of "
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count = count + 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    print(s.count('std'))\n    \ndef is_unique(s):\n    '''\n    Write a function to check whether a given string has all unique characters or not.\n    '''\n    return len(s) == len(set(s))\n    \ndef reverse(s):\n    '''\n    Write a function that reverses the characters in a string.\n    '''\n    print(''.join(reversed(s)))\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = s.count('std')\n    return n\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if isinstance(test_tuple, tuple):\n        return all([check_type(item) for item in test_tuple])\n    else:\n        return type(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_type = test_tuple[0]\n    for element in test_tuple:\n        if type(element)!= tuple_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    # initializing tuple\n    tuple_list = [('x', 'apple'), ('y', 'banana')]\n    \n    # printing original tuple\n    print(\"The original tuple is : \" + str(test_tuple))\n    \n    # initializing data_type\n    data_type = []\n    \n    # using loop to get data type\n    for i in test_tuple:\n        data_type.append(type(i))\n        \n    # printing data type\n    print(\"The data type of tuple is : \" + str(data_type))\n    \n    # printing check type\n    print(\"The data type of tuple is : \" + str(all(i == data_type[0] for i in data_type)))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(i)==type(test_tuple[0]) for i in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # we assume that the element of the tuple have same datatype\n    elem_type = test_tuple[0].__class__\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    assert hasattr(test_tuple, '__iter__')\n    assert hasattr(test_tuple, '__getitem__')\n    # the return statement can be used to end function prematurely\n    # return sum(isinstance(i, str) for i in test_tuple) == len(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(test_tuple[0]) == type(elem) for elem in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = False\n    try:\n        if len(test_tuple) >= 2:\n            if test_tuple[0] == test_tuple[1]:\n                result = True\n                for i in range(2, len(test_tuple)):\n                    if test_tuple[i]!= test_tuple[i-1]:\n                        result = False\n                        break\n    except:\n        result = False\n    return result\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if n is even, the only way to get an even count of an element is if they're the same.\n    if n % 2 == 0:\n        return x == arr[n//2]\n    # if n is odd, the only way to get an odd count of an element is if they're different.\n    else:\n        return x == arr[(n//2)+1]\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if not isinstance(arr, list) or not isinstance(n, int) or not isinstance(x, int):\n        raise ValueError('array is not a list, n is not an int, or x is not an int')\n    if n < 2:\n        raise ValueError('n must be greater than or equal to 2')\n    if x < 0 or x > n:\n        raise ValueError('x must be between 0 and n')\n    i = 0\n    while i < n and arr[i] == x:\n        i += 1\n    return True if i > n/2 else False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize a count variable and a variable to track the element we are searching for\n    count = 0\n    target_element = arr[0]\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    count = 0\n    while(i < n):\n        if(arr[i] == x):\n            count += 1\n            if(count > n//2):\n                return True\n        i += 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    index = 0\n    while index < n:\n        if arr[index] == x:\n            count += 1\n        index += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x > arr[n // 2]:\n        return False\n    i = 0\n    j = n - 1\n    count = 0\n    while i <= j:\n        if arr[i] == x:\n            count += 1\n        i += 1\n        if arr[j] == x:\n            count += 1\n        j -= 1\n    return count > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return False\n    for i in range(len(arr)):\n        if arr[i] == x:\n            if arr.count(arr[i]) >= n // 2:\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    majority = n/2\n    count = 0\n    for num in arr:\n        if count < majority:\n            if num == x:\n                count += 1\n        elif num!= x:\n            count = 0\n    return count > majority\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # {\n    #   \"arr\": [1, 2, 2, 2, 2, 2, 3],\n    #   \"n\": 7,\n    #   \"x\": 2\n    # }\n    # Your code here\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n    # }\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while (n): \n        set_bits += n & 1\n        n >>= 1\n    return set_bits \nn = 34\nprint(\"The number of set bits in\", n, \"is\", count_Set_Bits(n)) \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n    \n    \n    \ndef count_Set_Bits_2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += 1\n        n &= (n - 1)\n    return count \n    \n    \n    \ndef count_Set_Bits_3(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n    \n    \n    \nif __name__ == \"__main__\": \n    # print(count_Set_Bits(11))\n    # print(count_Set_Bits_2(11))\n    print(count_Set_Bits_3(11))\n    "
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \ndef count_Set_Bits_v2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number. \n    The function should be slightly faster than the one above.\n    '''\n    count = 0\n    while (n): \n        count += 1\n        n &= (n - 1)\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        n &= (n-1)\n        count+=1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst=[]\n    for i in range(0,len(str)):\n        if i%2==0:\n            lst.append(str[i])\n    return \"\".join(lst)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)==0:\n        return str\n    if len(str)==1:\n        return str\n    return str[::2]\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    temp_str = str[::2]\n    return temp_str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([x for x in str if not x.isnumeric()])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(\"#\"*30+\" Odd Values String \"+\"#\"*30)\n    list_char = list(str)\n    temp_str = ''\n    for i in range(0,len(list_char),2):\n        temp_str = temp_str + list_char[i]\n    print(\"Original String: {}\".format(str))\n    print(\"String after removing odd index values: {}\".format(temp_str))\nodd_values_string('Python is best!')\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([i for i in str if (str.index(i) + 1) % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([char for index, char in enumerate(str) if index % 2 == 0])\n    \nprint(odd_values_string('pynative'))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(0, len(str), 2):\n        print(str[i])\n        \nodd_values_string('Python')\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list_str = list(str)\n    str_list = []\n    for i in range(0, len(list_str)):\n        if i % 2 == 0:\n            str_list.append(list_str[i])\n    print(''.join(str_list))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i%2 == 0:\n            new_str += str[i]\n    print(new_str)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return(a)\n        else:\n            return(b)\n    else:\n        if a<c:\n            return(a)\n        else:\n            return(c)\n    return(c)\nprint(min_of_three(5,6,9))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a<b):\n        if(a<c):\n            return(a)\n        else:\n            return(c)\n    else:\n        if(b<c):\n            return(b)\n        else:\n            return(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c\n    else:\n        return \"You enter three same numbers\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and b < c:\n        print(a)\n    elif a < c and c < b:\n        print(a)\n    else:\n        print(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and b < c:\n        return a\n    elif b < a and a < c:\n        return b\n    else:\n        return c\nprint(min_of_three(3,2,4))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a>=b and a>=c):\n        return a\n    elif(b>=a and b>=c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            print(a)\n    else:\n        if b<c:\n            print(b)\n        else:\n            print(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(n):\n        if(i>=l and i<=r):\n            if(check(i)==1):\n                count += 1\n        else:\n            if(check(i)==0):\n                count += 1\n    if(count==n):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r):\n        if(n&(1<<i)):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    k = r - l + 1\n    #print(n,l,r)\n    #print(k)\n    #print(\"0\"*k + bin(n)[2:])\n    return int((\"0\"*k + bin(n)[2:])[::-1],2) == n\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def all_bits_unset(n):\n        n = n & (~(n - 1))\n        return n == n\n    return all_bits_unset(r) and all_bits_unset(n & l)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n= n - 1\n    for i in range(l,r+1):\n        n= n & (i)\n        if n==0:\n            return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_bits_unset = 1\n    for i in range(l,r+1):\n        all_bits_unset = all_bits_unset & i\n    if all_bits_unset == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def bin(num): \n        return(bin(num)[2:].zfill(n))\n    def check_bits(num):\n        for i in range(n):\n            if num[i]=='0':\n                return False\n        return True\n    for i in range(l,r+1):\n        print(bin(i))\n        if check_bits(bin(i)):\n            return True\n    return False\nprint(all_Bits_Set_In_The_Given_Range(5,9,15))\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(n<0 or l<0 or r<0 or l>=n or r>n):\n        print(\"Invalid Input \")\n    else:\n        flag=1\n        for i in range(l,r+1):\n            if((n>>i)&1 == 1):\n                flag=0\n        if(flag==1):\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & l) == l) and ((n & r) == r)\n    \ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = 1 << l\n    r = 1 << r\n    return ((n & l) == 0) and ((n & r) == 0)\n    \ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = ~0  \n    return (n & mask) == mask\n    \ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = ~(1 << l)  \n    return (n & mask) == 0\n    \ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = ~(1 << r)\n    return (n & mask) == 0\n    \ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = ~(1 << l)\n    return (n & mask) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s = bin(n)[2:]\n    res = True\n    for c in s:\n        if c == '1':\n            res = False\n    return res\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    first_n = n - 1\n    first_n_last = first_n - 1\n    index = n + 1\n    for i in range(n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[first_n_last]\n            arr[first_n_last] = temp\n            first_n_last -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = n - 1\n    \n    while i < j:\n        if arr[i] >= 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0 and arr[j] >= 0:\n            i += 1\n        else:\n            j -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    index = 0\n    \n    for i in range(n):\n        if arr[i] < 0:\n            temp = arr[index]\n            arr[index] = arr[i]\n            arr[i] = temp\n            index += 1\n            \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # negative pointer\n    n_ptr = 0\n    # positive pointer\n    p_ptr = n - 1\n    # iterate over the array\n    for i in range(n):\n        # if the current element is positive\n        if arr[i] >= 0:\n            # swap the current element with the positive element at the negative pointer\n            arr[n_ptr], arr[i] = arr[i], arr[n_ptr]\n            # increment the positive pointer by 1\n            p_ptr += 1\n            # increment the negative pointer by 1\n            n_ptr += 1\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Time: O(n), Space: O(1)\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n < 1:\n        return arr\n    positive_index = 0\n    negative_index = 0\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        if arr[i] < 0 and arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0:\n            i += 1\n        elif arr[j] < 0:\n            j -= 1\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #array = [1, -3, -2, 2, -5, 5]\n    #n = 3\n    #output = [-5, -3, -2, 1, 2, 5]\n    def re_arrange_array(arr, n):\n        #base case\n        if n == 1:\n            return arr[:1] + arr[1:]\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    sorted_arr = []\n    negative_nums = []\n    positive_nums = []\n    for i in range(n):\n        num = arr[i]\n        if num < 0:\n            negative_nums.append(num)\n        else:\n            positive_nums.append(num)\n    for i in range(n):\n        if i < len(negative_nums):\n            sorted_arr.append(negative_nums[i])\n        sorted_arr.append(positive_nums[i])\n    return sorted_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # The indices of the elements in the array which are negative\n    negative_indexes = []\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # TODO\n    return str1.replace(\" \",char)\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #replace the space with character\n    str1=str1.replace(\" \",\"\")\n    return str1\n    \ndef remove_vowel(str1):\n    '''\n    Write a function that takes in a string and returns a new string with vowels removed.\n    '''\n    #use python inbuild string method\n    str1=list(str1)\n    vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"]\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i]=\" \"\n    str1=\"\".join(str1)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.split()\n    newstr = ''\n    for i in range(len(str1)):\n        if str1[i] == '':\n            str1[i] = char\n        newstr += str1[i]\n        if i < len(str1)-1:\n            newstr +=''\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\")%(char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",\"%s\")\n    return new_str % char\n    # pass\n    \nreplace_blank(\"hello\", \"!\")\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s'%char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return(str1.replace(' ', char))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[0:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=list1.copy()\n    heapq._heapify_max(list2)\n    list3=[]\n    for i in range(n):\n        list3.append(heapq._heappop_max(list2))\n    return list3\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    heapq.heapify(list1)\n    if(n>len(list1)):\n        return list1\n    for i in range(0,n):\n        list2.append(heapq.heappop(list1))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #max_heap = []\n    list1.sort()\n    max_heap = list1[-n:]\n    return max_heap\n    \n    #return heapq.nlargest(n,list1)\n    \n    "
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #create a list of items in descending order\n    list2 = heapq.nlargest(n,list1)\n    #use the original list to return the largest items\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    n = 3\n    l = []\n    heapq.heapify(list1)\n    print(heapq.nlargest(n, list1))\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        list2.append(max(list1))\n        list1.remove(max(list1))\n    return list2\ndef larg_nnum(list1,n):\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    area = np.pi*(r**2)*h\n    return(area)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return (2*math.pi*r*h) + 2*math.pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return math.pi*r**2 + 2*math.pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*np.pi*r*h + 2*np.pi*r**2\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.1415926535897932385\n    lateral_surface_area = (2*pi*r*h) + 2*pi*r**2\n    return lateral_surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.141592653589793238*r*r+2*3.141592653589793238*r*h)*2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import numpy as np\n    # define a function to find lateral surface area of a cylinder\n    def lateral_surface_area(r,h):\n        # calculate lateral surface area of a cylinder\n        lateral_surface_area = 2*np.pi*r*(r+h)\n        return lateral_surface_area\n    # return the function\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*pi*r**2 + 2*pi*r*h)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Note that h is the diameter of the cylinder.\n    side_area = 3.14159265359*r**2\n    lateral_area = 2*3.14159265359*r*h\n    lateral_surface_area = side_area + lateral_area\n    return lateral_surface_area\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return float(l ** 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def cube_volume(l):\n        '''\n        Write a function to find the volume of a cube given its side length.\n        '''\n        return l ** 3\n    return cube_volume(l)\nprint(volume_cube(2))\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 6*(l**3)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        n = n & 0xffffffff\n    else:\n        n = n & 0x55555555\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Set all even bits of n\n    n &= 0x55555555\n    n |= n >> 1 & 0x55555555\n    n |= n >> 2 & 0x33333333\n    n |= n >> 4 & 0x0f0f0f0f\n    n |= n >> 8 & 0x00ff00ff\n    n |= n >> 16 & 0x0000ffff\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n&0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # get number of bits\n    n_bits = n.bit_length()\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if (n % 2!= 0):\n        return n & (n-1)\n    else:\n        return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if(n%2==0):\n        return n\n    else:\n        return n-1\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # use the mask to turn off the odd bits\n    # then turn them back on\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1 \n    while mask < n:\n        mask <<= 1\n        mask |= 1 \n    return mask & n \n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = int(n)\n    print(\"Number {} contains {} bits, after setting all even bits, it becomes {}\".format(n, bin(n).count('1'), bin(n & ~n+1)))\n    return n & ~n+1\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0, n + 1): \n        if i % 2 == 0: \n            print(i, end = \" \") \n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = ['a', 'b', 'c', 'a', 'a', 'a', 'c', 'b']\n    my_dict = {}\n    for value in set(test_list):\n        my_dict[value] = test_list.count(value)\n    print(my_dict)\n    # Counter({'c': 3, 'b': 2, 'a': 3})\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dict to hold the frequencies\n    freq = {} \n    # for each tuple in the list\n    for tup in test_list: \n        # if the tuple is not in the dictionary\n        if tup not in freq: \n            # set the value to 1\n            freq[tup] = 1 \n        # if it is already in the dictionary\n        else: \n            # increment the count by 1\n            freq[tup] += 1\n    return freq \n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrences = {}\n    for item in test_list:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for t in test_list:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = dict()\n    for each in test_list:\n        if each in occurence_dict.keys():\n            occurence_dict[each] += 1\n        else:\n            occurence_dict[each] = 1\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    temp_list = []\n    for tup in test_list:\n        temp_list.append(tup[0])\n    counter = Counter(temp_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    #create a new list with all the words\n    new_list = []\n    for pair in test_list:\n        new_list.extend(pair)\n    #sort the new list\n    new_list.sort()\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]\n    unique_set = set()\n    \n    # This is the most inefficient way to do this.\n    # This will take O(n^2).\n    \n    # for item in test_list:\n    #     for char in item:\n    #         unique_set.add(char)\n    \n    # return {char: test_list.count(char) for char in unique_set}\n    \n    # A better way to do this is using Counter.\n    \n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # We can use the Counter class from the collections module to count the number of times each unique element appears in a list\n    return Counter(test_list) \n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Check for all zero cases\n    if not test_list:\n        return {}\n    # Initialize our hash map\n    # keys are unique values in the test list\n    # values are counts\n    count_map = Counter(test_list)\n    # convert the hash map to a dictionary\n    count_map = dict(count_map)\n    return count_map\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= \"\":\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i:j + 1]!= '': \n                result += 1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str)\n    lens = []\n    for i in range(1, l+1):\n        for j in range(0, l+1-i):\n            subs = str[j:j+i]\n            lens.append(subs)\n    count = 0\n    for x in lens:\n        if len(x) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    ans = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) > 1:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    str = str + str[0]\n    i = 0\n    j = 1\n    count = 0\n    for i in range(n):\n        if str[i+1:j+1]!= str[i:j]:\n            count += 1\n        j += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def countSubstrings(s, n): \n        count = 0\n        for i in range(n): \n            count += countSubstringsUtil(s, i, i) \n            count += countSubstringsUtil(s, i, i + 1) \n        return count \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # return len(list(filter(None, str.split(' '))))\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]=='':\n                break\n            count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # code goes here \n    return len(str)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #the number of substrings of a string is equal to the number of substrings starting at the begining of the string\n    #and ending at the end of the string and excluding the beginning and end of the string itself\n    #i.e the number of substrings of a string of length N is N*(N+1)/2\n    #the number of substrings starting at the beginning is 1 and the number of substrings ending at the end is 1 as well\n    #hence the total number of substrings is 1+N*(N+1)/2-1-1=N*(N+1)/2\n    return len(str) * (len(str) + 1) // 2\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            print(str[i:j+1])\n            if str[i:j+1]!= '':\n                count+=1\n    print(count)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def num_decodings(s):\n        '''\n        Write a recursive function that takes in a string of digits and returns the number of ways the string can be decoded. \n        '''\n        if s == '':\n            return 1\n        elif s[0] == '0':\n            return 0\n        elif len(s) == 1:\n            return 1\n        else:\n            if int(s[0:2]) <= 26:\n                return num_decodings(s[1:]) + num_decodings(s[2:])\n            else:\n                return num_decodings(s[1:])\n    if n > 1 and m > 1:\n        return num_decodings(str(m))\n    elif n > 1:\n        return num_decodings(str(n))\n    else:\n        return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def helper(m,n): \n        if m==0: \n            return 1\n        if n==1: \n            return m\n        if n==2: \n            return m*(m-1)\n        return helper(m-1,n-1) + m*helper(m,n-1)\n    return helper(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # base case if n = 1, there are 0 possible sequences\n    if n == 1:\n        return 0\n    \n    # if n > m, no possible sequences of length n with such a restriction\n    if n > m:\n        return 0\n    \n    # base case if n == m, there are 1 possible sequence \n    if n == m:\n        return 1\n    \n    # recursive case, compute the total number of sequences for m and n-1\n    # add the total number of sequences for n-1, all that come before this one\n    return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)\n    \n    \ndef print_pascal(n, m):\n    '''\n    Write a function that takes in a non-negative integer n and prints out the first n rows of Pascal's triangle.\n    '''\n    # base case\n    if n == 1:\n        return print_pascal_helper(1)\n    \n    # recursive case\n    print_pascal_helper(n)\n    \n    return None\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def backtracking(m, n, current, last):\n        if n == 0:\n            return 1\n        count = 0\n        for i in range(1, m + 1):\n            if (i >= last * 2 and i <= m):\n                count += backtracking(m, n-1, i, last)\n        return count\n    return backtracking(m, n, 1, 1)\nprint(get_total_number_of_sequences(2, 2)) # 1\nprint(get_total_number_of_sequences(2, 3)) # 2\nprint(get_total_number_of_sequences(5, 2)) # 7\nprint(get_total_number_of_sequences(7, 2)) # 28\nprint(get_total_number_of_sequences(10, 2)) # 243\nprint(get_total_number_of_sequences(50, 3)) # 7258"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m<0:\n        return 0\n    elif n==0:\n        return 1\n    elif n==1:\n        return m\n    else:\n        return m*get_total_number_of_sequences(m-1,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for i in range(1,n+1):\n        total_number_of_sequences += get_total_number_of_sequences_util(m,i)\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert(type(m) == int)\n    assert(type(n) == int)\n    assert(n > 1)\n    assert(m >= 2)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # base cases:\n    if n == 1:\n        return m\n    if m == 1:\n        return 1\n    \n    # first count all the elements that are greater than m\n    greater = m - n + 1\n    \n    # then count all the elements that are less than m\n    less = m - n + 1\n    \n    # return total = greater + less\n    return greater + get_total_number_of_sequences(greater,n-1) + get_total_number_of_sequences(less,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return factorial(m+n) // (factorial(n) * factorial(m))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize a dictionary of valid sequences\n    valid_sequences = {}\n    # Iterate over the number of elements in n\n    for i in range(n):\n        # Initialize a list to hold the possible sequences of valid numbers\n        valid_numbers = []\n        # Iterate over the number of elements in m\n        for j in range(m):\n            # Initialize the largest possible number\n            largest_number = m - (i * 2)\n            # If the largest possible number is greater than or equal to j\n            if largest_number >= j:\n                # Add the largest possible number to the list of valid numbers\n                valid_numbers.append(largest_number)\n        # If the list of valid numbers is not empty\n        if valid_numbers:\n            # Add the valid numbers as a key to the dictionary of valid sequences\n            valid_sequences[i] = valid_numbers\n    # Return the dictionary of valid sequences\n    return valid_sequences\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1 == [] or list2 == []:\n        return list1\n    if len(list1) < len(list2):\n        list1.pop()\n        for item in list2:\n            list1.append(item)\n        return list1\n    else:\n        for i in range(len(list1)):\n            list1.pop()\n        for item in list2:\n            list1.append(item)\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1[:len(list1)-1] + list2[:len(list2)])\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:]=list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[0:-1] + list2\n    \n    \n    \n    \ndef swap_list(list1,list2):\n    '''\n    Write a function that takes in two lists and swaps the first element of the first list with the last element of the second list.\n    '''\n    list1[0], list2[-1] = list2[-1], list1[0]\n    return list1,list2\n    \n    \n    \n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and reverses it (i.e. [1,2,3] -> [3,2,1]).\n    '''\n    list1.reverse()\n    return list1\n    \n    \n    \n    \ndef sort_list(list1):\n    '''\n    Write a function that takes in a list and sorts it (i.e. [1,2,3] -> [1,2,3]).\n    '''\n    list1.sort()\n    return list1\n    \n    \n    \n    \n    \ndef random_list(list1):\n    '''\n    Write a function that takes in a list and shuffles it (i.e. [1,2,3] -> [1,3,2]).\n    '''\n    import random\n    random.shuffle(list1)\n    return list1\n    \n    \n    \n    \n    \ndef add_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of the elements of the two lists added together (i.e. [1,2,3] + [3,2,1] -> [4,4,4]).\n    '''\n    return list(map(lambda x, y: x + y, list1, list2))\n    \n    \n    \n    \ndef concat_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of the elements of the two lists concatenated (i.e. [1,2,3] + [3,2,1] -> [1,2,3,3,2,1]).\n    '''\n    return list1 + list2\n    \n    \n    \n    \n    \ndef filter_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of the elements of the first list that are in the second list (i.e. [1,2,3] + [2,3] -> [2,3]).\n    '''\n    return [x for x in list1 if x in list2]\n    \n    \n    \n    \n    \ndef sub_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of all elements that are in the first list but not the second list (i.e. [1,2,3] + [2,3] -> [1]).\n    '''\n    return [x for x in list1 if x not in list2]\n    \n    \n    \n    \n    \ndef mul_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of all the elements of the first list multiplied by the number of times each element appears in the second list (i.e. [1,2,3] * [2,3] -> [2,6]).\n    '''\n    return [x*list2.count(x) for x in list1]\n    \n    \n    \n    \ndef div_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of all the elements of the first list divided by the number of times each element appears in the second list (i.e. [1,2,3] * [2,3] -> [0.5,0.33333333]).\n    '''\n    return [x/list2.count(x) for x in list1]\n    \n    \n    \n    \n    \ndef sort_list_count(list1):\n    '''\n    Write a function that takes in a list of lists and sorts the lists in the list based on the length of each list (i.e. [[1,2,3], [3,2,1], [3,3,3]] -> [[1,2,3], [3,3,3], [3,2,1]]).\n    '''\n    return sorted(list1,key=lambda x:len(x))\n    \n    \n    \n    \ndef in_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns True if the first list contains the second list and False otherwise (i.e. [1,2,3] + [2,3] -> True).\n    '''\n    return set(list2) < set(list1)\n    \n    \n    \n    \ndef index_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns the index of the first element of the second list in the first list (i.e. [1,2,3] + [2,3] -> 1).\n    '''\n    return list1.index(list2[0])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #return len(str1)\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    \nprint(count_charac(\"aaaaaaaaaa\"))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ndef count_charac_opt(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(1 for i in str1)\n    \ndef count_charac_opt_1(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    return sum(dict1.values())\n    \ndef count_charac_opt_2(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i, 0) + 1\n    return sum(dict1.values())\n    \ndef count_charac_opt_3(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(1 for i in str1)\n    \ndef count_charac_opt_4(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    "
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = {}\n    for i in str1:\n        if i in result:\n            result[i] +=1\n        else:\n            result[i] = 1\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1=input(\"Enter the string:\")\n    count=0\n    for i in str1:\n        count=count+1\n    return count\n    \n    \ndef count_word(str2):\n    '''\n    Write a function to count the total number of words in a string.\n    '''\n    str2=input(\"Enter the string:\")\n    count1=str2.count(' ')\n    return count1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Let us find the next perfect square using binary search.  \n    # For simplicity, we will use a binary search to find the value of the smallest possible solution.  \n    # Binary Search: The idea is to first do a binary search to find the smallest possible solution. \n    # A solution can be found by a direct comparison between x and the perfect square. \n    # However, this solution may not be the minimum solution.  \n    # The function is called twice, once using x as the starting point and once using x as the end point. \n    # If x is the smallest possible solution, then the function will return the solution. \n    # If x is not the smallest possible solution, then the solution is somewhere in the middle. \n    # The function returns x when it finds the smallest solution and x+1 when it finds the next smallest solution. \n    # If x is greater than the next smallest solution, then the next smallest solution is x. \n    # Otherwise, the next smallest solution is x+1.\n    # The solution is x+1. \n    # For more on binary search, refer to the next page. \n    # https://www.geeksforgeeks.org/searching-for-a-number-in-a-sorted-array-of-integers-using-binary-search/\n    # This function will also be used in the next page.\n    \n    # Let us start with an example\n    # Let us start with an example.  \n    # If N = 4, then the next perfect square greater than 4 is 9, since 9 is the next smallest perfect square greater than 4. \n    # If N = 6, then the next perfect square greater than 6 is 12, since 12 is the next smallest perfect square greater than 6. \n    # The base case is when N is less than or equal to 0. \n    # In this case, the next perfect square is 0. \n    # The recursive case is when N is greater than 0. \n    # Call the function for N = 6. \n    # The recursive call for x is going to be for 6+1 = 7. \n    # Call the function for x = 7. \n    # The recursive call for x is going to be for 7+1 = 8. \n    # Call the function for x = 8. \n    # The recursive call for x is going to be for 8+1 = 9. \n    # Call the function for x = 9. \n    # The recursive call for x is going to be for 9+1 = 10. \n    # Call the function for x = 10. \n    # The recursive call for x is going to be for 10+1 = 11. \n    # Call the function for x = 11. \n    # The recursive call for x is going to be for 11+1 = 12. \n    # Call the function for x = 12. \n    # The recursive call for x is going to be for 12+1 = 13. \n    # Call the function for x = 13. \n    # The recursive call for x is going to be for 13+1 = 14. \n    # Call the function for x = 14. \n    # The recursive call for x is going to be for 14+1 = 15. \n    # Call the function for x = 15. \n    # The recursive call for x is going to be for 15+1 = 16. \n    # Call the function for x = 16. \n    # The recursive call for x is going to be for 16+1 = 17. \n    # Call the function for x = 17. \n    # The recursive call for x is going to be for 17+1 = 18. \n    # Call the function for x = 18. \n    # The recursive call for x is going to be for 18+1 = 19. \n    # Call the function for x = 19. \n    # The recursive call for x is going to be for 19+1 = 20. \n    # Call the function for x = 20. \n    # The recursive call for x is going to be for 20+1 = 21. \n    # Call the function for x = 21. \n    # The recursive call for x is going to be for 21+1 = 22. \n    # Call the function for x = 22. \n    # The recursive call for x is going to be for 22+1 = 23. \n    # Call the function for x = 23. \n    # The recursive call for x is going to be for 23+1 = 24. \n    # Call the function for x = 24. \n    # The recursive call for x is going to be for 24+1 = 25. \n    # Call the function for x = 25. \n    # The recursive call for x is going to be for 25+1 = 26. \n    # Call the function for x = 26. \n    # The recursive call for x is going to be for 26+1 = 27. \n    # Call the function for x = 27. \n    # The recursive call for x is going to be for 27+1 = 28. \n    # Call the function for x = 28. \n    # The recursive call for x is going to be for 28+1 = 29. \n    # Call the function for x = 29. \n    # The recursive call for x is going to be for 29+1 = 30. \n    # Call the function for x = 30. \n    # The recursive call for x is going to be for 30+1 = 31. \n    # Call the function for x = 31. \n    # The recursive call for x is going to be for 31+1 = 32. \n    # Call the function for x = 32. \n    # The recursive call for x is going to be for 32+1 = 33. \n    # Call the function for x = 33. \n    # The recursive call for x is going to be for 33+1 = 34. \n    # Call the function for x = 34. \n    # The recursive call for x is going to be for 34+1 = 35. \n    # Call the function for x = 35. \n    # The recursive call for x is going to be for 35+1 = 36. \n    # Call the function for x = 36. \n    # The recursive call for x is going to be for 36+1 = 37. \n    # Call the function for x = 37. \n    # The recursive call for x is going to be for 37+1 = 38. \n    # Call the function for x = 38. \n    # The recursive call for x is going to be for 38+1 = 39. \n    # Call the function for x = 39. \n    # The recursive call for x is going to be for 39+1 = 40. \n    # Call the function for x = 40. \n    # The recursive call for x is going to be for 40+1 = 41. \n    # Call the function for x = 41. \n    # The recursive call for x is going to be for 41+1 = 42. \n    # Call the function for x = 42. \n    # The recursive call for x is going to be for 42+1 = 43. \n    # Call the function for x = 43. \n    # The recursive call for x is going to be for 43+1 = 44. \n    # Call the function for x = 44. \n    # The recursive call for x is going to be for 44+1 = 45. \n    # Call the function for x = 45. \n    # The recursive call for x is going to be for 45+1 = 46. \n    # Call the function for x = 46. \n    # The recursive call for x is going to be for 46+1 = 47. \n    # Call the function for x = 47. \n    # The recursive call for x is going to be for 47+1 = 48. \n    # Call the function for x = 48. \n    # The recursive call for x is going to be for 48+1 = 49. \n    # Call the function for x = 49. \n    # The recursive call for x is going to be for 49+1 = 50. \n    # Call the function for x = 50. \n    # The recursive call for x is going to be for 50+1 = 51. \n    # Call the function for x = 51. \n    # The recursive call for x is going to be for 51+1 = 52. \n    # Call the function for x = 52. \n    # The recursive call for x is going to be for 52+1 = 53. \n    # Call the function for x = 53. \n    # The recursive call for x is going to be for 53+1 = 54. \n    # Call the function for x = 54. \n    # The recursive call for x is going to be for 54+"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        return -1\n    if N == 0: \n        return 1\n    if N == 1: \n        return 2\n    ans = 1\n    while (True): \n        if (ans * ans) > N: \n            return (ans * ans - N) \n        else: \n            ans = ans + 1\n  \ndef isPerfectSquare(x): \n    s = int(math.sqrt(x)) \n    return s * s == x \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=N \n    y=0\n    if N<0:\n        return -1\n    while math.sqrt(x) - math.floor(math.sqrt(x))!= 0:\n        x=x+1\n    y=math.floor(math.sqrt(x)) +1\n    return y*y\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # First we check whether the given number is square or not. \n    if int(N**0.5) ** 2 == N: \n        return (int(N**0.5) + 1) ** 2 \n    else: \n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the next perfect square\n    nextSquare = math.floor(math.sqrt(N)) + 1\n    return nextSquare**2 \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N)) \n    if x*x < N: \n        return (x+1)*(x+1) \n    else: \n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N \n    s = int(math.sqrt(x)) \n    s2 = s + 1\n    while True:\n        if s2 >= 2*s: \n            return s2\n        s = s2 \n        s2 = s + 1\n        if s2 <= x:\n            continue\n        else:\n            return s2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = math.sqrt(N)\n    if square == math.ceil(square):\n        return math.ceil(square) * math.ceil(square)\n    else:\n        return math.ceil(square) * math.ceil(square) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 1\n        #print(\"N is a non-zero integer\")\n        if N == 1:\n            return 2\n        else:\n            #print(\"N is greater than 1\")\n            if (math.sqrt(N) - int(math.sqrt(N))) == 0:\n                #print(\"N is a perfect square\")\n                return int(math.sqrt(N)) + 1\n            else:\n                #print(\"N is not a perfect square\")\n                return int(math.sqrt(N)) + 2\n    else:\n        return 0\ndef sum_Squares(N):\n    '''\n    Write a Python program to compute the sum of the squares of the first n natural numbers.\n    '''\n    if N >= 1:\n        return ((N*(N+1))//2)**2\n    else:\n        return 0\ndef smallest_Divisor(N):\n    '''\n    Write a Python program to compute the smallest number divisible by all the numbers from 1 to N.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            lst = []\n            for i in range(1,N+1):\n                if N%i == 0:\n                    lst.append(i)\n                else:\n                    pass\n            lst.sort()\n            return lst[0]\n    else:\n        return 0\ndef sum_of_digits(n):\n    '''\n    Write a Python function to sum of digits of a number.\n    '''\n    if n >= 0:\n        if n == 0:\n            return 0\n        else:\n            return int(math.log10(n) + 1)\n    else:\n        return 0\ndef max_Factor(n):\n    '''\n    Write a Python program to find the maximum factor of a number.\n    '''\n    if n >= 0:\n        #print(\"N is a positive integer\")\n        if n == 0:\n            return 0\n        else:\n            factors = []\n            i = 1\n            while i < math.sqrt(n):\n                if n%i == 0:\n                    factors.append(i)\n                    factors.append(int(n/i))\n                i = i+1\n            if i == math.sqrt(n):\n                factors.append(i)\n            factors.sort()\n            return factors[-1]\n    else:\n        return 0\ndef sum_of_divisors(N):\n    '''\n    Write a Python program to find the sum of the divisors of a number.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            lst = []\n            for i in range(1,int(math.sqrt(N))+1):\n                if N%i == 0:\n                    lst.append(i)\n                    lst.append(int(N/i))\n                else:\n                    pass\n            lst.sort()\n            return sum(lst)\n    else:\n        return 0\ndef euler_Totient(N):\n    '''\n    Write a Python program to calculate Euler's Totient function of a number.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            lst = []\n            for i in range(1,N+1):\n                if N%i == 0:\n                    lst.append(i)\n            lst = list(set(lst))\n            return len(lst)\n    else:\n        return 0\ndef sum_of_proper_divisors(N):\n    '''\n    Write a Python program to calculate the sum of proper divisors of a number.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            lst = []\n            for i in range(1,int(math.sqrt(N))+1):\n                if N%i == 0:\n                    if i!= N/i:\n                        lst.append(i)\n                        lst.append(int(N/i))\n                    else:\n                        pass\n            lst.sort()\n            return sum(lst)\n    else:\n        return 0\ndef is_abundant(N):\n    '''\n    Write a Python program to check whether a number is an abundant number.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            if N > sum_of_proper_divisors(N):\n                return 1\n            else:\n                return 0\n    else:\n        return 0\ndef is_deficient(N):\n    '''\n    Write a Python program to check whether a number is a deficient number.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            if N < sum_of_proper_divisors(N):\n                return 1\n            else:\n                return 0\n    else:\n        return 0\ndef is_amicable(N):\n    '''\n    Write a Python program to check whether a number is amicable or not.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            if is_abundant(N) and is_deficient(N):\n                return 1\n            else:\n                return 0\n    else:\n        return 0\ndef sum_of_factors(N):\n    '''\n    Write a Python program to compute the sum of factors of a number.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            lst = []\n            for i in range(1,N+1):\n                if N%i == 0:\n                    lst.append(i)\n            lst.sort()\n            return sum(lst)\n    else:\n        return 0\ndef is_perfect_square(N):\n    '''\n    Write a Python program to check whether a number is a perfect square or not.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 1\n        else:\n            if int(math.sqrt(N))**2 == N:\n                return 1\n            else:\n                return 0\n    else:\n        return 0\ndef sum_of_divisors_excluding_self(N):\n    '''\n    Write a Python program to compute the sum of divisors of a number excluding self.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            lst = []\n            for i in range(1,int(math.sqrt(N))+1):\n                if N%i == 0:\n                    lst.append(i)\n                    lst.append(int(N/i))\n                else:\n                    pass\n            lst = list(set(lst))\n            lst.sort()\n            return sum(lst)\n    else:\n        return 0\ndef largest_prime_factor(N):\n    '''\n    Write a Python program to find the largest prime factor of a number.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        else:\n            lst = []\n            for i in range(1,N+1):\n                if N%i == 0:\n                    lst.append(i)\n                else:\n                    pass\n            lst.sort()\n            return lst[-1]\n    else:\n        return 0\ndef sum_of_primes(N):\n    '''\n    Write a Python program to compute the sum of all primes below a given integer.\n    '''\n    if N >= 0:\n        #print(\"N is a positive integer\")\n        if N == 0:\n            return 0\n        els"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_n = math.sqrt(N)\n    if sqrt_n.is_integer():\n        return (sqrt_n + 1)**2\n    else:\n        return -1\ndef merge_sort(arr): \n    '''\n    Write a Python function to sort an array of given integers using the merge sort algorithm. \n    Input: [8, 5, 2, 9, 5, 6, 3]\n    Output: [2, 3, 5, 5, 6, 8, 9]\n    '''\n    if len(arr) > 1: \n        mid = len(arr)//2 # Finding the mid of the array \n        L = arr[:mid] # Dividing the array elements  \n        R = arr[mid:] # into 2 halves \n        merge_sort(L) # Sorting the first half \n        merge_sort(R) # Sorting the second half \n        i = j = k = 0\n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i += 1\n            else: \n                arr[k] = R[j] \n                j += 1\n            k += 1\n        while i < len(L): \n            arr[k] = L[i] \n            i += 1\n            k += 1\n        while j < len(R): \n            arr[k] = R[j] \n            j += 1\n            k += 1\ndef first_greater_than_second(arr): \n    '''\n    Write a Python function to print the list of first greater elements to the right of each element of the list.\n    Input: [8, 7, 3, 9, 5, 2, 4]\n    Output: [None, 9, None, None, 5, None, None]\n    '''\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[j] > arr[i]: \n                print(arr[j]) \n            else: \n                print(\"None\") \ndef last_greater_than_second(arr): \n    '''\n    Write a Python function to print the list of last greater elements to the right of each element of the list.\n    Input: [8, 7, 3, 9, 5, 2, 4]\n    Output: [None, None, None, None, None, None, None]\n    '''\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[j] >= arr[i]: \n                print(arr[j]) \n            else: \n                print(\"None\") \ndef first_greater_then_second_sorted(arr): \n    '''\n    Write a Python function to print the list of first greater elements to the right of each element of the list.\n    Input: [3, 5, 9, 8, 7, 2, 4]\n    Output: [None, None, None, 9, None, 8, None]\n    '''\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[j] > arr[i]: \n                print(arr[j]) \n            else: \n                print(\"None\") \ndef merge_sort_reverse(arr): \n    '''\n    Write a Python function to sort an array of given integers in reverse using the merge sort algorithm.\n    Input: [8, 5, 2, 9, 5, 6, 3]\n    Output: [9, 6, 5, 5, 2, 3, 8]\n    '''\n    if len(arr) > 1: \n        mid = len(arr)//2 # Finding the mid of the array \n        L = arr[:mid] # Dividing the array elements  \n        R = arr[mid:] # into 2 halves \n        merge_sort_reverse(L) # Sorting the first half \n        merge_sort_reverse(R) # Sorting the second half \n        i = j = k = 0\n        while i < len(L) and j < len(R): \n            if L[i] > R[j]: \n                arr[k] = L[i] \n                i += 1\n            else: \n                arr[k] = R[j] \n                j += 1\n            k += 1\n        while i < len(L): \n            arr[k] = L[i] \n            i += 1\n            k += 1\n        while j < len(R): \n            arr[k] = R[j] \n            j += 1\n            k += 1\ndef is_sorted(arr): \n    '''\n    Write a Python function to check whether an array is sorted or not. \n    Input: [1, 2, 3, 4, 5]\n    Output: True\n    '''\n    for i in range(len(arr) - 1): \n        if (arr[i] > arr[i+1]): \n            return False\n    return True\ndef last_index_value_greater_than_second_last_index_value(arr): \n    '''\n    Write a Python function to print the list of last greater elements to the right of each element of the list.\n    Input: [2, 3, 4, 2, 1, 4, 5, 7, 3, 12, 19, 6]\n    Output: [None, None, None, None, None, 5, None, None, None, None, None, 19]\n    '''\n    arr_length = len(arr)\n    for i in range(arr_length): \n        for j in range(i+1, arr_length): \n            if arr[j] > arr[i]: \n                print(arr[j]) \n            else: \n                print(\"None\") \ndef max_min_greater_than_second(arr): \n    '''\n    Write a Python function to find the maximum and minimum values in an array greater than its second largest element. \n    Input: [12, 4, 4, 3, 2, 6, 7]\n    Output: (12, 7)\n    '''\n    arr.sort() \n    max = arr[len(arr)-1] \n    min = arr[1] \n    for i in range(2, len(arr)): \n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]: \n            max = arr[i] \n            break\n    for i in range(len(arr)-1, 1, -1): \n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]: \n            min = arr[i] \n            break\n    print(min, max) \ndef odd_even_numbers(arr): \n    '''\n    Write a Python function to print the list of odd and even numbers in an array of integers. \n    Input: [1, 2, 3, 4, 5]\n    Output: Odd: [1, 3, 5], Even: [2, 4]\n    '''\n    odd_list = [] \n    even_list = [] \n    for i in arr: \n        if i % 2 == 0: \n            even_list.append(i) \n        else: \n            odd_list.append(i) \n    print(\"Odd: \", odd_list) \n    print(\"Even: \", even_list) \ndef find_sum_of_square_and_cube(arr): \n    '''\n    Write a Python function to print the list of the sum of square of the numbers in an array of integers. \n    Input: [1, 2, 3, 4, 5]\n    Output: [1, 16, 36, 49, 25]\n    '''\n    for i in range(len(arr)): \n        arr[i] = arr[i]**2\n    print(arr) \ndef find_sum_of_square_and_cube_mixed_array(arr): \n    '''\n    Write a Python function to print the list of the sum of square of the numbers in an array of integers. \n    Input: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Output: [1, 16, 36, 49, 25, 49, 64, 81, 100"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    inc, dec = [], []\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            dec = []\n            inc.append(arr[i - 1])\n        elif arr[i] < arr[i - 1]:\n            inc = []\n            dec.append(arr[i - 1])\n        else:\n            inc.append(arr[i - 1])\n            dec.append(arr[i - 1])\n    return max(sum(inc), sum(dec))\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_subsequence = 0\n            max_sum_subsequence = 0\n            for k in range(i, j+1):\n                sum_subsequence += arr[k]\n                if sum_subsequence > max_sum_subsequence:\n                    max_sum_subsequence = sum_subsequence\n            if max_sum_subsequence > max_sum:\n                max_sum = max_sum_subsequence\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    print(max_sum_helper(arr))\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the largest element in the array\n    max_num = float('-inf')\n    for num in arr:\n        if num > max_num:\n            max_num = num\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return find_max_sum(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 2:\n        return sum(arr)\n    max_sum = arr[0]\n    min_sum = arr[0]\n    min_sum_index = 0\n    max_sum_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            min_sum = max_sum\n            max_sum = arr[i]\n            min_sum_index = max_sum_index\n            max_sum_index = i\n        elif arr[i] < arr[i - 1]:\n            if min_sum > arr[i]:\n                min_sum = arr[i]\n                min_sum_index = i\n    if min_sum < max_sum:\n        return max_sum_index - min_sum_index + 1\n    else:\n        return max_sum_index + min_sum_index\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_bitonic_subseq(arr)\ndef max_sum_bitonic_subseq(arr):\n    return max_sum_bitonic_subseq_recursive(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = arr[0]\n    curr_sum = arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialization of the global variable for the recursive call\n    global max_sum\n    # initialization of the global variable for the local call\n    global new_max_sum\n    # finding the maximum sum from the recursive call\n    new_max_sum = max_sum(arr, 0, len(arr) - 1)\n    # return the maximum sum of the bitonic subsequence\n    return new_max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # set a variable to keep track of the maximum sum and the index where the\n    # maximum sum occurs. This variable will be used to index the array\n    max_sum = arr[0]\n    max_sum_index = 0\n    # loop through the array\n    for i in range(len(arr)):\n        # set the variable to keep track of the current sum\n        current_sum = arr[i]\n        # the current sum can be the maximum sum if it is the first element or\n        # if it is greater than the maximum sum\n        if i == 0 or current_sum >= max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n        # check if the current sum is greater than the element to the right of\n        # it\n        elif current_sum > arr[i + 1]:\n            # if it is, set the variable to keep track of the current sum\n            current_sum = arr[i]\n            # set the current sum to the maximum sum\n            max_sum = current_sum\n            # set the maximum sum index to the index where the maximum sum\n            # occurs\n            max_sum_index = i\n    # print the maximum sum and the index of where it occurs\n    print(max_sum, max_sum_index)\n    return max_sum, max_sum_index\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) // 2\n    while x!= y:\n        x = (x + y) // 2\n        y = (x + y) // 2\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number # initial guess\n    for i in range(100):\n        y = (x + number/x)/2 # calculate the next estimate\n        if y == x: # check to see if we've converged\n            return y\n        x = y # otherwise update the x and loop again\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) / 2\n    while abs(y * y - x) > 0.00001:\n        y = (y + x / y) / 2\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    epsilon = 0.01\n    guess = x / 2.0\n    difference = guess * guess - x\n    while abs(difference) > epsilon:\n        guess = guess - (guess * guess - x) / (2 * guess)\n        difference = guess * guess - x\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    guess = x/2\n    while True:\n        y = (guess + x/guess)/2\n        if y == guess:\n            return guess\n        guess = y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while guess * guess <= number:\n        guess = guess + 1\n    while guess > 0:\n        new_guess = (guess + number / guess) / 2.0\n        if new_guess == guess:\n            return guess\n        guess = new_guess\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # special cases\n    if number == 0:\n        return 0\n    elif number < 0:\n        raise ValueError('Negative value: {}'.format(number))\n    else:\n        # to store the current guess\n        guess = number/2\n        # to store the last guess (to compare with current guess)\n        last_guess = 0\n        # to store the index of the last guess (to see when to start new loop)\n        last_guess_index = 0\n        # loop until the guess is close enough to the square root of the number\n        while abs(guess**2 - number) > 0.000000001:\n            # store the previous guess\n            last_guess = guess\n            # store the previous guess index\n            last_guess_index = guess_index\n            # calculate the next guess\n            guess = (guess + number/guess)/2\n            # increment the guess index\n            guess_index += 1\n        return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    x = number\n    y = 1\n    while x-y!= 0:\n        x = (x + y)/2\n        y = number / x\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001\n    guess = number / 2.0\n    difference = guess**2 - number\n    iterations = 0\n    while abs(difference) > epsilon:\n        newguess = guess - difference/ (2*guess)\n        difference = guess**2 - number\n        guess = newguess\n        iterations += 1\n    return guess\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    m = [[0]*n for i in range(n)]\n    for j in range(n):\n        for i in range(j, -1, -1):\n            if (str[i] == str[j] and i+1<=j-1):\n                m[i][j] = m[i+1][j-1] + 2\n            else:\n                m[i][j] = max(m[i+1][j], m[i][j-1])\n    return m[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps = [[0 for x in range(n)] for y in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 2\n    for j in range(n): \n        for i in range(j-1): \n            if str[i] == str[j] and dp[i+1][j-1] > 0: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) \n    print(dp)\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    maxLength = 1\n    maxLengthString = str[0]\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if i == j:\n                dp[i][j] = 1\n            elif j == i+1:\n                dp[i][j] = 1 if str[i-1] == str[j-1] else 0\n            else:\n                if str[i-1] == str[j-1] and dp[i+1][j-1] == 1:\n                    dp[i][j] = 1 + dp[i+1][j-1]\n                    if dp[i][j] > maxLength:\n                        maxLength = dp[i][j]\n                        maxLengthString = str[i-maxLength:i]\n                else:\n                    dp[i][j] = 0\n    print(\"Longest Palindromic Subsequence : \" + maxLengthString)\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)]for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i]==str[j]:\n                dp[i][j] = 2+dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        l[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                l[i][j] = 2\n            elif str[i] == str[j]: \n                l[i][j] = l[i+1][j-1] + 2\n            else: \n                l[i][j] = max(l[i][j-1], l[i+1][j]) \n    return l[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return helper(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n    \n    return L[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return None\n    \ndef knapsack(profits, weights, capacity):\n    '''\n    Given n items with specific profit value and weight, put these items in a knapsack with a given weight capacity. \n    The problem is to maximize the profit in the knapsack. The order of putting items in the knapsack is not important. \n    Input Format:\n    The first line contains the number of items n. \n    The second line contains the space separated profit value of the n items. \n    The third line contains the space separated weight of the n items.\n    The fourth line contains the capacity W of the knapsack.\n    Output Format:\n    Print the maximum profit obtainable.\n    Constraints:\n    1 <= n <= 1000\n    1 <= capacity <= 2000000000\n    1 <= profit, weight <= 1000000000\n    Example:\n    Input:\n    4\n    10 20 30 40\n    15 25 20 35\n    10\n    50\n    Output:\n    75\n    Explanation:\n    We put the items in the knapsack with capacity 25.\n    We get maximum profit of 30 (10 + 20 + 25) and the remaining weight is 15.\n    We put the items in the knapsack with capacity 25 and we get maximum profit of 30 and the remaining weight is 15.\n    '''\n    return None\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return round((1 + math.sqrt(8 * n + 1)) / 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return \"Please provide a positive integer.\"\n    else:\n        sum = 0\n        for i in range(1, n):\n            sum += 1/i\n        return round(sum, 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 0:\n        return 0\n    return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1 / n + sum_digits(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    n = n - 1\n    total = 0\n    for i in range(1, n + 1):\n        total += 1/i\n        \n    return total\n        \ndef run():\n    '''\n    Run the program to test your function.\n    '''\n    n = int(input('Enter a positive integer: '))\n    print(harmonic_sum(n))\n    \nif __name__ == '__main__':\n    run("
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def series(n):\n        if n==0:\n            return 0\n        else:\n            return 1/n+series(n-1)\n    return series(n)\n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer n and returns the n-th Fibonacci number.\n    '''\n    def nth_fib(n):\n        if n==0 or n==1:\n            return n\n        else:\n            return nth_fib(n-1)+nth_fib(n-2)\n    return nth_fib(n)\n    \ndef matrix(size):\n    '''\n    Write a function that takes in an integer size and returns a list of size x size with random integers between 0 and 9.\n    '''\n    def random_matrix(size):\n        import random\n        matrix = []\n        for i in range(size):\n            row = []\n            for j in range(size):\n                row.append(random.randint(0,9))\n            matrix.append(row)\n        return matrix\n    return random_matrix(size)\n    \ndef circle_area(radius):\n    '''\n    Write a function that takes in an integer radius and returns the area of a circle with radius radius.\n    '''\n    import math\n    return math.pi*(radius**2)\n    \ndef hash_map():\n    '''\n    Write a function that takes in an input of a list of integers and returns a hash table with the integers as keys and the index of the key in the original list as the value.\n    '''\n    def hash_index(l):\n        my_dict = {}\n        for i in range(len(l)):\n            my_dict[l[i]] = i\n        return my_dict\n    return hash_index([1,2,3,4,5])\n    \ndef valid_IP():\n    '''\n    Write a function that takes in an input of a list of strings and returns a list of valid IPs.\n    '''\n    def valid_IP(ip_list):\n        import re\n        valid_ips = []\n        for ip in ip_list:\n            if re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$',ip):\n                valid_ips.append(ip)\n        return valid_ips\n    return valid_IP(['1.1.1.1', '0.0.0.0', '127.0.0.1', '256.256.256.256'])\n    \ndef valid_email():\n    '''\n    Write a function that takes in an input of a list of strings and returns a list of valid email addresses.\n    '''\n    def valid_email(email_list):\n        import re\n        valid_emails = []\n        for email in email_list:\n            if re.match(r'^[a-zA-Z0-9_\\-\\.]+@[a-zA-Z0-9_\\-\\.]+\\.[a-zA-Z]{2,4}$',email):\n                valid_emails.append(email)\n        return valid_emails\n    return valid_email(['myemail@gmail.com', '@gmail.com','myemail.com', 'email','myemail.com@gmail'])\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/x for x in range(1, n+1)])\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 0:\n        return \"Error, n < 0\"\n    else:\n        harmonic_sum = 0\n        for x in range(1, n+1):\n            harmonic_sum += 1/x\n        return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create set of all elements in first array\n    array_nums1_set = set(array_nums1)\n    # create set of all elements in second array\n    array_nums2_set = set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    output = []\n    for i in array_nums1:\n        if i in array_nums2:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    # create a list of all elements in array1\n    list1 = []\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums1[i])):\n            list1.append(array_nums1[i][j])\n    \n    # create a list of all elements in array2\n    list2 = []\n    for i in range(len(array_nums2)):\n        for j in range(len(array_nums2[i])):\n            list2.append(array_nums2[i][j])\n    \n    # create a set of all elements in list1\n    set1 = set(list1)\n    \n    # create a set of all elements in list2\n    set2 = set(list2)\n    \n    # find intersection of set1 and set2\n    intersection = set1.intersection(set2)\n    \n    # return intersection as a list\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return_list = []\n    for num in array_nums1:\n        if num in array_nums2:\n            return_list.append(num)\n    return return_list\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # use hash table and enumerate 2 arrays\n    if len(array_nums1) > len(array_nums2):\n        return intersection_array(array_nums2, array_nums1)\n    lookup = {}\n    for num in array_nums1:\n        lookup[num] = lookup.get(num,0) + 1\n    result = []\n    for num in array_nums2:\n        if lookup.get(num,0) > 0:\n            result.append(num)\n            lookup[num] = lookup.get(num) - 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1 & set2)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #create the array to store the output\n    result = []\n    #sort both arrays\n    array_nums1.sort()\n    array_nums2.sort()\n    #loop through nums1\n    for num1 in array_nums1:\n        #loop through nums2\n        for num2 in array_nums2:\n            #if nums1 and nums2 are the same, then append the number to the result array\n            if num1 == num2:\n                result.append(num1)\n    #return the result array\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n    x = 0\n    y = 0\n    while x < len(array_nums1) and y < len(array_nums2):\n        if array_nums1[x] == array_nums2[y]:\n            return array_nums1[x]\n        elif array_nums1[x] < array_nums2[y]:\n            x += 1\n        elif array_nums1[x] > array_nums2[y]:\n            y += 1\n    return None\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return sorted(list(set(array_nums1).intersection(array_nums2)))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if(x == elem):\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for x in tup: \n        if x == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for i in tup:\n        if i == x:\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if x not in tup:\n        return 0\n    else:\n        x_count = 0\n        for i in tup:\n            if i == x:\n                x_count += 1\n        return x_count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n    \ndef index_of_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element if it exists, or -1 if it does not.\n    '''\n    for i in range(0,len(list)):\n        if list[i] == element:\n            return i\n    return -1\n    \ndef replace_element(list,old_element,new_element):\n    '''\n    Write a function that takes in a list and two elements, and replaces the first element with the second element if it exists.\n    '''\n    for i in range(0,len(list)):\n        if list[i] == old_element:\n            list[i] = new_element\n            return list\n    return list\n    \ndef combine_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns one list that contains all the elements of the two lists in the same order, without duplicates.\n    '''\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes the element from the list if it exists, and returns the resulting list.\n    '''\n    for i in list:\n        if i == element:\n            list.remove(element)\n            return list\n    return list\n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list and sorts the list in non-descending order, and returns the sorted list.\n    '''\n    list.sort()\n    return list\n    \ndef sum_of_elements(list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the elements in the list.\n    '''\n    total = 0\n    for i in range(0,len(list)):\n        total += list[i]\n    return total\n    \ndef average_of_elements(list):\n    '''\n    Write a function that takes in a list of numbers and returns the average of all the elements in the list.\n    '''\n    total = 0\n    for i in range(0,len(list)):\n        total += list[i]\n    return total/len(list)\n    \ndef even_elements_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that contains only the even elements from the original list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if list[i]%2 == 0:\n            new_list.append(list[i])\n    return new_list\n    \ndef odd_elements_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that contains only the odd elements from the original list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if list[i]%2 == 1:\n            new_list.append(list[i])\n    return new_list\n    \ndef multiply_elements_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that contains the product of all the elements from the original list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        new_list.append(list[i]*list[i])\n    return new_list\n    \ndef greater_than_list(list,value):\n    '''\n    Write a function that takes in a list of numbers and a number and returns a new list that contains only the elements from the original list that are greater than the number.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if list[i] > value:\n            new_list.append(list[i])\n    return new_list\n    \ndef elements_greater_than_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that contains the sum of all the elements from the original list that are greater than its 2nd element.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if list[i] > list[1]:\n            new_list.append(list[i])\n    return sum(new_list)\n    \ndef length_of_list(list):\n    '''\n    Write a function that takes in a list and returns the length of the list.\n    '''\n    return len(list)\n    \ndef nested_lists(list):\n    '''\n    Write a function that takes in a list of lists and returns a new list that contains the sums of all the elements from the original list of lists.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        total = 0\n        for j in range(0,len(list[i])):\n            total += list[i][j]\n        new_list.append(total)\n    return new_list\n    \ndef collect_odd_values_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that contains all the odd elements from the original list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if list[i] % 2 == 1:\n            new_list.append(list[i])\n    return new_list\n    \ndef collect_even_values_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that contains all the even elements from the original list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if list[i] % 2 == 0:\n            new_list.append(list[i])\n    return new_list\n    \ndef collect_string_values_list(list):\n    '''\n    Write a function that takes in a list of strings and returns a new list that contains all the strings from the original list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        new_list.append(list[i])\n    return new_list\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that contains the elements of the original list in reversed order.\n    '''\n    return list[::-1]\n    \ndef reverse_elements_list(list):\n    '''\n    Write a function that takes in a list of elements and returns a new list that contains all the elements of the original list in reversed order, excluding duplicates.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        for j in range(0,len(list)):\n            if list[i] == list[j]:\n                continue\n            else:\n                new_list.append(list[i])\n    return new_list\n    \ndef concatenate_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the elements of the first list followed by all the elements of the second list.\n    '''\n    return list1 + list2\n    \ndef remove_all_occurances(list,element):\n    '''\n    Write a function that takes in a list and an element and removes all occurrences of the element from the list, and returns the resulting list.\n    '''\n    while element in list:\n        list.remove(element)\n    return list\n    \ndef find_max_element(list):\n    '''\n    Write a function that takes in a list and returns the maximum element from the list.\n    '''\n    return max(list)\n    \ndef find_min_element(list):\n    '''\n    Write a function that takes in a list and returns the minimum element from the list.\n    '''\n    return min(list)\n    \ndef find_nth_element(list,nth_element):\n    '''\n    Write a function that takes in a list and an nth element and returns the nth elemen"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    list.insert(2,element)\n    list.append(element)\n    return list\nprint(insert_element(['a','b','c','d','e'],0))\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    new_list = []\n    \n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n    \ndef insert_element_without_insert(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    Do not use the insert function!\n    '''\n    \n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[0])\n        new_list.append(element)\n        new_list.append(list[i])\n        list.pop(0)\n    return new_list\n        \ndef insert_element_with_insert(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    Do not use the insert function!\n    '''\n    \n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[0])\n        new_list.append(element)\n        list.insert(0,list[-1])\n        list.pop()\n    return new_list\n        \ndef insert_element_with_extend(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    Do not use the insert function!\n    '''\n    \n    new_list = []\n    for i in range(len(list)):\n        new_list.extend([element,list[0]])\n        list.pop(0)\n    return new_list\n        \ndef insert_element_with_insert_and_pop(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    Do not use the insert function!\n    '''\n    \n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[0])\n        list.insert(0,list[-1])\n        list.pop(-1)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    i = 0\n    while i < len(list):\n        new_list.append(element)\n        new_list.append(list[i])\n        i += 1\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list[0:0] = [element]\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\ndef split_element(list,element):\n    '''\n    Write a function that takes in a list and an element and splits the list into two lists, based on the element.\n    '''\n    list1,list2 = [],[]\n    for x in list:\n        if x==element:\n            list1.append(x)\n        else:\n            list2.append(x)\n    return list1,list2\ndef combine_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list with the elements of the first list followed by the elements of the second list.\n    '''\n    list1.extend(list2)\n    return list1\ndef remove_vowels(list):\n    '''\n    Write a function that takes in a list of words and returns a list with the same words but with all vowels removed.\n    '''\n    new_list = []\n    for word in list:\n        new_word = []\n        for letter in word:\n            if letter not in \"aeiouAEIOU\":\n                new_word.append(letter)\n        new_list.append(\"\".join(new_word))\n    return new_list\ndef alphabet_position(letter):\n    '''\n    Write a function that takes in a letter and returns the position of that letter in the alphabet.\n    '''\n    return ord(letter.lower())-96\ndef reverse_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns a list with the elements reversed.\n    '''\n    list.reverse()\n    return list\ndef sum_pairs(list,sum):\n    '''\n    Write a function that takes in a list of numbers and returns a list of tuples with the pairs that sum to the specified number.\n    '''\n    list_pairs = []\n    for x in list:\n        for y in list:\n            if x!=y:\n                if x+y==sum:\n                    list_pairs.append((x,y))\n    return list_pairs\ndef mult_two_add_three(list):\n    '''\n    Write a function that takes in a list of numbers and returns a list with all of the values multiplied by two, and all of the values added by three.\n    '''\n    new_list = []\n    for x in list:\n        new_list.append(x*2)\n        new_list.append(x+3)\n    return new_list\ndef capitalize(list):\n    '''\n    Write a function that takes in a list of strings and returns a list with the first letter of every string capitalized.\n    '''\n    list = [x.capitalize() for x in list]\n    return list\ndef odd_string(list):\n    '''\n    Write a function that takes in a list of strings and returns a list with only the strings that have an odd length.\n    '''\n    new_list = []\n    for x in list:\n        if len(x)%2!=0:\n            new_list.append(x)\n    return new_list\ndef multiply_even_numbers(list):\n    '''\n    Write a function that takes in a list of integers and returns a list with all of the even integers multiplied by two.\n    '''\n    new_list = []\n    for x in list:\n        if x%2==0:\n            new_list.append(x*2)\n    return new_list\ndef append_num(list,num):\n    '''\n    Write a function that takes in a list of numbers and returns a list with all of the numbers appended to the end of the list.\n    '''\n    return list.append(num)\ndef sum_num(list,num):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all of the numbers in the list.\n    '''\n    return sum(list)\ndef circular_shift(list,shift):\n    '''\n    Write a function that takes in a list of numbers and returns a list with all of the numbers circularly shifted left or right by an amount that's provided as an argument.\n    '''\n    list1 = list[:]\n    list1.insert(0,list1.pop(-1))\n    return list1\ndef is_sublist(list1,list2):\n    '''\n    Write a function that takes in two lists and returns True if the first list is a sublist of the second list, and False otherwise.\n    '''\n    if set(list1)<=set(list2):\n        return True\n    else:\n        return False\ndef delete_starting_evens(list):\n    '''\n    Write a function that takes in a list of numbers and returns a list with all of the even numbers in the list removed.\n    '''\n    new_list = []\n    for x in list:\n        if x%2!=0:\n            new_list.append(x)\n    return new_list\ndef odd_indices(list):\n    '''\n    Write a function that takes in a list of numbers and returns a list with the elements at odd indices.\n    '''\n    new_list = []\n    for x in range(1,len(list),2):\n        new_list.append(list[x])\n    return new_list\ndef has_33(list):\n    '''\n    Write a function that takes in a list of ints and returns True if the list contains a 3 next to a 3 somewhere.\n    '''\n    for x in range(len(list)-1):\n        if list[x]==3 and list[x+1]==3:\n            return True\n    return False\ndef paper_doll(text):\n    '''\n    Write a function that takes in a string and returns a string with each character in the original string duplicated once.\n    '''\n    new_list = []\n    for x in text:\n        new_list.append(x*2)\n    return \"\".join(new_list)\ndef blackjack(a,b,c):\n    '''\n    Write a function that takes in three integers and returns True if the sum of the integers is less than or equal to 21, and False otherwise.\n    '''\n    if sum([a,b,c])<=21:\n        return True\n    else:\n        return False\ndef summer_69(list):\n    '''\n    Write a function that takes in a list of numbers and returns True if the sum of all of the numbers in the list is less than or equal to 69, and False otherwise.\n    '''\n    new_list = []\n    sum1 = 0\n    for x in list:\n        if x<=69:\n            sum1 = sum1+x\n        elif x>69:\n            new_list.append(x)\n    return sum1,new_list\ndef spy_game(nums):\n    '''\n    Write a function that takes in a list of integers and returns True if it contains 007 in order.\n    '''\n    for x in range(len(nums)-1):\n        if nums[x]==0 and nums[x+1]==7:\n            return True\n    return False\ndef count_primes(num):\n    '''\n    Write a function that takes in a number and returns True if it is a prime number, and False otherwise.\n    '''\n    if num<2:\n        return False\n    for x in range(2,num):\n        if num%x==0:\n            return False\n    return True\ndef print_big(letter):\n    '''\n    Write a function that takes in a single letter, and returns a 5x5 representation of that letter, done as follows:\n    If the letter is a, then the first row will be [  \" \", \"a \", \"aa \", \"aaa \", \"aaaa\"].\n    The second row will be [  \"b \", \"bb \", \"bba \", \"bbbb \", \"bbbbb\"].\n    The third row will be [  \"c \", \"cc \", \"ccc \", \"cccc \", \"ccccc\"].\n    The fourth row will be [  \"d \", \"dd \", \"ddd \", \"dddd \", \"ddddd\"].\n    The fifth row will be [  \"e \", \"ee \", \"eee \", \"eeee \", \"eeeee\"].\n    '''\n    list1 = [[\" \" for x in range(5)] for x in range(5)]\n    if letter==\"a\""
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #Hint: You can find the length of a list by running len(my_list)\n    #Solution\n    #Write your function here\n    i=0\n    while i < len(list):\n        list.insert(i, element)\n        i+=2\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar(complex_num):\n        '''\n        Write a python function to convert complex numbers to polar coordinates.\n        '''\n        if isinstance(complex_num, complex):\n            z = complex_num\n            if z.imag == 0:\n                z = z.real\n            elif z.real == 0:\n                z = z.imag\n        else:\n            z = complex(numbers)\n        r = abs(z)\n        phi = cmath.phase(z)\n        return r, phi\n    return polar\n    \ndef create_dict(word_list):\n    '''\n    Write a python function to create a dictionary with the words in the word list as the keys and the number of times they occur as the value.\n    '''\n    from collections import Counter\n    def create_dict(word_list):\n        '''\n        Write a python function to create a dictionary with the words in the word list as the keys and the number of times they occur as the value.\n        '''\n        new_dict = Counter(word_list)\n        return new_dict\n    return create_dict\n    \ndef get_count(dictionary, search):\n    '''\n    Write a python function to get the number of occurrences of a word in a dictionary.\n    '''\n    def get_count(dictionary, search):\n        '''\n        Write a python function to get the number of occurrences of a word in a dictionary.\n        '''\n        try:\n            value = dictionary[search]\n        except KeyError:\n            value = 0\n        return value\n    return get_count\n    \ndef set_count(dictionary, search, value):\n    '''\n    Write a python function to set the number of occurrences of a word in a dictionary.\n    '''\n    def set_count(dictionary, search, value):\n        '''\n        Write a python function to set the number of occurrences of a word in a dictionary.\n        '''\n        try:\n            dictionary[search] = value\n        except KeyError:\n            dictionary[search] = 1\n        return dictionary\n    return set_count\n    \ndef dict_is_empty(dictionary):\n    '''\n    Write a python function to test if a dictionary is empty.\n    '''\n    def dict_is_empty(dictionary):\n        '''\n        Write a python function to test if a dictionary is empty.\n        '''\n        if len(dictionary) == 0:\n            return True\n        return False\n    return dict_is_empty\n    \ndef dict_is_not_empty(dictionary):\n    '''\n    Write a python function to test if a dictionary is not empty.\n    '''\n    def dict_is_not_empty(dictionary):\n        '''\n        Write a python function to test if a dictionary is not empty.\n        '''\n        if len(dictionary)!= 0:\n            return True\n        return False\n    return dict_is_not_empty\n    \ndef has_key(dictionary, search):\n    '''\n    Write a python function to test if a dictionary has a certain key.\n    '''\n    def has_key(dictionary, search):\n        '''\n        Write a python function to test if a dictionary has a certain key.\n        '''\n        try:\n            value = dictionary[search]\n        except KeyError:\n            value = False\n        return value\n    return has_key\n    \ndef set_value(dictionary, search, value):\n    '''\n    Write a python function to set the value of a key in a dictionary.\n    '''\n    def set_value(dictionary, search, value):\n        '''\n        Write a python function to set the value of a key in a dictionary.\n        '''\n        dictionary[search] = value\n        return dictionary\n    return set_value\n    \ndef get_value(dictionary, search):\n    '''\n    Write a python function to get the value of a key in a dictionary.\n    '''\n    def get_value(dictionary, search):\n        '''\n        Write a python function to get the value of a key in a dictionary.\n        '''\n        try:\n            value = dictionary[search]\n        except KeyError:\n            value = 0\n        return value\n    return get_value\n    \ndef copy_dict(dictionary):\n    '''\n    Write a python function to copy a dictionary.\n    '''\n    def copy_dict(dictionary):\n        '''\n        Write a python function to copy a dictionary.\n        '''\n        new_dict = dictionary.copy()\n        return new_dict\n    return copy_dict\n    \ndef concatenate_dicts(dictionary1, dictionary2):\n    '''\n    Write a python function to concatenate two dictionaries.\n    '''\n    def concatenate_dicts(dictionary1, dictionary2):\n        '''\n        Write a python function to concatenate two dictionaries.\n        '''\n        new_dict = dictionary1.copy()\n        new_dict.update(dictionary2)\n        return new_dict\n    return concatenate_dicts\n    \ndef get_value_or_default(dictionary, search, default):\n    '''\n    Write a python function to get the value of a key in a dictionary or return a default value if the key does not exist.\n    '''\n    def get_value_or_default(dictionary, search, default):\n        '''\n        Write a python function to get the value of a key in a dictionary or return a default value if the key does not exist.\n        '''\n        try:\n            value = dictionary[search]\n        except KeyError:\n            value = default\n        return value\n    return get_value_or_default\n    \ndef append_to_list(dictionary, search, value):\n    '''\n    Write a python function to append a value to a list in a dictionary.\n    '''\n    def append_to_list(dictionary, search, value):\n        '''\n        Write a python function to append a value to a list in a dictionary.\n        '''\n        try:\n            dictionary[search].append(value)\n        except KeyError:\n            dictionary[search] = [value]\n        return dictionary\n    return append_to_list\n    \ndef set_default(dictionary, search, default):\n    '''\n    Write a python function to set a default value for a key in a dictionary.\n    '''\n    def set_default(dictionary, search, default):\n        '''\n        Write a python function to set a default value for a key in a dictionary.\n        '''\n        dictionary[search] = default\n        return dictionary\n    return set_default\n    \ndef remove_from_list(dictionary, search, value):\n    '''\n    Write a python function to remove a value from a list in a dictionary.\n    '''\n    def remove_from_list(dictionary, search, value):\n        '''\n        Write a python function to remove a value from a list in a dictionary.\n        '''\n        try:\n            dictionary[search].remove(value)\n        except ValueError:\n            pass\n        return dictionary\n    return remove_from_list\n    \ndef add_to_set(dictionary, search, value):\n    '''\n    Write a python function to add a value to a set in a dictionary.\n    '''\n    def add_to_set(dictionary, search, value):\n        '''\n        Write a python function to add a value to a set in a dictionary.\n        '''\n        try:\n            dictionary[search].add(value)\n        except KeyError:\n            dictionary[search] = set([value])\n        return dictionary\n    return add_to_set\n    \ndef remove_from_set(dictionary, search, value):\n    '''\n    Write a python function to remove a value from a set in a dictionary.\n    '''\n    def remove_from_set(dictionary, search, value):\n        '''\n        Write a python function to remove a value from a set in a dictionary.\n        '''\n        try:\n            dictionary[search].remove(value)\n        except KeyError:\n            pass\n        return dictionary\n    return remove_from_set\n    \ndef create_set(dictionary, search, value):\n    '''\n    Write a python function to create a set in a dictionary.\n    '''\n    def create_set(dictionary, search, value):\n        '''\n        Write a python function to create a set in a dictionary.\n        '''\n    "
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert the complex number into a number with absolute value.\n    # Store the absolute value into a tuple\n    # Return the tuple\n    return cmath.polar(complex(numbers))\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def get_polar_coord(numbers):\n        '''\n        Write a python function to convert complex numbers to polar coordinates.\n        '''\n        def is_complex(z):\n            if isinstance(z, complex):\n                return True\n            else:\n                return False\n        if is_complex(numbers):\n            return complex_to_polar(numbers)\n        else:\n            return 'This is not a complex number'\n    def complex_to_polar(numbers):\n        '''\n        Write a python function to convert complex numbers to polar coordinates.\n        '''\n        if isinstance(numbers, complex):\n            modulo = abs(numbers)\n            argument = cmath.phase(numbers)\n            return modulo, argument\n        else:\n            return \"This is not a complex number\"\n    return get_polar_coord(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def to_polar(complex_numbers):\n        '''\n        Write a python function to convert complex numbers to polar coordinates.\n        '''\n        '''\n        :param complex_numbers:\n        :return: polar coordinates\n        '''\n        polar_coordinates = [cmath.polar(complex_numbers)]\n        return polar_coordinates\n    return to_polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c = cmath.polar(numbers)\n    return c\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(type(numbers) == complex):\n        result = cmath.polar(numbers)\n        return [result[0], result[1]]\n    elif(type(numbers) == list):\n        results = []\n        for number in numbers:\n            results.append(convert(number))\n        return results\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Input: complex number = (5+2j)\n    Output: magnitude = 3.1622776601683795\n             phase = -1.246653698453888\n    '''\n    def magnitude(complex_number):\n        return(abs(complex_number))\n    def phase(complex_number):\n        return(cmath.phase(complex_number))\n    return(magnitude(complex_number),phase(complex_number))\n    \nif __name__ == \"__main__\":\n    print(convert(complex(5, 2)))\n    "
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for i in range(len(numbers)):\n        r = cmath.polar(numbers[i])\n        result.append(r)\n    return result\nnumbers = [\n    complex(1, 2),\n    complex(2, -3),\n    complex(-3, 2)\n]\nprint(convert(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = abs(numbers)\n    theta = cmath.phase(numbers)\n    print('The magnitude of {} is {} and the phase is {}'.format(numbers,r,theta))\n    \nconvert(complex(3,4))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def convert_complex_to_polar(complex_number):\n        '''\n        Write a function to convert complex numbers to polar coordinates.\n        '''\n        \n        r = abs(complex_number)\n        t = cmath.phase(complex_number)\n        return (r,t)\n    \n    def convert_polar_to_complex(radius,angle):\n        '''\n        Write a function to convert polar coordinates to complex numbers.\n        '''\n        z = radius*(cmath.cos(angle) + complex(0,1)*cmath.sin(angle))\n        return z\n    \n    '''\n    Write a function to convert complex numbers to cartesian coordinates.\n    '''\n    def convert_complex_to_cartesian(complex_number):\n        '''\n        Write a function to convert complex numbers to cartesian coordinates.\n        '''\n        x = complex_number.real\n        y = complex_number.imag\n        return (x,y)\n    \n    def convert_cartesian_to_complex(x,y):\n        '''\n        Write a function to convert cartesian coordinates to complex numbers.\n        '''\n        z = complex(x,y)\n        return z\n    \n    complex_number = complex(numbers[0],numbers[1])\n    result = convert_complex_to_polar(complex_number)\n    return result[0] + \" \" + str(result[1])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    c=0\n    for i in list1:\n        if(i.isnumeric()):\n            c=c+1\n    return c\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    #return len([i for i in list1 if isinstance(i, int)])\n    \n    #The code below is the refactored code\n    i = 0\n    for x in list1:\n        if isinstance(x, int):\n            i+=1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if isinstance(list1[i],int):\n            count=count+1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for elem in list1:\n        if type(elem) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x,int):\n            count = count+1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i,int)])\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combo = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            combo.append(list(combinations_with_replacement(l[i:j], n)))\n    return combo\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(0, len(l)):\n        if n >= 1:\n            combos += combinations_with_replacement(l, n)\n            n -= 1\n        elif n == 0:\n            combos.append(tuple(l))\n            n -= 1\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == len(l) + 1:\n        return [(l)]\n    elif n == 2:\n        return l\n    elif n == len(l):\n        return [(l[0], l[1])]\n    else:\n        combinations = []\n        for i in range(len(l) - n + 1):\n            list = []\n            for j in range(n):\n                list.append(l[i + j])\n            combinations.append(tuple(list))\n        return list\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n) if comb[0]!= comb[1]]\n    \ndef sum_tuples(tuple1, tuple2):\n    '''\n    Write a function that takes two tuples, each with length two, and returns a tuple with length four, where the first two elements of the new tuple are the first two elements of each input tuple, and the last two elements are the second two elements of each tuple.\n    '''\n    return (tuple1[0]+tuple2[0], tuple1[1]+tuple2[1], tuple1[0]+tuple2[1], tuple1[1]+tuple2[0])\n    \ndef get_list_sum(list1, list2):\n    '''\n    Write a function that takes two lists, and returns a list with the sum of the first element of each tuple in the two lists and the last element of each tuple in the two lists.\n    '''\n    return [tuple(sum(comb) for comb in zip(i, j)) for i, j in zip(list1, list2)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if not l:\n        return []\n    if n == 1:\n        return [(el,) for el in l]\n    return [(el,) + comb for el in l for comb in combinations_colors(l, n-1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_list = list(combinations_with_replacement(l, n))\n    return color_list\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # for i in range(len(l)):\n    #     for j in range(i+1,len(l)):\n    #         if len(l[i]) == n:\n    #             l.append(tuple(l[i],l[j]))\n    # return l\n    return [tuple(i) for i in combinations_with_replacement(l, n)]\nprint(combinations_colors(['blue','red', 'yellow'], 2))\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    num = [True] * n\n    num[0] = False\n    num[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if num[i] == True:\n            num[i*i:n:i] = [False]*len(num[i*i:n:i])\n    return sum(num)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        if num == 2:\n            return True\n        if num%2 == 0:\n            return False\n        for i in range(3,num,2):\n            if num%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # array of numbers from 2 to n \n    # 2 is a prime number so we exclude it \n    prime_nums = [2]\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # if n==0 or n==1:\n    #     return 0\n    # if n==2 or n==3:\n    #     return 1\n    # if n>3:\n    #     for i in range(2,n):\n    #         if n%i==0:\n    #             return i\n    #     return n\n    \n    def _is_prime_nums(num):\n        for i in range(2,int(num**0.5)+1):\n            if num%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def count_Primes_core(n):\n        if n < 2:\n            return 0\n        prime_nums = [True] * n\n        prime_nums[0] = prime_nums[1] = False\n        for i in range(2, n):\n            if prime_nums[i]:\n                for j in range(2 * i, n, i):\n                    prime_nums[j] = False\n        return sum(prime_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def count_primes(num):\n        if num==0 or num==1:\n            return 0\n        prime=2\n        count=0\n        while prime<=num:\n            if num%prime==0:\n                count+=1\n                if count>1:\n                    break\n            prime+=1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # if n < 2:\n    #     return 0\n    # else:\n    #     return count_Primes_nums(n-1) + 1\n    #     # if n % 2 == 0:\n    #     #     return count_Primes_nums(n-2) + 1\n    #     # else:\n    #     #     return count_Primes_nums(n-1) + 1\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #set initial variables\n    number_of_primes = 0\n    #range(n) is the list of numbers 0-n-1\n    for num in range(n):\n        #set a flag to true\n        isPrime = True\n        #check if num is even\n        if num == 2:\n            isPrime = True\n        elif num > 2 and num % 2 == 0:\n            isPrime = False\n        else:\n            for i in range(3, int(math.sqrt(num)) + 1, 2):\n                if num % i == 0:\n                    isPrime = False\n                    break\n        #if num is prime, increment number_of_primes\n        if isPrime == True:\n            number_of_primes += 1\n    return number_of_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    count=0\n    for i in range(2,n):\n        flag=0\n        for j in range(2,i):\n            if(i%j==0):\n                flag=1\n        if(flag==0):\n            count=count+1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 0\n    count=1\n    prime_nums=[]\n    while count<=n:\n        if is_Prime(count):\n            prime_nums.append(count)\n        count+=1\n    print(prime_nums)\n    return len(prime_nums)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swap = b\n    b = a\n    a = swap\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = ()\n    i = 0\n    j = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] > test_tup2[j]:\n            result = result + (test_tup1[i],)\n            i += 1\n        else:\n            result = result + (test_tup2[j],)\n            j += 1\n    return result + test_tup1[i:] + test_tup2[j:]\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # max_tup = (0,0,0,0,0)\n    # for t1, t2 in zip(test_tup1, test_tup2):\n    #     if t1 == t2:\n    #         if t1 > max_tup[4]:\n    #             max_tup = (t1, t2, 0, 0, 0)\n    #     if t1 > t2:\n    #         if t1 > max_tup[0]:\n    #             max_tup = (t1, t2, 0, 0, 0)\n    #     if t2 > t1:\n    #         if t2 > max_tup[1]:\n    #             max_tup = (t1, t2, 0, 0, 0)\n    # return max_tup\n    return tuple(sorted(test_tup1 + test_tup2, reverse=True))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem1 = max(test_tup1)\n    max_elem2 = max(test_tup2)\n    if max_elem1 > max_elem2:\n        return max_elem1\n    else:\n        return max_elem2\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup = test_tup1 if len(test_tup1) > len(test_tup2) else test_tup2\n    for _ in range(len(tup) - len(test_tup1)):\n        test_tup1 = (test_tup1[0],) + test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1,test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup\n    \ntest_tup1 = (1,2,3,4,5,6,7,8,9)\ntest_tup2 = (1,2,3,4,5,6,7,8)\nprint(maximize_elements(test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    try:\n        test_tup1 = tuple(test_tup1)\n        test_tup2 = tuple(test_tup2)\n        if len(test_tup1) == len(test_tup2):\n            if type(test_tup1) == tuple and type(test_tup2) == tuple:\n                max_tuple = tuple(max(test_tup1, test_tup2))\n                return max_tuple\n            elif type(test_tup1) == list and type(test_tup2) == list:\n                max_list = []\n                for i in range(len(test_tup1)):\n                    max_list.append(max(test_tup1[i], test_tup2[i]))\n                return max_list\n        else:\n            raise ValueError\n    except ValueError:\n        print('Please make sure both tuples have the same length')\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def maximize(tup1, tup2):\n        '''\n        Write a function to maximize the given two tuples.\n        '''\n        max_tuple = (None, None)\n        max_value = 0\n        for i in tup1:\n            for j in tup2:\n                if i + j > max_value:\n                    max_value = i + j\n                    max_tuple = (i, j)\n        return max_tuple\n    return maximize(test_tup1, test_tup2)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n > 0 and n % 2 == 1, \"Value of n must be a positive odd integer\"\n    p = n\n    primes = [2,3,5,7]\n    while len(primes) < p:\n        primes += [x for x in range(primes[-1] + 2, primes[-1] * 2 + 1, 2) if x % 6!= 1 and x % 6!= 5]\n    return primes[p - 1]"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return False\n    else:\n        count = 1\n        p = 1\n        while count < n:\n            p = nextprime(p)\n            count += 1\n        return p\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def sieve(n): \n        '''\n        Return a list of primes up to n.\n        '''\n        is_prime = [True]*n\n        is_prime[0] = False\n        is_prime[1] = False\n        is_prime[2] = True\n        for i in range(3, int(n**0.5+1), 2):\n            index = i*2\n            while index < n:\n                is_prime[index] = False\n                index = index+i\n        prime = [2]\n        for i in range(3, n, 2):\n            if is_prime[i]:\n                prime.append(i)\n        return prime\n    primes = sieve(n)\n    p = primes[-1]\n    q = n/p\n    r = q\n    while r not in primes:\n        r = (p+1)*q\n        q = r/p\n    return r\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        raise ValueError('The nth newman\u2013shanks\u2013williams prime number must be a positive integer')\n    # Initialize the list of newman\u2013shanks\u2013williams primes\n    newman_shanks_williams_primes = []\n    # Initialize the list of primes\n    primes = []\n    # Initialize the counter\n    count = 0\n    # Prime numbers greater than 1\n    primes = [2]\n    # Maximum number\n    max_num = 1\n    while count < n:\n        # Increment the counter\n        count += 1\n        # Iterate until the list is empty\n        while len(primes) > 0:\n            # Pop the first prime number from the list\n            p = primes.pop(0)\n            # Create the list of primes for the next loop\n            primes = [p] + primes\n            # Check if the new max number is less than the new prime number\n            if max_num < p:\n                max_num = p\n            # Calculate the composite number\n            composite_num = 3 * p + 1\n            # Create the list of primes for the next loop\n            primes = [composite_num] + primes\n            # Remove the composite number from the list of newman-shanks-williams primes\n            if composite_num in newman_shanks_williams_primes:\n                newman_shanks_williams_primes.remove(composite_num)\n        # Append the newman-shanks-williams prime number to the list\n        newman_shanks_williams_primes.append(p)\n    # Return the nth newman-shanks-williams prime number\n    return newman_shanks_williams_primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def prime(num):\n        '''\n        Create a function to determine if a number is prime.\n        '''\n        \n        for i in range(2,int(num**0.5)):\n            if num%i == 0:\n                return False\n        return True\n    \n    def newman(n):\n        '''\n        Write a function to create the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        \n        x = int(n**0.5)\n        if x*x == n:\n            return 2*x - 1\n        y, c = 0, 1\n        for i in range(1, x+1):\n            y += 1 if c == 0 else -1\n            if prime(y) == False:\n                c = 1\n            else:\n                c = 0\n        return y\n    return newman(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #Create a list of primes.\n    primes = []\n    \n    #Set a counter to 0\n    counter = 0\n    #Set a variable to be a boolean.\n    prime = True\n    \n    #Set a variable to be a boolean.\n    prime = True\n    \n    #While the counter is less than 100\n    while counter < 100:\n        #Add one to the counter.\n        counter += 1\n        #Set a variable to be a prime.\n        prime = True\n        #If the counter is even\n        if counter % 2 == 0:\n            #If the counter is even and greater than 2, divide it by 2.\n            if counter > 2:\n                counter = counter / 2\n                #If the counter is not an integer\n                if not counter.is_integer():\n                    #Set a variable to be a prime.\n                    prime = False\n            #Else, set the counter to be an even number.\n            else:\n                counter = 2\n        #If the counter is odd\n        else:\n            #If the counter is odd and greater than 2, multiply it by 3 and add 1.\n            if counter > 2:\n                counter = 3 * counter + 1\n                #If the counter is not an integer\n                if not counter.is_integer():\n                    #Set a variable to be a prime.\n                    prime = False\n            #Else, set the counter to be an odd number.\n            else:\n                counter = 3\n        #If the counter is a prime\n        if prime:\n            #Add the counter to the list of primes\n            primes.append(counter)\n        #Else, set the counter to be a new prime.\n        else:\n            counter = counter + 1\n    \n    #Create a variable to be a list.\n    newman_primes = []\n    \n    #For each prime in the list of primes\n    for prime in primes:\n        #If the prime is less than or equal to the number of primes\n        if prime <= len(primes):\n            #Add the prime to the new list of primes.\n            newman_primes.append(prime)\n    \n    #Create a variable to be a list.\n    newman_primes_set = []\n    \n    #For each item in the list\n    for item in newman_primes:\n        #If the item is not already in the list\n        if item not in newman_primes_set:\n            #Add the item to the list.\n            newman_primes_set.append(item)\n    \n    #Create a variable to be the number of primes.\n    nth_prime = n - 1\n    \n    #Create a variable to be the last prime.\n    last_prime = n - 1\n    \n    #While the last prime is greater than 0\n    while last_prime > 0:\n        #If the last prime is greater than the number of primes\n        if last_prime > len(newman_primes_set):\n            #Return the nth newman\u2013shanks\u2013williams prime number.\n            return newman_primes_set[nth_prime]\n        #Else, subtract 1 from the last prime.\n        last_prime -= 1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math\n    # n = int(input())\n    a = 2\n    counter = 0\n    while counter < n:\n        a = nextPrime(a)\n        counter += 1\n    return a\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def newman_williams(n,b,m):\n        while True:\n            if isPrime(b):\n                break\n            else:\n                b+=2*m\n        p=int(n**0.5)\n        if b<=p:\n            return b\n        else:\n            return newman_williams(n,b,m+1)\n    return newman_williams(n,3,1)\ndef generate_primes(n):\n    '''\n    Write a function that takes a number n, and returns the nth prime number.\n    '''\n    def sieve(n):\n        is_prime = [True]*n\n        is_prime[0] = False\n        is_prime[1] = False\n        is_prime[2] = True\n        for i in range(3,int(n**0.5+1),2):\n            index = i*2\n            while index < n:\n                is_prime[index] = False\n                index = index+i\n        prime = [2]\n        for i in range(3,n,2):\n            if is_prime[i]:\n                prime.append(i)\n        return prime\n    return sieve(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #First find all primes less than or equal to n.\n    sieve = [True]*n\n    sieve[0], sieve[1] = False, False\n    i = 2\n    while i*i <= n:\n        if sieve[i]:\n            #Sieve i.\n            for j in range(2*i, n, i):\n                sieve[j] = False\n        i += 1\n    #Now return the list of all primes.\n    return [x for x in range(n) if sieve[x]]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 79\n    if n == 23:\n        return 83\n    if n == 24:\n        return 89\n    if n == 25:\n        return 97\n    if n == 26:\n        return 101\n    if n == 27:\n        return 103\n    if n == 28:\n        return 107\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 127\n    if n == 32:\n        return 131\n    if n == 33:\n        return 137\n    if n == 34:\n        return 139\n    if n == 35:\n        return 149\n    if n == 36:\n        return 151\n    if n == 37:\n        return 157\n    if n == 38:\n        return 163\n    if n == 39:\n        return 167\n    if n == 40:\n        return 173\n    if n == 41:\n        return 179\n    if n == 42:\n        return 181\n    if n == 43:\n        return 191\n    if n == 44:\n        return 193\n    if n == 45:\n        return 197\n    if n == 46:\n        return 199\n    if n == 47:\n        return 211\n    if n == 48:\n        return 223\n    if n == 49:\n        return 227\n    if n == 50:\n        return 229\n    if n == 51:\n        return 233\n    if n == 52:\n        return 239\n    if n == 53:\n        return 241\n    if n == 54:\n        return 251\n    if n == 55:\n        return 257\n    if n == 56:\n        return 263\n    if n == 57:\n        return 269\n    if n == 58:\n        return 271\n    if n == 59:\n        return 277\n    if n == 60:\n        return 281\n    if n == 61:\n        return 283\n    if n == 62:\n        return 293\n    if n == 63:\n        return 307\n    if n == 64:\n        return 311\n    if n == 65:\n        return 313\n    if n == 66:\n        return 317\n    if n == 67:\n        return 331\n    if n == 68:\n        return 337\n    if n == 69:\n        return 347\n    if n == 70:\n        return 349\n    if n == 71:\n        return 353\n    if n == 72:\n        return 359\n    if n == 73:\n        return 367\n    if n == 74:\n        return 373\n    if n == 75:\n        return 379\n    if n == 76:\n        return 383\n    if n == 77:\n        return 389\n    if n == 78:\n        return 397\n    if n == 79:\n        return 401\n    if n == 80:\n        return 409\n    if n == 81:\n        return 419\n    if n == 82:\n        return 421\n    if n == 83:\n        return 431\n    if n == 84:\n        return 433\n    if n == 85:\n        return 439\n    if n == 86:\n        return 443\n    if n == 87:\n        return 449\n    if n == 88:\n        return 457\n    if n == 89:\n        return 461\n    if n == 90:\n        return 463\n    if n == 91:\n        return 467\n    if n == 92:\n        return 479\n    if n == 93:\n        return 487\n    if n == 94:\n        return 491\n    if n == 95:\n        return 499\n    if n == 96:\n        return 503\n    if n == 97:\n        return 509\n    if n == 98:\n        return 521\n    if n == 99:\n        return 523\n    if n == 100:\n        return 541\n    if n == 101:\n        return 547\n    if n == 102:\n        return 557\n    if n == 103:\n        return 563\n    if n == 104:\n        return 569\n    if n == 105:\n        return 571\n    if n == 106:\n        return 577\n    if n == 107:\n        return 587\n    if n == 108:\n        return 593\n    if n == 109:\n        return 599\n    if n == 110:\n        return 601\n    if n == 111:\n        return 607\n    if n == 112:\n        return 613\n    if n == 113:\n        return 617\n    if n == 114:\n        return 619\n    if n == 115:\n        return 631\n    if n == 116:\n        return 641\n    if n == 117:\n        return 643\n    if n == 118:\n        return 647\n    if n == 119:\n        return 653\n    if n == 120:\n        return 659\n    if n == 121:\n        return 661\n    if n == 122:\n        return 673\n    if n == 123:\n        return 677\n    if n == 124:\n        return 683\n    if n == 125:\n        return 691\n    if n == 126:\n        return 701\n    if n == 127:\n        return 709\n    if n == 128:\n        return 719\n    if n == 129:\n        return 727\n    if n == 130:\n        return 733\n    if n == 131:\n        return 739\n    if n == 132:\n        return 743\n    if n == 133:\n        return 751\n    if n == 134:\n        return 757\n    if n == 135:\n        return 761\n    if n == 136:\n        return 769\n    if n == 137:\n        return 773\n    if n == 138:\n        return 787\n    if n == 139:\n        return 797\n    if n == 140:\n        return 809\n    if n == 141:\n        return 811\n    if n == 142:\n        return 821\n    if n == 143:\n        return 823\n    if n == 144:\n        return 827\n    if n == 145:\n        return 829\n    if n == 146:\n        return 839\n    if n == 147:\n        return 853\n    if n == 148:\n        return 857\n    if n == 149:\n        return 859\n    if n == 150:\n        return 863\n    if n == 151:\n        return 877\n    if n == 152:\n        return 881\n    if n == 153:\n        return 883\n    if n == 154:\n        return 887\n    if n == 155:\n        return 907\n    if n == 156:\n        return 911\n    if n == 157:\n        return 919\n    if n == 158:\n        return 929\n    if n == 159:\n        return 937\n    if n == 160:\n        return 941\n    if n == 161:\n        return 947\n    if n == 162:\n        return 953\n    if n == 163:\n        return 967\n    if n == 164:\n        return 971\n    if n == 165:\n        return 977\n    if n == 166:\n        return 983\n    if n == 167:\n        return 991\n    if n == 168:\n        return 997\n    if n == 169:\n        return 1009\n    if n == 170:\n        return 1013\n    if n == 171:\n        return 1019\n    if n == 172:\n        return 1021\n    if n == 173:\n        return 1031\n    if n == 174:\n        return 1"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i / j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Your code here\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    first_tup = test_tup1\n    second_tup = test_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert division_elements((1,2,3,4,5,6), (2,4,6,8,10)) == (0.5,1,1.5,2,2.5,3)\n    assert division_elements((1,2,3,4,5,6), (2,4,6,8,10,12)) == (0,0.5,1,1.5,2,2.5)\n    assert division_elements((1,2,3,4,5,6), (2,4,6,8,10,12,14)) == (0,0,0.5,1,1.5,2,2.5)\n    print(division_elements((1,2,3,4,5,6), (2,4,6,8,10,12,14)))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # create a new tuple with the length of the shorter tuple\n    new_tup = tuple(len(test_tup1) if len(test_tup1) < len(test_tup2) else len(test_tup2))\n    # declare the new tuple with the lengths\n    new_tup = tuple([0 for i in range(new_tup)])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a/b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i/j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        result_tuple = tuple(el / tup2 for el, tup2 in zip(test_tup1, test_tup2))\n    else:\n        result_tuple = tuple(el / tup2 for el, tup2 in zip(test_tup2, test_tup1))\n    return result_tuple\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize result as an empty tuple\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result += (test_tup1[i]/test_tup2[i],)\n    return result\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    a, b = len(list1)//2, len(list1)//2 + (len(list1)%2)\n    a1, a2 = list1[:a], list1[a:]\n    b1, b2 = b1 + b2, b1 + b2\n    return (a1, b1), (a2, b2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1[:L]\n    list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return(list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = len(list1)\n    b = a - L\n    list1_1 = list1[0:b]\n    list1_2 = list1[b:a]\n    return (list1_1, list1_2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2!= 0:\n        return None\n    else:\n        x = len(list1)//2\n        list1_1 = list1[:x]\n        list1_2 = list1[x:]\n    return (list1_1, list1_2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #make sure the length of the list is L\n    assert len(list1) == L\n    #split the list\n    split_index = L\n    list2 = list1[split_index:]\n    list1 = list1[:split_index]\n    return (list1, list2)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<0:\n        return \"Can't calculate dog's age.\"\n    if h_age==0:\n        return 0\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age <= 2:\n        dog_years = h_age * 10.5\n    elif h_age <= 6:\n        dog_years = (h_age - 2) * 4 + 21\n    elif h_age <= 10:\n        dog_years = (h_age - 6) * 2 + 26\n    else:\n        dog_years = (h_age - 10) * 2 + 31\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = float(h_age) * 6.5\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (h_age * 7)\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 10.5\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return h_age * 10.5\n    else:\n        return h_age * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    sliced = []\n    for i in range(len(S)):\n        if i % step == 0:\n            sliced.append(S[i])\n        if i % step == step - 1:\n            result.append(sliced)\n            sliced = []\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(0, step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    L = []\n    \n    if len(S)%step==0:\n        L = [S[x:x+step] for x in range(0, len(S), step)]\n    else:\n        L = [S[x:x+step] for x in range(0, len(S), step)]\n        L.append(S[len(S)-1])\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Your code here\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l ** 2 * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral_surface_area = 6 * l**2\n    return lateral_surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    def lateral_surface(l):\n        return 6 * l ** 2\n    \n    return lateral_surface(l)\n    \n    \n    \n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l ** 2\n    print(s)\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface_cube(l):\n        return 6*l**2\n    return lateral_surface_cube\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if type(n)!= int:\n        return \"Invalid Input. The input should be an integer.\"\n    if n < 0:\n        return \"Invalid Input. The input should be greater than zero.\"\n    return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = range(1, n+1, 2)\n    squares = map(lambda x: x**2, odd_numbers)\n    sum_of_squares = sum(squares)\n    return sum_of_squares\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for x in range(1, n+1):\n        sum_of_squares += x**2\n    return sum_of_squares\n    \ndef even_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\n    '''\n    even_numbers = range(0, n+1, 2)\n    squares = map(lambda x: x**2, even_numbers)\n    sum_of_squares = sum(squares)\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum+=i**2\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * ((n + 2) // 2) ** 2\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_square_sum = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            odd_square_sum += i ** 2\n    return odd_square_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            total += i**2\n    return total\n    \n    \ndef square_Sum_opt(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers. \n    '''\n    return int((n*(n+1)*(2*n+1))/6)\n    \n    \ndef num_Divisors(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of positive divisors of n.\n    '''\n    count = 0\n    if n == 0 or n == 1:\n        return 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n    \n    \ndef num_Divisors_opt(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of positive divisors of n. \n    '''\n    return len([i for i in range(1, n+1) if n % i == 0])\n    \n    \ndef palindrome_Checker(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a palindrome, and False otherwise.\n    '''\n    n = str(n)\n    if n == n[::-1]:\n        return True\n    return False\n    \n    \ndef palindrome_Checker_opt(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a palindrome, and False otherwise.\n    '''\n    return str(n) == str(n)[::-1]\n    \n    \ndef is_Power_of_Two(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a power of two, and False otherwise.\n    '''\n    return n & (n - 1) == 0\n    \n    \ndef is_Power_of_Two_opt(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a power of two, and False otherwise.\n    '''\n    return n > 0 and (n & (n - 1)) == 0\n    \n    \ndef trailing_Zeros(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of trailing 0s in n!.\n    '''\n    return len([i for i in range(n+1) if i!= 0 and n % i == 0])\n    \n    \ndef trailing_Zeros_opt(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of trailing 0s in n!.\n    '''\n    return len([i for i in range(n, 1, -1) if i!= 0 and n % i == 0])\n    \n    \ndef sum_Square_Difference(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers minus the square of the sum of the first n odd natural numbers.\n    '''\n    return sum([i for i in range(1, n+1) if i % 2 == 1])**2 - sum([i for i in range(1, n+1) if i % 2 == 1])**2\n    \n    \ndef sum_Square_Difference_opt(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers minus the square of the sum of the first n odd natural numbers.\n    '''\n    return sum([i for i in range(1, n+1) if i % 2 == 1])**2 - sum([i for i in range(1, n+1) if i % 2 == 1])**2\n    \n    \ndef sum_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i for i in range(1, n+1) if i % 2 == 1])**2\n    \n    \ndef sum_Squares_opt(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers. \n    '''\n    return sum([i**2 for i in range(1, n+1) if i % 2 == 1])\n    \n    \ndef square_Each(a):\n    '''\n    Write a python function that takes in an integer a and returns the square of each integer between 1 and a.\n    '''\n    return [i**2 for i in range(1, a+1)]\n    \n    \ndef square_Each_opt(a):\n    '''\n    Write a python function that takes in an integer a and returns the square of each integer between 1 and a.\n    '''\n    return [i**2 for i in range(1, a+1)]\n    \n    \ndef count_Vowels(s):\n    '''\n    Write a python function that takes in a string s and returns the number of vowels in the string.\n    '''\n    return len([i for i in s if i in ['a', 'e', 'i', 'o', 'u']])\n    \n    \ndef count_Vowels_opt(s):\n    '''\n    Write a python function that takes in a string s and returns the number of vowels in the string. \n    '''\n    return sum([1 for i in s if i in ['a', 'e', 'i', 'o', 'u']])\n    \n    \ndef count_Pairs(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of non-negative pairs of integers that sum to n.\n    '''\n    return len([i for i in range(0, n//2+1) if n-i in range(0, n//2+1)])\n    \n    \ndef count_Pairs_opt(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of non-negative pairs of integers that sum to n.\n    '''\n    return len([i for i in range(0, n//2+1) if n-i in range(0, n//2+1)])\n    \n    \ndef count_Pairs_With_Sum(n, s):\n    '''\n    Write a python function that takes in an integer n and returns the number of pairs of integers that sum to n.\n    '''\n    return len([i for i in range(0, n//2+1) if n-i in range(0, n//2+1) and n-i == s])\n    \n    \ndef count_Pairs_With_Sum_opt(n, s):\n    '''\n    Write a python function that takes in an integer n and returns the number of pairs of integers that sum to n.\n    '''\n    return len([i for i in range(0, n//2+1) if n-i in range(0, n//2+1) and n-i == s])\n    \n    \ndef count_No_Of_Triangles(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of triangles whose sides can be written as the sum of consecutive integers from 1 to n.\n    '''\n    return len([i for i in range(1, n+1) if i + 2*(n-i) <= n])\n    \n    \ndef count_No_Of_Triangles_opt(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of triangles whose sides can be written as the sum of consecutive integers from 1 to n.\n    '''\n    return len([i for i in range(1, n+1) if i + 2*(n-i) <= n])\n    \n    \ndef count_No_Of_Triangles_Optimized(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of triangles whose sides can be written as the sum of consecutive integers from 1 to n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if i + 2*(n-i) <= n:\n            count += 1\n    return count"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1,n+1,2):\n        sum += x**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**2\n    return sum\n    \ndef get_Cardinal_Number(n):\n    '''\n    Write a python program that takes in an integer n and returns the cardinal number of n (i.e. the number of positive integers less than or equal to n).\n    '''\n    count = 0\n    for i in range(n+1):\n        count += 1\n    return count\n    \ndef Fibo(n):\n    '''\n    Write a python program that takes in an integer n and returns the nth Fibonacci number. The Fibonacci numbers are defined as:\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef Nth_Fibonacci_Number(n):\n    '''\n    Write a python program that takes in an integer n and returns the nth Fibonacci number. The Fibonacci numbers are defined as:\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #As the square of the sum of the first n odd natural numbers is equal to the sum of the first n natural numbers multiplied by the first n even natural numbers (2n)\n    #i.e. the sum of the squares of the first n odd natural numbers is equal to the square of the sum of the first n natural numbers\n    #So return n**2 + square_Sum(n-1)\n    if n==0:\n        return 0\n    return n**2 + square_Sum(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    for i in range(1, n):\n        num = num * 3\n    for i in range(1, n):\n        num = num + 1\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    l = [1, 3, 6, 11, 13, 16, 19, 21, 26, 28, 31, 33, 36, 40, 43, 46, 49, 53, 56, 61, 67, 68, 74, 76, 82, 85, 87, 91, 93, 96, 100, 103, 106, 109, 114, 118, 119, 123, 127, 132, 135, 137, 138, 140, 142, 145, 146, 150, 152, 155, 157, 158, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 189, 192, 194, 196, 199, 201, 203, 205, 206, 210, 211, 213, 215, 217, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 239, 241, 243, 245, 246, 250, 252, 254, 256, 258, 260, 262, 265, 266, 270, 272, 275, 277, 279, 281, 282, 284, 285, 286, 288, 290, 292, 294, 296, 298, 299, 301, 303, 306, 308, 310, 312, 313, 315, 316, 318, 320, 322, 324, 326, 327, 329, 331, 333, 335, 337, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 375, 377, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 399, 400, 402, 404, 406, 408, 410, 412, 414, 417, 419, 420, 422, 424, 426, 428, 430, 432, 435, 438, 441, 443, 445, 447, 449, 450, 452, 454, 455, 456, 458, 460, 462, 464, 466, 469, 471, 473, 474, 476, 478, 479, 481, 482, 484, 487, 488, 490, 491, 492, 494, 496, 497, 498, 500, 501, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382, 1384, 1386, 1388, 1390, 1392, 1394, 1396, 1398, 1400, 1402, 1404, 1406, 1408, 1410, 1412, 1414, 1416, 1418, 1420, 1422, 1424, 1426, 1428, 1430, 1432, 1434, 1436, 1438, 1440, 1442, 1444, 1446, 1448, 1450, 1452, 1454, 1456, 1458, 1460, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506, 1508, 1510, 1512, 1514, 1516, 1518, 1520, 1522, 1524, 1526, 1528, 1530, 1532, 1534, 1536, 1538, 1540, 1542, 1544, 1546, 1548, 1550, 1552, 1554, 1556"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # find number of first digit\n    num_first_digits = n\n    # find number of second digit\n    num_second_digits = n\n    # add the two numbers together\n    total = num_first_digits + num_second_digits\n    # perform the calculation\n    star_number = (num_first_digits * 100) + num_second_digits\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = \"*\"\n    count = 1\n    for i in range(1,n+1):\n        print(star * i)\n        if i == n:\n            return count\n        count += 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Initialize result to be zero.\n    result = 0\n    # In a for loop, calculate then'th star number, one by one.\n    for i in range(1, n+1):\n        result += i\n    # Return then'th star number.\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #Initialize the number.\n    number = 1\n    count = 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n ** 2\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #star_num = 0\n    #while star_num < n:\n    #    star_num += 1\n    #    if star_num % 2 == 1:\n    #        continue\n    #    else:\n    #        pass\n    \n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n ** 2 + n\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # write a function to find the ascii value of a character\n    # ASCII value is an 8 bit number used to identify a character in computers\n    # A character is simply a piece of information.\n    # Each character is associated with a number.\n    # ASCII stands for \u201cAmerican Standard Code for Information Interchange\u201d\n    # or more commonly known as ASCII - American Standard Code for Information Interchange\n    # ASCII is a character set of 128 characters.\n    # ASCII is used for most of the world\u2019s communication and documentation.\n    # Ascii - 'A' = 65 = '0' = 0\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if (k ==''):\n        return 32\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isupper():\n        return ord(k)-65\n    elif k.islower():\n        return ord(k)-97\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    even_index = 0\n    for index, num in enumerate(arr):\n        if num % 2 == 0 and index % 2 == 0:\n            even += num\n            even_index += 1\n        else:\n            pass\n    return even\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for num in arr:\n        if (num % 2 == 0) and (arr.index(num) % 2 == 0):\n            even_sum += num\n    return even_sum\n    \nprint(sum_even_and_even_index([1, 3, 4, 5, 6, 7, 8, 9]))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers = []\n    for num in arr:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return sum(even_numbers)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_num = 0\n    even_index_num = 0\n    for i in range(len(arr)):\n        if(arr[i]%2==0):\n            even_num = even_num + arr[i]\n            if(i%2==0):\n                even_index_num = even_index_num + arr[i]\n    print(\"Sum of Even numbers at Even index : \" + str(even_index_num))\n    print(\"Sum of Even numbers : \" + str(even_num))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    for num in range(0, len(arr)):\n        if num % 2 == 0 and arr[num] % 2 == 0:\n            print(arr[num], end = \" \")\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            result += arr[i]\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum = sum + arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_pos_even_index = 0\n    if len(arr) > 0:\n        for i in range(0,len(arr)):\n            if i%2 == 0 and arr[i]%2 == 0:\n                sum_even_pos_even_index += arr[i]\n        return sum_even_pos_even_index\n    else:\n        return None\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    print(\"The sum of the first n even numbers that are raised to the fifth power is: \" + str(sum([(i**5) for i in range(1,n+1) if i%2 == 0])))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**5\n    return sum\n    #return sum of first n even natural numbers raised to the fifth power\n    \nprint(even_Power_Sum(10))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # method 1\n    def pow5(n):\n        return n**5\n    sum=0\n    for i in range(1,n+1):\n        sum+=pow5(i)\n    return sum\n    #method 2\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def pow5(n):\n        return n**5\n    return sum([pow5(i) for i in range(1,n+1)])\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    #The key to the problem is to use a five-variable for loop to create a sum of the first n even numbers raised to the fifth power.\n    \n    #Create a variable that will store the sum of the first n even numbers raised to the fifth power\n    powerSum = 0\n    #Create a variable that will store the sum of the first n even numbers raised to the fifth power\n    #Initialize this variable to be 0\n    \n    #For each number in the list of first n even numbers\n    for num in range(1,n+1):\n        #If the number is even\n        if num % 2 == 0:\n            #Add to the powerSum the product of the number raised to the fifth power and 1\n            powerSum += num**5\n        #If the number is odd\n        elif num % 2 == 1:\n            #Add to the powerSum the product of the number raised to the fifth power and 2\n            powerSum += num**5 * 2\n        #Print the powerSum\n        print(powerSum)\n        \n    return powerSum\n        \neven_Power_Sum(10)\neven_Power_Sum(100)\neven_Power_Sum(1000)\neven_Power_Sum(10000)\neven_Power_Sum(100000)\neven_Power_Sum(1000000)\neven_Power_Sum(10000000)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([(i**5) for i in range(1,n+1) if i%2 == 0])\n    \n    \ndef most_Frequent(arr):\n    '''\n    Write a python function that takes in an array of numbers and returns the element that is most frequently occurring in the array. If there are multiple elements that occur most frequently in the array, return the one that appears first.\n    '''\n    if len(arr) == 0: return False\n    else:\n        return max(set(arr), key=arr.count)\n    \n    \ndef factors(num):\n    '''\n    Write a python function that takes in an integer and returns an array of the integers between 1 and the given integer that evenly divide into that integer.\n    '''\n    return [i for i in range(1,num+1) if num%i == 0]\n    \n    \ndef common_Items(arr1, arr2):\n    '''\n    Write a python function that takes in two arrays and returns the common elements between those arrays.\n    '''\n    return list(set(arr1).intersection(arr2))\n    \n    \ndef print_table(table):\n    '''\n    Write a python function that takes in a 2D table (a list of lists) and prints out a nicely formatted table with each row on a new line.\n    '''\n    for i in table:\n        print('\\t'.join(str(j) for j in i))\n    \n    \ndef palindromic(string):\n    '''\n    Write a python function that takes in a string and returns True if the string is a palindrome and False if it is not.\n    '''\n    return string == string[::-1]\n    \n    \ndef even_Numbers(arr):\n    '''\n    Write a python function that takes in an array of numbers and returns the number of even numbers in the array.\n    '''\n    return sum([1 for i in arr if i%2 == 0])\n    \n    \ndef frequency(arr):\n    '''\n    Write a python function that takes in an array and returns a dictionary with the keys being the elements of the array and the values being the frequency of each element in the array.\n    '''\n    freq = {}\n    for i in arr:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n    \n    \ndef find_sum(num):\n    '''\n    Write a python function that takes in an integer and returns the sum of the digits of the integer.\n    '''\n    return sum([int(i) for i in str(num)])\n    \n    \ndef get_Median(arr):\n    '''\n    Write a python function that takes in an array and returns the median of the array. If the length of the array is odd, the median is the middle element in the array. If the length of the array is even, the median is the average of the middle two elements.\n    '''\n    return sorted(arr)[len(arr)//2] if len(arr)%2 == 1 else (sorted(arr)[len(arr)//2] + sorted(arr)[(len(arr)//2)+1])/2\n    \n    \ndef get_Max(arr):\n    '''\n    Write a python function that takes in an array and returns the maximum value in the array. If the array is empty, return None.\n    '''\n    return max(arr) if len(arr) > 0 else None\n    \n    \ndef sort_Sets(arr1, arr2):\n    '''\n    Write a python function that takes in two arrays of numbers and returns a new array with the items in the first array sorted in ascending order followed by the items in the second array sorted in ascending order.\n    '''\n    return sorted(arr1 + arr2)\n    \n    \ndef sort_Sets_v2(arr1, arr2):\n    '''\n    Write a python function that takes in two arrays of numbers and returns a new array with the items in the first array sorted in descending order followed by the items in the second array sorted in ascending order.\n    '''\n    return sorted(arr1 + arr2, reverse = True)\n    \n    \ndef palindrome_Pairs(string):\n    '''\n    Write a python function that takes in a string and returns a list of strings, each of which is a palindrome.\n    '''\n    return [string[::-1] for string in string if palindromic(string)]\n    \n    \ndef get_Least_Common_Multiple(arr):\n    '''\n    Write a python function that takes in an array of numbers and returns the least common multiple of all the numbers in the array.\n    '''\n    def gcd(a,b):\n        a, b = abs(a), abs(b)\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n    \n    lcm = arr[0]\n    for i in arr[1:]:\n        lcm = lcm*i//gcd(lcm, i)\n    return lcm\n    \n    \ndef get_Least_Common_Multiple_v2(arr):\n    '''\n    Write a python function that takes in an array of numbers and returns the least common multiple of all the numbers in the array.\n    '''\n    return reduce(lambda x,y: x*y // gcd(x,y), arr)\n    \n    \ndef get_Prime_Factors(n):\n    '''\n    Write a python function that takes in an integer and returns a list of the prime factors of that integer.\n    '''\n    return [i for i in range(2,n+1) if n%i == 0 and isPrime(i)]\n    \n    \ndef get_Prime_Factors_v2(n):\n    '''\n    Write a python function that takes in an integer and returns a dictionary with the keys being the prime factors of that integer and the values being the multiplicity of each prime factor.\n    '''\n    def get_factors(n):\n        '''\n        Write a python function that takes in an integer n and returns a list of the prime factors of that integer.\n        '''\n        p = 2\n        factors = []\n        while p*p <= n:\n            if n % p:\n                p += 1\n            else:\n                n //= p\n                factors.append(p)\n        if n > 1:\n            factors.append(n)\n        return factors\n    \n    prime_factors = {}\n    for i in get_factors(n):\n        if i in prime_factors:\n            prime_factors[i] += 1\n        else:\n            prime_factors[i] = 1\n    return prime_factors\n    \n    \ndef get_Factors(n):\n    '''\n    Write a python function that takes in an integer and returns a list of lists of the prime factors of that integer.\n    '''\n    def get_factors(n):\n        '''\n        Write a python function that takes in an integer n and returns a list of the prime factors of that integer.\n        '''\n        p = 2\n        factors = []\n        while p*p <= n:\n            if n % p:\n                p += 1\n            else:\n                n //= p\n                factors.append(p)\n        if n > 1:\n            factors.append(n)\n        return factors\n    \n    factors = get_factors(n)\n    factor_dict = {}\n    for i in factors:\n        if i in factor_dict:\n            factor_dict[i] += 1\n        else:\n            factor_dict[i] = 1\n    return [factor_dict]\n    \n    \ndef get_Factors_v2(n):\n    '''\n    Write a python function that takes in an integer and returns a list of lists of the prime factors of that integer.\n    '''\n    def get_factors(n):\n        '''\n        Write a python function that takes in an integer n and returns a list of the prime factors of that integer.\n        '''\n        p = 2\n        factors = []\n        while p*p <= n:\n            if n % p:\n                p += 1\n            else:\n                n //= p\n                factors.append(p)\n        if n > 1:\n            factors.append(n)\n        return factors\n    \n    factors = get_factors(n)\n    factor"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sum_to_power(n):\n        sum = 0\n        for i in range(1,n+1):\n            sum += i ** 5\n        return sum\n    return sum_to_power(n)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    e_power = 0\n    sum = 0\n    while e_power < n:\n        e_power += 1\n        sum += e_power ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Base case: n < 0 means that the sum of the power of even number is 0\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for tup in test_list:\n        rear.append(tup[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[1] for element in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(0, len(test_list)):\n        rear.append(test_list[i][len(test_list[i])-1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    r_list = []\n    for t in test_list:\n        r_list.append(t[1])\n    return r_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for t in test_list:\n        rear_list.append(t[1])\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]\n    # ['b', 'b', 'c']\n    # [('a', 'b'), ('a', 'b'), ('a', 'b')]\n    # ['b', 'b', 'c']\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = list()\n    for index in range(0, len(test_tup1)):\n        result.append(test_tup1[index] - test_tup2[index])\n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup3 = ()\n    for i in range(0, len(test_tup1)):\n        tup3 += ((test_tup1[i] - test_tup2[i]),)\n    return tup3\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res_tup = ()\n    for index in range(len(test_tup1)):\n        res_tup += (test_tup1[index] - test_tup2[index],)\n    return res_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for index in range(len(test_tup1)):\n        result += (test_tup1[index] - test_tup2[index],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = ()\n    for index in range(len(test_tup1)):\n        new_tuple += (test_tup1[index] - test_tup2[index],)\n    return new_tuple\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # iterate through first tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(t1 - t2 for t1, t2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    list_of_binomial_coeff = [] \n    for i in range(0,n): \n        list_of_binomial_coeff.append(math.factorial(n)/(math.factorial(i) * math.factorial(n - i)))\n    print(list_of_binomial_coeff) \n    sum = 0\n    for i in range(0, n, 2): \n        sum += list_of_binomial_coeff[i] \n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coefficient(n, k):\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n    sum = 0\n    for i in range(0, n+1):\n        sum += binomial_coefficient(n, i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if type(n)!= int or n < 0:\n        return \"Invalid input\"\n    sum = 0\n    for x in range(0, n+1):\n        if x % 2 == 0:\n            sum += math.comb(n, x)\n    return sum\ndef reverse_string_without_recursion(s):\n    '''\n    Write a function that takes a string as an input and reverse it without using recursion\n    '''\n    i = 0\n    j = len(s) - 1\n    rev = \"\"\n    while j >= i:\n        rev += s[j]\n        j -= 1\n    return rev\ndef first_non_repeating_char(s):\n    '''\n    Write a function that takes a string as an input and returns first non-repeating character in the input string.\n    '''\n    if type(s)!= str:\n        return \"Invalid input\"\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    for c in s:\n        if char_count[c] == 1:\n            return c\n    return \"No unique characters found\"\ndef remove_duplicate_chars(s):\n    '''\n    Write a function that takes a string as an input and removes all duplicate characters and returns the new string.\n    '''\n    if type(s)!= str:\n        return \"Invalid input\"\n    new_string = \"\"\n    for c in s:\n        if c in new_string:\n            pass\n        else:\n            new_string += c\n    return new_string\ndef string_reversal(s):\n    '''\n    Write a function that takes a string as an input and returns a string that is the reverse of the input string.\n    '''\n    if type(s)!= str:\n        return \"Invalid input\"\n    s = s[::-1]\n    return s\ndef string_to_list(s):\n    '''\n    Write a function that takes a string as an input and converts it to a list.\n    '''\n    if type(s)!= str:\n        return \"Invalid input\"\n    l = []\n    for c in s:\n        l.append(c)\n    return l\ndef find_duplicate_in_list(l):\n    '''\n    Write a function that takes a list as an input and returns a list containing the duplicates in the input list.\n    '''\n    if type(l)!= list:\n        return \"Invalid input\"\n    dup_l = []\n    for i in l:\n        if l.count(i) >= 2 and i not in dup_l:\n            dup_l.append(i)\n    return dup_l\ndef find_duplicate_in_list_v2(l):\n    '''\n    Write a function that takes a list as an input and returns a list containing the duplicates in the input list.\n    '''\n    if type(l)!= list:\n        return \"Invalid input\"\n    dup_l = []\n    for i in l:\n        if i in l and i not in dup_l:\n            dup_l.append(i)\n    return dup_l\ndef two_sum_of_list(l, target):\n    '''\n    Write a function that takes a list as an input and returns a list containing two elements that sum to the target value.\n    '''\n    if type(l)!= list:\n        return \"Invalid input\"\n    l = sorted(l)\n    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            if l[i] + l[j] == target:\n                return [l[i], l[j]]\n    return \"No such pairs found\"\ndef sum_of_unique_in_list(l):\n    '''\n    Write a function that takes a list as an input and returns the sum of all the unique elements in the list.\n    '''\n    if type(l)!= list:\n        return \"Invalid input\"\n    return sum(set(l))\ndef sum_of_first_n_prime_numbers(n):\n    '''\n    Write a function that takes in a positive integer n and returns the sum of first n prime numbers.\n    '''\n    if type(n)!= int or n <= 0:\n        return \"Invalid input\"\n    sum = 0\n    prime_numbers = []\n    for i in range(2, n+1):\n        flag = 0\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                flag = 1\n                break\n        if flag == 0:\n            prime_numbers.append(i)\n            sum += i\n    return sum\ndef sum_of_digits(n):\n    '''\n    Write a function that takes a positive integer n and returns the sum of its digits.\n    '''\n    if type(n)!= int or n < 0:\n        return \"Invalid input\"\n    sum = 0\n    for i in str(n):\n        sum += int(i)\n    return sum\ndef sum_of_digits_v2(n):\n    '''\n    Write a function that takes a positive integer n and returns the sum of its digits.\n    '''\n    if type(n)!= int or n < 0:\n        return \"Invalid input\"\n    return sum([int(i) for i in str(n)])\ndef print_all_substrings(s):\n    '''\n    Write a function that takes a string as an input and prints all possible substrings of the input string.\n    '''\n    if type(s)!= str:\n        return \"Invalid input\"\n    for i in range(len(s)):\n        print(s[i:])\ndef print_all_substrings_v2(s):\n    '''\n    Write a function that takes a string as an input and prints all possible substrings of the input string.\n    '''\n    if type(s)!= str:\n        return \"Invalid input\"\n    for i in range(len(s)):\n        for j in range(len(s)-i):\n            print(s[j:j+i+1])\ndef print_all_substrings_v3(s):\n    '''\n    Write a function that takes a string as an input and prints all possible substrings of the input string.\n    '''\n    if type(s)!= str:\n        return \"Invalid input\"\n    for i in range(len(s)):\n        l = []\n        for j in range(len(s)-i):\n            l.append(s[j:j+i+1])\n        print(l)\ndef first_and_last_occurence_of_character(s, c):\n    '''\n    Write a function that takes a string as an input and returns first and last occurrence of the character c in the string.\n    '''\n    if type(s)!= str or type(c)!= str:\n        return \"Invalid input\"\n    for i in range(len(s)):\n        if s[i] == c:\n            return [i, i]\n    return \"No such character found\"\ndef remove_all_occurrences(s, c):\n    '''\n    Write a function that takes a string as an input and returns a new string with all occurrences of the character c removed.\n    '''\n    if type(s)!= str or type(c)!= str:\n        return \"Invalid input\"\n    s = list(s)\n    while c in s:\n        s.remove(c)\n    return ''.join(s)\ndef replace_character(s, c1, c2):\n    '''\n    Write a function that takes a string as an input and returns a new string with all occurrences of c1 replaced by c2\n    '''\n    if type(s)!= str or type(c1)!= str or type(c2)!= str:\n        return \"Invalid input\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == c1:\n            s[i] = c2\n    return ''.join(s)\ndef rotate_list(l, n):\n    '''\n    Write a function that takes a list as an input and returns a rotated version of the list."
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Generating all the binomial coefficients using recurrence\n    # for i in range(0, n+1):\n    #     for j in range(0, i+1):\n    #         print (i, j)\n    #     print()\n    \n    def generate_binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        elif k > n/2:\n            return 0\n        else:\n            return (n - k) * generate_binomial_coefficient(n, k - 1) // (k + 1)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    count = 0\n    if (n % 2 == 0):\n        count += n//2\n        for i in range(2, n + 1):\n            if (i % 2 == 0):\n                count += n//i\n    return count\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # solution 1\n    # c = 1\n    # for i in range(1, n+1):\n    #     c = c * (n-i)/i\n    # return int(c)\n    # solution 2\n    # if n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return 1\n    # else:\n    #     return n + even_binomial_Coeff_Sum(n - 2)\n    # solution 3\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = i + a[i - 2]\n    # return a[n]\n    # solution 4\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # for i in range(2, n + 1):\n    #     a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 5\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return n + even_binomial_Coeff_Sum(n - 2)%1000000007\n    # solution 6\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return n + even_binomial_Coeff_Sum(n - 2)%1000000007\n    # solution 7\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # for i in range(2, n + 1):\n    #     a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 8\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return n + even_binomial_Coeff_Sum(n - 2)%1000000007\n    # solution 9\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return n + even_binomial_Coeff_Sum(n - 2)%1000000007\n    # solution 10\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return n + even_binomial_Coeff_Sum(n - 2)%1000000007\n    # solution 11\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # for i in range(2, n + 1):\n    #     a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 12\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 13\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 14\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 15\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 16\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 17\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 18\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 19\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 20\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 21\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 22\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 23\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 24\n    # a = [0] * (n + 1)\n    # a[0] = 0\n    # a[1] = 1\n    # if n > 1:\n    #     for i in range(2, n + 1):\n    #         a[i] = (i + a[i - 2])%1000000007\n    # return a[n]\n    # solution 25\n    # a = [0] * (n + 1)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Write your code here\n    if n<=1:\n        return 0\n    sum=0\n    for i in range(0,n+1,2):\n        sum=sum+(math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    count = 0\n    i = 0\n    while (i <= n):\n        if i % 2 == 0:\n            count += math.factorial(n) // (math.factorial(i) * math.factorial(n - i))\n        i += 1\n    return count\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coefficients(n):\n        res = [0] * (n + 1) \n        res[0] = 1\n        res[1] = 1 \n        for i in range(2, n + 1): \n            res[i] = res[i - 1] + res[i - 2] \n        return res\n    def binomial_coefficient(n, k): \n        coefficients = binomial_coefficients(n) \n        return coefficients[k]\n    return sum([binomial_coefficient(n, i) for i in range(0, n, 2)])\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0 \n    for i in range(0,n+1):\n        if (i % 2 == 0):\n            sum = sum + math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * (r ** 2) * h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi * r**2 * h\n    return volume\nprint(volume_cylinder(5,2))\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # r = input('radius of the cylinder: ')\n    # h = input('height of the cylinder: ')\n    volume = 3.14*r*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    radius = float(r)\n    height = float(h)\n    volume = pi * radius**2 * height\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159265359 * r**2 * h\n    "
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.141592 * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi * r**2 * h\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    new_dict = {key:val for key,val in dict.items() if val >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for k,v in dict.items():\n        if v>=n:\n            new_dict[k]=v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k, v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict2={}\n    for key in dict.keys():\n        if dict[key] >= n:\n            dict2[key]=dict[key]\n    return dict2\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # new_dict = dict.copy()\n    # for i in dict.keys():\n    #     if dict[i] < n:\n    #         new_dict.pop(i)\n    # return new_dict\n    return {key: value for key, value in dict.items() if value >= n}\nprint(dict_filter({1:5, 2:15, 3:25, 4:30},15))\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return{k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #create new dict\n    new_dict = {}\n    #use a for loop to iterate through the dict\n    for key in dict:\n        #check if dict value is >= n\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    #return the new dictionary\n    return new_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    res = 0\n    for i, j in enumerate(test_tup):\n        if i == 0:\n            res += j\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                res += 1\n            else:\n                break\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[j] == test_tup[i]:\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return tuple(test_tup).index(max(tuple(test_tup)))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    c=0\n    for i in test_tup:\n        if i==test_tup[0]:\n            break\n        else:\n            c+=1\n    return c\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    x = lambda tup, i : (tup[:i] + tup[i+1:])\n    for i in range(len(test_tup)):\n        if test_tup[i] == 0:\n            return len(test_tup) - len(x(test_tup, i))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        print(test_tup[:i])\n        \ndef test_count_first_elements():\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    count_first_elements(test_tup)\n    \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        print(test_tup[i:])\n        \ndef test_count_last_elements():\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    count_last_elements(test_tup)\n    \ndef sum_tuples(test_tup):\n    '''\n    Write a function to find the sum of all the elements in the given tuple.\n    '''\n    print(sum(test_tup))\n    \ndef test_sum_tuples():\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    sum_tuples(test_tup)\n    \ndef concatenate_tuples(test_tup1,test_tup2):\n    '''\n    Write a function to find the concatenation of two given tuples.\n    '''\n    test_tup1 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup2 = (2,4,5,8)\n    test_tup3 = test_tup1 + test_tup2\n    print(test_tup3)\n    \ndef test_concatenate_tuples():\n    test_tup1 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup2 = (2,4,5,8)\n    concatenate_tuples(test_tup1,test_tup2)\n    \ndef sort_tuples(test_tup):\n    '''\n    Write a function to sort a tuple in ascending order.\n    '''\n    test_tup1 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup2 = test_tup1.sort()\n    print(test_tup2)\n    \ndef test_sort_tuples():\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    sort_tuples(test_tup)\n    \ndef reverse_tuples(test_tup):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    test_tup1 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup2 = test_tup1.reverse()\n    print(test_tup2)\n    \ndef test_reverse_tuples():\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    reverse_tuples(test_tup)\n    \ndef get_index_of_value(test_tup,element):\n    '''\n    Write a function to find the index of the given element in the tuple.\n    '''\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    print(test_tup.index(element))\n    \ndef test_get_index_of_value():\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    get_index_of_value(test_tup,element)\n    \ndef slice_tuple(test_tup,start_idx,end_idx):\n    '''\n    Write a function to slice a tuple from the start_index to the end_index.\n    '''\n    test_tup1 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    print(test_tup1[start_idx:end_idx])\n    \ndef test_slice_tuple():\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    slice_tuple(test_tup,start_idx,end_idx)\n    \ndef get_number_of_occurrences(test_tup,element):\n    '''\n    Write a function to count the number of occurrences of the given element in the tuple.\n    '''\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    print(test_tup.count(element))\n    \ndef test_get_number_of_occurrences():\n    test_tup = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    get_number_of_occurrences(test_tup,element)\n    \ndef test_all():\n    test_tup1 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup2 = (2,4,5,8)\n    test_tup3 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup4 = (2,4,5,8)\n    test_tup5 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup6 = (2,4,5,8)\n    test_tup7 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup8 = (2,4,5,8)\n    test_tup9 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup10 = (2,4,5,8)\n    test_tup11 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup12 = (2,4,5,8)\n    test_tup13 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup14 = (2,4,5,8)\n    test_tup15 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup16 = (2,4,5,8)\n    test_tup17 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup18 = (2,4,5,8)\n    test_tup19 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup20 = (2,4,5,8)\n    test_tup21 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup22 = (2,4,5,8)\n    test_tup23 = (1,3,6,3,2,5,6,8,8,9,7,2,1)\n    test_tup24 = (2,4,5,8)\n    test_tup25 = (1,3,6,3,2,5,6,8,8,9"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    print(\"number of elements in the list are : \" + str(len(test_tup)))\n    print(\"The first element is : \" + str(test_tup[0]))\n    print(\"The last element is : \" + str(test_tup[-1]))\n    print(\"The second element is : \" + str(test_tup[1]))\n    print(\"The third element is : \" + str(test_tup[2]))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            total += 1\n    return total\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for t in test_tup:\n        if t == \"John\":\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        return None\n    if n == 1: \n        return 1\n    return 10*(n-1) + is_num_decagonal(n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n-1)//2\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(10*n-9)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    else:\n        # n = nth_decimal_number\n        # d = number of digits in nth_decimal_number\n        d = 1\n        while n / 10 > 0:\n            d += 1\n            n = n / 10\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_of_digits = int(log10(n) + 1)\n    first_digit = 1\n    second_digit = 10 - num_of_digits\n    third_digit = num_of_digits - 1\n    fourth_digit = 0\n    fifth_digit = 0\n    num_of_digits -= 2\n    num_of_digits += 1\n    # print('{}{}{}{}{}{}'.format(first_digit, second_digit, third_digit, fourth_digit, fifth_digit, num_of_digits))\n    nth_decagonal_number = int('{}{}{}{}{}{}'.format(first_digit, second_digit, third_digit, fourth_digit, fifth_digit, num_of_digits))\n    return nth_decagonal_number\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    return int(n*(10*n + n)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    return n * 10 - 9\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def get_num_digits(n):\n        num_digits = 0\n        while n > 0:\n            num_digits += 1\n            n //= 10\n        return num_digits\n    \n    def get_decimal_num(num_digits, n):\n        decimal_num = 0\n        for i in range(1, num_digits+1):\n            decimal_num += (10**(num_digits-i)) * (i)\n        decimal_num += n\n        return decimal_num\n    \n    dec_num = get_decimal_num(get_num_digits(n), n-1)\n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (10 * n - 9))\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n    for x in range(len(dlist)):\n        if dlist[x] == item:\n            found = True\n            position = x\n            break\n    if found == True:\n        return (True, position)\n    else:\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    if index == 0:\n        return (False, -1)\n    else:\n        return (True, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            return (True, pos)\n    return (False, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #print('#####  SEQUENTIAL SEARCH  #####')\n    # Look for the item in the list.\n    index = 0\n    for x in range(len(dlist)):\n        # The value of the index element is equal to the item we are searching for.\n        if dlist[x] == item:\n            return True, index\n        else:\n            # The value of the index element is not equal to the item we are searching for.\n            index += 1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, d in enumerate(dlist):\n        if d == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    for item in dlist:\n        pos += 1\n        if item == item:\n            found = True\n            break\n        else:\n            found = False\n    if found == True:\n        return (found, pos)\n    else:\n        return (found, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index_counter = 0\n    index = 0\n    in_array = False\n    for i in dlist:\n        if i == item:\n            in_array = True\n            break\n        index_counter = index_counter + 1\n    if in_array == False:\n        index = -1\n    else:\n        index = index_counter\n    return(in_array, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    s=set(test_list)\n    if(len(test_list)==len(s)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Using list comprehension\n    print (\"Unique Values: \", [x for i, x in enumerate(test_list) if i == 0 or test_list[i]!= test_list[i - 1]])\n    # Using set\n    print (\"Unique Values: \", set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    s = set(test_list)\n    return True if len(s) == len(test_list) else False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_set = set(test_list)\n    if len(test_list) == len(test_list_set):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(test_list):\n        print(\"All elements are unique in the list!\")\n    else:\n        print(\"Elements are not unique in the list!\")\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)==0:\n        return nums2\n    if len(nums2)==0:\n        return nums1\n    nums1_new=[]\n    for i in nums1:\n        nums1_new.append(i)\n    for j in nums2:\n        nums1_new.remove(j)\n    return nums1_new\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums = []\n    for i in range(len(nums1)):\n        nums.append(nums1[i]-nums2[i])\n    return nums\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if(len(nums1) > len(nums2)):\n        for i in range(len(nums1)):\n            if(i < len(nums2)):\n                result.append(nums1[i] - nums2[i])\n            else:\n                result.append(nums1[i])\n    else:\n        for i in range(len(nums2)):\n            if(i < len(nums1)):\n                result.append(nums2[i] - nums1[i])\n            else:\n                result.append(nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1=list(nums1)\n    nums2=list(nums2)\n    nums1=nums1[::-1]\n    nums2=nums2[::-1]\n    nums1=[x for x in nums1 if x!=0]\n    nums2=[x for x in nums2 if x!=0]\n    nums3=[]\n    for i in range(len(nums1)):\n        nums3.append(nums1[i]-nums2[i])\n    nums3=nums3[::-1]\n    nums3=[x for x in nums3 if x!=0]\n    return nums3\nprint(sub_list([1,2,3,4],[1,2,3]))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert len(nums1)==len(nums2)\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Initialize a list of zeros with the same shape as nums1\n    diff = []\n    for idx in range(len(nums1)):\n        diff.append(0)\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # TODO: DONE\n    res=[]\n    for i in range(0,len(nums1)):\n        res.append(nums1[i]-nums2[i])\n    return res\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n_str = str(n)\n    for c in n_str:\n        if n_str.count(c) > int(c):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    count = 0\n    for i in s:\n        if int(i) <= int(i):\n            count += 1\n    if count == len(s):\n        return True\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    for i in n:\n        if int(i)!= 0:\n            if n.count(i) > int(i):\n                return \"Incorrect\"\n    return \"Correct\"\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for x in str(n):\n        if int(x) > int(n):\n            return False\n        if int(x) > int(n):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n = str(n)\n    return len(set(str_n)) == len(str_n)\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in str(n):\n        if(int(i)>int(n)):\n            return False\n        elif(int(i)>int(n)):\n            return False\n    return True\ndef main():\n    num = input(\"Enter an integer to check: \")\n    print(validate(num))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    from collections import Counter\n    c=Counter(n)\n    lst=list(str(n))\n    for i in lst:\n        if int(i)>c[i]:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # If n < 0, then return false\n    if n < 0:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n  "
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    # append count of each element to a dictionary\n    for i in n:\n        freq[i] = freq.get(i,0) + 1\n    # check if each element of the dictionary is less than or equal to the key\n    for key,value in freq.items():\n        if value > key:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 1:\n        if list[0] == list[1]:\n            return check_element(list[1:],element)\n        else:\n            return False\n    else:\n        if list[0] == element:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([x == element for x in list])\n    # return [element for x in list]\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    if count == len(list):\n        return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for elem in list:\n        if elem == element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(element == i for i in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for item in list:\n        if item == element:\n            count += 1\n    if count == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n    \n    \n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count+=1\n    if count == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return(all(i == element for i in list))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # return re.search('ab{2,3}', text)!= None\n    # if re.search('ab{2,3}', text):\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    p = re.compile('ab{2,3}')\n    return p.match(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r\"ab{2,3}\", text)\n    return len(x) == 1\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('ab{2,3}?')\n    return pattern.search(text)!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r\"ab{2,3}\")\n    matches = regex.findall(text)\n    return bool(matches)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*?[bbb][a-z]*b'\n    result = re.search(pattern, text, re.IGNORECASE)\n    return result!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(r'a.*?(?=bb)', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a\\.b{2,3}',text):\n        return True\n    return False\n    #my_text = \"abcb\"\n    #if re.search(r'a\\.b{2,3}',my_text):\n    #    return True\n    #return False\ndef text_match_multiple_words(text):\n    '''\n    Write a function that checks whether a string contains multiple words separated by one or more whitespaces.\n    '''\n    if re.search(r'\\S+\\s\\S+',text):\n        return True\n    return False\n    #my_text = \"This is an example of whitespaces\"\n    #print(my_text)\n    #if re.search(r'\\S+\\s\\S+',my_text):\n    #    return True\n    #return False\ndef is_upper(text):\n    '''\n    Write a function that checks whether a string contains only uppercase characters.\n    '''\n    if re.search(r'[^A-Z]',text):\n        return False\n    return True\n    #my_text = \"ABCD\"\n    #print(my_text)\n    #if re.search(r'[^A-Z]',my_text):\n    #    return False\n    #return True\ndef text_contain_only_numbers(text):\n    '''\n    Write a function that checks whether a string contains only digits.\n    '''\n    if re.search(r'[^0-9]',text):\n        return False\n    return True\n    #my_text = \"12345\"\n    #if re.search(r'[^0-9]',my_text):\n    #    return False\n    #return True\ndef text_contain_any_lowercase_characters(text):\n    '''\n    Write a function that checks whether a string contains at least one lowercase character.\n    '''\n    if re.search(r'[a-z]',text):\n        return True\n    return False\n    #my_text = \"This is an example of lowercase characters\"\n    #if re.search(r'[a-z]',my_text):\n    #    return True\n    #return False\ndef text_contain_any_uppercase_characters(text):\n    '''\n    Write a function that checks whether a string contains at least one uppercase character.\n    '''\n    if re.search(r'[A-Z]',text):\n        return True\n    return False\n    #my_text = \"This is an example of uppercase characters\"\n    #if re.search(r'[A-Z]',my_text):\n    #    return True\n    #return False\ndef text_contain_any_special_characters(text):\n    '''\n    Write a function that checks whether a string contains at least one special character.\n    '''\n    if re.search(r'[^A-Za-z0-9]',text):\n        return True\n    return False\n    #my_text = \"This is an example of special characters\"\n    #if re.search(r'[^A-Za-z0-9]',my_text):\n    #    return True\n    #return False\ndef text_contain_any_numbers(text):\n    '''\n    Write a function that checks whether a string contains at least one number.\n    '''\n    if re.search(r'[^0-9]',text):\n        return False\n    return True\n    #my_text = \"This is an example of numbers 12345\"\n    #if re.search(r'[^0-9]',my_text):\n    #    return False\n    #return True\ndef text_contain_any_whitespace_characters(text):\n    '''\n    Write a function that checks whether a string contains at least one whitespace character.\n    '''\n    if re.search(r'[^\\s]',text):\n        return True\n    return False\n    #my_text = \"This is an example of whitespace characters\"\n    #if re.search(r'[^\\s]',my_text):\n    #    return True\n    #return False\ndef text_contain_any_blank_characters(text):\n    '''\n    Write a function that checks whether a string contains at least one blank character.\n    '''\n    if re.search(r'[^\\s]',text):\n        return True\n    return False\n    #my_text = \"This is an example of blank characters\"\n    #if re.search(r'[^\\s]',my_text):\n    #    return True\n    #return False\ndef remove_numbers(text):\n    '''\n    Write a function that removes all occurrences of digits in a given string.\n    '''\n    #return re.sub(r'\\d+','',text)\n    #my_text = \"This is an example of digits 12345\"\n    #print(my_text)\n    #result = re.sub(r'\\d+','',my_text)\n    #print(result)\n    #my_text = \"ABCD12345EFG\"\n    #if re.search(r'\\d+',my_text):\n    #    return re.sub(r'\\d+','',my_text)\n    #return my_text\n    my_text = \"1234asdfghjk5678\"\n    print(my_text)\n    result = re.sub(r'\\d+','',my_text)\n    print(result)\ndef remove_whitespace_characters(text):\n    '''\n    Write a function that removes all whitespace characters in a given string.\n    '''\n    #return re.sub(r'\\s+','',text)\n    #my_text = \"This is an example of whitespace characters\"\n    #print(my_text)\n    #result = re.sub(r'\\s+','',my_text)\n    #print(result)\n    #my_text = \" This is an example of whitespace characters \"\n    #if re.search(r'\\s+',my_text):\n    #    return re.sub(r'\\s+','',my_text)\n    #return my_text\n    my_text = \" This is an example of whitespace characters \"\n    print(my_text)\n    result = re.sub(r'\\s+','',my_text)\n    print(result)\ndef remove_punctuation_characters(text):\n    '''\n    Write a function that removes all punctuation characters in a given string.\n    '''\n    return re.sub(r'[^\\w\\s]','',text)\n    #my_text = \"This is an example of punctuation characters\"\n    #print(my_text)\n    #result = re.sub(r'[^\\w\\s]','',my_text)\n    #print(result)\n    #my_text = \"!#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    #if re.search(r'[^\\w\\s]',my_text):\n    #    return re.sub(r'[^\\w\\s]','',my_text)\n    #return my_text\ndef remove_uppercase_characters(text):\n    '''\n    Write a function that removes all uppercase characters in a given string.\n    '''\n    #return re.sub(r'[^A-Z]','',text)\n    #my_text = \"This is an example of uppercase characters\"\n    #print(my_text)\n    #result = re.sub(r'[^A-Z]','',my_text)\n    #print(result)\n    #my_text = \"ABCD12345EFG\"\n    #if re.search(r'[^A-Z]',my_text):\n    #    return re.sub(r'[^A-Z]','',my_text)\n    #return my_text\n    my_text = \"ABCD12345EFG\"\n    print(my_text)\n    result = re.sub(r'[A-Z]','',my_text)\n    print(result)\ndef remove_lowercase_characters(text):\n    '"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r\"a.{2,3}b\")\n    if regex.search(text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    if pattern.search(text):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1*sys.maxsize\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            if curr_sum % k == 0:\n                max_sum = max(max_sum, curr_sum)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_max = 0\n    a.sort()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_sum = sum(a[i:j])\n            if k*sub_sum >= sum_max and sub_sum >= 0:\n                sum_max = k*sub_sum\n                if sum_max == 0 and k > 1:\n                    sum_max = sub_sum\n    return sum_max\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    max_sum = 0\n    for i in range(0, n):\n        for j in range(i + 1, n + 1):\n            max_sum = max(max_sum, sum(a[i:j]))\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = 0\n    curr_sum = 0\n    for i in range(n): \n        curr_sum += a[i] \n        if i >= k and (i - k) % n == 0: \n            curr_sum -= a[(i - k) / n] \n        if i >= k and i % n == 0: \n            l = max(l, curr_sum) \n    return l \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n): \n        if (i + k < n): \n            sum_arr = 0\n            for j in range(i, i + k): \n                sum_arr = sum_arr + a[j] \n            max_sum = max(max_sum, sum_arr) \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum array\n    s = [0]*(n+1)\n    for i in range(1, n+1):\n        s[i] = s[i-1]+a[i-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize result and current sum\n    max_sum = 0\n    curr_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the answer, a[i]\n    max_sum = a[0] \n    \n    # Initialize the prefix sum with 0\n    prefix_sum = 0\n    \n    # Repeat the loop k times\n    for i in range(k): \n        # Initialize the prefix_sum as 0\n        prefix_sum = 0\n        \n        # Repeat the loop for every element in the array\n        for j in range(i, n): \n            # Add the current element to prefix_sum\n            prefix_sum += a[j] \n            \n            # Check if current prefix_sum is larger than the maximum sum of subarray\n            if (prefix_sum > max_sum): \n                max_sum = prefix_sum \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initializing the first sub array to be considered\n    max_sum = 0\n    for i in range(k):\n        # initializing the max_sum for every sub array formed by\n        # appending the first element k times\n        max_sum += a[i]\n    \n    # if sum of sub arrays formed by repeating the first element\n    # is less than the sum of the first sub array formed by\n    # appending the first element k times, then we can't have\n    # a sum greater than max_sum\n    if (max_sum < sum_max_sum(a, n, k)):\n        print(-1)\n        return\n    \n    # initializing the maximum sub array sum\n    sum_max = max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            # The array is modified\n            if i % k == 0: \n                a[i] = a[i] + a[i - 1] \n    return max(a)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sums = 0\n    for i in range(n+1):\n        sums += i**2\n    return sums\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def sum_of_square(n):\n        sum = 0\n        for i in range(2,n+1,2):\n            sum += i**2\n        return sum\n    return sum_of_square(n)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x**2 for x in range(0,n+1,2))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_n = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_n += i*i\n    return sum_n\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(1, n+1) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #if n is even, then the sum of squares = square of sum\n    if n%2==0:\n        return n*(n+1)*(2*n+1)/6\n    #if n is odd, then the sum of squares = sum of squares of even natural numbers + square of sum of odd natural numbers\n    else:\n        return (square_Sum(int((n-1)/2)))**2 + (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n + 1, 2):\n        sum = sum + i * i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum += i**2\n    return sum\n    \nprint('Sum of squares of first n even natural numbers is: '+str(square_Sum(20)))\nprint('------------------------------------------------------')\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            even_sum += i*i\n    return even_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_num = range(2, n+1, 2)\n    return sum([i*i for i in even_num])\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    for i in list1:\n        if max_len < len(i):\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n            max_len_list=i\n    return max_len_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    result=[]\n    for i in list1:\n        if len(i)==len(list1[0]):\n            result.append(i)\n    \n    print(result)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_list = i\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return(max(map(len,list1)))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    len_list1 = len(list1)\n    max_len = 0\n    len_list2 = len(list1[0])\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max_length = 0\n    list_max_length = []\n    \n    for list_item in list1:\n        if len(list_item) > max_length:\n            list_max_length = [list_item]\n            max_length = len(list_item)\n        elif len(list_item) == max_length:\n            list_max_length.append(list_item)\n            \n    return list_max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_list=[]\n    for i in list1:\n        length_list.append(len(i))\n    return max(length_list)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_value = 0\n    max_length_index = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length_value:\n            max_length_value = len(list1[i])\n            max_length_index = i\n    return list1[max_length_index]\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l=[]\n    l1=[]\n    l2=[]\n    for i in list1:\n        l.append(len(i))\n    m=max(l)\n    for i in range(0,m):\n        for j in range(0,len(list1)):\n            if(len(list1[j])>i):\n                l1.append(list1[j][i])\n        l2.append(l1)\n        l1=[]\n    return(l2)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = [[0 for i in range(k+1)]for j in range(n+1)] \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create an array of n zeros, where i-th element has value of k \n    dp = [k] * n \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # global variable to memorize the number of ways to reach n \n    # with k possible colors\n    memo = {}\n    return count_no_of_ways_recursive(n, k, memo)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_of_ways(n, k, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # k colors => kCk ways\n    # if n is even => nCn ways\n    # if n is odd => nCk + nCk-1 ways\n    \n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n    \n    # when n = 0 or n = 1\n    # dp[0][x] = 1\n    # dp[1][x] = x\n    \n    for i in range(k):\n        dp[0][i] = 1\n    \n    for i in range(1, n+1):\n        for j in range(k):\n            # case 1: first post is red\n            dp[i][j] = dp[i-1][j]\n            \n            # case 2: first post is not red\n            if j!= 0:\n                dp[i][j] += dp[i-1][j-1]\n    \n    return dp[n][k-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    table = [0] * (n + 1)\n    table[0] = 1\n    for i in range(1, n+1):\n        j = 1\n        while j <= k and j <= i:\n            table[i] += table[i-j]\n            j += 1\n    return table[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return k \n    elif n == 2: \n        if k == 1: \n            return 3\n        elif k == 2: \n            return 4\n        else: \n            return 10\n    else: \n        if k == 1: \n            return n*k \n        elif k == 2: \n            return 2*(k**(n-1)) \n        else: \n            return (k**n)*(k**2)\n        \n    \ndef count_words(filename):\n    '''\n    Write a function to count the number of lines in a text file and return the number of characters in the file.\n    '''\n    with open(filename, \"r\") as file: \n        file.read()\n        return len(file.read())\n    \ndef count_words_iter(filename):\n    '''\n    Write a function to count the number of lines in a text file and return the number of characters in the file.\n    '''\n    with open(filename, \"r\") as file: \n        file.read()\n        return len(file.read().split(\"\\n\"))\n    \ndef parse_csv(filename, separator = \",\", quote = \"|\"):\n    '''\n    Write a function that takes a CSV file and returns a list of strings. Each string represents a row of the file.\n    '''\n    with open(filename, \"r\") as file: \n        rows = file.read().split(\"\\n\")\n        for row in rows:\n            for item in row.split(\",\"): \n                item.strip()\n            \n    return rows\n    \ndef parse_csv_iter(filename, separator = \",\", quote = \"|\"):\n    '''\n    Write a function that takes a CSV file and returns a list of strings. Each string represents a row of the file.\n    '''\n    with open(filename, \"r\") as file: \n        rows = file.read().split(\"\\n\")\n        for row in rows:\n            for item in row.split(\",\"): \n                item.strip()\n        \n    return rows\n    \ndef reverse_string(string):\n    '''\n    Write a function that takes a string and returns that string in reversed order.\n    '''\n    return string[::-1]\n    \ndef reverse_string_iter(string):\n    '''\n    Write a function that takes a string and returns that string in reversed order.\n    '''\n    string_list = list(string)\n    string_list.reverse()\n    return \"\".join(string_list)\n    \ndef string_reverser(string):\n    '''\n    Write a function that takes a string and returns that string in reversed order.\n    '''\n    string_list = list(string)\n    string_list.reverse()\n    return \"\".join(string_list)\n    \ndef string_reverser_iter(string):\n    '''\n    Write a function that takes a string and returns that string in reversed order.\n    '''\n    string_list = list(string)\n    for i in range(len(string_list)//2):\n        string_list[i], string_list[-i-1] = string_list[-i-1], string_list[i]\n    return \"\".join(string_list)\n    \ndef get_longest_word(string):\n    '''\n    Write a function that takes a string and returns the length of the longest word in the string. If there are two or more words that are the same length, return the first word in the string.\n    '''\n    string_list = string.split(\" \")\n    max_word = \"\"\n    for word in string_list:\n        if len(word) > len(max_word): \n            max_word = word\n            \n    return max_word\n    \ndef get_longest_word_iter(string):\n    '''\n    Write a function that takes a string and returns the length of the longest word in the string. If there are two or more words that are the same length, return the first word in the string.\n    '''\n    word_list = string.split(\" \")\n    max_word = \"\"\n    for word in word_list:\n        if len(word) > len(max_word):\n            max_word = word\n    return max_word\n    \ndef flip_case(string, to_upper = True):\n    '''\n    Write a function that takes a string and returns the string with uppercase characters converted to lowercase and vice versa.\n    '''\n    if to_upper: \n        return string.upper()\n    else: \n        return string.lower()\n    \ndef flip_case_iter(string, to_upper = True):\n    '''\n    Write a function that takes a string and returns the string with uppercase characters converted to lowercase and vice versa.\n    '''\n    if to_upper: \n        return string.upper()\n    else: \n        return string.lower()\n    \ndef count_vowels(string):\n    '''\n    Write a function that takes a string and returns the number of vowels (a, e, i, o, and u) that the string contains.\n    '''\n    return len([letter for letter in string if letter in \"aeiou\"])\n    \ndef count_vowels_iter(string):\n    '''\n    Write a function that takes a string and returns the number of vowels (a, e, i, o, and u) that the string contains.\n    '''\n    return sum([letter in \"aeiou\" for letter in string])\n    \ndef check_pangram(string):\n    '''\n    Write a function that takes a string and returns True if it is a pangram, False otherwise.\n    '''\n    string_list = sorted(list(string))\n    return string_list == \"abcdefghijklmnopqrstuvwxyz\"\n    \ndef check_pangram_iter(string):\n    '''\n    Write a function that takes a string and returns True if it is a pangram, False otherwise.\n    '''\n    return sorted(list(string)) == \"abcdefghijklmnopqrstuvwxyz\"\n    \ndef get_unique_characters(string):\n    '''\n    Write a function that takes a string and returns a list of all unique characters in the string.\n    '''\n    return list(set(string))\n    \ndef get_unique_characters_iter(string):\n    '''\n    Write a function that takes a string and returns a list of all unique characters in the string.\n    '''\n    return list(set(string))\n    \ndef get_unique_characters_without_duplicates(string):\n    '''\n    Write a function that takes a string and returns a list of all unique characters in the string.\n    '''\n    string_list = list(string)\n    unique_list = []\n    for character in string_list:\n        if character not in unique_list: \n            unique_list.append(character)\n    return unique_list\n    \ndef get_unique_characters_without_duplicates_iter(string):\n    '''\n    Write a function that takes a string and returns a list of all unique characters in the string.\n    '''\n    string_list = list(string)\n    unique_list = []\n    for character in string_list:\n        if character not in unique_list:\n            unique_list.append(character)\n    return unique_list\n    \ndef get_unique_characters_without_duplicates_no_set(string):\n    '''\n    Write a function that takes a string and returns a list of all unique characters in the string.\n    '''\n    string_list = list(string)\n    unique_list = []\n    for character in string_list:\n        if character not in unique_list:\n            unique_list.append(character)\n    return unique_list\n    \ndef get_unique_characters_without_duplicates_no_set_iter(string):\n    '''\n    Write a function that takes a string and returns a list of all unique characters in the string.\n    '''\n    string_list = list(string)\n    unique_list = []\n    for character in string_list:\n        if character not in unique_lis"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    for i in range(1, n):\n        if i < k:\n            ways = ways + count_no_of_ways(n - i, k - 1)\n        if i > 2:\n            ways = ways + count_no_of_ways(n - i, k)\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    cache = {}\n    def count_ways(n, k):\n        if (n, k) in cache:\n            return cache[n, k]\n        if n == 0 or k == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return k\n        cache[n, k] = count_ways(n-1, k) + count_ways(n-2, k)\n        return cache[n, k]\n    return count_ways(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return 0\n    else:\n        return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n//m\n    return result\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n % m == 0:\n        return n / m\n    else:\n        return n / m + 1\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif m == 0:\n        return float('inf')\n    elif m == 1:\n        return 1\n    else:\n        #logic\n        q = n//m\n        r = n%m\n        return find(q,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        quotient = n//m\n        return quotient\n    elif n<m:\n        quotient = m//n\n        return quotient\n    else:\n        return 1\n    \nprint(find(16,8))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #import numpy as np\n    try:\n        a = n / m\n    except ZeroDivisionError:\n        return \"cannot divide by zero\"\n    else:\n        return int(a)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    elif m > 0:\n        return n // m\n    else:\n        return -(abs(n) // abs(m))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    \n    if(n==0):\n        return m\n    if(m==0):\n        return n\n    if(n>=m):\n        quotient = n//m\n        return quotient\n    if(n<m):\n        quotient = m//n\n        return quotient\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        return n/m\n    else:\n        return m/n\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(w**2 + h**2)\n    a2=math.sqrt((w**2 + h**2)*(w**2 + h**2))\n    return math.sqrt(a2-a**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    import math\n    side = math.sqrt(w**2+h**2)\n    return side\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    import math\n    import numpy as np\n    a = np.sqrt((w**2) + (h**2))\n    b = np.sqrt(h**2 + (w**2))\n    c = np.sqrt(w**2 + (h**2))\n    if a == b:\n        return c\n    elif a == c:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        return h\n    else:\n        return w\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\ndef otherside_rightangle2(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(a**2 + b**2 - 2*a*b*math.cos(math.radians(c)))\ndef otherside_rectangle2(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return a*b/2\ndef print_dict(d):\n    '''\n    Write a function to print the values of a dictionary\n    '''\n    for i in d:\n        print(i,d[i])\ndef area_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_triangle2(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return a*b*c/2\ndef area_rectangle(a,b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return a*b\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return 3.14*r**2\ndef area_parallelogram(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return a*b\ndef area_parallelogram2(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return a*b\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return (a+b)*h/2\ndef area_trapezium2(a,b,h):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return a*b/2 + b*h/2\ndef area_parallelogram3(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return a*b\ndef area_parallelogram4(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return a*b\ndef print_dict_keys(d):\n    '''\n    Write a function to print the keys of a dictionary\n    '''\n    for i in d:\n        print(i)\ndef print_dict_values(d):\n    '''\n    Write a function to print the values of a dictionary\n    '''\n    for i in d:\n        print(d[i])\ndef print_dict_items(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d:\n        print(i,d[i])\ndef print_dict_items2(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i,j in d.items():\n        print(i,j)\ndef print_dict_items3(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i,j in d.items():\n        print(j,i)\ndef print_dict_items4(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i[1],i[0])\ndef print_dict_items5(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i[1])\ndef print_dict_items6(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i[0])\ndef print_dict_items7(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i)\ndef print_dict_items8(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i)\ndef print_dict_items9(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i,j in d.items():\n        print(j,i)\ndef print_dict_items10(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i[0],i[1])\ndef print_dict_items11(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i)\ndef print_dict_items12(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i,end='')\ndef print_dict_items13(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i,end='')\ndef print_dict_items14(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i,sep='',end='')\ndef print_dict_items15(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i,sep='',end='')\ndef print_dict_items16(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i,j in d.items():\n        print(j,i,end='')\ndef print_dict_items17(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i,j,end='')\ndef print_dict_items18(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i,j in d.items():\n        print(j,i,sep='',end='')\ndef print_dict_items19(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i,j in d.items():\n        print(j,i,sep='',end='')\ndef print_dict_items20(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i[0],i[1],sep='',end='')\ndef print_dict_items21(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i[1],i[0],sep='',end='')\ndef print_dict_items22(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i[0],i[1],sep='',end='')\ndef print_dict_items23(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n    for i in d.items():\n        print(i[1],i[0],sep='',end='')\ndef print_dict_items24(d):\n    '''\n    Write a function to print the items of a dictionary\n    '''\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2)\ndef otherside_square(side1,side2,side3):\n    '''\n    Write a function to find the third side of a right angled triangle given\n    the two other sides.\n    '''\n    return math.sqrt(side1**2 + side2**2 - 2*side1*side2*side3)\ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    return gcd(b, a%b)\ndef rotate_matrix(a):\n    '''\n    Write a function to rotate a 2D matrix 90 degrees.\n    '''\n    return [[row[i] for row in a[::-1]] for i in range(len(a))]\ndef find_rotation(matrix):\n    '''\n    Write a function to return the number of 90 degree rotations that need to\n    be made in order for the last column of the matrix to be in order from\n    left to right.\n    '''\n    n = len(matrix)\n    count = 0\n    for i in range(n):\n        if not matrix[i][n-1] == (matrix[i][0]):\n            count += 1\n    return count\ndef longest_palindrome_subsequence(string):\n    '''\n    Write a function to return the longest palindrome subsequence.\n    '''\n    n = len(string)\n    table = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    for i in range(n):\n        for j in range(i):\n            if string[j] == string[i]:\n                table[j][i] = table[j+1][i-1] + 2\n            else:\n                table[j][i] = max(table[j][i-1], table[j+1][i])\n    return table[0][n-1]\ndef longest_palindrome_substring(string):\n    '''\n    Write a function to return the longest palindrome substring.\n    '''\n    n = len(string)\n    table = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    for i in range(n-1):\n        if string[i] == string[i+1]:\n            table[i][i+1] = 2\n    for i in range(2,n):\n        for j in range(n-i):\n            if string[j] == string[j+i] and table[j+1][j+i-1] == i:\n                table[j][j+i] = i + 2\n            else:\n                table[j][j+i] = max(table[j][j+i-1], table[j+1][j+i])\n    return table[0][n-1]\ndef binary_search(array, target):\n    '''\n    Write a function to find an element in a sorted array using binary search.\n    '''\n    start = 0\n    end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\ndef merge_sort(array):\n    '''\n    Write a function to sort an array using the merge sort algorithm.\n    '''\n    n = len(array)\n    if n == 1:\n        return array\n    middle = n // 2\n    left = merge_sort(array[:middle])\n    right = merge_sort(array[middle:])\n    return merge(left, right)\ndef merge(left, right):\n    '''\n    Write a function to merge two sorted arrays into one.\n    '''\n    left_idx = right_idx = 0\n    result = []\n    while left_idx < len(left) and right_idx < len(right):\n        if left[left_idx] <= right[right_idx]:\n            result.append(left[left_idx])\n            left_idx += 1\n        else:\n            result.append(right[right_idx])\n            right_idx += 1\n    if left_idx < len(left):\n        result.extend(left[left_idx:])\n    if right_idx < len(right):\n        result.extend(right[right_idx:])\n    return result\ndef count_triplets(array, target):\n    '''\n    Write a function to find triplets in an array that sum to a target number.\n    '''\n    n = len(array)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if array[i] + array[j] + array[k] == target:\n                    return True\n    return False\ndef next_permutation(array):\n    '''\n    Write a function to find the next lexicographically smallest permutation\n    of a number.\n    '''\n    n = len(array)\n    for i in range(n-2, -1, -1):\n        if array[i] < array[i+1]:\n            break\n    if i == -1:\n        return False\n    for j in range(n-1, i, -1):\n        if array[j] > array[i]:\n            break\n    array[i], array[j] = array[j], array[i]\n    left = i + 1\n    right = n - 1\n    while left < right:\n        array[left], array[right] = array[right], array[left]\n        left += 1\n        right -= 1\n    return True\ndef find_nth_prime(n):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    count = 0\n    number = 2\n    while count < n:\n        if is_prime(number):\n            count += 1\n        if count == n:\n            break\n        number += 1\n    return number\ndef is_prime(number):\n    '''\n    Write a function to return True if a number is prime and False otherwise.\n    '''\n    if number == 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\ndef find_missing_number(array):\n    '''\n    Write a function to find the missing number in a sequence of numbers.\n    '''\n    n = len(array)\n    if n == 1:\n        return 1\n    expected_sum = (n*(n+1))//2\n    actual_sum = sum(array)\n    return expected_sum - actual_sum\ndef find_first_missing_positive(array):\n    '''\n    Write a function to find the first missing positive number in an unsorted\n    array of numbers.\n    '''\n    n = len(array)\n    for i in range(n):\n        while 1 <= array[i] <= n and array[i]!= array[array[i]-1]:\n            array[array[i]-1], array[i] = array[i], array[array[i]-1]\n    for i in range(n):\n        if array[i]!= i+1:\n            return i+1\n    return n+1\ndef get_missing_number(array):\n    '''\n    Write a function to find the missing number in an unsorted array of\n    numbers.\n    '''\n    n = len(array)\n    for i in range(n):\n        while 1 <= array[i] <= n and array[i]!= array[array[i]-1]:\n            array[array[i]-1], array[i] = array[i], array[array[i]-1]\n    for i in range(n):\n        if array[i]!= i+1:\n            return i+1\n    return n+1\ndef find_in_sorted_array(array, target):\n    '''\n    Write a function to find an element in a sorted array using binary searc"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # print(\"enter the base:\")\n    # b=float(input())\n    # print(\"enter the height:\")\n    # h=float(input())\n    # c=math.sqrt(b*b+h*h)\n    # return c\n    return math.sqrt(w*w+h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == 0 or h == 0:\n        return -1\n    return math.sqrt(h*h+w*w)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_num = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for x in listval:\n        if x > maxval:\n            maxval = x\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result=listval[0]\n    for x in listval:\n        if x>result:\n            result=x\n    return result\n    \nprint(max_val([1,2,3,5,8,0]))\nprint(max_val(['a','c','b','d']))\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1,len(listval)):\n        if(listval[i]>maxval):\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    #return max(listval)\n    #print('max_val(listval): ', listval)\n    max_val = listval[0]\n    if len(listval) > 1:\n        for item in listval:\n            #print('item: ', item)\n            if item > max_val:\n                max_val = item\n        return max_val\n    else:\n        return max_val\n        \n    \ndef max_val2(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    if len(listval) > 1:\n        for item in listval:\n            if item > max_val:\n                max_val = item\n        return max_val\n    else:\n        return max_val\n        \n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    print('This function calculates the maximum value in a given heterogeneous list')\n    max = listval[0]\n    for i in range(len(listval)):\n        if max < listval[i]:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for value in listval:\n        if value > max_val:\n            max_val = value\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = -1\n    if not listval:\n        return -1\n    for val in listval:\n        if type(val) is list:\n            maxval = max(maxval,max_val(val))\n        elif type(val) is tuple:\n            maxval = max(maxval,max_val(val))\n        else:\n            maxval = max(maxval,val)\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if(len(listval)==0):\n        return None\n    m=listval[0]\n    for x in listval:\n        if(x>m):\n            m=x\n    return m\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for i in listval:\n            if i > max_val:\n                max_val = i\n        return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([i for i in range(1, number+1) if number % i == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for x in range(1, number + 1):\n        if number % x == 0:\n            divisors += x\n    return divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Returns the sum of all divisors of the number entered.\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for x in range(1, number):\n        if number % x == 0:\n            total += x\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(range(1, number+1)) - number\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for n in range(2,number):\n        if number%n == 0:\n            divisors.append(n)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n    \n    \ndef sum_div(number):\n    return sum([x for x in range(1, number + 1) if number % x == 0])\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr,0,len(arr)-1) \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    def mergeSort(arr, n): \n        if n == 1:\n            return 0, arr\n        inv_count = 0\n        mid = n // 2\n        left, left_count = mergeSort(arr[:mid], mid)\n        right, right_count = mergeSort(arr[mid:], n - mid)\n        i, j = 0, 0\n        sorted_arr = []\n        while i < mid and j < n - mid:\n            if left[i] <= right[j]:\n                sorted_arr.append(left[i])\n                i += 1\n            else:\n                sorted_arr.append(right[j])\n                inv_count += mid - i\n                j += 1\n        if i == mid:\n            sorted_arr += right[j:]\n        if j == n - mid:\n            sorted_arr += left[i:]\n        return sorted_arr, inv_count + left_count + right_count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return count(arr,0,len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    merge_sort(arr)\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    arr = merge_sort(arr)\n    return arr[n-1]\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return _count_inversions(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = merge_sort(arr)\n    n = len(arr)\n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                count += 1\n    return count\n  \narr = [5, 4, 3, 2, 1]\nprint(\"The input array is:\", arr)\nprint(\"The number of inversions are:\", get_Inv_Count(arr)"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if(arr[i] > arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                count += 1\n    return count \ndef get_Inv_Count_Optimal(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2: \n        return 0\n    else: \n        return process(arr, 0, len(arr) - 1) \ndef process(arr, l, h): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if l == h: \n        return 0\n    else: \n        m = l + (h - l)//2\n        return (process(arr, l, m) + \n                process(arr, m + 1, h) + \n                merge(arr, l, m, h)) \ndef merge(arr, l, m, h): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n1 = m - l + 1\n    n2 = h - m \n    L = [0] * (n1) \n    R = [0] * (n2) \n    for i in range(0, n1): \n        L[i] = arr[l + i] \n    for j in range(0, n2): \n        R[j] = arr[m + 1 + j] \n    i = 0    \n    j = 0    \n    k = l    \n    inv_count = 0\n    while i < n1 and j < n2: \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n            inv_count += (n1 - i) \n        k += 1\n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n    return inv_count \narr = list(map(int,input(\"Enter the elements of the array: \").split()))\nn = len(arr) \nprint(\"Number of inversions are\",get_Inv_Count_Optimal(arr)) "
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return list1\n    return [e for inner in list1 for e in flatten_list(inner)]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if type(i) is list:\n            result += flatten_list(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in list1:\n        if type(i) is list:\n            for j in i:\n                print(j)\n        else:\n            print(i)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # return sum(list1, [])\n    # return [j for i in list1 for j in i]\n    flat_list = []\n    for element in list1:\n        if type(element) is list:\n            flat_list += flatten_list(element)\n        else:\n            flat_list.append(element)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for elem in list1:\n        if type(elem) == list:\n            list2 += flatten_list(elem)\n        else:\n            list2.append(elem)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1 = list1\n    if list1 == []:\n        return list1\n    else:\n        return [y for x in list1 for y in x]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def helper(list1):\n        res = []\n        for item in list1:\n            if isinstance(item, list):\n                res.extend(helper(item))\n            else:\n                res.append(item)\n        return res\n    return helper(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = defaultdict(list)\n    for item in stdata:\n        if 'c' in item:\n            agg[item[0]].append(float(item[1]))\n            agg[item[0]].append(float(item[2]))\n    return {k: max(v) for k, v in agg.items()}\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    output = defaultdict(list)\n    #creating a dictionary with key as the date and value as list of tuples with date as key and aggr values\n    for i in stdata:\n        output[i[0]].append(i[1])\n    output_data = dict()\n    #key is the date and value is the maximum of that day's aggregates\n    for i in output.keys():\n        max_val = 0\n        for j in output[i]:\n            max_val += int(j)\n        output_data[i] = max_val\n    return output_data\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    print(\"Input: {}\".format(stdata))\n    def max_aggregate_helper(stdata, start, end):\n        if start == end:\n            return stdata[start]\n        mid = (start + end) // 2\n        left = max_aggregate_helper(stdata, start, mid)\n        right = max_aggregate_helper(stdata, mid+1, end)\n        return max(left, right, key=lambda x: x[1])\n    return max_aggregate_helper(stdata, 0, len(stdata) - 1)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(lambda: 0)\n    for key, val in stdata:\n        d[key] = max(d[key], val)\n    return d\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uc11c\ube44\uc2a4', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uc11c\ube44\uc2a4', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uc11c\ube44\uc2a4', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uc11c\ube44\uc2a4', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uc11c\ube44\uc2a4', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '\uacf5\uc9c0\uc0ac\ud56d'), ('\uacf5\uc9c0\uc0ac\ud56d', '"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #stdata = [(0, 1), (4, 1), (5, 1), (6, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1)]\n    #stdata = [(0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]\n    max_sum = 0\n    max_st = None\n    for x, y in stdata:\n        if y > max_sum:\n            max_sum = y\n            max_st = x\n    return max_sum, max_st\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = []\n    for k in stdata:\n        x = stdata.count(k)\n        result.append((k,x))\n    return sorted(result, key=lambda x: x[0])\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #my_dict = {}\n    my_dict = defaultdict(int)\n    for k in stdata:\n        my_dict[k[0]] += k[1]\n    return sorted(my_dict.items(), key=lambda x: x[0])\n    \ndef check_aggregate(stdata):\n    my_dict = defaultdict(int)\n    for k in stdata:\n        my_dict[k[0]] += k[1]\n    if len(my_dict) == len(stdata):\n        print('All unique')\n    else:\n        print('Not all unique')\n    \ndef check_aggregate(stdata):\n    #my_dict = {}\n    my_dict = defaultdict(int)\n    for k in stdata:\n        my_dict[k[0]] += k[1]\n    #print(my_dict)\n    if len(my_dict) == len(stdata):\n        print('All unique')\n    else:\n        print('Not all unique')\n    \ndef check_aggregate(stdata):\n    #my_dict = {}\n    my_dict = defaultdict(int)\n    for k in stdata:\n        my_dict[k[0]] += k[1]\n    #print(my_dict)\n    if len(my_dict) == len(stdata):\n        print('All unique')\n    else:\n        print('Not all unique')\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # defaultdict will create a key with default value if it does not exist\n    # defaultdict allows you to iterate over the keys and values\n    aggregate_by_id = defaultdict(int)\n    for tid, tdata in stdata:\n        aggregate_by_id[tid] += tdata\n    print(aggregate_by_id)\n    return max(aggregate_by_id.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dic = defaultdict(list)\n    for key,value in stdata:\n        dic[key].append(value)\n    return max(dic.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg=0\n    for x in stdata:\n        if x[1]>max_agg:\n            max_agg=x[1]\n    return max_agg\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def dp(n, counter, state):\n        if n == 0:\n            return counter\n        \n        if state[n]:\n            return counter\n        \n        if n == 1:\n            counter += 1\n            state[n] = True\n            return dp(n - 1, counter, state)\n        \n        counter += 2 ** (n - 1)\n        state[n] = True\n        return dp(n - 1, counter, state)\n    \n    state = [False] * (n + 1)\n    counter = 0\n    print(dp(n, counter, state))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0 for j in range(2*n+1)]for i in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(2*i+1):\n            if j==0 or j==2*i:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j]+dp[i-1][j-1]\n    return dp[n][2*n]\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # dp[i] is the number of sequences that ends with 0 followed by i numbers with sum of first n bits equal to the sum of last n bits.\n    dp = [0]*(2*n + 1) \n    dp[n] = 2**n\n    dp[n + 1] = 1\n    for i in range(n + 2, 2*n + 1): \n        dp[i] = dp[i - 1] + dp[i - 2] \n    return dp[-1] \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    import math \n    total_number_of_seq = 0 \n    for i in range(1, 2**n): \n        # counting the number of binary sequences \n        total_number_of_seq += math.factorial(2**n) // (2**(n*2)) \n        \n    return total_number_of_seq \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    out = 0\n    for i in range(2**n):\n        for j in range(i, 2**n):\n            if sum(list(map(lambda x: int(x), list(bin(i)[2:].zfill(n))))) == sum(list(map(lambda x: int(x), list(bin(j)[2:].zfill(n))))):\n                out += 1\n    return out\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize result \n    count = 0\n    # Iterate till n and increment count in each iteration. \n    for i in range(1,n+1): \n        count += 2**i \n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seq(n, prev):\n        if n == 0:\n            return 1\n        res = 0\n        for i in range(2):\n            if prev & 1 == 0:\n                res += count_seq(n-1, prev ^ 1)\n        return res\n    return count_seq(n, 0)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0]*(n+1) for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if i == 1:\n                dp[i][j] = 1\n            elif i == j:\n                dp[i][j] = 1\n            elif i > j:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    return dp[n][n]\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    arr = []\n    for i in range(1 << (n*2)):\n        arr.append(bin(i))\n    for i in range(len(arr)):\n        arr[i] = arr[i][2:].zfill(n*2)\n    ans = []\n    for i in arr:\n        if i[:n] == i[n:]:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    count = 0\n    for i in range(0, 2**(2*n)):\n        if (i & (2**n)) >> n == (i & (2**(2*n-n))):\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + (max(map(dict_depth, d.values())) if isinstance(d, dict) else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    if type(d)!= dict:\n        raise TypeError('passed argument is not a dictionary')\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + (max(dict_depth(d[k]) if isinstance(d[k], dict) else 0 for k in d) if isinstance(d, dict) else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    else:\n        max_depth = 0\n        for key in d:\n            max_depth = max(max_depth, dict_depth(d[key]))\n        return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d:\n        depth += 1\n    return depth\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > len(arr)-1 :\n        return False\n    return arr[index+ranges[index]]\n    # return  arr[index+rotations]\n    \narr = [1,2,3,4,5,6,7]\nranges = 2\nrotations = 2\nindex = 2\nprint(find_Element(arr,ranges,rotations,index))\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (rotations>=len(ranges)) :\n        return None\n    if (index<0) :\n        return None\n    if (index>=len(arr)) :\n        return None\n    else :\n        return arr[ranges[index] + index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    for i in range(rotations) :\n        print(arr[(index+i)%n])\n        #arr[(index+i)%n] = arr[(index+i)%n] + 1\n    print(arr[index])\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)) :\n        if(index-rotations[i] >= 0):\n            index = index-rotations[i]\n    for i in range(len(ranges)):\n        if(index < ranges[i]):\n            return arr[i]\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    temp = 0\n    for i in range(index):\n        temp += rotations[i]\n    \n    return arr[ranges[temp % len(ranges)]]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = index % len(ranges)\n    count = 0\n    for i in ranges :\n        if(index+count < len(ranges) and arr[index+count] == i) :\n            count += rotations[index+count]\n        else :\n            return i\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        start = ranges[0]\n        end = ranges[1]\n        # print(start,end)\n        index = (start + index) % len(arr)\n        ranges[0] = start + 1\n        ranges[1] = end + 1\n        if index == 0:\n            return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    n = len(arr)\n    \n    if rotations == 0:\n        return arr[index]\n    \n    if rotations < 0:\n        rotations = abs(rotations)\n        for i in range(rotations):\n            arr = arr[n-1:] + arr[:n-1]\n        return arr[index]\n    \n    if rotations > 0:\n        for i in range(rotations):\n            arr = arr[1:] + arr[:1]\n        return arr[index]\n    \n    \n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    #from random import randint\n    #arr = [randint(0,100) for _ in range(100)]\n    #ranges = [range(1,101)]\n    #rotations = randint(1,100)\n    #index = randint(1,101)\n    \n    #element = find_Element(arr,ranges,rotations,index)\n    #print(f\"{element}\")\n    \n    \n    # arr = [1,2,3,4,5,6,7,8,9]\n    # rotations = 3\n    # index = 7\n    \n    # arr = [1,2,3,4,5,6,7,8,9]\n    # ranges = [range(1,10)]\n    # rotations = 3\n    # index = 5\n    \n    # arr = [1,2,3,4,5,6,7,8,9]\n    # ranges = [range(1,10)]\n    # rotations = 3\n    # index = 7\n    \n    # arr = [1,2,3,4,5,6,7,8,9]\n    # ranges = [range(1,10)]\n    # rotations = 3\n    # index = 8\n    \n    # arr = [1,2,3,4,5,6,7,8,9]\n    # ranges = [range(1,10)]\n    # rotations = 3\n    # index = 9\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 1\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 2\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 3\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 4\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 5\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 6\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 7\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 8\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 9\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 1\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 2\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 3\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 4\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 5\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 6\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 7\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 8\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 9\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 1\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 2\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 3\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 4\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 5\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 6\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 7\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 8\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 9\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 1\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 2\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 3\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3\n    #index = 4\n    \n    #arr = [1,2,3,4,5,6,7,8,9]\n    #ranges = [range(1,10)]\n    #rotations = 3"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    x = index\n    for i in range(ranges) :\n        rotations = rotations % len(arr)\n        x = x + rotations\n        x = x % len(arr)\n    print(x)\n    return arr[x]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words=[\"Python\",\"is\",\"for\",\"beginners\",\"like\",\"I\",\"learn\"]\n    i=0\n    while i<len(words):\n        if words[i][0]==\"p\":\n            print(words[i],words[i+1])\n            break\n        i+=1\ndef len_sentence(sentence):\n    '''\n    Write a function to return length of a sentence.\n    '''\n    sentence=\"I have learned Python for a year\"\n    print(len(sentence))\ndef split_string(sentence):\n    '''\n    Write a function to split a sentence into words.\n    '''\n    print(sentence.split())\ndef test(sentence):\n    '''\n    Write a function to test if a sentence is a palindrome.\n    '''\n    if sentence == sentence[::-1]:\n        print(sentence+\" is palindrome.\")\n    else:\n        print(sentence+\" is not palindrome.\")\ndef replace_space(sentence):\n    '''\n    Write a function to replace all spaces in a sentence with \"%20\".\n    '''\n    print(re.sub(r'\\s+','%20',sentence))\ndef remove_char(sentence):\n    '''\n    Write a function to remove all spaces in a sentence.\n    '''\n    print(sentence.replace(\" \",\"\"))\ndef replace_with_r(sentence):\n    '''\n    Write a function to replace all the spaces with \"%20\" in a sentence without affecting the other characters.\n    '''\n    print(sentence.replace(\" \",\"%20\"))\ndef replace_with_r_in_list(sentence):\n    '''\n    Write a function to replace all the spaces with \"%20\" in a sentence without affecting the other characters.\n    '''\n    words=sentence.split()\n    for word in words:\n        print(word.replace(\" \",\"%20\"),end=\" \")\ndef extract_numbers(sentence):\n    '''\n    Write a function to extract all the numbers from a sentence.\n    '''\n    print(\"\".join(re.findall(\"[0-9]\",sentence)))\ndef find_p_letter(sentence):\n    '''\n    Write a function to find all the position of the first occurence of the letter \"p\" in a given sentence.\n    '''\n    print([i for i in range(len(sentence)) if sentence[i]==\"p\"])\ndef add_string(str1,str2):\n    '''\n    Write a function to add two strings.\n    '''\n    print(str1+str2)\ndef sort_word(sentence):\n    '''\n    Write a function to sort the words in a given sentence by length.\n    '''\n    words=sentence.split()\n    words.sort(key=len)\n    print(\" \".join(words))\ndef max_num(sentence):\n    '''\n    Write a function to find the largest number in a sentence.\n    '''\n    nums=re.findall(\"[0-9]\",sentence)\n    print(max(nums))\ndef sorted_list(sentence):\n    '''\n    Write a function to find the longest words in a sentence.\n    '''\n    words=sentence.split()\n    words.sort(key=len)\n    print(words[-1])\ndef sum_num(sentence):\n    '''\n    Write a function to add all the numbers in a sentence.\n    '''\n    nums=re.findall(\"[0-9]\",sentence)\n    print(sum([int(x) for x in nums]))\ndef sum_num_in_string(sentence):\n    '''\n    Write a function to add all the numbers in a sentence without using regex.\n    '''\n    num=0\n    words=sentence.split()\n    for word in words:\n        for char in word:\n            if char.isdigit():\n                num+=int(char)\n    print(num)\ndef reverse_string(sentence):\n    '''\n    Write a function to reverse a string without using built-in functions.\n    '''\n    print(sentence[::-1])\ndef palindrome(sentence):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if sentence == sentence[::-1]:\n        print(sentence+\" is palindrome.\")\n    else:\n        print(sentence+\" is not palindrome.\")\ndef generate_pattern(n):\n    '''\n    Write a function to generate a pattern without using regular expression.\n    '''\n    pattern=\"\"\n    for i in range(n):\n        pattern+=\"a\"*i\n        print(pattern)\ndef convert_string(sentence):\n    '''\n    Write a function to convert a sentence into an integer.\n    '''\n    print(int(\"\".join(re.findall(\"[0-9]\",sentence))))\ndef max_word_length(sentence):\n    '''\n    Write a function to find the longest word in a sentence.\n    '''\n    print(max([len(word) for word in sentence.split()]))\ndef unique_word(sentence):\n    '''\n    Write a function to find the number of unique words in a sentence.\n    '''\n    print(len(set(sentence.split())))\ndef sum_word(sentence):\n    '''\n    Write a function to find the sum of the number of unique words in a sentence.\n    '''\n    print(sum([len(set(word.split())) for word in sentence.split()]))\ndef count_special_character(sentence):\n    '''\n    Write a function to count the number of special characters in a sentence.\n    '''\n    print(sum([len(re.findall(\"[!@#$%^&*()_;'?.,]\",sentence))]))\ndef sum_special_characters(sentence):\n    '''\n    Write a function to sum all the numbers in a sentence.\n    '''\n    print(sum([len(re.findall(\"[!@#$%^&*()_;'?.,]\",sentence))]))\ndef is_match(regex,sentence):\n    '''\n    Write a function to test if a given string is a match for the given regular expression.\n    '''\n    pattern=re.compile(regex)\n    print(re.search(pattern,sentence))\ndef search_word(sentence):\n    '''\n    Write a function to search for the occurrence of a word in a given sentence.\n    '''\n    words=sentence.split()\n    for word in words:\n        if \"Python\" in word:\n            print(word+\" is found\")\n            break\ndef convert_lower_case(sentence):\n    '''\n    Write a function to convert a sentence into a lowercase.\n    '''\n    print(sentence.lower())\ndef check_sentence(sentence):\n    '''\n    Write a function to check if a sentence ends with a period.\n    '''\n    if sentence[-1]==\".\":\n        print(\"The sentence ends with a period.\")\n    else:\n        print(\"The sentence does not end with a period.\")\ndef remove_end_space(sentence):\n    '''\n    Write a function to remove all the spaces from a sentence.\n    '''\n    print(sentence.rstrip(\" \"))\ndef replace_char(sentence):\n    '''\n    Write a function to replace the word of a sentence.\n    '''\n    print(sentence.replace(\"Python\",\"C\"))\ndef replace_with_space(sentence):\n    '''\n    Write a function to replace a sentence with a space between the words.\n    '''\n    print(sentence.replace(\"Python\",\" \"))\ndef remove_char_with_strip(sentence):\n    '''\n    Write a function to remove a character from a sentence.\n    '''\n    print(sentence.strip(\"a\"))\ndef replace_word(sentence):\n    '''\n    Write a function to replace a word with another word.\n    '''\n    print(sentence.replace(\"learn\",\"learn\"))\ndef remove_punctuation(sentence):\n    '''\n    Write a function to remove all the punctuations from a sentence.\n    '''\n    print(sentence.translate({or"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_list=words.split(' ')\n    res=[]\n    for i in words_list:\n        if re.match(r'^p.*',i):\n            res.append(i)\n    return res[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    w=[]\n    for word in words:\n        if word.startswith('p')==True:\n            w.append(word)\n    return w\nprint(start_withp(['pig','piglet','piglet', 'pig', 'piglet', 'piglet']))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result=[]\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            result.append(words[i])\n    return result[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    wordlist=[]\n    for word in words:\n        if word[0]=='p' or word[0]=='P':\n            wordlist.append(word)\n    return wordlist\n    \ndef end_withq(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'q'.\n    '''\n    wordlist=[]\n    for word in words:\n        if word[len(word)-1]=='q' or word[len(word)-1]=='Q':\n            wordlist.append(word)\n    return wordlist\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words == []:\n        return []\n    elif words[0][0] == 'p':\n        return words[0], words[1]\n    else:\n        return start_withp(words[1:])\n    \ndef print_content(t):\n    '''\n    Write a function to print content of tuple.\n    '''\n    if t == ():\n        print('Empty tuple.')\n    else:\n        print(t)\n        print_content(t[1:])\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match(r'^p', word):\n            print(word)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\nprint(start_withp([\"pale\", \"ple\", \"panda\"]))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    my_list = [\"Python\", \"is\", \"a\", \"programming\", \"language\", \"written\", \"by\", \"Guido\", \"van\", \"Rossum\", \"and\", \"first\", \"released\", \"in\", \"1991.\"]\n    # my_list = [\"Python\", \"is\", \"a\", \"programming\", \"language\", \"written\", \"by\", \"Guido\", \"van\", \"Rossum\", \"and\", \"first\", \"released\", \"in\", \"1991.\"]\n    # my_list = [\"Python\", \"is\", \"a\", \"programming\", \"language\", \"written\", \"by\", \"Guido\", \"van\", \"Rossum\", \"and\", \"first\", \"released\", \"in\", \"1991.\"]\n    \n    new_list = []\n    for item in my_list:\n        if item.startswith(\"p\"):\n            new_list.append(item)\n            # print(item)\n    \n    print(new_list)\n    print(\"*\"*10)\n    \n    new_list = [item for item in my_list if item.startswith(\"p\")]\n    print(new_list)\n    print(\"*\"*10)\n    \n    new_list = list(filter(lambda x:x.startswith(\"p\"), my_list))\n    print(new_list)\n    \n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    \n    \n    \n    result = []\n    for w in words:\n        if w.startswith(\"p\") and len(w)>1:\n            result.append(w)\n    return result\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    if k == 0:\n        return 0\n    if k == 1:\n        return max(a[index], a[k-1])\n    elif k == n:\n        return max(a[k], a[index])\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[k] + max_sum_increasing_subseq(a, n, index + 1, k - 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    if k == 0:\n        return a[0]\n    max_sum = 0\n    for i in range(index, n):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i+1, k+1))\n        if k <= i:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i+1, k))\n        if k == 1:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i+1, k)) + a[i]\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == index:\n        return max(a[index], 0)\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + k // n, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return -1\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # if only 1 element is there in array return 0\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global memo\n    global dp\n    global num_decimal_places\n    memo = {}\n    dp = []\n    num_decimal_places = 7\n    for i in range(n+1):\n        dp.append(0)\n    return max_sum_increasing_subseq_helper(a, n, k)\n    \ndef max_sum_increasing_subseq_helper(a, n, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return a[k-1]\n    if (n, k) in memo:\n        return memo[(n, k)]\n    max_sum = float('-inf')\n    for i in range(1, k):\n        max_sum = max(max_sum, max_sum_increasing_subseq_helper(a, n, i))\n    max_sum = max(max_sum, a[k-1] + max_sum_increasing_subseq_helper(a, n, k-1))\n    memo[(n, k)] = max_sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    return max(max_sum_increasing_subseq(a, n, i + 1, k) + a[i] if i < k else 0 for i in range(n))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 1:\n        return sum(a)\n    elif k == 2:\n        return max(a[0], a[1])\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    include = max_sum_increasing_subseq(a, n, index + 1, k)\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return max(include, exclude) + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0:\n        return 0\n    if k < 0:\n        return 0\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l = len(tuplex)\n    t = [list(tuplex[i:i+m]) for i in range(0,l,m)]\n    return tuple(t)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:m+i] for i in range(0, n))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # We create an empty list\n    new_tuplex = []\n    # We print the colon\n    for i in range(len(tuplex)):\n        if i!= m:\n            new_tuplex.append(tuplex[i])\n    return tuple(new_tuplex)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>len(tuplex) or n>len(tuplex):\n        return \"Not enough element.\"\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_colon = [tuplex[i:i+n] for i in range(0,m,n)]\n    return tuplex_colon\n    \ndef find_max(tuplex):\n    '''\n    Write a function to find the max value in a tuple.\n    '''\n    tuplex = list(tuplex)\n    max_num = max(tuplex)\n    return max_num\n    \ndef find_min(tuplex):\n    '''\n    Write a function to find the min value in a tuple.\n    '''\n    tuplex = list(tuplex)\n    min_num = min(tuplex)\n    return min_num\n    \ndef sum_tuplex(tuplex):\n    '''\n    Write a function to add all the numbers in a tuple.\n    '''\n    sum_num = sum(tuplex)\n    return sum_num\n    \ndef average(tuplex):\n    '''\n    Write a function to get the average value in a tuple.\n    '''\n    tuplex = list(tuplex)\n    avg = sum(tuplex) / len(tuplex)\n    return avg\n    \ndef tuple_print(tuplex,width=10):\n    '''\n    Write a function to print tuple in columns.\n    '''\n    print('{:{width}}'.format('|'.join(str(i) for i in tuplex),width=width),end='\\n')\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    n_tuplex = []\n    for i in range(0,n):\n        n_tuplex.append(tuplex[i*m:(i+1)*m])\n    n_tuplex = tuple(n_tuplex)\n    return n_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = ()\n    for index in range(m,n+1):\n        new_tuplex = new_tuplex + (tuplex[index],)\n    return new_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==1:\n        return tuplex\n    else:\n        if m>n:\n            tuplex+=((),)\n            return colon_tuplex(tuplex,m-1,n)\n        else:\n            return colon_tuplex(tuplex+(tuple(),),m-1,n)\ndef comma_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a comma of a tuple.\n    '''\n    if m==1:\n        return tuplex\n    else:\n        if m>n:\n            tuplex+=(tuple(),)\n            return comma_tuplex(tuplex,m-1,n)\n        else:\n            return comma_tuplex(tuplex+tuple(),m-1,n)\ndef len_tuplex(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    if len(tuplex)==0:\n        return 0\n    else:\n        return 1+len_tuplex(tuplex[1:])\ndef reverse_tuplex(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        return reverse_tuplex(tuplex[1:])+(tuplex[0],)\ndef nth_tuplex(tuplex,n):\n    '''\n    Write a function to get nth of tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        return nth_tuplex(tuplex[1:],n+1)\ndef copy_tuplex(tuplex):\n    '''\n    Write a function to deepcopy a tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        return copy_tuplex(tuplex[1:])+tuplex[:1]\ndef max_tuplex(tuplex):\n    '''\n    Write a function to get the maximum value of tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        return max(tuplex[0],max_tuplex(tuplex[1:]))\ndef min_tuplex(tuplex):\n    '''\n    Write a function to get the minimum value of tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        return min(tuplex[0],min_tuplex(tuplex[1:]))\ndef del_tuplex(tuplex,n):\n    '''\n    Write a function to delete nth of tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        if n==0:\n            return tuplex[1:]\n        else:\n            return del_tuplex(tuplex[1:],n-1)\ndef remove_tuplex(tuplex,val):\n    '''\n    Write a function to remove the value in tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        if tuplex[0]==val:\n            return remove_tuplex(tuplex[1:],val)\n        else:\n            return (tuplex[0],)+(remove_tuplex(tuplex[1:],val),)\ndef del_dup_tuplex(tuplex):\n    '''\n    Write a function to delete the duplicated value in tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        if tuplex[0] in tuplex[1:]:\n            return del_dup_tuplex(tuplex[1:])\n        else:\n            return (tuplex[0],)+(del_dup_tuplex(tuplex[1:]),)\ndef count_tuplex(tuplex,val):\n    '''\n    Write a function to count how many times the value is in tuple.\n    '''\n    if len(tuplex)==0:\n        return 0\n    else:\n        if val==tuplex[0]:\n            return 1+count_tuplex(tuplex[1:],val)\n        else:\n            return 0+count_tuplex(tuplex[1:],val)\ndef union_tuplex(tuplex_1,tuplex_2):\n    '''\n    Write a function to get a union of two tuples.\n    '''\n    if len(tuplex_1)==0:\n        return tuplex_2\n    else:\n        if tuplex_1[0]<tuplex_2[0]:\n            return (tuplex_1[0],)+(union_tuplex(tuplex_1[1:],tuplex_2),)\n        else:\n            return (tuplex_2[0],)+(union_tuplex(tuplex_1,tuplex_2[1:]),)\ndef intersection_tuplex(tuplex_1,tuplex_2):\n    '''\n    Write a function to get a intersection of two tuples.\n    '''\n    if len(tuplex_1)==0:\n        return tuplex_1\n    else:\n        if tuplex_1[0]<tuplex_2[0]:\n            return (tuplex_1[0],)+(intersection_tuplex(tuplex_1[1:],tuplex_2),)\n        else:\n            if tuplex_1[0]==tuplex_2[0]:\n                return (tuplex_1[0],)+(intersection_tuplex(tuplex_1[1:],tuplex_2[1:]),)\n            else:\n                return ()\ndef in_tuplex(tuplex_1,tuplex_2):\n    '''\n    Write a function to get a boolean whether two tuples have the same elements.\n    '''\n    if len(tuplex_1)==0:\n        return True\n    else:\n        if tuplex_1[0]==tuplex_2[0]:\n            return True and in_tuplex(tuplex_1[1:],tuplex_2[1:])\n        else:\n            return False\ndef reverse_list(tuplex):\n    '''\n    Write a function to reverse a list.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        return (tuplex[-1],)+(reverse_list(tuplex[:-1]),)\ndef sort_tuplex(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        if tuplex[0]>=tuplex[1]:\n            return (tuplex[1],)+(sort_tuplex(tuplex[2:]),)\n        else:\n            return (tuplex[0],)+(sort_tuplex(tuplex[1:]),)\ndef nth_last_tuplex(tuplex,n):\n    '''\n    Write a function to get the nth last value of tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        return nth_last_tuplex(tuplex[1:],n+1)\ndef remove_tuplex(tuplex,val):\n    '''\n    Write a function to remove the value in tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    else:\n        if tuplex[0]==val:\n            return remove_tuplex(tuplex[1:],val)\n        else:\n            return (tuplex[0],)+(remove_tuplex(tuplex[1:],val),)\ndef del_du"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = tuplex[0:m]\n    b = tuplex[m:n]\n    c = (a,b)\n    return c\ndef change_tuplex(tuplex):\n    '''\n    Write a function to change a tuple.\n    '''\n    a = tuplex\n    a = list(a)\n    a[0] = a[0] * 2\n    a[1] = a[1] * 2\n    a = tuple(a)\n    return a"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for num1 in nums1[:N]:\n        for num2 in nums2[:N]:\n            result.append(num1*num2)\n    result.sort(reverse=True)\n    return result[N-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        result.append(nums1[i]*nums2[i])\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def largest_product(nums1, nums2):\n        if len(nums1) > len(nums2):\n            return largest_product(nums2, nums1)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort(reverse=True)\n    \n    max_products = []\n    \n    i = 0\n    j = 0\n    \n    while i < N and j < N:\n        if nums1[i] * nums2[j] > max_products[-1]:\n            max_products.append(nums1[i] * nums2[j])\n        if i < N - 1:\n            i += 1\n        if j < N - 1:\n            j += 1\n    \n    return max_products\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    prod_list = []\n    for i in range(0, N):\n        prod = nums1[i]*nums2[i]\n        prod_list.append(prod)\n    return(sorted(prod_list)[::-1])\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = list(set(nums1))\n    nums2 = list(set(nums2))\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) + len(nums2):\n        print('N exceeds the number of factors in the lists')\n        return\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    p = []\n    for i in range(N):\n        a = nums1.pop()\n        b = nums2.pop()\n        p.append(a*b)\n    return p\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_prod = 0\n    max_prod_index = (None, None)\n    for i in range(N):\n        for j in range(N):\n            if max_prod < nums1[i]*nums2[j]:\n                max_prod = nums1[i]*nums2[j]\n                max_prod_index = (i, j)\n    return max_prod, max_prod_index\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a,\" is the maximum\")\n    elif a==b:\n        print(\"Both numbers are equal\")\n    else:\n        print(b,\" is the maximum\")\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if (a > b) else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(a)\n    else:\n        print(b)\n    return\nmaximum(10,20)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b :\n        return a\n    elif a < b:\n        return b\n    else:\n        return \"Both are equal\"\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \ndef maximum_of_three(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return maximum(a,maximum(b,c))\n    \n    \ndef maximum_of_four(a,b,c,d):\n    '''\n    Write a python function to find the maximum of four numbers.\n    '''\n    return maximum(maximum_of_three(a,b,c),d)\n    \n    \ndef main():\n    '''\n    This function demonstrates the maximum_of_four function.\n    '''\n    print(maximum_of_four(12,23,3,4))\n    print(maximum_of_four(15,6,9,2))\n    print(maximum_of_four(3,4,6,9))\n    print(maximum_of_four(3,6,9,3))\n    print(maximum_of_four(3,6,9,0))\n    print(maximum_of_four(0,0,0,0))\n    \n    \nif __name__ == '__main__':\n    main()\n    \n    "
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum_of_three(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return maximum(a,maximum(b,c))\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimum_of_three(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return minimum(a,minimum(b,c))\ndef absolute_value(a):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    if a<0:\n        return -a\n    else:\n        return a\ndef absolute_value_of_three(a,b,c):\n    '''\n    Write a python function to find the absolute value of three numbers.\n    '''\n    return absolute_value(a)+absolute_value(b)+absolute_value(c)\ndef power(a,b):\n    '''\n    Write a python function to compute the power of a number.\n    '''\n    return a**b\ndef power_of_three(a,b):\n    '''\n    Write a python function to compute the power of three numbers.\n    '''\n    return a**b\ndef quadratic_equation(a,b,c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    return -b/2*a\ndef quadratic_equation_of_three(a,b,c):\n    '''\n    Write a python function to solve a quadratic equation of three numbers.\n    '''\n    if quadratic_equation(a,b,c)>0:\n        return quadratic_equation(a,b,c)\n    elif quadratic_equation(a,b,c)<0:\n        return quadratic_equation(a,b,c)*(-1)\n    else:\n        return quadratic_equation(a,b,c)\ndef cubic_equation(a,b,c,d):\n    '''\n    Write a python function to solve a cubic equation.\n    '''\n    return -b/3*a-b*c/3*a-b**2/27*a**3+d/2*a\ndef cubic_equation_of_three(a,b,c,d):\n    '''\n    Write a python function to solve a cubic equation of three numbers.\n    '''\n    if cubic_equation(a,b,c,d)>0:\n        return cubic_equation(a,b,c,d)\n    elif cubic_equation(a,b,c,d)<0:\n        return cubic_equation(a,b,c,d)*(-1)\n    else:\n        return cubic_equation(a,b,c,d)\ndef leap_year(a):\n    '''\n    Write a python function to check if a year is a leap year or not.\n    '''\n    return a%4==0\ndef leap_year_of_three(a,b,c):\n    '''\n    Write a python function to check if three years are leap years or not.\n    '''\n    if leap_year(a)==False:\n        return False\n    elif leap_year(b)==False:\n        return False\n    elif leap_year(c)==False:\n        return False\n    else:\n        return True\ndef is_palindrome(a):\n    '''\n    Write a python function to check if a word is a palindrome or not.\n    '''\n    return a==a[::-1]\ndef is_palindrome_of_three(a,b,c):\n    '''\n    Write a python function to check if three words are palindrome or not.\n    '''\n    if is_palindrome(a)==False:\n        return False\n    elif is_palindrome(b)==False:\n        return False\n    elif is_palindrome(c)==False:\n        return False\n    else:\n        return True\ndef reverse(a):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return a[::-1]\ndef reverse_of_three(a,b,c):\n    '''\n    Write a python function to reverse three strings.\n    '''\n    return reverse(a)+reverse(b)+reverse(c)\ndef factorial(a):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    result=1\n    for i in range(1,a+1):\n        result=result*i\n    return result\ndef factorial_of_three(a,b,c):\n    '''\n    Write a python function to compute the factorial of three numbers.\n    '''\n    return factorial(a)+factorial(b)+factorial(c)\ndef is_prime(a):\n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return False\n    return True\ndef is_prime_of_three(a,b,c):\n    '''\n    Write a python function to check if three numbers are prime numbers or not.\n    '''\n    for i in range(2,int(a/2)+1):\n        if a%i==0:\n            return False\n    for i in range(2,int(b/2)+1):\n        if b%i==0:\n            return False\n    for i in range(2,int(c/2)+1):\n        if c%i==0:\n            return False\n    return True\ndef primorial(a):\n    '''\n    Write a python function to compute the primorial of a number.\n    '''\n    result=1\n    for i in range(2,a+1):\n        result=result*i\n    return result\ndef primorial_of_three(a,b,c):\n    '''\n    Write a python function to compute the primorial of three numbers.\n    '''\n    return primorial(a)+primorial(b)+primorial(c)\ndef reverse_digit(a):\n    '''\n    Write a python function to reverse the digits of a number.\n    '''\n    return int(str(a)[::-1])\ndef reverse_digit_of_three(a,b,c):\n    '''\n    Write a python function to reverse the digits of three numbers.\n    '''\n    return int(str(a)[::-1])+int(str(b)[::-1])+int(str(c)[::-1])\ndef palindrome(a):\n    '''\n    Write a python function to check if a word is palindrome or not.\n    '''\n    return a==a[::-1]\ndef palindrome_of_three(a,b,c):\n    '''\n    Write a python function to check if three words are palindrome or not.\n    '''\n    if palindrome(a)==False:\n        return False\n    elif palindrome(b)==False:\n        return False\n    elif palindrome(c)==False:\n        return False\n    else:\n        return True\ndef cube_root(a):\n    '''\n    Write a python function to compute the cube root of a number.\n    '''\n    return a**(1/3)\ndef cube_root_of_three(a,b,c):\n    '''\n    Write a python function to compute the cube root of three numbers.\n    '''\n    return cube_root(a)+cube_root(b)+cube_root(c)\ndef digital_root(a):\n    '''\n    Write a python function to compute the digital root of a number.\n    '''\n    result=0\n    for i in str(a):\n        result=result+int(i)\n    return result\ndef digital_root_of_three(a,b,c):\n    '''\n    Write a python function to compute the digital root of three numbers.\n    '''\n    return digital"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = tuple(str1)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    my_list = []\n    for char in str1:\n        my_list.append(char)\n    my_tuple = tuple(my_list)\n    return my_tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1=str1[::-1]\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(list(str1))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    print(str1)\n    return str1\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n ^= (n - 1) \n    return n \n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bits = []\n    for i in range(0, 32):\n        mask = 1 << i\n        if (n & mask) == 0:\n            set_bits.append(i)\n    if len(set_bits) > 0:\n        return set_bits[0]\n    else:\n        return 0\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = (n & -n) \n    return x\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return set_left_most_unset_bit(n & (n-1))\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n & ~(n - 1)\n    return x\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= n - 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # To extract rightmost set bit  \n    # in n \n    n &= n - 1\n    # n is divided by 2  \n    # in each step. \n    return n\n    \ndef set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # To extract rightmost set bit  \n    # in n \n    n &= n - 1\n    # n is divided by 2  \n    # in each step. \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    num_set_bits = 0\n    while (n): \n        num_set_bits += n & 1\n        n >>= 1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n ^= (n & -n)\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*(r**2)*(h/3)\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * (r**2) * h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def vol(r,h):\n        v = (1/3)*math.pi*(r**2)*h\n        return v\n    return vol(r,h)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(math.pi)*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print(math.pi*(r**2)*h/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Your code here\n    return math.pi * r**2 * h / 3\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r<=0 or h<=0:\n        return \"Invalid Input\"\n    else:\n        return ((math.pi*(r**2))*h)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi)*((r**2)*h)/3\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<=1:\n        return 1\n    elif n%2:\n        return highest_Power_of_2(n//2)\n    else:\n        return highest_Power_of_2(n//2)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i * 2\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return highest_Power_of_2(n/2) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(1, n+1):\n        if(i == 2**i):\n            return i\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n            n = n / 2\n        else:\n            n -= 1\n    return count\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPower2 = 0\n    for i in range(n+1):\n        if (highestPower2 == 0):\n            if ((1 << i) == n):\n                highestPower2 = i\n        else:\n            if ((1 << i) > n):\n                highestPower2 = i-1\n                break\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Base case \n    if (n == 0): \n        return 0\n    \n    # If n is a power of 2, return n \n    if (n & (n - 1) == 0): \n        return n \n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    \n    i=0\n    while(2**i<=n):\n        i+=1\n    return i-1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==1:\n        return 1\n    return int(log(n,2))+1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return (1 << (i - 1))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 2\n    b = 1\n    for i in range(n-1):\n        c = a + b\n        b = a\n        a = c\n    return a\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # return 2 if n == 0 else 2 if n == 1 else 1 + find_lucas(n-2)\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2, 1] \n    if n <= 2:\n        return lucas[n - 1]\n    for i in range(2, n):\n        lucas.append(lucas[i - 1] + lucas[i - 2])\n    return lucas[n - 1]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = abs(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    def lucas(n):\n        if n == 0:\n            return 2\n        if n == 1:\n            return 1\n        if n > 1:\n            return lucas(n-1) + lucas(n-2)\n            \n    if n < 0:\n        return \"Please enter a positive integer.\"\n    \n    return lucas(n)\n        \n    \n    \ndef sum_series(n, x = 0, y = 1):\n    '''\n    Write a function that returns the nth value of a summation series.\n    \n    :param n0=0: \n    :param x=0: \n    :param y=1: \n    :return: \n    \n    Examples\n    \n    #>>> sum_series(1)\n    1\n    \n    #>>> sum_series(3, 1, 2)\n    3\n    \n    #>>> sum_series(5, 3, 2)\n    7\n    \n    #>>> sum_series(7, 3, 2)\n    9\n    \n    Notes\n    \n    - The default values are given in the template\n    - You can modify any of the default values in the function signature\n    - The function should not allow n to be less than 0\n    '''\n    \n    if n < 0:\n        return \"Please enter a positive integer.\"\n    \n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    if n > 1:\n        return sum_series(n-1, x, y) + sum_series(n-2, x, y)\n        \n        \n        \ndef fibonacci(n):\n    '''\n    Write a function that takes in a number n, and returns the nth Fibonacci number.\n    '''\n    \n    if n < 0:\n        return \"Please enter a positive integer.\"\n        \n    def fibonacci(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n > 1:\n            return fibonacci(n-1) + fibonacci(n-2)\n        \n    return fibonacci(n)\n        \n    \n    \ndef count_primes(n):\n    '''\n    Write a function to return the number of prime numbers that exist up to and including a given number\n    \n    :param n = 100: \n    :return: the number of prime numbers,\n    \n    Hint: The Sieve of Eratosthenes is an algorithm used to generate all prime numbers smaller than n\n    '''\n    \n    def sieve_of_eratosthenes(n):\n        if n < 2:\n            return 0\n        if n == 2:\n            return 2\n        if n > 2:\n            prime_array = [i for i in range(n)]\n            prime_array[1] = 0\n            for i in range(2, n):\n                if prime_array[i]!= 0:\n                    j = i + i\n                    while j < n:\n                        prime_array[j] = 0\n                        j += i\n            count = 0\n            for i in prime_array:\n                if i!= 0:\n                    count += 1\n            return count\n    \n    if n < 2:\n        return \"Please enter a positive integer greater than or equal to 2.\"\n    \n    return sieve_of_eratosthenes(n)\n        \n        \n        \ndef factorial(n):\n    '''\n    Write a function to return the factorial of a number\n    \n    :param n = 5: \n    :return: the factorial of n = 120\n    \n    Hint: you may want to write a while loop\n    '''\n    \n    def factorial(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n > 1:\n            return n * factorial(n-1)\n            \n    if n < 0:\n        return \"Please enter a positive integer.\"\n    \n    return factorial(n)\n    \n    \n    \ndef reverse(s):\n    '''\n    Write a function to return a reversed string\n    \n    :param s = \"abc\": \n    :return: \"cba\"\n    \n    '''\n    \n    def reverse(s):\n        if s == \"\":\n            return s\n        if len(s) == 1:\n            return s\n        else:\n            return reverse(s[1:]) + s[0]\n            \n    return reverse(s)\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to determine if a string is a palindrome\n    \n    :param s = \"abcba\": \n    :return: True\n    \n    '''\n    \n    def is_palindrome(s):\n        if s == \"\":\n            return True\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n            \n    return is_palindrome(s)\n        \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to determine if a string is a palindrome\n    \n    :param s = \"abcba\": \n    :return: True\n    \n    Notes\n    \n    - The first step is to reverse the string using the reverse function\n    - Then check if the reversed string is equal to the original string\n    '''\n    \n    def is_palindrome(s):\n        if s == \"\":\n            return True\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n            \n    return is_palindrome(s)\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to determine if a string is a palindrome\n    \n    :param s = \"abcba\": \n    :return: True\n    \n    Notes\n    \n    - The first step is to reverse the string using the reverse function\n    - Then check if the reversed string is equal to the original string\n    '''\n    \n    def is_palindrome(s):\n        if s == \"\":\n            return True\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n            \n    return is_palindrome(s)\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to determine if a string is a palindrome\n    \n    :param s = \"abcba\": \n    :return: True\n    \n    Notes\n    \n    - The first step is to reverse the string using the reverse function\n    - Then check if the reversed string is equal to the original string\n    '''\n    \n    def is_palindrome(s):\n        if s == \"\":\n            return True\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n            \n    return is_palindrome(s)\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to determine if a string is a palindrome\n    \n    :param s = \"abcba\": \n    :return: True\n    \n    Notes\n    \n    - The first step is to reverse the string using the reverse function\n    - Then check if the reversed string is equal to the original string\n    '''\n    \n    def is_palindrome(s):\n        if s == \"\":\n            return True\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n            \n    return is_palindrome(s)\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to determine if a string is a palindrome\n    \n    :param s = \"abcba\": \n    :return: True\n    \n    Notes\n    \n    - The first step is to reverse the string using the reverse function"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if (n == 0):\n        return 2\n    elif (n == 1):\n        return 1\n    else:\n        return lucas(n-1) + lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2, 1]\n    for i in range(n-2):\n        lucas.append(lucas[i] + lucas[i+1])\n    return lucas[-1]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # TODO: Fix this!\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string + str(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    #for item in list_:\n        #item = item.split('\\n')\n        #list_[list_.index(item)] = string.format(item)\n    return string.format(list_)\n    #return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    l1_dict = {i[0]:i[1] for i in l1}\n    l2_dict = {i[0]:i[1] for i in l2}\n    l3_dict = {i[0]:i[1] for i in l3}\n    \n    return l1_dict, l2_dict, l3_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        a = {l2[i]:{l3[i]:l1[i]}}\n        result.append(a)\n    print(result)\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    a_dict = dict()\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {l1[i]: l2[i] for i in range(len(l1))}\n    d2 = {l1[i]: {l3[i]: l2[i]} for i in range(len(l1))}\n    return d2\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i, j, k in zip(l1, l2, l3):\n        d[i] = {j:k}\n    return d\n    \ndef remove_dictionary_values(d1, *l):\n    '''\n    Write a function to remove values from dictionary.\n    '''\n    for i in d1:\n        if i in l:\n            d1.pop(i)\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l2, l3))\n    d3 = {**d1, **d2}\n    return d3\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for i in range(len(l1)):\n        res[l1[i]] = {l2[i]: l3[i]}\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    import numpy as np\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i,j in enumerate(l1):\n        d[l2[i]] = {l3[k]:v for k,v in enumerate(j) if k in l3}\n    return d\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = n\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    max_sum = n\n    max_sum += get_max_sum(n/2)\n    max_sum += get_max_sum(n/3)\n    max_sum += get_max_sum(n/4)\n    max_sum += get_max_sum(n/5)\n    if max_sum >= n:\n        return n\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==0:\n        return 0\n    if n ==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 8\n    if n==5:\n        return 16\n    if n==6:\n        return 32\n    if n==7:\n        return 64\n    if n==8:\n        return 128\n    if n==9:\n        return 256\n    if n==10:\n        return 512\n    return get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max = 0\n    for i in range(1,n):\n        max = max + ((i / 5) + get_max_sum(i / 5) + get_max_sum(i / 3) + get_max_sum(i / 2))\n    return max\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    return max( ( get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max( (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 1:\n        return 1\n    # recursion with memoization\n    memo = {1:1, 2:2, 3:3, 4:5, 5:8}\n    if n in memo:\n        return memo[n]\n    else:\n        # return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n        return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    import math\n    return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def g(n):\n        # Formula\n        # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n        # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5) + n), n)\n        # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5) + (n*(n+1))/2), n)\n        return max( (g(n/2) + g(n/3) + g(n/4) + g(n/5) + (n*(n+1))/2), n)\n    return g(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = -float('inf')\n    for i in range(1,n):\n        if i%2 == 0:\n            if i%3 == 0:\n                if i%5 == 0:\n                    if i%7 == 0:\n                        sum = i\n                    else:\n                        sum = i + get_max_sum(i+1)\n                else:\n                    sum = i + get_max_sum(i+1)\n            else:\n                sum = i + get_max_sum(i+1)\n        else:\n            sum = i + get_max_sum(i+1)\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for sub_list in input_list:\n        if max_length < len(sub_list):\n            result = sub_list\n            max_length = len(sub_list)\n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list = [1,2,3]\n    length_list = []\n    \n    for i in range(len(input_list)):\n        length_list.append(len(input_list[i]))\n    \n    return length_list.index(max(length_list))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max:\n            max = len(input_list[i])\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for input_list in input_list:\n        if len(input_list) > max_length:\n            max_length = len(input_list)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if isinstance(item,list):\n            max_length = max(max_length, max_length_list(item))\n        else:\n            max_length = max(max_length, len(item))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    assert test_tup!= []\n    assert isinstance(test_tup,tuple)\n    return len(set(test_tup))==len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #print(\"checking distinct\")\n    '''\n    1. First you need to create a set\n    2. If the size of the tuple is smaller than size of the set, its not distinct\n    3. Then you need to add the elements of the tuple to the set\n    4. If the size of the tuple is greater than size of the set, return False\n    5. If there is no intersection between the two sets, then its distinct\n    '''\n    #step 1\n    '''\n    If we need to create a set we can simply do the following\n    '''\n    # print(\"check_distinct\")\n    # print(test_tup)\n    # set_distinct = set(test_tup)\n    # print(set_distinct)\n    # print(\"length of set_distinct\")\n    # print(len(set_distinct))\n    # print(\"length of test_tup\")\n    # print(len(test_tup))\n    # print(\"\")\n    '''\n    If we already have a set, we can simply use the following\n    '''\n    set_distinct = set(test_tup)\n    # print(set_distinct)\n    # print(\"length of set_distinct\")\n    # print(len(set_distinct))\n    # print(\"length of test_tup\")\n    # print(len(test_tup))\n    # print(\"\")\n    '''\n    If the length of the set is smaller than the length of the tuple, its not distinct\n    '''\n    if len(set_distinct) < len(test_tup):\n        # print(\"Set is not distinct\")\n        return False\n    '''\n    If the length of the set is greater than the length of the tuple, return False\n    '''\n    if len(set_distinct) > len(test_tup):\n        # print(\"Set is not distinct\")\n        return False\n    '''\n    If we have an intersection between the two sets, we return False\n    '''\n    if len(set_distinct) == len(test_tup):\n        # print(\"Set is distinct\")\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n    \n    \ndef main():\n    tup = ('geeks', 'for', 'geeks')\n    print(check_distinct(tup))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for x in test_tup:\n        if test_tup.count(x)>1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = set(test_tup)\n    return len(test_tup) == len(unique_elements)\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for i in str1:\n        if dict[i] == 1:\n            return i\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counts = {}\n    for char in str1:\n        if char not in counts:\n            counts[char] = 1\n        else:\n            counts[char] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1={}\n    for i in str1:\n        if i in dict1.keys():\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in str1:\n        if dict1[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Handle the case where the string is empty\n    if len(str1) == 0:\n        return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    hash_table = {}\n    for c in str1:\n        if hash_table.has_key(c):\n            hash_table[c] = hash_table[c] + 1\n        else:\n            hash_table[c] = 1\n    for c in str1:\n        if hash_table[c] == 1:\n            return c\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_index_map = {}\n    for i,char in enumerate(str1):\n        if char in char_index_map:\n            char_index_map[char].append(i)\n        else:\n            char_index_map[char] = [i]\n    for char in char_index_map:\n        if len(char_index_map[char]) == 1:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return '_'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)>=1 and len(string)<=100:\n        if(string[0]==string[len(string)-1]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if bool(re.match(regex, string)): \n        return True \n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string.startswith(string[0]) and string.endswith(string[0])):\n        return True\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex, string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if bool(re.match(regex, string)): \n        return True \n    else: \n        return False\n    \n    \nprint(check_char(\"a\"))\nprint(check_char(\"aa\"))\nprint(check_char(\"abc\"))\nprint(check_char(\"bc\"))\nprint(check_char(\"aaa\"))\nprint(check_char(\"aA\"))\nprint(check_char(\"aBa\"))\nprint(check_char(\"aBc\"))\nprint(check_char(\"aBa\"))\nprint(check_char(\"bba\"))\nprint(check_char(\"aba\"))\nprint(check_char(\"abab\"))\nprint(check_char(\"ababb\"))\nprint(check_char(\"abb\"))\nprint(check_char(\"aB\"))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Write your code here\n    a = string[0]\n    b = string[-1]\n    if a == b:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return 'True'\n    else:\n        return 'False'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.findall(regex,string)\n    if match:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n    \nassert check_char('a') == True\nassert check_char('aaaa') == True\nassert check_char('bc') == False\nassert check_char('o') == False\nassert check_char('m') == True\nassert check_char('abcdef') == True\nassert check_char('foobar') == False\nassert check_char('foo') == False\nassert check_char('foo bar') == False\nassert check_char('foobar foo') == True\nassert check_char('12345') == True\nassert check_char('12345 5') == False\nassert check_char('123456 5') == True\nassert check_char('123456 567') == False\nassert check_char('123456 56789') == False\nassert check_char('12345 56789') == False\nassert check_char('12345 56789 10') == True\nassert check_char('12345 56789 10 11') == False\nassert check_char('12345 56789 10 11 12') == True\nassert check_char('12345 56789 10 11 12 21') == False\nassert check_char('12345 56789 10 11 12 21 22') == True\nassert check_char('12345 56789 10 11 12 21 22 33') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72') == True\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73') == False\nassert check_char('12345 56789 10 11 12 21 22 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74') ="
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = a\n    y = b\n    z = c\n    if x < y and x < z:\n        if y < z:\n            return y\n        return z\n    if y < x and y < z:\n        if x < z:\n            return x\n        return z\n    if z < x and z < y:\n        if x < y:\n            return x\n        return y\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a > b):\n        if (b > c):\n            median = b\n        elif (a > c):\n            median = c\n        else:\n            median = a\n    elif (b > c):\n        if (a > c):\n            median = a\n        else:\n            median = c\n    else:\n        median = a\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        if b>c:\n            return b\n        elif c>b:\n            return c\n        else:\n            return b\n    elif b>a and b>c:\n        if a>c:\n            return a\n        elif c>a:\n            return c\n        else:\n            return a\n    elif c>a and c>b:\n        if a>b:\n            return a\n        elif b>a:\n            return b\n        else:\n            return a\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers\n    sorted_list = sorted([a,b,c])\n    \n    # find the middle number\n    if len(sorted_list) % 2 == 0:\n        # even number of numbers\n        # return the mean of the two middle numbers\n        index = len(sorted_list) // 2\n        median = (sorted_list[index] + sorted_list[index - 1]) / 2\n    else:\n        # odd number of numbers\n        # return the middle number\n        index = len(sorted_list) // 2\n        median = sorted_list[index]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return median(a,b,c)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = 0\n    if a > b:\n        if a < c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    elif b > a:\n        if b < c:\n            median = b\n        elif a > c:\n            median = a\n        else:\n            median = c\n    elif c > a:\n        if c > b:\n            median = c\n        else:\n            median = b\n    elif c > b:\n        median = a\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #Set the variables a,b,c and declare them as integers\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    #Sort the list in ascending order\n    a, b, c = sorted([a, b, c])\n    #If the number of elements in the list is an even number, take the mean of the 2 middle elements in the list and return the mean\n    if len(a) % 2 == 0:\n        return (a[(len(a)//2)-1] + a[len(a)//2])/2\n    #If the number of elements in the list is an odd number, return the middle element in the list\n    else:\n        return a[(len(a)-1)//2]"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a<c:\n            return a\n        elif c>b:\n            return b\n        else:\n            return c\n    elif c>b:\n        if a<b:\n            return a\n        elif c<b:\n            return c\n        else:\n            return b\n    else:\n        return b\n        \ndef find_missing_numbers(num_list):\n    '''\n    Write a function to find the missing numbers between 1 to n.\n    '''\n    return [i for i in range(1,len(num_list)+1) if i not in num_list]\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += sum(map(int, list(str(i))))\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # list_sum = []\n    # for num in nums:\n    #     sum_of_digits = sum(map(int, str(num)))\n    #     list_sum.append(sum_of_digits)\n    # return list_sum\n    return sum(map(int, str(num)) for num in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = 0\n    for num in nums:\n        res += sum(int(i) for i in str(num))\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #num = []\n    #for i in nums:\n    #    num.append(str(i))\n    #print(num)\n    #print(sum(int(num[i]) for i in range(len(num))))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(d) for d in str(nums)])\n    \n    \ndef sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(d) for d in str(nums)])\n    \ndef sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(d) for d in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    lst = []\n    for i in nums:\n        res = 0\n        while i > 0:\n            rem = i % 10\n            i = i // 10\n            res += rem\n        lst.append(res)\n    return lst\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_of_digits_helper(num)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += sum(int(i) for i in str(i))\n    print(sum)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(map(int, str(num)))\n        \n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum([int(digit) for digit in str(num)])\n    return sum_of_digits\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    def xor(tup1, tup2):\n        return tuple(a ^ b for a,b in zip(tup1, tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    \nprint(bitwise_xor((5, 6), (1, 2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple( a ^ b for a, b in zip(test_tup1, test_tup2) )\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda a, b: a^b, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #return test_tup1 ^ test_tup2\n    a = list(test_tup1)\n    b = list(test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    #return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return tuple(map(lambda x: x[0] ^ x[1], zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # print(tup1)\n    # print(tup2)\n    xor_tup = []\n    for i in range(len(test_tup1)):\n        xor_tup.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(xor_tup)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for elem in test_list:\n        if elem not in freq_list:\n            freq_list.append(elem)\n    return len(freq_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = test_list[1:-1].split(',')\n    freq = set()\n    for i in range(len(test_list)):\n        freq.add(tuple(test_list[i].split()))\n    print(len(freq))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            if test_list[i][j] not in freq_list:\n                freq_list.append(test_list[i][j])\n    return freq_list\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return a list of tuples containing unique values in the test_list\n    # You can use a set data structure to create a set of unique tuples\n    return list(set(tuple(sorted(test_list))))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print(len(set(test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def uniq(lst):\n        return len(set(lst))\n    return uniq(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tuple_item in test_list:\n        if tuple_item not in freq_dict:\n            freq_dict[tuple_item] = 1\n        else:\n            freq_dict[tuple_item] += 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(map(tuple, test_list))\n    print(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = sorted(test_list)\n    test_list = set(test_list)\n    return len(test_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Approach 1: By using List Comprehension\n    # return [tup[i] + tup2[i] for tup, tup2 in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        return_tup += (i + j,)\n    return return_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    output_tup = ()\n    for i in range(0, len(test_tup1)):\n        output_tup = output_tup + (test_tup1[i] + test_tup2[i], )\n    return output_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_list = []\n    for i in range(len(test_tup1)):\n        res_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(res_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([a + b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    sum_list = []\n    for i, j in zip(test_tup1, test_tup2):\n        sum_list.append(i+j)\n    return tuple(sum_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tuple(x + y for x, y in zip(l1, l2)) for l1, l2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            if type(test_tup1[i]) == tuple:\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                result.append(test_tup1[i] + test_tup2[i])\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)\n    \n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup3 = ()\n    for i in range(0, len(test_tup1)):\n        tup3 = tup3 + ((test_tup1[i] + test_tup2[i]),)\n    return tup3\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # a = 10\n    # b = 20\n    # if a<b:\n    #     print(a)\n    # else:\n    #     print(b)\n    \n    return min(a,b)\n    "
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return(a if(a<b) else b)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuplex.count(tuple1) == 0:\n        print(\"The element is not within the tuple.\")\n    else:\n        print(\"The element exists within the tuple.\")\n        \ncheck_tuplex([1,2,3,4,5,6,7,8,9,10],(1,2,3,4,5,6,7,8,9,10))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) >= 1: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # your code here\n    for i in tuplex:\n        if i==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 == tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            print(True)\n            break\n        else:\n            print(False)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex: \n        if tup==tuple1:\n            return True\n    return False\nprint(check_tuplex([(1,1),(2,2),(3,3),(4,5)],(1,1)))\nprint(check_tuplex([(1,1),(2,2),(3,3),(4,5)],(2,2)))\nprint(check_tuplex([(1,1),(2,2),(3,3),(4,5)],(1,4)))"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuple1)):\n        if(tuple1[i]==tuplex):\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x % 2 == 0: \n        print(\"%d is even\"%(x)) \n    else: \n        print(\"%d is odd\"%(x)) \n    \n    return\n    \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum = 0\n    while x > 0:\n        sum += x % 10\n        x = x//10\n    return sum%2\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    n = 0\n    while (x):\n        n += 1\n        x = x & (x-1)\n    if (n % 2 == 0):\n        print(n,\" is even.\")\n    else:\n        print(n,\" is odd.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum = 0\n    while (x): \n        sum += x & 1\n        x >>= 1\n    return sum % 2 == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        print(\"Even parity\")\n    else:\n        print(\"Odd parity\")\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n    \nprint(find_Parity(3))\nprint(find_Parity(5))\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x%2==0):\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 0): \n        print('even')\n    else: \n        print('odd') \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 0): \n        print(x, \" is even\") \n    else: \n        print(x, \" is odd\") \n    \n    return x \n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_list = list(str(n))\n    i = len(n_list)-1\n    j = len(n_list) - 2\n    while i > 0:\n        if int(n_list[i]) >= int(n_list[j]):\n            n_list[j], n_list[i] = n_list[i], n_list[j]\n            i -= 1\n            j -= 1\n        else:\n            break\n    return int(''.join(n_list))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = [int(i) for i in str(n)]\n    i = len(n) - 1\n    while i > 0 and n[i] <= n[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i - 1]:\n        j -= 1\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = reversed(n[i:])\n    result = int(''.join(map(str, n)))\n    return result if result < (2 ** 31 - 1) else -1\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    number = []\n    while n > 0:\n        number.append(n%10)\n        n = n//10\n    bigger = []\n    for i in range(1, len(number)):\n        bigger.append(max(number[0], number[i]))\n    bigger.append(min(number[0], number[i]))\n    return int(''.join([str(i) for i in bigger]))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    l = len(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def swap(x,y,a,b):\n        b1 = x[b]\n        x[b] = x[a]\n        x[a] = b1\n        return x\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    i = 0\n    while i < len(s)-1 and s[i] < s[i+1]:\n        i += 1\n    if i == len(s)-1:\n        return -1\n    while i < len(s)-1 and s[i] > s[i+1]:\n        i += 1\n    s = s[:i] + s[i+1] + s[i] + s[i+2:]\n    return int(s)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = sorted(n, reverse = True)\n    for i in range(len(n)-1):\n        n[i] = n[i+1]\n    n[-1] = '0'\n    return int(''.join(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(map(int, str(n)))\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = sorted(digits[i:])\n    return int(''.join(map(str, digits)))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) == k:\n                heapq.heappushpop(heap, (-num1-num2, num1, num2))\n            else:\n                heapq.heappush(heap, (-num1-num2, num1, num2))\n    return [x[1:] for x in heap]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k > len(nums1) * len(nums2):\n        return None\n    hp = []\n    for x in nums1:\n        for y in nums2:\n            if len(hp) < k:\n                heapq.heappush(hp, (x + y, x, y))\n            else:\n                if x + y < hp[0][0]:\n                    heapq.heappop(hp)\n                    heapq.heappush(hp, (x + y, x, y))\n    return [item[1:] for item in hp]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if not nums1 or not nums2:\n        return []\n    \n    queue = []\n    count = 0\n    heapq.heapify(queue)\n    \n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(queue, [i+j, (i,j)])\n    \n    result = []\n    while queue and count < k:\n        _, (i,j) = heapq.heappop(queue)\n        result.append(i)\n        result.append(j)\n        count += 1\n    \n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = {}\n    smallest_pairs = []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in nums1:\n        for j in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (i+j, [i, j]))\n            else:\n                if i+j < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (i+j, [i, j]))\n    return [pair[1] for pair in heap]\n    \nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # basic error checking\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    if k == 0:\n        return []\n    # swap to make nums1 smaller\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    # create a min heap to store the smallest pairs and a dict to store the number of pairs\n    min_heap = []\n    pairs = {}\n    # iterate through nums1\n    for num1 in nums1:\n        # iterate through nums2\n        for num2 in nums2:\n            # calculate the difference between two numbers and add them to a dict\n            diff = num1 - num2\n            # if the difference is in dict\n            if diff in pairs:\n                # add the numbers to a min heap\n                heapq.heappush(min_heap, [num1, num2])\n                # add one to the count\n                pairs[diff] += 1\n            else:\n                # add the difference to the dict and add one to the count\n                pairs[diff] = 1\n    # return the k smallest pairs\n    return [heapq.heappop(min_heap) for _ in range(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return None\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    \n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    res = []\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        res.append((nums1[i], nums2[j]))\n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n            visited.add((i + 1, j))\n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n            visited.add((i, j + 1))\n        k -= 1\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0 or k == 0:\n        return []\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, [nums1[i]+nums2[j], i, j])\n            else:\n                if nums1[i]+nums2[j] < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, [nums1[i]+nums2[j], i, j])\n    result = []\n    while len(min_heap):\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pq, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n    return [heapq.heappop(pq)[1] for _ in range(k)]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result=list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        result=min(result,list1[i][0]*list1[i][1])\n    return result\nlist1=[[10,20],[60,100],[40,50],[30,60]]\nprint(min_product_tuple(list1))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    else:\n        min_prod = list1[0][0] * list1[0][1]\n        for i in range(1, len(list1)):\n            if list1[i][0] * list1[i][1] < min_prod:\n                min_prod = list1[i][0] * list1[i][1]\n        return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0] * list1[0][1]\n    for tup in list1:\n        if tup[0] * tup[1] < min:\n            min = tup[0] * tup[1]\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = [(1, 3), (3, 5), (5, 7), (7, 8)]\n    tuple1 = list1[0]\n    for i in list1:\n        if i[0] * i[1] < tuple1[0] * tuple1[1]:\n            tuple1 = i\n    return tuple1\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    return min(list1[0]*list1[1], list1[-1]*list1[-2])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def min_product(t1,t2):\n        return min(t1[0]*t1[1],t2[0]*t2[1])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    #for i in range(len(list1)):\n    #    for j in range(i+1, len(list1)):\n    #        if list1[i][0]*list1[j][1] > list1[j][0]*list1[i][1]:\n    #            list1[i], list1[j] = list1[j], list1[i]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return False\n    list2 = sorted(list1, key=lambda x:x[1])\n    if list2[0][0]*list2[0][1] > list2[1][0]*list2[1][1]:\n        return list2[0][0]*list2[0][1]\n    else:\n        return list2[1][0]*list2[1][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    import functools\n    min_product = functools.reduce(lambda x,y: x if x < y else y, map(lambda x:x[0]*x[1], list1))\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if min > list1[i][0] * list1[i][1]:\n            min = list1[i][0] * list1[i][1]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = float('inf')\n    for elem in listval:\n        if type(elem) == int:\n            if elem < minval:\n                minval = elem\n        else:\n            if elem < minval:\n                minval = elem\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # first try\n    minv = listval[0]\n    for i in range(len(listval)):\n        if (listval[i] < minv):\n            minv = listval[i]\n    return minv\n    # second try\n    listval.sort()\n    return listval[0]\n    # third try\n    # minv = 0\n    # for i in listval:\n    #     if (listval[i] < minv):\n    #         minv = listval[i]\n    # return minv\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Your code here\n    min = listval[0]\n    for i in range(1, len(listval)):\n        if min > listval[i]:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minv = listval[0]\n    for i in range(0, len(listval)):\n        if listval[i] < minv:\n            minv = listval[i]\n    return minv\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in listval:\n            if i < min_val:\n                min_val = i\n        return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = [6, 'a', '5', 4, 'd', '5', 32, 21, 'w', 'hello', 'how', 'are', 'you',\n    '3','sally', 'wonderful', 'hi', 'a', 'great', 'place', 'to', 'go', 'to','see', 'the', 'wonderful', 'world']\n    l.sort()\n    print(l)\n    return (l[0])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in word:\n        if i == '_':\n            continue\n        else:\n            camel_case += i.capitalize()\n    return camel_case\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_list = re.findall('[a-z]+|[A-Z]+', word)\n    camel_list = []\n    for i in range(len(snake_list)):\n        if i == 0:\n            camel_list.append(snake_list[i].lower())\n        else:\n            camel_list.append(snake_list[i].title())\n    return ''.join(camel_list)\n    \n    \nprint(snake_to_camel(\"the_stealth_warrior\"))\nprint(snake_to_camel(\"The-Stealth-Warrior\"))\nprint(snake_to_camel(\"the_stealth_warrior_hundred\"))\nprint(snake_to_camel(\"The_Stealth_Warrior\"))\nprint(snake_to_camel(\"the_stealth_warrior_hundred\"))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    list_of_words = re.split('_', word)\n    words = [i.title() for i in list_of_words]\n    return \"\".join(words)\n    \nprint(snake_to_camel(\"snake_to_camel\"))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    return word[0] + ''.join(i.title() for i in word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    def snake_case(word):\n        word = re.sub('([\\-\\_\\s])+', '_', word)\n        word = word.replace('_','').lower()\n        word = word.strip()\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = re.compile(r'(?!^)_([a-zA-Z])')\n    return regex.sub(lambda m: m.group(1).upper(), word)\n    \nprint(snake_to_camel('snake_case_test')) # snakeCaseTest\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    import re\n    if not word:\n        return word\n    camel_word = ''\n    for i in range(len(word)):\n        if word[i] == '_':\n            camel_word += word[i+1].upper()\n        elif i!= 0:\n            camel_word += word[i]\n        else:\n            camel_word += word[i].upper()\n    return camel_word\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    for i in range(len(word)):\n        if word[i]!= '_' and word[i].islower():\n            word = word[:i] + word[i].upper() + word[i+1:]\n    return word\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [0,1,2,3,4,5,6,7,8,9]\n    return [i for i in l if i%2 ==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for x in l:\n        if x % 2!= 0:\n            l.remove(x)\n    print(l)\n    \n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2 == 1:\n            l.remove(i)\n    return l\n    \nif __name__ == '__main__':\n    l = [1,2,3,4,5,6,7,8,9]\n    print(remove_odd(l))\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    res = list(filter(lambda i: i % 2 == 0, l))\n    return res\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(2)\n    l.remove(4)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i = 0\n    while i < len(l):\n        if l[i]%2:\n            l.pop(i)\n        else:\n            i += 1\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list_without_odd = [num for num in l if num % 2 == 0]\n    return list_without_odd\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2 == 0]\n    \ndef max_element(l):\n    '''\n    Write a python function to print the maximum element from a given list.\n    '''\n    return max(l)\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Using list comprehension\n    #return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Your code here\n    return list1[n]\n    \n    "
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i % n == 0:\n            return list1[i]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i][n])\n    return list2\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1==None or list2==None or len(list1)==0 or len(list2)==0:\n        return False\n    else:\n        return True\n    \ndef overlapping_list_duplicate(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1==None or list2==None or len(list1)==0 or len(list2)==0:\n        return False\n    else:\n        duplicate=[]\n        for i in list2:\n            if i in list1:\n                duplicate.append(i)\n        if len(duplicate)==0:\n            return False\n        else:\n            return duplicate\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for list1_val in list1:\n        for list2_val in list2:\n            if list1_val==list2_val:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        flag = 0\n        for i in list1:\n            if i in list2:\n                flag = 1\n                break\n        if flag == 1:\n            return True\n        else:\n            return False\n    else:\n        print(\"Length of both lists are not the same.\")\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if (any(num in list2 for num in list1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1=set(list1)\n    list2=set(list2)\n    return bool(list1.intersection(list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = any(item in list1 for item in list2)\n    return result\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(set(list1).intersection(list2)) > 0\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result=[]\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if highest < arr[i]*arr[j]:\n                highest = arr[i]*arr[j]\n    return highest\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize product to zero\n    max_product = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                # Return the product and indices of the pair\n                return max_product, arr[i], arr[j]\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr or len(arr)<=1:\n        raise ValueError(\"Input array cannot be empty or length of the array should be greater than 1\")\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0] * arr[1] \n    for i in range(0,n-1): \n        for j in range(i+1,n): \n            if (arr[i] * arr[j] > max_product): \n                max_product = arr[i] * arr[j] \n    return max_product \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max=1\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if max<arr[i]*arr[j]:\n                max=arr[i]*arr[j]\n    return max\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return\n    #print('arr:',arr)\n    index=0\n    curr_max=arr[0]\n    curr_min=arr[0]\n    max_product=arr[0]*arr[1]\n    for i in range(len(arr)):\n        curr_max=max(arr[i],curr_max*arr[i])\n        curr_min=min(arr[i],curr_min*arr[i])\n        max_product=max(curr_max,max_product)\n    print(max_product)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                \n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = arr[0] * arr[1]\n    i = 0\n    j = 1\n    while i < len(arr): \n        if max_prod < arr[i] * arr[j]:\n            max_prod = arr[i] * arr[j]\n            a = i\n            b = j\n        if arr[i] <= arr[j]:\n            i += 1\n        elif arr[i] >= arr[j]:\n            j += 1\n    return a,b\narr = [10, 30, 20, 40] \na, b = max_Product(arr) \nprint(\"Maximum product pair is\", arr[a],\"and\",arr[b]) \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<=0:\n        return 0\n    product = 0\n    arr1 = []\n    arr2 = []\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            arr1.append(arr[i])\n            arr2.append(arr[j])\n            if product>product:\n                product = product\n                arr1 = []\n                arr2 = []\n                arr1.append(arr[i])\n                arr2.append(arr[j])\n                \n    return (arr1,arr2)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables\n    num_of_elements = len(arr)\n    highest_prod = 0\n    first_highest_prod = 0\n    second_highest_prod = 0\n    \n    # Traverse through all array elements \n    for i in range(0, num_of_elements): \n      \n        for j in range(i+1, num_of_elements): \n      \n            if arr[i] > 0 and arr[j] > 0:\n                prod = arr[i] * arr[j]\n                if prod > highest_prod:\n                    second_highest_prod = highest_prod\n                    highest_prod = prod\n                    first_highest_prod = arr[i]\n                    second_highest_prod = arr[j]\n                \n            elif arr[i] < 0 and arr[j] < 0:\n                prod = arr[i] * arr[j]\n                if prod > highest_prod:\n                    second_highest_prod = highest_prod\n                    highest_prod = prod\n                    first_highest_prod = arr[i]\n                    second_highest_prod = arr[j]\n                \n    return [first_highest_prod, second_highest_prod]\n  \n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i])\n                break\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input)<2: \n        return Input[0]\n    a=list(set(Input[0])) \n    for i in Input:\n        a=set(a) & set(i)\n    return a\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in Input:\n        Output.append(i[0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Dict={}\n    for Tuple in Input:\n        if Tuple[0] in Dict:\n            Dict[Tuple[0]].append(Tuple)\n        else:\n            Dict[Tuple[0]]=[Tuple]\n    return Dict\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    x = Input[0]\n    for i in range(len(Input)):\n        if x!= Input[i]:\n            y = Input[i]\n            break\n    return x,y\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output=[]\n    for i in Input:\n        if Output==[]:\n            Output.append(i)\n        elif i[0] in Output[0]:\n            Output[0]+=i\n        else:\n            Output.append(i)\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # base case\n    if len(Input) <= 1:\n        return Input\n    # Recursive call\n    else:\n        # return common in first element\n        return group_tuples([Input[0]] + group_tuples(Input[1:]))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize empty list\n    list = []\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import itertools\n    Input = list(itertools.chain.from_iterable(Input))\n    new = list() \n    for i in range(len(Input)):\n        new.append(Input[i][0])\n    group_tuples = [list(group) for key, group in itertools.groupby(sorted(new))] \n    print(group_tuples)\n    return group_tuples\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for x,y in Input:\n        if x in y:\n            Output.append(x)\n    return Output\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort(key = len)\n    return lst[-1]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) > maxlen:\n            maxlen = len(lst[i])\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    max = len(lst[0])\n    for word in lst:\n        if len(word) > max:\n            max = len(word)\n    return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key=len) \n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=len(lst[0])\n    for i in range(0,len(lst)):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n            max_index=i\n    return max_index\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    return lst[-1]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = 0\n    for i in lst:\n        if maxlen < len(i):\n            maxlen = len(i)\n            maxstr = i\n    return maxstr\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # return max(lst, key=len)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    a=round(list1[0])\n    b=round(list1[1])\n    c=round(list1[2])\n    d=round(list1[3])\n    print(a+b+c+d)\n    print(len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    x = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        x += list1[i]\n    print(x * len(list1))\n    return x * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #len_list = len(list1)\n    #sum_list = sum(list1)\n    #print(sum_list*len_list)\n    for number in list1:\n        rounded_number = round(number)\n        print(rounded_number)\n    return list1\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum = sum + round(i)\n    print(sum*len(list1))\n    return sum*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for x in list1:\n        sum += round(x)\n    print(sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        sum += list1[i]\n    print(\"The sum of the list multiplied by its length is \", sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list = [round(num) for num in list1]\n    sum_list = sum(round_list)\n    print(sum_list * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = 0\n    for num in list1:\n        rounded_num = round(num)\n        sum_list += rounded_num\n    print(f'The total sum of the rounded numbers is: {sum_list}')\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        number = round(number)\n        sum += number\n    return (sum * len(list1))\n    \n    \n    \ndef round_and_sum_list(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for number in list1:\n        list2.append(round(number))\n    sum = 0\n    for number in list2:\n        sum += number\n    return (sum * len(list1))\n    \n    \n    \ndef print_list(list1):\n    '''\n    Write a function to print every element of the list.\n    '''\n    for element in list1:\n        print(element)\n        \n        \n        \ndef print_list_reversed(list1):\n    '''\n    Write a function to print the list in reverse order.\n    '''\n    list2 = []\n    i = 0\n    while i < len(list1):\n        list2.append(list1[len(list1) - 1 - i])\n        i += 1\n    print(list2)\n        \n        \n        \ndef print_list_in_reverse(list1):\n    '''\n    Write a function to print the list in reverse order.\n    '''\n    list2 = []\n    i = 0\n    while i < len(list1):\n        list2.append(list1[len(list1) - 1 - i])\n        i += 1\n    return list2\n        \n        \n        \ndef count_greater_than(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value.\n    '''\n    count = 0\n    for element in list1:\n        if element > value:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:\n        if element > value and element % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_greater_than_even(list1, value):\n    '''\n    Write a function to count how many elements of the list are greater than the given value and even.\n    '''\n    count = 0\n    for element in list1:"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        round_num = round(list1[i])\n        list1[i] = round_num\n        total += round_num\n    print(total*len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #return sum([i**3 for i in range(n) if i%2 ==0])\n    #for i in range(1,n):\n    #    if i%2 ==0:\n    #        cube.append(i**3)\n    #return sum(cube)\n    return sum([i**3 for i in range(1,n+1) if i%2 ==0])\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n ** 3\n        n -= 2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubes = []\n    for i in range(n):\n        cubes.append(i ** 3)\n    return sum(cubes)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(2,n+1,2)])\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1): \n        total += i**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Set initial variables\n    sum = 0\n    result = 0\n    # Iterate to find cube sum\n    for x in range(0, n, 2):\n        sum += x ** 3\n    # Calculate sum of cube of even numbers\n    result = sum\n    return result\nprint(cube_Sum(100))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # return sum([i ** 3 for i in range(n + 1) if i % 2 == 0])\n    return n * (n + 1) * (2 * n + 1) // 6\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return (n*(n+1))*(n//2)**2\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for i in test_tup:\n        test_str += i + '@'\n    return test_str[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if type(test_tup)!= tuple:\n        return False\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += i + '_'\n    result = result[:-1]\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    seperator = '-'\n    result = seperator.join(test_tup)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # creating a tuple\n    my_tup = ('T', 'o', 'r', 'e')\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    # Your code goes here:\n    \n    return None\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return_str = ''\n    for element in test_tup:\n        return_str += element\n        return_str += \"-\"\n    return return_str\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # return '-'.join(test_tup)\n    # return '-'.join(test_tup[::-1])\n    # return '-'.join(reversed(test_tup))\n    return '-'.join([str(i) for i in test_tup])\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Cube of a number can also be written as pow(n,3).\n    #For example, cube of 5 is written as pow(5,3)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        # return (sum([i**3 for i in range(1,n+1)]))**(1/3)\n        return sum([i**3 for i in range(1,n+1)])/n**3\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0;\n    for i in range(1,n+1):\n        sum += i**3;\n    return sum/n;\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i*i*i)\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print(\"The average of cubes of first\", n, \"natural numbers is\", (n*(n+1)*(2*n+1))/6)\n    \nfind_Average_Of_Cube(6)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    res = (n * (n+1) * (n+2))/6\n    return res\n    \nprint(find_Average_Of_Cube(10))\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum/(n*n*n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum1 = 0  # initializing a variable to sum of cubes\n    for i in range(1, n+1):  \n        sum1 += i*i*i\n    avg = sum1/n  # taking average of cubes\n    print(\"The average of cubes of first n natural numbers is : \", avg)\n    \nfind_Average_Of_Cube(10)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i * i * i)\n    \n    return (sum / n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i ** 3 for i in range(1, n+1)]) / n\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for tup in test_tuple:\n        rear_list.append(tup[-1])\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_of_strings = list(test_tuple)\n    return [string[-1] for string in list_of_strings]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    # Method 1:\n    return [element[-1] for element in test_tuple]\n    \n    # Method 2:\n    # return [element[len(element)-1] for element in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_list = []\n    for t in test_tuple:\n        new_list.append(t[-1])\n    return tuple(new_list)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1: \n        if x in i: \n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt = 0\n    for i in list1:\n        if x in i:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in list1:\n        if x in i:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list2 = list1[:]\n    c = 0\n    for i in list1:\n        if x in i:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_numbers = []\n    for num in nums:\n        if num % 2 == 1:\n            filtered_numbers.append(num)\n    return filtered_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    print(list(filter(lambda x : x%2, nums)))\n    return list(filter(lambda x : x%2, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    print([n for n in nums if n % 2 == 1])\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    def isodd(num):\n        if num % 2 == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num%2==1]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda num: num % 2, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            new_nums.append(num)\n    return new_nums\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    result = dt\n    if dt is not None:\n        result = re.sub('(\\d{4})-(\\d{2})-(\\d{2})', '\\\\3-\\\\2-\\\\1', dt)\n    return result\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace(\"-\", \" \")\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = re.search('([0-9]{4})-([0-9]{2})-([0-9]{2})',dt)\n        dt = dt.group(3)+'-'+dt.group(2)+'-'+dt.group(1)\n        print(dt)\n    except AttributeError:\n        return False\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.match('(\\d{4})-(\\d{2})-(\\d{2})',dt)\n    if m:\n        day = m.group(2)\n        month = m.group(1)\n        year = m.group(3)\n        if day == '31' and month == '12':\n            dd = '01'\n            mm = '01'\n            yyyy = m.group(1)\n        elif day == '31' and month == '11':\n            dd = '01'\n            mm = '10'\n            yyyy = m.group(1)\n        elif day == '30':\n            dd = '01'\n            mm = '09'\n            yyyy = m.group(1)\n        elif day == '30':\n            dd = '02'\n            mm = '09'\n            yyyy = m.group(1)\n        elif day == '29' and month == '02':\n            dd = '01'\n            mm = '09'\n            yyyy = m.group(1)\n        elif day == '29' and month == '01':\n            dd = '02'\n            mm = '09'\n            yyyy = m.group(1)\n        elif day == '28':\n            dd = '01'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '29':\n            dd = '02'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '28':\n            dd = '02'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '27':\n            dd = '03'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '26':\n            dd = '04'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '25':\n            dd = '05'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '24':\n            dd = '06'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '23':\n            dd = '07'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '22':\n            dd = '08'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '21':\n            dd = '09'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '20':\n            dd = '10'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '19':\n            dd = '11'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '18':\n            dd = '12'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '17':\n            dd = '13'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '16':\n            dd = '14'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '15':\n            dd = '15'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '14':\n            dd = '16'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '13':\n            dd = '17'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '12':\n            dd = '18'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '11':\n            dd = '19'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '10':\n            dd = '20'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '09':\n            dd = '21'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '08':\n            dd = '22'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '07':\n            dd = '23'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '06':\n            dd = '24'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '05':\n            dd = '25'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '04':\n            dd = '26'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '03':\n            dd = '27'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '02':\n            dd = '28'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '01':\n            dd = '29'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '31':\n            dd = '30'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '30':\n            dd = '31'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '29':\n            dd = '32'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '28':\n            dd = '33'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '27':\n            dd = '34'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '26':\n            dd = '35'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '25':\n            dd = '36'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '24':\n            dd = '37'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '23':\n            dd = '38'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '22':\n            dd = '39'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '21':\n            dd = '40'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '20':\n            dd = '41'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '19':\n            dd = '42'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '18':\n            dd = '43'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '17':\n            dd = '44'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '16':\n            dd = '45'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '15':\n            dd = '46'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '14':\n            dd = '47'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '13':\n            dd = '48'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '12':\n            dd = '49'\n            mm = '08'\n            yyyy = m.group(1)\n        elif day == '11':\n        "
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    dt = dt.replace('-','/')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    l = dt.split(\"-\")\n    print(\"{}-{}-{}\".format(l[2],l[1],l[0]))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub('\\s', '-', dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10] + '-' + dt[5:7] + '-' + dt[:4]\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    format1=re.sub(r'[-]','.',dt)\n    format2=re.sub(r'[-]','/',format1)\n    return format2\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d=dt.split('-')\n    d.reverse()\n    dt='-'.join(d)\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            curr = my_list[i]\n            j = i\n            while j >= gap and curr < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = curr\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #insertion sort\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    N = len(my_list)\n    gap = N // 2\n    \n    while gap > 0:\n        \n        for i in range(gap,N):\n            \n            current_item = my_list[i]\n            position = i\n            \n            while position >= gap and my_list[position-gap] > current_item:\n                my_list[position] = my_list[position - gap]\n                position = position - gap\n                \n            my_list[position] = current_item\n            \n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    #return the elementwise and of the two tuples\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup_and = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            tup_and += (test_tup1[i],)\n    return tup_and\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #[(1,2), (3,4), (5,6)]\n    # [1,2,3,4,5,6]\n    return [tup1 & tup2 for tup1,tup2 in zip(test_tup1, test_tup2)]\n    "
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([i & j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    print(\"Tuple 1:\", test_tup1)\n    print(\"Tuple 2:\", test_tup2)\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(tuple(a & b) for a, b in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    return tuple(t1 & t2 for t1, t2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    list_and_1 = []\n    list_and_2 = []\n    for i in range(len(test_tup1)):\n        list_and_1.append(test_tup1[i] & test_tup2[i])\n    return tuple(list_and_1)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    print(\"A parabola with the form: y=\",a,\"x^2 +\",b,\"x +\",c,\"has its directrix at x =\",(-b/(2*a)),\".\")\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**(1/2))/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 == 4*a*c:\n        return a*(-b/(2*a)), b/(2*a)\n    else:\n        return \"Not a parabola\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if c == 0:\n        if b == 0:\n            return 0\n        return -1*b/(2*a)\n    return (b**2 - 4*a*c)/(4*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def get_x_cord(a, b, c):\n        '''\n        returns the x-cordinate of the directrix\n        '''\n        return (-b - sqrt(b**2 - 4*a*c)) / (2*a)\n    #y = ax^2 + bx + c\n    def get_y_cord(a, b, c):\n        '''\n        returns the y-cordinate of the directrix\n        '''\n        return a * get_x_cord(a, b, c) ** 2 + b * get_x_cord(a, b, c) + c\n    return (get_x_cord(a, b, c), get_y_cord(a, b, c))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    return (0-b + np.sqrt(d))/(2*a), (0-b - np.sqrt(d))/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (b**2 - 4*a*c)**(1/2)\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # We assume a >= 0 and b/a >= 0 and c/a >= 0\n    disc = b**2 - 4*a*c\n    if disc < 0:\n        return None\n    elif disc == 0:\n        return -b / (2*a)\n    else:\n        sqrt_disc = math.sqrt(disc)\n        x1 = (-b + sqrt_disc) / (2*a)\n        x2 = (-b - sqrt_disc) / (2*a)\n        return (x1, x2)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return 'Invalid Input, a must be non-zero'\n    else:\n        return -c / (2 * a)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 is None or list2 is None:\n        return False\n    if list1 == [] or list2 == []:\n        return False\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list(set(list1).intersection(list2)))>0\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return True\n    elif len(list1) == 0 or len(list2) == 0:\n        return False\n    elif list1[0] in list2:\n        return True\n    else:\n        return common_element(list1[1:], list2)\n    \ndef common_element_iterative(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return True\n    elif len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        result = False\n        for num in list1:\n            if num in list2:\n                result = True\n                break\n        return result\n    \ndef sum_list(list):\n    '''\n    Write a function that takes a list and returns the sum of all the elements of that list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        return list[0] + sum_list(list[1:])\n    \ndef sum_list_iterative(list):\n    '''\n    Write a function that takes a list and returns the sum of all the elements of that list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        result = 0\n        for num in list:\n            result += num\n        return result\n    \ndef sum_list_recursive(list):\n    '''\n    Write a function that takes a list and returns the sum of all the elements of that list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        return list[0] + sum_list_recursive(list[1:])\n    \ndef sum_list_recursive_divide_and_conquer(list):\n    '''\n    Write a function that takes a list and returns the sum of all the elements of that list.\n    '''\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        return list[0] + sum_list_recursive_divide_and_conquer(list[1:])\n    \ndef sum_list_recursive_divide_and_conquer_modified(list):\n    '''\n    Write a function that takes a list and returns the sum of all the elements of that list.\n    '''\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        return list[0] + sum_list_recursive_divide_and_conquer(list[1:])\n    \ndef power(number, power):\n    '''\n    Write a function that takes two parameters: an integer, number, and an integer, power. \n    The function should return number raised to the power power. \n    For example, if number is 2 and power is 3, the function should return 8.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return number\n    else:\n        return number * power_iterative(number, power - 1)\n    \ndef power_iterative(number, power):\n    '''\n    Write a function that takes two parameters: an integer, number, and an integer, power. \n    The function should return number raised to the power power. \n    For example, if number is 2 and power is 3, the function should return 8.\n    '''\n    result = 1\n    for i in range(power):\n        result *= number\n    return result\n    \ndef power_recursive(number, power):\n    '''\n    Write a function that takes two parameters: an integer, number, and an integer, power. \n    The function should return number raised to the power power. \n    For example, if number is 2 and power is 3, the function should return 8.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return number\n    else:\n        return number * power_recursive(number, power - 1)\n    \ndef power_modified(number, power):\n    '''\n    Write a function that takes two parameters: an integer, number, and an integer, power. \n    The function should return number raised to the power power. \n    For example, if number is 2 and power is 3, the function should return 8.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return number\n    else:\n        if power % 2 == 0:\n            return power_recursive_even(number, power)\n        else:\n            return power_recursive_odd(number, power)\n    \ndef power_recursive_even(number, power):\n    '''\n    Write a function that takes two parameters: an integer, number, and an integer, power. \n    The function should return number raised to the power power. \n    For example, if number is 2 and power is 3, the function should return 8.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return number\n    else:\n        if power % 2 == 0:\n            return number * power_recursive_even(number, power - 1)\n        else:\n            return number * power_recursive_odd(number, power - 1)\n    \ndef power_recursive_odd(number, power):\n    '''\n    Write a function that takes two parameters: an integer, number, and an integer, power. \n    The function should return number raised to the power power. \n    For example, if number is 2 and power is 3, the function should return 8.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return number\n    else:\n        if power % 2 == 0:\n            return power_recursive_even(number, power - 1)\n        else:\n            return number * power_recursive_odd(number, power - 1)\n    \ndef power_modified_iterative(number, power):\n    '''\n    Write a function that takes two parameters: an integer, number, and an integer, power. \n    The function should return number raised to the power power. \n    For example, if number is 2 and power is 3, the function should return 8.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return number\n    else:\n        result = 1\n        current_num = number\n        current_power = power\n        while current_power > 1:\n            if current_power % 2 == 0:\n                current_power = current_power / 2\n                current_num = current_num * current_num\n            else:\n                current_power = (current_power - 1) / 2\n                current_num = current_num * current_num\n        return current_num\n    \ndef power_modified_iterative_even(number, power):\n    '''\n    Write a function that takes two parameters: an integer, number, and an integer, power. \n    The function should return number raised to the power power. \n    For example, if number is 2 and power is 3, the function should return 8.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return number\n    else:\n        result = number\n        current_power = power\n        while current_power > 1:\n            if current_power % 2 == 0:\n                current_power = current_power / 2\n                result = result * result\n            else:\n                current_power = (current_power - 1) / 2\n                result = result * result\n        return result\n    \ndef power_modified_iterative_odd(number, power):\n    '''\n    Write a function that takes two parameters: an integer, number, and an integer, power. \n    The function should return number raised to the power power. \n    For example, if number is 2 and power is 3, the function should return 8.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return number\n    else:\n        result = number\n        current_power = power\n        while current_power > 1:\n            if current_power % 2 == 0:\n                current"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n    i = 0\n    j = 0\n    \n    while (i<len(list1) and j<len(list2)):\n        if list1[i]==list2[j]:\n            return True\n        elif list1[i]>list2[j]:\n            j +=1\n        else:\n            i +=1\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list_1 = set(list1)\n    list_2 = set(list2)\n    print(list_1.intersection(list_2))\n    if len(list_1.intersection(list_2)) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for el1 in list1:\n        for el2 in list2:\n            if el1 == el2:\n                return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 + base2 < height:\n        return 0\n    return (base1+base2)/2 + base1 + base2 - height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area= (((base1+base2)*height)/2)\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(input(\"Enter length of first base: \"))\n    base2 = float(input(\"Enter length of second base: \"))\n    height = float(input(\"Enter height of trapezium: \"))\n    height2 = height*height\n    base_total = base1+base2\n    base3 = base_total/2\n    area = height2/2\n    median = (area+base3)/2\n    print(\"Median is:\",median)\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2\n    \nprint(median_trapezium(10,10,10))\nprint(median_trapezium(5,6,8))\nprint(median_trapezium(7,9,10))\nprint(median_trapezium(1,3,4))\nprint(median_trapezium(3,5,6))\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Convert to float\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    return height*(1/3)*(base1+base2)\n    \nprint(median_trapezium(5,10,15))\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1 + base2)%2 == 0:\n        return ((base1 + base2)/2)*height\n    else:\n        return (base1 + base2)*height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    if arr[0] < number:\n        return True\n    else:\n        return False\n    \ndef main():\n    arr = [1,2,3,4,5]\n    number = int(input(\"Enter a number: \"))\n    result = check_greater(arr, number)\n    if result == True:\n        print(\"The number is greater than the elements of the array.\")\n    else:\n        print(\"The number is not greater than the elements of the array.\")\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr>number\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i>number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr_len = len(arr)\n    greater = False\n    for i in range(arr_len):\n        if(number < arr[i]):\n            greater = True\n            break\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = 0\n    for i in range(0,len(arr)):\n        if(arr[i] > number):\n            flag = 1\n            break\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print(f'\\nCheck whether the given number is greater than the elements of the given array: \\n')\n    arr.sort(reverse=True)\n    if number > arr[0]:\n        print(f'{number} is greater than {arr[0]}')\n    else:\n        print(f'{number} is not greater than {arr[0]}')\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[-1] > number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem > number:\n            return True\n    return False\n    "
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] <= number:\n            return i\n    return -1\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n    return greater\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('ab+?')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return \"Found a match!\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab+\")\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('a+b')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # text_match_one('ab') -> True\n    # text_match_one('abc') -> True\n    # text_match_one('abbc') -> True\n    # text_match_one('abcb') -> False\n    # text_match_one('') -> False\n    # text_match_one('c') -> False\n    # text_match_one('cb') -> False\n    # text_match_one('b') -> False\n    # text_match_one('bb') -> False\n    # text_match_one('bbc') -> False\n    # text_match_one('bcb') -> False\n    # text_match_one('bbbb') -> False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # text = \"aba\"\n    # pattern = r'ab*'\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        print(f'Text {text} matches pattern {pattern}')\n    else:\n        print(f'Text {text} does not match pattern {pattern}')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not Matched!'\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.+b+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*?b+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+?b+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+?b+?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,5}b{1,5}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,5}?b{1,5}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,5}?b{1,5}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,5}?b{1,5}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{0,3}?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{0,3}?b{"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '[ab]+'\n    pattern2 = '[a-zA-Z0-9]+'\n    m = re.search(pattern, text)\n    m2 = re.search(pattern2, text)\n    if m:\n        return 'found a match!'\n    else:\n        return 'No match'\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = -n\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n1 = n\n    n = str(n)\n    length = len(n)\n    n = n[length-1]\n    return int(n1)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    a = abs(n)\n    return int(a % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #d = n % 10\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<0:\n        n=abs(n)\n    return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negatives=[]\n    for i in list1:\n        if i<0:\n            negatives.append(i)\n    return negatives\ndef reverse_list(list1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    list2.reverse()\n    return list2\ndef match_with_greater_numbers(list1):\n    '''\n    Write a python function to match a list with a greater numbers.\n    '''\n    list2=[]\n    for i in list1:\n        if list1.index(i)<=len(list1)//2:\n            list2.append(list1[list1.index(i)+len(list1)//2])\n        else:\n            list2.append(list1[list1.index(i)-len(list1)//2])\n    return list2\ndef new_lists(list1,list2):\n    '''\n    Write a python function to combine 2 lists without repeating any values.\n    '''\n    list3=[]\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    for i in list2:\n        if i not in list3:\n            list3.append(i)\n    return list3\ndef longest_word(list1):\n    '''\n    Write a python function to find and return the longest word from the list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(len(i))\n    return list1[list2.index(max(list2))]\ndef longest_word_in_string(str1):\n    '''\n    Write a python function to find and return the longest word from the string.\n    '''\n    list1=str1.split(\" \")\n    return longest_word(list1)\ndef second_highest_number(list1):\n    '''\n    Write a python function to find and return the second highest number from the list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    list2.sort()\n    return list2[-2]\ndef reverse_list_with_for(list1):\n    '''\n    Write a python function to reverse a list with for loop.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    for i in range(len(list1)//2):\n        list2[i],list2[-(i+1)]=list2[-(i+1)],list2[i]\n    return list2\ndef reverse_list_with_while(list1):\n    '''\n    Write a python function to reverse a list with while loop.\n    '''\n    list2=[]\n    i=0\n    while i<len(list1):\n        list2.append(list1[i])\n        i+=1\n    i=0\n    while i<len(list1)//2:\n        list2[i],list2[-(i+1)]=list2[-(i+1)],list2[i]\n        i+=1\n    return list2\ndef check_list_for_even(list1):\n    '''\n    Write a python function to check a list for even numbers.\n    '''\n    list2=[]\n    for i in list1:\n        if i%2==0:\n            list2.append(i)\n    return list2\ndef even_numbers_from_list(list1):\n    '''\n    Write a python function to find and return the even numbers from the list.\n    '''\n    list2=[]\n    for i in list1:\n        if i%2==0:\n            list2.append(i)\n    return list2\ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef remove_duplicates_without_set(list1):\n    '''\n    Write a python function to remove duplicates from a list without using set.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef two_largest_numbers(list1):\n    '''\n    Write a python function to return the 2 largest numbers from the list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    list2.sort()\n    return [list2[-2],list2[-1]]\ndef two_largest_numbers_without_sort(list1):\n    '''\n    Write a python function to return the 2 largest numbers from the list without using sort function.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    list2.sort()\n    return [list2[-2],list2[-1]]\ndef find_common_elements(list1,list2):\n    '''\n    Write a python function to return the common elements from 2 lists.\n    '''\n    list2=[]\n    for i in list1:\n        if i in list2:\n            pass\n        else:\n            list2.append(i)\n    return list2\ndef find_common_elements_without_loop(list1,list2):\n    '''\n    Write a python function to return the common elements from 2 lists without using loop.\n    '''\n    list2=[]\n    for i in list1:\n        if i in list2:\n            pass\n        else:\n            list2.append(i)\n    return list2\ndef check_and_reverse(list1):\n    '''\n    Write a python function to check and reverse the list.\n    '''\n    if len(list1)%2==0:\n        return list1[::-1]\n    else:\n        return list1\ndef check_and_reverse_without_loop(list1):\n    '''\n    Write a python function to check and reverse the list without using loop.\n    '''\n    if len(list1)%2==0:\n        return list1[::-1]\n    else:\n        return list1\ndef main():\n    # 1.\n    list1=[10,-2,7,3,-6,1,9]\n    print(list1)\n    list1=neg_nos(list1)\n    print(list1)\n    # 2.\n    list1=reverse_list(list1)\n    print(list1)\n    # 3.\n    list1=[1,1,2,2,3,4,5,4,5,3,2,1]\n    print(list1)\n    list2=match_with_greater_numbers(list1)\n    print(list2)\n    # 4.\n    list1=[1,2,3,4,5]\n    list2=[6,7,8,9,0]\n    print(list1)\n    print(list2)\n    list3=new_lists(list1,list2)\n    print(list3)\n    # 5.\n    list1=[10,11,12,13,14]\n    print(list1)\n    print(longest_word(list1))\n    # 6.\n    list1=\"hello this is a string\"\n    print(list1)\n    print(longest_word_in_string(list1))\n    # 7.\n    list1=[2,4,1,5,7,9,4,5,2]\n    print(list1)\n    print(second_highest_number(list1))\n    # 8.\n    list1=[10,11,12,13,14]\n    print(list1)\n    list1=reverse_list_with_for(list1)\n    print(list1)\n    # 9.\n    list1=[10,11,12,13,14]\n    print(list1)\n    list1=reverse_list_with_while(list1)\n    print(list1)\n    # 10.\n    list1=[1,2,3,4,5,6,7]\n    print"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    nums_list = list1.split(\",\")\n    neg = []\n    for i in nums_list:\n        if int(i) < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    print(list2)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    print(list2)\n    \ndef find_num(list1):\n    '''\n    Write a python function to find the number of even and odd numbers in a list.\n    '''\n    even=0\n    odd=0\n    for i in list1:\n        if i%2==0:\n            even=even+1\n        else:\n            odd=odd+1\n    print(\"Even:\",even,\"Odd:\",odd)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i<0:\n            print(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_of_neg = []\n    for num in list1:\n        if num < 0:\n            list_of_neg.append(num)\n    return list_of_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result_list = []\n    for i in list1:\n        if i < 0:\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = abs(list1[i])\n    return list1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_without_odd_chars = ''\n    for char in str1:\n        if str1.count(char)%2==0:\n            str_without_odd_chars += char\n    return str_without_odd_chars\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    characters = [char for char in str1 if char.isalnum()]\n    print(characters)\n    result = []\n    for char in characters:\n        if char.isalpha():\n            result.append(char)\n    print(result)\n    return ''.join(result)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    while ',' in str1:\n        str1.remove(',')\n    while '.' in str1:\n        str1.remove('.')\n    str1 = ''.join(str1)\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ',':\n            continue\n        elif str1[i] == '.':\n            continue\n        elif str1[i] % 2 == 0:\n            str1[i] = ''\n        else:\n            str1[i] = ''\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([str(i) for i in str1 if i % 2 == 0])\n    \nprint(remove_odd('iEaLlOoO'))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = []\n    for i in range(len(str1)):\n        if int(str1[i]) % 2!= 0:\n            odd.append(str1[i])\n    newstr = ''\n    for i in range(len(str1)):\n        if str1[i] not in odd:\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for index in range(len(str1)):\n        if index % 2 == 0:\n            result += str1[index]\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1[i] for i in range(len(str1)) if i % 2 == 0)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for char in str1:\n        if char in [char for char in str1 if char % 2 == 1]:\n            str1 = str1.replace(char, \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    odd_char = []\n    for i in range(len(str1)):\n        if str1[i] % 2!= 0:\n            odd_char.append(str1[i])\n    for i in odd_char:\n        str1.remove(i)\n    str1 = ''.join(str1)\n    return str1\n    \nprint(remove_odd('ajayKumar'))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # get odd characters\n    odd = ''\n    for char in str1:\n        if ord(char) % 2!= 0:\n            odd += char\n    return odd\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] < test_list[j][1] and test_list[i][1] > test_list[j][0]:\n                count += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    length = len(test_list)\n    for i in range(length):\n        for j in range(i + 1, length):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list) - 1):\n        # check if the first element matches the second element in the pair\n        if test_list[i][0] == test_list[i + 1][1]:\n            counter += 1\n        # check if the first element matches the second element in the pair\n        if test_list[i][1] == test_list[i + 1][0]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count=0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0]==test_list[j][1] and test_list[i][1]==test_list[j][0]:\n                count+=1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for x in range(len(test_list)):\n        for y in range(x + 1, len(test_list)):\n            if test_list[x][0] == test_list[y][1] and test_list[y][0] == test_list[x][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def unpack_tuple(tup):\n        return tup[0], tup[1]\n    result = {}\n    for tup in test_list:\n        f,s = unpack_tuple(tup)\n        result[f] = result.get(f,0) + 1\n        result[s] = result.get(s,0) + 1\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for item in test_list:\n        if item[0] == item[1]:\n            bidirectional_count += 1\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[-1-i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    print(\"\\n---count bidirectional()---\")\n    print(\"Count of all bidirectional tuple pairs: {}\".format(count_bidirectional_helper(test_list)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L_str = [str(item) for item in L]\n    return int(\"\".join(L_str))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Your code here\n    return int(\"\".join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(list(map(str, L))))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #return sum(L)\n    #>>> multiple_to_single([1, 2, 3, 4])\n    #1234\n    #>>> multiple_to_single([1, 2, 3])\n    #123\n    #>>> multiple_to_single([1, 2])\n    #12\n    #>>> multiple_to_single([1, 2, 3, 4, 5])\n    #1234\n    #>>> multiple_to_single([])\n    #0\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Write a list of adverbs\n    adverb = ['also', 'nevertheless', 'consequently', 'furthermore', 'then','simultaneously', 'while', 'hence', 'elsewhere', 'later', 'as', 'otherwise','still', 'except', 'thereafter', 'thereby', 'whereas','moreover', 'never', 'now', 'nevertheless', 'wherever', 'whereafter', 'whereas', 'whereby', 'wherein', 'whereupon', 'wherever', 'whether', 'where', 'whilst', 'yet', 'wether', 'yet','such', 'anyway', 'wherever', 'whereby', 'wherein', 'wheresoever', 'whereso', 'whereto', 'whereby', 'whereinto', 'whereunto', 'wheres', 'whereabout', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'whereby', 'whereinto', 'whereunto', 'wheres', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'whereby', 'whereinto', 'whereunto', 'wheres', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafter', 'whereas', 'whereupon', 'wheres', 'whereby', 'wherever', 'whereabout', 'whereafte"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    matches = re.findall(r'\\w+ly|\\w+ness', text)\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the words in the text\n    all_words = re.findall(r'\\w+', text)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = r'\\b(after|before|from|by|while)\\b'\n    adverb_position = re.search(adverb, text)\n    if adverb_position:\n        return adverb_position.start()\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # [name] () -> [description]\n    # search for adverbs\n    # regexp = r'[Aa]lright|[Rr]ight|[Ff]irst|[Ff]ront|[Aa]djective|[Ff]or|[Ee]xplanation'\n    # regexp = r'[Ff]or|[Ee]xplanation'\n    regexp = r'[Ee]xplanation'\n    matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(regexp, text, re.MULTILINE)\n    # matches = re.finditer(r"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r\"\\w*ly\")\n    matches = pattern.findall(text)\n    print(matches)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regexp = r'(?:adverb)(\\s)(\\w+)'\n    result = re.findall(regexp, text)\n    return result\ndef find_adverb_position2(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:adverb)(?=\\s)'\n    result = re.findall(regexp, text)\n    return result\ndef find_adverb_position3(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:adverb)'\n    result = re.findall(regexp, text)\n    return result\ndef find_preposition_position(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    regexp = r'(?:preposition)(\\s)(\\w+)'\n    result = re.findall(regexp, text)\n    return result\ndef find_preposition_position2(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    regexp = r'(?:preposition)(?=\\s)'\n    result = re.findall(regexp, text)\n    return result\ndef find_preposition_position3(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:preposition)'\n    result = re.findall(regexp, text)\n    return result\ndef find_conjunction_position(text):\n    '''\n    Write a function to find the first conjunction and their positions in a given sentence.\n    '''\n    regexp = r'(?:conjunction)(\\s)(\\w+)'\n    result = re.findall(regexp, text)\n    return result\ndef find_conjunction_position2(text):\n    '''\n    Write a function to find the first conjunction and their positions in a given sentence.\n    '''\n    regexp = r'(?:conjunction)(?=\\s)'\n    result = re.findall(regexp, text)\n    return result\ndef find_conjunction_position3(text):\n    '''\n    Write a function to find the first conjunction and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:conjunction)'\n    result = re.findall(regexp, text)\n    return result\ndef find_interjection_position(text):\n    '''\n    Write a function to find the first interjection and their positions in a given sentence.\n    '''\n    regexp = r'(?:interjection)(\\s)(\\w+)'\n    result = re.findall(regexp, text)\n    return result\ndef find_interjection_position2(text):\n    '''\n    Write a function to find the first interjection and their positions in a given sentence.\n    '''\n    regexp = r'(?:interjection)(?=\\s)'\n    result = re.findall(regexp, text)\n    return result\ndef find_interjection_position3(text):\n    '''\n    Write a function to find the first interjection and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:interjection)'\n    result = re.findall(regexp, text)\n    return result\ndef find_pronoun_position(text):\n    '''\n    Write a function to find the first pronoun and their positions in a given sentence.\n    '''\n    regexp = r'(?:pronoun)(\\s)(\\w+)'\n    result = re.findall(regexp, text)\n    return result\ndef find_pronoun_position2(text):\n    '''\n    Write a function to find the first pronoun and their positions in a given sentence.\n    '''\n    regexp = r'(?:pronoun)(?=\\s)'\n    result = re.findall(regexp, text)\n    return result\ndef find_pronoun_position3(text):\n    '''\n    Write a function to find the first pronoun and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:pronoun)'\n    result = re.findall(regexp, text)\n    return result\ndef find_determiner_position(text):\n    '''\n    Write a function to find the first determiner and their positions in a given sentence.\n    '''\n    regexp = r'(?:determiner)(\\s)(\\w+)'\n    result = re.findall(regexp, text)\n    return result\ndef find_determiner_position2(text):\n    '''\n    Write a function to find the first determiner and their positions in a given sentence.\n    '''\n    regexp = r'(?:determiner)(?=\\s)'\n    result = re.findall(regexp, text)\n    return result\ndef find_determiner_position3(text):\n    '''\n    Write a function to find the first determiner and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:determiner)'\n    result = re.findall(regexp, text)\n    return result\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    regexp = r'(?:noun)(\\s)(\\w+)'\n    result = re.findall(regexp, text)\n    return result\ndef find_noun_position2(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    regexp = r'(?:noun)(?=\\s)'\n    result = re.findall(regexp, text)\n    return result\ndef find_noun_position3(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:noun)'\n    result = re.findall(regexp, text)\n    return result\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    regexp = r'(?:verb)(\\s)(\\w+)'\n    result = re.findall(regexp, text)\n    return result\ndef find_verb_position2(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    regexp = r'(?:verb)(?=\\s)'\n    result = re.findall(regexp, text)\n    return result\ndef find_verb_position3(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:verb)'\n    result = re.findall(regexp, text)\n    return result\ndef find_number_position(text):\n    '''\n    Write a function to find the first number and their positions in a given sentence.\n    '''\n    regexp = r'(?:number)(\\s)(\\w+)'\n    result = re.findall(regexp, text)\n    return result\ndef find_number_position2(text):\n    '''\n    Write a function to find the first number and their positions in a given sentence.\n    '''\n    regexp = r'(?:number)(?=\\s)'\n    result = re.findall(regexp, text)\n    return result\ndef find_number_position3(text):\n    '''\n    Write a function to find the first number and their positions in a given sentence.\n    '''\n    regexp = r'\\b(?:number)'\n    result = re.findall(regexp, text)\n    return result\ndef find_other_position(text):\n    '''\n    Write a function to find the first other an"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # print(text)\n    adverb_position = {}\n    adverb = re.compile(r'(?:adverb\\s+)([\\w\\s,-]+)\\s(?:in\\s+)(\\w+)')\n    find_adverb = adverb.search(text)\n    if find_adverb:\n        adverb_position = {'adverb': find_adverb.group(1), 'pos': find_adverb.group(2)}\n    # print(adverb_position)\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs=re.findall(r'\\w+ly',text)\n    start_position=[]\n    for i in adverbs:\n        start_position.append(text.index(i))\n    start_position.append(len(text))\n    return start_position\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"(\\w+ly)\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_id_position(text):\n    '''\n    Write a function to find the first identity and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"(\\w+[!@#$%^&*()_\\[\\]<>{}|;:\\-,.?/]+)?\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_user_position(text):\n    '''\n    Write a function to find the first user and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"(\\w+[!@#$%^&*()_\\[\\]<>{}|;:\\-,.?/]+)\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_num_position(text):\n    '''\n    Write a function to find the first number and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"(\\d+)\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_exclamation_position(text):\n    '''\n    Write a function to find the first exclamation and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"!\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_comma_position(text):\n    '''\n    Write a function to find the first comma and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\",\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_punctuation_position(text):\n    '''\n    Write a function to find the first punctuation and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"[!@#$%^&*()_\\[\\]<>{}|;:\\-,.?/]+\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"(\\w+ing)\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_all_capital_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"([A-Z][a-z]+)+\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_all_capital_position_with_under_line(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"([A-Z][a-z]+)+\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_all_upper_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"([A-Z]+)+\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_all_upper_position_with_under_line(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"([A-Z]+)+\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_upper_position_with_space(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"([A-Z]\\s)+\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_upper_position_with_space_with_under_line(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"([A-Z]\\s)+\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_all_under_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"(\\w+ing)\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_all_under_position_with_space(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"(\\w+ing)\\s\"\n    sentence = text.lower()\n    # print(sentence)\n    match_iter = re.finditer(pattern, sentence)\n    for match in match_iter:\n        result.append(match.span())\n    # print(result)\n    return result\ndef find_all_under_position_with_space_with_under_line(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r\"(\\w+ing)\\s\"\n    sentence = text.lower()\n    # print(sentence"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    print(\"A cube of size {} has a surface area of {}\".format(l, 6*l**2))\n    \nsurfacearea_cube(5)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l**3\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l**2\n    return 6*a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    print(l**2*6)\n    return\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def surfacearea(l):\n        surface_area = 6 * l * l\n        return surface_area\n    return surfacearea(l)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # convert input into float\n    l = float(l)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    result = 0\n    for num in nums:\n        if num > 0:\n            result += 1\n    return result / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num >= 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # nums = [1,1,0,1]\n    # nums = [3,4,0,1,3,0]\n    # nums = [0,0,0,1]\n    # nums = [0,0,0]\n    # nums = [0,0,0,0]\n    # nums = [0,0,0,0,0]\n    # nums = [0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num_count = 0\n    for num in nums:\n        if num > 0:\n            positive_num_count += 1\n    return positive_num_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count = count + 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            positive += 1\n    return positive/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    result = 0\n    for num in nums:\n        if num > 0:\n            result += 1\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #return max(list1)\n    for i in list1:\n        if i<0:\n            return i\n    return 'No negative numbers in the list'\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = 0\n    for i in range(len(list1)):\n        if (list1[i] < 0 and list1[i] > max_num):\n            max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    if neg == []:\n        return('No negative numbers found')\n    else:\n        return(max(neg))\n    \n    #using max() function\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l=[]\n    for i in list1:\n        l.append(i)\n    l.sort()\n    if l[0]>0:\n        print(\"No negative numbers present in the list.\")\n    else:\n        for i in l:\n            if i<0:\n                print(\"Largest negative number is\", i)\n                break\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in list1:\n        if i < 0 and i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = 0\n    for i in range(len(list1)):\n        if max_num < list1[i] < 0:\n            max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    if not list2:\n        return None\n    return max(list2)\nlist1 = [12, -2, 4, 8, -2]\nprint(\"Input list:\", list1)\nprint(\"Largest negative number from the given list:\", largest_neg(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    print(max(list1))\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    if neg_list:\n        return max(neg_list)\n    return None\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [6, 8, 1, 4, 9, -2, 0, -6, -10, -6, -9, -9]\n    list1.sort()\n    list1.reverse()\n    i = 0\n    while list1[i] < 0 and i < len(list1):\n        i += 1\n    if i >= len(list1):\n        return \"There is no negative number\"\n    else:\n        return list1[i]\n    print(largest_neg([6, 8, 1, 4, 9, -2, 0, -6, -10, -6, -9, -9]))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim(tuple_list, K):\n        '''\n        Trim the given tuple list using the given K.\n        '''\n        new_list = []\n        for tup in tuple_list:\n            new_list.append(tuple(tup[:K]))\n        return new_list\n    return trim(test_list, K)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimed_list = []\n    for tup in test_list:\n        tup = list(tup)\n        while len(tup) > K:\n            tup.pop()\n        trimed_list.append(tuple(tup))\n    return trimed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) < K:\n        return test_list\n    else:\n        return test_list[0:K]\n        \ndef print_n_pairs(l1, l2, n):\n    '''\n    Print n pairs (tuple) from two given list.\n    '''\n    # We could do this with a for loop but we are not allowed to.\n    if (len(l1) == 0 and len(l2) == 0):\n        return\n    elif (len(l1) == 0):\n        for i in range(n):\n            print(tuple(l2[i*2:(i+1)*2]))\n    elif (len(l2) == 0):\n        for i in range(n):\n            print(tuple(l1[i*2:(i+1)*2]))\n    else:\n        if (n > min(len(l1), len(l2))):\n            print(\"ERROR: n is bigger than the length of l1 and l2.\")\n        else:\n            for i in range(n):\n                print(tuple(l1[i*2:(i+1)*2]) + tuple(l2[i*2:(i+1)*2]))\n                \ndef find_intersection(l1, l2):\n    '''\n    Write a function to find the intersection of two list of list.\n    '''\n    return [x for x in l1 if x in l2]\n    \ndef create_list(size):\n    '''\n    Write a function to create a list with N element, where each element is a list of size K.\n    '''\n    return [list(range(0,size))] * size\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for t in test_list:\n        if len(t) <= K:\n            continue\n        else:\n            new_t = tuple(t[0:K])\n            print(new_t)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    list_of_trimmed_tup = []\n    for i in range(len(test_list)):\n        list_of_trimmed_tup.append(tuple(test_list[i][:K]))\n    return list_of_trimmed_tup\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[n][0:K]) for n in range(0, len(test_list))]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(map(lambda x: x[K], item)) for item in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    l = len(test_list)\n    if l <= K:\n        return\n    for i in range(K):\n        del test_list[-1]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for item in test_list:\n        if len(item) < K:\n            new_list.append(item)\n        else:\n            new_item = ()\n            for i in range(K):\n                new_item += item[i],\n            new_list.append(new_item)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: tuple(x[:K]), test_list))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(tup1*tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    \nprint(index_multiplication(tup1,tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"Element wise Multiplication of tuple: \" + str(test_tup1) + \" and \" + str(test_tup2) + \" is:\")\n    for i in range(len(test_tup1)):\n        print(test_tup1[i] * test_tup2[i])\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i]*test_tup2[i],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2])\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #tuple1 = (2, 3, 4, 5, 6)\n    #tuple2 = (1, 2, 3, 4, 5)\n    product = []\n    for i in range(len(test_tup1)):\n        product.append(test_tup1[i] * test_tup2[i])\n    return tuple(product)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mul=test_tup1*test_tup2\n    print(mul)\n    return mul\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_product = list(zip(test_tup1, test_tup2))\n    for i, j in index_product:\n        i = j * i\n        print(i)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    returned = ()\n    for ind, num in enumerate(test_tup1):\n        returned += (num * test_tup2[ind], )\n    return returned\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(tup) \n    count = Counter(lst) \n    for i in count: \n        print(i, count[i]) \ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \ncount_Occurrence(tup, lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    result = Counter(lst) \n    for item, count in result.items(): \n        print (\"{} occurs {} times\".format(item, count))\ntup = ('g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e') \nlst = ['g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e', 'e', 'k','s', 'f', 'o', 'r', 'g', 'e'] \ncount_Occurrence(tup, lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #print(\"{}\".format(lst))\n    #print(\"{}\".format(tup))\n    list_count = []\n    for i in tup:\n        list_count.append(lst.count(i))\n    \n    \n    return list_count\ndef count_Occurrence_and_return_list(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple and returns list of those elements.\n    '''\n    #print(\"{}\".format(lst))\n    #print(\"{}\".format(tup))\n    list_count = []\n    for i in tup:\n        list_count.append(lst.count(i))\n    \n    \n    return list_count\n    \ndef convert_list_tuple(lst):\n    '''\n    Write a python function to convert list to tuple\n    '''\n    #print(\"{}\".format(lst))\n    \n    return tuple(lst)\n    \ndef delete_occurences(lst): \n    '''\n    Write a python function to delete all occurences of element in list\n    '''\n    \n    return lst[::2]\n    \ndef print_occurence(lst): \n    '''\n    Write a python function to print all occurences of element in list\n    '''\n    \n    for item in lst:\n        print(item)\ndef get_unique_in_list(lst): \n    '''\n    Write a python function to get unique elements of list\n    '''\n    print(set(lst))\n    \ndef get_first_n_occurence(lst, n): \n    '''\n    Write a python function to get first n occurences of element in list\n    '''\n    \n    return set(lst[:n])\n    \ndef get_second_n_occurence(lst, n): \n    '''\n    Write a python function to get second n occurences of element in list\n    '''\n    \n    return set(lst[n:])\n    \ndef is_empty(lst): \n    '''\n    Write a python function to check whether list is empty or not\n    '''\n    if lst:\n        return False\n    else:\n        return True\n        \ndef multiply_list(lst): \n    '''\n    Write a python function to multiply list of numbers\n    '''\n    multiply = 1\n    for i in lst:\n        multiply = multiply * i\n        \n    return multiply\n    \ndef multiply_list_and_return_list(lst): \n    '''\n    Write a python function to multiply list of numbers and returns list of numbers\n    '''\n    multiply = 1\n    list_multi = []\n    for i in lst:\n        multiply = multiply * i\n        list_multi.append(multiply)\n        \n    return list_multi\n    \ndef remove_nth_occurence(lst, n): \n    '''\n    Write a python function to remove nth occurence of element in list\n    '''\n    \n    return [i for i in lst if i!= n]\n    \ndef check_if_palindrome(lst): \n    '''\n    Write a python function to check if list is palindrome or not\n    '''\n    lst_back = lst[::-1]\n    if lst == lst_back:\n        return True\n    else:\n        return False\n        \ndef make_a_list_of_even_numbers(lst): \n    '''\n    Write a python function to make list of even numbers from list\n    '''\n    lst_even = []\n    for i in lst:\n        if i%2 == 0:\n            lst_even.append(i)\n    return lst_even\n    \ndef make_a_list_of_odd_numbers(lst): \n    '''\n    Write a python function to make list of odd numbers from list\n    '''\n    lst_odd = []\n    for i in lst:\n        if i%2!= 0:\n            lst_odd.append(i)\n    return lst_odd\n    \ndef find_frequent_number(lst): \n    '''\n    Write a python function to find frequent number in a list\n    '''\n    freq_lst = Counter(lst).most_common(1)\n    return freq_lst[0][0]\n    \ndef find_frequent_number_and_return_list(lst): \n    '''\n    Write a python function to find frequent number in a list and return list of frequent numbers\n    '''\n    freq_lst = Counter(lst).most_common()\n    return freq_lst\n    \ndef find_max(lst): \n    '''\n    Write a python function to find maximum number from a list\n    '''\n    \n    return max(lst)\n    \ndef find_min(lst): \n    '''\n    Write a python function to find minimum number from a list\n    '''\n    \n    return min(lst)\n    \ndef get_middle_number_from_list(lst): \n    '''\n    Write a python function to find middle number from list\n    '''\n    lst_len = len(lst)\n    \n    if lst_len % 2 == 0:\n        mid = lst_len // 2\n        return (lst[mid-1] + lst[mid]) / 2\n    else:\n        mid = lst_len // 2\n        return lst[mid]\n    \ndef get_middle_number_from_list_and_return_list(lst): \n    '''\n    Write a python function to find middle number from list and return list of middle numbers\n    '''\n    lst_len = len(lst)\n    \n    if lst_len % 2 == 0:\n        mid = lst_len // 2\n        lst_mid = []\n        for i in range(mid-1, mid+1):\n            lst_mid.append(lst[i])\n        return lst_mid\n    else:\n        mid = lst_len // 2\n        lst_mid = []\n        for i in range(mid, mid+1):\n            lst_mid.append(lst[i])\n        return lst_mid\n    \ndef remove_nth_from_list(lst, n): \n    '''\n    Write a python function to remove nth number from list\n    '''\n    \n    lst.pop(n)\n    return lst\n    \ndef remove_first_element_from_list(lst): \n    '''\n    Write a python function to remove first element from list\n    '''\n    \n    lst.pop(0)\n    return lst\n    \ndef remove_last_element_from_list(lst): \n    '''\n    Write a python function to remove last element from list\n    '''\n    \n    lst.pop()\n    return lst\n    \ndef find_index_of_nth_element(lst, n): \n    '''\n    Write a python function to find index of nth element in list\n    '''\n    \n    return lst.index(n)\n    \ndef replace_first_element_in_list(lst): \n    '''\n    Write a python function to replace first element in list with a new element\n    '''\n    \n    lst[0] = 100\n    return lst\n    \ndef replace_last_element_in_list(lst): \n    '''\n    Write a python function to replace last element in list with a new element\n    '''\n    \n    lst[-1] = 100\n    return lst\n    \ndef sum_of_all_elements_in_list(lst): \n    '''\n    Write a python function to sum all elements in list\n    '''\n    \n    return sum(lst)\n    \ndef multiply_all_elements_in_list(lst): \n    '''\n    Write a python function to multiply all elements in list\n    '''\n    \n    multiply = 1\n    for i in lst:\n        multiply = multiply "
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    l = [] \n    for t in lst: \n        l.append(tuple(t)) \n    c = Counter(l) \n    for i in tup: \n        print(\"Occurrence of {} is {}\".format(i, c[i])) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence_count = Counter(lst) \n    #print(\"Occurrence:\", occurence_count) \n    for ele in tup: \n        if occurence_count[ele] > 0: \n            print(ele, \"occured\", occurence_count[ele], \"time(s)\") \n    return\n    "
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # return a dictionary with key as element of tup and value as count of element\n    freq = Counter(tup)\n    return {i: freq[i] for i in lst} \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur = Counter(lst) \n    for i in tup: \n        print (occur[i], end = \" \") \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) & Counter(tup) \n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = list()\n    for i in nums:\n        result.append(i**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (n - 1) + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**3 + i)%(10**9 + 7)\n    return sum\n    \ndef main():\n    '''\n    The main function to run the program.\n    '''\n    print(cal_sum(100))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return cal_sum_recursive(n, 0, 0)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 2:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 * cal_sum(n-1) - cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(2, n):\n        if (i % 2) == 0:\n            sum += i / 2\n        else:\n            sum -= i / 2\n    return sum\n    \n    \ndef cal_factorial(n):\n    '''\n    Write a function to calculate the factorial of a non-negative number.\n    '''\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact\n    \n    \ndef cal_combination(n, k):\n    '''\n    Write a function to calculate the combinatorial.\n    '''\n    comb = cal_factorial(n) / (cal_factorial(k) * cal_factorial(n-k))\n    return comb\n    \n    \ndef cal_permutation(n, k):\n    '''\n    Write a function to calculate the permutation.\n    '''\n    perm = cal_factorial(n) / cal_factorial(n-k)\n    return perm\n    \n    \ndef cal_series(n, k):\n    '''\n    Write a function to calculate the series.\n    '''\n    sum = 0\n    for i in range(k):\n        sum += (n ** i) / (i+1)\n    return sum\n    \n    \ndef cal_pi(n):\n    '''\n    Write a function to calculate the value of pi.\n    '''\n    pi = 4 * cal_sum(n)\n    return pi\n    \n    \ndef cal_pi_1(n):\n    '''\n    Write a function to calculate the value of pi with 1-d array.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2) == 0:\n            sum += 1 / (2 * i + 1)\n        else:\n            sum -= 1 / (2 * i + 1)\n    pi = 2 * sum\n    return pi\n    \n    \ndef cal_pi_2(n):\n    '''\n    Write a function to calculate the value of pi with 2-d array.\n    '''\n    pi_2 = np.ones((n,n))\n    for i in range(n):\n        for j in range(n):\n            if (i % 2) == 0:\n                pi_2[i,j] = 1 / (2 * i + 1)\n            else:\n                pi_2[i,j] = -1 / (2 * i + 1)\n    return pi_2\n    \n    \ndef cal_pi_3(n):\n    '''\n    Write a function to calculate the value of pi with 3-d array.\n    '''\n    pi_3 = np.zeros((n,n,n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if (i % 2) == 0:\n                    pi_3[i,j,k] = 1 / (2 * i + 1)\n                else:\n                    pi_3[i,j,k] = -1 / (2 * i + 1)\n    return pi_3\n    \n    \ndef cal_pi_4(n):\n    '''\n    Write a function to calculate the value of pi with 4-d array.\n    '''\n    pi_4 = np.zeros((n,n,n,n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    if (i % 2) == 0:\n                        pi_4[i,j,k,l] = 1 / (2 * i + 1)\n                    else:\n                        pi_4[i,j,k,l] = -1 / (2 * i + 1)\n    return pi_4\n    \n    \ndef cal_pi_5(n):\n    '''\n    Write a function to calculate the value of pi with 5-d array.\n    '''\n    pi_5 = np.zeros((n,n,n,n,n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        if (i % 2) == 0:\n                            pi_5[i,j,k,l,m] = 1 / (2 * i + 1)\n                        else:\n                            pi_5[i,j,k,l,m] = -1 / (2 * i + 1)\n    return pi_5\n    \n    \ndef cal_pi_6(n):\n    '''\n    Write a function to calculate the value of pi with 6-d array.\n    '''\n    pi_6 = np.zeros((n,n,n,n,n,n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        for n in range(n):\n                            if (i % 2) == 0:\n                                pi_6[i,j,k,l,m,n] = 1 / (2 * i + 1)\n                            else:\n                                pi_6[i,j,k,l,m,n] = -1 / (2 * i + 1)\n    return pi_6\n    \n    \ndef cal_pi_7(n):\n    '''\n    Write a function to calculate the value of pi with 7-d array.\n    '''\n    pi_7 = np.zeros((n,n,n,n,n,n,n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        for n in range(n):\n                            for o in range(n):\n                                if (i % 2) == 0:\n                                    pi_7[i,j,k,l,m,n,o] = 1 / (2 * i + 1)\n                                else:\n                                    pi_7[i,j,k,l,m,n,o] = -1 / (2 * i + 1)\n    return pi_7\n    \n    \ndef cal_pi_8(n):\n    '''\n    Write a function to calculate the value of pi with 8-d array.\n    '''\n    pi_8 = np.zeros((n,n,n,n,n,n,n,n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        for n in range(n):\n                            for o in range(n):\n                                for p in range(n):\n                                    if (i % 2) == 0:\n                                        pi_8[i,j,k,l,m,n,o,p] = 1 / (2 * i + 1)\n                                    else:\n                                        pi_8[i,j,k,l,m,n,o,p] = -1 / (2 * i + 1)\n    return pi_8\n    \n    \ndef cal_pi_9(n):\n    '''\n    Write a function to calculate the value of pi with 9-d array.\n    '''\n    pi_9 = np.zeros((n,n,n,n,n,n,n,n,n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        for n in range(n):\n                            for o in range(n):\n                                for p in range(n):\n                                    for q in range(n):\n                                        if (i % 2) == 0:\n                                            pi_9[i,j,k,l,m,n,o,p,q] = 1 / (2 * i + 1)\n                                        else:\n                                            pi_9[i,j,k,l,m,n,o,p,q] = -1 / (2 * i + 1)\n    return pi_9\n    \n    \ndef cal_pi_10(n):\n    '''\n    Write a function to calculate the value of pi with 10-d array.\n    '''\n    pi_10 = np.zeros((n,n,n,n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # iterative method\n    # n=0,1,2,3,5,8,13,21,34,55\n    # 1.0*1+2.0*3+3.0*5+4.0*8+5.0*13+6.0*21+7.0*34+8.0*55=86.0\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #p=[]\n    #p = n*((2*n+1)*(n+1)/3)\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+perrin(i)\n    return sum\n    \ndef perrin(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return perrin(n-1)+2*(2*n+1)\n        \n    \ndef fibonacci(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    lst = []\n    for i in range(0, len(l)):\n        if l[i].find(str)!= -1:\n            lst.append(l[i][0:len(str)])\n    return lst\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == None:\n        return None\n    if len(l) < 1:\n        return None\n    size = len(l[0])\n    for i in range(0, len(l)):\n        if len(l[i]) < size:\n            size = len(l[i])\n    return l[0][0:size]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in range(l):\n        s += str[i]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[0:l] for x in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            output.append(str[i])\n    return output\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return list(map(lambda s: s[l], str))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    s = \"\"\n    while (len(s) < l):\n        if (i == len(str)):\n            break\n        s += str[i]\n        i += 1\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # YOUR CODE HERE\n    string=''\n    for i in range(l):\n        string = string + str[i]\n    return string\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[l:] for s in str]\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    text1 = text1.replace(\"\\t\",\"\")\n    text1 = text1.replace(\"\\n\",\"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #remove all spaces\n    text2 = text1.replace(' ','')\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # your code here\n    return text1.replace(' ','')\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    whitespace_pattern = '\\s+'\n    return re.sub(whitespace_pattern,'',text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    my_string = ''.join(text1.split())\n    return my_string\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = ''\n    for char in text1:\n        if char!='':\n            text2+=char\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #first approach\n    #text1 = text1.replace('\\n', '')\n    #text1 = text1.replace('\\t', '')\n    #text1 = text1.replace(' ', '')\n    #return text1\n    #second approach\n    return ''.join(text1.split())\n    \ndef remove_non_words(text1):\n    '''\n    Write a function to remove all non-alphanumeric characters from the given string.\n    '''\n    #first approach\n    #return re.sub(r'[^\\w\\s]', '', text1)\n    #second approach\n    return re.sub(r'[^\\w\\s]', '', text1)\n    \ndef check_pangram(text1, alphabet1):\n    '''\n    Write a function to check whether the given string is a pangram or not.\n    A pangram is a sentence containing every letter of the alphabet at least once.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    #first approach\n    #if alphabet1 in text1:\n    #    return True\n    #else:\n    #    return False\n    #second approach\n    return set(alphabet1.lower()) <= set(alphabet1.lower())\n    \ndef convert_emea_date_to_amer_date(emea_date1):\n    '''\n    Write a function to convert an emea date to an american date.\n    An emea date is given as a tuple of the form (day, month, year).\n    The returned American date should be in the form (month, day, year).\n    '''\n    #first approach\n    #day, month, year = emea_date1\n    #return (month, day + month // 20, year)\n    #second approach\n    #return (month, day + month // 20, year)\n    #third approach\n    return emea_date1[1], emea_date1[0] + emea_date1[1] // 20, emea_date1[2]\n    \ndef is_unique_characters(text1):\n    '''\n    Write a function to check whether each character of the given string appears only once.\n    '''\n    return len(set(text1)) == len(text1)\n    \ndef longest_word(text1):\n    '''\n    Write a function to get the longest word of the given string.\n    '''\n    #first approach\n    #longest_word_length = len(max(text1.split(), key=len))\n    #return max(text1.split(), key=len)\n    #second approach\n    return max(text1.split(), key=len)\n    \ndef text_justification(text1, max_width1):\n    '''\n    Write a function to justify a text.\n    The text is justified by breaking it into lines of the given width, and then justifying each line individually.\n    The way each line is justified is described below:\n    - Each line should have the same amount of space before and after it.\n    - A line is considered to be full if it has exactly max_width characters, where a line is defined to be a sequence of non-space characters.\n    - The amount of space to put before the first word of a line is given by the length of the line minus the length of the first word.\n    - The amount of space to put after the last word of a line is given by the length of the line minus the length of the last word.\n    - If the space cannot be equally divided, then the spaces before or after the words should be placed on the left side, or on the right side.\n    - If the amount of space on a line is less than the width of the line, then the line should be padded with space characters on the left to make it full.\n    '''\n    #first approach\n    #text_split = text1.split()\n    #list1 = []\n    #line_length = 0\n    #for i in range(len(text_split)):\n    #    if line_length + len(text_split[i]) + 1 <= max_width1:\n    #        list1.append(text_split[i])\n    #        line_length += len(text_split[i]) + 1\n    #    else:\n    #        list1.append(text_split[i])\n    #        new_list = []\n    #        for j in range(len(list1)):\n    #            if j == 0:\n    #                new_list.append(list1[j])\n    #                new_list.append(' '*(max_width1 - line_length))\n    #            else:\n    #                new_list.append(list1[j])\n    #        new_list.append(' '*(max_width1 - line_length))\n    #        list1 = new_list\n    #        break\n    #return ''.join(list1)\n    #second approach\n    #return '\\n'.join([' '.join(line) for line in text_split])\n    #third approach\n    return '\\n'.join([' '.join(line) for line in text1.splitlines(True)])\n    \ndef match_parentheses(text1):\n    '''\n    Write a function to match a text with the given conditions.\n    The function should take a string as input and check whether it meets the following conditions:\n    - The parenthesis are correctly matched and all open parenthesis are closed.\n    - There are no extra parenthesis.\n    - There is exactly one space between each word and each of its characters.\n    - There are no unnecessary spaces.\n    '''\n    #first approach\n    #parentheses_1 = [i for i in text1 if i == '(' or i == ')']\n    #parentheses_2 = []\n    #for i in parentheses_1:\n    #    if i == ')' and len(parentheses_2)!= 0:\n    #        parentheses_2.pop()\n    #    elif i == ')' and len(parentheses_2) == 0:\n    #        return False\n    #    elif i == '(':\n    #        parentheses_2.append(i)\n    #return len(parentheses_2) == 0\n    #second approach\n    return text1.count('(') == text1.count(')')\n    \ndef check_sentence(text1):\n    '''\n    Write a function to check whether a given sentence is a pangram or not.\n    '''\n    #first approach\n    #alphabet1 = 'abcdefghijklmnopqrstuvwxyz'\n    #return set(alphabet1).issubset(set(text1))\n    #second approach\n    return all(letter in text1.lower() for letter in 'abcdefghijklmnopqrstuvwxyz')\n    \ndef get_reverse_complement(text1):\n    '''\n    Write a function to get the reverse complement of a DNA string.\n    '''\n    #first approach\n    #complement_dic = {'a': 't', 'c': 'g', 't': 'a', 'g': 'c','':''}\n    #return ''.join(complement_dic[i] for i in text1[::-1])\n    #second approach\n    complement_dic = {'a': 't', 'c': 'g', 't': 'a', 'g': 'c'}\n    return ''.join([complement_dic[i] for i in text1])[::-1]\n    \ndef text_alignment(text1, text2):\n    '''\n    Write a function to align two strings so that the following condition is true:\n    - the first character of the first string should be the last character of the first string.\n    - the first character of the second string should be the last character of the second string.\n    - the characters in between should be aligned in the same way as the corresponding characters in the original strings.\n    '''\n    #first approach\n    #return text1[0] + text2[0] + text1[1:len(text1) - 1] + text2[1:len(text2) - 1]\n    #second approach\n    #return text1[1:len(text1) - 1] + text2[1:len(text2) - 1] + text1[0] + text2[0]\n    #third approach\n    return ''.join(text1[i] for "
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = text1.replace(\" \", \"\")\n    print(\"Output : \", new_text)\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = int(actual_cost) - int(sale_amount)\n    if loss > 0:\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        amount = sale_amount - actual_cost\n        return amount\n    else:\n        amount = 0\n        return amount\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount= sale_amount-actual_cost\n    return loss_amount if loss_amount < 0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    if loss_amount < 0:\n        return 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount - actual_cost\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, n+1) :\n        if n%i==0 :\n            factors.append(i)\n    sum=0\n    for i in factors:\n        if i%2==0:\n            sum=sum+i\n    return sum\n    \ndef reverseString(str) :\n    '''\n    Write a python function to reverse the given string.\n    '''\n    if len(str) <= 1 :\n        return str\n    return str[-1]+reverseString(str[0:len(str)-1])\n    \ndef isPalindrome(str) :\n    '''\n    Write a python function to check if the given string is palindrome.\n    '''\n    if len(str) <= 1 :\n        return True\n    if str[0] == str[-1] :\n        return isPalindrome(str[1:-1])\n    return False\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n//2 + 1) : \n        if n % i == 0 : \n            sum += i \n    return sum \ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    sum = 1\n    i = 2 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            sum += i \n            n /= i \n            while n % i == 0 : \n                sum += i \n                n /= i \n        i += 1 \n    if n > 1 : \n        sum += n \n    return sum \ndef numofDivisors(n) : \n    '''\n    Write a python function to find the number of prime factors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    c = 0\n    i = 2 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            c += 1\n            while n % i == 0 : \n                n /= i \n        i += 1 \n    if n > 1 : \n        c += 1 \n    return c \ndef lcm(x, y) : \n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return x * y // math.gcd(x, y) \ndef euler(n) : \n    '''\n    Write a python function to calculate the value of Euler's number e.\n    '''\n    a = 0\n    for i in range(1, n + 1) : \n        a += 1 / math.factorial(i) \n    return a \ndef fibonacci(n) : \n    '''\n    Write a python function to calculate the value of the nth term in the fibonacci sequence.\n    '''\n    a = 0 \n    b = 1 \n    for i in range(2, n + 1) : \n        c = a + b \n        a = b \n        b = c \n    return a \ndef primeFactors(n) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if n <= 1 : \n        return \n    d = 2 \n    while d * d <= n : \n        if n % d == 0 : \n            print(d) \n            n /= d \n        else : \n            d += 1 \n    if n > 1 : \n        print(n) \ndef numofDivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    c = 0\n    i = 1 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            c += 1\n            if n // i!= i : \n                c += 1\n        i += 1 \n    if n > 1 : \n        c += 1 \n    return c \ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    sum = 1\n    i = 2 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            sum += i \n            while n % i == 0 : \n                sum += i \n                n /= i \n        i += 1 \n    if n > 1 : \n        sum += n \n    return sum \ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    sum = 1\n    i = 2 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            sum += i \n            while n % i == 0 : \n                sum += i \n                n /= i \n        i += 1 \n    if n > 1 : \n        sum += n \n    return sum \ndef numofDivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    c = 0\n    i = 1 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            c += 1\n            if n // i!= i : \n                c += 1\n        i += 1 \n    if n > 1 : \n        c += 1 \n    return c \ndef numofDivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    c = 0\n    i = 1 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            c += 1\n            while n % i == 0 : \n                c += 1\n                n /= i \n        i += 1 \n    if n > 1 : \n        c += 1 \n    return c \ndef numofDivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    c = 0\n    i = 1 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            c += 1\n            while n % i == 0 : \n                c += 1\n                n /= i \n        i += 1 \n    if n > 1 : \n        c += 1 \n    return c \ndef numofDivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    c = 0\n    i = 1 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            c += 1\n            while n % i == 0 : \n                c += 1\n                n /= i \n        i += 1 \n    if n > 1 : \n        c += 1 \n    return c \ndef numofDivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    c = 0\n    i = 1 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            c += 1\n            while n % i == 0 : \n                c += 1\n                n /= i \n        i += 1 \n    if n > 1 : \n        c += 1 \n    return c \ndef numofDivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    c = 0\n    i = 1 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            c += 1\n            while n % i == 0 : \n                c += 1\n                n /= i \n        i += 1 \n    if n > 1 : \n        c += 1 \n    return c \ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    if n <= 1 : \n        return 0\n    sum = 1\n    i = 2 \n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            sum += i \n            while n % i == 0 : \n                sum += i \n                n /= i \n        i += 1 \n    if n > 1 : \n        sum += n \n    return sum \ndef nu"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(n/2)+1) : \n        if(n%i == 0 and i%2==0): \n            sum += i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    sum = 0\n    for i in range(2, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            if (i % 2 == 0): \n                sum = sum + i \n            else: \n                sum = sum + (n // i) \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while (n % 2 == 0): \n        sum += 2\n        n = n / 2\n    return sum \ndef addFactors(n):\n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    sum = 0\n    while (n % 2!= 0): \n        sum += n \n        n = n / 2\n    return sum \ndef checkFibonacci(n):\n    '''\n    Write a python function to check if a number is Fibonacci or not.\n    '''\n    if(n==0 or n==1):\n        return True\n    if(n==2):\n        return False\n    elif(n%2==0):\n        return False\n    else:\n        return checkFibonacci(n-1) and checkFibonacci(n-2)\ndef reverse(num):\n    '''\n    Write a python function to find the reverse of a number.\n    '''\n    if(num==0):\n        return 0\n    elif(num<0):\n        return -1*reverse(-1*num)\n    else:\n        rem=num%10\n        num=num//10\n        return 10*reverse(num)+rem\ndef digitSum(n):\n    '''\n    Write a python function to get the sum of digits of a number.\n    '''\n    if(n==0):\n        return 0\n    else:\n        return digitSum(n//10)+int(n%10)\ndef isPalindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if(n==reverse(n)):\n        return True\n    else:\n        return False\ndef findDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return digitSum(n)\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check if a number is perfect square or not.\n    '''\n    x=int(math.sqrt(n))\n    return n==x*x\ndef checkPrimality(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if(n==1):\n        return False\n    if(n==2):\n        return True\n    else:\n        for i in range(2,n):\n            if(n%i==0):\n                return False\n        return True\ndef isPentagonal(n):\n    '''\n    Write a python function to check if a number is pentagonal or not.\n    '''\n    if(n==0):\n        return False\n    else:\n        x=math.sqrt(1+24*n)\n        if(x==int(x)):\n            return True\n        return False\ndef nextPentagonal(n):\n    '''\n    Write a python function to find the next pentagonal number.\n    '''\n    return int(n*(3*n-1)/2)\ndef isHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal or not.\n    '''\n    if(n==0):\n        return False\n    else:\n        x=math.sqrt(1+8*n)\n        if(x==int(x)):\n            return True\n        return False\ndef nextHexagonal(n):\n    '''\n    Write a python function to find the next hexagonal number.\n    '''\n    return int(n*(2*n-1))\ndef isHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal or not.\n    '''\n    if(n==0):\n        return False\n    else:\n        x=math.sqrt(1+8*n)\n        if(x==int(x)):\n            return True\n        return False\ndef nextTruncatableHexagonal(n):\n    '''\n    Write a python function to find the next hexagonal number with a truncable decimal representation.\n    '''\n    while True:\n        if(isHexagonal(n)):\n            truncable=hex(n)[2:]\n            if(truncable.startswith(\"0\")):\n                return nextHexagonal(n)\n        n+=1\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef nextTruncatableHexagonal(n):\n    '''\n    Write a python function to find the next hexagonal number with a truncable decimal representation.\n    '''\n    while True:\n        if(isHexagonal(n)):\n            truncable=hex(n)[2:]\n            if(truncable.startswith(\"0\")):\n                return nextHexagonal(n)\n        n+=1\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n).startswith(\"0\"))):\n            return True\n    return False\ndef isTruncatableHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal and truncatable or not.\n    '''\n    if(isHexagonal(n)):\n        if(not(str(n)"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            if i%2==0:\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2==0:\n                sum+=i\n    return sum+1\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            if n//i == i :\n                total += i\n            else :\n                total += i\n                total += n//i\n    return total\ndef numSquares(n) :\n    '''\n    Write a python function to find the number of squares needed to sum of 1 to n.\n    '''\n    squares = [i*i for i in range(1,int(math.sqrt(n))+1)]\n    dp = [float(\"inf\") for i in range(n+1)]\n    dp[0] = 0\n    for i in range(1,n+1) :\n        for j in squares :\n            if j > i :\n                break\n            dp[i] = min(dp[i],dp[i-j]+1)\n    return dp[n]\ndef numSquares2(n) :\n    '''\n    Write a python function to find the number of squares needed to sum of 1 to n.\n    '''\n    squares = [i*i for i in range(1,int(math.sqrt(n))+1)]\n    dp = [float(\"inf\") for i in range(n+1)]\n    dp[0] = 0\n    for i in range(1,n+1) :\n        for j in squares :\n            if j > i :\n                break\n            dp[i] = min(dp[i],dp[i-j]+1)\n    return dp[n]\ndef numSquares3(n) :\n    '''\n    Write a python function to find the number of squares needed to sum of 1 to n.\n    '''\n    squares = [i*i for i in range(1,int(math.sqrt(n))+1)]\n    dp = [float(\"inf\") for i in range(n+1)]\n    dp[0] = 0\n    for i in range(1,n+1) :\n        for j in squares :\n            if j > i :\n                break\n            dp[i] = min(dp[i],dp[i-j]+1)\n    return dp[n]\ndef maxProduct(nums) :\n    '''\n    Write a python function to find the maximum product of two integers in a given list.\n    '''\n    maxProduct = float(\"-inf\")\n    for i in range(len(nums)) :\n        for j in range(i+1,len(nums)) :\n            if nums[i] * nums[j] > maxProduct :\n                maxProduct = nums[i] * nums[j]\n    return maxProduct\ndef numSquares(n) :\n    '''\n    Write a python function to find the number of squares needed to sum of 1 to n.\n    '''\n    dp = [float(\"inf\") for i in range(n+1)]\n    dp[0] = 0\n    for i in range(1,n+1) :\n        for j in range(1,int(math.sqrt(i))+1) :\n            if j*j > i :\n                break\n            dp[i] = min(dp[i],dp[i-j*j] + 1)\n    return dp[n]\ndef numSquares2(n) :\n    '''\n    Write a python function to find the number of squares needed to sum of 1 to n.\n    '''\n    dp = [float(\"inf\") for i in range(n+1)]\n    dp[0] = 0\n    for i in range(1,n+1) :\n        for j in range(int(math.sqrt(i)),0,-1) :\n            if j*j > i :\n                break\n            dp[i] = min(dp[i],dp[i-j*j] + 1)\n    return dp[n]\ndef maxProduct(nums) :\n    '''\n    Write a python function to find the maximum product of two integers in a given list.\n    '''\n    maxProduct = float(\"-inf\")\n    for i in range(len(nums)) :\n        for j in range(i+1,len(nums)) :\n            if nums[i] * nums[j] > maxProduct :\n                maxProduct = nums[i] * nums[j]\n    return maxProduct\ndef isTriangle(a, b, c):\n    '''\n    Write a python function to check if a triangle is valid or not.\n    '''\n    if a + b > c and a + c > b and b + c > a :\n        return True\n    else :\n        return False\ndef canFormTriangle(arr) :\n    '''\n    Write a python function to check if a triangle can be formed from a list of side lengths.\n    '''\n    arr.sort()\n    if arr[0] + arr[1] > arr[2] and arr[0] + arr[2] > arr[1] and arr[1] + arr[2] > arr[0] :\n        return True\n    return False\ndef fizzBuzz(n) :\n    '''\n    Write a python function to print numbers from 1 to n in the following way.\n    - if the number is divisible by 3, print \"Fizz\"\n    - if the number is divisible by 5, print \"Buzz\"\n    - if the number is divisible by 3 and 5, print \"FizzBuzz\"\n    '''\n    for i in range(1,n+1) :\n        if i % 3 == 0 and i % 5 == 0 :\n            print(\"FizzBuzz\")\n        elif i % 3 == 0 :\n            print(\"Fizz\")\n        elif i % 5 == 0 :\n            print(\"Buzz\")\n        else :\n            print(i)\ndef fizzBuzz2(n) :\n    '''\n    Write a python function to print numbers from 1 to n in the following way.\n    - if the number is divisible by 3, print \"Fizz\"\n    - if the number is divisible by 5, print \"Buzz\"\n    - if the number is divisible by 3 and 5, print \"FizzBuzz\"\n    '''\n    def fizzBuzz(n, fizz = 3, buzz = 5) :\n        for i in range(1,n+1) :\n            if i % fizz == 0 and i % buzz == 0 :\n                print(\"FizzBuzz\")\n            elif i % fizz == 0 :\n                print(\"Fizz\")\n            elif i % buzz == 0 :\n                print(\"Buzz\")\n            else :\n                print(i)\n    fizzBuzz(n,3,5)\ndef minMoves(n, start, end) :\n    '''\n    Write a python function to calculate the minimum number of moves needed to get from start to end.\n    '''\n    moves = 0\n    while start!= end :\n        if start > end :\n            start, end = end, start\n        moves += 1\n        start = start + start%n\n    return moves\ndef minMoves2(n, start, end) :\n    '''\n    Write a python function to calculate the minimum number of moves needed to get from start to end.\n    '''\n    moves = 0\n    while start!= end :\n        moves += 1\n        start = (start + n)%n\n    return moves\ndef minMoves3(n, start, end) :\n    '''\n    Write a python function to calculate the minimum number of moves needed to get from start to end.\n    '''\n    moves = 0\n    while start!= end :\n        moves += 1\n        start = (start + n//math.gcd(n,start))%n\n    return moves\ndef minMoves4(n, start, end) :\n    '''\n    Write a python function to calculate the minimum number of moves needed to get from start to end.\n    '''\n    moves = 0\n    while start!= end :\n        moves += 1\n        start = (start + n//start)%n\n    return moves\ndef minMoves5(n, start, end) :\n    '''\n    Write a python function to calculate the minimum number of moves needed to get from start to end.\n    '''\n    moves = 0\n    while start!= end :\n        moves += 1\n        start = (start * start)%n\n    return moves\ndef minMoves6(n, start, end) :\n    '''"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    print(\"The sum of even factors of \", n, \" is : \", end = \"\") \n    i = 2\n    sum = 0\n    while i <= n : \n        if n % i == 0 : \n            if (i % 2) == 0 : \n                sum += i \n            else : \n                sum += n // i \n        i += 1\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    count = 0\n    for i in range(2,n):\n        if n % i == 0:\n            count = count + 1\n            if (i % 2 == 0):\n                sum = sum + i \n    return sum\ndef max_factor(n):\n    '''\n    Write a Python function to print the maximum of the factors of a number n.\n    '''\n    max = 1\n    count = 0\n    for i in range(2,n):\n        if n % i == 0:\n            count = count + 1\n            if (i > max):\n                max = i\n    return max\ndef sum_of_factors(n):\n    '''\n    Write a Python function to print the sum of the factors of a number n.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if (n % i == 0):\n            sum = sum + i\n    return sum\ndef is_prime(n):\n    '''\n    Write a Python function to check if a number is prime or not.\n    '''\n    for i in range(2,n):\n        if (n % i == 0):\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a Python function to check whether a number is a palindrome or not.\n    '''\n    temp = n\n    sum = 0\n    while(temp > 0):\n        rem = temp % 10\n        sum = sum * 10 + rem\n        temp = temp // 10\n    return sum == n\ndef num_divisors(n):\n    '''\n    Write a Python function to find the number of divisors of a number n.\n    '''\n    count = 0\n    for i in range(1,n):\n        if (n % i == 0):\n            count = count + 1\n    return count\ndef list_of_divisors(n):\n    '''\n    Write a Python function to find the list of divisors of a number n.\n    '''\n    count = 0\n    for i in range(1,n):\n        if (n % i == 0):\n            count = count + 1\n    list = []\n    for i in range(1,count + 1):\n        if (n % i == 0):\n            list.append(i)\n    return list\ndef prime_factors(n):\n    '''\n    Write a Python function to print the prime factors of a number n.\n    '''\n    list = []\n    for i in range(1,n + 1):\n        if (n % i == 0):\n            count = 0\n            for j in range(1,i + 1):\n                if (i % j == 0):\n                    count = count + 1\n            if (count == 2):\n                list.append(i)\n    return list\ndef list_of_primes(n):\n    '''\n    Write a Python function to find the list of primes in a range n.\n    '''\n    list = []\n    for i in range(1,n + 1):\n        count = 0\n        for j in range(1,i + 1):\n            if (i % j == 0):\n                count = count + 1\n        if (count == 2):\n            list.append(i)\n    return list\ndef nth_power(n):\n    '''\n    Write a Python function to find the nth power of a number n.\n    '''\n    return n**n\ndef root_of_a_number(n):\n    '''\n    Write a Python function to find the nth root of a number n.\n    '''\n    return math.sqrt(n)\ndef is_power(n):\n    '''\n    Write a Python function to find whether a number is a power of another number or not.\n    '''\n    if (n == 0):\n        return False\n    power = math.log(n,2)\n    return (power % 1 == 0)\ndef is_power_of_two(n):\n    '''\n    Write a Python function to check whether a number is a power of two or not.\n    '''\n    return (n > 0 and (n & (n - 1)) == 0)\ndef find_largest_power_of_two(n):\n    '''\n    Write a Python function to find the largest power of two which is less than n.\n    '''\n    count = 0\n    for i in range(n - 1,1,-1):\n        if (i & (i - 1) == 0):\n            count = count + 1\n    return count\ndef find_number_of_divisors(n):\n    '''\n    Write a Python function to find the number of divisors of a number n.\n    '''\n    count = 0\n    for i in range(1,n + 1):\n        if (n % i == 0):\n            count = count + 1\n    return count\ndef is_palindrome_of_digits(n):\n    '''\n    Write a Python function to check whether a number is a palindrome of digits or not.\n    '''\n    temp = n\n    sum = 0\n    while(temp > 0):\n        rem = temp % 10\n        sum = sum * 10 + rem\n        temp = temp // 10\n    if (sum == n):\n        return True\n    else:\n        return False\ndef find_largest_palindrome(n):\n    '''\n    Write a Python function to find the largest palindrome less than n.\n    '''\n    rev = 0\n    temp = n\n    while(temp > 0):\n        rem = temp % 10\n        rev = rev * 10 + rem\n        temp = temp // 10\n    return rev\ndef is_prime_number(n):\n    '''\n    Write a Python function to check whether a number is a prime number or not.\n    '''\n    for i in range(2,n):\n        if (n % i == 0):\n            return False\n    return True\ndef find_largest_prime_factor(n):\n    '''\n    Write a Python function to find the largest prime factor of a number n.\n    '''\n    count = 0\n    for i in range(1,n + 1):\n        if (n % i == 0):\n            count = count + 1\n            if (is_prime_number(i)):\n                return i\ndef find_smallest_prime_factor(n):\n    '''\n    Write a Python function to find the smallest prime factor of a number n.\n    '''\n    for i in range(n,1,-1):\n        if (n % i == 0):\n            if (is_prime_number(i)):\n                return i\ndef is_prime_number_of_factors(n):\n    '''\n    Write a Python function to check whether a number has exactly 3 prime factors or not.\n    '''\n    count = 0\n    for i in range(1,n + 1):\n        if (n % i == 0):\n            count = count + 1\n            if (is_prime_number(i)):\n                count = count - 1\n    return (count == 3)\ndef find_number_of_divisors_of_factors(n):\n    '''\n    Write a Python function to find the number of divisors of the factors of a number n.\n    '''\n    count = 0\n    for i in range(1,n + 1):\n        if (n % i == 0):\n            count = count + 1\n            if (is_prime_number(i)):\n                count = count + 1\n    return count\ndef find_smallest_number_having_same_divisors(n):\n    '''\n    Write a Python function to find the smallest number having the same number of divisors as n.\n    '''\n    temp = n\n    while(temp > 0):\n        if (n % temp == 0):\n            return temp\n        temp = temp - 1\ndef find_largest_prime_factor_of_a_number(n):\n    '''\n    Write a Python function to find the largest prime factor of a number n.\n    '''\n    count = 0\n    for i in range(1,n + 1):\n        if (n % i == 0):\n            count = count + 1\n            if (is_prime_number(i)):\n                return i\ndef find_smallest_number_having_same_prime_factors(n):\n    '''\n    Write a Python function to find the smallest number having the same prime factor"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # <YOUR CODE HERE>\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r = re.compile(r'.*[^z]+z')\n    a = r.findall(text)\n    return a\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print(\"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\")\n    try:\n        while True:\n            text = input(\"Enter the text: \")\n            list_text = text.split()\n            for word in list_text:\n                if re.findall('z.*', word):\n                    print(\"There is a word with 'z'\")\n    except ValueError:\n        print(\"Not a string!\")\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matches = re.findall(r'\\w*z\\w*',text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z.*', text)\n    # return re.search(r'\\b[^z]*z[^z]*\\b', text)\n    # return re.search(r'\\b\\w*z\\w*\\b', text)\n    # return re.search(r'[\\w*z]*', text)\n    # return re.search(r'\\bz.*\\b', text)\n    # return re.search(r'\\b\\w+z\\w*\\b', text)\n    # return re.search(r'\\b\\w*z\\w*\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wrd=text.split(\" \")\n    for word in wrd:\n        if 'z' in word:\n            return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('\\w*z\\w*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match_regex = re.compile(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b')\n    mo = match_regex.search(text)\n    if mo == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    return True if re.search(r'z.+', text) else False\n    \n    \n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #your code here\n    return bool(re.search(r'\\b[a-zA-Z]*z\\w*\\b', text))\n    \ndef text_match_dic(text):\n    '''\n    Write a function that matches a dictionary key.\n    '''\n    #your code here\n    return bool(re.search(r'\\b[a-zA-Z]{5}', text))\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    elif monthnum2 == 4 or 6 or 9 or 11:\n        return 30\n    else:\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        return True\n    else:\n        return False\n    \ndef main():\n    monthnumb = int(input(\"Enter the month number: \"))\n    print(check_monthnumb_number(monthnumb))\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        print(monthnum2,'has 31 days')\n    elif monthnum2 in [4,6,9,11]:\n        print(monthnum2,'has 30 days')\n    elif monthnum2 == 2:\n        if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n            print(monthnum2,'has 29 days')\n        else:\n            print(monthnum2,'has 28 days')\n    else:\n        print('Enter the correct month number')\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # if monthnum2 == 2:\n    #     return True\n    # elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum2 in [4,6,9,11]:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = monthnum2\n    if monthnum <= 12:\n        if monthnum == 2:\n            if is_leap_year(year) == True:\n                if day <= 28:\n                    return True\n                else:\n                    return False\n            else:\n                if day <= 29:\n                    return True\n                else:\n                    return False\n        else:\n            if day <= 30:\n                return True\n            else:\n                return False\n    else:\n        return False\n        \ndef check_monthnumb_number_str(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = monthnum\n    if monthnum <= 12:\n        if monthnum == 2:\n            if is_leap_year(year) == True:\n                if day <= 28:\n                    return True\n                else:\n                    return False\n            else:\n                if day <= 29:\n                    return True\n                else:\n                    return False\n        else:\n            if day <= 30:\n                return True\n            else:\n                return False\n    else:\n        return False\n        \ndef valid_date(day_, month_, year_):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if year_ > 0:\n        if month_ <= 12:\n            if day_ <= 31:\n                if month_ > 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n        \ndef valid_date_str(day, month, year):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if year >= 0:\n        if month <= 12:\n            if day <= 31:\n                if month > 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef add_time(start, duration, dayweek):\n    '''\n    Write a function to add a duration to a starting time.\n    '''\n    hour_of_day = 0\n    minute_of_day = 0\n    hour_of_day_str = 0\n    minute_of_day_str = 0\n    dayweek_str = dayweek\n    day_of_week = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday']\n    days_of_the_week = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday']\n    day_of_week_index = 0\n    days_of_the_week_index = 0\n    date_str = \"\"\n    time_str = \"\"\n    \n    # convert time into hour and minute.\n    start_hour, start_minute = start.split(':')\n    start_hour = int(start_hour)\n    start_minute = int(start_minute)\n    duration_hour, duration_minute = duration.split(':')\n    duration_hour = int(duration_hour)\n    duration_minute = int(duration_minute)\n    \n    # get the day of the week the starting time is on.\n    start_day = days_of_the_week[int(dayweek_str[0]) - 1]\n    \n    # get the day of the week the ending time is on.\n    duration_day = days_of_the_week[int(dayweek_str[1]) - 1]\n    \n    # add the starting time and duration time and calculate the resulting time.\n    if (start_minute + duration_minute) > 60:\n        hour_of_day = (start_minute + duration_minute)//60\n        minute_of_day = (start_minute + duration_minute)%60\n    else:\n        hour_of_day = start_hour + duration_hour\n        minute_of_day = start_minute + duration_minute\n    \n    # add the starting date and the ending date.\n    if (start_hour + duration_hour) >= 24:\n        new_hour = start_hour + duration_hour - 24\n        if (start_minute + duration_minute) >= 60:\n            new_minute = start_minute + duration_minute - 60\n            hour_of_day = new_hour + 1\n            minute_of_day = new_minute\n        else:\n            hour_of_day = new_hour + 1\n            minute_of_day = start_minute + duration_minute\n    else:\n        if (start_minute + duration_minute) >= 60:\n            new_minute = start_minute + duration_minute - 60\n            hour_of_day = start_hour + duration_hour + 1\n            minute_of_day = new_minute\n        else:\n            hour_of_day = start_hour + duration_hour + 1\n            minute_of_day = start_minute + duration_minute\n    \n    # convert hour and minute into their respective strings.\n    hour_of_day_str = str(hour_of_day)\n    minute_of_day_str = str(minute_of_day)\n    \n    # check if the hour string has two digits.\n    if len(hour_of_day_str) == 1:\n        hour_of_day_str = '0' + hour_of_day_str\n    \n    # check if the minute string has two digits.\n    if len(minute_of_day_str) == 1:\n        minute_of_day_str = '0' + minute_of_day_str\n        \n    # check if the month is valid.\n    if valid_date_str(hour_of_day_str, '01', year) == False:\n        return \"The date is invalid.\"\n    \n    # check if the hour of day is valid.\n    if valid_date_str(minute_of_day_str, '01', year) == False:\n        return \"The time is invalid.\"\n        \n    # check if the time is 12:00 AM.\n    if hour_of_day_str == '12' and minute_of_day_str == '00':\n        return \"12:\" + minute_of_day_str + \" \" + str(start_day) + \", \" + str(year)\n    \n    # check if the time is 12:00 PM.\n    if hour_of_day_str == '12' and minute_of_day_str!= '00':\n        return str(hour_of_day_str) + \":\" + minute_of_day_str + \" \" + str(start_day) + \", \" + str(year)\n    \n    # check if the time is 23:59 PM.\n    if hour_of_day_str == '23' and minute_of_day_str == '59':\n        return str(hour_of_day_str) + \":\" + minute_of_day_str + \" \" + str(start_day) + \", \" + str(year)\n    \n    # check if the time is >= 24.\n    if hour_of_day_str >= 24:\n        return str(hour_of_day_str) + \":\" + minute_of_day_str + \" \" + str(start_day) + \", \" + str(year)\n    \n    # check if the time is <= 0.\n    if hour_of_day_str <= 0:\n        return \"The time is invalid.\"\n    \n    # calculate the day of the week for the ending date.\n    if dayweek_str[1] == '0':\n        days_of_the_week_index = (int(dayweek_str[0]) - 1)\n    else:\n        days_of_the_week_index = (int(dayweek_str[0]) - 1) + 7\n        \n    # calculate the day of the week for the starting date.\n    days_of_the_week_index += int(dayweek_str[1]) - 1\n    \n    # check if the day of the week is valid.\n    if days_of_the_week_index > 6:\n        return \"The date is invalid.\"\n    \n    # get the day of the week for the ending date.\n    if days_of_the_week_index == 0:\n        day_of_week_str ='monday'\n    elif days_of_the_week_index == 1:\n        day_of_week_str = 'tuesday'\n    eli"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == \"01\":\n        print(\"January has 31 days\")\n    elif monthnum2 == \"02\":\n        print(\"February has 29 days\")\n    elif monthnum2 == \"03\":\n        print(\"March has 31 days\")\n    elif monthnum2 == \"04\":\n        print(\"April has 30 days\")\n    elif monthnum2 == \"05\":\n        print(\"May has 31 days\")\n    elif monthnum2 == \"06\":\n        print(\"June has 30 days\")\n    elif monthnum2 == \"07\":\n        print(\"July has 31 days\")\n    elif monthnum2 == \"08\":\n        print(\"August has 31 days\")\n    elif monthnum2 == \"09\":\n        print(\"September has 30 days\")\n    elif monthnum2 == \"10\":\n        print(\"October has 31 days\")\n    elif monthnum2 == \"11\":\n        print(\"November has 30 days\")\n    elif monthnum2 == \"12\":\n        print(\"December has 31 days\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum=monthnum2\n    if monthnum==1 or monthnum==3 or monthnum==5 or monthnum==7 or monthnum==8 or monthnum==10 or monthnum==12:\n        print(monthnum,\"has 31 days\")\n    elif monthnum==4 or monthnum==6 or monthnum==9 or monthnum==11:\n        print(monthnum,\"has 30 days\")\n    else:\n        print(\"Month Number is not correct\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(\"January has 31 days\")\n    elif monthnum2 == 2:\n        print(\"February has 28 days or 29 days if leap year\")\n    elif monthnum2 == 3:\n        print(\"March has 31 days\")\n    elif monthnum2 == 4:\n        print(\"April has 30 days\")\n    elif monthnum2 == 5:\n        print(\"May has 31 days\")\n    elif monthnum2 == 6:\n        print(\"June has 30 days\")\n    elif monthnum2 == 7:\n        print(\"July has 31 days\")\n    elif monthnum2 == 8:\n        print(\"August has 31 days\")\n    elif monthnum2 == 9:\n        print(\"September has 30 days\")\n    elif monthnum2 == 10:\n        print(\"October has 31 days\")\n    elif monthnum2 == 11:\n        print(\"November has 30 days\")\n    elif monthnum2 == 12:\n        print(\"December has 31 days\")\n    else:\n        print(\"Enter a month number\")\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [reverse_string(s) for s in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for word in stringlist:\n        word=word[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for x in stringlist:\n        result.append(x[::-1])\n    return result\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # initialize list to be returned\n    reversed_list = []\n    # loop through the list to reverse each string\n    for item in stringlist:\n        # add the reversed string to the list\n        reversed_list.append(reverse_string(item))\n    # return the list\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    returnlist = []\n    for string in stringlist:\n        returnlist.append(string[::-1])\n    return returnlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [i[::-1] for i in stringlist]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            sub = lst[i:j]\n            if len(sub) < len(sublist):\n                sublist = sub\n    return sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if min_len > len(sublist):\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    x = len(lst) \n    sub = [1]*x \n    for i in range(1, x): \n        for j in range(0, i): \n            if lst[i] > lst[j] and sub[i] < sub[j] + 1: \n                sub[i] = sub[j]+1\n    maximum = 0\n    for i in range(x): \n        maximum = max(maximum, sub[i]) \n    return maximum\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    for i in lst[1:]:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst) \n    minimum = lst[0]\n    for i in range(n): \n        for j in range(i, n): \n            if len(lst[i:j+1])<len(minimum): \n                minimum = lst[i:j+1] \n                \n    return minimum\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublst = []\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            sublst.append(lst[i:j+1])\n    sublst.sort(key = len)\n    return sublst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    for l in lst:\n        if(len(l)<min):\n            min = len(l)\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = min(len(sublst) for sublst in lst)\n    return [sublst for sublst in lst if len(sublst) == min_len]\n    \ndef Nth_Occurance(lst,item):\n    '''\n    Write a python function to find the nth occurance of an element in a list.\n    '''\n    return lst.index(item,lst.index(item)+1)\n    \ndef Find_Max(lst): \n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    max_len = max(len(sublst) for sublst in lst)\n    return [sublst for sublst in lst if len(sublst) == max_len]\n    \ndef remove_rep(lst):\n    '''\n    Write a python function to remove the duplicate values from a list.\n    '''\n    return list(set(lst))\n    \ndef Merge_Lists(lst1,lst2):\n    '''\n    Write a python function to merge two lists by appending the values of list2\n    in the list1.\n    '''\n    return lst1 + lst2\n    \ndef Sort_List_Length(lst):\n    '''\n    Write a python function to sort the list based on the length of the sublists\n    in the list.\n    '''\n    return sorted(lst,key=len)\n    \ndef List_To_Str(lst):\n    '''\n    Write a python function to convert list to string\n    '''\n    return ''.join(lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = len(lst)\n    min_len = len(lst[0])\n    for i in range(m): \n        if len(lst[i]) < min_len: \n            min_len = len(lst[i]) \n            res = i \n    return res \n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sub = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sub = sublist\n    return min_sub\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return l*b/2\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*r**2\ndef trapezium_area(l1,l2,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return (l1+l2)*h/2\ndef parallelogram_area(l1,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return l1*b\ndef main():\n    length = float(input(\"Enter length: \"))\n    breadth = float(input(\"Enter breadth: \"))\n    print(\"Area of rectangle:\",rectangle_area(length,breadth))\n    print(\"Area of triangle:\",triangle_area(length,breadth))\n    print(\"Area of circle:\",circle_area(length))\n    print(\"Area of trapezium:\",trapezium_area(length,breadth,2))\n    print(\"Area of parallelogram:\",parallelogram_area(length,breadth))\nmain()"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # First, define the function.\n    # Then, use the return keyword to return the result of the function.\n    def rectangle_area(l,b):\n        area = l * b\n        return area\n    # Now, call the function and print the return value\n    result = rectangle_area(10,15)\n    print(\"The area of a rectangle with length\",l,\"and width\",b,\"is\",result)\n    # You can check that the result is correct by entering the appropriate inputs\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(\"The area of your rectangle is \", area)\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    print(\"The area of the rectangle is %d\"%area)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    print(str2)\n    for i in str2:\n        if i in str1:\n            str1 = str1.replace(i,'')\n    print(str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.sub('[A-Z]+', '', str1)\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join([i for i in str1 if not i.isupper()])\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]','',str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.upper()\n    return re.sub(\"[A-Z]\", '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = []\n    for word in str1.split():\n        if word.islower():\n            new_str.append(word)\n    return''.join(new_str)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = \"FSHJDFHJSDJHFDJHFJJFDJFJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJSDJHFDJHFJS"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = []\n    for i in range(len(str1)):\n        if i == 0:\n            if str1[i]!= str1[i].upper():\n                new_str.append(str1[i])\n        else:\n            if str1[i]!= str1[i].upper():\n                new_str.append(str1[i])\n    return ''.join(new_str)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\nprint(remove_uppercase(\"ABCDE\"))\nprint(remove_uppercase(\"ABCDEGHIJK\"))\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [[el[0] for el in lst[i] if lst[i].index(el) == 0] for i in range(len(lst))]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n    \ndef main():\n    '''\n    Main function to run the program\n    '''\n    in_file = \"input.txt\"\n    output = \"output.txt\"\n    \n    with open(in_file, 'r') as f:\n        input_data = f.read().splitlines()\n        \n    with open(output, 'w') as f:\n        for line in input_data:\n            f.write(Extract(line.split()) + '\\n')\n        \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if ord(i)>=65 and ord(i)<=90:\n            count=count+1\n    print('count of upper case characters in a given string is',count)\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    uppercase=0\n    for x in str:\n        if x.isupper():\n            uppercase += 1\n    return uppercase\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    uppercount=0\n    for char in str:\n        if char.isupper():\n            uppercount+=1\n    return uppercount\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([c for c in str if c.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for char in str:\n        if char.isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    uppercase = 0\n    for char in str:\n        if char.isupper():\n            uppercase += 1\n    return uppercase\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in str:\n        if i.isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)<=1:\n        return [list1]\n    else:\n        comb =[]\n        for i in range(len(list1)):\n            for j in combinations_list(list1[:i]+list1[i+1:]):\n                comb.append([list1[i]]+j)\n        return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    lists=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)-i):\n            lists.append(list1[i:j+i+1])\n    return lists\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return [list(map(''.join,x)) for x in itertools.product(*map(sorted, [iter(list1)]*2))]\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for index in range(len(list1)):\n        if index == 0:\n            combination = [[list1[index]]]\n        else:\n            combination = [[list1[index]]]\n            for j in range(index):\n                combination = [list(i) for i in set(tuple(i) for i in combination)]\n                combination += [i + [list1[index]] for i in combination]\n    return combination\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    for i in range(len(list1) + 1):\n        for j in itertools.combinations(list1,i):\n            comb.append(j)\n    return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    for i in list(combinations(list1, 2)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 3)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 4)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 5)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 6)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 7)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 8)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 9)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 10)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 11)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 12)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 13)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 14)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 15)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 16)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 17)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 18)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 19)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 20)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 21)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 22)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 23)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 24)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 25)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 26)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 27)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 28)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 29)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 30)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 31)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 32)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 33)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 34)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 35)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 36)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 37)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 38)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 39)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 40)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 41)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 42)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 43)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 44)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 45)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 46)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 47)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 48)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 49)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 50)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 51)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 52)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 53)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 54)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 55)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 56)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 57)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 58)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 59)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 60)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 61)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 62)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 63)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 64)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 65)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 66)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 67)):\n        print(i, end=\" \")\n    print()\n    for i in list(combinations(list1, 68)):\n        print(i, end=\" \""
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create empty dictionary\n    d = {}\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # your code here\n    # for i in list1:\n    #     for j in list1:\n    #         print([i,j])\n    if len(list1)>=1:\n        list1.remove(list1[0])\n        list1.append(list1[0])\n        combinations_list(list1)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = list(itertools.combinations(list1, 3))\n    return comb_list\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for c in combinations_list(list1,i):\n            combinations.append(c)\n    return combinations\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Approach 1: O(n^2) space\n    # max_prod_array = []\n    # for i in range(len(arr)):\n    #     max_prod_array.append(max_subarray_product_helper(arr, i))\n    # return max(max_prod_array)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = 0\n    max_product = 0\n    # go through every element in the array\n    for i in range(len(arr)):\n        # keep track of the biggest product and the index of the biggest product\n        biggest_product = 0\n        biggest_product_index = 0\n        # go through every element in the array again\n        for j in range(i, len(arr)):\n            product = arr[j]\n            # check if the product is the biggest product in the array\n            if product > biggest_product:\n                biggest_product = product\n                biggest_product_index = j\n        # check if the biggest product is bigger than the current max\n        if biggest_product > max_product:\n            max_product = biggest_product\n            # set the new index for the biggest product\n            biggest_product_index = biggest_product_index\n    # return the biggest product and the index of the biggest product\n    return max_product, biggest_product_index\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    p = []\n    m = [None]*(len(arr)+1)\n    \n    for i in range(len(arr)):\n        if i == 0:\n            m[i] = arr[i]\n        else:\n            m[i] = max(arr[i], arr[i]*m[i-1])\n        \n    s = 1\n    for i in range(len(arr)-1, -1, -1):\n        if i == len(arr)-1:\n            s = arr[i]\n        else:\n            s = min(arr[i], s*arr[i])\n        p.insert(0, s)\n    \n    p = p[1:]\n    print(\"Max product subarray:\", m, \"sum:\", sum(m))\n    print(\"Product array:\", p, \"sum:\", sum(p))\n    return max(m)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 1\n    current_max = 1\n    current_min = 1\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        current_max = max(arr[i], current_max * arr[i])\n        current_min = min(arr[i], current_min * arr[i])\n        if current_max > max_prod:\n            max_prod = current_max\n            start = i - 1\n            end = i\n        elif current_max == max_prod and current_max > current_min:\n            start = i - 1\n            end = i\n    return (start, end)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Time O(n), space O(1)\n    max_prod = -float('inf')\n    curr_prod = 1\n    curr_min = 1\n    curr_max = 1\n    for elem in arr:\n        curr_prod *= elem\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n            curr_min = 1\n            curr_max = 1\n        if curr_prod < 0:\n            curr_min *= elem\n            curr_max *= elem\n    return [max_prod, curr_min, curr_max]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    local_max, global_max = 1, 1\n    start = 0\n    for i,v in enumerate(arr):\n        if v > 0:\n            local_max *= v\n        elif v < 0:\n            local_max = 1\n        if local_max > global_max:\n            global_max = local_max\n            start = i - arr[:i+1].index(v)\n    return global_max, arr[start:start+global_max]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # To store the maximum product and the product at each index\n    max_product = arr[0]\n    product = arr[0]\n    for index in range(1, len(arr)):\n        # If the new product is negative, then we want to set it to zero\n        if (product * arr[index]) < 0:\n            product = 0\n        else:\n            product = product * arr[index]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_prod = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        raise Exception('The array is empty.')\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0]*arr[1],arr[0])\n    if len(arr) == 3:\n        return max(arr[0]*arr[1],arr[1]*arr[2],arr[0]*arr[2],arr[0]+arr[1]+arr[2])\n    if len(arr) > 3:\n        start, end = 0, len(arr)-1\n        curr_max = float('-inf')\n        curr_min = float('inf')\n        max_so_far = float('-inf')\n        min_so_far = float('inf')\n        while start < end:\n            curr_max = max(arr[start]*arr[end],arr[start]*arr[start],arr[end]*arr[end])\n            max_so_far = max(max_so_far,curr_max)\n            if curr_max < 0:\n                curr_min = min(arr[start],arr[start]+arr[start+1],arr[end]+arr[end-1])\n                min_so_far = min(min_so_far,curr_min)\n                if min_so_far < 0:\n                    start += 1\n                elif curr_min == arr[start]:\n                    start += 1\n                else:\n                    end -= 1\n            else:\n                start += 1\n                end -= 1\n        return max_so_far\nif __name__ == '__main__':\n    arr = [-1,-2,5,-3,-4,1,2,3]\n    print(max_subarray_product(arr))\n    arr = [-2,1,-3,4,1,2]\n    print(max_subarray_product(arr))\n    arr = [-2,1,-3,4]\n    print(max_subarray_product(arr))\n    arr = [-2,-1,1,2]\n    print(max_subarray_product(arr))\n    arr = [-1,-2,1,2]\n    print(max_subarray_product(arr))\n    arr = [-2,-1,-3,4]\n    print(max_subarray_product(arr))\n    arr = [-1,-1,1,1]\n    print(max_subarray_product(arr))\n    arr = [-2,-1,1,2]\n    print(max_subarray_product(arr))\n    arr = [1,2,3]\n    print(max_subarray_product(arr))\n    arr = [-1,1,2,3,4]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,0]\n    print(max_subarray_product(arr))\n    arr = [-2,3,4,-1,2,1,5,"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 1:\n        return None\n    if len(arr) < 2:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0]*arr[1]\n    local_max_product = max_subarray_product(arr[1:])\n    global_max_product = max(local_max_product,arr[0]*local_max_product)\n    if len(arr) == 3:\n        return global_max_product\n    local_max_product = max_subarray_product(arr[1:])\n    global_max_product = max(global_max_product,arr[0]*local_max_product,arr[0]*arr[1],arr[1]*local_max_product)\n    return global_max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict:\n        if dict[n] == dict[max(dict, key=dict.get)]:\n            return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    temp = dict.values()\n    if len(set(temp)) == 1:\n        print(\"All Values are the same.\")\n    else:\n        print(\"All values are not the same.\")\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key] == n:\n            return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < n:\n        return False\n    else:\n        for key in dict:\n            if dict[key] == dict[0]:\n                continue\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    #return all(val == dict[0] for val in dict)\n    if all(dict.values()) == dict[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = dict.values()\n    if check.count(check[0]) == len(check):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set()\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Using for loop\n    # key_set = set()\n    # for key, value in dict.items():\n    #     if value not in key_set:\n    #         key_set.add(value)\n    #     else:\n    #         return False\n    # return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    result = False\n    if dict.values().count(dict.values()[0]) == len(dict.values()):\n        result = True\n    return result\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # using the.values() method\n    # In Python, keys() returns a view object.\n    # The view object contains the keys of the dictionary, as a list.\n    # So we can iterate over it to get the key one by one.\n    # The problem with this is that if the dictionary is modified,\n    # the view object also gets modified.\n    # And if the value of any key is changed, all the values of that\n    # key gets changed.\n    # If there is a need to use the values in some other way,\n    # then we should use the list() function.\n    values = dict.values()\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == []:\n            del dict1[key]\n            drop_empty(dict1)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if type(v)==dict:\n            dict1[k]=drop_empty(v)\n        elif v=='':\n            dict1.pop(k)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key,value in dict1.items():\n        if value is not None:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= None}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2.update({key:value})\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = dict(filter(lambda item:item[1]!='', dict1.items()))\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = dict((k,v) for k,v in dict1.items() if v)\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: val for key, val in dict1.items() if val}\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # iterate over the array.\n    # take 2 variables, max_product, and current_max.\n    # max_product is the max product formed by multiplying numbers of an increasing subsequence.\n    # current_max is the max product formed by multiplying current array element.\n    # check if arr[i] < arr[i+1]\n    # if so, update current_max\n    # if not, update max_product\n    # return max_product\n    \n    max_product = 1\n    current_max = 1\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            current_max = current_max*arr[i]\n        else:\n            current_max = current_max*arr[i+1]\n        max_product = max(max_product, current_max)\n    return max_product\n    \n    \narr = [10, 3, 5, 6, 20]\nprint(max_product(arr))\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n    l = len(arr)\n    prod = 1\n    i = 0\n    max_prod = 1\n    while i < l:\n        j = i + 1\n        while j < l:\n            if arr[i] * arr[j] > prod:\n                prod = arr[i] * arr[j]\n            j += 1\n        i += 1\n        if prod > max_prod:\n            max_prod = prod\n        prod = 1\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 1\n    max_prod_arr = []\n    arr.sort()\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i,len(arr)):\n            prod *= arr[j]\n            if prod>max_prod:\n                max_prod = prod\n                max_prod_arr = arr[i:j+1]\n    return max_prod,max_prod_arr\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    len_arr = len(arr)\n    if len_arr < 2:\n        return -1\n    max_so_far = 1\n    max_ending_here = 1\n    for i in range(len_arr):\n        max_ending_here = max_ending_here*arr[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 1\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res=1\n    for i in range(0,len(arr)-1):\n        if arr[i+1]>arr[i]:\n            res*=arr[i]\n        else:\n            res*=arr[i+1]\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    length = len(arr)\n    if length == 0:\n        return 0\n    max_product = 1\n    for i in range(0, length):\n        max_product = max(max_product, arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    # setting initial values for each element\n    max_possible = 1\n    running_prod = 1\n    max_prod = 1\n    for i in range(len(arr)):\n        running_prod *= arr[i]\n        if running_prod < 0:\n            running_prod = 1\n        if running_prod > max_possible:\n            max_possible = running_prod\n        if running_prod > max_prod:\n            max_prod = running_prod\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_prod = 0\n    max_arr = []\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    subsequence = []\n    for num in arr:\n        for i in range(len(subsequence)):\n            if num >= subsequence[i]:\n                subsequence[i] = num\n                break\n        else:\n            subsequence.append(num)\n    return max((subsequence[i]*subsequence[i+1]) for i in range(len(subsequence)-1))\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)<3:\n        return -1\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Approach:  List comprehension\n    # Addition of neighbors is 0+1, 0+2, 1+2 and so on\n    # Return the pairwise addition\n    return [0+n, 1+n, 2+n] + [0+n, 1+n, 2+n]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup = (1, 2, 3, 4, 5, 6)\n    list_1 = list(test_tup)\n    list_2 = []\n    for i in range(len(list_1)-1):\n        a = list_1[i] + list_1[i+1]\n        list_2.append(a)\n    return tuple(list_2)\nprint(add_pairwise((1, 2, 3, 4, 5, 6)))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return [test_tup[i]+test_tup[i+1] for i in range(len(test_tup)-1)]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = []\n    for index, item in enumerate(test_tup):\n        if index == len(test_tup)-1:\n            break\n        else:\n            sum.append(test_tup[index]+test_tup[index+1])\n    return tuple(sum)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(sum((test_tup[x] + test_tup[x+1]) for x in range(0, len(test_tup) - 1)))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[0:len(test_tup)-1]) + test_tup[0] + test_tup[-1]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup\n    add = 0\n    if (len(a) >= 1):\n        add = a[0] + a[1]\n    if (len(a) >= 2):\n        add = add + a[1] + a[2]\n    if (len(a) >= 3):\n        add = add + a[2] + a[3]\n    if (len(a) >= 4):\n        add = add + a[3] + a[4]\n    if (len(a) >= 5):\n        add = add + a[4] + a[5]\n    if (len(a) >= 6):\n        add = add + a[5] + a[6]\n    if (len(a) >= 7):\n        add = add + a[6] + a[7]\n    if (len(a) >= 8):\n        add = add + a[7] + a[8]\n    if (len(a) >= 9):\n        add = add + a[8] + a[9]\n    if (len(a) >= 10):\n        add = add + a[9] + a[10]\n    return add\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = [test_tup[i] + test_tup[i+1] for i in range(0, len(test_tup), 2)]\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # pass\n    # example: add_pairwise((1, 3, 5, 7)) --> (1, 3, 6, 8)\n    # explanation: 3 + 5, 1 + 7\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #Initialize result \n    result = 1\n    # Traverse all array elements \n    for x in arr: \n        result = result * x \n    return result % n \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    print(\"The product of the array elements is: \" + str(arr[0]*arr[1]*arr[2]*arr[3]))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your code goes here\n    product = 1\n    for num in arr:\n        product = (product * num) % n \n    return product \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product = product*arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Get the product of all the elements in the array\n    prod = 1\n    for i in range(0, len(arr)):\n        prod = (prod * arr[i]) % n\n    \n    # To get the product of all the array elements \n    # modulo n, we need to find the product of all \n    # the elements in the product array.\n    # We can get the product of all the elements in \n    # the product array by taking product of all the \n    # elements of the original array and multiplying it \n    # with product of all the elements of the product array.\n    # As the product array will have positive elements \n    # and product of all the elements of the product array \n    # will also be positive.\n    remainder = prod % n\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for ele in arr:\n        prod *= ele % n\n        \n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr: \n        prod = (prod * num) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product*i)%n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)): \n        prod = prod * arr[i]\n    return prod % n\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    diff = [l[i] - l[i-1] for i in range(1, len(l))]\n    if diff.count(diff[0]) == len(diff):\n        print(\"The given list contains consecutive numbers\")\n    else:\n        print(\"The given list doesn't contain consecutive numbers\")\n        \nl = [2, 4, 6, 8, 10, 11]\ncheck_Consecutive(l)\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (all(l[i]==l[i+1]+1 for i in range(len(l)-1)))\n    \nl = [1,2,3,4,5,6]\nprint(check_Consecutive(l))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return True\n    prev = l[0]\n    for i in l[1:]:\n        if i == prev+1:\n            prev = i\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    # remove 0 from the list to avoid negative numbers\n    if 0 in l:\n        l.remove(0)\n    \n    # sort the list\n    l.sort()\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1 = sorted(l)\n    if (l1[0] + 1 == l1[1]) and (l1[1] + 1 == l1[2]):\n        return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return True\n    else:\n        for i in range(len(l)-1):\n            if l[i+1]-l[i]!= 1:\n                return False\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    #storing the value of prev item\n    prev = l[0]\n    #initializing the count variable to 1\n    count = 1\n    #storing the max value of consecutive numbers\n    max_count = 1\n    #checking the items of list if consecutive or not\n    for item in l:\n    #condition if consecutive \n        if(item == prev + 1):\n            count = count + 1\n            if(count> max_count):\n                max_count = count\n        #if not consecutive reset the count variable\n        else:\n            count = 1\n        prev = item\n    #if the list contains consecutive numbers then print \"True\"\n    if(count == max_count):\n        print(True)\n    #if not print \"False\"\n    else:\n        print(False)\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive_list = []\n    for i in range(len(l)-1):\n        if l[i+1] == l[i] + 1:\n            consecutive_list.append(l[i])\n            consecutive_list.append(l[i+1])\n        elif l[i+1] == l[i]:\n            consecutive_list.append(l[i])\n    if consecutive_list == l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    l1 = []\n    l2 = []\n    for t in test_list1:\n        if type(t) == tuple:\n            l1.append(t)\n    for t in test_list2:\n        if type(t) == tuple:\n            l2.append(t)\n    l1 = set(l1)\n    l2 = set(l2)\n    result = tuple(l1.intersection(l2))\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # test_list1 = [('a', 'e', 'i'), ('a', 'b', 'x'), ('a', 'b', 'c'), ('a', 'e', 'r'), ('a', 'd', 'f')]\n    # test_list2 = [('e', 'a', 'i'), ('e', 'a', 'b'), ('e', 'b', 'c'), ('e', 'a', 'r'), ('e', 'd', 'f')]\n    # test_list1 = [('a', 'e', 'i'), ('a', 'b', 'x'), ('a', 'b', 'c')]\n    # test_list2 = [('e', 'a', 'i'), ('e', 'a', 'b'), ('e', 'b', 'c')]\n    # test_list1 = [('a', 'b', 'c'), ('a', 'e', 'i'), ('a', 'b', 'x')]\n    # test_list2 = [('e', 'a', 'i'), ('e', 'a', 'b'), ('e', 'b', 'c')]\n    result = []\n    for item in test_list1:\n        if item in test_list2:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = list(test_list1)\n    list2 = list(test_list2)\n    new_list = [x for x in list1 if x in list2]\n    return tuple(new_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    #This part of the code has been written before.\n    common_list = []\n    for item in test_list1:\n        if item in test_list2:\n            if item not in common_list:\n                common_list.append(item)\n    print(\"The list of tuples of intersection is: {}\".format(common_list))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #def intersection(lst1, lst2): \n       # return [item for item in lst1 if item in lst2] \n    #return intersection(lst1, lst2)\n    return set(test_list1).intersection(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list3 = []\n    for i in test_list1:\n        for j in test_list2:\n            if j in i:\n                test_list3.append(j)\n    return test_list3\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item1 in test_list1:\n        if item1 in test_list2:\n            intersection.append(item1)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #print('Input: {}'.format(test_list1))\n    #print('Input: {}'.format(test_list2))\n    if test_list1 and test_list2:\n        sorted_list1 = sorted(test_list1)\n        sorted_list2 = sorted(test_list2)\n        intersection_list = [x for x in sorted_list1 if x in sorted_list2]\n        #print(intersection_list)\n        return intersection_list\n    else:\n        return []\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if isinstance(test_list1, list) and isinstance(test_list2, list):\n        if len(test_list1) == 0 or len(test_list2) == 0:\n            return []\n        result = []\n        if len(test_list1) < len(test_list2):\n            for num in test_list1:\n                if num in test_list2:\n                    result.append(num)\n        else:\n            for num in test_list2:\n                if num in test_list1:\n                    result.append(num)\n        return result\n    else:\n        return []\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    string = str1\n    string = string.replace(ch,newch)\n    return string\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            newstr+=(newch)\n        else:\n            newstr+=(str1[i])\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for chr in str1:\n        if chr == ch:\n            str2 += newch\n        else:\n            str2 += chr\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in str1:\n        if i==ch:\n            str1=str1.replace(ch,newch)\n    print(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str(str1)\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1)==0 or len(newch)==0 or len(ch)==0:\n        return ''\n    else:\n        str1=str1.replace(ch,newch)\n        return str1\nprint(replace_char('hello','h','H'))\nprint(replace_char('hello','l','L'))\nprint(replace_char('','l','L'))\nprint(replace_char('','','L'))\nprint(replace_char('','l','L'))\nprint(replace_char('helo','','X'))\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new = []\n    for i in range(0,len(str1)):\n        if str1[i] == ch:\n            new.append(newch)\n        else:\n            new.append(str1[i])\n    return ''.join(new)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2=sorted(dict1.items(),key=lambda x:x[1])\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key = dict1.get, reverse = True)\n    \n    # dict1 = {'a': 3, 'c': 1, 'b': 2}\n    # dict1 = {'a': 3, 'c': 1, 'b': 2, 'd': 1}\n    # print(sort_counter(dict1))\n    \ndef sort_counter_1(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key = dict1.get, reverse = True)\n    \n    # dict1 = {'a': 3, 'c': 1, 'b': 2}\n    # dict1 = {'a': 3, 'c': 1, 'b': 2, 'd': 1}\n    # print(sort_counter_1(dict1))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #return sorted(dict1, key=lambda k: dict1[k], reverse=True)\n    return [i for i, j in sorted(dict1.items(), key=lambda x: x[1], reverse=True)]\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key = lambda i: dict1[i], reverse = True)\ndef get_dict_items(dict1):\n    '''\n    Write a function to get the items of a dictionary.\n    '''\n    return dict1.items()\ndef get_dict_keys(dict1):\n    '''\n    Write a function to get the keys of a dictionary.\n    '''\n    return dict1.keys()\ndef get_dict_values(dict1):\n    '''\n    Write a function to get the values of a dictionary.\n    '''\n    return dict1.values()\ndef count_occurences(string):\n    '''\n    Write a function to count the occurences of a character in a string.\n    '''\n    return Counter(string)\ndef count_occurences_dict(string):\n    '''\n    Write a function to count the occurences of a character in a string as a dictionary.\n    '''\n    return dict(Counter(string))\ndef get_keys_with_matching_values(dict1,value1):\n    '''\n    Write a function to get the keys of a dictionary that match a value.\n    '''\n    return [key for key in dict1 if dict1[key] == value1]\ndef get_values_with_matching_keys(dict1,value1):\n    '''\n    Write a function to get the values of a dictionary that match a key.\n    '''\n    return [dict1[key] for key in dict1 if dict1[key] == value1]\ndef print_dict(dict1):\n    '''\n    Write a function to print a dictionary.\n    '''\n    print(dict1)\ndef get_unique_values(dict1):\n    '''\n    Write a function to get the unique values of a dictionary.\n    '''\n    return set(dict1.values())\ndef get_unique_keys(dict1):\n    '''\n    Write a function to get the unique keys of a dictionary.\n    '''\n    return set(dict1.keys())\ndef get_max_key(dict1):\n    '''\n    Write a function to get the maximum key of a dictionary.\n    '''\n    return max(dict1, key=dict1.get)\ndef get_max_value(dict1):\n    '''\n    Write a function to get the maximum value of a dictionary.\n    '''\n    return max(dict1.values())\ndef get_min_key(dict1):\n    '''\n    Write a function to get the minimum key of a dictionary.\n    '''\n    return min(dict1, key=dict1.get)\ndef get_min_value(dict1):\n    '''\n    Write a function to get the minimum value of a dictionary.\n    '''\n    return min(dict1.values())\ndef get_min_value_from_list(l1):\n    '''\n    Write a function to get the minimum value of a list.\n    '''\n    return min(l1)\ndef get_min_value_from_list_of_tuples(l1):\n    '''\n    Write a function to get the minimum value of a list of tuples.\n    '''\n    return min(l1, key=lambda tup: tup[1])\ndef get_min_value_from_list_of_lists(l1):\n    '''\n    Write a function to get the minimum value of a list of lists.\n    '''\n    return min(l1, key=lambda l2: l2[1])\ndef get_max_value_from_list_of_tuples(l1):\n    '''\n    Write a function to get the maximum value of a list of tuples.\n    '''\n    return max(l1, key=lambda tup: tup[1])\ndef get_max_value_from_list_of_lists(l1):\n    '''\n    Write a function to get the maximum value of a list of lists.\n    '''\n    return max(l1, key=lambda l2: l2[1])\ndef remove_keys_from_dict(dict1,keys):\n    '''\n    Write a function to remove the keys from a dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if key not in keys}\ndef count_dict_items(dict1):\n    '''\n    Write a function to count the items in a dictionary.\n    '''\n    return len(dict1)\ndef count_unique_items(dict1):\n    '''\n    Write a function to count the unique items in a dictionary.\n    '''\n    return len(set(dict1.values()))\ndef add_key_to_dict(dict1,key1,value1):\n    '''\n    Write a function to add a key to a dictionary.\n    '''\n    dict1[key1] = value1\ndef remove_key_from_dict(dict1,key1):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if key!= key1}\ndef reverse_dict(dict1):\n    '''\n    Write a function to reverse the values of a dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}\ndef remove_key_from_dict_of_lists(dict1,key1):\n    '''\n    Write a function to remove a key from a dictionary of lists.\n    '''\n    dict1[key1] = []\ndef remove_values_from_dict(dict1,values):\n    '''\n    Write a function to remove the values from a dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value not in values}\ndef remove_values_from_list(l1,values):\n    '''\n    Write a function to remove the values from a list.\n    '''\n    return [value for value in l1 if value not in values]\ndef merge_two_dicts(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    return {**dict1,**dict2}\ndef merge_dicts_from_list(l1):\n    '''\n    Write a function to merge dictionaries from a list of dictionaries.\n    '''\n    dict1 = {}\n    for d in l1:\n        dict1.update(d)\n    return dict1\ndef replace_values_in_dict(dict1,value1,value2):\n    '''\n    Write a function to replace the values in a dictionary.\n    '''\n    return {key:value2 if value == value1 else value for key,value in dict1.items()}\ndef copy_dict(dict1):\n    '''\n    Write a function to copy a dictionary.\n    '''\n    return dict1.copy()\ndef get_all_items_of_dict(dict1):\n    '''\n    Write a function to get all items of a dictionary.\n    '''\n    return dict1.items()\ndef get_all_keys_of_dict(dict1):\n    '''\n    Write a function to get all keys of a dictionary.\n    '''\n    return dict1.keys()\ndef get_all_values_of_dict(dict1):\n    '''\n    Write a function to get all values of a dictionary.\n    '''\n    return dict1.values()\ndef get_key_with_max_value(dict1):\n    '''\n    Write a function to get the key with the maximum value in a dictionary.\n    '''\n    return max(dict1,key=lambda x: dict1[x])\ndef get_key_with_max_value_in_dict_of_lists(dict1):\n    '''\n    Write a function to get the key with the maximum value in a dictionary of lists.\n    '''\n    return max([(key,value) for key,value in dict1.items()], key=lambda tup: tup[1])[0]\ndef get_key_with_max_value_in_dict_of_lists_tuple(dict1):\n    '''\n    Write a function to get the key with the maximum value in a dictionary of lists.\n    '''\n    return max(dict1.items(), key=lambda tup: tup[1])\ndef get_key_with_max_value_in_dict_o"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k:v for k,v in sorted(dict1.items(), key = lambda x:x[1])}\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(sorted(dict1.items(),key=lambda x:x[1],reverse=True))\ndef sort_counter_2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1],reverse=True)}\ndef sort_counter_3(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(sorted(dict1.items(), key=lambda x: x[1]))\ndef sort_counter_4(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(sorted(dict1.items(), key=lambda x: x[1],reverse=False))\ndef dict_invert_1(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return {v: k for k, v in dict1.items()}\ndef dict_invert_2(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(map(reversed, dict1.items()))\ndef dict_invert_3(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return {k: v for k, v in reversed(list(dict1.items()))}\ndef dict_invert_4(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return {v: k for k, v in dict1.items()}\ndef dict_invert_5(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_6(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return {v: k for k, v in dict1.items()}\ndef dict_invert_7(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_8(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict([(v, k) for k, v in dict1.items()])\ndef dict_invert_9(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return {k: v for k, v in dict1.items()}\ndef dict_invert_10(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return {k: v for k, v in dict1.items()}\ndef dict_invert_11(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(map(reversed, dict1.items()))\ndef dict_invert_12(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(map(reversed, dict1.items()))\ndef dict_invert_13(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_14(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_15(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_16(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_17(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_18(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_19(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_20(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_21(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_22(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_23(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_24(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_25(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_26(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_27(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_28(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    if dict1=={}:\n        return {}\n    else:\n        return dict(zip(*dict1.items()))\ndef dict_invert_29(dict1):\n    ''"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(sum(sorted(nums)[0:2]))\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n    return total_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #taking input of nums\n    nums = [int(num) for num in input().split(\" \")]\n    #sum of min and max\n    sum = sum(nums)\n    #sorting the list\n    nums.sort()\n    #printing the sum\n    print(sum)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_of_array = 0\n    min_val = 0\n    max_val = 0\n    for i in nums:\n        sum_of_array += i\n        if min_val == 0 and max_val == 0:\n            min_val = i\n            max_val = i\n        elif i < min_val:\n            min_val = i\n        elif i > max_val:\n            max_val = i\n    return sum_of_array, max_val, min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0::2])\n    \n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest_value = 0\n    smallest_value = 0\n    for num in nums:\n        if num > largest_value:\n            largest_value = num\n        elif num < smallest_value:\n            smallest_value = num\n    print(largest_value+smallest_value)\n    \nbig_sum([1, 3, 5, 7])\n    \ndef even_numbers(nums):\n    '''\n    Write a python function to print the even numbers from a given list.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            print(num)\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    for i in range(len(string)):\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('(?i)abc', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]{3,}')\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #print (str1)\n    #print (\"\\n\\n\")\n    if str1 == None or str1 == \"\":\n        return str1\n    str1 = re.sub('[a-z]','',str1)\n    return str1\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 == None or str1 == \"\":\n        return str1\n    str1 = re.sub('[A-Z]','',str1)\n    return str1\n    \ndef replace_characters(str1):\n    '''\n    Write a function to replace the substrings of a given string.\n    '''\n    if str1 == None or str1 == \"\":\n        return str1\n    str1 = str1.replace(\"a\",\"A\")\n    str1 = str1.replace(\"b\",\"B\")\n    str1 = str1.replace(\"c\",\"C\")\n    str1 = str1.replace(\"d\",\"D\")\n    str1 = str1.replace(\"e\",\"E\")\n    str1 = str1.replace(\"f\",\"F\")\n    str1 = str1.replace(\"g\",\"G\")\n    str1 = str1.replace(\"h\",\"H\")\n    str1 = str1.replace(\"i\",\"I\")\n    str1 = str1.replace(\"j\",\"J\")\n    str1 = str1.replace(\"k\",\"K\")\n    str1 = str1.replace(\"l\",\"L\")\n    str1 = str1.replace(\"m\",\"M\")\n    str1 = str1.replace(\"n\",\"N\")\n    str1 = str1.replace(\"o\",\"O\")\n    str1 = str1.replace(\"p\",\"P\")\n    str1 = str1.replace(\"q\",\"Q\")\n    str1 = str1.replace(\"r\",\"R\")\n    str1 = str1.replace(\"s\",\"S\")\n    str1 = str1.replace(\"t\",\"T\")\n    str1 = str1.replace(\"u\",\"U\")\n    str1 = str1.replace(\"v\",\"V\")\n    str1 = str1.replace(\"w\",\"W\")\n    str1 = str1.replace(\"x\",\"X\")\n    str1 = str1.replace(\"y\",\"Y\")\n    str1 = str1.replace(\"z\",\"Z\")\n    return str1\n    \ndef remove_special(str1):\n    '''\n    Write a function to remove special substrings from a given string.\n    '''\n    if str1 == None or str1 == \"\":\n        return str1\n    str1 = str1.replace(\"(\",\"\")\n    str1 = str1.replace(\")\",\"\")\n    str1 = str1.replace(\"[\",\"\")\n    str1 = str1.replace(\"]\",\"\")\n    str1 = str1.replace(\"{\",\"\")\n    str1 = str1.replace(\"}\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"%\",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\"'\",\"\")\n    return str1\n    \ndef replace_with_number(str1):\n    '''\n    Write a function to replace the substrings of a given string with the numbers.\n    '''\n    if str1 == None or str1 == \"\":\n        return str1\n    str1 = str1.replace(\"zero\",\"0\")\n    str1 = str1.replace(\"one\",\"1\")\n    str1 = str1.replace(\"two\",\"2\")\n    str1 = str1.replace(\"three\",\"3\")\n    str1 = str1.replace(\"four\",\"4\")\n    str1 = str1.replace(\"five\",\"5\")\n    str1 = str1.replace(\"six\",\"6\")\n    str1 = str1.replace(\"seven\",\"7\")\n    str1 = str1.replace(\"eight\",\"8\")\n    str1 = str1.replace(\"nine\",\"9\")\n    str1 = str1.replace(\"ten\",\"10\")\n    str1 = str1.replace(\"eleven\",\"11\")\n    str1 = str1.replace(\"twelve\",\"12\")\n    str1 = str1.replace(\"thirteen\",\"13\")\n    str1 = str1.replace(\"fourteen\",\"14\")\n    str1 = str1.replace(\"fifteen\",\"15\")\n    str1 = str1.replace(\"sixteen\",\"16\")\n    str1 = str1.replace(\"seventeen\",\"17\")\n    str1 = str1.replace(\"eighteen\",\"18\")\n    str1 = str1.replace(\"nineteen\",\"19\")\n    str1 = str1.replace(\"twenty\",\"20\")\n    str1 = str1.replace(\"thirty\",\"30\")\n    str1 = str1.replace(\"fourty\",\"40\")\n    str1 = str1.replace(\"fifty\",\"50\")\n    str1 = str1.replace(\"sixty\",\"60\")\n    str1 = str1.replace(\"seventy\",\"70\")\n    str1 = str1.replace(\"eighty\",\"80\")\n    str1 = str1.replace(\"ninety\",\"90\")\n    return str1\n    \ndef replace_with_char(str1):\n    '''\n    Write a function to replace the substrings of a given string with the characters.\n    '''\n    if str1 == None or str1 == \"\":\n        return str1\n    str1 = str1.replace(\"a\",\"@\")\n    str1 = str1.replace(\"b\",\"8\")\n    str1 = str1.replace(\"c\",\"(\" )\n    str1 = str1.replace(\"d\",\"|\")\n    str1 = str1.replace(\"e\",\"3\")\n    str1 = str1.replace(\"f\",\"#\")\n    str1 = str1.replace(\"g\",\"6\")\n    str1 = str1.replace(\"h\",\"*\")\n    str1 = str1.replace(\"i\",\"!\")\n    str1 = str1.replace(\"j\",\"_\")\n    str1 = str1.replace(\"k\",\"|<\")\n    str1 = str1.replace(\"l\",\"1\")\n    str1 = str1.replace(\"m\",\"&\")\n    str1 = str1.replace(\"n\",\"^\")\n    str1 = str1.replace(\"o\",\"0\")\n    str1 = str1.replace(\"p\",\"%\")\n    str1 = str1.replace(\"q\",\"(\")\n    str1 = str1.replace(\"r\",\")\")\n    str1 = str1.replace(\"s\",\"$\")\n    str1 = str1.replace(\"t\",\"7\")\n    str1 = str1.replace(\"u\",\"+\")\n    str1 = str1.replace(\"v\",\"=\")\n    str1 = str1.replace(\"w\",\"<\")\n    str1 = str1.replace(\"x\",\">\")\n    str1 = str1.replace(\"y\",\"?\")\n    str1 = str1.replace(\"z\",\"2\")\n    return str1\n    \ndef replace_with_spec_char(str1):\n    '''\n    Write a function to replace the substrings of a given string with the special characters.\n    '''\n    if str1 == None or str1 == \"\":\n        return str1\n    str1 = str1.replace(\"@\",\"a\")\n    str1 = str1.replace(\"8\",\"b\")\n    str1 = str1.replace(\"(\",\"c\")\n    str1 = str1.replace(\"|\",\"d\")\n    str1 = str1.replace(\"3\",\"e\")\n    str1 = str1.replace(\"#\",\"f\")\n    str1 = str1.replace(\"6\",\"g\")\n    str1 = str1.replace(\"*\",\"h\")\n    str1 = str1.replace(\"!\",\"i\")\n    str1 = str1.replace(\"_\",\"j\")\n    str1 = str1.replace(\"|<\",\"k\")\n    str1 = str1.replace(\"1\",\"l\")\n    str1 = str1.replace(\"&\",\"m\")\n    str1 = str1.replace(\"^\",\"n\")\n    str1 = str1.replace(\"0\",\"o\")\n    str1 = str1.replace(\"%\",\"p\")\n    str1 = str1.replace(\"(\",\"q\")\n    str1 = str1.replace(\")\",\"r\")\n    str1 = str1.replace(\"$\",\"s\")\n    str1 = str1.replace(\"7\",\"t\")\n    str1 = str1.replace("
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #print(str1)\n    # Check for first char of string and remove them\n    #for i in range(len(str1)):\n    if re.search(r'^[a-zA-Z]', str1):\n        str1 = re.sub(r'^[a-zA-Z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'[a-z]*', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #str1 = \"Something\"\n    #str2 = \"something\"\n    #str3 = \"SOMETHING\"\n    #str4 = \"SOMETHING\"\n    str1 = str1.lower()\n    str2 = str1.split()\n    str3 = \" \"\n    for word in str2:\n        str3 += word\n    return str3\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = str1.lower()\n    return re.sub(r'\\b[a-z]\\b','',string)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lower_letter_regex = re.compile(r'[a-z]')\n    lower_letter_found_list = lower_letter_regex.findall(str1)\n    for i in lower_letter_found_list:\n        str1 = str1.replace(i, \"\")\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Your code here\n    return str1\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while(n >= 10) :\n        n = n/10\n    return int(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if type(n)!= int:\n        return 'Invalid input'\n    if n < 0 :\n        return 'Negative value'\n    if n == 0 :\n        return 0\n    return (int)(n/10)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Code here\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s = str(n)\n    return int(s[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n/10\n    return int(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in range(len(str(n))) :\n        if n % 10 == n :\n            return n % 10\n        n = n // 10\n    return None\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Write your code here\n    return int(str(n)[0])\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = [i for i in list if i%2!=0] \n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # return [i for i in list if i%2!= 0]\n    return list[1::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # list1 = []\n    # list2 = []\n    # for i in list:\n    #     if i % 2 == 1:\n    #         list1.append(i)\n    #     else:\n    #         list2.append(i)\n    # return list1 + list2\n    return [i for i in list if i % 2 == 1]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # list = [12, 54, 39, 56, 74, 23, 15, 35, 70]\n    odd_numbers = []\n    for x in list:\n        if x % 2 == 1:\n            odd_numbers.append(x)\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    listOfOdds = []\n    for x in list:\n        if x % 2!= 0:\n            listOfOdds.append(x)\n    return listOfOdds\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    for i in list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    "
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [ele for ele in list if ele%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    for i in list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \n    \n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    res = []\n    for i in list:\n        if i % 2!= 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num%2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cube=0\n    for i in range(1,n+1) :\n        sum_of_cube+=i**3\n    sum_of_natural_numbers=0\n    for j in range(1,n+1) :\n        sum_of_natural_numbers+=j\n    return sum_of_cube-sum_of_natural_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = 1\n    b = 1\n    total = 0\n    while n > 0:\n        total = total + a + b\n        a = a + 1\n        b = b + 2\n        n = n - 1\n    return total\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(sum([i**3 for i in range(1,n+1)]) - (sum([i for i in range(1,n+1)])))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1,n+1) :\n        sum_of_numbers += i\n        sum_of_cubes += pow(i,3)\n    return (pow(3,n)*sum_of_cubes) - sum_of_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = n\n    cube = 0\n    sum_n = 0\n    for i in range(1,n+1):\n        cube = cube + (i*i*i)\n    sum_n = sum_n + (i*i)\n    diff = cube - sum_n\n    print(diff)\ndifference(100)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1, n+1) :\n        sum_of_cubes += i**3\n        sum_of_nums += i\n    return abs(sum_of_nums**3 - sum_of_cubes)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        sum_of_cube = 0\n        for i in range(1,n+1) :\n            sum_of_cube += i**3\n        return sum_of_cube\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = sum([i**3 for i in range(1,n+1)])\n    sum2 = sum([i for i in range(1,n+1)])\n    return sum1-sum2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum(n)*n)**2 - sum(i*i*i for i in n)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0 \n    for i in range(1,n+1) :\n        sum += i**3\n    sum += n**3\n    return sum\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    lst = []\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if((A[i] ^ A[j]) % 2) : \n                lst.append((A[i],A[j])) \n    return(lst) \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count = count + 1\n    return count \nA = [ 4, 2, 2, 1, 1, 0 ] \nprint(find_Odd_Pair(A,len(A))) \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort()\n    count = 0\n    for i in range(0,N-1) :\n        if (A[i] ^ A[i+1]) % 2 == 1 :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(0,i+1) :\n            if(A[i] ^ A[j] == 2) : \n                count += 1\n    print(\"Count is \",count)\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    cnt = 0\n    \n    for i in range(0, N) :\n        for j in range(i+1, N) :\n            xor = A[i] ^ A[j]\n            if (xor & 1) : \n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N): \n        for j in range(i+1,N): \n            if(A[i] ^ A[j] % 2 == 1): \n                count += 1\n    return count \n        \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if((A[i]^A[j])&1):\n                count+=1\n    return count\nA=[1,2,3,4,5]\nprint(find_Odd_Pair(A,5))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0, N) : \n        for j in range(i+1, N) : \n            if((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count \n    \ndef main() : \n    '''\n    Main function\n    '''\n    N = int(input())\n    A = list(map(int, input().split())) \n    print(find_Odd_Pair(A, N)) \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            xor = A[i] ^ A[j] \n            if(xor%2) : \n                count = count+1\n    return count \n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        result += string[i].swapcase()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Get the characters from the string and store them in a list\n    # for index, char in enumerate(string):\n    #     char_list.append(char)\n    #     char_list.append(index)\n    char_list = [(char, index) for index, char in enumerate(string)]\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(letter.swapcase() if i % 2 == 0 else letter for i, letter in enumerate(string))\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(letter.upper() if letter.islower() else letter.lower() for letter in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = []\n    for char in string:\n        result.append(char.swapcase())\n    return ''.join(result)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join([i.upper() if i.islower() else i.lower() for i in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    string = [x.upper() if x.islower() else x.lower() for x in string]\n    string = ''.join(string)\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(i) - int(j) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = list(str(n1))\n    n2 = list(str(n2))\n    # length = min(len(n1), len(n2))\n    length = max(len(n1), len(n2))\n    sum = 0\n    for i in range(length):\n        sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_1 = str(abs(n1))\n    digit_2 = str(abs(n2))\n    digit_difference = 0\n    for i in range(len(digit_1)):\n        digit_difference += int(digit_1[i]) - int(digit_2[i])\n    return digit_difference\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(x-y) for x,y in zip(str(n1),str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert isinstance(n1, int) and isinstance(n2, int) and n1 >= 0 and n2 >= 0, \"Both the inputs should be integers and positive\"\n    n1_digits = str(n1)\n    n2_digits = str(n2)\n    n1_len = len(n1_digits)\n    n2_len = len(n2_digits)\n    if n1_len > n2_len:\n        n2_digits = n2_digits.zfill(n1_len)\n    elif n1_len < n2_len:\n        n1_digits = n1_digits.zfill(n2_len)\n    return sum([abs(int(n1_digits[i])-int(n2_digits[i])) for i in range(n1_len)])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if type(n1)!= int or type(n2)!= int:\n        raise Exception(\"Inputs must be integers!\")\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    def sum_of_digits(n):\n        sum = 0\n        while n:\n            sum += n % 10\n            n //= 10\n        return sum\n    \n    return abs(sum_of_digits(n1) - sum_of_digits(n2))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(0,size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_start = 0\n    max_end = 0\n    for i in range(size):\n        if max_sum <= 0:\n            max_sum = a[i]\n            max_start = i\n            max_end = i\n        else:\n            max_sum += a[i]\n            max_end = i\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        max_sum = max(max_sum, a[i])\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    for i in range(size):\n        max_sum = max(max_sum, 0) + a[i]\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    summ = 0\n    for i in range(size):\n        summ += a[i]\n    print(summ)\n    best = summ\n    for i in range(size):\n        for j in range(i+1, size):\n            summ = 0\n            for k in range(i, j+1):\n                summ += a[k]\n            if summ > best:\n                best = summ\n    print(best)\n    return best\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    start = 0\n    end = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    max_so_far = -100000000\n    max_ending_here = 0\n    \n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    union = set1.union(set2)\n    \n    return sorted(union)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    union_set = sorted(union_set)\n    return union_set\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result_tup = ()\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup2)):\n            result_tup += (test_tup1[i],)\n        for i in range(len(test_tup2), len(test_tup1)):\n            result_tup += (test_tup1[i],)\n    elif len(test_tup2) > len(test_tup1):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup2[i],)\n        for i in range(len(test_tup1), len(test_tup2)):\n            result_tup += (test_tup2[i],)\n    elif len(test_tup2) == len(test_tup1):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i],)\n        for i in range(len(test_tup1), len(test_tup2)):\n            result_tup += (test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup = (list(test_tup1) + list(test_tup2))\n    tup_sorted = sorted(tup)\n    print(tup_sorted)\n    return tup_sorted\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    #pass # TODO\n    \n    result_tup = ()\n    \n    for i in test_tup1:\n        if not i in result_tup:\n            result_tup += (i,)\n            \n    for i in test_tup2:\n        if not i in result_tup:\n            result_tup += (i,)\n            \n    result_tup = sorted(result_tup)\n    \n    return result_tup\n        \ndef find_tuples_containing_element(test_tup, test_elem):\n    '''\n    Write a function to find all the elements of a given tuple that appear in it more than once. \n    The returned element should be sorted in ascending order of their frequency in the tuple.\n    '''\n    \n    #pass # TODO\n    \n    result_list = []\n    test_elem_list = []\n    \n    for i in test_tup:\n        if i in test_elem_list:\n            result_list.append(i)\n        test_elem_list.append(i)\n        \n    result_list = list(dict.fromkeys(result_list))\n    result_list.sort()\n        \n    return result_list\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = list(set(test_tup1) | set(test_tup2))\n    union.sort()\n    return tuple(union)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n    for element in test_tup1:\n        if not(element in result):\n            result.append(element)\n    for element in test_tup2:\n        if not(element in result):\n            result.append(element)\n    result.sort()\n    return tuple(result)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    union_tup = list(set(tup1) | set(tup2))\n    union_tup = sorted(union_tup)\n    return tuple(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set().union(test_tup1, test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        return tuple(sorted(set(test_tup1 + test_tup2)))\n    else:\n        raise ValueError(\"Arguments must be a tuple\")\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_len = []\n    max_len = 0\n    for i in lst:\n        lst_len.append(len(i))\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = []\n    for i in lst:\n        if len(i)>result[0]:\n            result = [len(i), i]\n    return result\n    \n    \n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lengths = []\n    for i in lst:\n        lengths.append(len(i))\n    return max(lengths)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    list_lengths = []\n    for l in lst:\n        list_lengths.append(len(l))\n    return max(list_lengths)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = []\n    for i in lst:\n        if len(i) not in length:\n            length.append(len(i))\n    return max(length)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        length = 0\n        for j in i:\n            length += 1\n        if length > max_length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"[^\"]*\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotation_start = re.compile('\"')\n    quotation_end = re.compile('\"')\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    # TODO: Use a regular expression to extract the word inside the quotation marks\n    # The regular expression should find all the words between a pair of quotation marks\n    \n    # This should work for the example text above, and it should also work for the example text below:\n    # text = \"Nice day for a walk in the park!\"\n    # text = \"This is a string with some numbers 1233 and a symbol #hashtag\"\n    # The function should return a list with the numbers as floats and the #hashtag word as a string\n    # print(extract_values(text))\n    # output = [1233.0, 'day', 'park!', 23.0, 98.0]\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = '\"(.*?)\"'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #text = '\"Hi there.\" He said. \"I\\'m okay.\"'\n    #text = 'I\\'m fine. \"Yes, you are!\" said Alice. \"I\\'m okay.\"'\n    #text = 'We just received $10.00 for cookies.'\n    #text = 'I\\'m \"fine\". \"Yes, you are!\" said Alice. \"I\\'m okay.\"'\n    \n    #text = '\\\"I\\'m fine. \\'Yes, you are!\\\" said Alice. \\\"I\\'m okay.\\\"'\n    #text = \"I'm fine. 'Yes, you are!' said Alice. 'I'm okay.'\"\n    #text = 'I\\'m fine. \\'Yes, you are!\\' said Alice. \\'I\\'m okay.\\' '\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\\\"[^\\\"]*\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    res = re.findall(r'\"[^\"]*\"', text)\n    return res\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #pattern = re.compile(r'\"([^\"]*)\"')\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotations_list = re.findall(r'\"[^\"]*\"', text)\n    # print(quotations_list)\n    values = []\n    for i in quotations_list:\n        values.append(i.strip('\"'))\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count +=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = set()\n    for i in range(0,n):\n        for j in range(0,n):\n            if arr[i]!=arr[j] and (arr[i],arr[j]) not in pairs:\n                pairs.add((arr[i],arr[j]))\n    print(len(pairs))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i]!= arr[j]): \n                count+=1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # initialize a list\n    result = []\n    for i in range(0,n):\n        for j in range(i+1,n):\n            # swap if elements are not equal\n            if arr[i]!= arr[j]:\n                result.append((arr[i],arr[j]))\n    # return the number of possible unordered pairs\n    return len(result)\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                pairs.append((arr[i],arr[j]))\n    return len(set(pairs))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if (arr[i]!= arr[i+1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initialize result \n    result = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    unique = {}\n    for i in range(n): \n        if arr[i] in unique: \n            unique[arr[i]] += 1\n        else: \n            unique[arr[i]] = 1\n    count = 0\n    for i in unique:\n        if unique[i] == 2:\n            count += 1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    "
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert n >= 0, 'The input of the function must be non-negative.'\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert n >= 0, \"n should be a non-negative number\"\n    sum = 0\n    for i in str(n):\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, list(str(n))))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n >= 10:\n        n = sum([int(i) for i in str(n)])\n    return n\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    for i in str(n):\n        result += int(i)\n    return result\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n    \ndef is_anagram(string_one, string_two):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    # Convert both strings to lowercase and remove whitespaces\n    string_one = string_one.lower().replace(' ', '')\n    string_two = string_two.lower().replace(' ', '')\n    \n    # Edge case check\n    if len(string_one)!= len(string_two):\n        return False\n        \n    # Compare characters in both strings\n    for char_one in string_one:\n        if char_one in string_two:\n            string_two = string_two.replace(char_one, '', 1)\n        else:\n            return False\n    \n    # Return True if all characters have been removed, otherwise False\n    return string_two == ''\n        \ndef nth_power(number, n):\n    '''\n    Write a function to calculate the nth power of a number.\n    '''\n    power = 1\n    for i in range(n):\n        power *= number\n    return power\n    \ndef factorial(number):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if number < 0:\n        print('The factorial of a negative number is undefined.')\n    elif number < 2:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, number + 1):\n            factorial *= i\n        return factorial\n        \ndef reverse(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    if type(string) is not str:\n        print('The input is not a string.')\n    elif string == '':\n        return ''\n    else:\n        reversed_string = ''\n        for i in range(len(string) - 1, -1, -1):\n            reversed_string += string[i]\n        return reversed_string\n    \ndef check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    # Convert string to lowercase and remove whitespaces\n    string = string.lower().replace(' ', '')\n    \n    # Edge case check\n    if len(string) <= 1:\n        return True\n    \n    # Compare characters in string\n    if string[0] == string[-1]:\n        return check_palindrome(string[1:-1])\n    else:\n        return False\n    \ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    # Set of vowels\n    vowels = set('aeiou')\n    \n    # Edge case check\n    if type(string) is not str:\n        print('The input is not a string.')\n    else:\n        vowel_count = 0\n        for char in string:\n            if char in vowels:\n                vowel_count += 1\n        return vowel_count\n    \ndef is_pangram(sentence):\n    '''\n    Write a function to check if a sentence is a pangram or not.\n    '''\n    # Set of English alphabet\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    \n    # Edge case check\n    if type(sentence) is not str:\n        print('The input is not a string.')\n    else:\n        for char in alphabet:\n            if char not in sentence:\n                return False\n        return True\n        \ndef all_unique(string):\n    '''\n    Write a function to check if a string contains all unique characters.\n    '''\n    # Edge case check\n    if type(string) is not str:\n        print('The input is not a string.')\n    else:\n        if len(string) <= 1:\n            return True\n        else:\n            for i in range(0, len(string)):\n                for j in range(i + 1, len(string)):\n                    if string[i] == string[j]:\n                        return False\n            return True\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert n >= 0\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        return list1[0] < list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # append all elements to list\n    # iterate through the list\n    # compare element to next element\n    # if any pair of element is not in order then return False\n    # if all pairs are in order then return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if i == len(list1)-1:\n            return True\n        elif list1[i] > list1[i+1]:\n            return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return True\n    if len(list1)==1:\n        return True\n    if list1[0]>list1[1]:\n        return False\n    return issort_list(list1[1:])\ndef issort_rec(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return True\n    return issort_rec(list1[1:]) and (list1[0]>list1[1] or list1[0]==list1[1])\ndef issort(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return True\n    return list1[0]<=list1[1] and issort(list1[1:])\ndef issort_rec_no_check(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return True\n    return issort_rec_no_check(list1[1:]) or (list1[0]>list1[1])\ndef sum_list(list1):\n    '''\n    Write a function to sum all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    return list1[0]+sum_list(list1[1:])\ndef sum_list_rec(list1):\n    '''\n    Write a function to sum all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    return list1[0]+sum_list_rec(list1[1:])\ndef sum_list_rec_no_check(list1):\n    '''\n    Write a function to sum all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    return list1[0]+sum_list_rec_no_check(list1[1:])\ndef sum_list_no_check(list1):\n    '''\n    Write a function to sum all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    return list1[0]+sum_list_no_check(list1[1:])\ndef sum_list_rec_no_check_no_recursion(list1):\n    '''\n    Write a function to sum all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    sum_list_rec_no_check_no_recursion(list1[1:])\n    return list1[0]+sum_list_rec_no_check_no_recursion(list1[1:])\ndef square_list_rec(list1):\n    '''\n    Write a function to find the nth square of all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    return list1[0]**2+square_list_rec(list1[1:])\ndef square_list(list1):\n    '''\n    Write a function to find the nth square of all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    return list1[0]**2+square_list(list1[1:])\ndef square_list_rec_no_check(list1):\n    '''\n    Write a function to find the nth square of all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    return list1[0]**2+square_list_rec_no_check(list1[1:])\ndef square_list_no_check(list1):\n    '''\n    Write a function to find the nth square of all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    return list1[0]**2+square_list_no_check(list1[1:])\ndef square_list_rec_no_check_no_recursion(list1):\n    '''\n    Write a function to find the nth square of all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    square_list_rec_no_check_no_recursion(list1[1:])\n    return list1[0]**2+square_list_rec_no_check_no_recursion(list1[1:])\ndef square_list_no_check_no_recursion(list1):\n    '''\n    Write a function to find the nth square of all the elements of a specified list.\n    '''\n    if len(list1)==0:\n        return 0\n    square_list_no_check_no_recursion(list1[1:])\n    return list1[0]**2+square_list_no_check_no_recursion(list1[1:])\ndef filter_list(list1):\n    '''\n    Write a function to find all the numbers less than a given number in a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if list1[0]<=list1[0]:\n        return [list1[0]]+filter_list(list1[1:])\n    return filter_list(list1[1:])\ndef filter_list_rec(list1):\n    '''\n    Write a function to find all the numbers less than a given number in a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if list1[0]<=list1[0]:\n        return [list1[0]]+filter_list_rec(list1[1:])\n    return filter_list_rec(list1[1:])\ndef filter_list_rec_no_check(list1):\n    '''\n    Write a function to find all the numbers less than a given number in a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if list1[0]<=list1[0]:\n        return [list1[0]]+filter_list_rec_no_check(list1[1:])\n    return filter_list_rec_no_check(list1[1:])\ndef filter_list_no_check(list1):\n    '''\n    Write a function to find all the numbers less than a given number in a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if list1[0]<=list1[0]:\n        return [list1[0]]+filter_list_no_check(list1[1:])\n    return filter_list_no_check(list1[1:])\ndef filter_list_rec_no_check_no_recursion(list1):\n    '''\n    Write a function to find all the numbers less than a given number in a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if list1[0]<=list1[0]:\n        return [list1[0]]+filter_list_rec_no_check_no_recursion(list1[1:])\n    return filter_list_rec_no_check_no_recursion(list1[1:])\ndef filter_list_no_check_no_recursion(list1):\n    '''\n    Write a function to find all the numbers less than a given number in a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if list1[0]<=list1[0]:\n        return [list1[0]]+filter_list_no_check_no_recursion(list1[1:])\n    return filter_list_no_check_no_recursion(list1[1:])\ndef filter_list_rec_no_check_no_recursion_with_max_recursion(list1,max_recursion):\n    '''\n    Write a function to find all the numbers less than a given number in a given list.\n    '''\n    if len(list1)==0:\n    "
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1==sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    if len(list1) <= 1:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == 0:\n        return None\n    else:\n        return [{}]*length\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your function here\n    list2 = []\n    for sublist in list1:\n        list2.append(sorted(sublist))\n    return list2\n    \n    \ndef add_two_lists(list1, list2):\n    '''\n    Write a function that takes two lists of numbers and returns a single list containing all the elements of the first list followed by all the elements of the second list.\n    '''\n    # Write your function here\n    list3 = list1 + list2\n    return sorted(list3)\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for k in range(len(list1)):\n        list1[k] = sorted(list1[k])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=str)\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # list1 = [[\"bb\", \"aaaaa\", \"ab\", \"c\"], [\"ccc\", \"d\", \"bb\", \"aaa\"]]\n    # answer = [['ab', 'bb', 'aaa', 'aaaaa'], ['ccc', 'd']]\n    sorted_sublists = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        sorted_sublists.append(sorted_sublist)\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for eachlist in list1:\n        eachlist.sort()\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = list()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) == 1:\n        return len(nums[0])\n    else:\n        result = []\n        for i in range(len(nums)):\n            for j in range(len(nums[i])):\n                if nums[i][j] not in result:\n                    result.append(nums[i][j])\n        return len(result)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_list = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_list:\n            unique_list.append(nums[i])\n    return unique_list\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in nums:\n        for j in nums:\n            if i == j:\n                nums.remove(i)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_list = []\n    final_nums_list = []\n    unique_nums_list = []\n    nums_list = [nums[i] for i in range(len(nums)) if type(nums[i])==list]\n    nums_list = [item for sublist in nums_list for item in sublist]\n    nums_list = [num for num in nums_list if num not in final_nums_list]\n    unique_nums_list = [num for num in nums_list if num not in unique_nums_list]\n    return unique_nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # print(f\"Original list is: {nums}\")\n    # nums = [str(i) for i in nums]\n    # print(f\"Original list is: {nums}\")\n    # print(set(nums))\n    return set(nums)\n    \ndef nums_to_list(nums):\n    '''\n    Write a function to convert an array to a string of numbers.\n    '''\n    # print(f\"Original list is: {nums}\")\n    # nums = [str(i) for i in nums]\n    # print(f\"Original list is: {nums}\")\n    # print(''.join(nums))\n    return ''.join(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # return set(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    print(nums)\n    no_duplicate_nums = list(dict.fromkeys(nums))\n    print(no_duplicate_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    i = 0\n    l1 = []\n    while i < len(nums):\n        if nums[i] not in l1:\n            l1.append(nums[i])\n        i += 1\n    return l1\n    \ndef unique_nums(nums):\n    '''\n    Write a python function to find unique numbers from a given number of lists.\n    '''\n    l1 = []\n    for i in nums:\n        if i not in l1:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_elements = set(list_data)\n    product = 1\n    for item in unique_elements:\n        product = product * item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for data in list_data:\n        if data not in unique_list:\n            unique_list.append(data)\n    product = 1\n    for data in unique_list:\n        product *= data\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # return 1\n    for x in list_data:\n        if x not in unique_product.mylist:\n            unique_product.mylist.append(x)\n    product = 1\n    for x in unique_product.mylist:\n        product = product*x\n    return product\nunique_product.mylist = []"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data = set(list_data)\n    product = 1\n    for i in unique_data:\n        product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data = set(list_data)\n    product = 1\n    for i in unique_data:\n        product *= i\n    print(product)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list=list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product = product * num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for x in unique_numbers:\n        product = product*x\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #return list_data.count(list_data[0])\n    #return len(list_data) * list_data[0]\n    total = 1\n    for i in list_data:\n        total *= i\n    return total\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list = list(set(list_data))\n    prod = 1\n    for i in new_list:\n        prod = prod * i\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_uniq = set(list_data)\n    prod = 1\n    for i in list_uniq:\n        prod = prod * i\n    return prod\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*(r+h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 3.14*(r**2)*h\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 3.14*r*(r+h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14*(r**2)*(1/3)*h\ndef surfacearea_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2*l*b\ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return l*b\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return a+b+c\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 1/2*a*b*c\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return a*b\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a*b\ndef surfacearea_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return (a+b)*d/2\ndef volume_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return 1/2*(a+b)*(c+d)\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return 3.14*r*r\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return 3.14*r*r*r\ndef surfacearea_ellipse(a,b):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    return 3.14*a*b\ndef volume_ellipse(a,b):\n    '''\n    Write a function to find the volume of an ellipse.\n    '''\n    return 3.14*a*b*a*b\ndef surfacearea_rhombus(a,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return a*b\ndef volume_rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return 1/2*a*b\ndef surfacearea_rectangle_rounded(a,b,n):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 4*a+2*b*(1+n)\ndef volume_rectangle_rounded(a,b,n):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a*b\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*3.14*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*3.14*r*r*r\ndef surfacearea_cone_rounded(r,n):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 3.14*r*(r+n)\ndef volume_cone_rounded(r,n):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14*(r**2)*(1/3)*(n+r)\ndef surfacearea_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*3.14*a*b*c\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*3.14*a*b*c\ndef surfacearea_sphpere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*3.14*r*r\ndef volume_sphpere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*3.14*r*r*r\ndef surfacearea_cylinder_rounded(r,n):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*(r+n)\ndef volume_cylinder_rounded(r,n):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 3.14*(r**2)*(n+r)\ndef surfacearea_cuboid_rounded(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 2*(a+b+c)\ndef volume_cuboid_rounded(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef surfacearea_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return a*b+b*c+a*c\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1/3*a*b*c\ndef surfacearea_cone_max(r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 3.14*r*r\ndef volume_cone_max(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14*(r**2)*(1/3)\ndef surfacearea_cone_min(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 3.14*r*(r+h)\ndef volume_cone_min(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14*(r**2)*h\ndef surfacearea_cylinder_max(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r\ndef volume_cylinder_max(r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 3.14*(r**2)*r\ndef surfacearea_cylinder_min(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*(r+h)\ndef volume_cylinder_min(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 3.14*(r**2)*(h-1)\ndef surfacearea_cube_max(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*a*a\ndef volume_cube_max(a):\n    '''\n    Write "
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * (r + h)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return round(math.pi*(r**2)*h,3)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h+2*3.14*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*h + 2*math.pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    area=2*3.1415*(r**2+r*h)\n    return area\nprint(surfacearea_cylinder(3,4))\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412736061\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    PI = 3.14\n    sa = 2 * PI * r * h + 2 * PI * r ** 2\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    sa = 2 * math.pi * r * (r + h)\n    print('surface area of cylinder of radius {} and height {} is {}'.format(r,h,sa))\n    return sa\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for j in range(0,len(B)):\n        if A==B[j:j+len(A)]:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    else:\n        b_index = 0\n        is_sub = True\n        for a_index in range(len(A)):\n            if A[a_index] == B[b_index]:\n                b_index += 1\n                if b_index == len(B):\n                    return True\n            else:\n                is_sub = False\n                break\n        return is_sub\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #A_len = len(A)\n    #B_len = len(B)\n    #for i in range(A_len+1):\n        #for j in range(B_len+1):\n            #if (B[j:j+i] == A):\n                #return True\n    #return False\n    return any(sublist == A for sublist in itertools.permutations(B))\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(B) > len(A)):\n        return False\n    if A == B:\n        return True\n    else:\n        A.sort()\n        B.sort()\n        if B in A:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A in B: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[:i] == B[:i]:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)> len(B):\n        return False\n    for i in range(len(B)):\n        if B[i]!= A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact % 10\nprint(last_Digit_Factorial(10))"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def fact(n):\n        if n == 1:\n            return 1\n        else:\n            return n * fact(n-1)\n    return int(str(fact(n))[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Defining the function\n    def last_digit_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return (n % 10) * (last_digit_factorial(n // 10)) \n    # Calling the function\n    return last_digit_factorial(n)\n    \n    "
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 0): \n        return 1\n    else: \n        return n * last_Digit_Factorial(n - 1) \n        \ndef last_Digit_Sum_Series(n): \n    '''\n    Write a python function to find the last digit in the sum of the first n numbers in a series.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n % 10 + last_Digit_Sum_Series(n // 10)) \n        \ndef last_Digit_Sum_Series_Fast(n): \n    '''\n    Write a python function to find the last digit in the sum of the first n numbers in a series, faster.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n % 10 + last_Digit_Sum_Series_Fast(n // 10)) \n        \ndef last_Digit_Max_Sub_Array(A): \n    '''\n    Write a python function to find the last digit in the maximum sum of a contiguous sub-array.\n    '''\n    max_ending_here = max_so_far = 0\n    for i in A:\n        max_ending_here = max(0, max_ending_here + i)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far % 10\n        \ndef last_Digit_Max_Sub_Array_Fast(A): \n    '''\n    Write a python function to find the last digit in the maximum sum of a contiguous sub-array, faster.\n    '''\n    max_ending_here = max_so_far = 0\n    for i in A:\n        if max_ending_here > 0:\n            max_ending_here = max(max_ending_here + i, 0)\n        else:\n            max_ending_here = i\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far % 10\n    \ndef last_Digit_Greatest_Sum_Sub_Array(A): \n    '''\n    Write a python function to find the last digit in the maximum sum of a contiguous sub-array, where the sub-array must have at least 1 element.\n    '''\n    max_ending_here = max_so_far = A[0]\n    for i in range(1, len(A)):\n        if max_ending_here > 0:\n            max_ending_here = max(max_ending_here + A[i], 0)\n        else:\n            max_ending_here = A[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far % 10\n        \ndef last_Digit_Greatest_Sum_Sub_Array_Fast(A): \n    '''\n    Write a python function to find the last digit in the maximum sum of a contiguous sub-array, where the sub-array must have at least 1 element, faster.\n    '''\n    max_ending_here = max_so_far = A[0]\n    for i in range(1, len(A)):\n        max_ending_here = max(max_ending_here + A[i], 0)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far % 10\n    \ndef last_Digit_Longest_All_Zeros_Sub_Array(A): \n    '''\n    Write a python function to find the last digit in the length of the longest contiguous sub-array of zeros in the input array.\n    '''\n    max_ending_here = 0\n    for i in A:\n        if i == 0:\n            max_ending_here += 1\n        else:\n            max_ending_here = 0\n    return max_ending_here\n        \ndef last_Digit_Longest_All_Zeros_Sub_Array_Fast(A): \n    '''\n    Write a python function to find the last digit in the length of the longest contiguous sub-array of zeros in the input array, faster.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in A:\n        if i == 0:\n            max_ending_here += 1\n        else:\n            max_ending_here = 0\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n    \ndef last_Digit_Triangular_Number(n): \n    '''\n    Write a python function to find the last digit in the value of the triangle number Tn.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n % 2 + last_Digit_Triangular_Number(n // 2)) \n        \ndef last_Digit_Triangular_Number_Fast(n): \n    '''\n    Write a python function to find the last digit in the value of the triangle number Tn, faster.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n % 2 + last_Digit_Triangular_Number_Fast(n // 2)) \n        \ndef last_Digit_Fibonacci(n): \n    '''\n    Write a python function to find the last digit in the value of the Fibonacci number Fn.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (n % 2 + last_Digit_Fibonacci(n - 1) + last_Digit_Fibonacci(n - 2)) \n        \ndef last_Digit_Fibonacci_Fast(n): \n    '''\n    Write a python function to find the last digit in the value of the Fibonacci number Fn, faster.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (n % 2 + last_Digit_Fibonacci_Fast(n - 1) + last_Digit_Fibonacci_Fast(n - 2)) \n        \ndef last_Digit_Collatz(n): \n    '''\n    Write a python function to find the last digit in the value of the Collatz sequence for the given input number.\n    '''\n    if n == 1: \n        return 1\n    elif n % 2 == 0: \n        return last_Digit_Collatz(n // 2)\n    else: \n        return (n % 10 + last_Digit_Collatz(3 * n + 1)) \n        \ndef last_Digit_Collatz_Fast(n): \n    '''\n    Write a python function to find the last digit in the value of the Collatz sequence for the given input number, faster.\n    '''\n    if n == 1: \n        return 1\n    elif n % 2 == 0: \n        return last_Digit_Collatz_Fast(n // 2)\n    else: \n        return (n % 10 + last_Digit_Collatz_Fast(3 * n + 1)) \n        \ndef last_Digit_Power_Sum(n): \n    '''\n    Write a python function to find the last digit in the value of the sum of squares of the first n numbers in a given series.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n % 10 + last_Digit_Power_Sum(n // 10)) \n        \ndef last_Digit_Power_Sum_Fast(n): \n    '''\n    Write a python function to find the last digit in the value of the sum of squares of the first n numbers in a given series, faster.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n % 10 + last_Digit_Power_Sum_Fast(n // 10)) \n        \ndef last_Digit_Power_Sum_Fast_Optimized(n): \n    '''\n    Write a python function to find the last digit in the value of the sum of squares of the first n numbers in a given series, faster.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n % 10 + last_Di"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def find_factorial(num):\n        if num < 0:\n            raise ValueError('Factorial does not exist for negative number')\n        if num == 0:\n            return 1\n        else:\n            return num*find_factorial(num-1)\n    factorial = find_factorial(n)\n    return str(factorial)[-1]\n    \ndef Largest_Number_in_List_v1(a):\n    '''\n    Write a python function to find the largest number in a given list of numbers\n    '''\n    max_number = a[0]\n    for x in range(len(a)):\n        if a[x] > max_number:\n            max_number = a[x]\n    return max_number\n    \ndef Largest_Number_in_List_v2(a):\n    '''\n    Write a python function to find the largest number in a given list of numbers\n    '''\n    a.sort()\n    return a[-1]\n    \ndef Largest_Number_in_List_v3(a):\n    '''\n    Write a python function to find the largest number in a given list of numbers\n    '''\n    max_number = a[0]\n    for x in range(1,len(a)):\n        if a[x] > max_number:\n            max_number = a[x]\n    return max_number\n    \ndef Largest_Number_in_List_v4(a):\n    '''\n    Write a python function to find the largest number in a given list of numbers\n    '''\n    max_number = a[0]\n    for x in range(len(a)):\n        if a[x] > max_number:\n            max_number = a[x]\n    return max_number\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return(fact%10)\n    \ndef last_Digit_Factorial2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    i = n\n    while i!= 0:\n        fact = fact*i\n        i -= 1\n    return(fact%10)\n    \ndef last_Digit_Factorial3(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return n%10 * last_Digit_Factorial3(n//10)\n    \ndef last_Digit_Factorial4(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    res = 1\n    while n:\n        res *= n\n        n -= 1\n    return res%10\n    \ndef last_Digit_Factorial5(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    return last_Digit_Factorial5(n//10) * (n%10)\n    \ndef last_Digit_Factorial6(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<=1:\n        return n\n    return last_Digit_Factorial6(n//10) + last_Digit_Factorial6(n%10) * (n//10)\n    \ndef last_Digit_Factorial7(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n%10 * (last_Digit_Factorial7(n//10) if n>1 else 1)\n    \ndef last_Digit_Factorial8(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return last_Digit_Factorial8(n//10) * (n%10)\n    \ndef last_Digit_Factorial9(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    return n%10 * last_Digit_Factorial9(n//10)\n    \ndef last_Digit_Factorial10(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return last_Digit_Factorial10(n//10) * (n%10)\n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    sum = 0\n    while n:\n        sum += n%10\n        n = n//10\n    return sum\n    \ndef sum_of_digits2(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return sum([n%10 for n in range(0,n+1)])\n    \ndef sum_of_digits3(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return sum([n%10 for n in range(0,n+1)])\n    \ndef sum_of_digits4(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return sum(map(int, list(str(n))))\n    \ndef sum_of_digits5(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef sum_of_digits6(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return sum(int(i) for i in str(n))\n    \ndef sum_of_digits7(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef sum_of_digits8(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(''.join(map(str, list(str(n)))))\n    \ndef sum_of_digits9(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits10(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits11(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits12(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits13(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits14(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits15(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits16(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits17(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits18(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits19(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits20(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits21(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits22(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits23(n): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_of_digits24(n): \n    '''\n    Writ"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return (n)*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(n)\n    factorial = 1\n    while (n > 1):\n        factorial = factorial * n\n        n -= 1\n    return factorial%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return \"invalid input\"\n    else:\n        factorial = 1\n        for i in range(1,n+1):\n            factorial = factorial*i\n        return factorial%10\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for t in zip(list1,list2,list3) for i in t]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for t in zip(list1, list2, list3) for i in t]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    merged_list = []\n    for idx in range(len(list1)):\n        merged_list.append(list1[idx])\n        merged_list.append(list2[idx])\n        merged_list.append(list3[idx])\n    return merged_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    i = 0\n    j = 0\n    k = 0\n    my_list = []\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        my_list.append(list1[i])\n        my_list.append(list2[j])\n        my_list.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return my_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = [elem for t in zip(list1,list2,list3) for elem in t]\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # list1 = [1, 2, 3, 4]\n    # list2 = ['a', 'b', 'c', 'd']\n    # list3 = [True, False, True, False]\n    # the expected result is the interleaved list:\n    # [1, 'a', True, 2, 'b', False, 3, 'c', True, 4, 'd']\n    # i.e. 1 and 'a' are in the same index, 3 and 'c' are in the same index, etc.\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Make sure all three lists are the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3) or len(list3)!= len(list1):\n        print(\"lists are not all the same length\")\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list=[]\n    new_list.extend(list1)\n    new_list.extend(list2)\n    new_list.extend(list3)\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for item in zip(list1,list2,list3)]\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #test_tup1 = (1,2,3,4,5,6,7,8,9)\n    #test_tup2 = (2,3,4,5,6,7,8,9,1)\n    dissimilar_tup = ()\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    print('''Write a function to find the dissimilar elements in the given two tuples.\n    Input: (10, 3, 6, 8), (1, 2, 3)\n    Output: (6, 8)\n    ''')\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    if tup1 == tup2:\n        return 'Input tuples are equal.'\n        \n    lst1 = list(tup1)\n    lst2 = list(tup2)\n    \n    lst = []\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            lst.append(lst1[i])\n    \n    return tuple(lst)\n    \n    \nif __name__ == '__main__':\n    # (10, 3, 6, 8), (1, 2, 3)\n    tup1 = (10, 3, 6, 8)\n    tup2 = (1, 2, 3)\n    \n    dissimilar_tup = find_dissimilar(tup1, tup2)\n    print('The dissimilar elements in the given two tuples are:', dissimilar_tup)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    # print(test_list1, test_list2)\n    dissimilar = []\n    for element in test_list1:\n        if element not in test_list2:\n            dissimilar.append(element)\n    for element in test_list2:\n        if element not in test_list1:\n            dissimilar.append(element)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1, test_tup2 = set(test_tup1), set(test_tup2)\n    return list(test_tup1.symmetric_difference(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #result = [i for i in test_tup1 + test_tup2 if i not in test_tup1 or i not in test_tup2]\n    result = [i for i in test_tup1 if i not in test_tup1]\n    result.extend([i for i in test_tup2 if i not in test_tup2])\n    print(\"The dissimilar elements in the given two tuples are:\", result)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            result.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    dissimilar = []\n    \n    for i in test_tup1:\n        if i in test_tup2:\n            dissimilar.append(i)\n    \n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list1.sort()\n    list2.sort()\n    list_common = []\n    list_dissimilar = []\n    # if we have the same length, check the similar and dissimilar\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                list_common.append(list1[i])\n            else:\n                list_dissimilar.append(list1[i])\n    # else, we have to check the common and the dissimilar\n    else:\n        for i in list1:\n            for j in list2:\n                if i == j:\n                    list_common.append(i)\n                else:\n                    list_dissimilar.append(i)\n    return list_common, list_dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if(isinstance(test_tuple,tuple)):\n        new_tuple = ()\n        for item in test_tuple:\n            if(isinstance(item,tuple)):\n                new_tuple += even_ele(item, even_fnc)\n            elif(isinstance(item,int)):\n                if(even_fnc(item)):\n                    new_tuple += (item,)\n            elif(isinstance(item,float)):\n                if(even_fnc(item)):\n                    new_tuple += (item,)\n            else:\n                new_tuple += (item,)\n        return(new_tuple)\n    else:\n        raise TypeError\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if(even_fnc(i)):\n            even_list.append(i)\n    return tuple(even_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Base cases\n    if not test_tuple: \n        return ()\n    if not test_tuple[0]:\n        return even_ele(test_tuple[1:], even_fnc)\n    if not test_tuple[1]:\n        return even_ele(test_tuple[0], even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_fnc(i)\n        else:\n            if not i % 2:\n                test_tuple.remove(i)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = list(test_tuple)\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            test_tuple.remove(i)\n    for i in test_tuple:\n        if not even_fnc(i):\n            test_tuple.remove(i)\n    test_tuple = tuple(test_tuple)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if(even_fnc(i)):\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = () \n    for i in test_tuple: \n        if type(i)!= tuple: \n            if even_fnc(i): \n                new_tuple += (i,) \n        else: \n            new_tuple += even_ele(i, even_fnc) \n    return new_tuple \n    \ndef even_fn(num): \n    return num % 2 == 0\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print('test_tuple:',test_tuple)\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == tuple:\n            even_fnc(test_tuple[i])\n        elif test_tuple[i] % 2 == 0:\n            test_tuple = test_tuple[:i] + test_tuple[i+1:]\n            break\n    print('Even test_tuple:',test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_fnc(i)\n        else:\n            if i%2 == 0:\n                print(i)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sA = b*s\n    return sA\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (1/2)*(b**2)*s\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s*1/2\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(s**2*(b*0.5))\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = b*s*(1/2)\n    return surfaceArea\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (1/2)*(b**2)*s\n    return area \n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s):\n        s_area = b*b*s\n        print(\"The surface area of the square pyramid with a base of %r and a height of %r is %r\" % (b,s,s_area))\n        return s_area\n    return surface_Area(b,s)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b*s\n    return s*s\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa=(b*s)*(1/2)\n    return sa"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return \"Empty\"\n    else:\n        return \"Not Empty\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if bool(dict1) == True:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n    \ndef my_sorted(dict1):\n    '''\n    Write a function that sorts a dictionary by value\n    '''\n    list1 = list(dict1.items())\n    list2 = sorted(list1, key = lambda x: x[1], reverse=True)\n    return list2\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"dictionary is not empty\")\n    else:\n        print(\"dictionary is empty\")\n    return\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"No empty dictionaries\")\n    else:\n        print(\"Dictionary is empty\")\nmy_dict({})\ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if list1:\n        print(\"No empty lists\")\n    else:\n        print(\"List is empty\")\nmy_list([])\ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if set1:\n        print(\"No empty sets\")\n    else:\n        print(\"Set is empty\")\nmy_set(set())\ndef my_string(string):\n    '''\n    Write a function to check if a string is empty\n    '''\n    if string:\n        print(\"No empty strings\")\n    else:\n        print(\"String is empty\")\nmy_string(\" \")\ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if tuple1:\n        print(\"No empty tuples\")\n    else:\n        print(\"Tuple is empty\")\nmy_tuple(())\ndef my_range(range1):\n    '''\n    Write a function to check if a range is empty\n    '''\n    if range1:\n        print(\"No empty ranges\")\n    else:\n        print(\"Range is empty\")\nmy_range(range(1))\ndef my_bytes(bytes1):\n    '''\n    Write a function to check if a bytes object is empty\n    '''\n    if bytes1:\n        print(\"No empty bytes objects\")\n    else:\n        print(\"Bytes object is empty\")\nmy_bytes(b'')\ndef my_memoryview(memoryview1):\n    '''\n    Write a function to check if a memoryview object is empty\n    '''\n    if memoryview1:\n        print(\"No empty memoryview objects\")\n    else:\n        print(\"Memoryview object is empty\")\nmy_memoryview(memoryview(bytes()))\ndef my_generator(generator1):\n    '''\n    Write a function to check if a generator object is empty\n    '''\n    if generator1:\n        print(\"No empty generator objects\")\n    else:\n        print(\"Generator object is empty\")\nmy_generator(generator(bytes()))\ndef my_zip(zip1):\n    '''\n    Write a function to check if a zip object is empty\n    '''\n    if zip1:\n        print(\"No empty zip objects\")\n    else:\n        print(\"Zip object is empty\")\nmy_zip(zip((1,2),(3,4)))\ndef my_enumerate(enumerate1):\n    '''\n    Write a function to check if a enumerate object is empty\n    '''\n    if enumerate1:\n        print(\"No empty enumerate objects\")\n    else:\n        print(\"Enumerate object is empty\")\nmy_enumerate(enumerate((1,2,3)))\ndef my_map(map1):\n    '''\n    Write a function to check if a map object is empty\n    '''\n    if map1:\n        print(\"No empty map objects\")\n    else:\n        print(\"Map object is empty\")\nmy_map(map(lambda x: x ** 2, range(10)))\ndef my_filter(filter1):\n    '''\n    Write a function to check if a filter object is empty\n    '''\n    if filter1:\n        print(\"No empty filter objects\")\n    else:\n        print(\"Filter object is empty\")\nmy_filter(filter(lambda x: x % 2, range(10)))\ndef my_sorted(sorted1):\n    '''\n    Write a function to check if a sorted object is empty\n    '''\n    if sorted1:\n        print(\"No empty sorted objects\")\n    else:\n        print(\"Sorted object is empty\")\nmy_sorted([])\ndef my_reversed(reversed1):\n    '''\n    Write a function to check if a reversed object is empty\n    '''\n    if reversed1:\n        print(\"No empty reversed objects\")\n    else:\n        print(\"Reversed object is empty\")\nmy_reversed([])\ndef my_ascii(ascii1):\n    '''\n    Write a function to check if a ascii object is empty\n    '''\n    if ascii1:\n        print(\"No empty ascii objects\")\n    else:\n        print(\"Ascii object is empty\")\nmy_ascii(ascii(b''))\ndef my_bytes_array(bytes_array1):\n    '''\n    Write a function to check if a bytes array object is empty\n    '''\n    if bytes_array1:\n        print(\"No empty bytes array objects\")\n    else:\n        print(\"Bytes array object is empty\")\nmy_bytes_array(bytes_array())\ndef my_memoryview_array(memoryview_array1):\n    '''\n    Write a function to check if a memoryview array object is empty\n    '''\n    if memoryview_array1:\n        print(\"No empty memoryview array objects\")\n    else:\n        print(\"Memoryview array object is empty\")\nmy_memoryview_array(memoryview_array(b''))\ndef my_array(array1):\n    '''\n    Write a function to check if a array object is empty\n    '''\n    if array1:\n        print(\"No empty arrays\")\n    else:\n        print(\"Array is empty\")\nmy_array([])\ndef my_set_array(set_array1):\n    '''\n    Write a function to check if a set array object is empty\n    '''\n    if set_array1:\n        print(\"No empty set array objects\")\n    else:\n        print(\"Set array object is empty\")\nmy_set_array(set_array())\ndef my_frozenset_array(frozenset_array1):\n    '''\n    Write a function to check if a frozenset array object is empty\n    '''\n    if frozenset_array1:\n        print(\"No empty frozenset array objects\")\n    else:\n        print(\"Frozenset array object is empty\")\nmy_frozenset_array(frozenset_array())\ndef my_deque_array(deque_array1):\n    '''\n    Write a function to check if a deque array object is empty\n    '''\n    if deque_array1:\n        print(\"No empty deque array objects\")\n    else:\n        print(\"Deque array object is empty\")\nmy_deque_array(deque_array())\ndef my_counter(counter1):\n    '''\n    Write a function to check if a counter object is empty\n    '''\n    if counter1:\n        print(\"No empty counters\")\n    else:\n        print(\"Counter is empty\")\nmy_counter(Counter())\ndef my_namedtuple(namedtuple1):\n    '''\n    Write a function to check if a namedtuple object is empty\n    '''\n    if namedtuple1:\n        print(\"No empty namedtuple objects\")\n    else:\n        print(\"Namedtuple object is empty\")\nmy_namedtuple(collections.namedtuple('Point', 'x y')(1,2))\ndef my_ordereddict(ordereddict1):\n    '''\n    Write a function to check if an ordereddict object is empty\n    '''\n    if ordereddict1:\n        print(\"No empty ordereddict objects\")\n    else:\n        print(\"Ordereddict object is empty\")\nmy_ordereddict(OrderedDict((('a',1),('b',2))))\ndef my_defaultdict(defaultdict1):\n    '''\n    Write a function to check if a defaultdict object is empty\n    '''\n    if defaultdict1:\n        print(\"No empty defaultdict objects\")\n    else:\n        print(\"Defaultdict object is empty\")\nmy_defaultdict(defaultdict(int))\ndef my_chainmap(chainmap1):\n    '''\n    Write a function to check if a chainmap object is empty\n    '''\n    if chainmap1:\n        print(\"No empty chainmap objects\")\n    else:\n        print(\"Chainmap object is empty\")\nmy_chainmap(collections.ChainMap({'a':1}, {'b':2}))\ndef my_namedtuple_array(namedtuple_array1):\n    '''\n    Writ"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Empty')\n    else:\n        print('Not empty')\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    if num <= 1:\n        return 1\n    #dp[i] is number of ways to get i.\n    dp = [0]*(num+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, num+1):\n        dp[i] = 0\n        for j in range(i):\n            dp[i] += dp[j]*dp[i-j-1]\n    return dp[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    if n==0:\n        return 1\n    else:\n        return sum([catalan_number(i) * catalan_number(num-1-i) for i in range(n)])\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # initialize a dp list\n    dp = [0] * (num + 1)\n    dp[0] = dp[1] = 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #Catalan numbers are a sequence of natural numbers\n    #expressible as the sum of two binomial coefficients\n    #in a particular base.\n    def binomial_coefficient(n,k):\n        #binomial coefficient is n over k\n        if k==0 or k==n:\n            return 1\n        else:\n            return binomial_coefficient(n-1,k-1) + binomial_coefficient(n-1,k)\n    if num==0:\n        return 1\n    else:\n        return binomial_coefficient(2*num,num) // (num+1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError('catalan_number can only take nonnegative numbers')\n    elif num == 0:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        prev = catalan_number(num-1)\n        current = (num*(2*num - 1)) / 2\n        return prev*current\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    return int(catalan_number(num-1) * (4*num - 2*num*(num+1)) / (1*num + 2*(num+1)))\n    \n    \ndef test_catalan_number():\n    assert catalan_number(0) == 1\n    assert catalan_number(1) == 1\n    assert catalan_number(2) == 2\n    assert catalan_number(3) == 5\n    assert catalan_number(4) == 14\n    \n    \nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) == 1:\n        print('Usage:\\n\\tpython3 catalan.py [number]')\n    else:\n        try:\n            num = int(sys.argv[1])\n            print(catalan_number(num))\n        except ValueError:\n            print('Argument must be an integer')"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    C = [0] * (num + 1)\n    C[0] = 1\n    C[1] = 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError('Value must be positive')\n    \n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return num*catalan_number(num-1)//(num+1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if(num==0):\n        return 1\n    c=1\n    for i in range(num):\n        c=c*(4*i+2)/(i+2)\n    return int(c)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\w+ly'\n    result = re.search(pattern,text)\n    if result:\n        return result.group()\n    else:\n        return False\n    # return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # text = 'It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way \u2013 in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.\n    print(f'Text:\\n {text}')\n    # pattern = re.compile('ly$')\n    # pattern = re.compile('ly\\s')\n    pattern = re.compile('[-]*ly')\n    matches = pattern.finditer(text)\n    matches = [match.span() for match in matches]\n    if matches:\n        for match in matches:\n            print(f\"Position: {match[0]}\")\n    else:\n        print('No matches')\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'ly')\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # get all the possible adverbs ending with 'ly' and its positions in the string\n    adverbs = re.findall(r'\\w+ly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\w+ly\\b', text)]\n    # print(adverbs)\n    # print(positions)\n    return [adverbs, positions]\n    \n    # Get all the adverbs ending with ly.\n    # Find the positions of all adverbs ending with ly.\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    print('\\n', '-' * 80)\n    print('\\n', \"Task 1.1: Find the first adverb ending with ly and its positions in a given string\")\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly[^\\s]*'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = []\n    if len(text.split(' ')) == 1:\n        return pos\n    else:\n        words = text.split(' ')\n        for i, word in enumerate(words):\n            if re.search(r'\\w*ly$', word):\n                pos.append(i)\n    return pos\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #re.compile(r'^([a-z]+)ly$', re.IGNORECASE)\n    list1 = re.compile(r'[a-z]{1,}ly$',re.IGNORECASE).findall(text)\n    #print(list1)\n    if list1:\n        print(\"First adverb ending with ly is: \",list1[0])\n        print(\"The position of the first adverb ending with ly is: \", text.find(list1[0]))\n    else:\n        print(\"No adverb ending with ly found\")\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for m in re.finditer(r'ly(?=[\\s\\.,;])', text):\n        result.append(m.start())\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    results = []\n    #pattern = re.compile(\"^.*(ly$)\")\n    pattern = re.compile(\"^.*ly$\")\n    for match in pattern.finditer(text):\n        results.append(match.span())\n    return results\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n > len(items):\n        return items\n    elif n == 0:\n        return []\n    else:\n        return heapq.nlargest(n,items,key=lambda x: x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    most_expensive = heapq.nlargest(n,items,key=items.get)\n    return most_expensive\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items, key=lambda i:i[1],reverse=True)\n    return [items[i][0] for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key = lambda x: x[1])\n    return items[-n:]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_list = []\n    for i in items:\n        items_list.append([i[1],i[0]])\n    top_n = heapq.nlargest(n, items_list, key=lambda x: x[0])\n    return [x[1] for x in top_n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n > len(items):\n        print('Invalid Input')\n        return\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Get a list of tuples with the item and its price\n    prices = [tuple([item, items[item]]) for item in items]\n    # Sort the list by price (item) in ascending order (reverse=False)\n    prices.sort(key=lambda tup: tup[1], reverse=False)\n    # Print out the n most expensive items\n    print(\"{} most expensive items:\".format(n))\n    for i in range(n):\n        print(prices[i][0], prices[i][1])\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return [heapq.heappop(items) for _ in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,(-1*item[1],item[0]))\n        elif -1*item[1] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(-1*item[1],item[0]))\n    return [t[1] for t in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n == 0:\n        return []\n    if n > len(items):\n        return items\n    pq = []\n    for item in items:\n        if len(pq) < n:\n            heapq.heappush(pq,item)\n        elif pq[0][0] < item[0]:\n            heapq.heappop(pq)\n            heapq.heappush(pq,item)\n    return pq\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    return a+b\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = l[0:n]\n    x2 = l[n:]\n    print(x)\n    print(x2)\n    return\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l.copy()\n    if len(arr) <= n:\n        return l\n    else:\n        print(arr[:n], arr[n:])\n        return arr[:n] + arr[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    r = l[:n]\n    l[:n] = []\n    l.extend(r)\n    return l\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    # return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    print(tuplex)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    print(f'list: {listx} \\ntuple: {tuplex}')\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #your code here\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_to_tuple_of_lists(listx):\n    '''\n    Write a function to convert a list of lists to a tuple of tuples.\n    '''\n    return tuple(tuple(x) for x in listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    num = nums\n    min_num = min(num)\n    max_num = max(num)\n    result = max_num - min_num\n    print(\"The difference between maximum and minimum is {}\".format(result))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest_num = nums[0]\n    smallest_num = nums[0]\n    for i in range(0,len(nums)):\n        if nums[i] > largest_num:\n            largest_num = nums[i]\n        if nums[i] < smallest_num:\n            smallest_num = nums[i]\n    return largest_num - smallest_num\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    result = max(nums) - min(nums)\n    return result\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    small = 0\n    big = 0\n    for i in nums:\n        if i > big:\n            big = i\n        elif i < small:\n            small = i\n    return big - small\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \nprint(big_diff([-1,3,7]))\nprint(big_diff([0,4,1,2]))\nprint(big_diff([-10,-20,-30,-40]))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return(nums[len(nums)-1]-nums[0])\nprint(big_diff([7,9,5,4,12,3,1,20,19]))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Your code here\n    return [i for i in range(a, b+1) if i**0.5 == int(i**0.5)]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 1:\n        return 1\n    l = 1\n    r = b + 1\n    while l < r:\n        mid = (l + r) // 2\n        if mid * mid <= b:\n            if mid * mid < a:\n                l = mid + 1\n            else:\n                return mid\n        else:\n            r = mid - 1\n    return l - 1\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if int(sqrt(i))**2 == i:\n            perfect_squares.append(i)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    l = []\n    for i in range(a, b+1):\n        j = int(i**0.5)\n        if j**2 == i:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    l = int(b**0.5)\n    r = int(a**0.5)\n    if b-a < 0:\n        return None\n    return [i**2 for i in range(l, r+1)]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    for x in range(a, b+1):\n        res.append(x*x)\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # We will loop through the squares, starting with the lowest number.\n    # We will go up until the square of the lower number is larger than the higher number.\n    # The squares between the two numbers will be the perfect squares between the two numbers.\n    square_lower = a ** 2\n    square_higher = b ** 2\n    # First, we will check if the first number is larger than the second number.\n    if a > b:\n        print(\"A is greater than B\")\n    # If the first number is not greater than the second number, then we will check if the square of the first number is larger than the second number.\n    elif square_lower < square_higher:\n        print(\"There are no perfect squares between the two numbers.\")\n    # If the square of the first number is less than the second number, then we will check if the square of the second number is less than the first number.\n    elif square_higher < square_lower:\n        print(\"There are no perfect squares between the two numbers.\")\n    # If the first number is equal to the second number, then we will check if the square of the first number is equal to the second number.\n    elif square_lower == square_higher:\n        print(\"The square of the first number is equal to the second number.\")\n    # If the first number is equal to the second number, then we will check if the square of the first number is less than the second number.\n    elif square_lower < square_higher:\n        print(\"There are no perfect squares between the two numbers.\")\n    # If the first number is equal to the second number, then we will check if the square of the second number is greater than the first number.\n    elif square_lower > square_higher:\n        print(\"There are no perfect squares between the two numbers.\")\n    # Finally, if the first number is less than the second number, then we will loop through the squares between the first number and the second number.\n    while square_lower < square_higher:\n        print(square_lower)\n        square_lower += 1\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(min(a,b), max(a,b)+1) if i**2 >= a and i**2 <= b]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    start = int(a**(1/2))\n    end = int(b**(1/2))\n    ans = []\n    for i in range(start, end+1):\n        for j in range(i, end+1):\n            if i*i == j*j and i>=a and j>=b:\n                ans.append([i, j])\n    return ans\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x.imag == 0:\n        if x.real > 0:\n            return [x.real,y]\n        elif x.real < 0:\n            return [x.real,y]\n        elif x.real == 0:\n            return [x.real,y]\n    elif x.real!= 0:\n        angle = cmath.polar(x)[1]\n        return [x.real*cmath.cos(angle),x.real*cmath.sin(angle)]\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = int(x)\n    y = int(y)\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.atan(y/x)\n    \n    return r, theta\n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = int(x)\n    y = int(y)\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.atan(y/x)\n    \n    return r, theta\n    \ndef polar_cart(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    \n    return x,y\n    \ndef cart_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.atan(y/x)\n    \n    return r, theta\n    \ndef frac2dec(x):\n    '''\n    Write a function to convert fraction to decimal.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    x = int(x)\n    return x\n    \ndef dec2frac(x):\n    '''\n    Write a function to convert decimal to fraction.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    x = float(x)\n    return x\n    \ndef frac_dec_cart(x,y):\n    '''\n    Write a function to convert fraction to decimal.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = int(x)\n    y = int(y)\n    xy = x*y\n    return xy\n    \ndef dec_frac_cart(x,y):\n    '''\n    Write a function to convert decimal to fraction.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x/y\n    return xy\n    \ndef frac_cart_dec(x,y):\n    '''\n    Write a function to convert fraction to decimal.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = int(x)\n    y = int(y)\n    xy = x/y\n    return xy\n    \ndef cart_dec_frac(x,y):\n    '''\n    Write a function to convert decimal to fraction.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x*y\n    return xy\n    \ndef cart_frac_dec(x,y):\n    '''\n    Write a function to convert fraction to decimal.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x/y\n    return xy\n    \ndef cart_dec_frac_polar(r,theta):\n    '''\n    Write a function to convert decimal to fraction.\n    '''\n    x = int(r)\n    y = int(theta)\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x*y\n    return xy\n    \ndef dec_frac_cart_polar(r,theta):\n    '''\n    Write a function to convert decimal to fraction.\n    '''\n    x = int(r)\n    y = int(theta)\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x/y\n    return xy\n    \ndef cart_polar_frac(r,theta):\n    '''\n    Write a function to convert fraction to decimal.\n    '''\n    x = int(r)\n    y = int(theta)\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x/y\n    return xy\n    \ndef polar_frac_cart(r,theta):\n    '''\n    Write a function to convert fraction to decimal.\n    '''\n    x = int(r)\n    y = int(theta)\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x*y\n    return xy\n    \ndef add_frac(x,y):\n    '''\n    Write a function to add fraction to fraction.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x+y\n    return xy\n    \ndef sub_frac(x,y):\n    '''\n    Write a function to subtract fraction to fraction.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x-y\n    return xy\n    \ndef mul_frac(x,y):\n    '''\n    Write a function to multiply fraction to fraction.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x*y\n    return xy\n    \ndef div_frac(x,y):\n    '''\n    Write a function to divide fraction to fraction.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x/y\n    return xy\n    \ndef mul_dec(x,y):\n    '''\n    Write a function to multiply decimal to decimal.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x*y\n    return xy\n    \ndef div_dec(x,y):\n    '''\n    Write a function to divide decimal to decimal.\n    '''\n    x = str(x)\n    x = x.replace('/','')\n    y = str(y)\n    y = y.replace('/','')\n    x = float(x)\n    y = float(y)\n    xy = x/y\n    return xy\n    \ndef add_dec(x,y):\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = math.sqrt((x**2)+(y**2))\n    ang = math.atan2(y,x)\n    return (r, ang)\n    \nprint(polar_rect(2, 3))\n    "
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x\n    theta=y\n    r_new=complex(r,0)\n    theta_new=complex(0,theta)\n    x_new=r_new*cmath.exp(theta_new)\n    x_new=abs(x_new)\n    y_new=theta_new\n    print('polar to rectangular coordinates')\n    print(f\"r: {r_new}, theta: {theta_new}\")\n    print(f\"x: {x_new}, y: {y_new}\")\ndef rectangular_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=complex(x)\n    y=complex(y)\n    r_new=x\n    theta_new=y\n    r=r_new.real\n    theta=theta_new.imag\n    print('rectangular to polar coordinates')\n    print(f\"r: {r}, theta: {theta}\")\ndef z_func(x,y):\n    '''\n    Write a function to evaluate the z-function for complex numbers.\n    '''\n    z=complex(x,y)\n    z_new=z.conjugate()\n    z_new=z_new/z\n    print('z-function')\n    print(f\"z: {z}, z^-1: {z_new}\")\ndef z_func_inverse(x,y):\n    '''\n    Write a function to evaluate the inverse of the z-function for complex numbers.\n    '''\n    z=complex(x,y)\n    z_new=z.conjugate()\n    z_new=z_new/z\n    print('inverse of z-function')\n    print(f\"z: {z}, z^-1: {z_new}\")\ndef sum_complex(x,y):\n    '''\n    Write a function to sum two complex numbers.\n    '''\n    z=complex(x,y)\n    z_new=z+z\n    print('sum of two complex numbers')\n    print(f\"z: {z}, z+z: {z_new}\")\ndef sub_complex(x,y):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    z=complex(x,y)\n    z_new=z-z\n    print('subtracting two complex numbers')\n    print(f\"z: {z}, z-z: {z_new}\")\ndef mul_complex(x,y):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    z=complex(x,y)\n    z_new=z*z\n    print('multiplying two complex numbers')\n    print(f\"z: {z}, z*z: {z_new}\")\ndef div_complex(x,y):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    z=complex(x,y)\n    z_new=z/z\n    print('dividing two complex numbers')\n    print(f\"z: {z}, z/z: {z_new}\")\ndef pythag_triple(x,y):\n    '''\n    Write a function to calculate the hypotenuse of a right triangle.\n    '''\n    x=complex(x)\n    y=complex(y)\n    z=x**2+y**2\n    z=z**0.5\n    print('pythagorean triple')\n    print(f\"x: {x}, y: {y}, z: {z}\")\ndef exp_complex(x,y):\n    '''\n    Write a function to compute the exponent of a complex number.\n    '''\n    x=complex(x)\n    y=complex(y)\n    z=x**y\n    print('exponent')\n    print(f\"z: {z}\")\ndef add_imag(x,y):\n    '''\n    Write a function to add two imaginary numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    z=x+y\n    print('adding two imaginary numbers')\n    print(f\"z: {z}\")\ndef sub_imag(x,y):\n    '''\n    Write a function to subtract two imaginary numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    z=x-y\n    print('subtracting two imaginary numbers')\n    print(f\"z: {z}\")\ndef mul_imag(x,y):\n    '''\n    Write a function to multiply two imaginary numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    z=x*y\n    print('multiplying two imaginary numbers')\n    print(f\"z: {z}\")\ndef div_imag(x,y):\n    '''\n    Write a function to divide two imaginary numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    z=x/y\n    print('dividing two imaginary numbers')\n    print(f\"z: {z}\")\ndef cmp_real(x,y):\n    '''\n    Write a function to compare the real parts of two complex numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    if x==y:\n        print('equal')\n    else:\n        print('not equal')\ndef cmp_imag(x,y):\n    '''\n    Write a function to compare the imaginary parts of two complex numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    if x==y:\n        print('equal')\n    else:\n        print('not equal')\ndef abs_imag(x,y):\n    '''\n    Write a function to return the absolute value of an imaginary number.\n    '''\n    x=complex(x)\n    y=complex(y)\n    z=complex(x,y)\n    z_new=z.conjugate()\n    z_new=z_new/z\n    print('computing the absolute value of an imaginary number')\n    print(f\"z: {z}, z^-1: {z_new}\")\ndef cmp_mag(x,y):\n    '''\n    Write a function to compare the magnitudes of two complex numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    if x==y:\n        print('equal')\n    else:\n        print('not equal')\ndef polar_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x\n    theta=y\n    r_new=complex(r,0)\n    theta_new=complex(0,theta)\n    x_new=r_new*cmath.exp(theta_new)\n    x_new=abs(x_new)\n    y_new=theta_new\n    print('polar to rectangular coordinates')\n    print(f\"r: {r_new}, theta: {theta_new}\")\n    print(f\"x: {x_new}, y: {y_new}\")\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=complex(x)\n    y=complex(y)\n    r_new=x\n    theta_new=y\n    r=r_new.real\n    theta=theta_new.imag\n    print('rectangular to polar coordinates')\n    print(f\"r: {r}, theta: {theta}\")\ndef quadrant(x,y):\n    '''\n    Write a function to find the quadrant of a complex number.\n    '''\n    x=complex(x)\n    y=complex(y)\n    if x.imag>=0 and y.imag>=0:\n        print('1st quadrant')\n    elif x.imag<0 and y.imag<0:\n        print('4th quadrant')\n    elif x.imag<0 and y.imag>=0:\n        print('3rd quadrant')\n    elif x.imag>=0 and y.imag<0:\n        print('2nd quadran"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points (x1,y1) and (x2,y2) in the Cartesian plane.\n    '''\n    x = x2 - x1\n    y = y2 - y1\n    dist = (x**2+y**2)**0.5\n    return dist\ndef polar_distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points (x1,y1) and (x2,y2) in the Cartesian plane.\n    '''\n    x = x2 - x1\n    y = y2 - y1\n    dist = (x**2+y**2)**0.5\n    return dist\ndef generate_key(p,q,e):\n    '''\n    Write a function to generate public and private key from the given RSA parameters (p,q,e).\n    '''\n    phi = (p-1)*(q-1)\n    n = p*q\n    while True:\n        d = random.randint(1,phi)\n        if cmath.gcd(d,phi) == 1:\n            break\n    e = e\n    d = d\n    return n,e,d\ndef encrypt(public_key,plain_text):\n    '''\n    Write a function to encrypt the message using public key.\n    '''\n    plain_text = plain_text\n    cipher = pow(plain_text,public_key[1],public_key[0])\n    return cipher\ndef decrypt(private_key,cipher):\n    '''\n    Write a function to decrypt the message using private key.\n    '''\n    cipher = cipher\n    plain_text = pow(cipher,private_key[1],private_key[0])\n    return plain_text\ndef CRT(modulus,d,e):\n    '''\n    Write a function to solve the CRT for modular exponentiation.\n    '''\n    modulus = modulus\n    d = d\n    e = e\n    return pow(modulus,d*e,(modulus**2)*e)\ndef generate_pqe():\n    '''\n    Write a function to generate a random RSA key.\n    '''\n    p = 0\n    q = 0\n    while p == q:\n        p = random.randint(1000,3000)\n        q = random.randint(1000,3000)\n    e = random.randint(100,500)\n    return p,q,e\ndef enc_dec_by_CRT(p,q,e,plain_text):\n    '''\n    Write a function to encrypt and decrypt the plain_text using RSA encryption.\n    '''\n    plain_text = plain_text\n    n = p*q\n    cipher = CRT(n,e,plain_text)\n    return cipher\ndef multiplicative_inverse(x,y):\n    '''\n    Write a function to calculate the multiplicative inverse of two numbers.\n    '''\n    x = x\n    y = y\n    a = 1\n    b = 1\n    if x < 0:\n        x = -x\n        a = -1\n    if y < 0:\n        y = -y\n        b = -1\n    while x!= 0:\n        temp = x\n        x = y%x\n        y = temp\n    z = y\n    return z\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    n = n\n    if n == 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\ndef generate_prime():\n    '''\n    Write a function to generate a random prime number.\n    '''\n    n = 0\n    while True:\n        n = random.randint(1000,5000)\n        if is_prime(n):\n            return n\ndef euclidean_algorithm(a,b):\n    '''\n    Write a function to find the GCD of two numbers using the Euclidean algorithm.\n    '''\n    a = a\n    b = b\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return euclidean_algorithm(a-b,b)\n    if b > a:\n        return euclidean_algorithm(a,b-a)\ndef extended_euclidean_algorithm(a,b):\n    '''\n    Write a function to find the GCD of two numbers using the Extended Euclidean algorithm.\n    '''\n    a = a\n    b = b\n    if a == 0:\n        return (b,0,1)\n    if b == 0:\n        return (a,1,0)\n    if a == b:\n        return (a,1,0)\n    if a > b:\n        (d,x,y) = extended_euclidean_algorithm(a-b,b)\n        return (d,y,x-y*(a-b))\n    if b > a:\n        (d,x,y) = extended_euclidean_algorithm(a,b-a)\n        return (d,x-y*(b-a),y)\ndef generate_pq():\n    '''\n    Write a function to generate a random RSA key.\n    '''\n    p = generate_prime()\n    q = generate_prime()\n    while p == q:\n        p = generate_prime()\n        q = generate_prime()\n    return p,q\ndef euclidean_algorithm(a,b):\n    '''\n    Write a function to find the GCD of two numbers using the Euclidean algorithm.\n    '''\n    a = a\n    b = b\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return euclidean_algorithm(a-b,b)\n    if b > a:\n        return euclidean_algorithm(a,b-a)\ndef extended_euclidean_algorithm(a,b):\n    '''\n    Write a function to find the GCD of two numbers using the Extended Euclidean algorithm.\n    '''\n    a = a\n    b = b\n    if a == 0:\n        return (b,0,1)\n    if b == 0:\n        return (a,1,0)\n    if a == b:\n        return (a,1,0)\n    if a > b:\n        (d,x,y) = extended_euclidean_algorithm(a-b,b)\n        return (d,y,x-y*(a-b))\n    if b > a:\n        (d,x,y) = extended_euclidean_algorithm(a,b-a)\n        return (d,x-y*(b-a),y)\ndef generate_pq():\n    '''\n    Write a function to generate a random RSA key.\n    '''\n    p = generate_prime()\n    q = generate_prime()\n    while p == q:\n        p = generate_prime()\n        q = generate_prime()\n    return p,q\ndef euclidean_algorithm(a,b):\n    '''\n    Write a function to find the GCD of two numbers using the Euclidean algorithm.\n    '''\n    a = a\n    b = b\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return euclidean_algorithm"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=cmath.rect(x,y)\n    return a.real, a.imag\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (int(x+y*1j.conjugate()),int(x-y*1j.conjugate()))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    print('rectangular coordinates are {}'.format(r))\n    return r\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z=complex(x,y)\n    z2=complex(z.real,z.imag)\n    z3=z2*z2\n    z4=z3.real\n    z5=z4+z3\n    z6=z5**0.5\n    z7=z6.real\n    z8=z7+z6\n    z9=z8.imag\n    z10=z9+z8\n    z11=z10+z10\n    z12=z11.real\n    z13=z12+z11\n    z14=z13+z13\n    z15=z14-z14\n    z16=z15+z14\n    z17=z16-z16\n    z18=z17-z17\n    z19=z18+z17\n    z20=z19-z17\n    z21=z20-z18\n    z22=z21+z18\n    z23=z22-z18\n    z24=z23+z18\n    z25=z24-z18\n    z26=z25+z18\n    z27=z26-z18\n    z28=z27+z18\n    z29=z28-z18\n    z30=z29+z18\n    z31=z30-z18\n    z32=z31+z18\n    z33=z32-z18\n    z34=z33+z18\n    z35=z34-z18\n    z36=z35+z18\n    z37=z36-z18\n    z38=z37+z18\n    z39=z38-z18\n    z40=z39+z18\n    z41=z40-z18\n    z42=z41+z18\n    z43=z42-z18\n    z44=z43+z18\n    z45=z44-z18\n    z46=z45+z18\n    z47=z46-z18\n    z48=z47+z18\n    z49=z48-z18\n    z50=z49+z18\n    z51=z50-z18\n    z52=z51+z18\n    z53=z52-z18\n    z54=z53+z18\n    z55=z54-z18\n    z56=z55+z18\n    z57=z56-z18\n    z58=z57+z18\n    z59=z58-z18\n    z60=z59+z18\n    z61=z60-z18\n    z62=z61+z18\n    z63=z62-z18\n    z64=z63+z18\n    z65=z64-z18\n    z66=z65+z18\n    z67=z66-z18\n    z68=z67+z18\n    z69=z68-z18\n    z70=z69+z18\n    z71=z70-z18\n    z72=z71+z18\n    z73=z72-z18\n    z74=z73+z18\n    z75=z74-z18\n    z76=z75+z18\n    z77=z76-z18\n    z78=z77+z18\n    z79=z78-z18\n    z80=z79+z18\n    z81=z80-z18\n    z82=z81+z18\n    z83=z82-z18\n    z84=z83+z18\n    z85=z84-z18\n    z86=z85+z18\n    z87=z86-z18\n    z88=z87+z18\n    z89=z88-z18\n    z90=z89+z18\n    z91=z90-z18\n    z92=z91+z18\n    z93=z92-z18\n    z94=z93+z18\n    z95=z94-z18\n    z96=z95+z18\n    z97=z96-z18\n    z98=z97+z18\n    z99=z98-z18\n    z100=z99+z18\n    z101=z100-z18\n    z102=z101+z18\n    z103=z102-z18\n    z104=z103+z18\n    z105=z104-z18\n    z106=z105+z18\n    z107=z106-z18\n    z108=z107+z18\n    z109=z108-z18\n    z110=z109+z18\n    z111=z110-z18\n    z112=z111+z18\n    z113=z112-z18\n    z114=z113+z18\n    z115=z114-z18\n    z116=z115+z18\n    z117=z116-z18\n    z118=z117+z18\n    z119=z118-z18\n    z120=z119+z18\n    z121=z120-z18\n    z122=z121+z18\n    z123=z122-z18\n    z124=z123+z18\n    z125=z124-z18\n    z126=z125+z18\n    z127=z126-z18\n    z128=z127+z18\n    z129=z128-z18\n    z130=z129+z18\n    z131=z130-z18\n    z132=z131+z18\n    z133=z132-z18\n    z134=z133+z18\n    z135=z134-z18\n    z136=z135+z18\n    z137=z136-z18\n    z138=z137+z18\n    z139=z138-z18\n    z140=z139+z18\n    z141=z140-z18\n    z142=z141+z18\n    z143=z142-z18\n    z144=z143+z18\n    z145=z144-z18\n    z146=z145+z18\n    z147=z146-z18\n    z148=z147+z18\n    z149=z148-z18\n    z150=z149+z18\n    z151=z150-z18\n    z152=z151+z18\n    z153=z152-z18\n    z154=z153+z18\n    z155=z154-z18\n    z156=z155+z18\n    z157=z156-z18\n    z158=z157+z18\n    z159=z158-z18\n    z160=z159+z18\n    z161=z160-z18\n    z162=z161+z18\n    z163=z162-z18\n    z164=z163+z18\n    z165=z164-z18\n    z166=z165+z18\n    z167=z166-z18\n    z168=z167+z18\n    z169=z168-z18\n    z170=z169+z18\n    z171=z170-z18\n    z172=z171+z18\n    z173=z172-z18\n    z174=z173+z18\n    z175=z174-z18\n    z176=z175+z18\n    z177=z176-z18\n    z178=z177+z18\n    z179=z178-z18\n    z180=z179+z18\n    z181=z180-z18\n    z182=z181+z18\n    z183=z182-z18\n    z184=z183+z18\n    z185=z184-z18\n    z186=z185+z18\n    z187=z186-z18\n    z188=z187+z18\n    z189=z188-z18\n    z190=z189+z18\n    z191=z190-z18\n    z192=z191+z18\n    z193=z192-z18\n    z194=z193+z18\n    z195=z194-z18\n    z196=z195+z18\n    z197=z196-z18\n    z198=z197+z18\n    z199=z198-z18\n    z200=z199+z18\n    z201=z200-z18\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    print(\"New list after swapping: \", newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return\n    else:\n        newList[0],newList[len(newList)-1] = newList[len(newList)-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size-1] \n    newList[size-1] = temp \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # The nth binomial coefficient is given by C(n,k) = C(n,n-k) = (n k) / k! where k = n-k.\n    def binomialCoeff(n,k):\n        if (k==0 or k==n):\n            return 1\n        return (int)(binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k))\n    sum = 0\n    for i in range(k+1):\n        sum = sum + binomialCoeff(n,i)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in range(k+1)] for x in range(n+1)] \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coefficients = [1]*(k+1)\n    for i in range(k+1):\n        for j in range(i,k+1):\n            coefficients[j] *= (n-i)/(j-i)\n    return sum(coefficients)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base Case \n    if k == 0 or k == n: \n        return 1\n    \n    # if n is even \n    if n % 2 == 0: \n        return (binomial_Coeff(n, k) + binomial_Coeff(n // 2, k - 1)) \n    \n    # if n is odd \n    else: \n        return (binomial_Coeff(n, k) + binomial_Coeff(n // 2, k - 1)) \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base case \n    if n == 0:\n        return 1\n    if k == 0:\n        return 1\n    # if n < k:\n    #     return 0\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0 or n==k:\n        return 1\n    elif k==0:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k < 0: \n        return 0\n    elif k == 0 or k == n: \n        return 1\n    elif n < 0: \n        return 0\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) \n "
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    import math\n    return math.factorial(n) // math.factorial(k) // math.factorial(n-k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # function to find the sum of the product of consecutive binomial co-efficients\n    def binomial_coeff(n,k):\n        def factorial(n):\n            if n == 0:\n                return 1\n            return n*factorial(n-1)\n        def nCr(n,k):\n            numerator = factorial(n)\n            denominator = factorial(k)*factorial(n-k)\n            return numerator//denominator\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert (k<=n)\n    \n    binomialCoeff = [0] * (n+1)\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2,n+1):\n        binomialCoeff[i] = binomialCoeff[i-1] + binomialCoeff[i-2]\n        if(k == 0 or k == i):\n            binomialCoeff[i] = binomialCoeff[i] + 1\n        else:\n            binomialCoeff[i] = binomialCoeff[i] + binomialCoeff[i-1] - binomialCoeff[i-k-1]\n            \n    return binomialCoeff[n]\n    \n    \n    \n    \n    \ndef binomialCoeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert (k<=n)\n    \n    binomialCoeff = [0] * (n+1)\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2,n+1):\n        binomialCoeff[i] = binomialCoeff[i-1] + binomialCoeff[i-2]\n        if(k == 0 or k == i):\n            binomialCoeff[i] = binomialCoeff[i] + 1\n        else:\n            binomialCoeff[i] = binomialCoeff[i] + binomialCoeff[i-1] - binomialCoeff[i-k-1]\n            \n    return binomialCoeff[n]\n    \n    \n    \n    \n    \ndef binomialCoeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert (k<=n)\n    \n    binomialCoeff = [0] * (n+1)\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2,n+1):\n        binomialCoeff[i] = binomialCoeff[i-1] + binomialCoeff[i-2]\n        if(k == 0 or k == i):\n            binomialCoeff[i] = binomialCoeff[i] + 1\n        else:\n            binomialCoeff[i] = binomialCoeff[i] + binomialCoeff[i-1] - binomialCoeff[i-k-1]\n            \n    return binomialCoeff[n]\n    \n    \n    \n    \n    \ndef binomialCoeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert (k<=n)\n    \n    binomialCoeff = [0] * (n+1)\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2,n+1):\n        binomialCoeff[i] = binomialCoeff[i-1] + binomialCoeff[i-2]\n        if(k == 0 or k == i):\n            binomialCoeff[i] = binomialCoeff[i] + 1\n        else:\n            binomialCoeff[i] = binomialCoeff[i] + binomialCoeff[i-1] - binomialCoeff[i-k-1]\n            \n    return binomialCoeff[n]\n    \n    \n    \n    \n    \ndef binomialCoeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert (k<=n)\n    \n    binomialCoeff = [0] * (n+1)\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2,n+1):\n        binomialCoeff[i] = binomialCoeff[i-1] + binomialCoeff[i-2]\n        if(k == 0 or k == i):\n            binomialCoeff[i] = binomialCoeff[i] + 1\n        else:\n            binomialCoeff[i] = binomialCoeff[i] + binomialCoeff[i-1] - binomialCoeff[i-k-1]\n            \n    return binomialCoeff[n]\n    \n    \n    \n    \n    \ndef binomialCoeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert (k<=n)\n    \n    binomialCoeff = [0] * (n+1)\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2,n+1):\n        binomialCoeff[i] = binomialCoeff[i-1] + binomialCoeff[i-2]\n        if(k == 0 or k == i):\n            binomialCoeff[i] = binomialCoeff[i] + 1\n        else:\n            binomialCoeff[i] = binomialCoeff[i] + binomialCoeff[i-1] - binomialCoeff[i-k-1]\n            \n    return binomialCoeff[n]\n    \n    \n    \n    \n    \ndef binomialCoeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert (k<=n)\n    \n    binomialCoeff = [0] * (n+1)\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2,n+1):\n        binomialCoeff[i] = binomialCoeff[i-1] + binomialCoeff[i-2]\n        if(k == 0 or k == i):\n            binomialCoeff[i] = binomialCoeff[i] + 1\n        else:\n            binomialCoeff[i] = binomialCoeff[i] + binomialCoeff[i-1] - binomialCoeff[i-k-1]\n            \n    return binomialCoeff[n]\n    \n    \n    \n    \n    \ndef binomialCoeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert (k<=n)\n    \n    binomialCoeff = [0] * (n+1)\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2,n+1):\n        binomialCoeff[i] = binomialCoeff[i-1] + binomialCoeff[i-2]\n        if(k == 0 or k == i):\n            binomialCoeff[i] = binomialCoeff[i] + 1\n        else:\n            binomialCoeff[i] = binomialCoeff[i] + binomialCoeff[i-1] - binomialCoeff[i-k-1]\n            \n    return binomialCoeff[n]\n    \n    \n    \n    \n    \ndef binomialCoeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert (k<=n)\n    \n    binomialCoeff = [0] * (n+1)\n    binomialCoeff[0] = 1\n    binomialCoeff[1] = 1\n    for i in range(2,n+1):\n        binomial"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    print(\"Given IP: {}\".format(ip))\n    ip_list = list(ip)\n    print(\"After removing leading zeroes: {}\".format(\"\".join(ip_list)))\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # 01.02.03.04 -> 01.02.03.04\n    ip = re.sub('^0+','',ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #your code here\n    ip = '{:04d}'.format(int(ip))\n    return ip\ndef change_file_name(name):\n    '''\n    Write a function to change the name of a file.\n    '''\n    #your code here\n    #name_of_the_file = file_name[:len(file_name)-4]\n    #name_of_the_file = name_of_the_file.replace(\"_\", \" \")\n    name_of_the_file = name.replace(\"_\", \" \")\n    name_of_the_file = re.sub(r'([A-Z])', r' \\1', name_of_the_file).strip()\n    return name_of_the_file\ndef multi_re_find(patterns,phrase):\n    '''\n    Write a function to match multiple regular expression in a phrase.\n    '''\n    #your code here\n    for pat in patterns:\n        print(\"Searching the phrase using the re check: {}\".format(pat))\n        print(re.findall(pat, phrase))\n        print(\"\\n\")\ndef is_valid_email(email):\n    '''\n    Write a function to check if an input string is a valid email or not.\n    '''\n    #your code here\n    email_check = re.findall(r\"^[\\w.-]+@[\\w.-]+.\\w+$\", email)\n    if email_check:\n        return True\n    else:\n        return False\ndef is_valid_url(url):\n    '''\n    Write a function to check if a string is a valid url or not.\n    '''\n    #your code here\n    url_check = re.findall(r\"^(https?://)?((www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*))?$\", url)\n    if url_check:\n        return True\n    else:\n        return False\ndef is_valid_phone(phone):\n    '''\n    Write a function to check if a string is a valid phone number or not.\n    '''\n    #your code here\n    phone_check = re.findall(r\"^\\+?1?\\d{9,15}$\", phone)\n    if phone_check:\n        return True\n    else:\n        return False\ndef is_valid_date(date):\n    '''\n    Write a function to check if a string is a valid date or not.\n    '''\n    #your code here\n    date_check = re.findall(r\"^([0-9]{1,2}\\/){2}([0-9]{1,2})\\w*$\", date)\n    if date_check:\n        return True\n    else:\n        return False\ndef is_valid_name(name):\n    '''\n    Write a function to check if a string is a valid name or not.\n    '''\n    #your code here\n    name_check = re.findall(r\"^([a-zA-Z]+)(\\s)([a-zA-Z]+)$\", name)\n    if name_check:\n        return True\n    else:\n        return False\ndef is_valid_json(jsonfile):\n    '''\n    Write a function to check if a string is a valid json file or not.\n    '''\n    #your code here\n    try:\n        with open(jsonfile, 'r') as openfile:\n            json.load(openfile)\n    except ValueError:\n        return False\n    return True\ndef is_valid_xml(xmlfile):\n    '''\n    Write a function to check if a string is a valid xml file or not.\n    '''\n    #your code here\n    try:\n        with open(xmlfile, 'r') as openfile:\n            xml.load(openfile)\n    except ValueError:\n        return False\n    return True\ndef parse_name(full_name):\n    '''\n    Write a function to parse a full name into a first name, middle name and last name.\n    '''\n    #your code here\n    name_check = re.findall(r\"^([a-zA-Z]+)(\\s)([a-zA-Z]+)$\", full_name)\n    if name_check:\n        return True\n    else:\n        return False\ndef sum_numbers(numbers):\n    '''\n    Write a function to sum all numbers in a list.\n    '''\n    #your code here\n    numbers_sum = 0\n    for num in numbers:\n        numbers_sum += int(num)\n    return numbers_sum\ndef reverse_string(word):\n    '''\n    Write a function to reverse a string.\n    '''\n    #your code here\n    return word[::-1]\ndef check_pwd(pwd):\n    '''\n    Write a function to check the strength of a password.\n    '''\n    #your code here\n    length_check = re.findall(r\"\\w{8,}\", pwd)\n    upper_check = re.findall(r\"[A-Z]\", pwd)\n    lower_check = re.findall(r\"[a-z]\", pwd)\n    digit_check = re.findall(r\"[0-9]\", pwd)\n    symbol_check = re.findall(r\"[\\W]\", pwd)\n    if length_check and upper_check and lower_check and digit_check and symbol_check:\n        return True\n    else:\n        return False\ndef remove_duplicates(list_of_numbers):\n    '''\n    Write a function to remove duplicate numbers from a list.\n    '''\n    #your code here\n    for num in list_of_numbers:\n        while list_of_numbers.count(num) > 1:\n            list_of_numbers.remove(num)\n    return list_of_numbers\ndef get_word_length_list(list_of_words):\n    '''\n    Write a function to get a list of words and find the length of each word.\n    '''\n    #your code here\n    words = []\n    for word in list_of_words:\n        words.append(len(word))\n    return words\ndef remove_word(word, char):\n    '''\n    Write a function to remove all occurrences of a character from a word.\n    '''\n    #your code here\n    if char in word:\n        word = word.replace(char, '')\n    return word\ndef get_unique_list(list_of_numbers):\n    '''\n    Write a function to get a list of numbers and return only the unique values.\n    '''\n    #your code here\n    unique_list = []\n    for num in list_of_numbers:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list\ndef get_unique_list_2(list_of_words):\n    '''\n    Write a function to get a list of words and return only the unique values.\n    '''\n    #your code here\n    return list(set(list_of_words))\ndef get_string_length_list(sentence):\n    '''\n    Write a function to get a sentence and find the length of each word.\n    '''\n    #your code here\n    words = []\n    for word in sentence:\n        words.append(len(word))\n    return words\ndef get_list_from_string(sentence):\n    '''\n    Write a function to get a sentence and return a list of words.\n    '''\n    #your code here\n    words = []\n    for word in sentence:\n        words.append(word)\n    return words\ndef get_frequency_dict(list_of_numbers):\n    '''\n    Write a function to get a list of numbers and return a frequency dictionary.\n    '''\n    #your code here\n    freq = {}\n    for num in list_of_numbers:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\ndef get_frequency_dict_2(lis"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = ''\n    for i in range(len(ip_list)):\n        if ip_list[i]!= '0':\n            new_ip = new_ip + ip_list[i] + '.'\n    new_ip = new_ip[:-1]\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\.|\\s)*0', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+','',ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+','', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return \".\".join(str(int(i)) for i in ip.split(\".\"))\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"\\.0+\", \".\", ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # your code here\n    ip = re.sub('^0+', '', ip)\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) > 2:\n        # Take first even number\n        even_num = list1[0]\n        # Take first odd number\n        odd_num = list1[1]\n        print('Even Number = ', even_num)\n        print('Odd Number = ', odd_num)\n        # Calculate the difference\n        diff = odd_num - even_num\n        print('Difference of Odd Number and Even Number = ', diff)\n    else:\n        print('List has less than 3 items.')\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd=[]\n    even=[]\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return abs(even[0]-odd[0])"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_len = len(list1)\n    if list_len > 1:\n        if list1[0] % 2 == 0:\n            if list1[1] % 2 == 0:\n                print(list1[1] - list1[0])\n            else:\n                print(list1[0] - list1[1])\n        else:\n            if list1[0] % 2 == 0:\n                print(list1[0] - list1[1])\n            else:\n                print(list1[1] - list1[0])\n    else:\n        return \"Invalid\"\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list[0] - odd_list[0]\n    \ndef max_min_even_odd(list1):\n    '''\n    Write a function to find the minimum and maximum even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    print(f'Minimum even number is {min(even_list)}')\n    print(f'Maximum even number is {max(even_list)}')\n    print(f'Minimum odd number is {min(odd_list)}')\n    print(f'Maximum odd number is {max(odd_list)}')\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_nums = [num for num in list1 if num % 2 == 0]\n    odd_nums = [num for num in list1 if num % 2!= 0]\n    return even_nums[0] - odd_nums[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = []\n    odd_number = []\n    for number in list1:\n        if number % 2 == 0:\n            even_number.append(number)\n        else:\n            odd_number.append(number)\n    diff = abs(even_number[0] - odd_number[0])\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    odd_list=[]\n    even_list=[]\n    for i in list1:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n            \n    return even_list[0]-odd_list[0]\n    \n    \nprint(diff_even_odd([1,2,3,4,5]))\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = list1[0]\n    even = list1[0]\n    for i in list1[1:]:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n    return abs(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    list3 = []\n    for x in range(0, len(list1)):\n        if x % 2 == 0:\n            list2.append(list1[x])\n        else:\n            list3.append(list1[x])\n    return list2[0] - list3[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    print(len(even_list))\n    print(len(odd_list))\n    print(even_list)\n    print(odd_list)\n    print(even_list[0] - odd_list[0])\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    # Create a table to store results of subproblems \n    T = [[0 for x in range(n2 + 1)] for x in range(n1 + 1)] \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = ''.join(str1)\n    str2 = ''.join(str2)\n    str1 = str1.replace('0','')\n    str2 = str2.replace('0','')\n    str1 = str1.replace('1','')\n    str2 = str2.replace('1','')\n    count = 0\n    for i in str1:\n        if i in str2:\n            count +=1\n    return(count//2)\n    \n    \ndef min_Swaps_2(str1,str2):\n    '''\n    Write a python program to solve the above problem in Constant space complexity.\n    '''\n    str1 = ''.join(str1)\n    str2 = ''.join(str2)\n    str1 = str1.replace('0','')\n    str2 = str2.replace('0','')\n    str1 = str1.replace('1','')\n    str2 = str2.replace('1','')\n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    for i in str1:\n        if i in str2:\n            count +=1\n    return(count//2)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = \"\".join(str1.split())\n    str2 = \"\".join(str2.split())\n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    i = 0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            pass\n        else:\n            if str1[i]!= '0' and str2[i]!= '1':\n                return -1\n            else:\n                if str1[i] == '0':\n                    str1[i] = '1'\n                    str2[i] = '0'\n                    count += 1\n                else:\n                    str1[i] = '0'\n                    str2[i] = '1'\n                    count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1 == str2 :\n        return 0\n    m = len(str1)\n    n = len(str2)\n    if m!=n:\n        return -1\n    \n    s1 = str1\n    s2 = str2\n    count = 0\n    while (s1!=s2):\n        s1 = s1[1:]+s1[0]\n        s2 = s2[1:]+s2[0]\n        count +=1\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) :\n        return -1\n    str1 = '0b'+str1\n    str2 = '0b'+str2\n    str1 = bin(int(str1,2))[2:]\n    str2 = bin(int(str2,2))[2:]\n    diff = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            diff += 1\n    return diff\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m, n = len(str1), len(str2) \n    if m!= n : \n        return -1\n    swap = 0\n    for i in range(0,m): \n        if str1[i]!= str2[i] : \n            swap+=1 \n    return swap \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if m>n :\n        return -1\n    n = n-1\n    m = m-1\n    count = 0\n    for i in range(0,n+1):\n        if str1[i]!= str2[i]:\n            if str1[i] == '0':\n                if str2[i] == '1':\n                    str1 = str1[:i]+'1'+str1[i+1:]\n                    str2 = str2[:i]+'0'+str2[i+1:]\n                    count += 1\n                else:\n                    str1 = str1[:i]+'0'+str1[i+1:]\n                    str2 = str2[:i]+'0'+str2[i+1:]\n                    count += 1\n            else:\n                if str2[i] == '0':\n                    str1 = str1[:i]+'1'+str1[i+1:]\n                    str2 = str2[:i]+'1'+str2[i+1:]\n                    count += 1\n                else:\n                    str1 = str1[:i]+'0'+str1[i+1:]\n                    str2 = str2[:i]+'0'+str2[i+1:]\n                    count += 1\n    return count\n    \nstr1 = input()\nstr2 = input()\nprint(min_Swaps(str1,str2))\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return min(swap_count(str1,str2),swap_count(str2,str1))\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    '''\n    Input:  str1 = \"1010\", str2 = \"1011\"\n    Output: 2\n    We can perform the following two operations:\n    Operation 1: Swaps index 1 and 2 -> 1010\n    Operation 2: Swaps index 4 and 5 -> 1011\n    '''\n    \n    # initialize index and the count\n    index = 0\n    count = 0\n    \n    # we are performing a cyclic sort\n    # so we must first sort in the reverse order\n    while index < len(str1):\n        if str1[index]!= str2[index]:\n            # swap the element\n            temp = str1[index]\n            str1[index] = str2[index]\n            str2[index] = temp\n            # increment the count\n            count = count + 1\n        index = index + 1\n    return count\n    "
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # code here\n    if str1 == str2 : \n        return 0 \n    else :\n        x = max(len(str1),len(str2))\n        for i in range(x): \n            if str1[i]!= str2[i] : \n                str1 = str1[:i] + str2[i] + str1[i+1:] \n                str2 = str2[:i] + str1[i] + str2[i+1:] \n                break \n    return x \n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return(sys.getsizeof(tuple_list))\n    \n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for index, tuple_item in enumerate(tuple_list):\n        tuple_size=sys.getsizeof(tuple_item)\n        print(f\"{tuple_item} size in bytes : {tuple_size}\")\n        print(f\"{tuple_item} size in bytes : {sys.getsizeof(tuple_item)}\")\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(\"\\n\\n*************\\nTuple Size:\")\n    if type(tuple_list) == type([]):\n        print(len(sys.getsizeof(tuple_list)))\n    else:\n        print(sys.getsizeof(tuple_list))\n    return None\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return(sys.getsizeof(tuple_list))\ndef tuple_count(tuple_list):\n    '''\n    Write a function to count the number of occurrences of each element in the given tuple.\n    '''\n    tuple_list = (1,2,1,4,3,3,1)\n    print(\"Original tuple: \", tuple_list)\n    print(\"Number of occurrences for each element in the tuple: \", tuple_list.count(1))\n    return(tuple_list.count(1))\ndef tuple_index(tuple_list):\n    '''\n    Write a function to return the index of the given element in the tuple.\n    '''\n    tuple_list = (1,2,1,4,3,3,1)\n    print(\"Original tuple: \", tuple_list)\n    print(\"Index of the element 1: \", tuple_list.index(1))\n    return(tuple_list.index(1))\ndef tuple_slice(tuple_list):\n    '''\n    Write a function to return a tuple with every nth element from the given tuple.\n    '''\n    tuple_list = (1,2,1,4,3,3,1)\n    print(\"Original tuple: \", tuple_list)\n    print(\"Every 2nd element of the tuple: \", tuple_list[::2])\n    return(tuple_list[::2])\ndef tuple_reversed(tuple_list):\n    '''\n    Write a function to return a tuple with the given tuple in reversed order.\n    '''\n    tuple_list = (1,2,1,4,3,3,1)\n    print(\"Original tuple: \", tuple_list)\n    print(\"Reversed tuple: \", tuple_list[::-1])\n    return(tuple_list[::-1])\ndef tuple_concatenation(tuple_1, tuple_2):\n    '''\n    Write a function to return a tuple with the elements of tuple_1 followed by the elements of tuple_2 in the same order.\n    '''\n    tuple_1 = (1,2,1,4,3,3,1)\n    tuple_2 = (5,6,5,8,7,7,5)\n    print(\"Tuple 1: \", tuple_1)\n    print(\"Tuple 2: \", tuple_2)\n    print(\"Concatenation of both tuples: \", tuple_1 + tuple_2)\n    return(tuple_1 + tuple_2)\ndef tuple_multiplication(tuple_1, tuple_2):\n    '''\n    Write a function to return a tuple with each element of tuple_1 multiplied by the element of tuple_2.\n    '''\n    tuple_1 = (1,2,1,4,3,3,1)\n    tuple_2 = (5,6,5,8,7,7,5)\n    print(\"Tuple 1: \", tuple_1)\n    print(\"Tuple 2: \", tuple_2)\n    print(\"Multiplication of both tuples: \", tuple_1 * tuple_2)\n    return(tuple_1 * tuple_2)\ndef tuple_list_to_tuple(tuple_list):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = [1,2,1,4,3,3,1]\n    print(\"List: \", tuple_list)\n    print(\"Converted tuple: \", tuple(tuple_list))\n    return(tuple(tuple_list))\ndef tuple_difference(tuple_1, tuple_2):\n    '''\n    Write a function to return a tuple with the elements that only appear in tuple_1 but not in tuple_2.\n    '''\n    tuple_1 = (1,2,1,4,3,3,1)\n    tuple_2 = (5,6,5,8,7,7,5)\n    print(\"Tuple 1: \", tuple_1)\n    print(\"Tuple 2: \", tuple_2)\n    print(\"Difference of both tuples: \", tuple_1 - tuple_2)\n    return(tuple_1 - tuple_2)\ndef tuple_intersection(tuple_1, tuple_2):\n    '''\n    Write a function to return a tuple with the elements that appear in both tuples.\n    '''\n    tuple_1 = (1,2,1,4,3,3,1)\n    tuple_2 = (5,6,5,8,7,7,5)\n    print(\"Tuple 1: \", tuple_1)\n    print(\"Tuple 2: \", tuple_2)\n    print(\"Intersection of both tuples: \", tuple_1.intersection(tuple_2))\n    return(tuple_1.intersection(tuple_2))\ndef tuple_isdisjoint(tuple_1, tuple_2):\n    '''\n    Write a function to return True if the given tuples have nothing in common, and False otherwise.\n    '''\n    tuple_1 = (1,2,1,4,3,3,1)\n    tuple_2 = (5,6,5,8,7,7,5)\n    print(\"Tuple 1: \", tuple_1)\n    print(\"Tuple 2: \", tuple_2)\n    print(\"Are the two tuples disjoint? \", tuple_1.isdisjoint(tuple_2))\n    return(tuple_1.isdisjoint(tuple_2))\ndef tuple_issubset(tuple_1, tuple_2):\n    '''\n    Write a function to return True if all the elements in tuple_1 are also in tuple_2, and False otherwise.\n    '''\n    tuple_1 = (1,2,1,4,3,3,1)\n    tuple_2 = (5,6,5,8,7,7,5)\n    print(\"Tuple 1: \", tuple_1)\n    print(\"Tuple 2: \", tuple_2)\n    print(\"Are all elements in tuple_1 also in tuple_2? \", tuple_1.issubset(tuple_2))\n    return(tuple_1.issubset(tuple_2))\ndef tuple_issuperset(tuple_1, tuple_2):\n    '''\n    Write a function to return True if all the elements in tuple_2 are also in tuple_1, and False otherwise.\n    '''\n    tuple_1 = (1,2,1,4,3,3,1)\n    tuple_2 = (5,6,5,8,7,7,5)\n    print(\"Tuple 1: \", tuple_1)\n    print(\"Tuple 2: \", tuple_2)\n    print(\"Are all elements in tuple_2 also in tuple_1? \", tuple_1.issuperset(tuple_2))\n    return(tuple_1.issuperset(tuple_2))\ndef tuple_symmetric_difference(tuple_1, tuple_2):\n    '''\n    Write a function to return a tuple with the elements that are in tuple_1 or tuple_2 but not both.\n    '''\n    tuple_1 = (1,2,1,4,3,3,1)\n    tuple_2 = (5,6,5,8,7,7,5)\n    print(\"Tuple 1: \", tuple_1)\n    print(\"Tuple 2: \", tuple_2)\n    print(\"Symmetric difference of both tuples: \", tuple_1.symmetric_difference(tuple_2))\n    return(tuple_1.symmetric_difference(tuple_2))\ndef tuple_union(tuple_1, tuple_2):\n    '''\n    Write a function to return a tuple with the elements that are in tuple_1 or tuple_2.\n    '''\n    tuple_1 = (1,2,1,4,3,3,1)\n    tuple_2 = (5,6,5,8,7,7,5)\n    print(\"Tuple 1: \", tuple_1)\n    print(\"Tuple 2: \", tuple_2)\n    print(\"Union of both tuples: \", tuple_1.union(tuple_2))\n    return(tuple_1.union(tuple_2))\ndef tuple_round(tuple_1):\n    '''\n    Write a function t"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    try:\n        tuple_list = tuple(tuple_list)\n        tuple_list_size = sys.getsizeof(tuple_list)\n        return tuple_list_size\n    except:\n        print(\"Invalid tuple\")\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = 0\n    for x in tuple_list:\n        if type(x) == int or type(x) == float:\n            s += sys.getsizeof(x)\n        elif type(x) == list:\n            s += sys.getsizeof(x) + tuple_size(x)\n        elif type(x) == str:\n            s += sys.getsizeof(x) + len(x)\n        elif type(x) == tuple:\n            s += sys.getsizeof(x) + tuple_size(x)\n    return s\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < k or len(arr2) < k:\n        return -1\n    else:\n        low = 0\n        high = len(arr1)\n        while low < high:\n            partition_index = (low + high) // 2\n            partition_element = arr1[partition_index]\n            low_element = arr1[low]\n            high_element = arr1[high-1]\n            if partition_element <= k <= high_element:\n                return arr2[k - low_element - 1]\n            elif low_element <= k < partition_element:\n                low = partition_index + 1\n            else:\n                high = partition_index\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l1, l2 = len(arr1), len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m, n = len(arr1), len(arr2)\n    left = 0\n    right = m + n - k\n    while left < right:\n        mid = left + (right - left) // 2\n        x = (mid + 1) * (m + n - mid) // 2\n        y = (m - mid) * (mid + 1) // 2\n        if x < k < y:\n            return mid\n        elif x > k:\n            right = mid\n        else:\n            left = mid + 1\n    return mid\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) >= k and len(arr2) >= k:\n        i = 0\n        j = 0\n        arr = []\n        while len(arr) < k:\n            if i >= len(arr1) or j >= len(arr2):\n                break\n            if arr1[i] < arr2[j]:\n                arr.append(arr1[i])\n                i += 1\n            else:\n                arr.append(arr2[j])\n                j += 1\n        return arr\n    elif len(arr1) < k:\n        return arr1\n    else:\n        return arr2\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 == 0:\n        return arr2[k-1]\n    if len2 == 0:\n        return arr1[k-1]\n    if k > len1 + len2:\n        raise Exception(\"K value cannot be greater than the sum of the length of both arrays\")\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = min(k//2, len1)\n    mid2 = min(k//2, len2)\n    if arr1[mid1-1] > arr2[mid2-1]:\n        return find_kth(arr1[:mid1], arr2[mid2:], k-mid2)\n    elif arr1[mid1-1] < arr2[mid2-1]:\n        return find_kth(arr1[mid1:], arr2[:mid2], k-mid1)\n    else:\n        return arr1[mid1-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    elif len(arr2) == 0:\n        return arr1[k-1]\n    elif k == 1:\n        return min(arr1[0], arr2[0])\n    p1 = min(k//2, len(arr1))\n    p2 = k - p1\n    if arr1[p1-1] < arr2[p2-1]:\n        return find_kth(arr1[p1:], arr2, p2)\n    else:\n        return find_kth(arr1, arr2[p2:], p1)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    #This problem can be solved using the idea of binary search. \n    #we will search the intersection of the two sorted arrays.\n    #If the two arrays are not equal in size, then search for the kth element in the smaller one.\n    #else search for kth element in both.\n    #Now, we will search the intersection of the two arrays.\n    #the solution is the intersection of the two arrays, so we can use binary search.\n    #if array is equal in size, then, we can use normal binary search\n    \n    #First, we will see whether the length of both arrays are equal or not.\n    #If yes, we will see whether k is less than or greater than the sum of size of array or not.\n    #if k is less than the sum of size of array, then we can use binary search in the first array.\n    #Else, we can use binary search in the second array.\n    \n    if len(arr1) == len(arr2):\n        if k > len(arr1)+len(arr2):\n            return -1\n        else:\n            return find_kth_sorted_arrays(arr1, arr2, k)\n    elif len(arr1) < len(arr2):\n        return find_kth_sorted_arrays(arr2, arr1, k)\n    else:\n        return find_kth_sorted_arrays(arr1, arr2, k)\n    \ndef find_kth_sorted_arrays(arr1, arr2, k):\n    \n    #The idea is to find the mid of the first array and check if it is equal to the kth element of the second array.\n    #If yes, then return it.\n    #if no, then check if the mid is greater than the kth element of the second array.\n    #If yes, then search the first half of the array.\n    #else search the second half of the array.\n    #We will do the same until we find the kth element.\n    #For the first case, we will do binary search.\n    #For the second case, we will use binary search.\n    \n    \n    if len(arr1) > len(arr2):\n        return -1\n    \n    start = 0\n    end = len(arr1) - 1\n    \n    while start <= end:\n        mid = int((start+end)/2)\n        if arr1[mid] == k:\n            return mid\n        elif arr1[mid] > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    start = 0\n    end = len(arr2) - 1\n    \n    while start <= end:\n        mid = int((start+end)/2)\n        if arr2[mid] == k:\n            return mid\n        elif arr2[mid] > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n    \n    \n    \n    \narr1 = [0,1,3,4,6]\narr2 = [2,4,6,8,10]\nk = 5\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if len(arr1) < len(arr2):\n        temp = arr1\n        arr1 = arr2\n        arr2 = temp\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    count = 0\n    while(num > 0):\n        num = num // 10\n        count += 1\n    num = number\n    while(num > 0):\n        rem = num % 10\n        sum = sum + (rem ** count)\n        num = num // 10\n    return sum\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize sum\n    sum = 0\n    # Find the sum of the cube of each digit\n    temp = number\n    while temp > 0:\n        rem = temp % 10\n        sum += rem ** 3\n        temp //= 10\n    # Check whether sum is equal to number\n    if sum == number:\n        print(number,\"is an Armstrong number\")\n    else:\n        print(number,\"is not an Armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_as_string = str(number)\n    number_length = len(number_as_string)\n    total = 0\n    for i in range(number_length):\n        current_digit = int(number_as_string[i])\n        current_digit_value = current_digit**number_length\n        total = total + current_digit_value\n    if total == number:\n        print(number, \"is an armstrong number\")\n    else:\n        print(number, \"is not an armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum = 0\n    temp = number\n    while temp!= 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n=number\n    sum1=0\n    lenght=len(str(number))\n    while(number>0):\n        rem=number%10\n        sum1+=(rem**lenght)\n        number=number//10\n    if(sum1==n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum1 = 0\n    num1 = num\n    while num>0:\n        digit = num % 10\n        sum1 += digit ** 3\n        num //= 10\n    return sum1 == num1\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum = 0\n    for i in range(length):\n        sum = sum + (number % 10)**length\n        number = number // 10\n    if sum == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert number to list\n    number_list = [int(digit) for digit in str(number)]\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        return False\n    elif number == 0:\n        return False\n    else:\n        temp_number = number\n        result = 0\n        while temp_number:\n            remainder = temp_number % 10\n            result += remainder ** 3\n            temp_number //= 10\n        if result == number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(number + 1):\n        sum = sum + i\n    average = sum / number\n    print('sum is {} and average is {}'.format(sum, average))\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum+=i\n    print('Sum of ',number,' natural numbers = ',sum)\n    print('Average of ',number,' natural numbers = ',sum/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(number):\n        s = s + i\n    average = s / number\n    print(s, average)\nsum_average(10)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and counter\n    total = 0\n    count = 1\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    l = [i for i in range(1,number+1)]\n    for i in l:\n        s += i\n    a = s/number\n    return s, a\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    for i in range(number + 1):\n        sum_ += i\n    average = sum_ / number\n    return sum_, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    print(\"Sum is {}\".format(sum))\n    print(\"Average is {}\".format(average))\n    return\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    number = int(input('Enter the number: '))\n    total = (number * (number + 1)) / 2\n    print('Sum of first %d natural numbers is %d' %(number,total))\n    print('Average of first %d natural numbers is %.2f' %(number,total / number))\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,number+1):\n        sum=sum+i\n    print(f\"Sum of first {number} natural numbers = {sum}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum = sum + i\n        average = sum / number\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2==0) :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common denominator.\n    '''\n    if(b==0):\n        return a\n    else:\n        return gcd(b,a%b)\n    \n    \n    \n    \ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple.\n    '''\n    return (a*b)/gcd(a,b)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_Even_Extra(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n    \ndef is_Even_Extra_2(n) : \n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d=dict()\n    for i in str1:\n        if i in d:\n            return i\n        else:\n            d[i]=i\n    return \"No Repeat Char\"\nprint(first_repeated_char('geeksforgeeks'))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    from collections import OrderedDict\n    if str1.isalpha():\n        return \" \".join(OrderedDict.fromkeys(str1))\n    else:\n        return \"Given string does not contain alphabets.\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = \"python is an interpreted, high-level, general-purpose programming language. python is an object-oriented, high-level programming language. python is a scripting language. python is a high-level language. python is a general-purpose language. python is a dynamically typed language. python is an interpreted language.\"\n    unique = []\n    for char in str1:\n        if char not in unique:\n            unique.append(char)\n        else:\n            return char\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if not isinstance(str1,str):\n        return \"Enter a string only\"\n    str1=str1.lower()\n    list1=list(str1)\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)):\n            if list1[i]==list1[j] and i!=j:\n                return list1[i]\n    return \"No repeated character found\"\nprint(first_repeated_char(\"cool\"))\nprint(first_repeated_char(\"Geeksforgeeks\"))\nprint(first_repeated_char(\"lovely\"))\nprint(first_repeated_char(\"Geeks\"))\nprint(first_repeated_char(\"!!!\"))\nprint(first_repeated_char(\"@#$%^&*()\"))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = 'abcdabcd'\n    for i in range(0,len(str1)):\n        for j in range(i+1,len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            return i\n        dict1[i] = 1\n    return 'No repeated characters'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    my_str = str1\n    new_str = []\n    for letter in my_str:\n        if letter not in new_str:\n            new_str.append(letter)\n        else:\n            return letter\n    return \"No repeated characters\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    my_dict = {}\n    for char in str1:\n        if char in my_dict:\n            return char\n        else:\n            my_dict[char] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    char_dict = dict()\n    for char in str1:\n        if char in char_dict:\n            count = char_dict[char]\n            char_dict[char] = count+1\n            break\n        else:\n            char_dict[char] = 1\n    if count!= 0:\n        return count\n    else:\n        return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if(str1[i] == str1[j]):\n                return str1[i]\n                break\n    return \"No repeating character\"\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if i not in [0, 1, 2, 4]:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [n]\n    for i in range(1,n):\n        ludic.append(i**2)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_digits(n):\n        return [int(i) for i in str(n)]\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2,n):\n        count = 0\n        for j in range(2,i):\n            if i%j == 0:\n                count = count + 1\n        if count == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 2:\n        return []\n    result = []\n    for i in range(1, n//2+1):\n        if is_ludic(i):\n            result.append(i)\n    if is_ludic(n):\n        result.append(n)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    ludic = [2,3]\n    for i in range(4,n):\n        if (i%2 == 0) and (i%3!= 0):\n            ludic.append(i)\n        elif (i%2!= 0) and (i%3 == 0):\n            ludic.append(i)\n        elif (i%2 == 0) and (i%3 == 0):\n            continue\n        else:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    ludic = []\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = set()\n    for x in range(2,n+1):\n        num = x\n        while num < n+1:\n            result.add(num)\n            num *= x\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def pad_number(x):\n        '''\n        Pad a number to make it into a square\n        '''\n        if len(x)%2 == 0:\n            return '0' + x\n        else:\n            return '00' + x\n    def get_ludic_rec(n):\n        '''\n        Recursive function to return all lucid numbers smaller than or equal to a given number\n        '''\n        if n == 1:\n            return ['1']\n        else:\n            ludic_n = [int(pad_number(str(i))) for i in range(1, n+1)]\n            if n%2 == 0:\n                ludic_n = [i for i in ludic_n if i%2 == 0]\n            else:\n                ludic_n = [i for i in ludic_n if i%2!= 0]\n            return [str(ludic_n[0])] + get_ludic_rec(n-1)\n    return [ludic_n for ludic_n in get_ludic_rec(n)]\nprint(get_ludic(9))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # print(s)\n    if s == '':\n        return s\n    else:\n        return reverse_words(s[1:]) + s[0]\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #Write your code here\n    a = s.split(\" \")\n    a.reverse()\n    return \" \".join(a)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split()\n    rev =''.join(l[::-1])\n    return rev\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split(' ')\n    # reverse the list\n    words = words[::-1]\n    # join the words in the list together into a string\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split(' ')\n    reversed_list = reversed(s_list)\n    reversed_s =''.join(reversed_list)\n    return reversed_s\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word = s.split(\" \")\n    return \" \".join(word[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #creating a list of words\n    lst = s.split(' ')\n    #print(lst)\n    # reversing the list\n    lst.reverse()\n    #print(lst)\n    #converting the list back to string\n    lst =''.join(lst)\n    return lst\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s =''.join(s[::-1])\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # code goes here\n    lst = s.split(' ')\n    return''.join(lst[::-1])\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return 0\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # If the given number is less than 2 it is not prime number.\n    if num < 2:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True\n    \n    \ndef main():\n    '''\n    Call prime_num() on different values of num\n    '''\n    \n    print(prime_num(7))\n    print(prime_num(12))\n    print(prime_num(15))\n    print(prime_num(19))\n    print(prime_num(10))\n    print(prime_num(4))\n    print(prime_num(2))\n    print(prime_num(1))\n    print(prime_num(0))\n    print(prime_num(-7))\n    \n    \nmain("
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                print(i, \"times\", num//i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    flag = 0\n    for i in range(2, num):\n        if num%i == 0:\n            flag = 1\n    return flag\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for n in range(2, num//2 + 1):\n            if num % n == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    flag=True\n    for i in range(2,num):\n        if(num%i==0):\n            flag=False\n            break\n    if(flag==True):\n        print(num,\"is a prime number\")\n    else:\n        print(num,\"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,\"is not a prime number\")\n                break\n        else:\n            print(num,\"is a prime number\")\n    else:\n        print(num,\"is not a prime number\")\nnum = int(input(\"Enter a number: \"))\nprime_num(num)"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,\"is not a prime number\")\n                print(i,\"times\",num//i,\"is\",num)\n                break\n        else:\n            print(num,\"is a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian=degree*(math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (math.pi * degree)/180\ndef hour_to_minute(hour):\n    '''\n    Write a function to convert hours to minutes.\n    '''\n    return hour * 60\ndef minutes_to_second(minutes):\n    '''\n    Write a function to convert minutes to seconds.\n    '''\n    return minutes * 60\ndef month_to_day(month):\n    '''\n    Write a function to convert months to days.\n    '''\n    return month * 30\ndef second_to_hour(second):\n    '''\n    Write a function to convert seconds to hours.\n    '''\n    return second / 3600\ndef year_to_minute(year):\n    '''\n    Write a function to convert year to minutes.\n    '''\n    return year * 525600\ndef second_to_minutes(second):\n    '''\n    Write a function to convert seconds to minutes.\n    '''\n    return second / 60\ndef minutes_to_hour(minute):\n    '''\n    Write a function to convert minutes to hours.\n    '''\n    return minute / 60\ndef hour_to_second(hour):\n    '''\n    Write a function to convert hours to seconds.\n    '''\n    return hour * 3600\ndef second_to_day(second):\n    '''\n    Write a function to convert seconds to days.\n    '''\n    return second / 86400\ndef second_to_year(second):\n    '''\n    Write a function to convert seconds to years.\n    '''\n    return second / 31536000\ndef day_to_minute(day):\n    '''\n    Write a function to convert days to minutes.\n    '''\n    return day * 1440\ndef day_to_hour(day):\n    '''\n    Write a function to convert days to hours.\n    '''\n    return day * 24\ndef day_to_second(day):\n    '''\n    Write a function to convert days to seconds.\n    '''\n    return day * 86400\ndef day_to_year(day):\n    '''\n    Write a function to convert days to years.\n    '''\n    return day / 365\ndef year_to_second(year):\n    '''\n    Write a function to convert years to seconds.\n    '''\n    return year * 31536000\ndef year_to_minute(year):\n    '''\n    Write a function to convert years to minutes.\n    '''\n    return year * 525600\ndef minute_to_second(minute):\n    '''\n    Write a function to convert minutes to seconds.\n    '''\n    return minute * 60\ndef hour_to_day(hour):\n    '''\n    Write a function to convert hours to days.\n    '''\n    return hour / 24\ndef year_to_hour(year):\n    '''\n    Write a function to convert years to hours.\n    '''\n    return year * 365\ndef year_to_minute(year):\n    '''\n    Write a function to convert years to minutes.\n    '''\n    return year * 525600\ndef minute_to_year(minute):\n    '''\n    Write a function to convert minutes to years.\n    '''\n    return minute / 525600\ndef hour_to_minute(hour):\n    '''\n    Write a function to convert hours to minutes.\n    '''\n    return hour * 60\ndef second_to_hour(second):\n    '''\n    Write a function to convert seconds to hours.\n    '''\n    return second / 3600\ndef hour_to_second(hour):\n    '''\n    Write a function to convert hours to seconds.\n    '''\n    return hour * 3600\ndef second_to_minute(second):\n    '''\n    Write a function to convert seconds to minutes.\n    '''\n    return second / 60\ndef year_to_second(year):\n    '''\n    Write a function to convert years to seconds.\n    '''\n    return year * 31536000\ndef year_to_day(year):\n    '''\n    Write a function to convert years to days.\n    '''\n    return year * 365\ndef minute_to_hour(minute):\n    '''\n    Write a function to convert minutes to hours.\n    '''\n    return minute / 60\ndef year_to_hour(year):\n    '''\n    Write a function to convert years to hours.\n    '''\n    return year * 365\ndef day_to_hour(day):\n    '''\n    Write a function to convert days to hours.\n    '''\n    return day * 24\ndef minute_to_day(minute):\n    '''\n    Write a function to convert minutes to days.\n    '''\n    return minute / 1440\ndef year_to_minute(year):\n    '''\n    Write a function to convert years to minutes.\n    '''\n    return year * 525600\ndef day_to_year(day):\n    '''\n    Write a function to convert days to years.\n    '''\n    return day / 365\ndef month_to_hour(month):\n    '''\n    Write a function to convert months to hours.\n    '''\n    return month * 30\ndef year_to_hour(year):\n    '''\n    Write a function to convert years to hours.\n    '''\n    return year * 365\ndef hour_to_month(hour):\n    '''\n    Write a function to convert hours to months.\n    '''\n    return hour / 30\ndef hour_to_second(hour):\n    '''\n    Write a function to convert hours to seconds.\n    '''\n    return hour * 3600\ndef second_to_hour(second):\n    '''\n    Write a function to convert seconds to hours.\n    '''\n    return second / 3600\ndef day_to_second(day):\n    '''\n    Write a function to convert days to seconds.\n    '''\n    return day * 86400\ndef day_to_minute(day):\n    '''\n    Write a function to convert days to minutes.\n    '''\n    return day * 1440\ndef second_to_day(second):\n    '''\n    Write a function to convert seconds to days.\n    '''\n    return second / 86400\ndef day_to_minute(day):\n    '''\n    Write a function to convert days to minutes.\n    '''\n    return day * 1440\ndef minute_to_second(minute):\n    '''\n    Write a function to convert minutes to seconds.\n    '''\n    return minute * 60\ndef second_to_month(second):\n    '''\n    Write a function to convert seconds to months.\n    '''\n    return second / 30\ndef year_to_second(year):\n    '''\n    Write a function to convert years to seconds.\n    '''\n    return year * 31536000\ndef year_to_minute(year):\n    '''\n    Write a function to convert years to minutes.\n    '''\n    return year * 525600\ndef second_to_minute(second):\n    '''\n    Write a function to convert seconds to minutes.\n    '''\n    return second / 60\ndef minute_to_second(minute):\n    '''\n    Write a function to convert minutes to seconds.\n    '''\n    return minute * 60\ndef second_to_year(second):\n    '''\n    Write a function to convert seconds to years.\n    '''\n    return second / 31536000\ndef second_to_hour(second):\n    '''\n    Write a function to convert seconds to hours.\n    '''\n    return second / 3600\ndef minute_to_year(minute):\n    '''\n    Write a function to convert minutes to years.\n    '''\n    return minute / 525600\ndef second_to_day(second):\n    '''\n    Write a function to convert seconds to days.\n    '''\n    return second / 86400\ndef second_to_hour(second):\n    '''\n    Write a function to convert seconds to hours.\n    '''\n    return second / 3600\ndef second_to_minute(second):\n    '''\n    Write a function to convert seconds to minutes.\n    '''\n    return second / 60\ndef hour_to_minute(hour):\n    '''\n    Write a function to convert hours to minutes.\n    '''\n    return hour * 60\ndef minute_to_hour(minute):\n    '''\n    Write a function to convert minutes to hours.\n    '''\n    return minute / 60\ndef day_to_year(da"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    #radian = degree/180.0*math.pi\n    #return radian\n    return degree/180*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    print(math.pi/180 * degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (math.pi / 180) * degree\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.pi/180 * degree\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    return match\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #print(text, pattern)\n    #print(text.index(pattern))\n    #print(len(pattern))\n    if pattern in text:\n        indices = [m.start() for m in re.finditer(pattern, text)]\n        #print(indices)\n        return indices\n    else:\n        return []\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    match = re.search(pattern, text)\n    start = match.start()\n    end = match.end()\n    return match.group(), start, end\n    \ndef find_word_matches(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return a list of all the matching words.\n    '''\n    \n    match = re.findall(pattern, text)\n    return match\n    \ndef replace_words(text, pattern, replacement):\n    '''\n    Write a function to replace words based on a regex pattern.\n    '''\n    \n    match = re.search(pattern, text)\n    start = match.start()\n    end = match.end()\n    sub_text = text[:start] + replacement + text[end:]\n    return sub_text\n    \ndef replace_words_with_groups(text, pattern, replacement):\n    '''\n    Write a function to replace words based on a regex pattern. The function should return the updated text, and the matched word.\n    '''\n    \n    match = re.search(pattern, text)\n    start = match.start()\n    end = match.end()\n    sub_text = text[:start] + replacement + text[end:]\n    return sub_text, match.group()\n    \ndef replace_words_with_groups_indexed(text, pattern, replacement):\n    '''\n    Write a function to replace words based on a regex pattern. The function should return the updated text, and a list of tuples containing the start index, end index, and matched word for each match.\n    '''\n    \n    match = re.search(pattern, text)\n    start = match.start()\n    end = match.end()\n    sub_text = text[:start] + replacement + text[end:]\n    return sub_text, [(i, match.start(), match.end(), match.group()) for i, match in enumerate(re.finditer(pattern, text))]\n    \ndef find_file_type(file_name):\n    '''\n    Write a function to determine the file type of a given filename. The function should return the file type. If the file type is not recognized, then the function should return \"Unknown File Type\".\n    '''\n    \n    if file_name.endswith('.txt'):\n        return 'Text File'\n    elif file_name.endswith('.py'):\n        return 'Python File'\n    elif file_name.endswith('.csv'):\n        return 'CSV File'\n    elif file_name.endswith('.ipynb'):\n        return 'Notebook File'\n    else:\n        return 'Unknown File Type'\n        \ndef find_text_file_lines(file_name):\n    '''\n    Write a function that will return the total number of lines in a text file. The function should open the file, read the lines, and then return the number of lines.\n    '''\n    \n    file = open(file_name, 'r')\n    lines = 0\n    for line in file:\n        lines += 1\n    return lines\n    \ndef find_number_of_lines_in_file(file_name):\n    '''\n    Write a function that will return the total number of lines in a text file. The function should open the file, read the lines, and then return the number of lines.\n    '''\n    \n    file = open(file_name, 'r')\n    return len(file.readlines())\n    \ndef remove_lines_from_file(file_name, pattern):\n    '''\n    Write a function that will remove all the lines from a file that contain a given pattern. The function should create a new file in the same directory as the original file, with the name of the original file with the extension \".temp\" added to it. It should then write to the new file, and delete the original file. If the pattern is not found in any of the lines, then the original file should be left unmodified.\n    '''\n    \n    lines = []\n    with open(file_name, 'r') as file:\n        lines = file.readlines()\n    new_file = open(file_name + '.temp', 'w')\n    for line in lines:\n        if re.search(pattern, line):\n            continue\n        new_file.write(line)\n    new_file.close()\n    file.close()\n    os.remove(file_name)\n    os.rename(file_name + '.temp', file_name)\n    \ndef count_words_with_hashtags(text, pattern):\n    '''\n    Write a function to count the number of words that have the given pattern in them.\n    '''\n    \n    count = 0\n    for word in text.split():\n        if re.search(pattern, word):\n            count += 1\n    return count\n    \ndef count_words_starting_with_pattern(text, pattern):\n    '''\n    Write a function to count the number of words that have the given pattern in them.\n    '''\n    \n    count = 0\n    for word in text.split():\n        if word[0].lower() == pattern[0].lower():\n            count += 1\n    return count\n    \ndef word_index_matches(text, pattern):\n    '''\n    Write a function to find the start and end indices of each match of the given pattern in a text. The function should return a list of tuples with the start index, end index, and matched word for each match.\n    '''\n    \n    match = re.finditer(pattern, text)\n    return [(i, match.start(), match.end(), match.group()) for i, match in enumerate(re.finditer(pattern, text))]\n    \ndef word_index_matches_with_word_count(text, pattern, word_count):\n    '''\n    Write a function to find the start and end indices of each match of the given pattern in a text. The function should return a list of tuples with the start index, end index, and matched word for each match, and a count of the number of words in the matched word.\n    '''\n    \n    match = re.finditer(pattern, text)\n    return [(i, match.start(), match.end(), match.group(), len(match.group().split())) for i, match in enumerate(re.finditer(pattern, text))]\n    \ndef word_index_matches_with_group_count(text, pattern, group_count):\n    '''\n    Write a function to find the start and end indices of each match of the given pattern in a text. The function should return a list of tuples with the start index, end index, and matched word for each match, and the number of groups in the matched word.\n    '''\n    \n    match = re.finditer(pattern, text)\n    return [(i, match.start(), match.end(), match.group(), len(match.groups())) for i, match in enumerate(re.finditer(pattern, text))]\n    \ndef find_unique_words_in_file(file_name):\n    '''\n    Write a function that will return a list of unique words in a given text file. The function should open the file, read the lines, and then return the list of unique words.\n    '''\n    \n    file = open(file_name, 'r')\n    words = []\n    for line in file:\n        for word in line.split():\n            words.append(word)\n    words = list(set(words))\n    return words\n    \ndef find_unique_words_in_file_with_count(file_name):\n    '''\n    Write a function that will return a list of unique words in a given text file. The function should open the file, read the lines, and then return a tuple containing the unique words and the number of times each word appears in the file.\n    '''\n    \n    file = open(file_name, 'r')\n    words = []\n    for line in file:\n        for word in line.split():\n            words.append(word)\n    words = list(set(words))\n    return [(word, words.count(word)) for word in words]\n    \ndef find_unique_words_in_file_with_count_matches(file_name):\n    '''\n    Write a function that will return a list of unique words in a given text file. The function should open the file, read the lines, and then return a tuple containin"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    literals_start_index = []\n    literals_end_index = []\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    return match.group(0)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    return result.group()\n    \nprint(find_literals(\"ababababababababababababababababababababababababababababababab\", \"ab\"))\nprint(find_literals(\"1234abcd1234abcd1234abcd1234abcd1234abcd1234abcd1234abcd1234\", \"abcd\"))\nprint(find_literals(\"A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T\", \"K\"))\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    return pattern.search(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #def find_literals(text, pattern):\n    match = re.search(pattern, text)\n    print match.groups()\n    print match.group(1)\n    return match.groups()\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    for match in matches:\n        return match.group(0), match.start(), match.end()\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1) \n    bell[0] = bell[1] = 1\n    for i in range(2,n+1): \n        bell[i] = bell[i-1] + bell[i-2] \n    return bell[n] \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1, 1]\n    for i in range(2, n):\n        bell.append(bell[i - 1] + bell[i - 2])\n    return bell[n - 1]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1,1]\n    for i in range(2,n+1):\n        bell.append(bell[i-1]+bell[i-2])\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    elif n>0:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(n):\n        bell.append(bell[-1]*(i+1))\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 62965060, 391512145, 2380372930, 16660126900, 135537578125]\n    for i in range(6, n+1):\n        bell.append(bell[i-1] + bell[i-5])\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1,n+1):\n        bell.append(bell[i-1]*i)\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_Number = 1\n    for i in range(n):\n        bell_Number = bell_Number * (n-i)\n    return bell_Number\n    \ndef is_Prime(number):\n    '''\n    Write a function to return true if the given number is prime.\n    '''\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    i = 3\n    while i <= int(number ** 0.5) :\n        if number % i == 0:\n            return False\n        i += 2\n    return True\n        \ndef prime_Factors(number):\n    '''\n    Write a function to find the prime factors of the given number.\n    '''\n    prime_factors = []\n    i = 2\n    while i <= number:\n        if number % i == 0:\n            prime_factors.append(i)\n        i += 1\n    return prime_factors\n    \ndef permutation_Palindrome(s):\n    '''\n    Write a python function to check whether the given string is a permutation of palindrome or not.\n    '''\n    s_dictionary = {}\n    for i in s:\n        if i not in s_dictionary:\n            s_dictionary[i] = 1\n        else:\n            s_dictionary[i] += 1\n    odd_count = 0\n    for i in s_dictionary:\n        if s_dictionary[i] % 2 == 1:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    return True\n    \ndef anagrams(s1,s2):\n    '''\n    Write a python function to check whether two words are anagrams or not.\n    '''\n    s1_dictionary = {}\n    for i in s1:\n        if i not in s1_dictionary:\n            s1_dictionary[i] = 1\n        else:\n            s1_dictionary[i] += 1\n    s2_dictionary = {}\n    for i in s2:\n        if i not in s2_dictionary:\n            s2_dictionary[i] = 1\n        else:\n            s2_dictionary[i] += 1\n    return s1_dictionary == s2_dictionary\n        \ndef reverse_String(string):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return string[::-1]\n    \ndef reverse_Vowels(string):\n    '''\n    Write a python function to reverse vowels of the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    string_vowels = []\n    for i in string:\n        if i.lower() in vowels:\n            string_vowels.append(i)\n    return \"\".join(string_vowels[::-1])\n    \ndef is_Number_Bouncy(number):\n    '''\n    Write a python function to check whether the given number is bouncy or not.\n    '''\n    n = number\n    num_s = str(number)\n    bouncy_number = False\n    while n > 0:\n        if num_s[0] > num_s[1]:\n            bouncy_number = True\n        num_s = num_s[1:]\n        n -= 1\n    return bouncy_number\n    \ndef find_Smallest_Prime_Factor(number):\n    '''\n    Write a python function to find the smallest prime factor of the given number.\n    '''\n    i = 2\n    while i <= int(number ** 0.5):\n        if number % i == 0:\n            return i\n        i += 1\n    return number\n    \ndef find_Largest_Prime_Factor(number):\n    '''\n    Write a python function to find the largest prime factor of the given number.\n    '''\n    i = 2\n    while i <= int(number ** 0.5):\n        if number % i == 0:\n            return find_Largest_Prime_Factor(i)\n        i += 1\n    return number\n    \ndef find_Largest_Palindrome_Factor(number):\n    '''\n    Write a python function to find the largest palindrome factor of the given number.\n    '''\n    i = int(number ** 0.5)\n    while i >= 1:\n        if number % i == 0 and is_Palindrome(i):\n            return i\n        i -= 1\n    return number\n    \ndef is_Palindrome(number):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    return str(number) == str(number)[::-1]\n    \ndef find_Largest_Circular_Prime_Factor(number):\n    '''\n    Write a python function to find the largest circular prime factor of the given number.\n    '''\n    i = find_Largest_Prime_Factor(number)\n    while i >= 2:\n        if is_Circular_Prime(i):\n            return i\n        i -= 1\n    return number\n    \ndef is_Circular_Prime(number):\n    '''\n    Write a python function to check whether the given number is circular prime or not.\n    '''\n    n = number\n    num_s = str(number)\n    while n > 0:\n        if not is_Prime(int(num_s)):\n            return False\n        num_s = num_s[-1] + num_s[0:len(num_s)-1]\n        n -= 1\n    return True\n    \ndef is_Happy_Number(number):\n    '''\n    Write a python function to check whether the given number is happy or not.\n    '''\n    n = number\n    num_s = str(number)\n    i = 0\n    while i < 1000:\n        sum = 0\n        for j in range(len(num_s)):\n            sum += int(num_s[j])**2\n        num_s = str(sum)\n        if sum == 1:\n            return True\n        if sum == 4:\n            return False\n        i += 1\n    return False\n    \ndef convert_Fraction(numerator, denominator):\n    '''\n    Write a python function to convert the given fraction in the form of \n    numerator/denominator to its simplest form.\n    '''\n    if numerator == 0:\n        return 0\n    if denominator == 0:\n        return None\n    if numerator < 0:\n        numerator = -numerator\n        if denominator < 0:\n            denominator = -denominator\n    if denominator < 0:\n        denominator = -denominator\n        numerator = -numerator\n    i = find_Smallest_Prime_Factor(numerator)\n    return numerator // i, denominator // i\n    \ndef find_Num_Consecutive_Digits(number):\n    '''\n    Write a python function to find the number of consecutive digits in the given number.\n    '''\n    num_s = str(number)\n    n = len(num_s)\n    return n - len(str(int(num_s)))\n    \ndef find_Num_Consecutive_Digits_Without_Zero(number):\n    '''\n    Write a python function to find the number of consecutive digits in the given number.\n    '''\n    num_s = str(number)\n    count = 0\n    for i in num_s:\n        if i == '0':\n            continue\n        else:\n            count += 1\n    return count\n    \ndef find_Num_Consecutive_Digits_Without_Zero_2(number):\n    '''\n    Write a python function to find the number of consecutive digits in the given number.\n    '''\n    num_s = str(number)\n    count = 0\n    for i in num_s[::-1]:\n        if i == '0':\n            continue\n        else:\n            count += 1\n    return count\n    \ndef max_Number_Of_K_Length_Substrings(string, k):\n    '''\n    Write a python function to find the maximum number of substrings of the given length in the given string.\n    '''\n    count = 0\n    for i in range(len(string) - k + 1):\n        sub_s = string[i: i+"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #return list1[:L] + list1[L+1:]\n    L1 = list1[L:]\n    L2 = list1[:L]\n    return L2 + L1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    length = len(list1)\n    if L > length:\n        return None\n    else:\n        list2 = []\n        for i in range(length):\n            if i == length - L:\n                continue\n            else:\n                list2.append(list1[i])\n        return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n    "
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Write your solution here\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L = L-1\n    list2 = []\n    for i in list1:\n        if i!= list1[L]:\n            list2.append(i)\n    return list2\nprint(remove_kth_element([1,2,3,4,5], 2))\nprint(remove_kth_element([1,2,3,4,5], 1))\nprint(remove_kth_element([1,2,3,4,5], 5))\nprint(remove_kth_element([1,2,3,4,5], 6))\nprint(remove_kth_element([1,2,3,4,5], 1))\nprint(remove_kth_element([1,2,3,4,5], 4))\nprint(remove_kth_element([1,2,3,4,5], 3))\nprint(remove_kth_element([1,2,3,4,5], 5))\nprint(remove_kth_element([1,2,3,4,5], 2))\nprint(remove_kth_element([1,2,3,4,5], 5))\nprint(remove_kth_element([1,2,3,4,5], 6))\nprint(remove_kth_element([1,2,3,4,5], 2))\nprint(remove_kth_element([1,2,3,4,5], 3))\nprint(remove_kth_element([1,2,3,4,5], 4))\nprint(remove_kth_element([1,2,3,4,5], 5))\nprint(remove_kth_element([1,2,3,4,5], 6))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i = 0\n    while i < len(list1):\n        if i == L:\n            del(list1[i])\n        i += 1\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list_new = []\n    for i in list1:\n        if i!= L:\n            list_new.append(i)\n    return list_new\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return []\n    else:\n        if L >= len(list1):\n            return []\n        elif L == 0:\n            return list1\n        else:\n            L = L - 1\n            x = list1[L]\n            new_list = list1[:L] + list1[L+1:]\n            return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[:L] + list1[L+1:]\n    return new_list\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i][N - 1]))\n    return max_list\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 0 or N > len(test_list):\n        raise Exception(\"N is invalid\")\n    else:\n        col = []\n        for row in test_list:\n            col.append(row[N])\n        return max(col)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([x[N-1] for x in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return [max(x[N]) for x in test_list]\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col = 0\n    max_col = []\n    while col < N:\n        for i in range(len(test_list)):\n            max_col.append(max(test_list[i]))\n        col += 1\n    return max(max_col)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        raise ValueError('Invalid index')\n    new_list = []\n    for lst in test_list:\n        new_list.append(lst[N-1])\n    return max(new_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column_index = N - 1\n    max_value = test_list[0][column_index]\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        return \"invalid index\"\n    elif N < 1:\n        return \"invalid index\"\n    else:\n        return [max(i) for i in zip(*test_list)][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print(max(map(lambda l: l[N-1], test_list)))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merge_lst = [lst[i][0] for i in range(len(lst))] + [lst[i][1] for i in range(len(lst))]\n    return [merge_lst[i:i + 2] for i in range(0, len(merge_lst), 2)] \n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0::2],lst[1::2]]\n    \ndef order(lst):\n    '''\n    Write a python function which takes a list and returns a list of elements which appear more than once in the list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if lst.count(lst[i]) > 1:\n            new_lst.append(lst[i])\n    return new_lst\n    \ndef split_sort(lst):\n    '''\n    Write a python function which takes a list and returns a list of two lists, one of which contains elements from the original list which are even, and the other one contains elements from the original list which are odd.\n    '''\n    even = []\n    odd = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    even.sort()\n    odd.sort()\n    return [even, odd]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for sublist in lst:\n        lst1.append(sublist[0])\n        lst2.append(sublist[1])\n    return [lst1, lst2]\n    \nprint(merge([[1, 'b'], [3, 'd'], [4, 'a'], [7, 'c']]))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #base case: if length is 1 or less, return list\n    if len(lst) <= 1:\n        return lst\n    #merge first two lists into new list, \n    merge = []\n    for i in range(len(lst)//2):\n        merge.append(lst[i])\n    #if length is odd, add last list\n    if len(lst) % 2 == 1:\n        merge.append(lst[-1])\n    #recursively call function on remaining list\n    merge.append(merge_two_lists(merge[0],merge[1]))\n    #return new list\n    return merge_two_lists(merge[0],merge[1])\n    \n    "
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = [lst[0][0], lst[1][0]]\n    return res\n    "
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0::2], lst[1::2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    merged_list = []\n    merged_list.append(lst[0][0])\n    merged_list.append(lst[0][1])\n    \n    if len(lst) == 2:\n        return merged_list\n    \n    for i in range(1, len(lst)):\n        if merged_list[0] < lst[i][0]:\n            merged_list.append(lst[i][0])\n            merged_list.append(lst[i][1])\n            \n        elif merged_list[0] > lst[i][0]:\n            merged_list.insert(0, lst[i][0])\n            merged_list.insert(0, lst[i][1])\n            \n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    lst1=[]\n    lst2=[]\n    lst3=[]\n    if len(lst)<=0:\n        return lst\n    for x in lst:\n        lst1.append(x[0])\n        lst2.append(x[1])\n    return [lst1,lst2]\n    \nprint(merge([[1,2],[3,4],[5,6]]))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[x[0] for x in lst],[y[1] for y in lst]]\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    print(sum(test_list))\n    sum_val = 0\n    for i in test_list:\n        sum_val = sum_val + i\n    print(sum_val)\n    "
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for num in test_list:\n        result += num\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for index in range(0, len(test_list)):\n        if index == 0:\n            result.append(test_list[index])\n        else:\n            result.append(test_list[index] + result[index-1])\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    # iterate over the list\n    for i in range(len(test_list)):\n        # add all the items\n        cumulative_sum += test_list[i]\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    test_list = sorted(test_list)\n    for i in range(len(test_list)):\n        if i == 0:\n            new_list.append(test_list[i])\n        else:\n            new_list.append(test_list[i] + new_list[i - 1])\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_to_return = []\n    if len(test_list) < 1:\n        return []\n    list_to_return.append(test_list[0])\n    for index in range(1, len(test_list)):\n        list_to_return.append(test_list[index] + list_to_return[index - 1])\n    return list_to_return\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum=0\n    for i in range(len(test_list)):\n        cummulative_sum=cummulative_sum+test_list[i]\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    if len(test_list) > 1:\n        test_list[1] = test_list[0] + test_list[1]\n    for x in range(1, len(test_list)):\n        test_list[x] = test_list[x] + test_list[x-1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Enter your code here\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n        test_list[i] = cum_sum\n    return test_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    def avg_tuple(num):\n        avg = (sum([x[0] for x in num]))/(sum([x[1] for x in num]))\n        return avg\n    return list(map(avg_tuple, nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in nums]\n    \ndef average_dictionary(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for tup in nums:\n        new_list.append(sum(tup) / len(tup))\n    return new_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum += j\n        avg = sum/len(i)\n        new_list.append(avg)\n    return new_list\n    "
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if not nums:\n        return []\n    return [sum(nums[i])/len(nums[i]) for i in range(len(nums))]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Calculate average of each tuple\n    # Tuples are immutable, so we can't change their values\n    return [(sum(x) / len(x)) for x in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    for i in nums:\n        i = sum(i) / len(i)\n    return i\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Tuple of tuples is not necessary, can just be a tuple of values.\n    # List of tuples can be used to return multiple values from a function.\n    sum = 0\n    for num in nums:\n        sum += num\n    avg = sum / len(nums)\n    return [avg]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num)/len(num) for num in nums]\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0]%test_tup2[0], test_tup1[1]%test_tup2[1])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple([tup1 % tup2 for tup1,tup2 in zip(test_tup1,test_tup2)])\n    \n    \n    \ndef tuple_power(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise power.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple([tup1 ** tup2 for tup1,tup2 in zip(test_tup1,test_tup2)])\n    \n    \n    \ndef tuple_add(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise addition.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple([tup1 + tup2 for tup1,tup2 in zip(test_tup1,test_tup2)])\n    \n    \n    \ndef tuple_sum(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise sum of tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple([sum(tup1) for tup1 in zip(test_tup1,test_tup2)])\n    \n    \n    \ndef main():\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    print(tuple_sum(test_tup1,test_tup2))\n    print(tuple_modulo(test_tup1,test_tup2))\n    print(tuple_power(test_tup1,test_tup2))\n    print(tuple_add(test_tup1,test_tup2))\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tuple = []\n    for index in range(len(test_tup1)):\n        new_tuple.append(test_tup1[index] % test_tup2[index])\n    return tuple(new_tuple)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def modulo_tuple(tup1, tup2):\n        '''\n        Performs element wise modulo between two tuples.\n        Input:\n            tup1: A tuple to be compared with tup2.\n            tup2: A tuple to be compared with tup1.\n        Output:\n            A tuple with the same length as tup1, with each element representing the modulo between tup1[i] and tup2[i].\n        '''\n        return tuple(map(lambda x, y: x % y, tup1, tup2))\n    return modulo_tuple(test_tup1, test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    return [i%j for i,j in zip(test_tup1, test_tup2)]\n    \n    \n    \n    \n    "
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # Replace the line below with all your code. Remember to return the result.\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    return tuple([tup1 % tup2 for tup1, tup2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = steps\n    a = d\n    count = 0\n    while(n):\n        if (n > a):\n            count += 1\n            n = n - a\n        else:\n            count += 1\n            break\n        a = 2*a\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # A[n] is going to store the minimum number of jumps needed for a point to reach from origin\n    # Let us consider (0, 0) as the origin.\n    A = [0] * (d+1)\n    for i in range(1, d+1):\n        jumps = float('inf')\n        for k in range(1, steps+1):\n            # if we can reach point (k, k) in k jumps\n            if (i - k >= 0) and (A[i - k]!= float('inf')):\n                jumps = min(jumps, A[i-k] + 1)\n        A[i] = jumps\n    print(\"\\nA = \", A)\n    return A[d]\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def isSafe(x, y): \n        return (x >= 0) and (x < d) and (y >= 0) and (y < d) \n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    count = 0\n    jump_count = 0\n    for i in range(steps):\n        if i == 0:\n            count += 1\n            if count == d:\n                return jump_count\n        else:\n            count += 1\n            if count == d:\n                jump_count += 1\n                count = 0\n    return \"Not Possible\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    import math\n    # print(d)\n    # print(steps)\n    # print(math.sqrt(2*d))\n    # print(math.floor(math.sqrt(2*d)))\n    # print(math.ceil(math.sqrt(2*d)))\n    # print(int(math.sqrt(2*d)))\n    # print(math.floor(math.sqrt(2*d)))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    visited = [ [False] * (steps + 1) for _ in range(steps + 1) ] \n    jumps = [0] * (steps + 1) \n    jumps[0] = 0\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d == 1 or d == steps:\n        return 1\n    else:\n        return min_Jumps(steps - 1, d - 1) + min_Jumps(steps - 1, d) \n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return (steps // d + 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # if d==0: return 0\n    if steps == 0:\n        return 0\n    if d == 0:\n        return float('inf')\n    # if d == 1:\n    #     return steps\n    jumps = 0\n    if steps >= d:\n        jumps = 1\n        return jumps\n    while steps >= d:\n        jumps += 1\n        steps -= d\n    return jumps + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0 or steps < d:\n        return steps\n    return min(min_Jumps(steps - 1, d), min_Jumps(steps - 2, d - steps)) + 1\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print(nums1)\n    print(nums2)\n    print('div list')\n    i=0\n    j=0\n    while i<len(nums1) and j<len(nums2):\n        print(nums1[i]/nums2[j])\n        i+=1\n        j+=1\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # res = []\n    # for i in range(len(nums1)):\n    #     res.append(nums1[i]/nums2[i])\n    # return res\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l1 = []\n    for i,j in zip(nums1,nums2):\n        l1.append(i/j)\n    return l1\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list1 = []\n    list2 = []\n    for i in nums1:\n        list1.append(i)\n    for i in nums2:\n        list2.append(i)\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1,num2 in zip(nums1,nums2)]\n    \ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    return [num1 + num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise Exception(\"The two lists are not of equal length\")\n    else:\n        return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(0,len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i,j in zip(nums1,nums2):\n        div_list.append(i/j)\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        try:\n            nums1[i]=nums1[i]/nums2[i]\n        except ZeroDivisionError:\n            return 'Division by Zero not allowed.'\n    return nums1\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    char_list = list(test_str)\n    numbers = [i for i in range(0,10)]\n    for i in range(len(char_list)):\n        if char_list[i] in numbers:\n            char_list[i] = ''\n    for i in range(len(char_list)):\n        if char_list[i] == '':\n            char_list[i] = str(numbers[i])\n    return ''.join(char_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if i.isalpha()]) + ''.join([i for i in test_str if not i.isalpha()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = [i for i in test_str if i.isdigit()]\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join(num)\n    \n    \nprint(move_num(\"Apple 1234\"))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    nums = \"\"\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            new_str += char\n    new_str += nums\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = []\n    n = []\n    for ch in test_str:\n        if ch.isnumeric():\n            n.append(ch)\n        else:\n            s.append(ch)\n    return \"\".join(s) + \"\".join(n)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #Given a String we need to return a String after moving all the numbers to the end.\n    #Example: move_num(\"My2name4is5name6\") # Output: Mynamenameisname6\n    \n    #Returns empty string if string is empty\n    if test_str is None:\n        return ''\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = [int(i) for i in test_str if i.isdigit()]\n    new_str = ''.join(list(filter(lambda x: not x.isdigit(), test_str)))\n    return new_str + ''.join([str(i) for i in numbers])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    arr=[]\n    for i in test_str:\n        if i.isdigit():\n            arr.append(i)\n    res_str=''\n    for i in test_str:\n        if i.isalpha():\n            res_str+=i\n    for i in range(len(arr)):\n        res_str+=arr[i]\n    return res_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst = test_str.split()\n    return''.join([i for i in lst if i.isnumeric()])\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    def is_pair_divisible(x, y):\n        return (x + y) % 2 == 0\n    \n    def largest_subset_helper(nums, i, memo):\n        if i < 0:\n            return 0\n        if i in memo:\n            return memo[i]\n        \n        for j in range(i - 1, -1, -1):\n            if is_pair_divisible(nums[i], nums[j]):\n                memo[i] = max(memo[i], 1 + largest_subset_helper(nums, j, memo))\n        return memo[i]\n    \n    nums.sort()\n    memo = {}\n    return largest_subset_helper(nums, len(nums) - 1, memo)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    dp = [set() for _ in range(len(a))]\n    for i in range(len(a)):\n        dp[i] = set([a[i]])\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                dp[i] |= dp[j]\n        dp[i] |= set([a[i]])\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # init a list of lists, one for each possibility\n    options = [[] for i in range(0, len(a)+1)]\n    # populate the first element of each option, based on the base case\n    for i in range(1, len(a)+1):\n        options[i].append([i])\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def check_divisible(a, b):\n        return True if ((a % b) == 0) else False\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # O(n^2) solution\n    # for i in range(len(a)):\n    #     for j in range(i+1, len(a)):\n    #         if a[i] % a[j] == 0:\n    #             return j\n    # return -1\n    \n    # O(n) solution using a hash set\n    hash_set = set()\n    max_len = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                hash_set.add(i)\n                break\n    max_len = len(hash_set)\n    return max_len\n    \ndef coin_change(arr, n, sum):\n    '''\n    Given an array of positive and negative integers, find the minimum number of coins required to get a sum of money.\n    '''\n    #O(n * m^2)\n    # for i in range(1, sum + 1):\n    #     for j in range(len(arr)):\n    #         if arr[j] == i:\n    #             m[i] = 1\n    #             break\n    #         elif arr[j] > i:\n    #             m[i] = m[i] + m[i - arr[j]]\n    #     return m[sum]\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def find_pair(a, b):\n        for x in range(len(a)):\n            for y in range(len(b)):\n                if a[x]%b[y] == 0:\n                    return True\n        return False\n    s = []\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if find_pair(a, a[i:j+1]):\n                s.append(j-i+1)\n    return max(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    ans = 1\n    for i in range(len(a)):\n        if a[i]%ans!= 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #check that input is valid\n    if a == []:\n        return 0\n    elif a == None:\n        return 0\n    elif type(a)!= list:\n        return 0\n    else:\n        pass\n    #if list is empty, return 0\n    if len(a) == 0:\n        return 0\n    #initialize first two values\n    a.sort()\n    largest = 1\n    #test every value to see if it is divisible by the next two values\n    for i in range(0, len(a) - 1):\n        #check if value is divisible by the next two values\n        if a[i] % a[i+1] == 0 and a[i] % a[i+2] == 0:\n            #if so, increment largest\n            largest = largest + 1\n    return largest\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = [2, 3, 5, 7, 11]\n    max_size = 0\n    a.sort()\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                max_size = max(max_size, j-i+1)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= n or len(arr2)!= n:\n        return 'Not possible'\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i,j = 0,0\n    while i<n and j<n:\n        if arr1[i] < arr2[j]:\n            i+=1\n        else:\n            j+=1\n    return arr1[i] if i == n else arr2[j]\n    \ndef merge(arr1, arr2, n):\n    '''\n    Merge two arrays and find the median of the merged array.\n    '''\n    arr = [None]*(n+1)\n    i = j = k = 0\n    while i<n and j<n:\n        if arr1[i] < arr2[j]:\n            arr[k] = arr1[i]\n            i+=1\n        else:\n            arr[k] = arr2[j]\n            j+=1\n        k+=1\n    while i<n:\n        arr[k] = arr1[i]\n        i+=1\n        k+=1\n    while j<n:\n        arr[k] = arr2[j]\n        j+=1\n        k+=1\n    return get_median(arr1, arr2, n)\n    \ndef find_median(arr, n):\n    '''\n    Time complexity O(n log n).\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    else:\n        mid = n//2\n        if n%2 == 0:\n            return (merge(arr[:mid], arr[mid:], n) + merge(arr[:mid], arr[mid:], n))/2\n        else:\n            return merge(arr[:mid], arr[mid:], n)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.append(float('inf'))\n    arr2.append(float('inf'))\n    left = 0\n    right = n\n    while left <= right:\n        i = int((left+right)/2)\n        j = int((n+1+right)/2) - i\n        if i < n and j > 0 and arr1[i] < arr2[j-1] and arr2[j] < arr1[i+1]:\n            return min(arr1[i], arr2[j])\n        elif i > 0 and j < n and arr2[j] < arr1[i-1] and arr1[i] < arr2[j+1]:\n            return min(arr2[j], arr1[i])\n        elif i == 0:\n            return min(arr2[j], arr1[i+1])\n        elif j == 0:\n            return min(arr1[i], arr2[j+1])\n        elif i == n:\n            return min(arr1[i-1], arr2[j])\n        elif j == n:\n            return min(arr2[j-1], arr1[i])\n        elif arr1[i] < arr2[j]:\n            left = i + 1\n        else:\n            right = i - 1\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    while i<n and j<n:\n        if arr1[i]>arr2[j]:\n            temp = arr1[i]\n            arr1[i] = arr2[j]\n            arr2[j] = temp\n            i+=1\n            j+=1\n        else:\n            i+=1\n    \n    if n%2==0:\n        return (arr1[int(n/2)]+arr2[int(n/2)])/2.0\n    else:\n        return arr1[int(n/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    \n    m1 = n // 2\n    m2 = n // 2 + 1\n    \n    if n % 2 == 0:\n        return (get_median(arr1[:m1], arr2[:m2], m1) + get_median(arr1[m1:], arr2[m2:], n - m1)) / 2\n    else:\n        return get_median(arr1[:m1], arr2[:m2], m1)\n    \n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    new_arr = []\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            new_arr.append(arr1[i])\n            i += 1\n        else:\n            new_arr.append(arr2[j])\n            j += 1\n        k += 1\n    \n    # add the remaining elements\n    while i < n:\n        new_arr.append(arr1[i])\n        i += 1\n        k += 1\n    while j < n:\n        new_arr.append(arr2[j])\n        j += 1\n        k += 1\n    if k % 2 == 0:\n        median = (new_arr[k // 2] + new_arr[(k // 2) - 1]) / 2\n    else:\n        median = new_arr[k // 2]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    i = 0\n    j = 0\n    c = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            c += 1\n            i += 1\n            j += 1\n    if c % 2 == 0:\n        return (arr1[i - 1] + arr2[j - 1]) / 2\n    else:\n        if j == n:\n            return arr1[i - 1]\n        else:\n            return arr2[j - 1]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Calculate the sum of two lists\n    sum = arr1 + arr2\n    sum.sort()\n    # if the length of sum is odd\n    if len(sum) % 2!= 0:\n        return sum[int(len(sum) / 2)]\n    else:\n        return (sum[int(len(sum) / 2)] + sum[int((len(sum) / 2) - 1)]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = arr1[:]\n    l2 = arr2[:]\n    i = 0\n    while i < n:\n        if l1[i] > l2[i]:\n            l1.insert(i, l2[i])\n            l1.insert(i+1, l1[i])\n            i += 2\n        i += 1\n    print(l1)\n    # l1.sort()\n    # l2.sort()\n    # print(l1[n//2])\n    # print(l2[n//2])\n    # print(l1[n//2+1])\n    # print(l2[n//2+1])\n    print(l1[n//2] if n % 2 == 0 else (l1[n//2] + l1[n//2+1])/2)\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**n)\n    return new_list\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\nprint(nth_nums([1, 2, 3, 4], 2))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if type(n)!= int:\n        raise TypeError('n must be an integer')\n    if n < 0:\n        raise ValueError('n must be a positive integer')\n    if not nums:\n        raise ValueError('nums cannot be empty')\n    for num in nums:\n        if type(num)!= int:\n            raise TypeError('nums must be a list of integers')\n    power = []\n    for i in range(len(nums)):\n        power.append(nums[i]**n)\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # list comprehension\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    ans = []\n    for i in nums:\n        ans.append(i**n)\n    return ans\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    lst = [i**n for i in nums]\n    return lst\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**n)\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]=nums[i]**n\n    return nums\nnums=[1,2,3,4,5]\nn=2\nprint(nth_nums(nums,n))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\ndef get_list(x):\n    '''\n    Write a python function to get the last element of the list and add it to the beginning of the list.\n    '''\n    x.insert(0,x[-1])\n    x.pop()\n    return x\ndef print_list(x):\n    '''\n    Write a python function to print the list.\n    '''\n    print(x)\ndef reverse_list(x):\n    '''\n    Write a python function to reverse the list.\n    '''\n    x.reverse()\n    return x\ndef main():\n    # Part 1\n    print('\\nPart 1: ')\n    numList = [1,2,3,4,5]\n    print('Original list:')\n    print_list(numList)\n    print('\\nSwapped list:')\n    print_list(swap_List(numList))\n    print('\\nFinal list:')\n    print_list(swap_List(numList))\n    # Part 2\n    print('\\n\\nPart 2: ')\n    numList1 = [1,2,3,4,5]\n    print('Original list:')\n    print_list(numList1)\n    print('\\nFirst and last element added to the beginning of the list:')\n    print_list(get_list(numList1))\n    print('\\nFinal list:')\n    print_list(get_list(numList1))\n    # Part 3\n    print('\\n\\nPart 3: ')\n    numList2 = [1,2,3,4,5]\n    print('Original list:')\n    print_list(numList2)\n    print('\\nReverse the list:')\n    print_list(reverse_list(numList2))\n    print('\\nFinal list:')\n    print_list(reverse_list(numList2))\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    list = newList\n    length = len(list)\n    if length > 2:\n        list[0], list[length - 1] = list[length - 1], list[0]\n        print(list)\n        return list\n    else:\n        print(list)\n        return list\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList \n    \ndef reverse_List(newList): \n    '''\n    Write a python function to reverse a list.\n    '''\n    start = 0\n    end = len(newList)-1 \n    while(start < end): \n        newList[start], newList[end] = newList[end], newList[start] \n        start += 1\n        end -= 1\n    return newList \n    \ndef remove_item_from_list(newList, item): \n    '''\n    Write a python function to remove an item from a list.\n    '''\n    newList.remove(item) \n    return newList \n    \ndef copy_list(newList): \n    '''\n    Write a python function to copy a list.\n    '''\n    listCopy = newList[:]\n    return listCopy \n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList) \n    i = 0\n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n    \ndef check_palindrome(inputList):\n    '''\n    Write a python function to check if a list contains a palindrome.\n    '''\n    rev = inputList[::-1]\n    if rev == inputList:\n        return True\n    return False\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Use pop and append method to achieve this\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size-1]\n    newList[size-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    temp = newList[0]\n    newList[0] = newList[length-1]\n    newList[length-1] = temp\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (r**2)*(math.pi/2)\n    print(\"The area is :\", area)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        return 3.14*(r**2)\n    \n    def nr(r) :\n        if r > 0 :\n            return area(r)\n        else :\n            return 0\n    \n    if r > 0 :\n        return nr(r)\n    else :\n        return 0\n    \n    \ndef triangle_area(r) :\n    '''\n    Writ"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * (r**2) / 2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Formula for area of triangle is 1/2 * b * h where b = r and h = 2r\n    triangle_area = (math.pi * (r ** 2) * (2 * r)) / 2\n    return triangle_area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        return -1\n    return 3.14 * (r ** 2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import sqrt\n    def area(r):\n        area = 3.14159 * r * r\n        return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi * r * r\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    from random import uniform\n    import numpy as np\n    \n    def area(r) :\n        return r**2*pi*(2*np.arcsin(r/np.sqrt(2)))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    from sympy import sympify, SympifyError, solve, symbols\n    from math import pi\n    \n    try:\n        r = sympify(r)\n        \n    except SympifyError:\n        print(\"Enter a valid radius\")\n        \n    else:\n        x = symbols('x')\n        f = x**2 - (r**2)\n        p = np.roots(f)\n        \n        for i in p:\n            \n            if i>0 and i<r:\n                \n                z = np.sqrt(i)\n                \n                a = np.arccos(z/r)\n                \n                a = np.degrees(a)\n                \n                a = np.round(a, 2)\n                \n                print(\"Area of the largest triangle that can be inscribed in a semicircle with a given radius is {}\".format(a))\n                \n                plt.plot((0,r), (0,0), color ='red')\n                plt.plot((0,r), (0,z), color ='red')\n                plt.plot((r,r), (0,0), color ='red')\n                plt.plot((r,r), (0,z), color ='red')\n                plt.plot((r,0), (z,z), color ='red')\n                plt.plot((r,0), (0,z), color ='red')\n                plt.plot((0,r), (z,z), color ='red')\n                plt.plot((0,r), (0,0), color ='red')\n                plt.plot((0,r), (z,0), color ='red')\n                plt.plot((r,0), (0,0), color ='red')\n                plt.plot((r,0), (z,0), color ='red')\n                plt.plot((0,r), (0,0), color ='red')\n                plt.plot((0,r), (z,z), color ='red')\n                \n                plt.plot((0,r), (z,z), color = 'black')\n                plt.plot((r,r), (z,z), color = 'black')\n                plt.plot((r,0), (0,0), color = 'black')\n                plt.plot((r,0), (z,0), color = 'black')\n                plt.plot((0,r), (0,0), color = 'black')\n                plt.plot((0,r), (0,z), color = 'black')\n                plt.plot((0,r), (z,z), color = 'black')\n                \n                plt.show()\n                \n                break\n        \n        \nif __name__ == \"__main__\":\n    import sys\n    \n    if len(sys.argv) > 1:\n        radius = sys.argv[1]\n    else:\n        try:\n            radius = input(\"Enter the radius: \")\n            \n        except NameError:\n            print(\"Enter a valid radius\")\n            sys.exit(1)\n    triangle_area(radius)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end and array[start] == start:\n        return array[end] + 1\n    if end == None:\n        end = len(array)\n    if start < end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid] < mid:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n    else:\n        return array[start] + 1\n    \nprint(find_First_Missing([0,1,2,4,5,6,7]))\nprint(find_First_Missing([1,2,3,4,6,7,8]))\nprint(find_First_Missing([0,1,2,3,4,6,7,8,9]))\nprint(find_First_Missing([0]))\nprint(find_First_Missing([0,1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= array[i+1]-1:\n            return array[i]+1\n    return array[-1]+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #if no end point is given, use the whole array\n    if end is None:\n        end = len(array)-1\n    # check for the first missing number from the array\n    for index in range(start,end+1):\n        # if an element is missing and its index is not equal to the current index, return its index\n        if array[index]!= index and array[index-1] == index-1:\n            return index\n    # if all numbers from 0 to end are present, then the smallest missing number is the number after end\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end < start:\n        return -1\n    \n    if start == end:\n        return array[start]\n    if start == end -1:\n        if array[start] == array[end]:\n            return array[end]\n        else:\n            return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start == end:\n        return start+1\n    if start < end:\n        mid = (end+start)//2\n        if array[mid]==mid+1:\n            return find_First_Missing(array,start=mid+1,end=end)\n        elif array[mid]==mid:\n            return find_First_Missing(array,start=start,end=mid)\n        else:\n            return find_First_Missing(array,start=mid+1,end=end)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # if end is not specified then set it to the end of the list\n    if end is None:\n        end = len(array)-1\n    # in case there are not at least 2 elements in the list\n    if end <= start:\n        return 1\n    # set the middle index to the midpoint of the start and end indexes\n    mid = (start+end)//2\n    # if the midpoint value is less than the next element\n    # then the smallest missing number is to the right of the midpoint\n    if array[mid] < array[mid+1]:\n        return find_First_Missing(array,mid+1,end)\n    # if the midpoint value is greater than the previous element\n    # then the smallest missing number is to the left of the midpoint\n    elif array[mid-1] > array[mid]:\n        return find_First_Missing(array,start,mid-1)\n    # if the midpoint value is equal to the next element\n    # then the smallest missing number is between the midpoint and the next element\n    # so we need to find the smallest missing number in the right of the midpoint\n    # and the left of the midpoint\n    else:\n        # if there are no duplicate values between the midpoint and the next element\n        # then the smallest missing number is between the midpoint and the next element\n        if array[mid]!= array[mid+1]:\n            return array[mid] + 1\n        # otherwise, the smallest missing number is between the midpoint\n        # and the previous element\n        # so we need to find the smallest missing number between the midpoint and the previous element\n        # and between the midpoint and the next element\n        return min(find_First_Missing(array,mid+1,end),find_First_Missing(array,start,mid-1))\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if array==[]:\n        return 1\n    if start>end:\n        return 1\n    mid=int((start+end)/2)\n    if array[mid]!=mid:\n        if mid==0:\n            return 1\n        else:\n            return mid\n    elif array[mid]==mid:\n        return find_First_Missing(array,start=mid+1,end=end)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not isinstance(array,list):\n        raise TypeError('Not a List')\n    elif len(array)==0:\n        raise ValueError('Array is empty')\n    elif not all(isinstance(n,int) and n>=0 for n in array):\n        raise ValueError('List of elements should be positive integers only')\n    if end is None:\n        end=len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return i+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not isinstance(array,list):\n        return None\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    #return string.replace(' ','%20')\n    return re.sub('\\s+', '%20',string)\n    \ndef remove_newline(string):\n    '''\n    Write a function to remove all the newline characters from the given string.\n    '''\n    #return string.replace('\\n',' ')\n    return re.sub('\\n+', '',string)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    return string.replace(' ', '%20')\n    \n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    print(even)\n    return even\nlist = [23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]\nprint(Split(list))\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd = []\n    even = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n        else:\n            even.append(i)\n    print(\"Odd Numbers: \", odd)\n    print(\"Even Numbers: \", even)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in range(len(list)): \n        if list[i]%2 == 0: \n            print(list[i], end=\" \")\n    return\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in list:\n        if(i%2==0):\n            print(i)\n    return list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1=[]\n    list2=[]\n    for num in list:\n        if num % 2 ==0:\n            list1.append(num)\n        else:\n            list2.append(num)\n    return list1,list2\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Splitting a list\n    left = []\n    right = []\n    # Iterating the list \n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            left.append(list[i])\n        else:\n            right.append(list[i])\n    print(left)\n    print(right)\nSplit([1, 2, 3, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    for i in list: \n        if (i % 2 == 0): \n            even_list.append(i) \n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd = []\n    even = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n        else:\n            even.append(i)\n    return [odd, even]\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    (x, y) = ele\n    adjacent = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n    for i in range(len(adjacent)):\n        if adjacent[i][0] < 0 or adjacent[i][1] < 0:\n            adjacent.remove(adjacent[i])\n        else:\n            pass\n    return adjacent\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x, y - 1), (x + 1, y), (x, y + 1), (x - 1, y)]\n    if (x, y - 1) not in sub:\n        adj.remove((x, y - 1))\n        sub.append((x, y - 1))\n    if (x + 1, y) not in sub:\n        adj.remove((x + 1, y))\n        sub.append((x + 1, y))\n    if (x, y + 1) not in sub:\n        adj.remove((x, y + 1))\n        sub.append((x, y + 1))\n    if (x - 1, y) not in sub:\n        adj.remove((x - 1, y))\n        sub.append((x - 1, y))\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    adjacent = [ele]\n    for xy in [(x, y - 1), (x, y + 1), (x - 1, y), (x + 1, y), (x - 1, y - 1), (x + 1, y + 1), (x - 1, y + 1), (x + 1, y - 1)]:\n        if xy in sub:\n            pass\n        else:\n            adjacent.append(xy)\n    return tuple(adjacent)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for k in range(len(ele)): \n        for i in range(len(ele)):\n            if i!= k:\n                if abs(i-k) == 1: \n                    sub.append(ele[i])\n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent_coordinates = []\n    x_coord, y_coord = ele[0], ele[1]\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if not (i == 0 and j == 0):\n                adjacent_coordinates.append((x_coord + i, y_coord + j))\n    return adjacent_coordinates\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    s, t, u, v = ele\n    return [(s+1, t, u, v), (s+1, t, u, v+1), (s, t+1, u, v), (s, t+1, u, v+1), (s-1, t, u, v), (s-1, t, u, v+1), (s, t-1, u, v), (s, t-1, u, v+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [t for t in ((ele[0]+1,ele[1]),(ele[0]-1,ele[1]),(ele[0],ele[1]+1),(ele[0],ele[1]-1)) if t not in sub]\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    a, b = ele\n    for x in range(-1, 2):\n        for y in range(-1, 2):\n            if x == 0 and y == 0:\n                continue\n            sub.append((a + x, b + y))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return_list = []\n    for i in range(len(ele)):\n        for j in range(len(ele)):\n            return_list.append((ele[0] - 1 + i, ele[1] - 1 + j))\n    return return_list\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for x, y in [(-1, 0), (0, 1), (1, 0), (0, -1)]:\n        if (x+ele[0], y+ele[1]) not in sub:\n            sub.append((x+ele[0], y+ele[1]))\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace('-', '_').replace(' ', '-')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = text.replace('_','').replace(' ', '_')\n    print(result)\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = text.replace(' ', '_')\n    result = result.replace('_','')\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_new = text.replace(' ', '_')\n    text_new = text_new.replace('_','')\n    return text_new\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n    elif '_' in text:\n        text = text.replace('_','')\n    return text\n    # return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not num_list or type(num_list)!= list:\n        return []\n    l = [num for num in num_list if type(num)!= int]\n    r = [num for num in num_list if type(num) == int]\n    return r + l\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list.append(num_list[i])\n    #         num_list.remove(num_list[i])\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #print(num_list)\n    i = 0\n    j = 0\n    n = len(num_list)\n    while j<n:\n        if num_list[j]!=0:\n            num_list[i] = num_list[j]\n            i+=1\n        j+=1\n    while i<n:\n        num_list[i] = 0\n        i+=1\n    #print(num_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Input list is not in order\n    if num_list == sorted(num_list, reverse=True):\n        return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.sort(reverse=True)\n    print(num_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0, len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(0))\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros_loc = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zeros_loc += 1\n    for j in range(zeros_loc):\n        num_list.pop(0)\n        num_list.append(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    try:\n        num_list.remove(0)\n        num_list.append(0)\n    except:\n        pass\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while 0 in num_list:\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    l = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            l.append(num_list[i])\n    for j in range(len(l)):\n        num_list[j] = l[j]\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    ans = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            ans += arr[i]^arr[j]\n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            result += arr[i] ^ arr[j]\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    ans = 0\n    for i in range(1, n) : \n        ans += arr[i] ^ arr[i - 1] \n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    l = []\n    for i in range(n):\n        for j in range(i+1,n):\n            l.append(arr[i]^arr[j])\n    return sum(l)\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pair_xor = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            pair_xor ^= arr[i] ^ arr[j]\n    return pair_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            sum = sum ^ arr[i] ^ arr[j] \n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    # iterate through the list \n    for i in range(n): \n        # iterate through the list again \n        for j in range(i + 1,n): \n            ans = ans ^ arr[i] ^ arr[j]\n    return ans \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0 \n    for i in range(n):\n        for j in range(i+1,n):\n            ans += arr[i] ^ arr[j]\n    return ans \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor ^= arr[i] ^ arr[j]\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(arr[i]^arr[j] for i in range(n) for j in range(i+1,n))\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h,val)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    result = []\n    hq.heapify(iterable)\n    for _ in range(len(iterable)):\n        result.append(hq.heappop(iterable))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return hq.heapify(iterable)\n    \ndef bucket_sort(iterable):\n    '''\n    Write a function to sort the given list using buckets.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap\n    minHeap = []\n    for i in iterable:\n        hq.heappush(minHeap, i)\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for x in iterable:\n        hq.heappush(h,x)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return iterable\n    iterable = [iterable[0]] + heap_sort(iterable[1:])\n    heapq._heapify_max(iterable)\n    return iterable\n    "
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    for value in iterable:\n        hq.heappush(h, value)\n    for i in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n    \ndef swap(A,i,j):\n    '''\n    Performs a swapping of 2 elements.\n    '''\n    temp = A[i]\n    A[i] = A[j]\n    A[j] = temp\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        print(\"You lost nothing.\")\n    elif sale_amount < actual_cost:\n        print(\"You didn't get any profit.\")\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # print(actual_cost)\n    # print(sale_amount)\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if(actual_cost == sale_amount):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost <= sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3 or t < -45:\n        return\n    else:\n        v = int(v)\n        t = int(t)\n        return round(35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)\n    return round(wind_chill_index)\nprint(wind_chill(23, -15))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))\nprint(wind_chill(20, -15))\nprint(wind_chill(25, -20))\nprint(wind_chill(15, -25))"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    wci = 13.12 + (0.6215 * t) - (11.37 * pow(v,0.16)) + (0.3965 * t * pow(v,0.16))\n    return round(wci)\nprint(wind_chill(10,50))\nprint(wind_chill(12,45))\nprint(wind_chill(40,45))\nprint(wind_chill(8,40))\nprint(wind_chill(0,40))\nprint(wind_chill(5,40))\nprint(wind_chill(-10,40))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=0\n    v=int(v)\n    t=int(t)\n    if v<3 or t<0:\n        wci=0\n    elif t>=12 and v>=3:\n        wci=35.74+(0.6215*t)+(0.4275*t-35.75)*(math.pow(v,0.16))\n    elif t<=12 and v>=3:\n        wci=13.12+(0.6215*t)-(11.37*(math.pow(v,0.16)))\n    elif t>=12 and v<=3:\n        wci=35.75+(0.4275*t-35.75)*(math.pow(v,0.16))\n    else:\n        wci=13.12+(0.6215*t)-(11.37*(math.pow(v,0.16)))\n    wci=round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=35.74\n    b=0.6215\n    c=35.75\n    d=0.4275\n    e=0.07556\n    f=((v**0.16)*(t**0.16))\n    return int(round(a+(b*t)-(c*f)+(d*t*f)+(e*t**3)))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    V_knots = v/1.852\n    T_celsius = t\n    T_kelvin = T_celsius + 273.15\n    wci = 13.12 + 0.6215*T_kelvin - 11.37*math.pow(V_knots,0.16) + 0.3965*T_kelvin*math.pow(V_knots,0.16)\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    result=35.74+(0.6215*v)*(math.sqrt(t))-(35.75*v**0.16)*(t**0.16)\n    return round(result)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    wci = 13.12 + 0.6215 * t + 0.3965 * t - 11.37 * math.pow(10, -5) * t ** 2 + 0.1649 * t ** 3 - 0.0171 * t ** 4\n    wci = round(wci)\n    return wci\nprint(wind_chill(0,0))\nprint(wind_chill(0,50))\nprint(wind_chill(30,0))\nprint(wind_chill(30,50))\nprint(wind_chill(60,0))\nprint(wind_chill(60,50))\nprint(wind_chill(90,0))\nprint(wind_chill(90,50))\nprint(wind_chill(120,0))\nprint(wind_chill(120,50))\nprint(wind_chill(150,0))\nprint(wind_chill(150,50))\nprint(wind_chill(180,0))\nprint(wind_chill(180,50))\nprint(wind_chill(210,0))\nprint(wind_chill(210,50))\nprint(wind_chill(240,0))\nprint(wind_chill(240,50))\nprint(wind_chill(270,0))\nprint(wind_chill(270,50))\nprint(wind_chill(300,0))\nprint(wind_chill(300,50))\nprint(wind_chill(330,0))\nprint(wind_chill(330,50))\nprint(wind_chill(360,0))\nprint(wind_chill(360,50))\nprint(wind_chill(390,0))\nprint(wind_chill(390,50))\nprint(wind_chill(420,0))\nprint(wind_chill(420,50))\nprint(wind_chill(450,0))\nprint(wind_chill(450,50))\nprint(wind_chill(480,0))\nprint(wind_chill(480,50))\nprint(wind_chill(510,0))\nprint(wind_chill(510,50))\nprint(wind_chill(540,0))\nprint(wind_chill(540,50))\nprint(wind_chill(570,0))\nprint(wind_chill(570,50))\nprint(wind_chill(600,0))\nprint(wind_chill(600,50))\nprint(wind_chill(630,0))\nprint(wind_chill(630,50))\nprint(wind_chill(660,0))\nprint(wind_chill(660,50))\nprint(wind_chill(690,0))\nprint(wind_chill(690,50))\nprint(wind_chill(720,0))\nprint(wind_chill(720,50))\nprint(wind_chill(750,0))\nprint(wind_chill(750,50))\nprint(wind_chill(780,0))\nprint(wind_chill(780,50))\nprint(wind_chill(810,0))\nprint(wind_chill(810,50))\nprint(wind_chill(840,0))\nprint(wind_chill(840,50))\nprint(wind_chill(870,0))\nprint(wind_chill(870,50))\nprint(wind_chill(900,0))\nprint(wind_chill(900,50))\nprint(wind_chill(930,0))\nprint(wind_chill(930,50))\nprint(wind_chill(960,0))\nprint(wind_chill(960,50))\nprint(wind_chill(990,0))\nprint(wind_chill(990,50))\nprint(wind_chill(1020,0))\nprint(wind_chill(1020,50))\nprint(wind_chill(1050,0))\nprint(wind_chill(1050,50))\nprint(wind_chill(1080,0))\nprint(wind_chill(1080,50))\nprint(wind_chill(1110,0))\nprint(wind_chill(1110,50))\nprint(wind_chill(1140,0))\nprint(wind_chill(1140,50))\nprint(wind_chill(1170,0))\nprint(wind_chill(1170,50))\nprint(wind_chill(1200,0))\nprint(wind_chill(1200,50))\nprint(wind_chill(1230,0))\nprint(wind_chill(1230,50))\nprint(wind_chill(1260,0))\nprint(wind_chill(1260,50))\nprint(wind_chill(1290,0))\nprint(wind_chill(1290,50))\nprint(wind_chill(1320,0))\nprint(wind_chill(1320,50))\nprint(wind_chill(1350,0))\nprint(wind_chill(1350,50))\nprint(wind_chill(1380,0))\nprint(wind_chill(1380,50))\nprint(wind_chill(1410,0))\nprint(wind_chill(1410,50))\nprint(wind_chill(1440,0))\nprint(wind_chill(1440,50))\nprint(wind_chill(1470,0))\nprint(wind_chill(1470,50))\nprint(wind_chill(1500,0))\nprint(wind_chill(1500,50))\nprint(wind_chill(1530,0))\nprint(wind_chill(1530,50))\nprint(wind_chill(1560,0))\nprint(wind_chill(1560,50))\nprint(wind_chill(1590,0))\nprint(wind_chill(1590,50))\nprint(wind_chill(1620,0))\nprint(wind_chill(1620,50))\nprint(wind_chill(1650,0))\nprint(wind_chill(1650,50))\nprint(wind_chill(1680,0))\nprint(wind_chill(1680,50))\nprint(wind_chill(1710,0))\nprint(wind_chill(1710,50))\nprint(wind_chill(1740,0))\nprint(wind_chill(1740,50))\nprint(wind_chill(1770,0))\nprint(wind_chill(1770,50))\nprint(wind_chill(1800,0))\nprint(wind_chill(1800,50))\nprint(wind_chill(1830,0))\nprint(wind_chill(1830,50))\nprint(wind_chill(1860,0))\nprint(wind_chill(1860,50))\nprint(wind_chill(1890,0))\nprint(wind_chill(1890,50))\nprint(wind_chill(1920,0))\nprint(wind_chill(1920,50))\nprint(wind_chill(1950,0))\nprint(wind_chill(1950,50))\nprint(wind_chill(1980,0))\nprint(wind_chill(1980,50))\nprint(wind_chill(2010,0))\nprint(wind_chill(2010,50))\nprint(wind_chill(2040,0))\nprint(wind_chill(2040,50))\nprint(wind_chill(2070,0))\nprint(wind_chill(2070,50))\nprint(wind_chill(2100,0))\nprint(wind_chill(2100,50))\nprint(wind_chill(2130,0))\nprint(wind_chill(2130,50))\nprint(wind_chill(2160,0))\nprint(wind_chill(2160,50))\nprint(wind_chill(2190,0))\nprint(wind_chill(2190,50))\nprint(wind_chill(2220,0))\nprint(wind_chill(2220,50))\nprint(wind_chill(2250,0))\nprint(wind_chill(2250,50))\nprint(wind_chill(2280,0))"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # enter your code here\n    # print(wind_chill(10,2))\n    \n    # WCI = 13.12 + 0.6215(T) + 0.3965(V**0.16)\n    wci = 13.12 + (0.6215 * t) + (0.3965 * (v ** 0.16))\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if (v<0 or t<0):\n        return \"Inputs should be positive\"\n    elif(t<50 and v>=3.0 and v<=120):\n        result = 35.74 + 0.6215*t + (0.4275*t - 35.75) * math.pow(v,0.16)\n        return int(round(result))\n    else:\n        return \"Temp too high for wind chill\"\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = sample_names\n    new_name_list = []\n    for name in name_list:\n        if name.islower():\n            new_name_list.append(name)\n    return sum([len(name) for name in new_name_list])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return len(''.join([name for name in sample_names if not name[0].islower()]))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lst = []\n    sample_names = sample_names.split(',')\n    for n in sample_names:\n        if n[0].islower():\n            lst.append(n)\n    #print(lst)\n    return len(''.join(lst))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [\"Abracadabra\", \"ajj\", \"bob\", \"Chun-Li\", \"Denny\", \"Emily\", \"Emma\", \"Fatih\", \"Helen\", \"Himel\", \"Ismail\", \"Ivan\", \"Jafar\", \"Jules\", \"Liset\", \"Maksym\", \"Paul\", \"Vlad\"]\n    lst_lower = []\n    for i in sample_names:\n        if i[0].islower():\n            lst_lower.append(i)\n    for i in lst_lower:\n        sample_names.remove(i)\n    print(sample_names)\n    sum_len = 0\n    for i in sample_names:\n        sum_len = sum_len + len(i)\n    print(sum_len)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    summation = 0\n    for name in sample_names:\n        if name[0].islower():\n            summation += len(name)\n    return summation\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    l = []\n    for i in sample_names:\n        if i[0].islower():\n            continue\n        l.append(i)\n    return len(''.join(l))"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['a.B', 'b.C', 'c.D', 'd.A', 'A.f', 'b.G', 'a.B']\n    # Your function should return 11\n    # As the names a and b have 2 characters each, you should return 11 (2 + 2 + 2 + 2 + 2 + 2 + 2)\n    # Don't worry about the lowercase letters in this exercise.\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    x=[]\n    for i in sample_names:\n        if i[0].islower():\n            x.append(i)\n    #print(x)\n    sum=0\n    for i in x:\n        sum=sum+len(i)\n    print(sum)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = sample_names\n    sample_names = [x for x in names if not x[0].islower()]\n    names = [x for x in names if x[0].islower()]\n    return sum(list(map(len, names)))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # sample_names = [\"Rick Sanchez\", \"Morty Smith\", \"Summer Smith\", \"Jerry Smith\", \"Beth Smith\"]\n    return sum(len(sample_name) - 1 for sample_name in sample_names if sample_name[0].islower())\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','').replace(')','')\n    return items\n    \ndef remove_parenthesis_1(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while '(' in items:\n        items = items[1:-1]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(\"\\([^()]*\\)\", \"\", items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_list = []\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    for item in items.split(','):\n        new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items =''.join(items)\n    while(re.search(r\"\\(.*?\\)\", items)):\n        items = re.sub(r\"\\(.*?\\)\", \"\", items)\n    items = items.split(' ')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'[\\(\\)]', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\",\"\")\n    items = items.replace(\")\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\":\",\"\")\n    items = items.replace(\";\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"'\",\"\")\n    items = items.replace(\"-\",\" \")\n    items = items.replace(\"_\",\" \")\n    items = items.replace(\"'\",\"\")\n    items = items.replace(\"?\",\"\")\n    items = items.replace(\"!\",\"\")\n    items = items.replace(\".\",\"\")\n    items = items.replace(\"/\",\"\")\n    items = items.replace(\"\\\\\",\"\")\n    items = items.replace(\"'\",\"\")\n    items = items.replace(\"\\\"\",\"\")\n    items = items.replace(\"`\",\"\")\n    items = items.replace(\"{\",\"\")\n    items = items.replace(\"}\",\"\")\n    items = items.replace(\"[\",\"\")\n    items = items.replace(\"]\",\"\")\n    items = items.replace(\"@\",\"\")\n    items = items.replace(\",\",\"\")\n    items = items.replace(\"*\",\"\")\n    items = items.replace(\"--\",\"\")\n    items = items.replace(\"~\",\"\")\n    items = items.replace(\"#\",\"\")\n    items = items.replace(\"%\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u2013\",\"\")\n    items = items.replace(\"+\",\"\")\n    items = items.replace(\"-\",\"\")\n    items = items.replace(\"=\",\"\")\n    items = items.replace(\"&\",\"\")\n    items = items.replace(\"$\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"[\",\"\")\n    items = items.replace(\"]\",\"\")\n    items = items.replace(\"|\",\"\")\n    items = items.replace(\"'\",\"\")\n    items = items.replace(\"=\",\"\")\n    items = items.replace(\"'\",\"\")\n    items = items.replace(\"\\\"\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u00bb\",\"\")\n    items = items.replace(\"\u00ab\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"#\",\"\")\n    items = items.replace(\"^\",\"\")\n    items = items.replace(\"*\",\"\")\n    items = items.replace(\"&\",\"\")\n    items = items.replace(\"^\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"/\",\"\")\n    items = items.replace(\"\\\\\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u00b7\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2022\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2020\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u2026\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"(\",\"\")\n    items = items.replace(\")\",\"\")\n    items = items.replace(\"\u2013\",\"\")\n    items = items.replace(\"-\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u00bb\",\"\")\n    items = items.replace(\"\u00ab\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"#\",\"\")\n    items = items.replace(\"^\",\"\")\n    items = items.replace(\"*\",\"\")\n    items = items.replace(\"&\",\"\")\n    items = items.replace(\"^\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"/\",\"\")\n    items = items.replace(\"\\\\\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u00b7\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2022\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2013\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u00b7\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2022\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2013\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u00b7\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2022\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2013\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u00b7\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2022\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2013\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u00b7\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2022\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2013\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u00b7\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2022\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u201c\",\"\")\n    items = items.replace(\"\u201d\",\"\")\n    items = items.replace(\"\u2018\",\"\")\n    items = items.replace(\"\u2019\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2013\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u00b7\",\"\")\n    items = items.replace(\"\u2014\",\"\")\n    items = items.replace(\"\u2022\",\"\")\n    items = items.replace(\"\u2014\",\"\")"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        #remove the ()\n        item = re.sub(r'\\(.*?\\)', '', item)\n        #remove the {}\n        item = re.sub(r'\\{.*?\\}', '', item)\n        #remove the *\n        item = re.sub(r'\\*\\*.*?\\*\\*', '', item)\n        #remove the ~\n        item = re.sub(r'~.*?~', '', item)\n        #remove the -\n        item = re.sub(r'\\-.*?\\-', '', item)\n        #remove the +\n        item = re.sub(r'\\+.*?\\+', '', item)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        for item in items:\n            item = re.sub(r\"\\(([^()]+)\\)\", \"\", item)\n    return item\nprint(remove_parenthesis(['(((((((((())))))))', '()((()))((()))', '(()()())', '(()())', '((()))', '()()()']))\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'[\\(].*?[\\)]', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_items.append(re.sub(r'\\(.+\\)', '', item))\n    return new_items\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0: return 0\n    non = 0\n    for i in range(1, n+1):\n        non += i\n    return non\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialise the sum to zero\n    sum = 0\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n+1) * (n + 2)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # Solution 1:\n    #  Nonagonal numbers are odd numbers\n    #  Thus, we use the ODD/EVEN rule to find the nonagonal numbers\n    #  By Odd - even (E) rule, we can observe that nth nonagonal number is \n    #           the sum of 2n + 1, where n is the index of nonagonal number\n    #           By EVEN - odd (O) rule, we can observe that nth nonagonal number is \n    #           the sum of 2n + 2, where n is the index of nonagonal number\n    \n    # Time Complexity : O(1)\n    # Space Complexity : O(1)\n    \n    return 2 * n + 1 if n % 2 == 0 else 2 * n + 2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s = s + i * n\n    return s\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n    \nprint(is_nonagonal(5))\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(((1+5**.5)/2)*n)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n + 1)//2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n * (2 * n - 1))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'z\\w*\\b(?!z|\\b)'\n    return re.search(regex, text)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(z[^A-Za-z]*z)'\n    text = text.replace('\\n',' ')\n    result = re.findall(pattern,text)\n    if not result:\n        return None\n    return result[0]\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) < 1:\n        return False\n    text = text.split(' ')\n    for word in text:\n        word = word.strip(' ')\n        if word[0] == 'z':\n            return False\n        if word[-1] == 'z':\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search(\"^[a-zA-Z]*z[a-zA-Z]*$\", text)\n    return match is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = \"This is a test string.\"\n    list_text = text.split(\" \")\n    for word in list_text:\n        if word[0] == \"z\":\n            return False\n        if word[len(word)-1] == \"z\":\n            return False\n        if \"z\" in word:\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r\"[^A-Z]z[A-Z]|z[^A-Z]\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # pattern = re.compile(r\"\\b\\w*z\\w*\\b\")\n    # pattern = re.compile(r\"\\b(z.+z|z.+)\\b\")\n    pattern = re.compile(r\"\\b(z.+z|z.+)\\b\")\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(\\w*z)\\w*\"\n    match = re.findall(pattern,text)\n    if match == []:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = str(text)\n    text_start = re.findall(r'^\\w*z\\w*$', text)\n    text_end = re.findall(r'\\w*z\\w*$', text)\n    text_middle = re.findall(r'\\bz\\b', text)\n    text_start = len(text_start)\n    text_end = len(text_end)\n    text_middle = len(text_middle)\n    total = text_middle + text_start + text_end\n    return total\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!^)[a-zA-Z]*z[a-zA-Z]*(?!$)'\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    lst = input[0:k]\n    rst = input[k:n]\n    rst = rst[::-1]\n    input = lst+rst\n    print(\"Reversed array upto %d position: \" %k)\n    print(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_len = len(input)\n    start = 0\n    end = input_len - 1\n    while(start < k-1 and end >= k - 1 and start <= end):\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_List = []\n    for i in range(len(input)):\n        if i > k-1:\n            reverse_List.append(input[i])\n    return reverse_List\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return None\n    \n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) < k:\n        k = len(input)\n    output = input[0:k]\n    output.reverse()\n    output.extend(input[k:])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_list = list(input)\n    reversed_list = input_list[:k]\n    reversed_list.reverse()\n    input_list[:k] = reversed_list\n    print(input_list)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k <= 0:\n        return input\n    else:\n        input = input[:k] + list(reversed(input[:k])) + input[k:]\n        return reverse_Array_Upto_K(input, k-1)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    for i in range(0, input_length - k):\n        input[i], input[input_length - 1 - i] = input[input_length - 1 - i], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    output = input[:k][::-1]\n    output += input[k:]\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new_array = [] \n    for i in range(k, len(input)):\n        new_array.append(input[i]) \n    for j in range(0, k): \n        new_array.append(input[j])\n    return new_array\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0], test_tup[1], test_dict)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup2 = tuple(test_tup)\n    test_tup2 = test_tup2 + (test_dict,)\n    return test_tup2\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup+test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def findPaths(row, col, path, visited):\n        if (row, col) in visited:\n            return\n        visited.add((row, col))\n        path.append((row, col))\n        if row == N - 1 and col == N - 1:\n            global_cost[0] += cost[row][col]\n            global_count[0] += 1\n        elif row < N - 1:\n            findPaths(row + 1, col, path, visited)\n        elif col < N - 1:\n            findPaths(row, col + 1, path, visited)\n        path.pop()\n        visited.remove((row, col))\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # For each column, compute the sum of the values and store in a list\n    column_sum = [sum(row) for row in cost]\n    # Add the last value to the list\n    column_sum.append(cost[-1][-1])\n    # For each row, compute the sum of the values and store in a list\n    row_sum = [sum(row) for row in zip(*cost)]\n    # Add the last value to the list\n    row_sum.append(cost[-1][-1])\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost: return 0\n    m, n = len(cost), len(cost[0])\n    max_sum = float('-inf')\n    for i in range(m):\n        for j in range(n):\n            curr_sum = 0\n            curr_count = 1\n            curr_sum += cost[i][j]\n            curr_count += 1\n            for r, c in ((i+1, j), (i, j+1)):\n                if 0 <= r < m and 0 <= c < n:\n                    curr_sum += cost[r][c]\n                    curr_count += 1\n            if curr_count: max_sum = max(max_sum, curr_sum / curr_count)\n    return max_sum\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def move(i, j, memo, grid, visited, path, cost):\n        if (i, j) in visited:\n            return\n        memo[i][j] = cost\n        visited.append((i, j))\n        path.append((i, j))\n        if i < N - 1 and (i + 1, j) not in visited and grid[i + 1][j]!= -1:\n            move(i + 1, j, memo, grid, visited, path, cost + grid[i + 1][j])\n        if j < N - 1 and (i, j + 1) not in visited and grid[i][j + 1]!= -1:\n            move(i, j + 1, memo, grid, visited, path, cost + grid[i][j + 1])\n        path.pop()\n        visited.pop()\n    \n    def getAllPaths(i, j, grid, memo, visited, path, cost):\n        if (i, j) in visited:\n            return\n        memo[i][j] = cost\n        visited.append((i, j))\n        path.append((i, j))\n        if i < N - 1 and (i + 1, j) not in visited and grid[i + 1][j]!= -1:\n            getAllPaths(i + 1, j, grid, memo, visited, path, cost + grid[i + 1][j])\n        if j < N - 1 and (i, j + 1) not in visited and grid[i][j + 1]!= -1:\n            getAllPaths(i, j + 1, grid, memo, visited, path, cost + grid[i][j + 1])\n    \n    N = len(cost)\n    memo = [[0] * N for i in range(N)]\n    path = []\n    visited = []\n    \n    getAllPaths(0, 0, cost, memo, visited, path, cost[0][0])\n    \n    best_cost = 0\n    for i in range(N):\n        best_cost += cost[i][0]\n    best_average = float(best_cost) / (N ** 2)\n    \n    for i in range(N):\n        for j in range(N):\n            if memo[i][j] > best_average and i < N - 1 and (i + 1, j) not in visited:\n                move(i + 1, j, memo, cost, visited, path, cost[i + 1][j])\n            if memo[i][j] > best_average and j < N - 1 and (i, j + 1) not in visited:\n                move(i, j + 1, memo, cost, visited, path, cost[i][j + 1])\n    \n    for row in memo:\n        print(row)\n    \n    best_cost = 0\n    for i in range(N):\n        best_cost += memo[i][0]\n    best_average = float(best_cost) / (N ** 2)\n    \n    return best_average\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m, n = len(cost), len(cost[0])\n    # Corner case\n    if m == 1 and n == 1:\n        return cost[0][0]\n    # Creating dp array\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = cost[0][0]\n    # We have only 1 row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    # We have only 1 column\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return (dp[m-1][n-1] + dp[m-1][n-2] + dp[m-2][n-1])/2\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def getPaths(cost,n,start,end,memo):\n        if n==1:\n            return [[start]]\n        if start[0]==end[0] and start[1]==end[1]:\n            return [[start,end]]\n        if start in memo:\n            return memo[start]\n        memo[start] = []\n        for i in range(4):\n            if i == 0:\n                p = getPaths(cost,n-1,(start[0]+1,start[1]),end,memo)\n                for path in p:\n                    memo[start].append([start,path])\n            elif i == 1:\n                p = getPaths(cost,n-1,(start[0],start[1]+1),end,memo)\n                for path in p:\n                    memo[start].append([start,path])\n            elif i == 2:\n                p = getPaths(cost,n-1,(start[0]-1,start[1]),end,memo)\n                for path in p:\n                    memo[start].append([start,path])\n            elif i == 3:\n                p = getPaths(cost,n-1,(start[0],start[1]-1),end,memo)\n                for path in p:\n                    memo[start].append([start,path])\n        return memo[start]\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Code here\n    n = len(cost)\n    m = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = cost[i][j]\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = m[i][i]\n    for k in range(n):\n        for i in range(n-k):\n            j = i + k\n            for p in range(i,j+1):\n                dp[i][j] = max(dp[i][j],dp[i][p] + dp[p+1][j] + m[i][j])\n    return dp[0][n-1]//(n+1)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # dp[i][j] will store the max average of the path from [0][0] to [i][j].\n    dp = [[-1 for _ in range(len(cost[0]))] for _ in range(len(cost))]\n    \n    # base case for the dp[0][0]\n    dp[0][0] = cost[0][0]\n    for i in range(1, len(cost)):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, len(cost[0])):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    from copy import deepcopy\n    def addToTree(root, visited, total, cost):\n        node = root\n        if node not in visited:\n            visited.append(node)\n            node.append(total + cost[node[0]][node[1]])\n            if node[0] + 1 < N:\n                addToTree(node, deepcopy(visited), total + cost[node[0]][node[1]], cost)\n            if node[1] + 1 < N:\n                addToTree(node, deepcopy(visited), total + cost[node[0]][node[1]], cost)\n            node.pop()\n            visited.pop()\n    def printTree(root):\n        if root.child:\n            for node in root.child:\n                printTree(node)\n        print(root.val)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    print(dp)\n    return dp[n-1][n-1] / (n * n)\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = dict()\n    for key in students.keys():\n        if students[key][0]>=h and students[key][1]>=w:\n            filtered_students[key] = students[key]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output_list = []\n    for student in students:\n        if students[student] >= (h,w):\n            output_list.append(student)\n    return output_list\n    \nif __name__ == '__main__':\n    students = {\n        'Peter': (180, 80),\n        'Jane': (172, 72),\n        'John': (180, 70),\n        'Alex': (160, 70),\n        'Max': (180, 98),\n        'Kate': (160, 60),\n    }\n    \n    print(filter_data(students, 160, 70))"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {student : student_data for student,student_data in students.items() if student_data[0] > h and student_data[1] > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = dict()\n    for student, value in students.items():\n        if value[0] >= h and value[1] >= w:\n            filtered_students[student] = value\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict={}\n    for key in students:\n        if students[key][0]>h and students[key][1]>w:\n            new_dict[key]=students[key]\n    return new_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name:students[name] for name in students if students[name][0] > h and students[name][1] > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for key in students:\n        if students[key][0] > h and students[key][1] > w:\n            filtered[key] = students[key]\n    return filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filter = {}\n    for i in students:\n        if (students[i][0] >= h) and (students[i][1] >= w):\n            students_filter[i] = students[i]\n    return students_filter\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for x in students:\n        if students[x][0]>=h and students[x][1]>=w:\n            filtered_data[x]=students[x]\n    print(filtered_data)\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filterd_data = {}\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            filterd_data[student] = students[student]\n    return filterd_data\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            if i == j and num1 == num2:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    # if the length of the lists don't match then return 0\n    if len(nums1)!= len(nums2):\n        return 0\n        \n    # if the length of the lists match then iterate through the lists and compare each value in the lists with the same index\n    else:\n        same_indices = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                same_indices += 1\n                \n        return same_indices\n        \ndef search_pairs(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to return indices where the lists have the same values.\n    '''\n    \n    # if the length of the lists don't match then return an empty list\n    if len(nums1)!= len(nums2):\n        return []\n        \n    # if the length of the lists match then iterate through the lists and compare each value in the lists with the same index\n    else:\n        same_indices = []\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                same_indices.append(i)\n                \n        return same_indices\n        \ndef sum_matrix(matrix_1, matrix_2):\n    '''\n    Write a function to add up two matrices. The matrix is a 2D array, where the number of rows are the same. The number of columns can differ. \n    '''\n    \n    # if the number of columns in the matrix don't match then return none\n    if len(matrix_1[0])!= len(matrix_2[0]):\n        return None\n        \n    # if the number of columns in the matrix match then iterate through the rows and columns of the matrices and add the values together\n    else:\n        new_matrix = []\n        for i in range(len(matrix_1)):\n            new_matrix.append([])\n            for j in range(len(matrix_1[0])):\n                new_matrix[i].append(matrix_1[i][j] + matrix_2[i][j])\n                \n        return new_matrix\n        \ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate the matrix 90 degrees clockwise. You should not modify the input matrix, instead, return a new matrix with the values in the rotated matrix.\n    '''\n    \n    # if the number of columns in the matrix don't match then return none\n    if len(matrix[0])!= len(matrix):\n        return None\n        \n    # if the number of columns in the matrix match then iterate through the rows and columns of the matrices and rotate the values \n    else:\n        new_matrix = []\n        for i in range(len(matrix[0])):\n            new_matrix.append([])\n            for j in range(len(matrix)):\n                new_matrix[i].append(matrix[len(matrix) - j - 1][i])\n                \n        return new_matrix\n        \ndef reverse_array(nums):\n    '''\n    Write a function to reverse an array.\n    '''\n    \n    # if the array is not empty then iterate through the array and reverse the values\n    if len(nums)!= 0:\n        for i in range(len(nums)):\n            nums[i] = nums[len(nums) - i - 1]\n            \n    return nums\n        \ndef reverse_words(sentence):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    \n    # if the sentence is not empty then iterate through the sentence and reverse the words\n    if len(sentence)!= 0:\n        words = sentence.split(' ')\n        for i in range(len(words)):\n            words[i] = words[len(words) - i - 1]\n            \n        return''.join(words)\n        \ndef reverse_words_in_place(sentence):\n    '''\n    Write a function to reverse words in a string in-place.\n    '''\n    \n    # if the sentence is not empty then iterate through the sentence and reverse the words\n    if len(sentence)!= 0:\n        words = sentence.split(' ')\n        for i in range(len(words)):\n            words.append(words[len(words) - 1 - i])\n            \n        for i in range(len(words)):\n            words[i] = words[i].strip()\n            \n        sentence = ''\n        for word in words:\n            sentence += word\n            sentence +=''\n            \n        return sentence.strip()\n        \ndef rotate_matrix_in_place(matrix):\n    '''\n    Write a function to rotate the matrix 90 degrees clockwise in-place. You should modify the input matrix directly.\n    '''\n    \n    # if the number of columns in the matrix don't match then return none\n    if len(matrix[0])!= len(matrix):\n        return None\n        \n    # if the number of columns in the matrix match then iterate through the rows and columns of the matrices and rotate the values \n    else:\n        # iterate through the rows of the matrix and reverse the row values \n        for i in range(len(matrix)):\n            matrix[i].reverse()\n            \n        # iterate through the columns of the matrix and reverse the column values \n        for j in range(len(matrix)):\n            for i in range(j):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n                \n        return matrix\n        \ndef two_sum(nums, target):\n    '''\n    Write a function to return indices of two numbers in a list that add up to a specific target. You may use the same element twice.\n    '''\n    \n    # if the list is empty then return none\n    if len(nums) == 0:\n        return None\n        \n    # if the list is not empty then iterate through the list and compare each value with the target\n    else:\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[i] + nums[j] == target and i!= j:\n                    return [i, j]\n                    \ndef search_triplets(arr):\n    '''\n    Write a function to return indices of three numbers in a list that add up to a specific target. You may use the same element twice.\n    '''\n    \n    # if the array is empty then return none\n    if len(arr) == 0:\n        return None\n        \n    # if the array is not empty then iterate through the array and compare each value with the target\n    else:\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                for k in range(len(arr)):\n                    if arr[i] + arr[j] + arr[k] == 0 and i!= j and i!= k and j!= k:\n                        return [i, j, k]\n                        \ndef three_sum(nums):\n    '''\n    Write a function to return indices of three numbers in a list that add up to a specific target. You may use the same element twice.\n    '''\n    \n    # if the array is empty then return none\n    if len(nums) < 3:\n        return None\n        \n    # if the array is not empty then iterate through the array and compare each value with the target\n    else:\n        target = 0\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                for k in range(len(nums)):\n                    if nums[i] + nums[j] + nums[k] == target and i!= j and i!= k and j!= k:\n                        return [i, j, k]\n                        \ndef search_quadruplets(arr, target):\n    '''\n    Write a function to return indices of four numbers in a list that add up to a specific target. You may use the same element twice.\n    '''\n    \n    # if the array is empty then return none\n    if len(arr) < 4:\n    "
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_count = {}\n    nums2_count = {}\n    \n    for num1 in nums1:\n        if num1 not in nums1_count:\n            nums1_count[num1] = 0\n        nums1_count[num1] += 1\n        \n    for num2 in nums2:\n        if num2 not in nums2_count:\n            nums2_count[num2] = 0\n        nums2_count[num2] += 1\n        \n    count = 0\n    for key in nums1_count:\n        if key in nums2_count:\n            count += abs(nums1_count[key] - nums2_count[key])\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert(len(nums1) == len(nums2))\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i],nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1 = [1, 2, 3]\n    nums2 = [4, 5, 6]\n    assert eq(count_same_pair(nums1, nums2), [1, 2])\n    assert eq(count_same_pair(nums2, nums1), [0, 2])\n    assert eq(count_same_pair([1], [1]), [0])\n    assert eq(count_same_pair([], []), [])\n    assert eq(count_same_pair([1, 2, 3, 4], [1, 2, 3, 4]), [0, 1, 2, 3])\n    assert eq(count_same_pair([1, 2, 3, 4], [1, 2, 3, 4, 1, 2, 3, 4]), [0, 1, 2, 3])\n    assert eq(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]), [0, 1, 2, 3, 4])\n    assert eq(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]), [0, 1, 2, 3, 4])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 1]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 1]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4]), [0, 1, 2, 3, 4, 5])\n    assert eq(count_same_pair([1, 2, "
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(digit) for digit in str(base ** power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def my_recursive_func(base, power):\n        # base case\n        if power == 1:\n            return int(str(base))\n        # base case\n        elif power == 0:\n            return 1\n        # recursive step\n        else:\n            return my_recursive_func(base, power - 1) + my_recursive_func(base, power)\n    # call function\n    return my_recursive_func(base, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in str(base):\n        total += int(i)**power\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i)**power for i in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        result += base\n        power -= 1\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_string = str(power)\n    sum = 0\n    for i in power_string:\n        sum += int(i)\n    print(sum)\npower_base_sum(100, 6)\npower_base_sum(100, 8)\npower_base_sum(100, 10)\npower_base_sum(10, 5)\npower_base_sum(10, 3)\npower_base_sum(10, 2)\npower_base_sum(10, 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base_power = base ** power\n    # total = 0\n    # for num in str(base_power):\n    #     total += int(num)\n    # return total\n    return sum([int(num) for num in str(base ** power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_bin = bin(power)[2:]\n    digits = [int(digit) for digit in str(base)]\n    while len(power_bin) > 0:\n        digit_sum = 0\n        for digit in digits:\n            digit_sum += digit ** int(power_bin[0])\n            power_bin = power_bin[1:]\n        digits.append(digit_sum)\n    return sum(digits)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    # Initialize sum\n    sum = 0\n    \n    # If power is equal to 0 then return 0\n    if power == 0:\n        return 0\n    \n    # Increment base until it reaches power\n    while base <= power:\n        \n        # Add current digit to sum\n        sum += base % 10\n        \n        # Divide by 10 to go to the next digit\n        base = base / 10\n    \n    # Return sum\n    return sum\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Write your code here\n    quote_string=re.findall('\\\"(.*)\\\"',text1)\n    # print(quote_string)\n    return quote_string\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 is not None and text1.strip():\n        text1 = text1.strip()\n        match = re.search(r'\\\"(.+?)\\\"', text1)\n        if match:\n            value = match.group(1)\n            return value\n        return None\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # pattern = re.compile(r'[\"](.*?)[\"]')\n    # x = re.findall(pattern, text1)\n    # print(x)\n    # print(type(x))\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_marks = []\n    for i in range(len(text1)):\n        if text1[i] == \"\\\"\":\n            quotation_marks.append(i)\n    print(quotation_marks)\n    x = 0\n    for i in range(len(quotation_marks)):\n        if i%2 == 0:\n            text = text1[quotation_marks[i] + 1:quotation_marks[i + 1]]\n            print(text)\n            x = x + 1\n    return x\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.sub('\\n',' ',text1)\n    # text1 = re.sub('\\t',' ',text1)\n    print(text1)\n    # print(re.search('\"\\w.*\\w\"'))\n    # print(re.findall('\"\\w.*\\w\"'))\n    # print(re.findall('\"\\w.*\\w\"',text1))\n    # print(re.findall('(?<=\").*(?=\")',text1))\n    # print(re.findall('\"(?<=\").*(?=\")',text1))\n    # print(re.findall('\"\\w.*\\w\"',text1))\n    return re.findall('\"(?<=\").*(?=\")',text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #print('input text is:',text1)\n    #result = re.findall(r'\"([^\"]*)\"', text1)\n    result = re.findall(r'\"(.*)\"', text1)\n    #print('result is:',result)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = r'\\\"([^\\\"]+)\\\"'\n    match = re.search(regex, text1)\n    return match.group(1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # text1 = \"\\\"Hello, this is a simple sentence.\\\"\"\n    pattern = re.compile('\\\".+\\\"')\n    match = pattern.search(text1)\n    if match:\n        print(match.group())\n    else:\n        print(\"not found\")\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall('\"\\S*\"', text1)\n    print(result)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"(.*?)\\\"', text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup += (test_tup[i] * test_tup[i + 1],)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    try:\n        if(type(test_tup) is tuple):\n            return tuple(i * j for i, j in enumerate(test_tup))\n        else:\n            print(\"The input is not a tuple\")\n    except Exception as e:\n        print(\"Error: \" + str(e))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i*j for i,j in zip(test_tup[:-1], test_tup[1:]))\n    \ndef div_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i / t_{i+1}.\n    '''\n    return tuple(i/j for i,j in zip(test_tup[:-1], test_tup[1:]))\n    \ndef delete_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i - t_{i+1}.\n    '''\n    return tuple(i-j for i,j in zip(test_tup[:-1], test_tup[1:]))\n    \ndef reverse_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_{i+1} * t_i.\n    '''\n    return tuple(j*i for i,j in zip(test_tup[:-1], test_tup[1:]))\n    \n    \n    \n    \n    "
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #create a list and initialize to 0\n    multiplied = [0] * len(test_tup)\n    #loop through the list and multiply each element together\n    for index in range(len(test_tup)):\n        multiplied[index] = test_tup[index] * test_tup[index + 1]\n    #put the new list into a tuple and return it\n    return tuple(multiplied)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([t_i * t_i1 for t_i, t_i1 in zip(test_tup, test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([test_tup[i]*test_tup[i+1] for i in range(len(test_tup)-1)])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[1] * test_tup[2])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    print(test_tup)\n    tuple_mul=tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])\n    tuple_mul += tuple([test_tup[-1]])\n    print(tuple_mul)\n    return tuple_mul\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # add your code here\n    my_tup = test_tup\n    return tuple(el * el2 for el, el2 in zip(my_tup[:-1], my_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (test_tup[0]*test_tup[1],test_tup[1]*test_tup[2])\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return None\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    if(len(lst1)==len(lst2)):\n        for i in range(len(lst1)):\n            lst3.append(lst1[i]+lst2[i])\n        return lst3\n    else:\n        return []\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if (len(lst1)!= len(lst2)):\n        return None\n    return [x + y for x, y in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!=len(lst2):\n        return \"Length of list don't match!\"\n    else:\n        lst3=[None]*len(lst1)\n        for i in range(len(lst1)):\n            lst3[i]=lst1[i]+lst2[i]\n        return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print('Error: lists have different length')\n        return []\n    else:\n        s = [i+j for i,j in zip(lst1,lst2)]\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return 'Error: list lengths do not match.'\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum=[]\n    if len(lst1)==len(lst2):\n        for i in range(len(lst1)):\n            sum.append(lst1[i]+lst2[i])\n    return sum\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    dup_free_list = []\n    for k, g in groupby(nums):\n        dup_free_list.append(k)\n    return dup_free_list\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    temp = []\n    for key,group in groupby(nums):\n        print(key,group)\n        temp.append(key)\n    return temp\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) > 0:\n        nums = [next(iter(group)) for _, group in groupby(nums)]\n    return nums\nprint(consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6]))\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if nums == None: return False\n    return [a for a, b in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = [k for k, g in groupby(nums)]\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            nums = [g[0]]\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    '''\n    consecutive_duplicates([1, 2, 2, 3, 3]) == [1, 2, 3]\n    consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]) == [1, 2, 3, 4, 5]\n    '''\n    return [item for item, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    l = []\n    for key, group in groupby(nums):\n        l.append(key)\n    return l\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        print(len(list(g)), end = \" \")\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if nums == []:\n        return []\n    a = 0\n    for i in range(len(nums)-1):\n        if nums[a] == nums[a+1]:\n            a += 1\n        else:\n            nums[a+1] = nums[a+1]\n            a += 1\n    return nums\nprint(consecutive_duplicates([1, 2, 3, 3, 4, 5, 5]))\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return (pi*r*(r+h))/3\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return (pi*r**2)/3+(pi*r*h)\ndef lateral_surface_square(l):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return l*l\ndef lateral_surface_square_rec(l):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (l*l)\ndef lateral_surface_rectangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)\ndef lateral_surface_rectangle_rec(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)\ndef lateral_surface_rectangle_half(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/2\ndef lateral_surface_square_rec_half(l):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (l*l)/2\ndef lateral_surface_rectangle_rec_half(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/2\ndef lateral_surface_rectangle_rec_lateral_surface_square(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)\ndef lateral_surface_rectangle_rec_lateral_surface_square_half(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/2\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle_half(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/2\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle_half_2(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/4\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle_half_3(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/6\ndef lateral_surface_square_rec_lateral_surface_rectangle_half(b,h):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (b*h)/2\ndef lateral_surface_square_rec_lateral_surface_rectangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (b*h)\ndef lateral_surface_square_rec_lateral_surface_rectangle_half(b,h):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (b*h)/2\ndef lateral_surface_square_rec_lateral_surface_square(b,h):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (b*h)\ndef lateral_surface_square_rec_lateral_surface_square_half(b,h):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (b*h)/2\ndef lateral_surface_square_rec_lateral_surface_square_half_2(b,h):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (b*h)/4\ndef lateral_surface_square_rec_lateral_surface_square_half_3(b,h):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (b*h)/6\ndef lateral_surface_rectangle_rec_lateral_surface_square_half(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/2\ndef lateral_surface_rectangle_rec_lateral_surface_square_half_2(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/4\ndef lateral_surface_rectangle_rec_lateral_surface_square_half_3(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/6\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle_half(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle_half_2(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/2\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle_half_3(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/4\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle_half_4(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/6\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle_half_5(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/8\ndef lateral_surface_rectangle_rec_lateral_surface_rectangle_half_6(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the breadth b and the height h.\n    '''\n    return (b*h)/12\ndef lateral_surface_square_rec_lateral_surface_rectangle_half_3(b,h):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (b*h)/6\ndef lateral_surface_square_rec_lateral_surface_rectangle_half_5(b,h):\n    '''\n    Write a function to find the lateral surface area of a square given the length l.\n    '''\n    return (b*h)/8\ndef lateral_surface_square_rec_lateral_surface_rectangle_half_7(b,h):\n    '''\n    Write a function to fin"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r+math.sqrt(r**2+h**2))\n    return s,s2\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s2=math.pi*r*(r"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (1/3)*math.pi*r**2+math.pi*r*h\n    return area\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\ndef lateral_surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    area = 4*math.pi*r**2\n    return area\ndef lateral_surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area = 2*math.pi*r*h+2*math.pi*r**2\n    return area\ndef lateral_surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*(r+h)\n    return area\ndef total_lateral_surface_area_sphere(r):\n    '''\n    Write a function to find the total lateral surface area of a sphere given radius r.\n    '''\n    area = 4*math.pi*r**2\n    return area\ndef total_lateral_surface_area_cylinder(r,h):\n    '''\n    Write a function to find the total lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area = 2*math.pi*r*(r+h)\n    return area\ndef total_lateral_surface_area_cone(r,h):\n    '''\n    Write a function to find the total lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*(r+h)\n    return area\ndef lateral_surface_area(obj):\n    '''\n    Write a function to find the lateral surface area of an object given the object name.\n    '''\n    if obj =='sphere':\n        area = 4*math.pi*r**2\n    elif obj == 'cone':\n        area = math.pi*r*(r+h)\n    elif obj == 'cylinder':\n        area = 2*math.pi*r*(r+h)\n    return area\ndef volume(obj):\n    '''\n    Write a function to find the volume of an object given the object name.\n    '''\n    if obj =='sphere':\n        volume = (4/3)*math.pi*r**3\n    elif obj == 'cone':\n        volume = (1/3)*math.pi*r**2*h\n    elif obj == 'cylinder':\n        volume = math.pi*r**2*h\n    return volume\ndef lateral_surface_area_volume(obj,r,h=0,v=0):\n    '''\n    Write a function to find the lateral surface area, volume of an object given the object name, radius and height.\n    '''\n    if obj =='sphere':\n        surface = 4*math.pi*r**2\n        volume = (4/3)*math.pi*r**3\n    elif obj == 'cone':\n        surface = math.pi*r*(r+h)\n        volume = (1/3)*math.pi*r**2*h\n    elif obj == 'cylinder':\n        surface = 2*math.pi*r*(r+h)\n        volume = math.pi*r**2*h\n    return surface, volume\ndef lateral_surface_area_volume_r(obj,r,h=0,v=0):\n    '''\n    Write a function to find the lateral surface area, volume of an object given the object name, radius and height.\n    '''\n    if obj =='sphere':\n        surface = 4*math.pi*r**2\n        volume = (4/3)*math.pi*r**3\n    elif obj == 'cone':\n        surface = math.pi*r*(r+h)\n        volume = (1/3)*math.pi*r**2*h\n    elif obj == 'cylinder':\n        surface = 2*math.pi*r*(r+h)\n        volume = math.pi*r**2*h\n    return surface, volume\ndef lateral_surface_area_volume_h(obj,r,h,v=0):\n    '''\n    Write a function to find the lateral surface area, volume of an object given the object name, radius and height.\n    '''\n    if obj =='sphere':\n        surface = 4*math.pi*r**2\n        volume = (4/3)*math.pi*r**3\n    elif obj == 'cone':\n        surface = math.pi*r*(r+h)\n        volume = (1/3)*math.pi*r**2*h\n    elif obj == 'cylinder':\n        surface = 2*math.pi*r*(r+h)\n        volume = math.pi*r**2*h\n    return surface, volume\ndef lateral_surface_area_volume_v(obj,r,h,v):\n    '''\n    Write a function to find the lateral surface area, volume of an object given the object name, radius and height.\n    '''\n    if obj =='sphere':\n        surface = 4*math.pi*r**2\n        volume = (4/3)*math.pi*r**3\n    elif obj == 'cone':\n        surface = math.pi*r*(r+h)\n        volume = (1/3)*math.pi*r**2*h\n    elif obj == 'cylinder':\n        surface = 2*math.pi*r*(r+h)\n        volume = math.pi*r**2*h\n    return surface, volume\ndef lateral_surface_area_volume_r_h(obj,r,h,v):\n    '''\n    Write a function to find the lateral surface area, volume of an object given the object name, radius and height.\n    '''\n    if obj =='sphere':\n        surface = 4*math.pi*r**2\n        volume = (4/3)*math.pi*r**3\n    elif obj == 'cone':\n        surface = math.pi*r*(r+h)\n        volume = (1/3)*math.pi*r**2*h\n    elif obj == 'cylinder':\n        surface = 2*math.pi*r*(r+h)\n        volume = math.pi*r**2*h\n    return surface, volume\ndef lateral_surface_area_volume_r_v(obj,r,h,v):\n    '''\n    Write a function to find the lateral surface area, volume of an object given the object name, radius and height.\n    '''\n    if obj =='sphere':\n        surface = 4*math.pi*r**2\n        volume = (4/3)*math.pi*r**3\n    elif obj == 'cone':\n        surface = math.pi*r*(r+h)\n        volume = (1/3)*math.pi*r**2*h\n    elif obj == 'cylinder':\n        surface = 2*math.pi*r*(r+h)\n        volume = math.pi*r**2*h\n    return surface, volume\ndef lateral_surface_area_volume_h_v(obj,r,h,v):\n    '''\n    Write a function to find the lateral surface area, volume of an object given the object name, radius and height.\n    '''\n    if obj =='sphere':\n        surface = 4*math.pi*r**2\n        volume = (4/3)*math.pi*r**3\n    elif obj == 'cone':\n        surface = math.pi"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=math.pi*r*(r+h)\n    return A\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=math.pi*r*(2*r+h)\n    return A\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    V=math.pi*r*r*h/3\n    return V\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    V=math.pi*r*r*h/3\n    return V\ndef cylinder_circumference(r):\n    '''\n    Write a function to find the circumference of a cylinder given radius r.\n    '''\n    C=2*math.pi*r\n    return C\ndef cylinder_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*math.pi*r*h+2*math.pi*r*r\n    return A\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    A=math.pi*r*(r+h)\n    return A\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and the height h.\n    '''\n    A=math.pi*r*(2*r+h)\n    return A\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    V=math.pi*r*r*h/3\n    return V\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    V=math.pi*r*r*h/3\n    return V\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram given base length b and height h.\n    '''\n    A=b*h\n    return A\ndef perimeter_parallelogram(b,h):\n    '''\n    Write a function to find the perimeter of a parallelogram given base length b and height h.\n    '''\n    P=2*b+2*h\n    return P\ndef area_triangle(a,b):\n    '''\n    Write a function to find the area of a triangle given side length a and b.\n    '''\n    A=a*b/2\n    return A\ndef perimeter_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a triangle given side length a and b.\n    '''\n    P=a+b+math.sqrt(a**2+b**2)\n    return P\ndef area_square(a):\n    '''\n    Write a function to find the area of a square given side length a.\n    '''\n    A=a*a\n    return A\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square given side length a.\n    '''\n    P=4*a\n    return P\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given side length a and b.\n    '''\n    A=a*b\n    return A\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle given side length a and b.\n    '''\n    P=2*(a+b)\n    return P\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus given diagonal length a and b.\n    '''\n    A=a*b/2\n    return A\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus given diagonal length a and b.\n    '''\n    P=a+b+math.sqrt(a**2+b**2)\n    return P\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium given base length a, base length b and height h.\n    '''\n    A=(a+b)*h/2\n    return A\ndef perimeter_trapezium(a,b,h):\n    '''\n    Write a function to find the perimeter of a trapezium given base length a, base length b and height h.\n    '''\n    P=a+b+h\n    return P\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle given radius r.\n    '''\n    A=math.pi*r*r\n    return A\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle given radius r.\n    '''\n    P=2*math.pi*r\n    return P\ndef area_ellipse(r1,r2):\n    '''\n    Write a function to find the area of a ellipse given radius r1 and radius r2.\n    '''\n    A=math.pi*r1*r2\n    return A\ndef circumference_ellipse(r1,r2):\n    '''\n    Write a function to find the circumference of a ellipse given radius r1 and radius r2.\n    '''\n    C=math.pi*(r1+r2)\n    return C\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram given base length b and height h.\n    '''\n    A=b*h\n    return A\ndef perimeter_parallelogram(b,h):\n    '''\n    Write a function to find the perimeter of a parallelogram given base length b and height h.\n    '''\n    P=2*b+2*h\n    return P\ndef area_triangle(a,b):\n    '''\n    Write a function to find the area of a triangle given side length a and b.\n    '''\n    A=a*b/2\n    return A\ndef perimeter_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a triangle given side length a and b.\n    '''\n    P=a+b+math.sqrt(a**2+b**2)\n    return P\ndef area_square(a):\n    '''\n    Write a function to find the area of a square given side length a.\n    '''\n    A=a*a\n    return A\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square given side length a.\n    '''\n    P=4*a\n    return P\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given side length a and b.\n    '''\n    A=a*b\n    return A\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle given side length a and b.\n    '''\n    P=2*(a+b)\n    return P\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus given diagonal length a and b.\n    '''\n    A=a*b/2\n    return A\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus given diagonal length a and b.\n    '''\n    P=a+b+math.sqrt(a**2+b**2)\n    return P\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium given base length a, base lengt"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print (\"The lateral surface area of the cone is: \" + str((math.pi * math.pow(r,2) * h)/3))\ndef lateralsurface_square(d,l):\n    '''\n    Write a function to find the lateral surface area of a square given the side d and the length l.\n    '''\n    print (\"The lateral surface area of the square is: \" + str(math.pow(d,2) * l))\ndef lateralsurface_rectangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the base b and the height h.\n    '''\n    print (\"The lateral surface area of the rectangle is: \" + str(b * h))\ndef lateralsurface_rectangle_diagonal(d,l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the diagonal d and the length l.\n    '''\n    print (\"The lateral surface area of the rectangle is: \" + str(math.sqrt(math.pow(d,2) + math.pow(l,2))))\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given the radius r.\n    '''\n    print (\"The lateral surface area of the circle is: \" + str(math.pi * math.pow(r,2)))\ndef lateralsurface_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the base b1 and the two bases b2 and b3 and the height h.\n    '''\n    print (\"The lateral surface area of the trapezoid is: \" + str((math.pow(b1,2) + math.pow(b2,2)) * h / 2))\ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the base b and the height h.\n    '''\n    print (\"The lateral surface area of the parallelogram is: \" + str(b * h))\ndef lateralsurface_kite(d1,d2,h):\n    '''\n    Write a function to find the lateral surface area of a kite given the d1 and d2 diagonals and the height h.\n    '''\n    print (\"The lateral surface area of the kite is: \" + str(math.sqrt(math.pow(d1,2) + math.pow(d2,2) + math.pow(h,2))))\ndef lateralsurface_trapezoid_diagonal(d1,d2,l):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the diagonal d1 and the two diagonals d2 and d3 and the length l.\n    '''\n    print (\"The lateral surface area of the trapezoid is: \" + str(math.sqrt(math.pow(d1,2) + math.pow(d2,2) + math.pow(l,2))))\ndef lateralsurface_trapezoid_base(b1,b2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the base b1 and the two bases b2 and b3 and the height h.\n    '''\n    print (\"The lateral surface area of the trapezoid is: \" + str(math.sqrt(math.pow(b1,2) + math.pow(b2,2) + math.pow(h,2))))\ndef lateralsurface_rectangle_base(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the base b and the height h.\n    '''\n    print (\"The lateral surface area of the rectangle is: \" + str(b * h))\ndef lateralsurface_rectangle_diagonal(d,l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the diagonal d and the length l.\n    '''\n    print (\"The lateral surface area of the rectangle is: \" + str(math.sqrt(math.pow(d,2) + math.pow(l,2))))\ndef lateralsurface_rectangle_trapezoid(d,l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the diagonal d and the length l.\n    '''\n    print (\"The lateral surface area of the rectangle is: \" + str(math.sqrt(math.pow(d,2) + math.pow(l,2))))\ndef lateralsurface_kite_base(d1,d2,h):\n    '''\n    Write a function to find the lateral surface area of a kite given the d1 and d2 diagonals and the height h.\n    '''\n    print (\"The lateral surface area of the kite is: \" + str(math.sqrt(math.pow(d1,2) + math.pow(d2,2) + math.pow(h,2))))\ndef lateralsurface_kite_diagonal(d1,d2,l):\n    '''\n    Write a function to find the lateral surface area of a kite given the d1 and d2 diagonals and the length l.\n    '''\n    print (\"The lateral surface area of the kite is: \" + str(math.sqrt(math.pow(d1,2) + math.pow(d2,2) + math.pow(l,2))))\ndef lateralsurface_parallel_kite(d1,d2,h):\n    '''\n    Write a function to find the lateral surface area of a kite given the d1 and d2 diagonals and the height h.\n    '''\n    print (\"The lateral surface area of the kite is: \" + str(math.sqrt(math.pow(d1,2) + math.pow(d2,2) + math.pow(h,2))))\ndef lateralsurface_trapezoid_trapezoid(d1,d2,l):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the diagonal d1 and the two diagonals d2 and d3 and the length l.\n    '''\n    print (\"The lateral surface area of the trapezoid is: \" + str(math.sqrt(math.pow(d1,2) + math.pow(d2,2) + math.pow(l,2))))\ndef lateralsurface_trapezoid_kite(d1,d2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the diagonal d1 and the two diagonals d2 and d3 and the height h.\n    '''\n    print (\"The lateral surface area of the trapezoid is: \" + str(math.sqrt(math.pow(d1,2) + math.pow(d2,2) + math.pow(h,2))))\ndef lateralsurface_kite_rectangle(d1,d2,l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the diagonal d and the length l.\n    '''\n    print (\"The lateral surface area of the rectangle is: \" + str(math.sqrt(math.pow(d1,2) + math.pow(d2,2) + math.pow(l,2))))\ndef lateralsurface_kite_rectangle_trapezoid(d1,d2,l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the diagonal d and the length l.\n    '''\n    print (\"The lateral surface area of the rectangle is: \" + str(math.sqrt(math.pow(d1,2) + math.pow(d2,2) + math.pow(l,2))))\ndef lateralsurface_trapezoid_rectangle(d,l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the diagonal d and the length l.\n    '''\n    print (\"The lateral surface area of the rectangle is: \" + str(math.sqrt(math.pow(d,2) + math.pow(l,2))))\ndef lateralsurface_trapezoid_rectangle_trapezoid(d,l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the diagonal d and the length l.\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfacearea = (math.pi*(r**2))+((math.pi*(r**2)*h)/3)\n    return surfacearea\ndef lateral_rectangularprism(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given the length l and the width w.\n    '''\n    surfacearea = (2*(l*w))+(2*(l*w)*math.sqrt(2))\n    return surfacearea\ndef lateral_square(w,h):\n    '''\n    Write a function to find the lateral surface area of a square given the width w and the height h.\n    '''\n    surfacearea = (2*(w*h))\n    return surfacearea\ndef lateral_triangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the base b and the height h.\n    '''\n    surfacearea = (1/2)*b*h\n    return surfacearea\ndef lateral_parallelogram(l,w):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the length l and the width w.\n    '''\n    surfacearea = (2*l*w)\n    return surfacearea\ndef lateral_trapezium(b1,b2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium given the bases b1 and b2 and the height h.\n    '''\n    surfacearea = ((b1+b2)/2)*h\n    return surfacearea\ndef lateral_dodecagon(l):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given the length of one side.\n    '''\n    surfacearea = (3*(math.sqrt(3))/2)*(l*(l+2*math.sqrt(3)))\n    return surfacearea\ndef lateral_octogon(l):\n    '''\n    Write a function to find the lateral surface area of an octogon given the length of one side.\n    '''\n    surfacearea = ((math.sqrt(2))*(l*(l+2)))+((math.sqrt(2))*((l*(l+4))/2))\n    return surfacearea\ndef lateral_decagon(l):\n    '''\n    Write a function to find the lateral surface area of a decagon given the length of one side.\n    '''\n    surfacearea = (5*(math.sqrt(5))/2)*(l*(l+2*math.sqrt(5)))\n    return surfacearea\ndef lateral_icosagon(l):\n    '''\n    Write a function to find the lateral surface area of an icosagon given the length of one side.\n    '''\n    surfacearea = (7*(math.sqrt(3))/2)*(l*(l+math.sqrt(3)))\n    return surfacearea\ndef lateral_hexagon(l):\n    '''\n    Write a function to find the lateral surface area of a hexagon given the length of one side.\n    '''\n    surfacearea = (6*l)*(math.sqrt(3))\n    return surfacearea\ndef lateral_heptagon(l):\n    '''\n    Write a function to find the lateral surface area of a heptagon given the length of one side.\n    '''\n    surfacearea = (7*(math.sqrt(5))/2)*(l*(l+2*math.sqrt(5)))\n    return surfacearea\ndef lateral_octagon(l):\n    '''\n    Write a function to find the lateral surface area of an octagon given the length of one side.\n    '''\n    surfacearea = (8*(math.sqrt(6))/2)*(l*(l+2*math.sqrt(6)))\n    return surfacearea\ndef lateral_nonagon(l):\n    '''\n    Write a function to find the lateral surface area of a nonagon given the length of one side.\n    '''\n    surfacearea = (9*(math.sqrt(7))/2)*(l*(l+math.sqrt(7)))\n    return surfacearea\ndef lateral_dodecagon(l):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given the length of one side.\n    '''\n    surfacearea = (10*(math.sqrt(10))/2)*(l*(l+2*math.sqrt(10)))\n    return surfacearea\ndef lateral_icosahedron(l):\n    '''\n    Write a function to find the lateral surface area of an icosahedron given the length of one side.\n    '''\n    surfacearea = (12*(math.sqrt(5))/2)*(l*(l+math.sqrt(5)))\n    return surfacearea\ndef lateral_tetrahedron(l):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given the length of one side.\n    '''\n    surfacearea = (4*(l**2))/3\n    return surfacearea\ndef lateral_dodecahedron(l):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given the length of one side.\n    '''\n    surfacearea = (12*(math.sqrt(3))/2)*(l*(l+2*math.sqrt(3)))\n    return surfacearea\ndef lateral_icosahedron(l):\n    '''\n    Write a function to find the lateral surface area of an icosahedron given the length of one side.\n    '''\n    surfacearea = (20*(math.sqrt(5))/2)*(l*(l+2*math.sqrt(5)))\n    return surfacearea\ndef lateral_dodecahedron(l):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given the length of one side.\n    '''\n    surfacearea = (30*(math.sqrt(3))/2)*(l*(l+2*math.sqrt(3)))\n    return surfacearea\ndef lateral_icosahedron(l):\n    '''\n    Write a function to find the lateral surface area of an icosahedron given the length of one side.\n    '''\n    surfacearea = (30*(math.sqrt(5))/2)*(l*(l+2*math.sqrt(5)))\n    return surfacearea\ndef lateral_dodecahedron(l):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given the length of one side.\n    '''\n    surfacearea = (40*(math.sqrt(3))/2)*(l*(l+2*math.sqrt(3)))\n    return surfacearea\ndef lateral_icosahedron(l):\n    '''\n    Write a function to find the lateral surface area of an icosahedron given the length of one side.\n    '''\n    surfacearea = (50*(math.sqrt(5))/2)*(l*(l+2*math.sqrt(5)))\n    return surfacearea\ndef lateral_dodecahedron(l):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given the length of one side.\n    '''\n    surfacearea = (60*(math.sqrt(3))/2)*(l*(l+2*math.sqrt(3)))\n    return surfacearea\ndef lateral_icosahedron(l):\n    '''\n    Write a function to find the lateral surface area of an icosahedron given the length of one side.\n    '''\n    surfacearea = (60*(math.sqrt(5))/2)*(l*(l+2*math.sqrt(5)))\n    return surfacearea\ndef lateral_dodecahedron(l):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given the length of one side.\n    '''\n    surfacearea = (70*(math.sqrt(3))/2)*(l*(l+2*math.sqrt(3)))\n    return surfacearea\ndef lateral_icosahedron(l):\n    '''\n    Write a function to find the lateral surface area of an icosahedron given the length of one side.\n    '''\n    surfac"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r*r)*(h/3)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = 3.14159265359 * (r**2) + 3.14159265359 * (r**2) * (h/3)\n    print('The lateral surface area of a cone is: ',surface_area)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)+math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 3.1415926535897932384 * r * r\n    s = s * h / 3\n    return s\ndef pit(a,b,c,d):\n    '''\n    Write a function to compute the volume of a four-sided polygon. Assume that the polygon is a\n    regular four-sided polygon with sides of length a, b, c, and d. Return the volume of the\n    polygon in cubic units.\n    '''\n    if a + b <= c or a + c <= b or b + c <= a or a + d <= b or b + d <= c or c + d <= a or a + b <= d:\n        return 'Not a four sided polygon.'\n    elif a == b == c == d:\n        return 'It is an equilateral polygon.'\n    elif a == b or a == c or a == d or b == c or b == d or c == d:\n        return 'It is a isosceles polygon.'\n    else:\n        return a * b * c * d / 4\ndef polysum(n,s):\n    '''\n    Write a function to compute the total of n simple interest\n    compounded annually and annually, given:\n    n = number of times that interest is compounded each year\n    s = simple interest rate\n    '''\n    a = s / 100 / 12\n    b = a + 1\n    n = n * 12\n    c = n * b\n    d = c ** n\n    e = d / (math.factorial(n) * (b ** n))\n    e = e * -1\n    return e\ndef ddd():\n    '''\n    Write a program that accepts an integer as input, and outputs the sum of all digits in that integer.\n    '''\n    n = int(input('Enter a whole number: '))\n    n = str(n)\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\ndef twelveto24(a1):\n    '''\n    Write a function to convert the time in the 12-hour format into the 24-hour format.\n    '''\n    if a1[-2:] == 'PM' and a1[:2]!= '12':\n        n1 = int(a1[:2])\n        n1 += 12\n        a1 = str(n1) + a1[2:-2]\n        return a1\n    elif a1[-2:] == 'AM' and a1[:2] == '12':\n        a1 = '00' + a1[2:-2]\n        return a1\n    else:\n        return a1[:-2]\ndef grade(score):\n    '''\n    Write a program that accepts a score between 0.0 and 1.0 and prints out the corresponding grade.\n    '''\n    if score >= 0.9:\n        return 'A'\n    elif score >= 0.8:\n        return 'B'\n    elif score >= 0.7:\n        return 'C'\n    elif score >= 0.6:\n        return 'D'\n    else:\n        return 'F'\ndef bonus(a,b,c):\n    '''\n    Write a function to compute 5% of the price of a product after tax.\n    '''\n    n1 = (a * b) / 100\n    n1 = a - n1\n    return n1\ndef series(n):\n    '''\n    Write a function to compute the nth term of a series. The input will be the nth term\n    you want to compute. Assume that the inputs n will be a positive integer.\n    '''\n    n1 = n\n    if n1 % 2!= 0:\n        n1 = n1 * -1\n    n1 = n1 // 2\n    return n1\ndef series_sum(n):\n    '''\n    Write a function to compute the sum of the first n numbers in a series.\n    '''\n    n1 = n\n    n2 = 1\n    if n1 % 2 == 0:\n        n1 = n1 // 2\n    else:\n        n1 = n1 // 2\n        n1 = n1 * -1\n    n1 = n1 + 1\n    for i in range(n1):\n        n2 = n2 + i\n    return n2\ndef reverse(s):\n    '''\n    Write a function that reverses the letters in a string.\n    '''\n    n1 = s[::-1]\n    return n1\ndef ispangram(s):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    n1 = 'abcdefghijklmnopqrstuvwxyz'\n    for i in n1:\n        if i not in s.lower():\n            return False\n    return True\ndef lychrel(n):\n    '''\n    Write a function to determine if a number is Lychrel.\n    '''\n    n1 = n\n    n2 = n1 + int(str(n1)[::-1])\n    n3 = n2\n    n4 = n2 + int(str(n2)[::-1])\n    if n4 == n3:\n        return False\n    else:\n        return True\ndef check(s):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    n1 = 'abcdefghijklmnopqrstuvwxyz'\n    for i in n1:\n        if i not in s.lower():\n            return False\n    return True\ndef count(s):\n    '''\n    Write a function to count the number of times that a substring occurs in a string.\n    '''\n    n1 = s\n    n2 = len(n1)\n    n3 = 'ly'\n    n4 = n3 * 10\n    n5 = n1.count(n3)\n    n6 = 0\n    for i in range(n2):\n        if n1[i:i + 4] == n4:\n            n6 += 1\n    return n6\ndef extra_space(s):\n    '''\n    Write a function to remove all white space from a string.\n    '''\n    n1 = s\n    n2 = n1.replace(' ','')\n    return n2\ndef find_second(s):\n    '''\n    Write a function to find the second occurrence of a substring.\n    '''\n    n1 = s\n    n2 = n1.find('abc')\n    n3 = n1.find('abc', n2 + 3)\n    return n3\ndef non_start(a, b):\n    '''\n    Write a function to determine if the first argument is the same as the second, except\n    that the second argument is reversed.\n    '''\n    n1 = a\n    n2 = b[::-1]\n    if n1 == n2:\n        return True\n    else:\n        return False\ndef is_palindrome(n):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    n1 = n\n    n2 = n1[::-1]\n    if n1 == n2:\n        return True\n    else:\n        return False\ndef format_name(s):\n    '''\n    Write a function to format a person's name into first and last name.\n    '''\n    n1 = s\n    n2 = n1.split()\n    n3 = n2[0]\n    n4 = n2[1]\n    n5 = n3 +'' + n4\n    return n5\ndef make_abba(a, b):\n    '''\n    Write a function to make an ABBA word out of two words.\n    '''\n    n1 = a\n    n2 = b\n    n3 = n2 + n2 + n1\n    return n3\ndef make_tags(tag, word):\n    '''\n    Write a function that takes in a tag string and a word string.\n    The function should return a string of the form tagword, where the first\n    word in the string is tag and the last word is word.\n    '''\n    n1 = tag\n    n2 = word\n    n3 = n1 + n2\n    return n3\ndef end_other(a, b):\n    '''\n    Write a function to return one string, which is the concatenation of th"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #pattern = re.compile(r'\\s|\\,|\\.')\n    pattern = re.compile(r'[\\s,\\.]+')\n    return pattern.sub(':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \",\":\").replace(\",\",\":\").replace(\".\",\":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace(',','!').replace('.','.')\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef get_unique_list(l):\n    '''\n    Write a function to get unique items in a list.\n    '''\n    return list(set(l))\ndef get_fruits(text):\n    '''\n    Write a function to get a list of fruits from a given text.\n    '''\n    return re.findall(r'\\b\\w+\\b\\s*(?:[,:;]\\s*(?:(?:and|&)\\s*\\1[a-z]*\\b)?|[,:;]\\s*(?:(?:and|&)\\s*\\1|\\b\\w+\\b))',text,re.IGNORECASE)\ndef convert_phone_number(phone):\n    '''\n    Write a function to convert a string phone number into a string of digits.\n    '''\n    num = re.sub(r'[^0-9]', '', phone)\n    if (len(num) == 10 and num[0] == '1'):\n        num = '(' + num[1:]\n    elif (len(num) == 10 and num[3] == '1'):\n        num = '+' + num[0:3] + ')' + num[4:]\n    return num\ndef flatten_list(l):\n    '''\n    Write a function to flatten a list.\n    '''\n    return [item for sublist in l for item in sublist]\ndef get_greater_numbers(l):\n    '''\n    Write a function to get all the numbers that are greater than their index values in a list.\n    '''\n    return [i for i, x in enumerate(l) if x > i]\ndef get_greater_numbers_lambda(l):\n    '''\n    Write a function to get all the numbers that are greater than their index values in a list.\n    '''\n    return list(filter(lambda x: x > x[0], enumerate(l)))\ndef check_occurence(l):\n    '''\n    Write a function to check if all elements in a list is equal to its index value.\n    '''\n    return len(set(l)) == 1\ndef get_sum_of_intersection(l1,l2):\n    '''\n    Write a function to get the sum of the intersection of two given lists.\n    '''\n    return sum([i for i in set(l1) if i in set(l2)])\ndef get_sum_of_intersection_lambda(l1,l2):\n    '''\n    Write a function to get the sum of the intersection of two given lists.\n    '''\n    return sum(list(filter(lambda x: x[1] in l2, enumerate(l1))))\ndef get_sum_of_intersection_filter(l1,l2):\n    '''\n    Write a function to get the sum of the intersection of two given lists.\n    '''\n    return sum([i[1] for i in list(filter(lambda x: x[1] in l2, enumerate(l1)))])\ndef get_sum_of_intersection_lambda_filter(l1,l2):\n    '''\n    Write a function to get the sum of the intersection of two given lists.\n    '''\n    return sum(list(filter(lambda x: x[1] in l2, enumerate(l1))))\ndef get_sum_of_intersection_filter_enumerate(l1,l2):\n    '''\n    Write a function to get the sum of the intersection of two given lists.\n    '''\n    return sum(list(filter(lambda x: x[1] in l2, enumerate(l1))))\ndef get_sum_of_intersection_filter_enumerate_lambda(l1,l2):\n    '''\n    Write a function to get the sum of the intersection of two given lists.\n    '''\n    return sum(list(filter(lambda x: x[1] in l2, enumerate(l1))))\ndef get_sum_of_intersection_filter_enumerate_lambda_filter(l1,l2):\n    '''\n    Write a function to get the sum of the intersection of two given lists.\n    '''\n    return sum(list(filter(lambda x: x[1] in l2, enumerate(l1))))\ndef get_sum_of_intersection_filter_enumerate_lambda_filter_zip(l1,l2):\n    '''\n    Write a function to get the sum of the intersection of two given lists.\n    '''\n    return sum(list(filter(lambda x: x[1] in l2, enumerate(l1))))\ndef get_sum_of_intersection_filter_enumerate_lambda_filter_zip_reduce(l1,l2):\n    '''\n    Write a function to get the sum of the intersection of two given lists.\n    '''\n    return sum(list(filter(lambda x: x[1] in l2, enumerate(l1))))\ndef is_valid_email(email):\n    '''\n    Write a function to check if an email is valid or not.\n    '''\n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    return re.search(regex, email)\ndef get_alphabet_occurrence_array(text):\n    '''\n    Write a function to get the occurrence of each alphabet in a given text.\n    '''\n    return list(map(lambda x: text.count(x),list('abcdefghijklmnopqrstuvwxyz')))\ndef get_alphabet_occurrence_array_lambda(text):\n    '''\n    Write a function to get the occurrence of each alphabet in a given text.\n    '''\n    return list(map(lambda x: text.count(x),list(filter(lambda x: x in list('abcdefghijklmnopqrstuvwxyz'),text))))\ndef get_alphabet_occurrence_array_filter(text):\n    '''\n    Write a function to get the occurrence of each alphabet in a given text.\n    '''\n    return list(map(lambda x: text.count(x),list(filter(lambda x: x in list('abcdefghijklmnopqrstuvwxyz'),text))))\ndef get_alphabet_occurrence_array_lambda_filter(text):\n    '''\n    Write a function to get the occurrence of each alphabet in a given text.\n    '''\n    return list(map(lambda x: text.count(x),list(filter(lambda x: x in list('abcdefghijklmnopqrstuvwxyz'),text))))\ndef get_alphabet_occurrence_array_filter_enumerate(text):\n    '''\n    Write a function to get the occurrence of each alphabet in a given text.\n    '''\n    return list(map(lambda x: text.count(x),list(filter(lambda x: x in list('abcdefghijklmnopqrstuvwxyz'),text))))\ndef get_alphabet_occurrence_array_filter_enumerate_lambda(text):\n    '''\n    Write a function to get the occurrence of each alphabet in a given text.\n    '''\n    return list(map(lambda x: text.count(x),list(filter(lambda x: x in list('abcdefghijklmnopqrstuvwxyz'),text))))\ndef get_alphabet_occurrence_array_filter_enumerate_lambda_filter(text):\n    '''\n    Write a function to get the occurrence of each alphabet in a given text.\n    '''\n    return list(map(lambda x: text.count(x),list(filter(lambda x: x in list('abcdefghijklmnopqrstuvwxyz'),text))))\ndef get_alphabet_occurrence_array_filter_enumerate_lambda_filter_zip(text):\n    '''\n    Write a function to get the occurrence of each alphabet in a given text.\n    '''\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace('.',':').replace(' ',':').replace(',',':')\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return(text.replace(' ',':').replace(',',':').replace('.',':'))\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\",\", \":\").replace(\".\", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # regex for replacing \n    regex_pattern = re.compile(r\"\\s|\\,|\\.\" )\n    return re.sub(regex_pattern, ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace(' ', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',', ',')\n    text = text.replace('.', ',')\n    text = text.replace(' ', ':')\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i <= j:\n        m = (i + j) // 2\n        if x == A[m]:\n            return m\n        elif x > A[m]:\n            i = m + 1\n        else:\n            j = m - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x > A[mid]:\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            if mid - 1 < 0:\n                return mid\n            if A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return search_first_occurrence_of_a_number_in_a_sorted_array(A, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)\n    while left < right:\n        mid = left + (right - left)//2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] == x:\n            right = mid\n        else:\n            right = mid - 1\n    return left if A[left] == x else -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start, end = 0, len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if x > A[mid]:\n            start = mid + 1\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A is None:\n        return -1\n    low = 0\n    high = len(A) - 1\n    first_occurrence = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        else:\n            high = mid - 1\n    return first_occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    first_occurrence_index = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if x < A[mid]:\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            first_occurrence_index = mid\n            high = mid - 1\n    return first_occurrence_index\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # 1. Create a function sum_of_products that will take arr as argument and return the sum of products of all sublists of arr\n    def sum_of_products(arr):\n        # arr is a list of integers and the required output is an integer\n        n = len(arr)\n        sum = 0\n        prod = 1\n        for i in range(n):\n            prod = prod * arr[i]\n            sum = sum + prod\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    m = len(arr)\n    n = m + 1\n    sum_of_prod = 0\n    # Create all sublists\n    for i in range(m+1):\n        for j in range(i+1, m+1):\n            sum_of_prod += arr[i:j].prod()\n    return sum_of_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(0, n):\n        sum += arr[i]\n    prod = 1\n    for i in range(0, n):\n        prod *= arr[i]\n    print(sum)\n    print(prod)\n    print(\"Sum of products of all possible sublists:\",sum*prod)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    #all sublists\n    sub = [[i for i in range(n)]]\n    #print(sub)\n    # Generate all sublists of length 2 using\n    # combinations() method\n    sub = [sub + i for i in combinations(range(n), n - 1)]\n    #print(sub)\n    for i in range(len(sub)):\n        sum=1\n        for j in sub[i]:\n            sum*=arr[j]\n        print(sum, end=\" \")\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sub_arr_sum = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        sublist = arr[i:len(arr)]\n        sublist_prod = prod(sublist)\n        result = result + sublist_prod\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(n):\n        for j in range(i, n):\n            s += math.prod(arr[i:j+1])\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    prod = 1\n    for i in range(n):\n        prod = prod * arr[i]\n        result += prod\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def get_sum_of_subarray_prod(lst):\n        n = len(lst)\n        sum = 0\n        prod = 1\n        # Note: The product of the first term of the subarray will always be 1\n        # since lst[0] * prod == prod * lst[0]\n        for i in range(n):\n            sum = sum + prod\n            prod = prod * lst[i]\n        # Note: The product of the last term of the subarray will always be 1\n        # since lst[n-1] * prod == prod * lst[n-1]\n        sum = sum + prod\n        return sum\n    return get_sum_of_subarray_prod(arr)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n ^ (n << 1)) >> 1) | ((n & 1) << 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n & ~(2**(len(bin(n))-2) - 1)\n    y = n & (2**(len(bin(n))-2) - 1)\n    return y\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b101111111\n    return n & ~mask | (n & mask)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n^(n>>1) ^(n<<1)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n < 0:  \n        print(\"Please enter a valid number\")\n    elif n == 0:  \n        print(\"There is no number in binary representation of zero\")\n    else:  \n        bin_num = bin(n)\n        bin_num = bin_num[2:]\n        bin_num = str(bin_num)\n        bin_num = list(bin_num)\n        if len(bin_num) == 1:  \n            bin_num = [0] + bin_num + [0]\n            print(bin_num)\n        elif len(bin_num) == 2:  \n            bin_num = [0] + bin_num\n            print(bin_num)\n        else:  \n            bin_num = [0] + bin_num\n            print(bin_num)\n        index = 1\n        while index < len(bin_num) - 1: \n            bin_num[index] = str(int(bin_num[index]) ^ 1)\n            index += 2\n        bin_num = ''.join(bin_num)\n        print(int(bin_num, 2))\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    last = n & ~(1<<(len(bin(n))-2))\n    first = n & ~(1<<(len(bin(n))-3))\n    return last | first\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = n & ~(1 << (32 - 1))\n    mask = mask >> 1\n    mask = mask << 1\n    mask = mask | 1\n    return n & mask\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = n >> 1\n    return n ^ mask\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n ^ (n << 1)) >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = n << 1\n    return ((mask ^ n) >> 1)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n == 0 or a[0] > x:\n        return 0\n    if a[n-1] < x:\n        return n\n    \n    def binary_search(a, x, l, r):\n        if l > r:\n            return l\n        m = l + (r-l)//2\n        if x > a[m]:\n            return binary_search(a, x, m+1, r)\n        else:\n            return binary_search(a, x, l, m)\n    \n    return binary_search(a, x, 0, n-1)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #print('a', a)\n    if len(a) == 0:\n        return 0\n    #print('a[0]', a[0])\n    if a[0] >= x:\n        return 0\n    if x >= a[len(a)-1]:\n        return len(a)\n    for i in range(1, len(a)):\n        if a[i] < x and a[i] > a[i-1]:\n            return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    if a[0] > x:\n        return 0\n    if x >= a[len(a)-1]:\n        return len(a)\n    for i in range(1, len(a)):\n        if a[i] > x and a[i] < a[i-1]:\n            return i\ndef binary_search(a, x):\n    '''\n    Write a function to search for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return False\n    if len(a) == 1 and a[0] == x:\n        return True\n    low, high = 0, len(a)-1\n    while low <= high:\n        mid = (low + high) // 2\n        #print(low, mid, high, a[mid])\n        if x < a[mid]:\n            high = mid - 1\n        elif x > a[mid]:\n            low = mid + 1\n        else:\n            return True\n    return False\ndef binary_search_rec(a, low, high, x):\n    if low >= high:\n        if x < a[low]:\n            return low\n        else:\n            return low + 1\n    mid = (low + high) // 2\n    #print(low, mid, high)\n    if x < a[mid]:\n        high = mid - 1\n    elif x > a[mid]:\n        low = mid + 1\n    else:\n        return mid\n    return binary_search_rec(a, low, high, x)\n    \ndef left_value_at_right_point(a, x):\n    '''\n    Write a function that returns the index of the left value equal to the right value\n    '''\n    if len(a) == 0:\n        return -1\n    if len(a) == 1 and a[0] == x:\n        return 0\n    low, high = 0, len(a)-1\n    while low <= high:\n        mid = (low + high) // 2\n        #print(low, mid, high, a[mid])\n        if x < a[mid]:\n            high = mid - 1\n        elif x > a[mid]:\n            low = mid + 1\n        else:\n            if mid == len(a)-1 or a[mid+1]!= a[mid]:\n                return mid\n            low = mid + 1\n    return -1\ndef binary_search_left(a, x):\n    '''\n    Write a function to search for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    low, high = 0, len(a)-1\n    while low <= high:\n        mid = (low + high) // 2\n        #print(low, mid, high, a[mid])\n        if x < a[mid]:\n            high = mid - 1\n        elif x > a[mid]:\n            low = mid + 1\n        else:\n            if mid == 0 or x!= a[mid-1]:\n                return mid\n            low = mid + 1\n    return -1\ndef binary_search_right(a, x):\n    '''\n    Write a function to search for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    low, high = 0, len(a)-1\n    while low <= high:\n        mid = (low + high) // 2\n        #print(low, mid, high, a[mid])\n        if x < a[mid]:\n            high = mid - 1\n        elif x > a[mid]:\n            low = mid + 1\n        else:\n            if mid == len(a)-1 or x!= a[mid+1]:\n                return mid\n            high = mid - 1\n    return -1\ndef binary_search_left_recursive(a, x):\n    '''\n    Write a function to search for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    low, high = 0, len(a)-1\n    def binary_search_left_rec(a, low, high, x):\n        if low >= high:\n            return -1\n        mid = (low + high) // 2\n        #print(low, mid, high, a[mid])\n        if x < a[mid]:\n            return binary_search_left_rec(a, low, mid-1, x)\n        elif x > a[mid]:\n            return binary_search_left_rec(a, mid+1, high, x)\n        else:\n            if mid == 0 or x!= a[mid-1]:\n                return mid\n            return binary_search_left_rec(a, mid+1, high, x)\n    return binary_search_left_rec(a, low, high, x)\ndef binary_search_right_recursive(a, x):\n    '''\n    Write a function to search for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    low, high = 0, len(a)-1\n    def binary_search_right_rec(a, low, high, x):\n        if low >= high:\n            return -1\n        mid = (low + high) // 2\n        #print(low, mid, high, a[mid])\n        if x < a[mid]:\n            return binary_search_right_rec(a, low, mid-1, x)\n        elif x > a[mid]:\n            return binary_search_right_rec(a, mid+1, high, x)\n        else:\n            if mid == len(a)-1 or x!= a[mid+1]:\n                return mid\n            return binary_search_right_rec(a, low, high, x)\n    return binary_search_right_rec(a, low, high, x)\ndef binary_search_left_recursive_bisect(a, x):\n    '''\n    Write a function to search for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    low, high = 0, len(a)-1\n    def binary_search_left_rec(a, low, high, x):\n        i = bisect.bisect_left(a, x)\n        if i!= len(a) and a[i] == x:\n            if i == 0 or a[i-1]!= x:"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if x >= a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0 or a[0] >= x:\n        return 0\n    elif len(a) == 1 and a[0] < x:\n        return 1\n    i = 1\n    while i < len(a) and a[i] < x:\n        i += 1\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    b = bisect.bisect_left(a, x)\n    if b < len(a) and a[b] == x:\n        return b\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # The bisect_left function returns the first insertion point of x in a, which is where we want to insert x in a.\n    # bisect_left(a, x, lo=0, hi=len(a))\n    # bisect_left() takes four parameters:\n    # a is the sorted array\n    # x is the value to insert into a\n    # lo and hi are the boundaries\n    # the values of lo and hi are not needed when you're just interested in where x should be inserted\n    # bisect_left() returns the index where the insertion would occur.\n    # bisect_left() uses the binary search algorithm\n    # bisect_left() must compare the value x against each entry in a in the same way\n    # so if you have a list of numbers and you want to find the insertion point for a new value,\n    # bisect_left() will be way more efficient than a linear search through the list\n    # bisect_left() cannot search for an insertion point for a value that isn't in the list\n    # for example, if you wanted to find the insertion point for a value that's not in the list, you'd just throw a ValueError exception\n    # this is also why bisect_left() is useful for applications like spell checking\n    # here's an example of how to insert a new value into a list of numbers\n    # a = [1,2,3,4,5]\n    # x = 6\n    # bisect_left(a, x)\n    # # gives you 3\n    # a.insert(bisect_left(a, x), x)\n    # a = [1,2,3,4,5]\n    # x = 6\n    # bisect_left(a, x)\n    # # gives you 3\n    # a.insert(bisect_left(a, x), x)\n    # a = [1,2,3,4,5]\n    # x = 6\n    # bisect_left(a, x)\n    # # gives you 3\n    # a.insert(bisect_left(a, x), x)\n    # print(a)\n    # # gives you [1,2,3,4,5,6]\n    # There is an easy way to insert a new value into a sorted list, using bisect_left(), so it's not hard to do it.\n    # The only issue is that you have to make sure to update the indices of all subsequent entries in the list.\n    # Remember this is a problem where you're adding something to a list, not searching for it.\n    # So if you have a list of numbers and you want to insert a new value into the list, you can just use bisect_left()\n    # and then add one to the index of all subsequent entries in the list.\n    # this is a great example of when bisect_left() is really useful\n    # bisect_left() also makes it easy to insert items in the middle of a list.\n    # The only issue here is that you need to make sure that all subsequent entries in the list have their indices updated.\n    # This is why the index of all subsequent entries must be incremented by 1\n    # Here's a typical insertion problem:\n    # a = [1,2,3,4,5]\n    # a.insert(3, 'Four')\n    # print(a)\n    # # gives you [1,2,3,'Four',4,5]\n    # print(bisect_left(a, 'Four'))\n    # # gives you 4\n    # a[4] = 'FOUR'\n    # print(a)\n    # # gives you [1,2,3,'Four',4,'FOUR']\n    # print(bisect_left(a, 'Four'))\n    # # gives you 4\n    # a[4] = 'FOUR'\n    # print(a)\n    # # gives you [1,2,3,'Four',4,'FOUR']\n    # print(bisect_left(a, 'Four'))\n    # # gives you 4\n    # a[4] = 'FOUR'\n    # print(a)\n    # # gives you [1,2,3,'Four',4,'FOUR']\n    # So you can see that the index of all subsequent entries must be incremented by 1 each time you insert.\n    # So this is a big problem because this also means that you have to search for things like 'Four' to make sure you insert it in the right place\n    # and not where 'Four' was already inserted.\n    # bisect_left() solves this problem because it automatically updates the index of all subsequent entries in the list.\n    # If you don't do this, you'll end up searching for 'Four' for every insertion.\n    # This is much more efficient than a linear search.\n    # the function returns a new list containing the original list and the new value inserted.\n    # This is the same as what you'd get doing the following:\n    # a = [1,2,3,4,5]\n    # a.insert(3, 'Four')\n    # print(a)\n    # # gives you [1,2,3,'Four',4,5]\n    # print(bisect_left(a, 'Four'))\n    # # gives you 4\n    # print(a)\n    # # gives you [1,2,3,'Four',4,5]\n    # print(bisect_left(a, 'Four'))\n    # # gives you 4\n    # a[4] = 'FOUR'\n    # print(a)\n    # # gives you [1,2,3,'Four',4,'FOUR']\n    # print(bisect_left(a, 'Four'))\n    # # gives you 4\n    # a[4] = 'FOUR'\n    # print(a)\n    # # gives you [1,2,3,'Four',4,'FOUR']\n    # print(bisect_left(a, 'Four'))\n    # # gives you 4\n    # a[4] = 'FOUR'\n    # print(a)\n    # # gives you [1,2,3,'Four',4,'FOUR']\n    # So in the previous example, using the default value of 0 for the lo argument, you would get the same result.\n    # That's because the default value of 0 is the index of the first entry in the list.\n    # So, all you need to do is:\n    # bisect_left(a, x, lo=0)\n    # and you'll get the same result as doing:\n    # bisect_left(a, x)\n    # By default, the value of the hi argument is set to the length of the list.\n    # So, all you need to do is:\n    # bisect_left(a, x, lo=0)\n    # and you'll get the same result as doing:\n    # bisect_left(a, x, hi=len(a))\n    # So, if you want to insert a new value into a sorted list, you can just use bisect_left()\n    # Because of this, it's generally a good idea to use bisect_left() unless you're doing something strange.\n    # bisect_left() is not always the best thing to use, however.\n    # There are a lot of problems where you have to do a binary search through a list of numbers.\n    # In those cases, it's much more efficient to use a linear search than a bisect_left() search.\n    # For example, if you're inserting a new value into a list of numbers, you can't just start at the index of the first entry in the list and add 1 to it.\n    # This is because you could end up inserting the new value in the middle of the list, and then searching for the new value to make sure you're not inserting it twice.\n    # If you're searching for a value and you want to search through the list, you should use a linear search.\n    # When you're inserting or searching for a value, it's better to use a linear search than a bisect_left() search.\n    # So when you're inserting a new value, it's better to use a linear search, and when you're searching for a value, it's better to use a linear search.\n    # The above example is a good example of where linear search is better than bisect_left().\n    # Because in these situations, you're not looking for something that's in the middle, but rather the beginning or end of a list.\n    # For example, when you're insertin"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if x < a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #Find the position of the first element less than x.\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else:\n        return False\nprint(check_str(\"aeiouA\"))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\ndef check_str_method_2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using method 2.\n    '''\n    return string[0] in 'aeiouAEIOU'\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.search(regex, string)):\n        print(\"String is starting with a vowel.\")\n    else:\n        print(\"String is not starting with a vowel.\")\n    return\nif __name__ == \"__main__\":\n    string = input(\"Enter a string: \")\n    check_str(string"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex,string))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    else: \n        return False\nif __name__ == \"__main__\": \n    string = input(\"Enter a string : \")\n    print(check_str(string)) "
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string) is not None: \n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)): \n        return 1\n    return 0\nstring = input('Enter the string : ')\nif(check_str(string)): \n    print('String Starts with a vowel.')\nelse: \n    print('String doesn\\'t start with a vowel.')"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        print(\"yes\") \n    else: \n        print(\"No\") \ncheck_str('Test') \ncheck_str('OneTwo') \ncheck_str('MyTest') \ncheck_str('_Test') \ncheck_str('__Test__') \ncheck_str('ThisIsAString') \ncheck_str('IamNotAVowelString')"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 0:\n        print(\"Error: negative number cannot calculate geometric sum\")\n    elif n == 0:\n        return 0\n    else:\n        return geometric_sum(n-1) + 1/n\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n    \nprint(geometric_sum(1))\nprint(geometric_sum(2))\nprint(geometric_sum(3))\nprint(geometric_sum(4))\nprint(geometric_sum(5))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1/n) * (2 * geometric_sum(n-1))\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    start = 1; \n    for i in range(1, n): \n        start = start * 10\n    return int(start * 0.5)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    for i in range(1, n+1): \n        \n        triangularNumber = 0; \n        \n        j = 1\n        while j <= math.sqrt(10**i - 1): \n            j = j + 1\n            triangularNumber = triangularNumber + j\n        \n        if i == n and (triangularNumber % (10**n) == 0): \n            return int(triangularNumber/ (10**n))\n            break; \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(n*(n+1)/2)\ndef find_TNumber(n): \n    '''\n    Write a python function to find the n-th triangular number. https://www.geeksforgeeks.org/number-n-th-triangular-number/\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # length of n-digit number.  n is len(number)-1\n    k = math.ceil(math.log(10**(n-1), 10)) \n    # index starts from 1\n    index = 1 \n    # Find index of 1st triangular number with k digits. \n    for i in range(1, k+1): \n        index = index * 10**i \n    # Increment index of number by 1 \n    index = index + 1\n    return index \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        #Triangular Number (n)  (n(n+1))/2\n        x = (i * (i + 1)) / 2\n        i = i + 1\n        if len(str(int(x))) == n:\n            return i - 2\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 1; \n    smallest = (n * (n + 1)) / 2; \n    return int(smallest); \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # The number of digits in the triangular number T(n) = T(n - 1) + n\n    index = 0\n    for i in range(1, n): \n        index = index + i\n    return index \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i=1\n    while(1):\n        s=i*(i+1)/2\n        if len(str(s))==n:\n            return int(s)\n        i+=1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(0, 10**n-1):\n        x_str = str(x)\n        x_int = int(x_str)\n        x_sum = int(x_str[0]) + int(x_str[1]) + int(x_str[2])\n        if x_sum == n:\n            return x_int\n    return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    x=math.sqrt(n)\n    if x-math.floor(x)==0:\n        return n\n    return ((n-1)*(n)//2)+(n-math.floor(x))\ndef find_Triangular_Number(n): \n    '''\n    Write a python function to find the value of nth triangular number.\n    '''\n    return (n*(n+1))//2\ndef main(): \n    n=int(input())\n    print(find_Index(n))\n    print(find_Triangular_Number(n))\nif __name__ == '__main__': \n    main()"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(test_tup)\n    print(test_tup[::2])\n    print(test_tup[1::2])\n    test_dict = {test_tup[i]:test_tup[i+1] for i in range(0, len(test_tup), 2)}\n    print(test_dict)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # An empty dictionary\n    dictionary = dict()\n    # Iterate through every tuple in the list\n    for elem in test_tup:\n        # Check if the key is in the dictionary\n        if elem[0] in dictionary:\n            # If present, append the element to the list\n            # at the index of that key\n            dictionary[elem[0]].append(elem[1])\n        else:\n            # If not, create a new list with that element\n            dictionary[elem[0]] = [elem[1]]\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    keys = []\n    values = []\n    for item in test_tup:\n        keys.append(item[0])\n        values.append(item[1])\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n    print(test_dict)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2],test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize dictionary\n    test_dict = {}\n    # iterate over the given tuple\n    for index, element in enumerate(test_tup):\n        if index % 2 == 0:\n            # if the index is even, then it is the key\n            test_dict[element] = test_tup[index + 1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for index in range(0,len(test_tup)-1,2):\n        test_dict[test_tup[index]] = test_tup[index+1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    # initialize an empty dictionary \n    test_dict = {} \n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n    else :\n        first_char = s[0]\n        for ch in s[1:] :\n            if ch!= first_char :\n                return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (s == s[0] * len(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = []\n    for i in s:\n        l.append(i)\n    if len(l) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = list(s)\n    if len(set(c))==1 :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.lower()\n    if len(s) == 0 :\n        return True\n    if len(s) == 1 :\n        return True\n    for i in s :\n        if i!= s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s_list=list(s)\n    c=s_list[0]\n    for x in s_list :\n        if x!=c :\n            return False\n    return True\nprint(all_Characters_Same(\"abbcccb\"))\nprint(all_Characters_Same(\"abbcccbdd\"))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    import string\n    import re\n    s = ''.join(re.split(r'[\\s]',s))\n    if s == s[0]*len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    \n    c = s[0]\n    for i in range(len(s)) :\n        if c!= s[i] :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # code goes here\n    return len(set(s)) == 1\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3**(1/2))/4 * math.sqrt(2*(side**2))\n    #side = 5\n    #area = area_tetrahedron(side)\n    #print(area)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**3)/(6*math.sqrt(2))\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return 6*(side**2)\ndef volume_rectangle(side):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return side*side\ndef area_rectangle(side):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return 2*side*side\ndef volume_right_circular_prism(side):\n    '''\n    Write a function to caluclate the volume of a right circular prism.\n    '''\n    return (side**2)*math.pi\ndef area_right_circular_prism(side):\n    '''\n    Write a function to caluclate the area of a right circular prism.\n    '''\n    return (2*math.pi*side**2)\ndef volume_right_circular_prism_with_parrallelopiped(side,h):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a parallelopiped.\n    '''\n    return (side**2)*math.pi + (side*h)*2\ndef area_right_circular_prism_with_parrallelopiped(side,h):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a parallelopiped.\n    '''\n    return (2*math.pi*side**2) + (2*side*h)\ndef volume_right_circular_prism_with_cylinder(side,h):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a cylinder.\n    '''\n    return (side**2)*math.pi + (side*h)*2\ndef area_right_circular_prism_with_cylinder(side,h):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a cylinder.\n    '''\n    return (2*math.pi*side**2) + (2*side*h)\ndef volume_right_circular_prism_with_cone(side,h):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a cone.\n    '''\n    return (side**2)*math.pi + ((side**2)*math.pi/3) + (h*side)\ndef area_right_circular_prism_with_cone(side,h):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a cone.\n    '''\n    return (2*math.pi*side**2) + ((4*side*math.pi)/3) + (h*side)\ndef volume_right_circular_prism_with_pyramid(side,h):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a pyramid.\n    '''\n    return (side**2)*math.pi + ((side**2)*math.pi/3)*2 + (h*side)\ndef area_right_circular_prism_with_pyramid(side,h):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a pyramid.\n    '''\n    return (2*math.pi*side**2) + ((4*side*math.pi)/3)*2 + (h*side)\ndef volume_right_circular_prism_with_sphere(side,h):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a sphere.\n    '''\n    return (side**2)*math.pi + ((4*side*math.pi)/3)*2 + (h*side)\ndef area_right_circular_prism_with_sphere(side,h):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a sphere.\n    '''\n    return (2*math.pi*side**2) + ((4*side*math.pi)/3)*2 + (h*side)\ndef volume_right_circular_prism_with_hemisphere(side,h):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a hemisphere.\n    '''\n    return (side**2)*math.pi + ((4*side*math.pi)/3)*2 + (h*side)\ndef area_right_circular_prism_with_hemisphere(side,h):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a hemisphere.\n    '''\n    return (2*math.pi*side**2) + ((4*side*math.pi)/3)*2 + (h*side)\ndef volume_right_circular_prism_with_ellipsoid(side,h,p,q,r):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a ellipsoid.\n    '''\n    return (side**2)*math.pi + ((4*side*math.pi)/3)*2 + (h*side) + (p*q*r)\ndef area_right_circular_prism_with_ellipsoid(side,h,p,q,r):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a ellipsoid.\n    '''\n    return (2*math.pi*side**2) + ((4*side*math.pi)/3)*2 + (h*side) + (p*q*r)\ndef volume_right_circular_prism_with_paraboloid(side,h,o):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a paraboloid.\n    '''\n    return (side**2)*math.pi + ((4*side*math.pi)/3)*2 + (h*side) + (o*(o**2))\ndef area_right_circular_prism_with_paraboloid(side,h,o):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a paraboloid.\n    '''\n    return (2*math.pi*side**2) + ((4*side*math.pi)/3)*2 + (h*side) + (o*(o**2))\ndef volume_right_circular_prism_with_hyperboloid(side,h,o):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a hyperboloid.\n    '''\n    return (side**2)*math.pi + ((4*side*math.pi)/3)*2 + (h*side) + (o*(o**2))\ndef area_right_circular_prism_with_hyperboloid(side,h,o):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a hyperboloid.\n    '''\n    return (2*math.pi*side**2) + ((4*side*math.pi)/3)*2 + (h*side) + (o*(o**2))\ndef volume_right_circular_prism_with_paralellogram(side,h,a):\n    '''\n    Write a function to caluclate the volume of a right circular prism that has a paralellogram.\n    '''\n    return (side**2)*math.pi + ((4*side*math.pi)/3)*2 + (h*side) + (a*(a**2))\ndef area_right_circular_prism_with_paralellogram(side,h,a):\n    '''\n    Write a function to caluclate the area of a right circular prism that has a paralellogram.\n    '''\n    return (2*math.pi*side**2) + ((4*side*math.pi)/3)*2 + (h*side) + (a*(a**2))\ndef volume_right_circular_prism_wit"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3))/4*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((side**2)*math.sqrt(2))/4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6 * (side ** 2)\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side ** 3\ndef volume_cone(side, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return 1/3 * math.pi * (side ** 2) * height\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return math.pi * radius ** 2 * height\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (radius ** 3)\ndef volume_pyramid(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return 1/3 * base ** 2 * height\ndef volume_rectangular_prism(length, width, height):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return length * width * height\ndef volume_triangular_prism(base, height, side1, side2):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return 1/2 * base * height * side1 * side2\ndef volume_trapezoidal_prism(base1, base2, height):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return (base1 + base2) / 2 * height\ndef volume_ellipsoidal_prism(radius, height):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return 1/3 * math.pi * (radius ** 2) * height\ndef area_rectangular_prism(length, width, height):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return 2 * (length * width + length * height + width * height)\ndef area_triangular_prism(base, height, side1, side2):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return base * height + side1 * side2\ndef area_trapezoidal_prism(base1, base2, height):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return 1/2 * (base1 + base2) * height\ndef area_parallelogram(base, height):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return base * height\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side ** 2\ndef area_cuboid(length, width, height):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return length * width * height\ndef area_rectangular_pyramid(base, height):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return area_rectangular_prism(base, base, height)\ndef area_triangular_pyramid(base, height):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return 1/2 * base * height\ndef area_square_pyramid(base):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return area_rectangular_pyramid(base, base)\ndef area_pyramid(base, height):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return area_rectangular_pyramid(base, height)\ndef volume_spherical_cap(radius):\n    '''\n    Write a function to caluclate the volume of a spherical cap.\n    '''\n    return (1/3 * math.pi * (radius ** 3)) - (1/3 * math.pi * radius ** 2 * math.acos(radius / math.sqrt(2 * radius ** 2 + 2 * radius ** 2 * math.cos(math.pi/3))))\ndef volume_spherical_cup(radius):\n    '''\n    Write a function to caluclate the volume of a spherical cup.\n    '''\n    return (1/3 * math.pi * (radius ** 3)) + (1/3 * math.pi * radius ** 2 * math.acos(radius / math.sqrt(2 * radius ** 2 + 2 * radius ** 2 * math.cos(math.pi/3))))\ndef perimeter_square(side):\n    '''\n    Write a function to caluclate the perimeter of a square.\n    '''\n    return 4 * side\ndef perimeter_rectangular_prism(length, width, height):\n    '''\n    Write a function to caluclate the perimeter of a rectangular prism.\n    '''\n    return 2 * (length + width + height)\ndef perimeter_triangular_prism(base, side1, side2):\n    '''\n    Write a function to caluclate the perimeter of a rectangular prism.\n    '''\n    return 2 * (base + side1 + side2)\ndef perimeter_rectangular_pyramid(base, height):\n    '''\n    Write a function to caluclate the perimeter of a rectangular prism.\n    '''\n    return 2 * (base + perimeter_rectangular_prism(base, height))\ndef perimeter_triangular_pyramid(base, height):\n    '''\n    Write a function to caluclate the perimeter of a rectangular prism.\n    '''\n    return 2 * (base + perimeter_triangular_prism(base, height))\ndef perimeter_square_pyramid(base):\n    '''\n    Write a function to caluclate the perimeter of a rectangular prism.\n    '''\n    return 2 * (base + perimeter_rectangular_pyramid(base, base))\ndef perimeter_parallelogram(base, height):\n    '''\n    Write a function to caluclate the perimeter of a rectangular prism.\n    '''\n    return 2 * (base + height)\ndef perimeter_trapezoidal_prism(base1, base2, height):\n    '''\n    Write a function to caluclate the perimeter of a rectangular prism.\n    '''\n    return 2 * (base1 + base2 + height)\ndef perimeter_circular_cylinder(radius, height):\n    '''\n    Write a function to caluclate the perimeter of a circular cylinder.\n    '''\n    return 2 * math.pi * radius * (radius + height)\ndef perimeter_elliptical_cylinder(major_axis, minor_axis):\n    '''\n    Write a function to caluclate the perimeter of a circular cylinder.\n    '''\n    return 2 * math.pi * math.sqrt((major_axis ** 2) + (minor_axis ** 2))\ndef perimeter_parabolic_cylinder(radius):\n    '''\n    Write a function to caluclate the perimeter of a circular cylinder.\n    '''\n    return 2 * math.pi * radius\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi * (radius ** 2)\ndef area_circular_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a circular cylinder.\n    '''\n    return math.pi * (radius ** 2) * height\ndef area_elliptical_cylinder(major_axis, minor_axis):\n    '''\n    Write a function to caluclate the area of a elliptical cylinder.\n    '''\n    return math.pi * (major_axis ** 2) * minor_axis\ndef area_parabolic_cylinder(radius):\n    '''\n    Write a function to caluclate the area of a parabolic cylinder.\n    '''\n    return math.pi * (radius ** 2) / 2\ndef area_circular_cone(radius, height):\n    '''\n    Write a function to caluclate the area of a circular cone.\n    '''\n    return area_circle(radius) "
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3)/4)*(side**2)\n    \ndef area_right_triangle(base, height):\n    '''\n    Write a function to caluclate the area of a right-angled triangle.\n    '''\n    return (base*height)/2\n    \ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi*(radius**2)\n    \ndef area_parallelogram(base, height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    return base*height\n    \ndef area_trapezium(base1, base2, height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    return (base1+base2)*height/2\n    \ndef area_isosceles_triangle(base, height):\n    '''\n    Write a function to caluclate the area of an isosceles triangle.\n    '''\n    return base*height\n    \ndef area_triangle_equilateral(base):\n    '''\n    Write a function to caluclate the area of an equilateral triangle.\n    '''\n    return (math.sqrt(3)*base)/2\n    \ndef area_parallelogram_iso(base, height):\n    '''\n    Write a function to caluclate the area of an isosceles parallelogram.\n    '''\n    return base*height\n    \ndef area_parallelogram_equi(base, height):\n    '''\n    Write a function to caluclate the area of an equilateral parallelogram.\n    '''\n    return base*height\n    \ndef area_parallelogram_square(side):\n    '''\n    Write a function to caluclate the area of a square parallelogram.\n    '''\n    return side*side\n    \ndef area_circle_sector(radius, angle):\n    '''\n    Write a function to caluclate the area of a circle sector.\n    '''\n    return (math.pi*(radius**2)*angle)/360\n    \ndef area_circle_circumference(radius):\n    '''\n    Write a function to caluclate the area of a circle circumference.\n    '''\n    return (2*math.pi*(radius**2))\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side*(side-3*math.sqrt(2)))\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round((3**(1/2)*side**2)/4,2)\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return round(side**3,2)\ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return round((math.pi * radius**2 * height)/3,2)\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return round((math.pi * radius**2 * height)/3,2)\ndef area_cube(side):\n    '''\n    Write a function to calculate the surface area of a cube.\n    '''\n    return round(6*side**2,2)\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the surface area of a triangle.\n    '''\n    return round((side1+side2+side3)/2,2)\ndef area_parallelogram(side1, side2):\n    '''\n    Write a function to calculate the surface area of a parallelogram.\n    '''\n    return round(2*side1*side2,2)\ndef area_trapezium(side1, side2, side3):\n    '''\n    Write a function to calculate the surface area of a trapezium.\n    '''\n    return round(((side1+side2)*side3)/2,2)\ndef area_rhombus(side):\n    '''\n    Write a function to calculate the surface area of a rhombus.\n    '''\n    return round(math.sqrt(side**2+side**2),2)\ndef area_kite(side1, side2):\n    '''\n    Write a function to calculate the surface area of a kite.\n    '''\n    return round(side1*side2*math.sin(math.pi/5),2)\ndef area_ellipse(radiusx, radiusy):\n    '''\n    Write a function to calculate the surface area of an ellipse.\n    '''\n    return round(math.pi*radiusx*radiusy,2)\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return round(((4/3)*(math.pi)*(radius)**3)/4,2)\ndef area_triangle_sum(base, height, top_angle, bottom_angle):\n    '''\n    Write a function to calculate the surface area of a right triangle.\n    '''\n    return round(((base*height)/2)*(math.sin(top_angle)+math.sin(bottom_angle)),2)\ndef area_parallelogram_sum(base, height):\n    '''\n    Write a function to calculate the surface area of a parallelogram.\n    '''\n    return round((base*height)/2,2)\ndef area_trapezium_sum(side1, side2, side3):\n    '''\n    Write a function to calculate the surface area of a trapezium.\n    '''\n    return round(((side1+side2)/2)*side3,2)\ndef area_trapezium_sum_edge_length(side1, side2, side3, side4):\n    '''\n    Write a function to calculate the surface area of a trapezium.\n    '''\n    return round(((side1+side2)/2)*side3,2)\ndef area_circle_sum(radius):\n    '''\n    Write a function to calculate the surface area of a circle.\n    '''\n    return round(math.pi*(radius**2),2)\ndef area_circle_circumference(radius):\n    '''\n    Write a function to calculate the surface area of a circle.\n    '''\n    return round(math.pi*2*radius,2)\ndef area_circle_sector(radius, angle):\n    '''\n    Write a function to calculate the surface area of a circle sector.\n    '''\n    return round(((math.pi*(radius**2)*angle)/360),2)\ndef area_circle_quarter_circumference(radius):\n    '''\n    Write a function to calculate the surface area of a quarter circle.\n    '''\n    return round(math.pi*radius,2)\ndef volume_cone_sum(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return round(((math.pi*radius**2)/3)*height,2)\ndef volume_cylinder_sum(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return round(((math.pi*radius**2)*height)/3,2)\ndef area_cylinder_top(radius, height):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    return round(2*math.pi*radius,2)\ndef volume_cone_circumference(radius, height):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    return round(((math.pi*radius**2)*height)/3,2)\ndef volume_cylinder_circumference(radius, height):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    return round((math.pi*2*radius*height),2)\ndef area_cylinder_circumference(radius, height):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    return round((math.pi*2*radius*height),2)\ndef area_square_pyramid_base(height, base):\n    '''\n    Write a function to calculate the surface area of a square pyramid base.\n    '''\n    return round((base*height)/2,2)\ndef area_square_pyramid_side(base, height):\n    '''\n    Write a function to calculate the surface area of a square pyramid side.\n    '''\n    return round((math.sqrt((base**2)*((height/2)**2))),2)\ndef volume_square_pyramid(base, height):\n    '''\n    Write a function to calculate the volume of a square pyramid.\n    '''\n    return round(((base*height)/3),2)\ndef volume_parallelepiped_volume(side1, side2, side3, height):\n    '''\n    Write a function to calculate the volume of a parallelepiped.\n    '''\n    return round((side1*side2*side3*height),2)\ndef volume_cone_volume(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return round(((math.pi*(radius**2))*height)/3,2)\ndef volume_cylinder_volume(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return round(((math.pi*radius**2)*height),2)\ndef area_square_pyramid_side(base, height):\n    '''\n    Write a function to calculate the surface area of a square pyramid side.\n    '''\n    return round(((base*height)/2),2)\ndef area_square_pyramid_volume(base, height):\n    '''\n    Write a function to calculate the volume of a square pyramid.\n    '''\n    return round(((base*height)/3),2)\ndef area_square_pyramid_base(side):\n    '''\n    Write a function to calculate the surface area of a square pyramid base.\n    '''\n    return round(side**2,2)\ndef area_sphere_surface_area(radius):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return round((4*math.pi*radius**2),2)\ndef area_sphere_volume(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return round(((4*math.pi*(radius**3)))/3,2)\ndef area_square_sphere_surface_area(radius):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    ''"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3 / (6*math.sqrt(2))\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    end = list[-1]\n    for i in range(n - 1, 0, -1):\n        list[i] = list[i - 1]\n    list[0] = end\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    # if the list contains no items or the list is less than 1\n    if length == 0 or length < 1:\n        return -1\n    n = m % length\n    # we need to create two list to store items\n    a = list[length - n:]\n    b = list[:length - n]\n    list = a + b\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    rotate_list = []\n    for i in range(m, len(list)):\n        rotate_list.append(list[i])\n    for i in range(0, m):\n        rotate_list.append(list[i])\n    return rotate_list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[0]\n    n = len(list)\n    for i in range(m):\n        list[i] = list[i+1]\n    list[n-1] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    rotate_num = m\n    list_length = len(list)\n    last_rotate_num = list_length - rotate_num\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # simple algo to right rotate\n    # n = len(list)\n    # k = m % n\n    # temp = list[:]\n    # for i in range(k):\n    #     temp.append(list.pop(0))\n    # return temp\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    p = list\n    q = []\n    n = len(p)\n    for i in range(m, n):\n        q.append(p[i])\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    m = m % length\n    new_list = list[-m:] + list[:-m]\n    return new_list\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not any(None in x for x in test_tup):\n        print(\"No None value in tuple\")\n    else:\n        print(\"None value present in tuple\")\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    print(test_tup, end ='= ')\n    if(test_tup.count(None) == len(test_tup)):\n        print('Empty')\n    else:\n        print('Not empty')\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(not x for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    print(test_tup)\n    print(\"Does the tuple contain any None value? - \", any(item == None for item in test_tup))\n    print(\"Does the tuple contain any None value? - \", any(item == None for item in test_tup))\n    \n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for t in test_tup:\n        if t is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    a = map(lambda x: x % 10, range(startnum, endnum + 1))\n    b = map(lambda x: map(lambda y: x % y, range(1, 10)), a)\n    c = reduce(lambda x, y: x and y, b)\n    return list(map(lambda x: x == c, b))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #results = []\n    #for num in range(startnum, endnum):\n        #if all([ num % int(i) == 0 for i in str(num)]):\n            #results.append(num)\n    return list(filter(lambda x: all([ x % int(i) == 0 for i in str(x)]), range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    new_list = []\n    if endnum > startnum:\n        for i in range(startnum, endnum + 1):\n            flag = True\n            for j in str(i):\n                if i % int(j)!= 0:\n                    flag = False\n                    break\n            if flag == True:\n                new_list.append(i)\n    else:\n        for i in range(startnum, endnum - 1, -1):\n            flag = True\n            for j in str(i):\n                if i % int(j)!= 0:\n                    flag = False\n                    break\n            if flag == True:\n                new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [number for number in range(startnum, endnum+1) if all([number%(int(digit))==0 for digit in str(number)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for i in range(startnum, endnum):\n        if (all(i % int(j) == 0 for j in str(i))):\n            lst.append(i)\n    return(lst)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def num_divisible_by_digits(startnum, endnum):\n        return [i for i in range(startnum, endnum + 1) if sum(map(int, str(i))) % len(str(i)) == 0]\n    return num_divisible_by_digits\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for i in range(startnum, endnum):\n        digits = []\n        for x in str(i):\n            digits.append(int(x))\n        if(all(i%num==0 for num in digits)):\n            lst.append(i)\n    return lst"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for x in range(startnum, endnum):\n        if x % int(str(x)[0]) == 0 and x % int(str(x)[1]) == 0 and x % int(str(x)[2]) == 0 and x % int(str(x)[3]) == 0:\n            print(x)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    lst=[]\n    for i in range(startnum,endnum+1):\n        k=[]\n        for j in str(i):\n            k.append(j)\n        if int(''.join(k))%i==0:\n            lst.append(i)\n    return lst\n    \n    \n    \nprint(divisible_by_digits(1,10))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    lst = []\n    for i in range(startnum, endnum+1):\n        if i%sum(list(str(i))) == 0:\n            lst.append(i)\n    return(lst)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a%360\n    if a>360:\n        return None\n    return (r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = a * math.pi / 180\n    area = r**2 * math.sin(a)**2\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # angle = input(\"Enter the angle\")\n    # radius = input(\"Enter the radius\")\n    # radius = float(radius)\n    # angle = float(angle)\n    # if angle > 360:\n    #     print(\"angle should be less than 360\")\n    # else:\n    #     area = (1/2)*(radius)*(radius)*(math.sin((angle/360)*(2*math.pi)))\n    #     print(area)\n    angle = a\n    radius = r\n    if angle > 360:\n        return None\n    else:\n        area = (1/2)*(radius)*(radius)*(math.sin((angle/360)*(2*math.pi)))\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        area = (r**2)*(math.sin(math.radians(a/2)))*(math.sin(math.radians(a/2)))\n        return area\n    "
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return a*math.pi*r*r/360\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    else:\n        return (r**2)*(a/360)*(math.pi)\ndef absolute_value(n):\n    '''\n    Write a function called absolute_value that takes a number as an input and returns its absolute value. For example, the absolute value of 7 is 7.\n    '''\n    if n<0:\n        return n*-1\n    else:\n        return n\ndef f_to_c(f):\n    '''\n    Write a function called f_to_c that takes an input f (in Fahrenheit) and returns the number of degrees c (in Celsius). Formula is C = (F-32)/9.\n    '''\n    return (f-32)/9\ndef c_to_f(c):\n    '''\n    Write a function called c_to_f that takes an input c (in Celsius) and returns the number of degrees f (in Fahrenheit). Formula is F = C*9/5+32\n    '''\n    return (c*9/5)+32\ndef speed_converter(s,t):\n    '''\n    Write a function called speed_converter that takes a speed s (in miles per hour) and a unit of measure t (either'miles' or 'km') and returns the speed in kilometers.\n    '''\n    if t=='km':\n        return s*1.609\n    elif t=='miles':\n        return s*0.6213\n    else:\n        return None\ndef vol_sphere(r):\n    '''\n    Write a function called vol_sphere that takes a radius r and returns the volume of a sphere with radius r.\n    '''\n    return (4/3)*(math.pi)*(r**3)\ndef vol_cylinder(r,h):\n    '''\n    Write a function called vol_cylinder that takes a radius r and height h and returns the volume of a cylinder with radius r and height h.\n    '''\n    return (math.pi)*(r**2)*h\ndef surf_area_cylinder(r,h):\n    '''\n    Write a function called surf_area_cylinder that takes a radius r and height h and returns the surface area of a cylinder with radius r and height h.\n    '''\n    return (2*math.pi*r)*(r+h)\ndef surf_area_cone(r,h):\n    '''\n    Write a function called surf_area_cone that takes a radius r and height h and returns the surface area of a cone with radius r and height h.\n    '''\n    return (math.pi)*r*(r+h)\ndef sum_even_fib(n):\n    '''\n    Write a function called sum_even_fib that takes a number n and adds up all even Fibonacci numbers lower than or equal to n.\n    '''\n    a,b=0,1\n    while b<n:\n        a,b=b,a+b\n        if a%2==0:\n            return a\ndef sum_fib(n):\n    '''\n    Write a function called sum_fib that takes a number n and adds up all Fibonacci numbers lower than or equal to n.\n    '''\n    a,b=0,1\n    while b<n:\n        a,b=b,a+b\n        return a\ndef num_divisors(n):\n    '''\n    Write a function called num_divisors that takes a number n and returns the number of positive divisors that n has.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\ndef prime_checker(n):\n    '''\n    Write a function called prime_checker that takes a number n and returns True if n is prime and False otherwise. A number is prime if it has exactly 2 positive divisors.\n    '''\n    if num_divisors(n)==2:\n        return True\n    else:\n        return False\ndef reverse(s):\n    '''\n    Write a function called reverse that takes a string s and returns a reversed version of s.\n    '''\n    return s[::-1]\ndef palindrome_checker(s):\n    '''\n    Write a function called palindrome_checker that takes a string s and returns True if s is a palindrome and False otherwise.\n    '''\n    if s==reverse(s):\n        return True\n    else:\n        return False\ndef palindrome_sentence(s):\n    '''\n    Write a function called palindrome_sentence that takes a string s and returns a copy of s in which all occurrences of its first non-letter have been removed.\n    '''\n    count=0\n    for i in s:\n        if i.isalpha():\n            count+=1\n    return s[count:]\ndef digital_root(n):\n    '''\n    Write a function called digital_root that takes an integer n and returns the sum of the digits of n.\n    '''\n    return sum([int(i) for i in str(n)])\ndef digital_sum(n):\n    '''\n    Write a function called digital_sum that takes an integer n and returns the sum of the digits of n.\n    '''\n    sum=0\n    for i in str(n):\n        sum+=int(i)\n    return sum\ndef prime_factors(n):\n    '''\n    Write a function called prime_factors that takes an integer n and returns a list of its prime factors in ascending order.\n    '''\n    count=1\n    list1=[]\n    while count<=n:\n        if n%count==0:\n            list1.append(count)\n            n=n/count\n            count=1\n        else:\n            count+=1\n    return list1\ndef check_fermat(a,b,c,n):\n    '''\n    Write a function called check_fermat that takes four integer inputs a, b, c, and n and checks to see if Fermat's theorem holds. You have to make sure that n is greater than 2 and that a, b, and c are positive integers.\n    '''\n    if n>2 and a>0 and b>0 and c>0:\n        if n**a+n**b==n**c:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_power(n,k):\n    '''\n    Write a function called is_power that takes two integers n and k and checks to see if n is a power of k.\n    '''\n    if n==1:\n        return True\n    elif n%k==0:\n        return is_power(n/k,k)\n    else:\n        return False\ndef is_power_v2(n,k):\n    '''\n    Write a function called is_power that takes two integers n and k and checks to see if n is a power of k. This version is more efficient than the first, it avoids a lot of repeated squaring by looking for factors after the first one has been found.\n    '''\n    if n==1:\n        return True\n    elif n%k==0:\n        return is_power_v2(n/k,k)\n    else:\n        return False\ndef is_power_v3(n,k):\n    '''\n    Write a function called is_power that takes two integers n and k and checks to see if n is a power of k. This version is more efficient than the first, second, and third, it avoids a lot of repeated squaring by looking for factors after the first one has been found.\n    '''\n    if n==1:\n        return True\n    elif n%k==0:\n        return is_power_v2(n/k,k)\n    else:\n        return False\ndef make_change(n,d):\n    '''\n    Write a function called make_change that takes an amount of money n and the denomination of coins d and returns the number of coins and leftover money.\n    '''\n    count=0\n    while d<=n:\n        n=n-d\n        count+=1\n    return count,n\ndef make_change_v2(n,d):\n    '''\n    Write a function called make_change that takes an amount of money n and the denomination of coins d and returns the number of coins and leftover money."
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2*(a/360)*(math.pi)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    else:\n        return ((r**2)*(math.pi/180)*a)/2\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    r = float(r)\n    a = float(a)\n    if(a>360):\n        return None\n    else:\n        return (r**2)*math.pi*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = (a*math.pi)/180\n    if a>360:\n        return None\n    else:\n        s_area = (r**2)*a/360\n        return s_area\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the three string\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # create a table to store the subproblem solution\n    L = [[None]*(n+1) for i in range(m+1)]\n    # iterate through each subproblem \n    # case 1: insert a character in first string\n    for i in range(m+1):\n        # case 1: insert a character in first string\n        for j in range(n+1):\n            # case 2: insert a character in second string\n            for k in range(o+1):\n                # if the first and second string is same, and the third string is also same\n                if(i==0 or j==0 or k==0):\n                    L[i][j] = 0\n                # if the character in the first and second string are same and the third string character is not same\n                elif(X[i-1] == Y[j-1] == Z[k-1]):\n                    L[i][j] = L[i-1][j-1] + 1\n                # if the character in the first and second string are not same\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n    # print the output of the longest common subsequence table\n    # print(L)\n    # print the length of the longest common subsequence\n    print(L[m][n])\n    # print the longest common subsequence\n    i = m\n    j = n\n    k = o\n    lcs = []\n    # traceback the longest common subsequence\n    while i > 0 and j > 0 and k > 0:\n        # if current character in first string is same as current character in second string\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        # if the current character in first string is not same as current character in second string\n        # then, select the longest common subsequence\n        # if the first string character is smaller than the second string character\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        # if the first string character is not same as the second string character\n        # then, select the longest common subsequence\n        # if the first string character is greater than the second string character\n        elif L[i-1][j] < L[i][j-1]:\n            j -= 1\n        # if the first string character is not same as the second string character\n        # then, select the longest common subsequence\n        # if the first string character is not equal to the second string character\n        elif L[i-1][j]!= L[i][j-1]:\n            k -= 1\n    # print the longest common subsequence\n    print(\"\".join(lcs[::-1]))\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1, n2, n3 = len(X), len(Y), len(Z)\n    dp = [[[None]*(n3+1) for _ in range(n2+1)] for _ in range(n1+1)]\n    for i in range(n1+1):\n        for j in range(n2+1):\n            for k in range(n3+1):\n                if i==0 or j==0 or k==0:\n                    dp[i][j][k] = 0\n                elif X[i-1]==Y[j-1] and X[i-1]==Z[k-1]:\n                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[n1][n2][n3]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return LCS(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(l+1):\n                if i == 0 or j == 0 or k == 0 :\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][l]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(n+1)] for i in range(m+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None]*(n+1) for i in range(m+1)] for j in range(l+1)] \n    L[0][0][0] = 0\n    for i in range(1, m+1): \n        L[0][i][0] = 0\n    for j in range(1, n+1): \n        L[0][0][j] = 0\n    for k in range(1, l+1): \n        L[k][0][0] = 0\n    \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, l+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    L[k][i][j] = L[k-1][i-1][j-1] + 1\n                else: \n                    L[k][i][j] = max(L[k-1][i][j], L[k][i-1][j], L[k][i][j-1]) \n    return L[l][m][n] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[None]*(n+1) for i in range(m+1)] \n    #L = [[0]*(n+1) for i in range(m+1)] \n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str1 = \"This is an example of a sentence that gives an example of regular expressions.\"\n    # str"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile('(^[A-Z])')\n    return re.sub(pattern, r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #print(\"Hello World\")\n    #str1 = \"Hello World\"\n    str1 = str1.split()\n    #print(str1)\n    #str1 = \"Hello World\"\n    #print(str1)\n    #print(str1[0].capitalize())\n    #str1 = \"Hello World\"\n    #print(str1.title())\n    newstr = \"\"\n    for i in str1:\n        if i.istitle():\n            #print(i)\n            newstr += \" \" + i.title()\n        else:\n            newstr += i\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    for i in range(0, len(str1)):\n        if str1[i][0].isupper():\n            str1[i] ='' + str1[i]\n    return ''.join(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.findall(r'\\w*[A-Z][a-z]*', str1)\n    for i in range(len(str2)):\n        str2[i] = str2[i] +''\n    return \"\".join(str2)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_words=re.findall(r'[A-Z][A-Za-z]*', str1)\n    if capital_words:\n        for i in range(len(capital_words)):\n            if i == 0:\n                str1 = str1.replace(capital_words[i], capital_words[i].capitalize())\n            else:\n                str1 = str1.replace(capital_words[i], \" \" + capital_words[i].capitalize(), 1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    x=re.findall('[A-Z][a-z]+',str1)\n    print(\" \".join(x))\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].islower() and not str1[i+1].islower():\n            str1 = str1[:i+count] + \" \" + str1[i+count:]\n            count += 1\n    return str1\n    \ndef capitals(str1):\n    '''\n    Write a function to determine the number of capital letters in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # code here\n    res = re.findall(r'(?<=[A-Z]\\w)([A-Z][a-z]+)\\s(?=[A-Z][a-z]+)', str1)\n    if res:\n        str1 = re.sub(r'(?<=[A-Z]\\w)([A-Z][a-z]+)\\s(?=[A-Z][a-z]+)', '\\g<1> ', str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('(?<=[a-z])([A-Z])', r' \\1', str1)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: [int(i) if i.isdigit() else i for i in re.split('(\\d+)', x)])\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # nums_str = ['23', '4', '7', '6', '5', '8', '2']\n    # return sorted(nums_str, key=int)\n    return sorted(nums_str, key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_list = []\n    for i in nums_str:\n        if i.isdigit():\n            sorted_list.append(i)\n    sorted_list.sort(key=int)\n    return sorted_list\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(t) if t.isdigit() else t.lower() for t in x])\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [x for x in nums_str if x.lstrip('-').isdigit()]\n    nums_str.sort(key = lambda x: int(x.lstrip('-')))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def convert(strng):\n        try:\n            return int(strng)\n        except:\n            return strng\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # create a list\n    nums = []\n    # loop through the list of strings\n    for i in nums_str:\n        # if item is a number, convert it to a float\n        if i.replace('.', '', 1).isdigit():\n            # try to convert to a float\n            try:\n                f = float(i)\n                # if it is possible, add it to the list of floats\n                nums.append(f)\n            # if not, ignore it\n            except ValueError:\n                pass\n    # sort the list\n    nums.sort()\n    # return the sorted list of numbers\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [i for i in nums_str if i.isnumeric()]\n    nums_str.sort(key = lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(i) for i in x.split('.')])\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Should return None\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Use append twice to add the tuple to the list\n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i])\n    for i in range(len(test_tup)):\n        new_list.append(test_tup[i])\n    return new_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    left = 2*i+1\n    right = 2*i+2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return\n    parent_idx = i // 2\n    if arr[i] < arr[parent_idx]:\n        return False\n    return check_min_heap_helper(arr, parent_idx)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if root is greater than left child\n    if arr[i] > arr[i * 2 + 1]:\n        return False\n    \n    # Check if root is greater than right child\n    if arr[i] > arr[i * 2 + 2]:\n        return False\n    \n    # Check left child\n    if i * 2 + 1 < len(arr) and not check_min_heap_helper(arr, i * 2 + 1):\n        return False\n    \n    # Check right child\n    if i * 2 + 2 < len(arr) and not check_min_heap_helper(arr, i * 2 + 2):\n        return False\n    \n    # If none of the conditions is broken\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or i < 0:\n        return False\n    if i*2+1 < len(arr) and arr[i] > arr[2*i+1]:\n        return False\n    if i*2+2 < len(arr) and arr[i] > arr[2*i+2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Creating a function to check if the given array is min heap or not\n    # using recursion.\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #Complete this function\n    if i >= len(arr):\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #Initialize a variable to check if the current element is less than any of it's child\n    min_child = False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # array should have at least two items\n    if len(arr) < 2:\n        return False\n    # here we are using i+1 and i+2 because we will compare with parent and children\n    # and indexes start from 1 in python and not from 0\n    # so here i+1 corresponds to i index\n    # and i+2 corresponds to (i+1) index\n    if (arr[i] > arr[(i+1)]) or (arr[i] > arr[(i+2)]) :\n        return False\n    # check if left child of the current node is larger than current node\n    if i*2+1 < len(arr):\n        return check_min_heap_helper(arr, i*2+1)\n    # check if right child of the current node is larger than current node\n    if i*2+2 < len(arr):\n        return check_min_heap_helper(arr, i*2+2)\n    # if we get to the leaf node then return true\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Initialize values\n    jacobsthal_num = 0\n    previous_jacobsthal_num = 0\n    count = 0\n    \n    while jacobsthal_num < n: \n        # Update values\n        count += 1\n        jacobsthal_num = previous_jacobsthal_num + count\n        previous_jacobsthal_num = jacobsthal_num\n    return jacobsthal_num\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n<2:\n        return n\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    count = 0\n    p = 1\n    s = 1\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # if n==1:\n    #     return 1\n    # elif n==2:\n    #     return 1\n    # else:\n    #     return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    def jacobsthal_num_fib(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n==1:\n        return [1]\n    elif n==2:\n        return [1,1]\n    else:\n        jacobsthal_num_fib_back = jacobsthal_num_fib(n-1)\n        jacobsthal_num_fib_back.append(jacobsthal_num_fib_back[-1] + jacobsthal_num_fib_back[-2])\n        return jacobsthal_num_fib_back\n    print('something is wrong')\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 1 \n    if n == 1: return 3 \n    if n == 2: return 5 \n    # if n == 3: return 11 \n    return (jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 0\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: \n        return 2\n    if n == 2: \n        return 3\n    a = 0\n    b = 1\n    c = 1\n    for _ in range(n - 2): \n        a = b + c \n        b = c \n        c = a\n    return c\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return heapq.nsmallest(K, test_list, key=lambda x: x[1])\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # heapq.heapify(test_list)\n    # print(test_list)\n    # heapq.heapify(test_list)\n    # print(test_list)\n    # print(heapq.heapify(test_list))\n    # print(test_list)\n    # print(heapq.heappop(test_list))\n    # print(test_list)\n    # print(heapq.heappop(test_list))\n    # print(test_list)\n    # print(heapq.heappop(test_list))\n    # print(test_list)\n    # print(heapq.heappop(test_list))\n    # print(test_list)\n    # print(heapq.heappop(test_list))\n    # print(test_list)\n    # print(heapq.heappop(test_list))\n    # print(test_list)\n    # print(heapq.heappop(test_list))\n    # print(test_list)\n    # print(heapq.heappop(test_list))\n    # print(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        print(\"Not enough records in the list\")\n    if K == 1:\n        print(min(test_list))\n    else:\n        min_K = []\n        for i in range(K):\n            min_K.append(min(test_list))\n            test_list.remove(min(test_list))\n        print(min_K)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq\n    min_k = heapq.nsmallest(K, test_list)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Implement the below function and run the program\n    result = min(test_list, key=lambda x: x[0])\n    if result[0] < K:\n        return result\n    else:\n        return [result[0], result[1]]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key = lambda tup:tup[1])\n    return sorted_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    a = len(test_list)\n    if K < 0 or K > a:\n        return \"invalid input\"\n    min_list = []\n    for i in range(0, K):\n        min_list.append(min(test_list, key=lambda x: x[i]))\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_record = list()\n    for i in range(0, K):\n        min_k_record.append(test_list[i])\n    return min_k_record\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            return test_list[i]\n    return [None]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return list(itertools.islice(min_k_gen(test_list, K), K))\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # TODO: Write your code here\n    new_l = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            new_l.append(l1[i])\n    return new_l\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for idx, element in enumerate(l1):\n        if element in l2 and element in l3 and element not in res:\n            res.append(element)\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    assert(len(l1) == len(l2) == len(l3))\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    final_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l1[i] in l3:\n            final_list.append(l1[i])\n    return final_list\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # trivial case\n    if len(l1) == 0 or len(l2) == 0 or len(l3) == 0:\n        return []\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] == l1[i]:\n            common_list.append(l1[i])\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # raise NotImplementedError()\n    new_list = []\n    if len(l1) < len(l2) and len(l2) < len(l3):\n        for i in range(len(l1)):\n            if l1[i] in l2 and l2[i] in l3 and l1[i] == l2[i] == l3[i]:\n                new_list.append(l1[i])\n    elif len(l1) < len(l2) and len(l2) < len(l3):\n        for i in range(len(l2)):\n            if l2[i] in l1 and l1[i] in l3 and l2[i] == l1[i] == l3[i]:\n                new_list.append(l2[i])\n    elif len(l2) < len(l1) and len(l1) < len(l3):\n        for i in range(len(l3)):\n            if l3[i] in l2 and l2[i] in l1 and l3[i] == l2[i] == l1[i]:\n                new_list.append(l3[i])\n    else:\n        for i in range(len(l3)):\n            if l3[i] in l2 and l2[i] in l1 and l3[i] == l2[i] == l1[i]:\n                new_list.append(l3[i])\n    return new_list\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest.__defaults__[0]\n    second_smallest = second_smallest.__defaults__[0]\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    largest_value = None\n    second_largest_value = None\n    for number in numbers:\n        if largest_value == None:\n            largest_value = number\n        else:\n            if number > largest_value:\n                second_largest_value = largest_value\n                largest_value = number\n            elif number < largest_value and second_largest_value == None:\n                second_largest_value = number\n            elif number < second_largest_value:\n                second_largest_value = number\n    return second_largest_value\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if(len(numbers)==1):\n        return numbers[0]\n    else:\n        a=min(numbers)\n        numbers.remove(a)\n        b=min(numbers)\n        return b\ndef find_smallest_numbers(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if(len(numbers)==1):\n        return numbers[0]\n    else:\n        a=min(numbers)\n        numbers.remove(a)\n        b=min(numbers)\n        return b\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for num in numbers:\n        for index in range(len(numbers)-1):\n            if numbers[index] > numbers[index + 1]:\n                numbers[index], numbers[index + 1] = numbers[index + 1], numbers[index]\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    min1 = 0\n    min2 = 0\n    for i in range(len(numbers)):\n        if numbers[i] < numbers[min1]:\n            min2 = min1\n            min1 = i\n        elif numbers[i] < numbers[min2]:\n            min2 = i\n    return numbers[min2]"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    if len(numbers) < 2:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Method 1: using sort\n    #return sorted(list(set(numbers)))[1]\n    # Method 2: using sort, and then to get the second smallest element\n    return sorted(numbers)[1]\n    \n    \ndef palindrome(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # Method 1: using join and split\n    #return ''.join(sorted(s)) == ''.join(sorted(s, reverse=True))\n    # Method 2: using join and slicing\n    return s == ''.join(reversed(s))\n    \n    \ndef main():\n    # Use list slicing\n    #test_function([0, 1, 2], 1, 'int')\n    #test_function('hello', 3,'str')\n    #test_function(['a', 'b', 'c', 'd'], 'a', 'list')\n    #test_function([(1,2), (2,3), (3,4), (4,5)], (1, 2), 'tuple')\n    #test_function([1, 2, 3, 4, 5, 6, 7], 2, 'int')\n    #test_function('abcdcba', 'cdc','str')\n    #test_function('google', 'ooggle','str')\n    #test_function(('a', 'b', 'c', 'd'), 'b', 'tuple')\n    #test_function('a b c d', 'b c d','str')\n    #test_function(['a b c d'], 'b c d', 'list')\n    #test_function(['a b c d'], ['b c d'], 'list')\n    #test_function([1, 2, 3, 4], 3, 'int')\n    #test_function(['a', 'b', 'c', 'd'], 'b', 'list')\n    #test_function(['a', 'b', 'c', 'd'], ['b', 'c', 'd'], 'list')\n    #test_function([1, 2, 3, 4, 5], [4, 3, 2, 1, 5], 'list')\n    #test_function(['a', 'b', 'c', 'd'], ['b', 'c', 'd'], 'list')\n    #test_function(['a', 'b', 'c', 'd'], ['b', 'c', 'd', 'c'], 'list')\n    #test_function(['a', 'b', 'c', 'd'], 'c','str')\n    #test_function(['a', 'b', 'c', 'd'], 'e','str')\n    #test_function([1, 2, 3, 4, 5, 6, 7], 5, 'int')\n    #test_function('a', 'b','str')\n    #test_function(['a', 'b', 'c', 'd'], 'b', 'list')\n    #test_function('abcdcba', 'cdc','str')\n    #test_function('abcdcba', 'dcba','str')\n    #test_function('abcdcba', 'cdc','str')\n    #test_function('abcdcba', 'dcba','str')\n    #test_function('google', 'ooggle','str')\n    #test_function('googgle', 'ooggle','str')\n    #test_function('googgle', 'googgle','str')\n    #test_function('a', 'b','str')\n    #test_function('ab', 'ba','str')\n    #test_function('ab', 'ab','str')\n    #test_function('ab', 'ba','str')\n    #test_function('ab', 'ab','str')\n    #test_function('ab', 'ba','str')\n    #test_function(['a', 'b', 'c', 'd'], 'b', 'list')\n    #test_function(['a', 'b', 'c', 'd'], ['b', 'c', 'd'], 'list')\n    #test_function(['a', 'b', 'c', 'd'], ['b', 'c', 'd', 'c'], 'list')\n    #test_function(['a', 'b', 'c', 'd'], 'c','str')\n    #test_function(['a', 'b', 'c', 'd'], 'e','str')\n    #test_function(['a', 'b', 'c', 'd'], 'c','str')\n    #test_function('abcdcba', 'cdc','str')\n    #test_function('abcdcba', 'dcba','str')\n    #test_function('abcdcba', 'cdc','str')\n    #test_function('abcdcba', 'dcba','str')\n    #test_function('google', 'ooggle','str')\n    #test_function('googgle', 'ooggle','str')\n    #test_function('googgle', 'googgle','str')\n    #test_function('a', 'b','str')\n    #test_function('ab', 'ba','str')\n    #test_function('ab', 'ab','str')\n    #test_function('ab', 'ba','str')\n    #test_function('ab', 'ab','str')\n    #test_function('ab', 'ba','str')\n    #test_function(['a', 'b', 'c', 'd'], 'b', 'list')\n    #test_function(['a', 'b', 'c', 'd'], ['b', 'c', 'd'], 'list')\n    #test_function(['a', 'b', 'c', 'd'], ['b', 'c', 'd', 'c'], 'list')\n    #test_function(['a', 'b', 'c', 'd'], 'c','str')\n    #test_function(['a', 'b', 'c', 'd'], 'e','str')\n    #test_function(['a', 'b', 'c', 'd'], 'c','str')\n    #test_function('abcdcba', 'cdc','str')\n    #test_function('abcdcba', 'dcba','str')\n    #test_function('abcdcba', 'cdc','str')\n    #test_function('abcdcba', 'dcba','str')\n    #test_function('google', 'ooggle','str')\n    #test_function('googgle', 'ooggle','str')\n    #test_function('googgle', 'googgle','str')\n    #test_function('a', 'b','str')\n    #test_function('ab', 'ba','str')\n    #test_function('ab', 'ab','str')\n    #test_function('ab', 'ba','str')\n    #test_function('ab', 'ab','str')\n    #test_function('ab', 'ba','str')\n    #test_function(['a', 'b', 'c', 'd'], 'b', 'list')\n    #test_function(['a', 'b', 'c', 'd'], ['b', 'c', 'd'], 'list')\n    #test_function(['a', 'b', 'c', 'd'], ['b', 'c', 'd', 'c'], 'list')\n    #test_function(['a', 'b', 'c', 'd'], 'c','str')\n    #test_function(['a', 'b', 'c', 'd'], 'e','str')\n    #test_function(['a', 'b', 'c', 'd'], 'c','str')\n    #test_function('abcdcba', 'cdc','str')\n    #test_function('abcdcba', 'dcba','str')\n    #test_function('abcdcba', 'cdc','str')\n    #test_function('abcdcba', 'dcba','str')\n    #test_function('google', 'ooggle','str')\n    #test_function('googgle', 'ooggle','str')\n    #test_function('googgle', 'googgle','str')\n    #test_function('a', 'b','st"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return\n    \n    # find the smallest number and the second smallest number\n    smallest = numbers[0]\n    for num in numbers[1:]:\n        if num < smallest:\n            smallest, num = num, smallest\n    \n    # find the second smallest number\n    for num in numbers:\n        if num > smallest:\n            return num\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"ab*\")\n    if pattern.search(text):\n        return \"matched\"\n    else:\n        return \"not matched\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"ab*\"\n    match_object = re.search(pattern, text)\n    if match_object:\n        print(\"String matches!\")\n    else:\n        print(\"String does not match!\")\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p = re.compile(r'ab+')\n    if p.match(text):\n        return 'Match!'\n    else:\n        return 'No match'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a = r'a+b*'\n    print(bool(re.search(a, text)))\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.+?b\"\n    if re.search(pattern, text):\n        return \"Match!\"\n    else:\n        return \"No match!\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"ab*?\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"ab+?\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+b+')\n    if pattern.search(text):\n        return 'found a match!'\n    else:\n        return 'no match!'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'a\\db+'\n    if re.search(pattern, text):\n        return 'found'\n    else:\n        return 'not found'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'(ab)+')\n    mo = pattern.search(text)\n    return mo is not None\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict_ = {}\n    for i in test_list:\n        rev_i = i[::-1]\n        if i in dict_:\n            dict_[i] += 1\n        elif rev_i in dict_:\n            dict_[rev_i] += 1\n        else:\n            dict_[i] = 1\n    return dict_\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # O(n^2)\n    # for i in range(len(test_list)):\n        # for j in range(i+1, len(test_list)):\n            # if test_list[i] == test_list[j][::-1]:\n                # print(test_list[i], test_list[j])\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # count = 0\n    # for i in range(0, len(test_list)):\n    #     for j in range(0, len(test_list)):\n    #         if test_list[j] == test_list[i][::-1]:\n    #             count += 1\n    # return count\n    \n    '''\n    Reference solution in Python\n    '''\n    # rev_dict = {}\n    # for i in test_list:\n    #     rev_dict[i[::-1]] = rev_dict.get(i[::-1], 0) + 1\n    # return sum([v*(v-1)/2 for k, v in rev_dict.items()])\n    \n    '''\n    Count reverse pairs using binary search\n    '''\n    # import bisect\n    # rev_dict = {}\n    # for i in test_list:\n    #     if i[::-1] in rev_dict:\n    #         rev_dict[i[::-1]] += 1\n    #     else:\n    #         rev_dict[i[::-1]] = 1\n    # print(rev_dict)\n    # num_pairs = 0\n    # for key in rev_dict.keys():\n    #     # print(key)\n    #     num_pairs += rev_dict[key] * (rev_dict[key] - 1) // 2\n    # return num_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_map = {}\n    count_pairs = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict_of_pairs = {}\n    for i in range(len(test_list)):\n        key = \"\".join(reversed(test_list[i]))\n        if key in dict_of_pairs:\n            dict_of_pairs[key] += 1\n        else:\n            dict_of_pairs[key] = 1\n    return dict_of_pairs\n    \ntest_list = ['abba','baba','abaa','abba','abaa','aaab','aaaa','baab','abab']\nprint(count_reverse_pairs(test_list))\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in test_list:\n        for j in test_list:\n            if j[::-1] == i and i!= j:\n                print(i, j, sep=\" \")\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_strings = []\n    count_pairs = 0\n    for elem in test_list:\n        if elem in reverse_strings:\n            count_pairs += 1\n        else:\n            reverse_strings.append(elem[::-1])\n    return count_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list)):\n            if(i!=j):\n                if(test_list[i][::-1]==test_list[j]):\n                    count+=1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    list1 = list(set(list1))\n    unique_list = {}\n    for item in list1:\n        item = tuple(item)\n        unique_list[item] = list1.count(item)\n    return unique_list\n    \n    \ndef get_sum_metrics(unique_list):\n    '''\n    Write a function that take a dictionary as an input. The dictionary contains lists as keys and their values are their occurencies in the original list.\n    You should return the sum of all lists that appear in the dictionary.\n    '''\n    \n    sum = 0\n    for item in unique_list:\n        sum = sum + item\n    return sum\n    \n    \ndef get_min_metrics(unique_list):\n    '''\n    Write a function that take a dictionary as an input. The dictionary contains lists as keys and their values are their occurencies in the original list.\n    You should return the minimum of all lists that appear in the dictionary.\n    '''\n    \n    min = max(unique_list.values())\n    for item in unique_list:\n        if unique_list[item] < min:\n            min = unique_list[item]\n    return min\n    \n    \ndef get_max_metrics(unique_list):\n    '''\n    Write a function that take a dictionary as an input. The dictionary contains lists as keys and their values are their occurencies in the original list.\n    You should return the maximum of all lists that appear in the dictionary.\n    '''\n    \n    max = 0\n    for item in unique_list:\n        if unique_list[item] > max:\n            max = unique_list[item]\n    return max\n    \n    \ndef flatten_list(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of all items in them.\n    '''\n    \n    list2 = []\n    for item in list1:\n        for item1 in item:\n            list2.append(item1)\n    return list2\n    \n    \ndef repeat_lists(list1):\n    '''\n    Write a function that takes a list of lists and returns a new list where every item in the list of lists appears the same number of times as the original list.\n    '''\n    \n    new_list = []\n    for item in list1:\n        for i in range(list1.count(item)):\n            new_list.append(item)\n    return new_list\n    \n    \ndef find_and_replace(list1):\n    '''\n    Write a function that takes a list of lists and return a new list with each item from the original list replaced with the same item repeated n times, where n is the value of the original item.\n    '''\n    \n    new_list = []\n    for item in list1:\n        for i in range(list1.count(item)):\n            new_list.append(item)\n    return new_list\n    \n    \ndef sort_list(list1):\n    '''\n    Write a function that takes a list of lists and returns a new list where every list is sorted in an ascending order.\n    '''\n    \n    list1 = list(set(list1))\n    list2 = []\n    for item in list1:\n        list2.append(sorted(item))\n    return sorted(list2)\n    \n    \ndef check_and_combine(list1, list2):\n    '''\n    Write a function that takes two lists of lists and return a new list containing the lists in the first list if they appear in the second list. If they appear more than once in the second list, the number of times the list appears in the first list is ignored.\n    '''\n    \n    new_list = []\n    for item in list1:\n        for item1 in list2:\n            if item == item1:\n                new_list.append(item)\n    return new_list\n    \n    \ndef check_and_combine_cond(list1, list2, condition):\n    '''\n    Write a function that takes two lists of lists and returns a new list containing the lists in the first list if they appear in the second list. If they appear more than once in the second list, the number of times the list appears in the first list is ignored.\n    '''\n    \n    new_list = []\n    for item in list1:\n        for item1 in list2:\n            if item == item1:\n                new_list.append(item)\n    return new_list\n    \n    \ndef sum_lists(list1, list2):\n    '''\n    Write a function that takes two lists of numbers and return a new list containing the sums of the numbers in the two lists.\n    '''\n    \n    new_list = []\n    for item in list1:\n        for item1 in list2:\n            new_list.append(item + item1)\n    return new_list\n    \n    \ndef sum_lists_cond(list1, list2, condition):\n    '''\n    Write a function that takes two lists of numbers and returns a new list containing the sums of the numbers in the two lists.\n    '''\n    \n    new_list = []\n    for item in list1:\n        for item1 in list2:\n            if condition(item, item1):\n                new_list.append(item + item1)\n    return new_list\n    \n    \ndef sub_lists(list1, list2):\n    '''\n    Write a function that takes two lists of numbers and return a new list containing the differences of the numbers in the two lists.\n    '''\n    \n    new_list = []\n    for item in list1:\n        for item1 in list2:\n            new_list.append(item - item1)\n    return new_list\n    \n    \ndef sub_lists_cond(list1, list2, condition):\n    '''\n    Write a function that takes two lists of numbers and returns a new list containing the differences of the numbers in the two lists.\n    '''\n    \n    new_list = []\n    for item in list1:\n        for item1 in list2:\n            if condition(item, item1):\n                new_list.append(item - item1)\n    return new_list\n    \n    \ndef count_unique_elements(list1):\n    '''\n    Write a function that takes a list of numbers and return a dictionary where the keys are the unique elements in the list and the values are the number of times that element appears in the list.\n    '''\n    \n    new_list = {}\n    for item in list1:\n        if item not in new_list:\n            new_list[item] = 1\n        else:\n            new_list[item] = new_list[item] + 1\n    return new_list\n    \n    \ndef count_unique_elements_cond(list1, condition):\n    '''\n    Write a function that takes a list of numbers and return a dictionary where the keys are the unique elements in the list and the values are the number of times that element appears in the list.\n    '''\n    \n    new_list = {}\n    for item in list1:\n        if condition(item):\n            if item not in new_list:\n                new_list[item] = 1\n            else:\n                new_list[item] = new_list[item] + 1\n    return new_list\n    \n    \ndef remove_items(list1, list2):\n    '''\n    Write a function that takes a list of lists and a list of numbers and return a new list where the items in the list of lists that appear in the list of numbers are removed.\n    '''\n    \n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list\n    \n    \ndef remove_items_cond(list1, list2, condition):\n    '''\n    Write a function that takes a list of lists and a list of numbers and return a new list where the items in the list of lists that appear in the list of numbers are removed.\n    '''\n    \n    new_list = []\n    for item in list1:\n        if condition(item):\n            new_list.append(item)\n    return new_list\n    \n    \ndef select_items(list1, list2):\n    '''\n    Write a function that takes a list of lists and a list o"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #your code here\n    res = {}\n    for item in list1:\n        if type(item) == list:\n            res[tuple(item)] = list1.count(item)\n        else:\n            res[item] = list1.count(item)\n    return res\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tuple1 = tuple(list1)\n    return {tuple1: list1.count(tuple1)}\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for element in list1:\n        tuple_element = tuple(element)\n        if tuple_element in list_dict:\n            list_dict[tuple_element] += 1\n        else:\n            list_dict[tuple_element] = 1\n    return list_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_tuples = []\n    for sublist in list1:\n        list_tuples.append(tuple(sublist))\n    unique_tuples = set(list_tuples)\n    my_dict = {}\n    for tuple1 in unique_tuples:\n        my_dict[tuple1] = list_tuples.count(tuple1)\n    return my_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list1[:]\n    unique_list = []\n    \n    for item in list1:\n        if type(item) == list:\n            if item not in unique_list:\n                unique_list.append(item)\n                \n    unique_dict = {}\n    \n    for sublist in unique_list:\n        unique_dict[tuple(sublist)] = list1.count(sublist)\n        \n    return unique_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if not list1:\n        return []\n    else:\n        return {tuple(list1[0]): 1, tuple(list1[1:]): 0}\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_to_tuple = tuple(list1)\n    \n    unique_list = list(set(list1))\n    unique_list.sort()\n    unique_tuple = tuple(unique_list)\n    \n    count_list = {}\n    \n    for item in unique_tuple:\n        count_list[item] = list_to_tuple.count(item)\n    \n    print(count_list)\n    return count_list\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #return [tuple(i) for i in list1 if list1.count(i) == 1]\n    return {i : list1.count(i) for i in list1}\n    \ndef unique_sublists_2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res = {}\n    for i in list1:\n        if tuple(i) in res:\n            res[tuple(i)] += 1\n        else:\n            res[tuple(i)] = 1\n    return res\n    \ndef make_tuple(list1):\n    '''\n    Write a function to convert a list to a tuple and return it.\n    '''\n    return tuple(list1)\n    \ndef split_list(list1):\n    '''\n    Write a function to split a list in two parts, based on a given value. The result of the function will be a tuple, the first part will contain all the values that are smaller than the given value and the second part will contain all the values that are greater.\n    '''\n    return (list1[:list1.index(7)], list1[list1.index(7):])\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique = {}\n    for sublist in list1:\n        if tuple(sublist) in unique:\n            unique[tuple(sublist)] += 1\n        else:\n            unique[tuple(sublist)] = 1\n    return unique\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '.': '.'}\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    assert type(num) is str\n    return num.isdecimal()\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.strip()\n    try:\n        float(num)\n        if '.' in num and len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except:\n        return False\n    "
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if num.isdigit() and len(num) == 2 and num[1] == '0' else False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # pass\n    return True if num.isdecimal() and len(num)==4 and '.' in num else False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if len(num) == 3:\n        if num[0] == '0':\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not num.isdecimal():\n        return False\n    if len(num) > 2:\n        return False\n    if len(num) == 2 and num[0] == '0':\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if(float(num) % 1 == 0):\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if arr.count(i) == 1:\n            return i\n    return None\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # arr = [1,2,3,4,5,5,5,5,6,7,8,9,9]\n    \n    arr.sort()\n    \n    if(arr.count(arr[0]) == len(arr)):\n        return arr[0]\n    else:\n        return -1\n    \n    \n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #print(arr)\n    x=arr[0]\n    for i in range(1,len(arr)):\n        if(arr[i]!=x):\n            return 0\n    return 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    num = len(arr)\n    if num == 0:\n        return False\n    else:\n        dic = {}\n        for i in range(num):\n            if arr[i] in dic:\n                return False\n            else:\n                dic[arr[i]] = 0\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return list(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    for i in range(0, len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_number_list = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']\n    if monthnum3 not in month_number_list:\n        print(\"Not a month number\")\n        return\n    else:\n        if monthnum3 == '1':\n            print('Month with 30 days: 1')\n        elif monthnum3 == '2':\n            print('Month with 30 days: 2')\n        elif monthnum3 == '3':\n            print('Month with 30 days: 3')\n        elif monthnum3 == '4':\n            print('Month with 30 days: 4')\n        elif monthnum3 == '5':\n            print('Month with 30 days: 5')\n        elif monthnum3 == '6':\n            print('Month with 30 days: 6')\n        elif monthnum3 == '7':\n            print('Month with 30 days: 7')\n        elif monthnum3 == '8':\n            print('Month with 30 days: 8')\n        elif monthnum3 == '9':\n            print('Month with 30 days: 9')\n        elif monthnum3 == '10':\n            print('Month with 30 days: 10')\n        elif monthnum3 == '11':\n            print('Month with 30 days: 11')\n        elif monthnum3 == '12':\n            print('Month with 30 days: 12')\n        return\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return \"January have 31 days\"\n    elif monthnum3 == 2:\n        return \"February have 28 days\"\n    elif monthnum3 == 3:\n        return \"March have 31 days\"\n    elif monthnum3 == 4:\n        return \"April have 30 days\"\n    elif monthnum3 == 5:\n        return \"May have 31 days\"\n    elif monthnum3 == 6:\n        return \"June have 30 days\"\n    elif monthnum3 == 7:\n        return \"July have 31 days\"\n    elif monthnum3 == 8:\n        return \"August have 31 days\"\n    elif monthnum3 == 9:\n        return \"September have 30 days\"\n    elif monthnum3 == 10:\n        return \"October have 31 days\"\n    elif monthnum3 == 11:\n        return \"November have 30 days\"\n    elif monthnum3 == 12:\n        return \"December have 31 days\"\n    else:\n        return \"you have entered an invalid number!\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_31 = [1, 3, 5, 7, 8, 10, 12]\n    month_30 = [4, 6, 9, 11]\n    if monthnum3 in month_30:\n        print(\"{} months have 30 days.\".format(monthnum3))\n    elif monthnum3 in month_31:\n        print(\"{} months have 31 days.\".format(monthnum3))\n    else:\n        print(\"Month number must be between 1 to 12\")\n        return\n    return\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return 30\n    elif monthnum3 in [4, 6, 9, 11]:\n        return 31\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1:\n        print(str(monthnum3) +\" has \" + str(monthnum3*30) + \" days\")\n    elif monthnum3==2:\n        print(str(monthnum3) +\" has \" + str(monthnum3*28) + \" days\")\n    elif monthnum3==3:\n        print(str(monthnum3) +\" has \" + str(monthnum3*31) + \" days\")\n    elif monthnum3==4:\n        print(str(monthnum3) +\" has \" + str(monthnum3*30) + \" days\")\n    elif monthnum3==5:\n        print(str(monthnum3) +\" has \" + str(monthnum3*31) + \" days\")\n    elif monthnum3==6:\n        print(str(monthnum3) +\" has \" + str(monthnum3*30) + \" days\")\n    elif monthnum3==7:\n        print(str(monthnum3) +\" has \" + str(monthnum3*31) + \" days\")\n    elif monthnum3==8:\n        print(str(monthnum3) +\" has \" + str(monthnum3*31) + \" days\")\n    elif monthnum3==9:\n        print(str(monthnum3) +\" has \" + str(monthnum3*30) + \" days\")\n    elif monthnum3==10:\n        print(str(monthnum3) +\" has \" + str(monthnum3*31) + \" days\")\n    elif monthnum3==11:\n        print(str(monthnum3) +\" has \" + str(monthnum3*30) + \" days\")\n    elif monthnum3==12:\n        print(str(monthnum3) +\" has \" + str(monthnum3*31) + \" days\")\n    else:\n        print(\"Wrong input\")\ncheck_monthnumber_number(3)\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthlist = {'1' : 31, '2' : 28, '3' : 31, '4' : 30, '5' : 31, '6' : 30, '7' : 31, '8' : 31, '9' : 30, '10' : 31, '11' : 30, '12' : 31}\n    month = monthnum3\n    if month in monthlist:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        return 30\n    elif monthnum3==2:\n        return 28\n    else:\n        return None\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        print(\"Yes, the month has 30 days\")\n    else:\n        print(\"No, the month doesn't have 30 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"The month with 30 days is : \",monthnum3)\n    else:\n        print(\"The month with 31 days is : \",monthnum3)\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = arr[1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] < res:\n            res = arr[i] - arr[i-1]\n    return res\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # initialize the first element to be 0 \n    min_diff = arr[0] \n    # set the min_diff to be greater than the last element of the array\n    min_diff = abs(arr[n - 1] - 0) \n    # iterate from the second element till end of the array\n    for i in range(1, n): \n        # find the min difference between arr[i] and arr[j] \n        diff = abs(arr[i] - arr[i - 1]) \n        # update min_diff \n        if min_diff > diff: \n            min_diff = diff \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 10**6 # assigning max value\n    for i in range(n-1): # iterating from 0 to n-1\n        if arr[i+1]-arr[i] < min_diff: # checking the difference with previous minimum difference\n            min_diff = arr[i+1]-arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    diff = arr[1] - arr[0] \n    for i in range(1, n): \n        if arr[i] - arr[i - 1] < diff: \n            diff = arr[i] - arr[i - 1] \n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] < diff:\n            diff = arr[i] - arr[i-1]\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort()\n    # initialize diff as infinite\n    diff = 10**100\n    # iterate through array\n    for i in range(0,n-1):\n        # check for minimum difference\n        if(arr[i+1]-arr[i] < diff):\n            diff = arr[i+1] - arr[i]\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0: return\n    #min_diff = 10**9\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(n-1):\n        if(abs(arr[i+1] - arr[i]) < min_diff):\n            min_diff = abs(arr[i+1] - arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = []\n    for i in range(n):\n        diff.append(abs(arr[i] - arr[i-1]))\n    \n    return min(diff)\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if (n <= 1):\n        return 0\n    arr.sort()\n    mini = 10**9\n    for i in range(0, n-1):\n        if (arr[i+1] - arr[i] < mini):\n            mini = arr[i+1] - arr[i]\n    return mini\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    print(min_diff)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for ch in str:\n        if ch.isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if type(str) == str:\n        if str!= \"\":\n            return len(str)\n    else:\n        raise TypeError(\"Argument must be of type str\")\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num += 1\n    return num\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in range(len(str)):\n        if str[i] >= '0' and str[i] <= '9':\n            ctr = ctr+1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in range(0,len(str)):\n        if str[i] in [str(x) for x in range(0,10)]:\n            count=count+1\n    return count\nprint(number_ctr(\"This is a number\"))\nprint(number_ctr(\"1234\"))\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #special case: \n    if n == 0: \n        return \"None\"\n    if n == 1: \n        return \"Polite\"\n    if n == 2: \n        return \"I Polite\"\n    #Special Case\n    if n == 3: \n        return \"II Polite\"\n    if n == 4: \n        return \"III Polite\"\n    if n == 5: \n        return \"IV Polite\"\n    if n == 6: \n        return \"V Polite\"\n    if n == 7: \n        return \"VI Polite\"\n    if n == 8: \n        return \"VII Polite\"\n    if n == 9: \n        return \"VIII Polite\"\n    if n == 10: \n        return \"IX Polite\"\n    if n == 11: \n        return \"X Polite\"\n    if n == 12: \n        return \"XI Polite\"\n    if n == 13: \n        return \"XII Polite\"\n    if n == 14: \n        return \"XIII Polite\"\n    if n == 15: \n        return \"XIV Polite\"\n    if n == 16: \n        return \"XV Polite\"\n    if n == 17: \n        return \"XVI Polite\"\n    if n == 18: \n        return \"XVII Polite\"\n    if n == 19: \n        return \"XVIII Polite\"\n    if n == 20: \n        return \"XIX Polite\"\n    if n == 21: \n        return \"XX Polite\"\n    if n == 22: \n        return \"XXI Polite\"\n    if n == 23: \n        return \"XXII Polite\"\n    if n == 24: \n        return \"XXIII Polite\"\n    if n == 25: \n        return \"XXIV Polite\"\n    if n == 26: \n        return \"XXV Polite\"\n    if n == 27: \n        return \"XXVI Polite\"\n    if n == 28: \n        return \"XXVII Polite\"\n    if n == 29: \n        return \"XXVIII Polite\"\n    if n == 30: \n        return \"XXIX Polite\"\n    if n == 31: \n        return \"XXX Polite\"\n    if n == 32: \n        return \"XXXI Polite\"\n    if n == 33: \n        return \"XXXII Polite\"\n    if n == 34: \n        return \"XXXIII Polite\"\n    if n == 35: \n        return \"XXXIV Polite\"\n    if n == 36: \n        return \"XXXV Polite\"\n    if n == 37: \n        return \"XXXVI Polite\"\n    if n == 38: \n        return \"XXXVII Polite\"\n    if n == 39: \n        return \"XXXVIII Polite\"\n    if n == 40: \n        return \"XXXIX Polite\"\n    if n == 41: \n        return \"XL Polite\"\n    if n == 42: \n        return \"XLI Polite\"\n    if n == 43: \n        return \"XLII Polite\"\n    if n == 44: \n        return \"XLIII Polite\"\n    if n == 45: \n        return \"XLIV Polite\"\n    if n == 46: \n        return \"XLV Polite\"\n    if n == 47: \n        return \"XLVI Polite\"\n    if n == 48: \n        return \"XLVII Polite\"\n    if n == 49: \n        return \"XLVIII Polite\"\n    if n == 50: \n        return \"XLIX Polite\"\n    if n == 51: \n        return \"L Polite\"\n    if n == 52: \n        return \"LI Polite\"\n    if n == 53: \n        return \"LII Polite\"\n    if n == 54: \n        return \"LIII Polite\"\n    if n == 55: \n        return \"LIV Polite\"\n    if n == 56: \n        return \"LV Polite\"\n    if n == 57: \n        return \"LVI Polite\"\n    if n == 58: \n        return \"LVII Polite\"\n    if n == 59: \n        return \"LVIII Polite\"\n    if n == 60: \n        return \"LIX Polite\"\n    if n == 61: \n        return \"LX Polite\"\n    if n == 62: \n        return \"LXI Polite\"\n    if n == 63: \n        return \"LXII Polite\"\n    if n == 64: \n        return \"LXIII Polite\"\n    if n == 65: \n        return \"LXIV Polite\"\n    if n == 66: \n        return \"LXV Polite\"\n    if n == 67: \n        return \"LXVI Polite\"\n    if n == 68: \n        return \"LXVII Polite\"\n    if n == 69: \n        return \"LXVIII Polite\"\n    if n == 70: \n        return \"LXIX Polite\"\n    if n == 71: \n        return \"LXX Polite\"\n    if n == 72: \n        return \"LXXI Polite\"\n    if n == 73: \n        return \"LXXII Polite\"\n    if n == 74: \n        return \"LXXIII Polite\"\n    if n == 75: \n        return \"LXXIV Polite\"\n    if n == 76: \n        return \"LXXV Polite\"\n    if n == 77: \n        return \"LXXVI Polite\"\n    if n == 78: \n        return \"LXXVII Polite\"\n    if n == 79: \n        return \"LXXVIII Polite\"\n    if n == 80: \n        return \"LXXIX Polite\"\n    if n == 81: \n        return \"LXXX Polite\"\n    if n == 82: \n        return \"LXXXI Polite\"\n    if n == 83: \n        return \"LXXXII Polite\"\n    if n == 84: \n        return \"LXXXIII Polite\"\n    if n == 85: \n        return \"LXXXIV Polite\"\n    if n == 86: \n        return \"LXXXV Polite\"\n    if n == 87: \n        return \"LXXXVI Polite\"\n    if n == 88: \n        return \"LXXXVII Polite\"\n    if n == 89: \n        return \"LXXXVIII Polite\"\n    if n == 90: \n        return \"LXXXIX Polite\"\n    if n == 91: \n        return \"XC Polite\"\n    if n == 92: \n        return \"XCI Polite\"\n    if n == 93: \n        return \"XCII Polite\"\n    if n == 94: \n        return \"XCIII Polite\"\n    if n == 95: \n        return \"XCIV Polite\"\n    if n == 96: \n        return \"XCV Polite\"\n    if n == 97: \n        return \"XCVI Polite\"\n    if n == 98: \n        return \"XCVII Polite\"\n    if n == 99: \n        return \"XCVIII Polite\"\n    if n == 100: \n        return \"XCIX Polite\"\n    if n == 101: \n        return \"XCI Polite\"\n    if n == 102: \n        return \"XCII Polite\"\n    if n == 103: \n        return \"XCIII Polite\"\n    if n == 104: \n        return \"XCIV Polite\"\n    if n == 105: \n        return \"XCV Polite\"\n    if n == 106: \n        return \"XCVI Polite\"\n    if n == 107: \n        return \"XCVII Polite\"\n    if n == 108: \n        return \"XCVIII Polite\"\n    if n == 109: \n        return \"XCIX Polite\"\n    if n == 110: \n        return \"XCX Polite\"\n    if n == 111: \n        return \"XCXI Polite\"\n    if n == 112: \n        return \"XCXII Polite\"\n    if n == 113: \n        return \"XCXIII Polite\"\n    if n == 114: \n        return \""
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0 :\n        return 1\n    \n    res = 1\n    while n > 1 :\n        res = res + 2\n        n = n - 1\n    return res\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    arr = [0 for i in range(n)]\n    arr[1] = 1\n    arr[2] = 2\n    for i in range(3, n):\n        arr[i] = arr[i-1] + 1\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i]//2\n        else:\n            arr[i] = arr[i]//2 + 1\n    return arr[-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    arr = [] \n    for i in range(2, n + 1): \n        arr.append(i) \n    while len(arr)!= 1: \n        if len(arr)%2 == 0: \n            arr.append(arr.pop(0)) \n        else: \n            arr.append(arr.pop(0)) \n            arr.append(arr.pop(0)) \n    return arr[0] \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 2 \n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n==4:\n        return 8\n    if n==5:\n        return 13\n    if n==6:\n        return 21\n    if n==7:\n        return 34\n    if n==8:\n        return 55\n    if n==9:\n        return 89\n    if n==10:\n        return 144\n    if n==11:\n        return 233\n    if n==12:\n        return 377\n    if n==13:\n        return 610\n    if n==14:\n        return 987\n    if n==15:\n        return 1597\n    if n==16:\n        return 2584\n    if n==17:\n        return 4181\n    if n==18:\n        return 6765\n    if n==19:\n        return 10946\n    if n==20:\n        return 17711\n    if n==21:\n        return 28657\n    if n==22:\n        return 46368\n    if n==23:\n        return 75025\n    if n==24:\n        return 121393\n    if n==25:\n        return 196418\n    if n==26:\n        return 317811\n    if n==27:\n        return 514229\n    if n==28:\n        return 832040\n    if n==29:\n        return 1346269\n    if n==30:\n        return 2178309\n    if n==31:\n        return 3524578\n    if n==32:\n        return 5702887\n    if n==33:\n        return 9227465\n    if n==34:\n        return 14930352\n    if n==35:\n        return 24157817\n    if n==36:\n        return 39088169\n    if n==37:\n        return 63245986\n    if n==38:\n        return 102334155\n    if n==39:\n        return 165580141\n    if n==40:\n        return 267914296\n    if n==41:\n        return 433494437\n    if n==42:\n        return 701408733\n    if n==43:\n        return 1134903170\n    if n==44:\n        return 1836311903\n    if n==45:\n        return 2971215073\n    if n==46:\n        return 4807526976\n    if n==47:\n        return 7778742049\n    if n==48:\n        return 12586269025\n    if n==49:\n        return 20365011074\n    if n==50:\n        return 32951280099\n    if n==51:\n        return 53316291173\n    if n==52:\n        return 86267571272\n    if n==53:\n        return 139583862445\n    if n==54:\n        return 225851433717\n    if n==55:\n        return 361342509521\n    if n==56:\n        return 595786373849\n    if n==57:\n        return 962268872483\n    if n==58:\n        return 1548008755920\n    if n==59:\n        return 2504730781961\n    if n==60:\n        return 4052739537881\n    if n==61:\n        return 6189790168584\n    if n==62:\n        return 10362145676908\n    if n==63:\n        return 165537539406117\n    if n==64:\n        return 26791429601778\n    if n==65:\n        return 4334944374889\n    if n==66:\n        return 70140873335988\n    if n==67:\n        return 113490317163943\n    if n==68:\n        return 183631190323124\n    if n==69:\n        return 2971215073144983\n    if n==70:\n        return 48075269762050\n    if n==71:\n        return 777874204947999\n    if n==72:\n        return 12586269025248025\n    if n==73:\n        return 203650110742875\n    if n==74:\n        return 329512800993583\n    if n==75:\n        return 5331629117330871\n    if n==76:\n        return 86267571283554221\n    if n==77:\n        return 1395838624451143\n    if n==78:\n        return 22585143371745637\n    if n==79:\n        return 36134250952149523\n    if n==80:\n        return 59578637384922677\n    if n==81:\n        return 96226887248325309\n    if n==82:\n        return 15480087559204645\n    if n==83:\n        return 250473078196130801\n    if n==84:\n        return 40527395378814731\n    if n==85:\n        return 618979016858434307\n    if n==86:\n        return 103621456769086707\n    if n==87:\n        return 165537539406117821\n    if n==88:\n        return 267914296017778795\n    if n==89:\n        return 43349443748891173\n    if n==90:\n        return 701408733359881943\n    if n==91:\n        return 1134903171639431895\n    if n==92:\n        return 1836311903231244011\n    if n==93:\n        return 29712150731449832293\n    if n==94:\n        return 533162911733087093\n    if n==95:\n        return 862675712835542279\n    if n==96:\n        return 13958386244511435101\n    if n==97:\n        return 22585143371745638401\n    if n==98:\n        return 36134250952149523103\n    if n==99:\n        return 5957863738492267791\n    if n==100:\n        return 96226887248325309599\n    if n==101:\n        return 154800875592046455\n    if n==102:\n        return 2504730781961308033\n    if n==103:\n        return 405273953788147309\n    if n==104:\n        return 61897901685843431\n    if n==105:\n        return 10362145676908671017\n    if n==106:\n        return 165537539406117824\n    if n==107:\n        return 26791429601777879529\n    if n==108:\n        return 43349443748891173018\n    if n==109:\n        return 701408733359881942981\n    if n==110:\n        return 1134903171639431895245\n    if n==111:\n        return 1836311903231244010\n    if n==112:\n        return 29712150731449832293\n    if n==113:\n        return 533162911733087093179\n    if n==114:\n        return 86267571283554227907\n    if n==115:\n        return 139583862445114351019\n    if n==116:\n        return 225851433717456384011\n    if n==117:\n        return 3613425095214952310310\n    if n==118:\n        return 59578637384922677911\n    if n==119:\n        return 96226887248325309599863\n    if n==120:\n        return 154800875592046455299\n    if n==121:\n        return 25047307819613080330107\n    if n==122:\n        return 4052739537881473090193\n    if n==123:\n        return 618979016858434311296\n    if n==124:\n        return 10362145676908671017077\n    if n==125:\n        return 16553753940611782455\n    if n==126:\n        return 2679142960177787952922"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite_helper(n, start, end):\n        if start > end:\n            return start\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return int(math.sqrt(1 + 8*n))\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n < 1): \n        return -1; \n    if (n == 1): \n        return 0; \n    else: \n        return (is_polite(n - 1) + 2); \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    number = 1; \n    \n    count = 1; \n    \n    while(count <= n): \n    \n        number += 1; \n        \n        count += number; \n        \n    return number; \n    \ndef gcd(a, b): \n    '''\n    Write a function to find the Greatest Common Divisor of two numbers. geeksforgeeks.org/greatest-common-divisor-gcd-in-python/\n    '''\n    \n    if (a == 0): \n    \n        return b; \n    \n    return gcd(b % a, a) \n    \ndef lcm(a, b): \n    '''\n    Write a function to find the least common multiple of two numbers. geeksforgeeks.org/least-common-multiple-lcm-in-python/\n    '''\n    return (a * b) / gcd(a, b) \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1 \n    if n == 2:\n        return 2 \n    if n == 3:\n        return 3\n    if n == 4:\n        return 4 \n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7 \n    if n == 8:\n        return 8 \n    if n == 9:\n        return 9 \n    if n == 10:\n        return 10 \n    if n == 11:\n        return 11 \n    if n == 12:\n        return 12 \n    if n == 13:\n        return 13 \n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16 \n    if n == 17:\n        return 17 \n    if n == 18:\n        return 18 \n    if n == 19:\n        return 19 \n    if n == 20:\n        return 20 \n    if n == 21:\n        return 21 \n    if n == 22:\n        return 22 \n    if n == 23:\n        return 23 \n    if n == 24:\n        return 24 \n    if n == 25:\n        return 25 \n    if n == 26:\n        return 26 \n    if n == 27:\n        return 27 \n    if n == 28:\n        return 28 \n    if n == 29:\n        return 29 \n    if n == 30:\n        return 30 \n    if n == 31:\n        return 31 \n    if n == 32:\n        return 32 \n    if n == 33:\n        return 33 \n    if n == 34:\n        return 34 \n    if n == 35:\n        return 35 \n    if n == 36:\n        return 36 \n    if n == 37:\n        return 37 \n    if n == 38:\n        return 38 \n    if n == 39:\n        return 39 \n    if n == 40:\n        return 40 \n    if n == 41:\n        return 41 \n    if n == 42:\n        return 42 \n    if n == 43:\n        return 43 \n    if n == 44:\n        return 44 \n    if n == 45:\n        return 45 \n    if n == 46:\n        return 46 \n    if n == 47:\n        return 47 \n    if n == 48:\n        return 48 \n    if n == 49:\n        return 49 \n    if n == 50:\n        return 50 \n    if n == 51:\n        return 51 \n    if n == 52:\n        return 52 \n    if n == 53:\n        return 53 \n    if n == 54:\n        return 54 \n    if n == 55:\n        return 55 \n    if n == 56:\n        return 56 \n    if n == 57:\n        return 57 \n    if n == 58:\n        return 58 \n    if n == 59:\n        return 59 \n    if n == 60:\n        return 60 \n    if n == 61:\n        return 61 \n    if n == 62:\n        return 62 \n    if n == 63:\n        return 63 \n    if n == 64:\n        return 64 \n    if n == 65:\n        return 65 \n    if n == 66:\n        return 66 \n    if n == 67:\n        return 67 \n    if n == 68:\n        return 68 \n    if n == 69:\n        return 69 \n    if n == 70:\n        return 70 \n    if n == 71:\n        return 71 \n    if n == 72:\n        return 72 \n    if n == 73:\n        return 73 \n    if n == 74:\n        return 74 \n    if n == 75:\n        return 75 \n    if n == 76:\n        return 76 \n    if n == 77:\n        return 77 \n    if n == 78:\n        return 78 \n    if n == 79:\n        return 79 \n    if n == 80:\n        return 80 \n    if n == 81:\n        return 81 \n    if n == 82:\n        return 82 \n    if n == 83:\n        return 83 \n    if n == 84:\n        return 84 \n    if n == 85:\n        return 85 \n    if n == 86:\n        return 86 \n    if n == 87:\n        return 87 \n    if n == 88:\n        return 88 \n    if n == 89:\n        return 89 \n    if n == 90:\n        return 90 \n    if n == 91:\n        return 91 \n    if n == 92:\n        return 92 \n    if n == 93:\n        return 93 \n    if n == 94:\n        return 94 \n    if n == 95:\n        return 95 \n    if n == 96:\n        return 96 \n    if n == 97:\n        return 97 \n    if n == 98:\n        return 98 \n    if n == 99:\n        return 99 \n    if n == 100:\n        return 100 \n    if n == 101:\n        return 101 \n    if n == 102:\n        return 102 \n    if n == 103:\n        return 103 \n    if n == 104:\n        return 104 \n    if n == 105:\n        return 105 \n    if n == 106:\n        return 106 \n    if n == 107:\n        return 107 \n    if n == 108:\n        return 108 \n    if n == 109:\n        return 109 \n    if n == 110:\n        return 110 \n    if n == 111:\n        return 111 \n    if n == 112:\n        return 112 \n    if n == 113:\n        return 113 \n    if n == 114:\n        return 114 \n    if n == 115:\n        return 115 \n    if n == 116:\n        return 116 \n    if n == 117:\n        return 117 \n    if n == 118:\n        return 118 \n    if n == 119:\n        return 119 \n    if n == 120:\n        return 120 \n    if n == 121:\n        return 121 \n    if n == 122:\n        return 122 \n    if n == 123:\n        return 123 \n    if n == 124:\n        return 124 \n    if n == 125:\n        return 125 \n    if n == 126:\n        return 126 \n    if n == 127:\n        return 127 \n    if n == 128:\n        return 128 \n    if n == 129:\n        return 129 \n    if n == 130:\n        return 130 \n    if n == 131:\n        return 131 \n    if n == 132:\n        return 132 \n    if n == 133:\n        return 133 \n    if n == 134:\n        return 134 \n    if n == 135:\n        return 135 \n    if n == 136:\n        return 136 \n    if n == 137:\n        return 137 \n    if n == 138:\n        return 138 \n    if n == 139:\n        return 139 \n    if n == 140:\n        return 140 \n    if n == 141:\n        return 141 \n    if n == 142:\n        return 142 \n    if n == 143:\n        return 143 \n    if n == 144:\n        return 144 \n    if n == 145:\n        return 145 \n    if n == 146:\n        return 146 \n    if n == 147:\n        return 147 \n    if n == 148:\n        return 148 \n    if n == 149:\n        return 149 \n    if n == 150:\n        return 150 \n    if n == 151:\n        return 151 \n    if n == 152:\n        return 152 \n    if n == 153:\n        return 153 \n    if n == 154:\n        return 154 \n    if n == 155:\n        return 155 \n    if n == 156:\n        return 156 \n    if n == 157:\n        return 157 \n    if n == 158:\n        return 158 \n    if n == 159:\n        return 159 \n    if n == 160:\n        return 160 \n    if n == 161:\n        return 161 \n    if n == 162:\n        return 162 \n    if n == 163:\n        return 163 \n    if n == 164:\n        return 164 \n    if n == 165:\n        return 165 \n    if n == 166:\n        return 166 \n    if n == 167:\n        return 167"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #convert the given list to list of tuple\n    l1 = list(l1)\n    print(l1)\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append(tuple(l1[i:i+2]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    if len(l1)<=1:\n        return []\n    \n    if len(l1)==2:\n        return [[l1[0],l1[1]]]\n        \n    new_list=[]\n    for i in range(len(l1)-1):\n        new_list.append([l1[i],l1[i+1]])\n    return new_list\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(0,len(l1)-1):\n        result.append((l1[i],l1[i+1]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    # we start with two empty lists\n    newlist = []\n    newlist2 = []\n    \n    # we iterate through the list \n    for i in range(len(l1)):\n        # we append the first element of the list to the first list\n        newlist.append(l1[i])\n        # if we reach the last element in the list\n        if i == len(l1)-1:\n            # we append the first element of the list to the second list\n            newlist2.append(l1[i])\n        # we check if the current element is equal to the next element in the list\n        elif l1[i+1] == l1[i]:\n            # if the current element is the last element of the list\n            if i == len(l1)-2:\n                # we append the last element of the list to the second list\n                newlist2.append(l1[i+1])\n                # we add the two lists to a new list\n                newlist.append(newlist2)\n            # if the current element is not the last element of the list\n            else:\n                # we append the current and the next element to the second list\n                newlist2.append(l1[i])\n                newlist2.append(l1[i+1])\n                # we add the two lists to a new list\n                newlist.append(newlist2)\n    # we return the new list\n    return newlist\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = [1,2,3,4,5,6,7,8,9,10]\n    l2 = []\n    for i in range(0,len(l1)):\n        for j in range(i+1,len(l1)):\n            l2.append([l1[i],l1[j]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        for j in range(i + 1, len(l1)):\n            pairs.append([l1[i], l1[j]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)<2:\n        return []\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #TODO\n    return []\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count = count + 1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    # for i in range(0, len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         if arr[i] + arr[j] == sum:\n    #             count += 1\n    # print(count)\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr_size = len(arr)\n    hash_map = dict()\n    for i in range(arr_size):\n        hash_map[arr[i]] = i\n    for i in range(arr_size):\n        diff = sum - arr[i]\n        if diff in hash_map and hash_map[diff]!= i:\n            return 1\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = [0]*sum\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    m = len(arr)\n    arr.sort()\n    n = len(arr)\n    pairs = 0\n    for i in range(0, n):\n        j = i + 1\n        while j <= n - 1:\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n            j += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    # write your code here\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Store the diff in diff\n    diff = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    # diff = [i for i in li1 if i not in li2]\n    # return diff\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif \n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif \n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    list1=list(li1)\n    list2=list(li2)\n    result=[]\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    result=set(result)\n    result=list(result)\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nprint(Diff([1,2,3,4,5,6,7,8],[1,2,3,4,5,6]))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum and counter variable\n    sum = 0\n    n = n + 1\n    # Loop through 1 to n and add fourth power of each number to the sum.\n    for i in range(1, n):\n        if (i % 2 == 1):\n            sum = sum + i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)*(3*n+1)/6\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n*(n+1)*(3*n+1)*(2*n+1)/24\n    \ndef compute_sum_of_digits(n) : \n    '''\n    Write a python program to compute the sum of digits of an integer.\n    '''\n    return sum(map(int, str(n)))\n    \ndef sum_of_digits(n) : \n    '''\n    Write a python program to find the sum of the digits of a number.\n    '''\n    sum = 0\n    while (n!=0) : \n        sum = sum + n%10\n        n = n/10\n    return sum\n    \ndef power_of_n_recursive(n) : \n    '''\n    Write a program to find the power of n using recursion.\n    '''\n    if n==1 : \n        return 1\n    else : \n        return n*power_of_n_recursive(n-1)\n    \ndef power_of_n_iterative(n) : \n    '''\n    Write a program to find the power of n using iteration.\n    '''\n    result = 1\n    for i in range(1, n+1) : \n        result = result*i\n    return result\n    \ndef power_of_n_recursive(n) : \n    '''\n    Write a program to find the power of n using recursion.\n    '''\n    if n==0 : \n        return 1\n    else : \n        return n*power_of_n_recursive(n-1)\n    \ndef power_of_n_iterative(n) : \n    '''\n    Write a program to find the power of n using iteration.\n    '''\n    result = 1\n    for i in range(1, n+1) : \n        result = result*i\n    return result\n    \ndef power_of_n_recursive(n) : \n    '''\n    Write a program to find the power of n using recursion.\n    '''\n    if n==0 : \n        return 1\n    else : \n        return n*power_of_n_recursive(n-1)\n    \ndef power_of_n_iterative(n) : \n    '''\n    Write a program to find the power of n using iteration.\n    '''\n    result = 1\n    for i in range(1, n+1) : \n        result = result*i\n    return result\n    \ndef power_of_n_recursive(n) : \n    '''\n    Write a program to find the power of n using recursion.\n    '''\n    if n==0 : \n        return 1\n    else : \n        return n*power_of_n_recursive(n-1)\n    \ndef power_of_n_iterative(n) : \n    '''\n    Write a program to find the power of n using iteration.\n    '''\n    result = 1\n    for i in range(1, n+1) : \n        result = result*i\n    return result\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef sum_of_digits(n) : \n    '''\n    Write a program to find the sum of the digits of a number.\n    '''\n    sum = 0\n    while (n!=0) : \n        sum = sum + n%10\n        n = n/10\n    return sum\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef sum_of_digits(n) : \n    '''\n    Write a program to find the sum of the digits of a number.\n    '''\n    sum = 0\n    while (n!=0) : \n        sum = sum + n%10\n        n = n/10\n    return sum\n    \ndef sum_of_digits(n) : \n    '''\n    Write a program to find the sum of the digits of a number.\n    '''\n    sum = 0\n    while (n!=0) : \n        sum = sum + n%10\n        n = n/10\n    return sum\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef sum_of_digits(n) : \n    '''\n    Write a program to find the sum of the digits of a number.\n    '''\n    sum = 0\n    while (n!=0) : \n        sum = sum + n%10\n        n = n/10\n    return sum\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef sum_of_digits(n) : \n    '''\n    Write a program to find the sum of the digits of a number.\n    '''\n    sum = 0\n    while (n!=0) : \n        sum = sum + n%10\n        n = n/10\n    return sum\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef sum_of_digits(n) : \n    '''\n    Write a program to find the sum of the digits of a number.\n    '''\n    sum = 0\n    while (n!=0) : \n        sum = sum + n%10\n        n = n/10\n    return sum\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef reverse_number(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while (n!=0) : \n        rev = rev*10 + n%10\n        n = n/10\n    return rev\n    \ndef sum_of_digits(n) : \n    '''\n    Write a program to find the sum of the digits of a number.\n    '''\n    sum = 0\n    while (n!=0) : \n        sum = sum + n%10"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            i += 1\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num_sum = 0\n    for i in range(1, n+1) :\n        if (i%2!=0) :\n            odd_num_sum += i ** 4\n    return odd_num_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1,n,2)])\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(1 for i in range(n+1) if i%2!=0)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += pow(i,4)\n    return total\nprint odd_num_sum(5)\nprint odd_num_sum(10)\nprint odd_num_sum(20)\nprint odd_num_sum(30)\nprint odd_num_sum(50)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if(i%2!= 0) : \n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i % 2!= 0 :\n            sum += i ** 4\n    return sum\n    \ndef odd_num_sum_v2(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers using list comprehension.\n    '''\n    return sum([i**4 for i in range(1,n+1) if i % 2!= 0 ])\n    \ndef odd_num_sum_v3(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers using lambda function.\n    '''\n    return sum(list(filter(lambda i : i % 2!= 0,list(range(1,n+1)))))\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    exp = exp.replace(' ', '')\n    i = 0\n    while i < len(exp):\n        if exp[i] in '{([':\n            stack.append(exp[i])\n        elif exp[i] in '})':\n            if len(stack) == 0:\n                return False\n            item = stack.pop()\n            if exp[i] == ')' and item == '(':\n                continue\n            elif exp[i] == '}' and item == '{':\n                continue\n            elif exp[i] == ']' and item == '[':\n                continue\n            else:\n                return False\n        else:\n            continue\n        i += 1\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #CODE\n    s=[]\n    for i in exp:\n        if i=='(':\n            s.append(i)\n        elif i==')':\n            if len(s)>0:\n                s.pop()\n            else:\n                return False\n    if len(s)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    d = deque()\n    isbalanced = True\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            d.append(exp[i])\n        elif exp[i] == ')':\n            if len(d) == 0:\n                isbalanced = False\n                break\n            else:\n                d.pop()\n    if len(d) == 0 and isbalanced:\n        return True\n    else:\n        return False\ndef get_postfix(exp):\n    '''\n    Write a function to get the postfix of expression. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    d = deque()\n    postfix = \"\"\n    for i in exp:\n        if i in '0123456789':\n            postfix += i\n        else:\n            if i == '(':\n                d.append(i)\n            elif i == ')':\n                if len(d) == 0:\n                    d.append(i)\n                else:\n                    d.pop()\n    while len(d) > 0:\n        postfix += d.pop()\n    return postfix\ndef evaluate_postfix(exp):\n    '''\n    https://www.geeksforgeeks.org/expression-evaluation/\n    '''\n    d = deque()\n    for i in exp:\n        if i in '0123456789':\n            d.append(int(i))\n        else:\n            op1 = d.pop()\n            op2 = d.pop()\n            if i == '+':\n                d.append(op1 + op2)\n            elif i == '-':\n                d.append(op1 - op2)\n            elif i == '*':\n                d.append(op1 * op2)\n            elif i == '/':\n                d.append(op1 / op2)\n    return d.pop()\ndef is_palindrome(s):\n    '''\n    https://leetcode.com/problems/valid-palindrome/\n    '''\n    d = deque()\n    for i in s:\n        if i in '0123456789':\n            d.append(int(i))\n        else:\n            if len(d) == 0:\n                break\n            else:\n                d.pop()\n    while len(d) > 0:\n        if s[0]!= s[-1]:\n            return False\n        else:\n            s = s[1:-1]\n    return True\ndef roman_to_integer(s):\n    '''\n    https://leetcode.com/problems/roman-to-integer/\n    '''\n    d = deque()\n    s = s[::-1]\n    for i in s:\n        if i == 'I':\n            d.append(1)\n        elif i == 'V':\n            d.append(5)\n        elif i == 'X':\n            d.append(10)\n        elif i == 'L':\n            d.append(50)\n        elif i == 'C':\n            d.append(100)\n        elif i == 'D':\n            d.append(500)\n        elif i == 'M':\n            d.append(1000)\n    r = 0\n    while len(d) > 0:\n        if len(d) == 1:\n            return r + d.pop()\n        else:\n            d.pop()\n            d.pop()\n            r += d.pop()\n    return r\ndef get_max_path_sum(root):\n    '''\n    https://leetcode.com/problems/binary-tree-maximum-path-sum/\n    '''\n    def dfs(root):\n        if not root:\n            return 0\n        left = max(0, dfs(root.left))\n        right = max(0, dfs(root.right))\n        self.max = max(self.max, left + right + root.val)\n        return max(left, right) + root.val\n    self.max = float('-inf')\n    dfs(root)\n    return self.max\ndef is_subset(nums1, nums2):\n    '''\n    https://leetcode.com/problems/valid-number/\n    '''\n    d = deque()\n    for i in nums1:\n        if i in nums2:\n            d.append(i)\n    return len(d) == len(nums1)\ndef subsets(nums):\n    '''\n    https://leetcode.com/problems/subsets/\n    '''\n    res = [[]]\n    for i in nums:\n        res += [x + [i] for x in res]\n    return res\ndef subsets_backtrack(nums):\n    '''\n    https://leetcode.com/problems/subsets-ii/\n    '''\n    res = []\n    def backtrack(start, tmp):\n        res.append(tmp)\n        for i in range(start, len(nums)):\n            backtrack(i + 1, tmp + [nums[i]])\n    backtrack(0, [])\n    return res\ndef permute(nums):\n    '''\n    https://leetcode.com/problems/permutations/\n    '''\n    def permutation_helper(start):\n        if start == len(nums) - 1:\n            permutation_list.append(nums[:])\n        for i in range(start, len(nums)):\n            nums[start], nums[i] = nums[i], nums[start]\n            permutation_helper(start + 1)\n            nums[start], nums[i] = nums[i], nums[start]\n    permutation_list = []\n    permutation_helper(0)\n    return permutation_list\ndef subset_sum(nums, target):\n    '''\n    https://leetcode.com/problems/combination-sum-iii/\n    '''\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    for i in range(target + 1):\n        dp[0][i] = False\n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n    for i in range(1, len(nums) + 1):\n        for j in range(1, target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[-1][-1]\ndef length_of_longest_substring(s):\n    '''\n    https://leetcode.com/problems/longest-substring-without-repeating-characters/\n    '''\n    d = {}\n    max_len = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] in d:\n            start = max(start, d[s[i]] + 1)\n        d[s[i]] = i\n        max_len = max(max_len, i - start + 1)\n    return max_len\ndef max_profit(prices):\n    '''\n    https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\n    '''\n    max_profit = 0\n    min_price = float('inf')\n    for i in prices:\n        min_price = min(min_price, i)\n        profit = i - min_price\n        max_profit = max(max_profit, profit)\n    return max_profit\ndef max_profit_memo(prices):\n    '''\n    https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\n    '''\n    def profit(idx):\n        if idx < 0:\n            return 0\n        if idx in memo:\n            return memo[i"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    balanced = True\n    s = []\n    for char in exp:\n        if char in ['(', ')', '{', '}', '[', ']']:\n            s.append(char)\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i] in ['(', '{', '[']:\n            if s[i+1] in [')', '}', ']']:\n                balanced = False\n                break\n            elif s[i+1] in ['(', '{', '[']:\n                balanced = False\n                break\n            elif s[i+1] == ')':\n                s[i], s[i+1] = 'x', 'x'\n                balanced = True\n            elif s[i+1] == '}':\n                s[i], s[i+1] = 'x', 'x'\n                balanced = True\n            elif s[i+1] == ']':\n                s[i], s[i+1] = 'x', 'x'\n                balanced = True\n            i += 1\n        i += 1\n    return balanced\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    op = {'+', '-', '*', '/'}\n    stack = deque()\n    for char in exp:\n        if char in op:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char == ')':\n                if stack.pop()!= '(':\n                    return False\n            elif char == ']':\n                if stack.pop()!= '[':\n                    return False\n            elif char == '}':\n                if stack.pop()!= '{':\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_list = ['[', '{', '(']\n    close_list = [']', '}', ')']\n    stack = []\n    for i in exp:\n        if i in open_list:\n            stack.append(i)\n        elif i in close_list:\n            pos = close_list.index(i)\n            if ((len(stack) > 0) and (open_list[pos] == stack[len(stack)-1])):\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    \ndef check_balance(s):\n    stack = []\n    for i in s:\n        if i in \"({[\":\n            stack.append(i)\n        elif i in \")}]\":\n            if not stack:\n                return False\n            else:\n                temp = stack.pop()\n                if temp == \"(\" and i == \")\":\n                    continue\n                if temp == \"{\" and i == \"}\":\n                    continue\n                if temp == \"[\" and i == \"]\":\n                    continue\n                else:\n                    return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    if exp[0] == '(':\n        stack.append(exp[0])\n    if exp[len(exp)-1] == ')':\n        stack.append(exp[len(exp)-1])\n    for x in exp:\n        if x == '(':\n            stack.append(x)\n        if x == ')':\n            stack.pop()\n        if stack:\n            continue\n        else:\n            return 'NOT BALANCED'\n    if stack:\n        return 'NOT BALANCED'\n    else:\n        return 'BALANCED'\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_list = [\"(\", \"{\", \"[\"]\n    close_list = [\")\", \"}\", \"]\"]\n    queue = deque()\n    for i in exp:\n        if i in open_list:\n            queue.append(i)\n        elif i in close_list:\n            pos = close_list.index(i)\n            if len(queue) > 0 and open_list[pos] == queue[len(queue)-1]:\n                queue.pop()\n            else:\n                return False\n    if len(queue) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(' or i == '{' or i == '[' or i == ')':\n            stack.append(i)\n        elif i == '}' or i == ']' or i == ')' and len(stack)!= 0:\n            if i == ')' and stack[-1] == '(' or i == '}' and stack[-1] == '{' or i == ']' and stack[-1] == '[' or i == ')' and stack[-1] == ')':\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words_set = set()\n    word_list = test_str.split()\n    for word in word_list:\n        if len(word) == K:\n            words_set.add(word)\n    for word in words_set:\n        test_str = test_str.replace(word, \"\")\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not isinstance(test_str, str) or not isinstance(K, int):\n        return 'Invalid input'\n    result = ''\n    for word in test_str.split(' '):\n        if len(word)!= K:\n            result += word +''\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    res = []\n    for word in words:\n        if len(word) == K:\n            pass\n        else:\n            res.append(word)\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(\" \")\n    new_list = []\n    for item in test_list:\n        if len(item) == K:\n            continue\n        else:\n            new_list.append(item)\n    return \" \".join(new_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    for word in test_str.split():\n        if len(word)!= K:\n            res.append(word)\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Create a list of words\n    words = test_str.split(\" \")\n    # Filter the list of words to remove the words with length K\n    filtered_words = [w for w in words if len(w)!= K]\n    # Join the words together with spaces\n    filtered_str = \" \".join(filtered_words)\n    return filtered_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    new_list = []\n    for word in test_str:\n        if len(word) > K:\n            new_list.append(word)\n    return''.join(new_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join(list(filter(lambda x: len(x)!= K, test_str.split())))\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)-K+1):\n        print(i)\n        print(test_str[i:i+K])\n        print(len(test_str[i:i+K]))\n        if len(test_str[i:i+K]) == K:\n            print(\"deleted\")\n            test_str = test_str[:i] + test_str[i+K:]\n            print(test_str)\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K > len(test_str):\n        return ''\n    else:\n        test_str = test_str.split()\n        for word in test_str:\n            if len(word) == K:\n                test_str.remove(word)\n        return test_str\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(\"count the number of occurrence of pattern {} in string {}\".format(pattern,text))\n    if re.search(pattern,text):\n        print(\"the string {} contains pattern {} at position {}\".format(text,pattern,re.search(pattern,text).span()))\n        print(\"the pattern {} appears {} times in the text {}\".format(pattern,text.count(pattern),text))\n    else:\n        print(\"the text {} does not contain pattern {}\".format(text,pattern))\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern='@'\n    #text ='mailbox@domain.com'\n    #text = 'a'\n    #pattern = '.'\n    if pattern not in text:\n        print('Pattern not present in the text')\n        return None\n    match=re.search(pattern,text)\n    result=match.start()\n    return result\ndef occurance_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern='@'\n    #text ='mailbox@domain.com'\n    #text = 'a'\n    #pattern = '.'\n    if pattern not in text:\n        print('Pattern not present in the text')\n        return None\n    match=re.search(pattern,text)\n    result=match.start()\n    return result\ndef occurance_re_compiled(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern='@'\n    #text ='mailbox@domain.com'\n    #text = 'a'\n    #pattern = '.'\n    if pattern not in text:\n        print('Pattern not present in the text')\n        return None\n    match=re.search(pattern,text)\n    result=match.start()\n    return result\ndef find_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern='@'\n    #text ='mailbox@domain.com'\n    #text = 'a'\n    #pattern = '.'\n    if pattern not in text:\n        print('Pattern not present in the text')\n        return None\n    match=re.findall(pattern,text)\n    return match\ndef find_substring_compiled(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern='@'\n    #text ='mailbox@domain.com'\n    #text = 'a'\n    #pattern = '.'\n    if pattern not in text:\n        print('Pattern not present in the text')\n        return None\n    match=re.findall(pattern,text)\n    return match\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.findall(pattern,text)\n    if(m):\n        for i in m:\n            print(\"Occurance: {} at position: {}\".format(i,text.find(i)))\n    else:\n        print(\"Pattern not found\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern = r\"\\b[aeiouAEIOU]{2,4}\\b\"\n    #pattern = r\"\\b[AEIOU]{2,4}\\b\"\n    #pattern = r\"\\b[aeiouAEIOU][a-zA-Z0-9]{4,5}\\b\"\n    pattern = r\"\\b[AEIOU]{2,4}\\b\"\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"matches : \", matches)\n        for match in matches:\n            print(\"match : \", match)\n            print(\"position : \", text.index(match))\n        # return len(matches)\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # sub_string = text[0:3]\n    # if pattern.search(sub_string):\n    #     print('pattern found')\n    # else:\n    #     print('pattern not found')\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match!= None:\n        #print(match.group())\n        print(match.start())\n    else:\n        print(None)\n    return\ntext = \"Serve the public trust. \\\n    Protect the innocent. \\\n    Uphold the law\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    match = re.search(pattern,text)\n    if match:\n        return match.start()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    flag = False\n    start_index = None\n    occurance = None\n    index_list = []\n    for i in range(len(text)):\n        if text[i:i+len(pattern)] == pattern:\n            occurance = text[i:i+len(pattern)]\n            start_index = i\n            index_list.append(start_index)\n            flag = True\n    if flag:\n        print(\"The occurance is {} and start index is {}\".format(occurance,start_index))\n        print(\"The index list is {}\".format(index_list))\n    else:\n        print(\"No match found\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        if text!= None and pattern!= None:\n            pattern = re.compile(pattern)\n            if pattern.search(text)!= None:\n                match = pattern.search(text)\n                return match\n        else:\n            return None\n    except:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #if not pattern in text:\n    #    return None\n    #else:\n    #    return (text.find(pattern))\n    #return None\n    try:\n        match = re.search(pattern,text)\n        return match.start()\n    except AttributeError:\n        return None\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if index % 2 == 0:\n            if nums[index] % 2 == 0:\n                return False\n    return True\n    # return sum(nums[1::2])\n    # return sum(nums) % 2 == 1\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    print(nums)\n    for i in range(0, len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n        elif i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums)+1,2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if(nums[i]%2==0):\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_pos = []\n    if len(nums) == 0:\n        return 'Invalid Input'\n    elif len(nums) == 1:\n        return True if nums[0] % 2!= 0 else False\n    else:\n        for i in range(1, len(nums)):\n            if nums[i] % 2!= 0 and nums[i]!= nums[i-1]:\n                odd_pos.append(i)\n            elif nums[i] == nums[i-1]:\n                return False\n        return True if len(odd_pos) == 0 else False\n        \ndef nth_triangle_number(n):\n    '''\n    Write a python function to calculate the nth triangle number.\n    '''\n    if n < 0:\n        return 'Invalid Input'\n    elif n == 0:\n        return 0\n    else:\n        return int(0.5 * n * (n + 1))\n        \ndef nth_factorial(n):\n    '''\n    Write a python function to calculate the nth factorial.\n    '''\n    if n < 0:\n        return 'Invalid Input'\n    elif n == 0:\n        return 1\n    else:\n        return n * nth_factorial(n-1)\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    odd_index = 0\n    for i in nums:\n        if i % 2 == 1:\n            odd_index += 1\n            if odd_index == len(nums):\n                return True\n            else:\n                pass\n        else:\n            return False\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odd.append(nums[i])\n    if len(nums) == len(odd):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if(nums[i] % 2!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = [x for x in nums if x % 2!= 0]\n    if len(odd_nums) == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if (i < len(test_str)-1) and (test_str[i+1] in vowels):\n                count += 1\n            if i > 0 and (test_str[i-1] in vowels):\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n    for char in test_str:\n        if char in vowels:\n            vowel_count += 1\n    print(vowel_count)\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    counter = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum(1 for i in range(len(test_str)-1) if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou')\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return len([1 for c in test_str if c in 'aeiouAEIOU'])\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    neighbors = []\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            neighbors.append(test_str[i])\n        elif test_str[i] in vowels:\n            if len(neighbors)!= 0:\n                neighbors.pop()\n    print(neighbors)\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for idx, val in enumerate(test_str):\n        if val in 'aeiouAEIOU':\n            if (idx-1) >= 0 and test_str[idx-1] not in 'aeiouAEIOU':\n                continue\n            if (idx+1) < len(test_str) and test_str[idx+1] not in 'aeiouAEIOU':\n                continue\n            count += 1\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    neighbors = {'a': 'e', 'e': 'a', 'i': 'u', 'u': 'i', 'o': 'i', 'A': 'O', 'E': 'A', 'I': 'E', 'O': 'E', 'U': 'O'}\n    cnt = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i - 1] in neighbors.keys():\n                cnt += 1\n            if test_str[i + 1] in neighbors.keys():\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(0, len(test_str)-1):\n        if((test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u') and (test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u')):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in 'aeiou' and test_str[i-1] in 'aeiou':\n            result += 1\n        elif i < len(test_str) - 1 and test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            result += 1\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = [int(i) for i in arr]\n    print(\"Sum: \", sum(set(arr)))\n    return(sum(set(arr)))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Slice array list and create a set\n    s = set(arr)\n    # Iterate through set elements and check if present in list\n    # If yes add to sum\n    sum = 0\n    for i in s:\n        if i in arr:\n            sum+=i\n    return sum\n    \ndef main():\n    lst = [1,2,3,4,5,1,3,6,7,9,7,5,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    sum_set = set()\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr: \n        if arr.count(i) == 1: \n            sum += i \n    return sum \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr)) \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if arr[abs(arr[i])-1]<0:\n            sum+=abs(arr[i])\n        arr[abs(arr[i])-1]=-arr[abs(arr[i])-1]\n    return sum\nprint(find_sum([6, 4, 6, 4, 7, 2, 7]))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr[:i]:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for ele in arr:\n        if arr.count(ele) == 1:\n            sum += ele\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j] and i!= j:\n                sum += arr[i]\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for ele, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for key, group in groupby(list1):\n        new_list.append([key]*len(list(group)))\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2=[]\n    for key, group in groupby(list1):\n        list2.append(list(group))\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packed_list = list(groupby(list1, lambda x: x[0]))\n    return packed_list\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublists=[[list(g) for _, g in groupby(list1)] ]\n    result=[]\n    for list1 in sublists:\n        for item in list1:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(j) for i, j in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for k, g in groupby(list1):\n        new_list.append(list(g))\n    print(new_list)\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Check if there are any duplicates in the list\n    if len(list1) == len(set(list1)):\n        return False\n    # Sort the list in ascending order\n    list1.sort()\n    list2 = []\n    prev = list1[0]\n    sublist = []\n    for index, value in enumerate(list1):\n        if value == prev:\n            sublist.append(value)\n        else:\n            sublist.append(value)\n            sublist.sort()\n            list2.append(sublist)\n            sublist = []\n            prev = value\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    return [list(group) for key, group in grouped_list]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for key, group in groupby(list1):\n        list2.append(list(group))\n    return list2\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    import itertools\n    unique_sublists = dict(itertools.combinations(list1, len(list1)))\n    unique_sublists = list(unique_sublists.items())\n    return unique_sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Use a dictionary to count the number of each list\n    result = {}\n    for each in list1:\n        for key, value in each.items():\n            if tuple(value) in result.keys():\n                result[tuple(value)] += 1\n            else:\n                result[tuple(value)] = 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new_list = list(set(list1))\n    new_dict = {}\n    for item in new_list:\n        new_dict[item] = list1.count(item)\n    return new_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = 0\n    list_dict = {}\n    unique_list = []\n    for sublist in list1:\n        tuple1 = tuple(sublist)\n        if tuple1 not in unique_list:\n            unique_list.append(tuple1)\n            count += 1\n        list_dict[tuple1] = count\n    return list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    output = {}\n    for i in list1:\n        if type(i) == list:\n            output[tuple(i)] = list1.count(i)\n    return output\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    dictionary={}\n    for i in range(len(list2)):\n        dictionary[tuple(list2[i])]=list1.count(list2[i])\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for i in list1:\n        if str(i) in list_dict.keys():\n            list_dict[str(i)] += 1\n        else:\n            list_dict[str(i)] = 1\n    return list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n    unique_list = tuple(unique_list)\n    unique_list = list(unique_list)\n    unique_list = {unique_list[i]:list1.count(unique_list[i]) for i in range(0,len(unique_list))}\n    return unique_list\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(x):list1.count(x) for x in set(list1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for i in range(0, len(list1)):\n        if list1[i] not in unique_list:\n            unique_list.append(list1[i])\n    return len(unique_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # print all the combinations of tuples\n    # with the given sum in the given list\n    sum = 0\n    \n    print(list(combinations(test_list,2)))\n    for i in combinations(test_list,2):\n        if i[0]+i[1] == sum:\n            print(i)\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,3))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [(a, b) for a in test_list for b in test_list if a + b == 2020]\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #print(\"\\nList : \\n\", test_list)\n    #print(\"\\nCombinations : \\n\")\n    for i in range(1, len(test_list)):\n        comb = list(combinations(test_list, i))\n        #print(comb)\n        for j in range(len(comb)):\n            result = sum(comb[j])\n            print(result)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = list(combinations(test_list, 2))\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]\n    # your code here\n    com = list(combinations(test_list, 2))\n    print(com)\n    return com\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    unique_sum = list(set(sum(c) for c in combinations(test_list,3)))\n    unique_sum.sort()\n    return unique_sum\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n    return combinations(test_list,3)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(len(test_list)+1):\n        for subset in combinations(test_list,i):\n            if sum(subset) not in sum_list:\n                sum_list.append(sum(subset))\n    sum_list.sort()\n    return(sum_list)\ndef find_large_subtract_sum(test_list):\n    '''\n    Write a function to find the largest sum of all possible subtractions of 2 numbers in the given tuple list. https://www.geeksforgeeks.org/large-sum-subtracting-two-numbers/\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            if (test_list[i] - test_list[j] not in sum_list) and (test_list[i] - test_list[j] >= 0):\n                sum_list.append(test_list[i] - test_list[j])\n    sum_list.sort()\n    return(sum_list[-1])\ndef find_large_product_from_two_numbers(test_list):\n    '''\n    Write a function to find the largest product of 2 numbers in the given tuple list. https://www.geeksforgeeks.org/large-sum-subtracting-two-numbers/\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            if (test_list[i] * test_list[j] not in sum_list) and (test_list[i] * test_list[j] >= 0):\n                sum_list.append(test_list[i] * test_list[j])\n    sum_list.sort()\n    return(sum_list[-1])\ndef find_sum_of_4_with_overlapping_subsequences(test_list):\n    '''\n    Write a function to find the sum of 4 numbers in the given tuple list. https://www.geeksforgeeks.org/find-sum-of-4-numbers-in-a-tuple-list/\n    '''\n    sum_list = []\n    for subset in combinations(test_list,4):\n        if sum(subset) not in sum_list:\n            sum_list.append(sum(subset))\n    sum_list.sort()\n    return(sum_list[-1])\ndef find_sum_of_3_numbers_in_tuple_list(test_list):\n    '''\n    Write a function to find the sum of 3 numbers in the given tuple list. https://www.geeksforgeeks.org/find-sum-of-3-numbers-in-a-tuple-list/\n    '''\n    sum_list = []\n    for subset in combinations(test_list,3):\n        if sum(subset) not in sum_list:\n            sum_list.append(sum(subset))\n    sum_list.sort()\n    return(sum_list[-1])\ndef find_sum_of_2_numbers_in_tuple_list(test_list):\n    '''\n    Write a function to find the sum of 2 numbers in the given tuple list. https://www.geeksforgeeks.org/find-sum-of-2-numbers-in-a-tuple-list/\n    '''\n    sum_list = []\n    for subset in combinations(test_list,2):\n        if sum(subset) not in sum_list:\n            sum_list.append(sum(subset))\n    sum_list.sort()\n    return(sum_list[-1])\ndef find_sum_of_3_numbers_in_tuple_list_using_dict(test_list):\n    '''\n    Write a function to find the sum of 3 numbers in the given tuple list. https://www.geeksforgeeks.org/find-sum-of-3-numbers-in-a-tuple-list/\n    '''\n    sum_list = []\n    d = {}\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            d[test_list[i]+test_list[j]] = [test_list[i],test_list[j]]\n    for subset in d.keys():\n        if subset not in sum_list:\n            sum_list.append(subset)\n    sum_list.sort()\n    return(sum_list[-1])\ndef find_sum_of_3_numbers_in_tuple_list_using_sets(test_list):\n    '''\n    Write a function to find the sum of 3 numbers in the given tuple list. https://www.geeksforgeeks.org/find-sum-of-3-numbers-in-a-tuple-list/\n    '''\n    sum_list = []\n    set_list = []\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            for k in range(j,len(test_list)):\n                s = set(test_list[i]+test_list[j]+test_list[k])\n                if len(s) == 3:\n                    if s not in set_list:\n                        sum_list.append(s)\n                        set_list.append(s)\n    sum_list.sort()\n    return(sum_list[-1])\ndef find_sum_of_3_numbers_in_tuple_list_using_sets_2(test_list):\n    '''\n    Write a function to find the sum of 3 numbers in the given tuple list. https://www.geeksforgeeks.org/find-sum-of-3-numbers-in-a-tuple-list/\n    '''\n    sum_list = []\n    s = set()\n    for i in test_list:\n        s.add(i)\n    for subset in combinations(s,3):\n        if sum(subset) not in sum_list:\n            sum_list.append(sum(subset))\n    sum_list.sort()\n    return(sum_list[-1])\ndef find_sum_of_3_numbers_in_tuple_list_using_sets_3(test_list):\n    '''\n    Write a function to find the sum of 3 numbers in the given tuple list. https://www.geeksforgeeks.org/find-sum-of-3-numbers-in-a-tuple-list/\n    '''\n    sum_list = []\n    s = set()\n    for i in test_list:\n        s.add(i)\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            for k in range(j,len(test_list)):\n                if (test_list[i]+test_list[j]+test_list[k]) not in sum_list and (test_list[i]+test_list[j]+test_list[k]) <= max(test_list):\n                    sum_list.append(test_list[i]+test_list[j]+test_list[k])\n    sum_list.sort()\n    return(sum_list[-1])\ndef find_sum_of_3_numbers_in_tuple_list_using_sets_4(test_list):\n    '''\n    Write a function to find the sum of 3 numbers in the given tuple list. https://www.geeksforgeeks.org/find-sum-of-3-numbers-in-a-tuple-list/\n    '''\n    sum_list = []\n    s = set()\n    for i in test_list:\n        s.add(i)\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            for k in range(j,len(test_list)):\n                s1 = set(test_list[i]+test_list[j]+test_list[k])\n                if s1.issubset(s) an"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    length = len(test_list)\n    # print(length)\n    # print(test_list)\n    comb = []\n    for i in range(length):\n        # print(i)\n        for j in range(i+1,length):\n            # print(j)\n            tup = (test_list[i],test_list[j])\n            # print(tup)\n            comb.append(tup)\n    # print(comb)\n    return comb\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    if (count % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1) : \n        if n % i == 0 : \n            if n // i == i : \n                count += 1\n            else : \n                count += 2\n    return count \ndef count_even_digits(n) : \n    '''\n    Write a python function to check whether the count of even digits is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in str(n) : \n        if int(i) % 2 == 0 : \n            count += 1\n    return count\ndef find_maximum_sequence(arr) : \n    '''\n    Write a python function to find maximum sequence. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    maximum = 0 \n    for i in range(len(arr)) : \n        for j in range(i, len(arr)) : \n            length = j - i + 1 \n            if length < 3 or arr[i] + arr[j] < 0 : \n                break \n            total = sum(arr[i:j+1])\n            if length > maximum : \n                maximum = length\n                sum_num = total\n    return maximum, sum_num\ndef perfect_squares(n) : \n    '''\n    Write a python function to find perfect squares. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    squares = [i * i for i in range(1, int(math.sqrt(n)) + 1)] \n    return n in squares\ndef min_max_sum(arr) : \n    '''\n    Write a python function to find min and max sum of a sequence. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    total = 0 \n    for i in arr : \n        total += i\n    return min(arr), max(arr), total\ndef convert_from_decimal(num, base) : \n    '''\n    Write a python function to convert decimal to any base. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    converted_num = []\n    while num!= 0 : \n        remainder = num % base\n        num = num // base\n        converted_num.append(remainder)\n    return \"\".join(str(x) for x in reversed(converted_num))\ndef prime_factors(n) : \n    '''\n    Write a python function to print all the prime factors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    while n % 2 == 0 : \n        print(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        while n % i == 0 : \n            print(i)\n            n = n // i\n    if n > 2 : \n        print(n)\ndef reverse_string(s) : \n    '''\n    Write a python function to reverse a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return \"\".join(reversed(s))\ndef reverse_words(s) : \n    '''\n    Write a python function to reverse words in a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return \" \".join(reversed(s.split()))\ndef next_permutation(nums) : \n    '''\n    Write a python function to find next permutation. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = len(nums) - 2\n    while i >= 0 and nums[i + 1] <= nums[i]:\n        i -= 1\n    if i >= 0:\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n    nums[i + 1:] = nums[i + 1:][::-1]\n    return nums\ndef next_lexicographical_permutation(s):\n    '''\n    Write a python function to find next lexicographical permutation. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i >= 0:\n        j = len(s) - 1\n        while s[j] <= s[i]:\n            j -= 1\n        s[i], s[j] = s[j], s[i]\n    s[i + 1:] = s[len(s) - 1: i : -1]\n    return s\ndef check_palin_perm(s) : \n    '''\n    Write a python function to check whether a string is a permutation of palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    s = s.replace(\" \", \"\")\n    s = s.lower()\n    d = dict()\n    for i in s : \n        if i in d : \n            d[i] += 1\n        else : \n            d[i] = 1\n    odd_count = 0 \n    for k, v in d.items() : \n        if v % 2!= 0 and odd_count == 0 : \n            odd_count += 1\n        elif v % 2!= 0 and odd_count!= 0 : \n            return False\n    return True\ndef find_max_crossing_sum(arr) : \n    '''\n    Write a python function to find maximum sum of crossing subarray. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    maximum_sum = 0\n    minimum_sum = 0\n    for i in range(1, len(arr) - 1) : \n        minimum_sum = minimum_sum + arr[i - 1]\n        maximum_sum = max(maximum_sum + arr[i], minimum_sum)\n    return maximum_sum\ndef two_sum(nums, target) : \n    '''\n    Write a python function to find pairs of numbers that add up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    d = dict()\n    for i in range(len(nums)) : \n        num = nums[i]\n        diff = target - num\n        if diff in d : \n            return [d[diff], i]\n        d[num] = i\n    return False\ndef contains_duplicate(nums) : \n    '''\n    Write a python function to check whether a list contains duplicate elements. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return len(nums)!= len(set(nums))\ndef find_median_sorted_arrays(nums1, nums2) : \n    '''\n    Write a python function to find median of two sorted arrays. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    m, n "
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if(n%i == 0) : \n            if (n/i == i) : \n                divisors += 1\n            else : \n                divisors += 2\n    return divisors \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i <= n :\n        if n % i == 0 :\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            divisors += 1\n    \n    return divisors \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            count += 1\n    if count % 2 == 0 :\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n < 1) : \n        return 0\n    cnt = 1\n    sq = math.sqrt(n)\n    for i in range(2, int(sq) + 1) : \n        if (n % i == 0) : \n            cnt += 2\n    return cnt \n    \ndef prime_factors(n):\n    '''\n    Write a python function to print out the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    i = 2\n    while(i * i <= n) : \n        if (n % i == 0) : \n            n = n // i\n            print(i)\n        else : \n            i = i + 1\n    return n\n    \ndef longest_consec_seq(nums):\n    '''\n    Write a python function to find the longest consecutive subsequence in a sequence of numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    maxlen = 1\n    cnt = 1\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i+1]:\n            cnt += 1\n        else:\n            cnt = 1\n        if cnt > maxlen:\n            maxlen = cnt\n    return maxlen\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 : \n            count += 1\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i <= n :\n        if(n % i == 0) :\n            count += 1\n        i += 1\n    if(count % 2 == 0) : \n        return True\n    else : \n        return False\ndef num_digit(n) :\n    '''\n    Write a python function to check whether the given number is an armstrong number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    temp = n\n    while temp > 0 : \n        rem = temp % 10\n        sum += rem ** 3\n        temp //= 10\n    if(n == sum) : \n        return True\n    else : \n        return False\ndef largest_palindrome(n):\n    '''\n    Write a python function to print the largest palindrome number less than or equal to the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    max = 0\n    while i <= n : \n        if(is_palindrome(i)) : \n            if(i >= max) : \n                max = i \n        i += 1\n    return max\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)+1):\n            if j-i == 1:\n                result += sum(arr[i:j])\n                continue\n            if j-i > 1:\n                result += sum(arr[i:j])\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_arr = []\n    sum_arr_len = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i+j) % 2 == 1:\n                sum_arr.append(arr[i:j+1])\n                sum_arr_len.append(len(sum_arr[-1]))\n    return sum(sum_arr), sum(sum_arr_len)\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    return sum([sub_array[i] for i in range(len(arr)) if len(arr) % 2 == 1])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i) % 2!= 0:\n                result += sum(arr[i:j+1])\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # you can write to stdout for debugging purposes, e.g.\n    # print(\"this is a debug message\")\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # res = 0\n    # for i in range(len(arr)):\n    #     for j in range(i, len(arr)):\n    #         if (j - i + 1) % 2!= 0:\n    #             res += sum(arr[i:j+1])\n    # return res\n    return sum([sum(arr[i:j+1]) for i in range(len(arr)) for j in range(i, len(arr)) if (j - i + 1) % 2!= 0])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1) % 2 == 1:\n                res += sum(arr[i:j+1])\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    sum = 0\n    for i in range(0, length):\n        for j in range(i, length):\n            sum += arr[i:j+1:2]\n    return sum\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    diff = max_value - min_value\n    if diff == 0:\n        h = 0\n    elif max_value == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_value == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_value == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    value = max_value\n    saturation = 0\n    if max_value!= 0:\n        saturation = (diff / max_value) * 100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    # R,G,B ranges are now 0 to 1\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    # Calculate the difference\n    df = mx-mn\n    # Variations\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    min_colour = min(r, g, b)\n    max_colour = max(r, g, b)\n    v = max_colour\n    delta = max_colour - min_colour\n    if delta == 0:\n        return 0.0, 0.0, v\n    s = delta / max_colour\n    if max_colour == r:\n        h = 60.0 * (((g - b) / delta) % 6)\n    elif max_colour == g:\n        h = 60.0 * (((b - r) / delta) + 2)\n    else:\n        h = 60.0 * (((r - g) / delta) + 4)\n    if h < 0:\n        h = h + 360\n    return (h / 360.0), (s / 1.0), (v / 1.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \ndef rgb_to_hsv_alt(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    if s == 0:\n        r, g, b = v, v, v\n    else:\n        h /= 60\n        i = int(h)\n        f = h - i\n        p = v*(1-s)\n        q = v*(1-s*f)\n        t = v*(1-s*(1-f))\n        if i == 0:\n            r, g, b = v, t, p\n        elif i == 1:\n            r, g, b = q, v, p\n        elif i == 2:\n            r, g, b = p, v, t\n        elif i == 3:\n            r, g, b = p, q, v\n        elif i == 4:\n            r, g, b = t, p, v\n        elif i == 5:\n            r, g, b = v, p, q\n    return r, g, b\n    \ndef hsv_to_rgb_alt(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    if s == 0:\n        r, g, b = v, v, v\n    else:\n        h /= 60\n        i = int(h)\n        f = h - i\n        p = v*(1-s)\n        q = v*(1-s*f)\n        t = v*(1-s*(1-f))\n        if i == 0:\n            r, g, b = v, t, p\n        elif i == 1:\n            r, g, b = q, v, p\n        elif i == 2:\n            r, g, b = p, v, t\n        elif i == 3:\n            r, g, b = p, q, v\n        elif i == 4:\n            r, g, b = t, p, v\n        elif i == 5:\n            r, g, b = v, p, q\n    return r, g, b\n    \ndef rgb_to_hsl(r, g, b):\n    '''\n    Write a function to convert rgb color to hsl color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    l = (mx + mn)/2\n    return h, s, l\n    \ndef rgb_to_hsl_alt(r, g, b):\n    '''\n    Write a function to convert rgb color to hsl color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    l = (mx + mn)/2\n    return h, s, l\n    \ndef hsl_to_rgb(h, s, l):\n    '''\n    Write a function to convert hsl color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    if s == 0:\n        r, g, b = l, l, l\n    else:\n        if l < 0.5:\n            q = l*(1+s)\n        else:\n            q = l+s-(l*s)\n        p = 2*l - q\n        r, g, b = (p, q, p)\n    return r, g, b\n    \ndef hsl_to_rgb_alt(h, s, l):\n    '''\n    Write a function to convert hsl color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    if s == 0:\n        r, g, b = l, l, l\n    else:\n        if l < 0.5:\n            q = l*(1+s)\n        else:\n            q = l+s-(l*s)\n        p = 2*l - q\n        r, g, b = (p, q, p)\n    return r, g, b\n    \ndef get_hex_code(r, g, b):\n    '''\n    Write a function to convert rgb color to hex code.\n    '''\n    return '#{:02x}{:02x}{:02x}'.format(r, "
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    new_list=[]\n    for i in list1:\n        if i%2==0:\n            new_list.append(i)\n            continue\n    for i in list1:\n        if i%2!=0:\n            new_list.append(i)\n            continue\n    print(\"The product of the even and odd numbers is \",new_list[0]*new_list[1])\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for n in list1:\n        if n % 2 == 0:\n            product *= n\n        else:\n            pass\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_number = []\n    odd_number = []\n    for i in list1:\n        if i%2 == 0:\n            even_number.append(i)\n        else:\n            odd_number.append(i)\n    if len(even_number) > 0 and len(odd_number) > 0:\n        return even_number[0]*odd_number[0]\n    else:\n        return 0\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    n1 = [x for x in list1 if x % 2 == 0]\n    n2 = [x for x in list1 if x % 2 == 1]\n    product = n1[0] * n2[0]\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum = even_sum + i\n        else:\n            odd_sum = odd_sum + i\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            product *= i\n        else:\n            product *= i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # new_list = [i * j for i in list1 for j in list1 if i % 2 == 0 and j % 2 == 1]\n    new_list = []\n    for i in list1:\n        if i % 2 == 0:\n            new_list.append(i)\n    for j in list1:\n        if j % 2 == 1:\n            new_list.append(j)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"No product for less than 2 elements\"\n    else:\n        even_sum = 0\n        odd_sum = 0\n        for i in list1:\n            if i % 2 == 0:\n                even_sum += i\n            else:\n                odd_sum += i\n        return even_sum*odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    new_list = []\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            new_list.append(list1[i])\n        else:\n            new_list.append(list1[i])\n    product = 1\n    for i in range(0, len(new_list)):\n        product = product * new_list[i]\n    print(product)\nmul_even_odd([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1)==0:\n        return \"Empty List\"\n    elif len(list1)==1:\n        return list1[0]\n    else:\n        product=1\n        for i in list1:\n            if i%2==0:\n                product=product*i\n            else:\n                product=product*i\n        return product\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(s) for s in test_str.split(',')])\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #result = tuple(int(s) for s in test_str.split(','))\n    #return result\n    return(tuple(int(s) for s in test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(\",\"))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # first method:\n    # list_temp = []\n    # list_temp_2 = []\n    # for i in test_str:\n    #     if i.isdigit():\n    #         list_temp.append(i)\n    #     else:\n    #         list_temp_2.append(i)\n    # list_temp.reverse()\n    # list_temp_2.reverse()\n    # return_str = ''.join(list_temp_2)\n    # return_str = return_str + ''.join(list_temp)\n    # return return_str\n    # second method:\n    return_list = []\n    for i in test_str:\n        if i.isdigit():\n            return_list.append(i)\n        else:\n            return_list.append(i)\n    return_list.reverse()\n    return ''.join(return_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int,test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # return tuple(map(int, test_str.split(',')))\n    return tuple(int(x) for x in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tup = []\n    for i in test_str:\n        new_tup.append(int(i))\n    return tuple(new_tup)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.replace('(','').replace(')','').replace(' ','').split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(\"(\",'')\n    test_str = test_str.replace(\")\",'')\n    test_str = test_str.replace(',',' ')\n    test_str = test_str.split()\n    return tuple([int(i) for i in test_str])\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(0, n):\n        if a[i] >= x:\n            return i\n    return n\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    a.sort()\n    return a.index(x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x > a[-1]:\n        a.append(x)\n    else:\n        idx = bisect.bisect_right(a, x)\n        a.insert(idx, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect.bisect(a, x, lo, hi)\n    #    where x is the target, a is the sorted array, lo is the first index, hi is the last index\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a or x < a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    l, r = 0, len(a) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if x > a[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    # Base cases\n    if len(a) == 0:\n        return 0\n    if x < a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    \n    # Find the insertion point\n    i = 0\n    while i < len(a) and a[i] < x:\n        i += 1\n    \n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i > len(a):\n        i = len(a)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    bisect.insort(a, x)\n    return a.index(x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    length = len(a)\n    if x < a[0] or x > a[-1]:\n        return 0\n    elif x == a[length - 1]:\n        return length - 1\n    elif x == a[0]:\n        return 0\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match('a.{3}b', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = \"ab{3}\"\n    if re.search(pattern, text):\n        return \"found a match\"\n    else:\n        return \"No Match was found\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.findall(r'ab{3}',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.match(r'a.b{3}', text)\n    return result!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return 'Match found'\n    else:\n        return 'Not match found'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = \"ab{3}\"\n    result = re.findall(pattern, text)\n    return result!= []\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return \"Match\"\n    else:\n        return \"No Match\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = re.compile(r\"ab{3}\")\n    mo = regex.search(text)\n    if mo == None:\n        return None\n    return mo.group()\nprint(text_match_three('ababbbabbabababaabab'))"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall(r'a.b.b', text)\n    if match:\n        return match\n    else:\n        return 'No Match Found'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # return True if text has at least three 'b' characters, otherwise False\n    return re.search(r'ab{3}', text)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_ = tuple(test_list)\n    tuple_ += tuple(test_str)\n    return tuple_\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = (test_list, test_str)\n    return tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return(tuple(test_str), tuple(test_list))\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str + test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str)\n    new_tuple = test_tuple + tuple(test_list)\n    new_tuple = tuple(new_tuple)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_list + tuple(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = tuple(test_list)\n    new_tuple_str = test_str\n    return(new_tuple_list, new_tuple_str)\n    \ndef tuple_join(test_list, test_str):\n    '''\n    Write a function to join two tuples together.\n    '''\n    test_tuple_1 = tuple(test_list)\n    test_tuple_2 = test_str\n    new_test_tuple = test_tuple_1 + test_tuple_2\n    return(new_test_tuple)\n    \ndef test_tuple_function(test_list, test_str, test_num):\n    '''\n    Write a function to test tuple functions.\n    '''\n    test_tuple_1 = tuple(test_list)\n    test_tuple_2 = test_str\n    test_tuple_3 = test_num\n    new_test_tuple = tuple_join(test_tuple_1, test_tuple_2)\n    new_test_tuple = new_test_tuple.count(test_tuple_3)\n    return(new_test_tuple)\n    "
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # test_str = '4, 5, 6'\n    # test_list = [4, 5, 6]\n    tuple_new = tuple(test_list) + (test_str,)\n    return tuple_new\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_list, test_str\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # m = len(nums)\n    # even = []\n    # for i in range(m):\n    #     if (i+1)%2 == 0:\n    #         if nums[i]%2 == 0:\n    #             even.append(i)\n    # return even\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums is None:\n        return False\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    flag = True\n    for i in nums:\n        if nums[i] % 2!= 0:\n            flag = False\n    return flag\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2 == 0 and nums[i]%2 == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([len([i for i in nums[::2]]) % 2 == 0, len([i for i in nums[1::2]]) % 2 == 0])\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums_copy = nums\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            nums_copy[i] = nums[i] + 1\n        else:\n            nums_copy[i] = nums[i] - 1\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index_even_num = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_index_even_num.append(i)\n            else:\n                even_index_even_num.append(False)\n    return even_index_even_num\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2==0:\n            if nums[i]%2==0:\n                continue\n            else:\n                return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for i in test_tup if type(i) == tuple]\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return set(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = test_tup[:2] + test_tup[3:]\n    return test_tup\n    \ndef main():\n    test_tup = (1, 3, (4, 5), (6, 7), (8,))\n    test_tup = remove_nested(test_tup)\n    print(test_tup)\n    \nmain()"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    while len(test_tup) > 1:\n        if test_tup[0][0] in test_tup[1:]:\n            test_tup = test_tup[1:]\n        else:\n            test_tup = test_tup[1:1+len(test_tup)]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for test in test_tup:\n        if type(test) == tuple:\n            test_tup.remove(test)\n            remove_nested(test)\n            return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([i for i in test_tup if not isinstance(i, tuple)])\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    a = []\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            a.append(tup)\n        elif tup not in a:\n            a.append(tup)\n    return a\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if isinstance(i, tuple):\n            return test_tup[0]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #test_tup = (1, 2, (2, 3))\n    # (1, 2, 3) = (1, 2)\n    # Return the given tuple with all occurrences of a tuple removed\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_lists = len(input_list)\n    return number_of_lists\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if isinstance(i, list):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count_lists = 0\n    for items in input_list:\n        if isinstance(items, list):\n            count_lists += 1\n    return count_lists\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if isinstance(x,list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_of_lists = 0\n    for item in input_list:\n        if type(item) == list:\n            num_of_lists += 1\n    return num_of_lists\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) == list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count \n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while(low<=high):\n        mid=(low+high)//2\n        if arr[mid]>x:\n            high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            if mid==0 or arr[mid]!=arr[mid-1]:\n                return mid\n            else:\n                high=mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while(l<=r):\n        mid=l+(r-l)//2\n        if(arr[mid]==x and (mid==len(arr)-1 or arr[mid+1]>x)):\n            return mid\n        elif(arr[mid]<x):\n            l=mid+1\n        elif(arr[mid]>x):\n            r=mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    low = 0\n    high = len(arr)-1\n    \n    while low<=high:\n        mid = (low+high)//2\n        \n        if arr[mid]==x and (arr[mid]!=arr[mid-1]):\n            return mid\n        elif arr[mid]<x:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\n        "
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return -1\n    n=len(arr)\n    for i in range(n-1,0,-1):\n        if arr[i]==x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = start + (end - start)//2\n        if x > arr[mid]:\n            start = mid+1\n        elif x < arr[mid]:\n            end = mid - 1\n        else:\n            if mid == len(arr)-1 or x!= arr[mid+1]:\n                return mid\n            else:\n                start = mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-1-arr[::-1].index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x < arr[0]:\n        return -1\n    if x > arr[-1]:\n        return len(arr)-1\n    for i in range(len(arr)-1):\n        if arr[i] <= x and arr[i+1] > x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    first = 0\n    last = n - 1\n    while (first <= last):\n        mid = (first + last) // 2\n        if arr[mid] == x:\n            if ((mid == last) or (arr[mid + 1] > x)):\n                return mid\n            else:\n                first = mid + 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==None:\n        return -1\n    l,r=0,len(arr)-1\n    while l<=r:\n        mid=l+(r-l)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            r=mid-1\n        elif arr[mid]<x:\n            l=mid+1\n        else:\n            r=mid-1\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'(a.*b)')\n    matches = regex.findall(text)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(\"a.*b\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_starta_endb(\"aabab\")\ntext_starta_endb(\"aabbb\")\ntext_starta_endb(\"aabbaab\")\ntext_starta_endb(\"aabaaabbbb\")\ntext_starta_endb(\"aaaaabbbb\")\nprint(\"---------------------------------------------\")\ndef text_has_3_consecutive_vowels(text):\n    '''\n    Write a regular expression that will match a string if it contains three consecutive vowels, like \"aabbb\" or \"eee\".\n    '''\n    pattern = re.compile(\"[aeiou]{3}\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_has_3_consecutive_vowels(\"aabbb\")\ntext_has_3_consecutive_vowels(\"eee\")\ntext_has_3_consecutive_vowels(\"au\")\ntext_has_3_consecutive_vowels(\"aeiou\")\ntext_has_3_consecutive_vowels(\"aeiouaeiouaeiou\")\nprint(\"---------------------------------------------\")\ndef text_has_3_consecutive_consonants(text):\n    '''\n    Write a regular expression that will match a string if it contains 3 consecutive consonants, like \"babbb\" or \"xxxxx\".\n    '''\n    pattern = re.compile(\"[^aeiouAEIOU][^aeiouAEIOU][^aeiouAEIOU]\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_has_3_consecutive_consonants(\"babbb\")\ntext_has_3_consecutive_consonants(\"xxxxx\")\ntext_has_3_consecutive_consonants(\"aaabbb\")\ntext_has_3_consecutive_consonants(\"aeiouaeiou\")\nprint(\"---------------------------------------------\")\ndef text_match_mr_re(text):\n    '''\n    Write a regular expression that will match a string if it contains \"Mr. \", like \"Mr. Smith\".\n    '''\n    pattern = re.compile(\"Mr\\.?\\s?\\w*\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_match_mr_re(\"Mr. Smith\")\ntext_match_mr_re(\"Mr. Smith\")\ntext_match_mr_re(\"Mr. Smith      \")\ntext_match_mr_re(\"Mr.Smith\")\ntext_match_mr_re(\"Mr. Smith  and  Josephine Smith\")\ntext_match_mr_re(\"Ms. Doctor Who\")\ntext_match_mr_re(\"Mrs. Tilda Swinton\")\ntext_match_mr_re(\"Ms. Smith\")\nprint(\"---------------------------------------------\")\ndef text_match_email(text):\n    '''\n    Write a regular expression that will match an email address, like \"username@domain.com\".\n    '''\n    pattern = re.compile(\"\\w+@\\w+\\.\\w+\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_match_email(\"username@domain.com\")\ntext_match_email(\"user@domain.com\")\ntext_match_email(\"user@domain.com\")\ntext_match_email(\"user.name@domain.com\")\ntext_match_email(\"us%er@domain.com\")\ntext_match_email(\"username@domain.com\")\ntext_match_email(\"username@domain.com.com\")\ntext_match_email(\"username@domain.com.com\")\ntext_match_email(\"userna@domai.n.com\")\ntext_match_email(\"username@domain.name\")\ntext_match_email(\"username@domain..com\")\nprint(\"---------------------------------------------\")\ndef text_match_url(text):\n    '''\n    Write a regular expression that will match a URL, like \"http://domain.com\".\n    '''\n    pattern = re.compile(\"http:\\/\\/www\\.\\w+\\.\\w+\\.\\w+\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_match_url(\"http://domain.com\")\ntext_match_url(\"http://google.com\")\ntext_match_url(\"http://google.co.jp\")\ntext_match_url(\"https://www.facebook.com\")\nprint(\"---------------------------------------------\")\ndef text_match_date(text):\n    '''\n    Write a regular expression that will match a date, like \"June 24, 2016\".\n    '''\n    pattern = re.compile(\"\\d+\\W\\w+\\W\\d+\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_match_date(\"June 24, 2016\")\ntext_match_date(\"June 24, 2016\")\ntext_match_date(\"June 24, 2016\")\ntext_match_date(\"June 24, 2016 and May 23, 2016\")\ntext_match_date(\"June 24, 2016 and May 23, 2016\")\ntext_match_date(\"June 24, 2016 and May 23, 2016\")\ntext_match_date(\"June 24, 2016 and May 23, 2016\")\nprint(\"---------------------------------------------\")\ndef text_match_time(text):\n    '''\n    Write a regular expression that will match a time, like \"11:47 PM\".\n    '''\n    pattern = re.compile(\"\\d+:\\d+\\s?(AM|PM)\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_match_time(\"11:47 AM\")\ntext_match_time(\"11:47 PM\")\ntext_match_time(\"11:47 PM\")\ntext_match_time(\"11:47 PM\")\ntext_match_time(\"11:47 PM\")\ntext_match_time(\"11:47 PM\")\ntext_match_time(\"11:47 PM\")\ntext_match_time(\"11:47 PM\")\nprint(\"---------------------------------------------\")\ndef text_match_phone(text):\n    '''\n    Write a regular expression that will match a phone number, like \"678-555-1234\".\n    '''\n    pattern = re.compile(\"\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_match_phone(\"678-555-1234\")\ntext_match_phone(\"678-555-1234\")\ntext_match_phone(\"678-555-1234\")\ntext_match_phone(\"678-555-1234\")\ntext_match_phone(\"678-555-1234\")\ntext_match_phone(\"678-555-1234\")\ntext_match_phone(\"678-555-1234\")\ntext_match_phone(\"678-555-1234\")\nprint(\"---------------------------------------------\")\ndef text_match_time_tamp(text):\n    '''\n    Write a regular expression that will match a timestamp, like \"Sun Oct 28 19:00:00 2018\".\n    '''\n    pattern = re.compile(\"\\w+\\s\\d+\\s\\d+:\\d+:\\d+\\s\\d+\\W\\d+\\W\\d+\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        \ntext_match_time_tamp(\"Sun Oct 28 19:00:00 2018\")\ntext_match_time_tamp(\"Sun Oct 28 19:00:00 2018\")\ntext_match_time_tamp(\"Sun Oct 28 19:00:00 2018\")\ntext_match_time_tamp(\"Sun Oct 28 19:00:00 2018\")\ntext_match_time_tamp(\"Sun Oct 28 19:00:00 2018\")\ntext_match_time_tamp(\"Sun Oct 28 19:00:00 2018\")\ntext_match_time_tamp(\"Sun Oct 28 19:00:00 2018\")\ntext_match_time_"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if text[0] == 'a' and text[-1] == 'b':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"\\b[Aa]+[\\s]+[Bb]\\b\")\n    if pattern.findall(text):\n        return pattern.findall(text)\n    else:\n        return \"No matches!\"\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    return False\ndef text_start_or_end(text):\n    '''\n    Write a regular expression that matches 'cat' or 'dog', where the 'cat' starts with the text 'Start', and the 'dog' ends with the text 'End'.\n    '''\n    pass\n    return False\ndef text_start_or_end_alt(text):\n    '''\n    Write a regular expression that matches 'cat' or 'dog', where the 'cat' starts with the text 'Start' and the 'dog' ends with the text 'End'.\n    '''\n    pass\n    return False\ndef text_start_or_end_alt2(text):\n    '''\n    Write a regular expression that matches 'cat' or 'dog', where the 'cat' starts with the text 'Start' and the 'dog' ends with the text 'End'.\n    '''\n    pass\n    return False\ndef text_starts_with_text(text):\n    '''\n    Write a regular expression that matches a string starting with the text 'Start', with any characters in between, and ending with the text 'End'.\n    '''\n    pass\n    return False\ndef text_between_two_text(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between.\n    '''\n    pass\n    return False\ndef text_between_two_text_alt(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between.\n    '''\n    pass\n    return False\ndef text_exactly_two_text(text):\n    '''\n    Write a regular expression that matches a string exactly two 'Texts'.\n    '''\n    pass\n    return False\ndef text_exactly_two_text_alt(text):\n    '''\n    Write a regular expression that matches a string exactly two 'Texts'.\n    '''\n    pass\n    return False\ndef text_exactly_two_text_alt2(text):\n    '''\n    Write a regular expression that matches a string exactly two 'Texts'.\n    '''\n    pass\n    return False\ndef text_start_with_text_end_with_text(text):\n    '''\n    Write a regular expression that matches a string starting with the text 'Start', with any characters in between, ending with the text 'End'.\n    '''\n    pass\n    return False\ndef text_start_with_text_end_with_text_alt(text):\n    '''\n    Write a regular expression that matches a string starting with the text 'Start', with any characters in between, ending with the text 'End'.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string starts with the text 'Start', and ends with the text 'End'.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_alt(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string starts with the text 'Start', and ends with the text 'End'.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_alt2(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string starts with the text 'Start', and ends with the text 'End'.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_alt3(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string starts with the text 'Start', and ends with the text 'End'.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_alt4(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string starts with the text 'Start', and ends with the text 'End'.\n    '''\n    pass\n    return False\ndef text_start_with_text_end_with_text_between_two_text(text):\n    '''\n    Write a regular expression that matches a string starting with the text 'Start', with any characters in between, ending with the text 'End', where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_start_with_text_end_with_text_between_two_text_alt(text):\n    '''\n    Write a regular expression that matches a string starting with the text 'Start', with any characters in between, ending with the text 'End', where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_between_two_text(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_between_two_text_alt(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_between_two_text_alt2(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_between_two_text_alt3(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_between_two_text_alt4(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_between_two_text_alt5(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_between_two_text_alt6(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_between_two_text_alt7(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text_start_with_text_end_with_text_between_two_text_alt8(text):\n    '''\n    Write a regular expression that matches a string between 'Start' and 'End', with any characters in between, where the string also has the text 'Between' in the middle.\n    '''\n    pass\n    return False\ndef text_between_two_text"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a\\w*b$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print('Starta endb')\n    print(re.findall('a[a-zA-Z]*b',text))\n    print('endb')\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r'.*a.*b$', text)\n    return x\nprint(text_starta_endb(\"This is a test to see if aaa ends in b\"))\nprint(text_starta_endb(\"Is this over? No it is not!.\"))\nprint(text_starta_endb(\"\"))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern=re.compile('a.*b$')\n    if pattern.search(text):\n        print('Matching')\n    else:\n        print('No Match')\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_dictionary = 0\n    for key in dict:\n        sum_dictionary += dict[key]\n    return sum_dictionary\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if type(dict)!= dict:\n        return print(\"Incorrect type\")\n    else:\n        sum = 0\n        for i in dict.values():\n            sum += i\n    return print(\"Sum of the dictionary values is: \", sum)\n    \ndef return_first_value(dict):\n    '''\n    Write function to find the first value in the given dictionary.\n    '''\n    if type(dict)!= dict:\n        return print(\"Incorrect type\")\n    else:\n        for i in dict.values():\n            return print(\"First value in the dictionary is: \", i)\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for x in dict:\n        total += dict[x]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n    \nprint(return_sum({1:2, 3:4}))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n+1) if i % 2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    def is_odd(n):\n        return True if n % 2 == 1 else False\n    def sum_odd_numbers(l, r): \n        return sum([n for n in range(l, r + 1) if is_odd(n)])\n    return sum_odd_numbers\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input())\n    r = int(input())\n    sum = 0\n    for i in range(l,r+1):\n        if i%2!=0:\n            sum +=i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1, n+1, 2))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l,r = input().split()\n    l,r = int(l), int(r)\n    print(sum([i for i in range(l,r+1) if i%2 == 1]))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input())\n    r = int(input())\n    \n    sum = 0\n    for i in range(l,r+1):\n        if (i % 2 == 1):\n            sum += i\n        \n    print(sum)\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #start writing your code here\n    s=0\n    for i in range(l,r+1):\n        if i%2!=0:\n            s+=i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(l, r) if i%2==1])\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    ans = 0\n    for i in arr:\n        ans += i\n    return ans\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    # Test array with 0\n    arr = [0, 0, 0]\n    \n    # Sum all array\n    s = 0\n    for i in range(0, len(arr)):\n        s += arr[i]\n    \n    # Return\n    return s\n    "
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in range(0, len(arr)):\n        sum += arr[x]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n >> d\n    n = n | (n << 32 - d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    if d == 32:\n        return n >> d\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # 32 bit value so its 4x4 byte\n    temp = n >> d | n << 32 - d\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def binary(n):\n        result = ''\n        while n!=0:\n            result += str(n%2)\n            n //= 2\n        return result[::-1]\n    def rotate(n,d):\n        result = binary(n)\n        for i in range(d):\n            result = result[1:] + result[0]\n        return int(result,2)\n    return rotate(n,d)\n    \n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def binary(n):\n        result = ''\n        while n!=0:\n            result += str(n%2)\n            n //= 2\n        return result[::-1]\n    def rotate(n,d):\n        result = binary(n)\n        for i in range(d):\n            result = result[-1] + result[:-1]\n        return int(result,2)\n    return rotate(n,d)\n    \ndef xor_bits(n1,n2):\n    '''\n    Write a function to that return the result of xor between two numbers.\n    '''\n    result = n1 ^ n2\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = bin(n)[2:]\n    l = len(n)\n    d = d%l\n    return int(n[l-d:]+n[:l-d],2)\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = bin(n)[2:]\n    l = len(n)\n    d = d%l\n    return int(n[d:]+n[:d],2)\n    \ndef reverse_bits(n):\n    '''\n    Write a function to reverse the bits of a given number n.\n    '''\n    n = bin(n)[2:]\n    return int(n[::-1],2)\n    \ndef swap_bits(n):\n    '''\n    Write a function to swap the bits of a given number n.\n    '''\n    n = bin(n)[2:]\n    n = list(n)\n    for i in range(len(n)):\n        if n[i] == '0':\n            n[i] = '1'\n        else:\n            n[i] = '0'\n    return int(''.join(n),2)\n    \ndef binary_to_decimal(n):\n    '''\n    Write a function to convert binary to decimal.\n    '''\n    return int(n,2)\n    \ndef decimal_to_binary(n):\n    '''\n    Write a function to convert decimal to binary.\n    '''\n    return bin(n)[2:]\n    \ndef is_power_of_two(n):\n    '''\n    Write a function to check whether a given number is a power of two or not.\n    '''\n    return n>0 and bin(n)[2:].count('1')==1\n    \ndef is_even(n):\n    '''\n    Write a function to check whether a given number is even or not.\n    '''\n    return n%2==0\n    \ndef is_odd(n):\n    '''\n    Write a function to check whether a given number is odd or not.\n    '''\n    return n%2==1\n    \ndef is_left_shift(n,d):\n    '''\n    Write a function to check whether a given number is left shift of a given number by d.\n    '''\n    return n<<d == n*(2**d)\n    \ndef is_right_shift(n,d):\n    '''\n    Write a function to check whether a given number is right shift of a given number by d.\n    '''\n    return n>>d == n//(2**d)\n    \ndef is_bit_set(n,d):\n    '''\n    Write a function to check whether a bit is set or not in a given number.\n    '''\n    return n&(1<<d)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1<<d)-1\n    mask_32bit = 0xffffffff\n    return (n<<d)|(n>>(32-d))&mask_32bit\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = int(n)\n    d = int(d)\n    return ((n << d)|(n >> (32 - d)))\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = int(n)\n    d = int(d)\n    return ((n >> d)|(n << (32 - d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d>=n:\n        return n\n    mask = 2**d-1\n    remain = n%(2**(d-1))\n    n = (n>>d) | remain\n    return n | (mask << n.bit_length()-d)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n >> 32 - d\n    return n\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return left_rotate(n, 32 - d)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1<<d) - 1\n    mask <<= 32-d\n    return n&mask|(n>>d)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+',' ', text).strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','')\ndef common_letters(text):\n    '''\n    Write a function that returns all of the letters that are common between two words (in any order).\n    '''\n    text = text.replace(' ','')\n    return [text[i] for i in range(len(text)-1) if text[i]==text[i+1]]\ndef reverse_string(text):\n    '''\n    Write a function that reverses a string. The input string is given as an array of characters char[].\n    Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n    '''\n    #I used -1 to represent the end of the string and it is later used to skip over the last letter\n    start = 0\n    end = len(text)-1\n    while(start<end):\n        text[start],text[end] = text[end],text[start]\n        start+=1\n        end-=1\n    return text\ndef check_permutation(text,check):\n    '''\n    Write a function to check if a string is a permutation of another string.\n    '''\n    text = text.replace(' ','')\n    check = check.replace(' ','')\n    if(len(text)!=len(check)):\n        return False\n    counts = [0]*128\n    for i in range(len(text)):\n        counts[ord(text[i])]+=1\n    for i in range(len(check)):\n        counts[ord(check[i])]-=1\n    for i in counts:\n        if(i!=0):\n            return False\n    return True\ndef generate_power_set(s):\n    '''\n    Write a function to generate all subsets of a set.\n    '''\n    #The power set is a collection of all the subsets of a set.\n    #This function returns a list of lists containing the subsets\n    if(len(s)<1):\n        return [[]]\n    sub_sets = generate_power_set(s[1:])\n    result = sub_sets.copy()\n    for i in range(len(sub_sets)):\n        current_set = sub_sets[i]\n        current_set.append(s[0])\n        result.append(current_set)\n    return result\ndef mirror_string(text):\n    '''\n    Write a function to create a mirrored string. The input string is given as an array of characters char[].\n    Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n    '''\n    start = 0\n    end = len(text)-1\n    while(start<end):\n        text[start],text[end] = text[end],text[start]\n        start+=1\n        end-=1\n    return text\ndef k_universal_string(text,k):\n    '''\n    Write a function to create a k-universal string.\n    '''\n    return text*k\ndef string_compression(text):\n    '''\n    Write a function to perform basic string compression using the counts\n    of repeated characters. For example, the string aabcccccaaa would become a2b1c5a3. If the\n    \"compressed\" string would not become smaller than the original string, your method should return\n    the original string. You can assume the string has only uppercase and lowercase letters (a - z).\n    '''\n    current_count = 1\n    previous_letter = text[0]\n    compressed_string = []\n    for i in range(1,len(text)):\n        current_letter = text[i]\n        if(current_letter==previous_letter):\n            current_count+=1\n        else:\n            compressed_string.append(previous_letter)\n            compressed_string.append(str(current_count))\n            current_count = 1\n        previous_letter = current_letter\n    compressed_string.append(previous_letter)\n    compressed_string.append(str(current_count))\n    compressed_string = ''.join(compressed_string)\n    if(len(compressed_string)>=len(text)):\n        return text\n    else:\n        return compressed_string\ndef merge_the_tools(string, k):\n    '''\n    Write a function that returns an array of strings. \n    Each string in the array should represent a \n    line of text. Each character in the string should \n    represent a jumble of letters that can be spelled\n    by a combination of the characters in the original\n    string. \n    Your function should return a list of all possible\n    spelled words, which is the list of all possible\n    concatenations of the letters in the string in any order.\n    '''\n    #I used a double list to store the words.\n    words_list = [[]]\n    #This for loop fills the list with all the possible combinations of the letters\n    for i in range(k):\n        for j in range(len(words_list)):\n            for c in range(len(string)):\n                if(c+k*j<len(string)):\n                    words_list[j].append(string[c+k*j])\n    #I used set to store the unique words\n    unique_words = set()\n    #This loop adds all the unique words to the set\n    for i in range(len(words_list)):\n        for j in range(len(words_list[i])):\n            if(words_list[i][j] not in unique_words):\n                unique_words.add(words_list[i][j])\n    #This loop adds the unique words to the answer list\n    result = []\n    for i in range(len(unique_words)):\n        result.append(unique_words[i])\n    return result\ndef zero_matrix(matrix):\n    '''\n    Write a function to set all the elements of a matrix to zero.\n    The input is a two-dimensional array that represents a matrix.\n    Do not allocate extra space for another array, you must do this by modifying\n    the input array in-place with O(1) extra memory.\n    '''\n    #To represent the matrix I used a list of lists\n    #I used a set to store the rows and columns\n    #To set the 0 in the matrix, I used -1\n    rows = set()\n    cols = set()\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if(matrix[i][j]==0):\n                rows.add(i)\n                cols.add(j)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if(i in rows or j in cols):\n                matrix[i][j]=-1\n    return matrix\ndef find_max_consecutive_ones(nums):\n    '''\n    Write a function to return the longest consecutive run of 1s in a list of 1s and 0s.\n    '''\n    #I used a dictionary to store the count of the consecutive 1s\n    #I used -1 to represent the number of 0s\n    count_dict = dict()\n    count_dict[-1] = 0\n    longest_run = 0\n    current_run = 0\n    for i in range(len(nums)):\n        current_num = nums[i]\n        if(current_num==1):\n            current_run+=1\n        else:\n            if(current_run>longest_run):\n                longest_run = current_run\n            current_run = 0\n        count_dict[current_num] = count_dict.get(current_num,0)+1\n    if(current_run>longest_run):\n        longest_run = current_run\n    return longest_run\ndef first_non_repeating_character(string):\n    '''\n    Write a function that takes a string input, and returns the first character that is not repeated anywhere in the string.\n    For example, if given the input'stress', the function should return 't', since the letter t only occurs once in the string, and occurs first in the string.\n    As an added challenge, upper- and lowercase letters are considered the same character, but the function should return the correct case for the initial letter.\n    For example"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = r'\\s'\n    text = re.sub(pattern, '', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(' ', '')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    text = text.replace(\" \",\"\")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #return text.replace(' ', '')\n    result = ''\n    for char in text:\n        if char.isspace() == False:\n            result += char\n    return result\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    while \"  \" in text:\n        text = text.replace(\"  \", \" \")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    if isinstance(text, str):\n        return text.replace(\" \", \"\")\n    else:\n        raise ValueError(\"You can only remove whitespaces from a string.\")\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return len([i for i in [x,y,z] if i == x or i == y or i == z])\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0, 3):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #raise NotImplementedError(\"Write me\")\n    return sum([1 for x_,y_,z_ in zip(x,y,z) if x_==y_==z_])\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return(len(set([x,y,z])))\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0,len(x)):\n        if x[i] == y[i] == z[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum([1 if x==y==z else 0 for x in [x,y,z]])\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    n = 0\n    for a in [x,y,z]:\n        for b in [x,y,z]:\n            if a == b:\n                n += 1\n    return n\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a=x\n    b=y\n    c=z\n    count=0\n    for i in range(x):\n        if(x==y):\n            count=count+1\n    for i in range(y):\n        if(y==z):\n            count=count+1\n    for i in range(z):\n        if(z==x):\n            count=count+1\n    print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print(f'{x} is equal to {y} and {z}')\n        return 0\n    elif x == y:\n        print(f'{x} is equal to {y}')\n        return 1\n    elif x == z:\n        print(f'{x} is equal to {z}')\n        return 1\n    elif y == z:\n        print(f'{y} is equal to {z}')\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return min(x, y, z)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n= len(arr)\n    start = 0\n    end = n-1\n    while (start<end):\n        mid = int((start+end)/2)\n        if (arr[start] > arr[end]):\n            return (mid + 1)\n        if (arr[mid] < arr[end]):\n            end = mid\n        else:\n            start = mid\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #Time complexity = O(n)\n    #Space complexity = O(1)\n    n = len(arr)\n    k = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            k += 1\n    return k\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def get_rotations_count(arr): \n        start, end = 0, len(arr) - 1 \n        while start < end: \n            if arr[start] < arr[end]: \n                return end - start \n            mid = start + (end - start)//2\n            if arr[start] < arr[mid]: \n                start = mid + 1\n            elif arr[end] >= arr[mid]: \n                end = mid \n        return 0\n      \n    return get_rotations_count(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def binary_search(arr, num):\n        left = 0\n        right = len(arr) - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        if arr[mid] > arr[mid + 1]:\n            return mid + 1\n        if arr[mid] < arr[mid - 1]:\n            return mid\n        if arr[start] < arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Generate a rotated sorted array where all the elements are sorted in non-decreasing order\n    rotations = 0\n    low, high = 0, len(arr) - 1\n    while low < high:\n        if arr[low] < arr[high]:\n            break\n        mid = (low + high) // 2\n        rotations += 1\n        if arr[low] < arr[mid]:\n            low = mid + 1\n        elif arr[mid] < arr[high]:\n            high = mid\n        else:\n            low += 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Initialize index of smallest element\n    small_index = 0\n    for i in range(0, len(arr)):\n        if arr[i] < arr[small_index]:\n            small_index = i\n    return len(arr) - small_index\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    temp = arr[:]\n    temp.sort()\n    for i in range(n):\n        if arr[i]!= temp[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    def binary_search(arr, l, r, x):\n        # if r >= l:\n        #     mid = l + (r - l)//2\n        #     if arr[mid] == x:\n        #         return mid\n        #     elif arr[mid] > x:\n        #         return binary_search(arr, l, mid-1, x)\n        #     else:\n        #         return binary_search(arr, mid+1, r, x)\n        # else:\n        #     return -1\n        # for i in range(l, r+1):\n        #     mid = l + (r - l)//2\n        #     if arr[mid] == x:\n        #         return mid\n        #     elif arr[mid] > x:\n        #         r = mid - 1\n        #     else:\n        #         l = mid + 1\n        # return -1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start_index = 0\n    end_index = n - 1\n    while start_index <= end_index:\n        mid_index = start_index + (end_index - start_index) // 2\n        if arr[mid_index] > arr[mid_index + 1]:\n            return mid_index + 1\n        if arr[start_index] > arr[mid_index]:\n            end_index = mid_index - 1\n        else:\n            start_index = mid_index + 1\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n >= 0 and (math.sqrt(n) - math.floor(math.sqrt(n))) == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(sqrt(n))\n    if (sqrt * sqrt == n) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False;\n    x = 1;\n    while (x * x <= n):\n        if (x * x == n):\n            return True;\n        x = x + 1;\n    return False;\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = n ** 0.5;\n    if (root == int(root)) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return sqrt - int(sqrt) == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(math.sqrt(n))\n    return s * s == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    s = 0\n    while (x!= 0) :\n        s = s + x % 10\n        x = x/10\n    if (s * s == n) :\n        return 1\n    else :\n        return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n<0) :\n        return -1\n    start = 1\n    end = n\n    while (start <= end):\n        mid = start + (end - start) // 2;\n        if (mid * mid == n):\n            return mid\n        elif (mid * mid < n):\n            start = mid + 1\n            ans = mid\n        else:\n            end = mid - 1\n    return ans\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n > 0 and (math.sqrt(n) - int(math.sqrt(n))) == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    if (n < 0) :\n        return 0\n    if(n == 1) :\n        return 1\n    if(n == 4) :\n        return 1\n    high = n//2\n    while(high>1):\n        if(high*high == n) :\n            return 1\n        if(high*high < n) :\n            return 0\n        high = high//2\n    return 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr: \n        product *= i\n    if product % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # for i in range(len(arr)):\n    #     prod = 1\n    #     for j in range(i, len(arr)):\n    #         prod *= arr[j]\n    #         if prod % 2 == 0:\n    #             return True\n    # return False\n    \n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return not arr[0] % 2 == arr[1] % 2 == arr[2] % 2 == arr[3] % 2 == arr[4] % 2 == arr[5] % 2 == arr[6] % 2 == arr[7] % 2 == arr[8] % 2 == arr[9] % 2\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for n in arr:\n        product *= n\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    for number in arr:\n        product *= number\n    \n    return product % 2 == 0\n    \nis_product_even([1,3,2,4])\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for x in arr:\n        product *= x\n    return product % 2 == 0\n    \n    \ndef read_array(n):\n    '''\n    Reads n numbers from the standard input and returns an array.\n    '''\n    return [int(x) for x in raw_input().split()]\n    \ndef read_array_input():\n    '''\n    Reads array from the standard input.\n    '''\n    return raw_input().split()\n    \ndef write_array(arr):\n    '''\n    Prints out array.\n    '''\n    print \" \".join([str(x) for x in arr])\n    \ndef write_boolean(b):\n    '''\n    Prints out 1 if b is True, otherwise 0.\n    '''\n    if b:\n        print \"1\"\n    else:\n        print \"0\"\n        \ndef write_array_boolean(arr):\n    '''\n    Prints out a 1 if the product of numbers in array is even, otherwise prints 0.\n    '''\n    if is_product_even(arr):\n        print \"1\"\n    else:\n        print \"0\"\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 1:\n        return False\n    else:\n        product = 1\n        for x in arr:\n            product *= x\n        return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # create a product variable\n    product = 1\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if(arr[0] % 2 == 0):\n        for i in arr:\n            if(i % 2 == 0):\n                return True\n        return False\n    return True\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            result = l\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    def sum_list(list_x):\n        total = 0\n        for n in list_x:\n            total += n\n        return total\n    \n    list_result = []\n    \n    for list_y in lists:\n        total = sum_list(list_y)\n        list_result.append(total)\n    \n    maximum = max(list_result)\n    \n    for list_z in lists:\n        for n in list_z:\n            if sum_list(list_z) == maximum:\n                return list_z\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # unpack list\n    for i in range(len(lists)):\n        lists[i] = lists[i].split()\n    \n    # set sum to 0\n    sum = 0\n    max_sum = 0\n    index = 0\n    # loop through list\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sum += int(lists[i][j])\n        \n        if sum > max_sum:\n            max_sum = sum\n            index = i\n        sum = 0\n    \n    # return index of list with max sum\n    return index\n        \n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # return [max(lists[i], key=sum) for i in range(len(lists))]\n    # return [max(lists[i], key=sum) for i in range(len(lists))]\n    return [max(lists, key=sum)]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_with_max_sum = []\n    max_sum = 0\n    for l in lists:\n        current_sum = 0\n        for i in l:\n            current_sum += i\n        if current_sum > max_sum:\n            list_with_max_sum = []\n            max_sum = current_sum\n            list_with_max_sum.append(l)\n        elif current_sum == max_sum:\n            list_with_max_sum.append(l)\n    return list_with_max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_l = l\n    return max_l\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = lists[0]\n    for lista in lists:\n        if sum(lista) > sum(max):\n            max = lista\n    return max\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = max_sum_list_helper(lists, 0, len(lists)-1)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(0, len(lists)):\n        sum_of_list = sum(lists[i])\n        if sum_of_list > max_sum:\n            max_list = lists[i]\n            max_sum = sum_of_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max([sum(sublist) for sublist in lists])\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == '':\n        return 0\n    prev = test_str[0]\n    max = 0\n    curr = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] == prev:\n                curr += 1\n                if curr > max:\n                    max = curr\n            else:\n                curr = 1\n        prev = test_str[i]\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    lst = []\n    temp = 0\n    for i in test_str:\n        if i.isupper():\n            temp += 1\n            lst.append(temp)\n        else:\n            temp = 0\n    return max(lst)\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    for i in range(len(test_str) - 1):\n        if test_str[i] == test_str[i + 1]:\n            count += 1\n            max_count = max(count, max_count)\n        elif test_str[i]!= test_str[i + 1]:\n            count = 1\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    max_count = 0\n    current_count = 0\n    for i in test_str:\n        if i.isupper():\n            current_count += 1\n        else:\n            current_count = 0\n        max_count = max(max_count, current_count)\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_length = 0\n    current_length = 0\n    for letter in test_str:\n        if letter.isupper():\n            current_length += 1\n        else:\n            current_length = 0\n        max_length = max(current_length, max_length)\n    return max_length\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not isinstance(test_str, str):\n        return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    max_run = 0\n    cur_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            cur_run += 1\n        else:\n            cur_run = 0\n        max_run = max(max_run, cur_run)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Runtime: O(n^2)\n    # Space: O(1)\n    if not test_str:\n        return 0\n    curr_count = 1\n    curr_max = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        curr_max = max(curr_max, curr_count)\n    return curr_max\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for c in test_str:\n        if c.isupper():\n            count += 1\n            max_count = max(count, max_count)\n        else:\n            count = 0\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = \"APPLE\"\n    max_count = 0\n    count = 0\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2!= 0:\n            return nums[i]\n        i += 1\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return False\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return 'No odd number in the list'\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in range(len(nums)):\n        if nums[x] % 2!= 0:\n            return nums[x]\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return None\n    \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2 == 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_list = list(test_tup)\n    test_list.sort()\n    if test_list == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return 1\n    return 0\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print \"test_tup: \", test_tup\n    print \"K: \", K\n    for i in range(len(test_tup)):\n        if(K.find(test_tup[i])!= -1):\n            print \"Key is present in the tuple\"\n            return True\n    print \"Key is not present in the tuple\"\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if test_tup[0] == K or test_tup[1] == K else False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    res = False\n    for item in K:\n        if test_tup.count(item) >= K[item]:\n            res = True\n    return res\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if(test_tup[0]==test_tup[1]==test_tup[2]==K):\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup in K:\n        return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    count = 0\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                count += 1\n    else:\n        print(\"Lists must have same length.\")\n    if count == len(test_tup1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] <= test_tup2[0] and test_tup1[1] <= test_tup2[1] and test_tup1[2] <= test_tup2[2] and test_tup1[3] <= test_tup2[3] and test_tup1[4] <= test_tup2[4]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup2) == len(test_tup1):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2] and test_tup1[3] < test_tup2[3]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup1[i] < test_tup2[i] for i in range(len(test_tup1)))\n"
    }
]