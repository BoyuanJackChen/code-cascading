[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # if len(test_tup1) < len(test_tup2):\n    #     min_tup = test_tup1\n    #     max_tup = test_tup2\n    # else:\n    #     min_tup = test_tup2\n    #     max_tup = test_tup1\n    for item in test_tup1:\n        if item in test_tup2:\n            return item\n    return False\n",
        "num_ids": 114
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_element = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_element.append(i)\n    return similar_element\n",
        "num_ids": 47
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = []\n    for test_element1 in test_tup1:\n        for test_element2 in test_tup2:\n            if test_element1 == test_element2:\n                similar_elements.append(test_element1)\n",
        "num_ids": 65
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # test_tup1 = (1,2,3,4,5)\n    # test_tup2 = (6,7,8,9)\n    return [element for element in test_tup1 if element in test_tup2]\n    # print(result)\n",
        "num_ids": 69
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print('The shared elements from the two tuples are:')\n    print(set(test_tup1).intersection(test_tup2))\n",
        "num_ids": 38
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n",
        "num_ids": 50
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result_list = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                result_list.append(elem1)\n    return result_list\n",
        "num_ids": 64
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    return [item for item in tup1 if item in tup2]\n",
        "num_ids": 42
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = []\n    list2 = []\n    for i in test_tup1:\n        if i in test_tup2:\n            list1.append(i)\n",
        "num_ids": 45
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return False\n    elif n%2==0:\n        return True\n    for x in range(3,int(math.sqrt(n))+1,2):\n        if n%x==0:\n            return True\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    elif n==2:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return True\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    for i in range(2,n):\n        if n%i == 0:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,math.ceil(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n<=1:\n        return False\n    if n==2:\n        return True\n    for i in range(2,math.ceil(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n<2):\n        return True\n    elif (n==2):\n        return False\n    else:\n        for i in range(2,n):\n            if (n % i == 0):\n                return True\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n <= 1:\n    #     return True\n    # if n == 2:\n    #     return False\n    # for i in range(2, math.floor(math.sqrt(n))+1):\n    #     if n % i == 0:\n    #         return True\n    # return False\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 138
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(heap))\n    return res[::-1]\n",
        "num_ids": 73
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    print(hq.heappop(nums))\n    while len(nums)!= n:\n        print(hq.heappop(nums))\n    return\n    \nif __name__ == '__main__':\n    nums = [1,3,5,7,9,2,4,6,8,10]\n    n = 5\n    heap_queue_largest(nums,n)\n",
        "num_ids": 114
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return []\n    hq.heapify(nums)\n    max_list = []\n    for i in range(n):\n        max_list.append(hq.heappop(nums))\n    return max_list\n    \nnums = [10,4,2,1,23,12]\nprint(heap_queue_largest(nums,2))\n",
        "num_ids": 99
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #heapq.heapify(nums)\n    #while n > 0:\n    #    nums.pop()\n    #    n -=1\n    #return nums\n",
        "num_ids": 46
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    k = []\n    for i in range(n):\n        k.append(hq.heappop(nums))\n    return k[::-1]\n",
        "num_ids": 53
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    while len(nums) > n:\n        hq.heappop(nums)\n    return nums\n",
        "num_ids": 42
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n",
        "num_ids": 35
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    print(\"The n largest integers are: \")\n    for i in range(n):\n        print(hq.heappop(nums))\n",
        "num_ids": 49
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #hq.heapify(nums)\n    nums.sort(reverse=True)\n    #print(nums)\n    for i in range(n):\n        print(nums[i])\n    return(nums)\n    \n",
        "num_ids": 61
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    i=0\n    while i<n:\n        print(hq.heappop(nums), end=\" \")\n        i+=1\n    return nums\n",
        "num_ids": 54
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Set the minimum number as 2^n. \n    n = 0\n    # Set the maximum number as 2^(n + 1). \n    n = 1\n",
        "num_ids": 43
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count=0\n    if x>0:\n        while(x>0):\n            x=x>>1\n            count=count+1\n        if ((x==0) and (count==1)):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # first check if the number is negative\n    if x < 0: \n        return False\n    \n    # check if the number is even\n    if x == 0: \n        return True\n    if x%2 == 0: \n        return False\n",
        "num_ids": 61
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1) == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 30
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power = 1\n    while power <= x: \n        if power == x:\n            return True\n        power = power << 1\n    return False\n    \ndef is_Power_Of_Two_v2(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x and not (x & (x - 1))\n    \ndef is_Power_Of_Two_v3(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & -x) == x\n    \n    \ndef is_Power_Of_Two_v4(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x > 0 and x & (x-1) == 0\n    \ndef is_Power_Of_Two_v5(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        return (x & -x) == x\n    else:\n        return x!= 0\n    \ndef is_Power_Of_Two_v6(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        return x & (-x) == x\n    else:\n        return False\n    \ndef is_Power_Of_Two_v7(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        return x & ~x\n    else:\n        return 0\n    \ndef is_Power_Of_Two_v8(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x > 0 and x & ~x == 0\n    \n    \ndef is_Power_Of_Two_v9(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (-x) == x\n",
        "num_ids": 12
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    i = 1\n    while (i < x): \n        if (x & i == i): \n            return False\n        i = i << 1\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1) == 0): \n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return 0\n    while x!= 1:\n        if x%2!= 0:\n            return 1\n        else:\n            x = x/2\n    return 0\n",
        "num_ids": 50
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if not isinstance(text,str):\n        return\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\ndef find_char_long2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long3(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long4(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long5(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long6(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long7(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long8(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long9(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long10(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long11(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long12(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long13(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long14(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long15(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long16(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long17(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long18(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long19(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long20(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is: ',a)\n    return a\n    \ndef find_char_long21(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=0\n    for i in text:\n        if i.isalpha() and len(i)>=4:\n            a=a+1\n    print('total no of characters having len > 4 is",
        "num_ids": 50
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # example_text = \"The quick brown fox jumps over the lazy dog\"\n    example_text = text\n    regex = r\"\\b\\w{4,}\\b\"\n    matches = re.findall(regex, example_text)\n    print(matches)\n",
        "num_ids": 68
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r\"[\\w']+\", text)\n    print(words)\n    \n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 68
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    p = re.compile(r'\\b\\w{4,}\\b')\n    print(p.findall(text))\n",
        "num_ids": 34
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    pattern = re.compile(r'\\w{4,}')\n    result = re.findall(pattern, text)\n    print(result)\n",
        "num_ids": 44
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in text.split():\n        if len(i) >= 4:\n            print(i)\n",
        "num_ids": 27
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = [word for word in re.split('\\s+', text.strip()) if len(word) >= 4]\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    ans = []\n    for word in text.split():\n        if len(word) >= 4:\n            ans.append(word)\n    return ans\n",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**2)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**2)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        nums[i] = nums[i] ** 2\n    return nums\n",
        "num_ids": 30
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    print(list(map(lambda x: x**2, nums)))\n",
        "num_ids": 20
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i * i for i in nums]\n    # return [i ** 2 for i in nums]\n    # return [i ** 2 for i in nums if i % 2 == 0]\n",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #return [num ** 2 for num in nums]\n    #or\n    return list(map(lambda x: x ** 2, nums))\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n",
        "num_ids": 18
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(1, len(str)):\n        if (str[i] + str[0 : i] == str[0 : i] + str[i :]):\n            rotations += 1\n    return rotations\n",
        "num_ids": 62
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str) \n    str_len = len(str)\n    \n    str1 = str + str\n    str2 = str[::-1] + str[::-1]\n",
        "num_ids": 51
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    no_of_rotations = 0\n    if len(str) == 0:\n        return no_of_rotations\n    i = 0\n    while str[i] == str[i+1]:\n        i += 1\n        no_of_rotations += 1\n        if i == len(str) - 1:\n            return no_of_rotations\n    return no_of_rotations\n    \ndef get_rev_str(str, start, end):\n    i = start\n    j = end\n    res = ''\n    while i < j:\n        res = res + str[j]\n        j -= 1\n    return res\n    \ndef is_palindrome(str):\n    if len(str) == 0:\n        return False\n    if len(str) == 1:\n        return True\n    return str[0] == str[len(str)-1] and is_palindrome(str[1:len(str)-1])\n",
        "num_ids": 225
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    rotations = 0\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return rotations \n        rotations += 1\n    return -1\n",
        "num_ids": 59
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    temp = [None] * n \n",
        "num_ids": 21
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n    #Remove pass and write your code here\n",
        "num_ids": 15
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    \n    rotations = 0\n    for i in range(n - 1): \n        if (str[i]!= str[i + 1]): \n            rotations += 1\n",
        "num_ids": 55
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    i = 0\n    rotations = 0\n    while(i < len(str)):\n        if str[i:] + str[:i] == str:\n            break\n        rotations += 1\n        i += 1\n    return rotations\n",
        "num_ids": 59
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #size = len(str)\n    #return size % find_missing(str)\n    return len(str) % find_missing(str)\n    \ndef find_missing(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i] == \" \":\n            count += 1\n    return len(str)-count\n",
        "num_ids": 88
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    temp=s.replace(ch,\"\")\n    return(temp)\n",
        "num_ids": 19
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    temp = s.strip(ch)\n    return temp[::-1].strip(ch)\n",
        "num_ids": 25
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch, \"\")\n    return s[0:len(s)-1]\n",
        "num_ids": 27
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\",1).replace(ch,\"\",-1)\n",
        "num_ids": 22
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    return s[0:s.index(ch)]+s[s.index(ch)+1:]\n",
        "num_ids": 38
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) < 2:\n        return s\n    else:\n        return s[0:s.index(ch)+1]+s[s.rindex(ch):s.index(ch)+1]+s[s.index(ch)+1:s.rindex(ch):-1]+s[s.rindex(ch)+1:]\nprint(remove_Occ('app', 'p'))\nprint(remove_Occ('app', 'a'))\nprint(remove_Occ('apple', 'p'))\n",
        "num_ids": 124
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s.replace(ch,\"\")\n    s1=s1.replace(ch,\"\")\n    print(s1)\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch=ch.lower()\n    s=s.lower()\n    s=list(s)\n    #print(s)\n    if ch in s:\n        ind=s.index(ch)\n        #print(ind)\n        s.remove(ch)\n        s.remove(ch)\n        #print(s)\n        s=list(s)\n        s=\"\".join(s)\n        print(s)\n    else:\n        print(\"Character not found!\")\n    #print(s)\n",
        "num_ids": 123
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n",
        "num_ids": 12
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = s\n    if ch in new_s:\n        new_s = new_s.replace(ch,'')\n    return new_s\n",
        "num_ids": 39
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #Returning the row sums\n    sum_of_rows = []\n",
        "num_ids": 19
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Your code here\n    sorted_matrix = []\n    for i in range(len(M)):\n        sorted_matrix.append(sorted(M[i],key = sum))\n    return sorted_matrix\n",
        "num_ids": 57
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sum_M = [sum(i) for i in M]\n    sum_M = [(i, j) for j, i in enumerate(sum_M)]\n    sum_M.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(n):\n            M[i][j] = M[sum_M[i][1]][j]\n    return M\n",
        "num_ids": 110
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n",
        "num_ids": 13
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def row_sum(mat):\n        return [sum(x) for x in mat]\n    \n    rs = row_sum(M)\n    rs.sort(reverse=True)\n",
        "num_ids": 46
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Make an empty list to store all the rows in the matrix\n    rows = []\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Your code goes here\n    # O(n^2)\n    # m, n = len(M), len(M[0])\n    # M_new = [[0] * n for _ in range(m)]\n    # for i in range(m):\n    #     temp_sum = 0\n    #     for j in range(n):\n    #         temp_sum += M[i][j]\n    #         M_new[i][j] = temp_sum\n",
        "num_ids": 114
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def row_sum(M, row):\n        return sum(M[row])\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return M.sort(key=sum)\n",
        "num_ids": 13
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    if N <= 1:\n        return\n    for r in range(N):\n        for c in range(N-r-1):\n            if M[c+1][c+1] > M[c][c+1]:\n                M[c][c], M[c+1][c+1] = M[c+1][c+1], M[c][c]\n                M[c+1][c], M[c][c+1] = M[c][c+1], M[c+1][c]\n    return M\n",
        "num_ids": 138
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*(l*b*h)\n    \nl = 2\nb = 4\nh = 3\n",
        "num_ids": 31
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(2*l*b*h/3)\n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume \n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*h*l*b\n    \ndef find_Perimeter(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    return (l+b+h)\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #volume = (1/2)*(b*h) * l\n    return (1/2)*(b*h) * l\n",
        "num_ids": 34
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    \ndef find_Square_perimeter(a,b) : \n    '''\n    Write a python function to find the perimeter of a square.\n    '''\n    return a*4+b*4\n    \ndef find_Square_area(a,b) : \n    '''\n    Write a python function to find the area of a square.\n    '''\n    return a*b\n",
        "num_ids": 8
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*l*b*h \n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # code\n    V = (1/3)*h*l*b\n    return V\n    \nprint(find_Volume(2,3,4))\n",
        "num_ids": 39
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_[a-z]*_', text))\n",
        "num_ids": 24
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r\"^\\w+_\\w+$\")\n    return bool(pattern.match(text))\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if type(text)!= str:\n        return False\n    if '_' in text:\n        return False\n    if len(re.findall('[A-Z]',text)) > 0:\n        return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[_a-z]+[_a-z]*', text)\n",
        "num_ids": 25
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'^[a-z][a-z]+_[a-z]+$'\n    pattern = re.compile(regex)\n    match = re.search(pattern, text)\n    if match:\n        return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.search('[a-z]+_[a-z]', text)\n    if result == None:\n        return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    print(\"Input:\\t{}\\nOutput:\\t{}\".format(text, bool(re.findall('[_]+[a-z]*[a-z]*[_]+', text))))\n",
        "num_ids": 48
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'_\\w+_',text) is None:\n        return False\n    else:\n        return True\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(\"[a-z]_[a-z]\", text))\n",
        "num_ids": 25
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z]+_[a-z]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 4 * a\n    return p\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    a = int(input('Side length: '))\n    b = 4 * a\n    print(b)\n",
        "num_ids": 28
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    return a**2\n    \ndef rectangle_perimeter(a,b):\n    '''\n    Write a function that returns the perimeter of a rectangle given its width and height as input.\n    '''\n    return 2*(a+b)\n    \ndef rectangle_area(a,b):\n    '''\n    Write a function that returns the area of a rectangle given its width and height as input.\n    '''\n    return a*b\n    \ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function that returns the perimeter of a triangle given its side lengths.\n    '''\n    return a+b+c\n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function that returns the area of a triangle given its side lengths.\n    '''\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    \ndef circle_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a circle given its radius.\n    '''\n    return 2*3.14159*a\n    \ndef circle_area(a):\n    '''\n    Write a function that returns the area of a circle given its radius.\n    '''\n    return 3.14159*a**2\n    \ndef cube_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a cube given its side length.\n    '''\n    return 6*a\n    \ndef cube_area(a):\n    '''\n    Write a function that returns the area of a cube given its side length.\n    '''\n    return a**3\n    \ndef cone_perimeter(a,b):\n    '''\n    Write a function that returns the perimeter of a cone given its radius and height.\n    '''\n    return 3.14159*a+2*3.14159*b\n    \ndef cone_area(a,b):\n    '''\n    Write a function that returns the area of a cone given its radius and height.\n    '''\n    return 3.14159*a*b\n    \ndef cylinder_perimeter(a,b):\n    '''\n    Write a function that returns the perimeter of a cylinder given its radius and height.\n    '''\n    return 2*3.14159*a+2*3.14159*b\n    \ndef cylinder_area(a,b):\n    '''\n    Write a function that returns the area of a cylinder given its radius and height.\n    '''\n    return 3.14159*a**2+3.14159*a*b\n    \ndef sphere_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a sphere given its radius.\n    '''\n    return 4*3.14159*a\n    \ndef sphere_area(a):\n    '''\n    Write a function that returns the area of a sphere given its radius.\n    '''\n    return 4*3.14159*a**2\n    \ndef parallelepiped_perimeter(a,b,c):\n    '''\n    Write a function that returns the perimeter of a parallelepiped given its width, height and length.\n    '''\n    return 2*(a+b+c)\n    \ndef parallelepiped_area(a,b,c):\n    '''\n    Write a function that returns the area of a parallelepiped given its width, height and length.\n    '''\n    return a*b*c\n    \ndef pyramid_perimeter(a,b):\n    '''\n    Write a function that returns the perimeter of a pyramid given its base and height.\n    '''\n    return a+b+a+b\n    \ndef pyramid_area(a,b):\n    '''\n    Write a function that returns the area of a pyramid given its base and height.\n    '''\n    return a*b/2\n    \ndef trapezoid_perimeter(a,b,c):\n    '''\n    Write a function that returns the perimeter of a trapezoid given its base, top, and height.\n    '''\n    return a+b+a+b\n    \ndef trapezoid_area(a,b,c):\n    '''\n    Write a function that returns the area of a trapezoid given its base, top, and height.\n    '''\n    return (a+b)*c/2\n    \ndef rectangle_principal_diagonal(a,b):\n    '''\n    Write a function that returns the length of the principal diagonal of a rectangle given its width and height.\n    '''\n    return 2*((a**2+b**2)**0.5)\n    \ndef rectangle_secondary_diagonal(a,b):\n    '''\n    Write a function that returns the length of the secondary diagonal of a rectangle given its width and height.\n    '''\n    return 2*((a**2+b**2)**0.5)\n    \ndef rectangle_vertical_axis(a,b):\n    '''\n    Write a function that returns the vertical axis of a rectangle given its width and height.\n    '''\n    return a/2\n    \ndef rectangle_horizontal_axis(a,b):\n    '''\n    Write a function that returns the horizontal axis of a rectangle given its width and height.\n    '''\n    return b/2\n    \ndef trapezoid_principal_diagonal(a,b,c):\n    '''\n    Write a function that returns the length of the principal diagonal of a trapezoid given its base, top, and height.\n    '''\n    return ((a+b+c)/2)**0.5\n    \ndef trapezoid_secondary_diagonal(a,b,c):\n    '''\n    Write a function that returns the length of the secondary diagonal of a trapezoid given its base, top, and height.\n    '''\n    return ((a+b+c)/2)**0.5\n    \ndef trapezoid_vertical_axis(a,b,c):\n    '''\n    Write a function that returns the vertical axis of a trapezoid given its base, top, and height.\n    '''\n    return a/2\n    \ndef trapezoid_horizontal_axis(a,b,c):\n    '''\n    Write a function that returns the horizontal axis of a trapezoid given its base, top, and height.\n    '''\n    return b/2\n    \ndef rhombus_perimeter(a,b):\n    '''\n    Write a function that returns the perimeter of a rhombus given its width and height.\n    '''\n    return 4*(a**2+b**2)**0.5\n    \ndef rhombus_area(a,b):\n    '''\n    Write a function that returns the area of a rhombus given its width and height.\n    '''\n    return a*b\n    \ndef rhombus_diagonal(a,b):\n    '''\n    Write a function that returns the length of the diagonal of a rhombus given its width and height.\n    '''\n    return ((a**2+b**2)**0.5)\n    \ndef rhombus_vertical_axis(a,b):\n    '''\n    Write a function that returns the vertical axis of a rhombus given its width and height.\n    '''\n    return a/2\n    \ndef rhombus_horizontal_axis(a,b):\n    '''\n    Write a function that returns the horizontal axis of a rhombus given its width and height.\n    '''\n    return b/2\n    \ndef trapezoid_principal_diagonal(a,b,c):\n    '''\n    Write a function that returns the length of the principal diagonal of a trapezoid given its base, top, and height.\n    '''\n    return ((a+b+c)/2)**0.5\n    \ndef trapezoid_secondary_diagonal(a,b,c):\n    '''\n    Write a function that returns the length of the secondary diagonal of a trapezoid given its base, top, and height.\n    '''\n    return ((a+b+c)/2)**0.5\n    \ndef trapezoid_vertical_axis(a,b,c):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \" \".join(string)\n    string_list = list(string)\n    for char in string_list:\n        if char in ['.', ',', ';', '-', ':', '!', '?']:\n            string_list.remove(char)\n    return string_list\n",
        "num_ids": 72
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string)==0:\n        return []\n    output = []\n    temp = [0]*NO_OF_CHARS\n    for i in string:\n        temp[ord(i)] += 1\n    for i in range(len(string)):\n        if temp[ord(string[i])] > 0:\n            output.append(string[i])\n            temp[ord(string[i])] -= 1\n    return output\n",
        "num_ids": 106
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lis = list(string)\n    new_lis = []\n    for i in lis:\n        if i not in new_lis:\n            new_lis.append(i)\n    return ''.join(new_lis)\ndef modify_string(string): \n    '''\n    Write a function to modify the given string in the way as specified in the problem statement.\n    '''\n    string = string.lower()\n    new_string = ''\n    for i in string:\n        if ord(i) >= ord('a') and ord(i) <= ord('z'):\n            new_string += chr(ord(i) + 3)\n        else:\n            new_string += i\n    return new_string\ndef remove_duplicate_chars(string): \n    '''\n    Write a function to remove all duplicate characters of a given string.\n    '''\n    new_string = set(string)\n    new_string = ''.join(new_string)\n    return new_string\ndef remove_duplicate_words(string): \n    '''\n    Write a function to remove all duplicate words from a given string.\n    '''\n    return''.join(set(string.split()))\ndef remove_letters(string, l): \n    '''\n    Write a function to remove all characters from given string except for the first and last l characters.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if i < l or i >= len(string)-l:\n            new_string += string[i]\n    return new_string\ndef string_rotation(string1, string2): \n    '''\n    Write a function to check if a given string is a rotation of another given string.\n    '''\n    string1 = string1.lower()\n    string2 = string2.lower()\n    string1_list = list(string1)\n    string2_list = list(string2)\n    string1_list.sort()\n    string2_list.sort()\n    return string1_list == string2_list\ndef is_substring(string1, string2): \n    '''\n    Write a function to check if one string is a substring of another string.\n    '''\n    if len(string1) <= len(string2):\n        for i in range(len(string1)):\n            if string1[i] == string2[i]:\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\ndef reverse_string(string): \n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\ndef reverse_words_order(string): \n    '''\n    Write a function to reverse the order of words in a given string.\n    '''\n    string_list = string.split(' ')\n    return''.join(string_list[::-1])\ndef rotate_matrix(matrix): \n    '''\n    Write a function to rotate a given matrix by 90 degrees in anti-clockwise direction.\n    '''\n    n = len(matrix)\n    for i in range(n//2):\n        for j in range(i, n-1-i):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n    return matrix\ndef remove_leading_zeros(string): \n    '''\n    Write a function to remove leading zeros from an IP address.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i] == '0':\n            pass\n        else:\n            new_string += string[i]\n    return new_string\ndef list_to_string(list1): \n    '''\n    Write a function to convert a list to string.\n    '''\n    return ''.join(list1)\ndef roman_to_int(string): \n    '''\n    Write a function to convert a roman number to an integer.\n    '''\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman_list = list(string)\n    num = 0\n    for i in range(len(roman_list)-1):\n        if roman_dict[roman_list[i]] < roman_dict[roman_list[i+1]]:\n            num -= roman_dict[roman_list[i]]\n        else:\n            num += roman_dict[roman_list[i]]\n    num += roman_dict[roman_list[-1]]\n    return num\ndef int_to_roman(num): \n    '''\n    Write a function to convert an integer to roman number.\n    '''\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman_list = []\n    while num >= 1:\n        for i in roman_dict:\n            if num >= roman_dict[i]:\n                num -= roman_dict[i]\n                roman_list.append(i)\n    return ''.join(roman_list)\ndef is_palindrome(string): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    return string[::-1] == string\ndef minimum_deletions(string): \n    '''\n    Write a function to find the minimum number of deletions required to make a given string a palindrome.\n    '''\n    string = string.lower()\n    count = 0\n    for i in range(len(string)):\n        if string[i]!= 'a':\n            count += 1\n    return count//2\ndef longest_common_prefix(list1): \n    '''\n    Write a function to return the longest common prefix between a given list of strings.\n    '''\n    prefix = ''\n    for i in range(len(list1[0])):\n        for j in range(len(list1)):\n            if i < len(list1[j]) and list1[j][i] == list1[0][i]:\n                pass\n            else:\n                return prefix\n    prefix += list1[0][i]\n    return prefix\ndef list_to_number(list1): \n    '''\n    Write a function to convert a given list to a number.\n    '''\n    return int(''.join(list1))\ndef is_valid_parenthesis(string): \n    '''\n    Write a function to check if the given string is a valid parenthesis or not.\n    '''\n    open_list = ['(', '{', '[']\n    close_list = [')', '}', ']']\n    open_count = 0\n    close_count = 0\n    for i in string:\n        if i in open_list:\n            open_count += 1\n        elif i in close_list:\n            close_count += 1\n        if open_count < close_count:\n            return False\n    if open_count!= close_count:\n        return False\n    return True\ndef zig_zag_conversion(string, n): \n    '''\n    Write a function to convert a given string to a zig-zag pattern of size n.\n    '''\n    new_list = []\n    odd_row = True\n    for i in range(n):\n        if odd_row:\n            new_list.append(string[i])\n        else:\n            new_list.append(string[n-i-1])\n        if i < len(string)-1:\n            odd_row = not odd_row\n    return ''.join(new_list)\ndef roman_to_decimal(string): \n    '''\n    Write a function to convert a roman number to a decimal number.\n    '''\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 5",
        "num_ids": 27
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [ch for ch in string if ch not in string[:string.index(ch)]] \n",
        "num_ids": 26
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initalize the list for storing the string\n    string_list = []\n",
        "num_ids": 21
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = list(string) \n    i=0\n    while(i <len(li)): \n        if li[i] in string:\n            del li[i]\n        else:\n            i+=1\n    print(\"\".join(li))\n",
        "num_ids": 63
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str1 = [ord(i) for i in string]\n    list_str2 = [ord(i) for i in string2]\n    print(\"str1:\", list_str1)\n    print(\"str2:\", list_str2)\n    for i in range(len(list_str1)):\n        for j in range(len(list_str2)):\n            if list_str2[j] == list_str1[i]:\n                list_str1[i] = 0\n                break\n",
        "num_ids": 125
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #making a dictionary to store the characters of the first string\n    dict = {}\n    for i in range(NO_OF_CHARS):\n        dict[i] = string[i]\n    #print(dict)\n    \n    #making a list for the second string\n    list1 = list(string)\n    #print(list1)\n    \n    #empty list\n    str2 = []\n    for i in list1:\n        if i in dict:\n            str2.append(i)\n    #print(str2)\n    \n    str3 = \"\"\n    for i in str2:\n        str3 += i\n    return str3\n",
        "num_ids": 154
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for i in string:\n        string_list.append(ord(i))\n    return string_list\ndef find_char_freq(list):\n    '''\n    Write a function to count the frequency of each character in the list.\n    '''\n    freq_dict = {}\n    for i in range(NO_OF_CHARS):\n        freq_dict[i] = 0\n    for i in list:\n        freq_dict[i] += 1\n    return freq_dict\ndef find_distinct_char(freq_dict):\n    '''\n    Write a function to find the distinct characters in the freq_dict.\n    '''\n    return len(freq_dict)\ndef find_no_of_char(list):\n    '''\n    Write a function to count the number of characters in the list.\n    '''\n    return len(list)\ndef remove_duplicate_chars(freq_dict):\n    '''\n    Write a function to remove all the duplicate characters from the list of characters.\n    '''\n    for key in freq_dict:\n        if freq_dict[key] > 1:\n            freq_dict[key] -= 1\n    return freq_dict\ndef find_distance_between_str(str1, str2):\n    '''\n    Write a function to find the distance between the two strings (that is, find the number of characters that are different in the two strings).\n    '''\n    dist_dict = {}\n    for i in range(NO_OF_CHARS):\n        dist_dict[i] = 0\n    str1_list = str_to_list(str1)\n    str2_list = str_to_list(str2)\n    for i in range(find_no_of_char(str1_list)):\n        dist_dict[str1_list[i]] += 1\n    for i in range(find_no_of_char(str2_list)):\n        dist_dict[str2_list[i]] -= 1\n    return dist_dict\ndef find_character_commonality(str1, str2):\n    '''\n    Write a function to find the common characters in the two strings and their frequency.\n    '''\n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n    freq_dict = find_char_freq(list1)\n    for i in range(find_no_of_char(list2)):\n        if list2[i] in freq_dict:\n            freq_dict[list2[i]] += 1\n        else:\n            freq_dict[list2[i]] = 1\n    return freq_dict\nif __name__ == \"__main__\":\n    str1 = \"abcd\"\n    str2 = \"abcc\"\n    print(\"distance between the two strings: \", find_distance_between_str(str1, str2))\n    print(\"commonality between the two strings: \", find_character_commonality(str1, str2)",
        "num_ids": 197
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for char in string:\n        string_list.append(char)\n    return string_list\n",
        "num_ids": 32
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    sorted_array = arraynums.sort()\n    # s = set(arraynums)\n    # return len(s)!= len(arraynums)\n",
        "num_ids": 41
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if i!= j and arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert dup_el(arraynums) == False\n",
        "num_ids": 15
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #Write your code here\n    return len(set(arraynums))!= len(arraynums)\n",
        "num_ids": 28
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Brute Force \n    # O(n^2) Time\n    # O(1) Space\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        # if there is a duplicate element:\n        if arraynums.count(num) > 1:\n            return True\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    set_array = set(arraynums)\n    return len(arraynums)!= len(set_array)\n",
        "num_ids": 30
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(0,len(arraynums)-1):\n        if(arraynums[i] == arraynums[i+1]):\n            return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) > len(set(arraynums)):\n        print(arraynums)\n        return True\n    return False\n    # return len(arraynums)!= len(set(arraynums))\n",
        "num_ids": 56
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x)!= int:\n        raise TypeError('Only integers are allowed')\n    x = str(x)\n    if len(x) == 1:\n        if x[0] == '0':\n            return False\n        else:\n            return True\n    if len(x) > 1:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 4 == 0\n",
        "num_ids": 10
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 104 and x <= 106\n",
        "num_ids": 12
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    l = list(str(x))\n    count = 0\n    for i in l:\n        count+=int(i)\n    if count%3 == 0:\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 6\n",
        "num_ids": 8
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = len(str(x))\n    if n == 1:\n        return True\n    x = str(x)\n    for i in range(1, n+1):\n        if x[n-i] not in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'):\n            return False\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    i = int(x)\n    if (i%3==0) and (i%5==0):\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    l = len(s)\n    if l == 4:\n        if s[0] == \"3\" and s[1] == \"6\":\n            return True\n        else:\n            return False\n    elif l == 5:\n        if s[0] == \"4\" and s[1] == \"8\":\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0 or x == 1:\n        return True\n    if x < 1:\n        return False\n    \n    m = 0\n    while (m < x):\n        m = m * 10 + 1\n    if m == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import numpy as np\n    if (x % 5) == 0:\n        print(\"{} is woodall\".format(x))\n    else:\n        print(\"{} is not woodall\".format(x))\n    \nis_woodall(6)\nis_woodall(12)\nis_woodall(30)\nis_woodall(21)\nis_woodall(19)\n",
        "num_ids": 95
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num = str(num)\n    # Reverse the string\n    num = num[::-1]\n    # Convert the reversed string back to a number\n    num = int(num)\n    # Check if num is one less than twice its reverse\n    if num == num - 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 88
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #converting into string\n    num_str = str(num)\n    #finding the reverse\n    rev_str = str(num_str[::-1])\n    #finding the difference\n    diff = abs(int(num_str) - int(rev_str))\n    #checking if the difference is 1\n    return diff == 1",
        "num_ids": 80
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num = num[::-1]\n    if int(num) > 0:\n        num = int(num) - 1\n    else:\n        num = int(num) + 1\n    return num\n",
        "num_ids": 58
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = (reverse * 10) + (temp%10)\n        temp = int(temp/10)\n",
        "num_ids": 44
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_rev=0\n    while num > 0:\n        num,rem = divmod(num,10)\n        num_rev *= 10\n        num_rev += rem\n",
        "num_ids": 44
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    res = int(str(num)[::-1])\n    return res == num-1\n",
        "num_ids": 24
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = str(num)\n    return s == s[::-1] and num-1 == int(s[::-1])\n",
        "num_ids": 34
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        dig = num % 10\n        rev_num = (rev_num * 10) + dig\n        num = num // 10\n    print(\"The reverse of the number is\",rev_num)\n    if num == rev_num -1 :\n        print(\"The number is one less than twice its reverse\")\n    else:\n        print(\"The number is not one less than twice its reverse\")\n",
        "num_ids": 104
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    rev = 0\n    while n!= 0:\n        rev = (rev * 10) + (n % 10)\n        n = n//10\n    rev = rev//10\n    return n == (rev*2)\n",
        "num_ids": 59
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n",
        "num_ids": 19
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # start with an empty set and add digits to it until it is possible to form a number \n    # if we can create a number return it, otherwise return None \n    # print the largest number that can be formed from given digits \n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Store the number of digits in the array\n    num_digits = len(arr)\n    # array of length num_digits+1\n    comb = [[-1 for _ in range(num_digits+1)] for _ in range(num_digits+1)]\n",
        "num_ids": 67
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "num_ids": 9
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr :\n        return 0\n    def isValid(arr, prev, num) :\n        # if the number formed by concatenating prev and num is larger than the number formed by concatenating prev, num and next element, then return false\n        temp = prev + num\n        if (int(temp + arr[0]) > int(temp + arr[0] + arr[1])) :\n            return False\n        return True\n",
        "num_ids": 102
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    result = max(arr)\n    return result\n",
        "num_ids": 14
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Method 1 \n    def find_Max_Num_1(arr) : \n        if (len(arr) == 0) : \n            return None\n        res = list()\n        for i in range(0, len(arr)) : \n            for j in range(i + 1, len(arr)) : \n                for k in range(j + 1, len(arr)) : \n                    res.append(arr[i] * 10 + arr[j] * 10 + arr[k])\n        return max(res)\n    \n    # Method 2\n    def find_Max_Num_2(arr) : \n        if (len(arr) == 0) : \n            return None\n        res = list()\n        arr.sort()\n        arr.reverse()\n        for i in range(len(arr) - 2) : \n            res.append(arr[i] * 100 + arr[i + 1] * 10 + arr[i + 2])\n        return max(res)\n",
        "num_ids": 234
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # initialize max number as 0 \n    max_num = 0\n    # go through all the elements of the list and add them to a variable. \n    for element in arr:\n        max_num += element\n    # return the max number that can be formed by the array.\n    return max_num\n",
        "num_ids": 72
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    print(arr)\n    return arr[-1]\n    # return arr[-1] - arr[0]\n    \nprint(find_Max_Num([5,9,6,9,7]))\nprint(find_Max_Num([5,9,6,9,7]))\n",
        "num_ids": 78
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #arr = [1,5,3,8,4,5,9,3,2,1]\n    max_num = 0\n    while arr :\n        num = arr.pop()\n        max_num = max(max_num,num)\n        if max_num not in arr :\n            arr.append(max_num)\n            max_num = 0\n    return max_num\n",
        "num_ids": 95
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = [] \n    for i in range(0,len(arr)): \n        for j in range(i+1,len(arr)): \n            if arr[i] * arr[j] > arr[j] * arr[i]: \n                arr[i],arr[j] = arr[j],arr[i] \n    print (\"Largest formed number is:\",end=\"\") \n    for i in range(len(arr) - 1, 0, -1): \n        print (arr[i],end=\"\") \n    return maxNum\narr = [10, 2, 3, 9, 4, 8, 5] \nfind_Max_Num(arr) ",
        "num_ids": 165
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # function body\n    return (x>0)^(y>0)\n",
        "num_ids": 21
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n",
        "num_ids": 20
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x == 0 and y == 0:\n        return False\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y >= 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        print('True')\n    else:\n        print('False')\nopposite_Signs(10,6)\nopposite_Signs(5,9)\nopposite_Signs(-5,9)\nopposite_Signs(-5,-6)\n",
        "num_ids": 84
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0!= y > 0\nprint(opposite_Signs(5,-5))\n",
        "num_ids": 26
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0)!= (y>0):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n",
        "num_ids": 24
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return ((x<0 and y>0) or (x>0 and y<0))\n    \ndef is_Leap(year):\n    '''\n    Write a python function which takes a year as an input and returns True if the year is leap year.\n    '''\n    return (year%4==0 and year%100!=0 or year%400==0)\n    \ndef is_Leap_II(year):\n    '''\n    Write a python function which takes a year as an input and returns True if the year is leap year.\n    '''\n    return (year%400==0 or (year%4==0 and year%100!=0))\n    \ndef is_Prime(n):\n    '''\n    Write a python function which returns True if the given input number is prime number,\n    otherwise False.\n    '''\n    if(n<=1):\n        return False\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\n    \ndef is_Prime_II(n):\n    '''\n    Write a python function which returns True if the given input number is prime number,\n    otherwise False.\n    '''\n    if(n<=1):\n        return False\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=1\n    return True\n    \ndef is_Prime_III(n):\n    '''\n    Write a python function which takes a number as an input and returns True if the number is prime,\n    otherwise False.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    for i in range(2,int(n**0.5)+1):\n        if(n%i==0):\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n",
        "num_ids": 19
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3*n - 2)\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    a = n * (2 * n - 1)\n    b = 2 * n * (2 * n - 1)\n    c = n * (2 * n + 1)\n    d = 2 * n * (2 * n + 1)\n    \n    if n == 1:\n        return a\n    elif n % 2 == 0:\n        return b\n    elif n % 2 == 1:\n        return c\n    else:\n        return d\n    \ndef count_lowercase(s):\n    '''\n    Write a method that takes a string and returns the number of lowercase letters in the string.\n    '''\n    \n    count = 0\n    for char in s:\n        if char.islower():\n            count += 1\n    return count\n    \n    \ndef count_evens(nums):\n    '''\n    Write a method that takes an array of numbers and returns the number of even numbers in the array.\n    '''\n    \n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n    return count\n    \n    \ndef sum_even_values(nums):\n    '''\n    Write a method that takes an array of numbers and returns the sum of the even values in the array.\n    '''\n    \n    total = 0\n    for num in nums:\n        if num % 2 == 0:\n            total += num\n    return total\n    \n    \ndef sum_odd_values(nums):\n    '''\n    Write a method that takes an array of numbers and returns the sum of the odd values in the array.\n    '''\n    \n    total = 0\n    for num in nums:\n        if num % 2 == 1:\n            total += num\n    return total\n    \n    \ndef remove_every_other(lst):\n    '''\n    Write a method that takes an array and returns a new array with every other element removed.\n    '''\n    \n    new_list = []\n    for index in range(len(lst)):\n        if index % 2 == 0:\n            new_list.append(lst[index])\n    return new_list\n    \ndef max_num(nums):\n    '''\n    Write a method that takes an array of numbers and returns the maximum value in the array. If the array is empty, have the method return false.\n    '''\n    \n    if len(nums) == 0:\n        return False\n    \n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n    \ndef join_strings(words):\n    '''\n    Write a method that takes an array of strings and returns a single string: The elements of the array joined together.\n    If the array is empty, the method should return false.\n    '''\n    \n    if len(words) == 0:\n        return False\n    \n    joined_string = ''\n    for word in words:\n        joined_string += word\n    return joined_string\n    \ndef sum_floats(nums):\n    '''\n    Write a method that takes an array of numbers and returns the sum of the floats in the array.\n    '''\n    \n    total = 0\n    for num in nums:\n        if type(num) == float:\n            total += num\n    return total\n    \ndef join_strings_with_comma(words):\n    '''\n    Write a method that takes an array of strings and returns a string: The elements of the array joined together \n    with a comma between each element.\n    If the array is empty, the method should return false.\n    '''\n    \n    if len(words) == 0:\n        return False\n    \n    joined_string = ''\n    for word in words:\n        joined_string += word + ', '\n        \n    return joined_string[:-2]\n    \ndef common_elements(lst1, lst2):\n    '''\n    Write a method that takes two arrays and returns a new array containing only the elements that are common between the arrays.\n    '''\n    \n    new_list = []\n    for num in lst1:\n        if num in lst2:\n            new_list.append(num)\n    return new_list\n    \ndef common_elements_2(lst1, lst2):\n    '''\n    Write a method that takes two arrays and returns a new array containing only the elements that are common between the arrays.\n    '''\n    \n    new_list = []\n    for num in lst1:\n        if num in lst2 and num not in new_list:\n            new_list.append(num)\n    return new_list\n    \ndef longest_word(words):\n    '''\n    Write a method that takes an array of words and returns the length of the longest one.\n    '''\n    \n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n    \ndef longest_word_2(words):\n    '''\n    Write a method that takes an array of words and returns the length of the longest one.\n    '''\n    \n    longest_word = words[0]\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n    \ndef reverse_array(lst):\n    '''\n    Write a method that takes an array and returns a new array with the elements in reverse order.\n    '''\n    \n    new_list = []\n    for index in range(len(lst) - 1, -1, -1):\n        new_list.append(lst[index])\n    return new_list\n    \ndef reverse_array_2(lst):\n    '''\n    Write a method that takes an array and returns a new array with the elements in reverse order.\n    '''\n    \n    new_list = []\n    index = len(lst) - 1\n    while index >= 0:\n        new_list.append(lst[index])\n        index -= 1\n    return new_list\n    \ndef array_diff(a, b):\n    '''\n    Write a method that takes two arrays and returns a new array containing only the elements that are not present in the second array.\n    '''\n    \n    new_list = []\n    for num in a:\n        if num not in b:\n            new_list.append(num)\n    return new_list\n    \ndef array_diff_2(a, b):\n    '''\n    Write a method that takes two arrays and returns a new array containing only the elements that are not present in the second array.\n    '''\n    \n    new_list = []\n    for num in a:\n        if num not in b:\n            new_list.append(num)\n    return new_list\n    \ndef array_diff_3(a, b):\n    '''\n    Write a method that takes two arrays and returns a new array containing only the elements that are not present in the second array.\n    '''\n    \n    for num in b:\n        if num in a:\n            a.remove(num)\n    return a\n    \ndef is_first_come_first_served(take_out_orders, dine_in_orders, served_orders):\n    '''\n    You just ran a dinner party and everyone loves you. At the beginning, the served orders list was empty. However, just before serving orders, a terrible storm brewed and you lost all the food orders. Given the list of take out orders, the list of dine in orders, and the list of orders you lost, return a new list of orders that still needs to be served. The order of the lost orders does not matter.\n    '''\n    \n    for order in served_orders:\n        if order in take_out_orders:\n            take_out_orders.remove(order)\n        elif order in dine_in_orders:\n            dine_in_orders.remove(order)\n            \n    for order in take_out_orders:\n        if order in dine_in_orders:\n            dine_in_orders.remove(order)\n        else:\n            served_orders.append(order)\n            \n    for order in dine_in_orders:\n        if order in take_out_orders:\n            take_out_orders.remove(order)\n        else:\n            served_order",
        "num_ids": 159
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*n) + (n*n)\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (8 * (n - 1) + 1)\n",
        "num_ids": 31
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    assert(n >= 0)\n    return n * (3*n - 1)\n",
        "num_ids": 22
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            sum_of_digits = sum(map(int, substring))\n            if sum_of_digits == len(substring):\n                substrings.add(substring)\n    return len(substrings)\n",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [0]*n\n    dp[0] = 1\n    mod = 10**9 + 7\n    for i in range(1, n):\n        if s[i] > '9' or s[i-1] > '9':\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2] * 2) % mod\n    return dp[-1]\n",
        "num_ids": 117
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Sliding window.\n    # Space complexity: O(1).\n    # Time complexity: O(N^2).\n    # This function is similar to the count of distinct substrings with the same sum.\n    \n    if len(s) == 0:\n        return 0\n    \n    cnt = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(k) for k in s[i:j]) == j-i:\n                cnt += 1\n    return cnt\n",
        "num_ids": 139
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            if sum(int(s[i:j]) for i in range(j)) == len(s[i:j]):\n                count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    def count_Substrings_helper(s,i,j):\n        if i>=n or j>=n:\n            return 0\n        if i==j:\n            return 1\n        return count_Substrings_helper(s,i,j+1)+count_Substrings_helper(s,i+1,j+1)+count_Substrings_helper(s,i+1,j)\n    return count_Substrings_helper(s,0,0)\n",
        "num_ids": 125
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Complete this function\n    cnt = 0\n    for i in range(len(s)):\n        cnt += subStringLen(s, i, i)\n        cnt += subStringLen(s, i, i+1)\n    return cnt\n",
        "num_ids": 63
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    return n*(n+1)//2\n",
        "num_ids": 22
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    cnt = 0\n    for i in range(length):\n        for j in range(i+1,length+1):\n            cnt += len(set(s[i:j])) == len(s[i:j])\n    return cnt\n",
        "num_ids": 70
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    n = len(s)\n    counter = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sum = 0\n            for k in range(i, j):\n                sum += int(s[k])\n            if sum == j-i:\n                counter += 1\n    return counter\n",
        "num_ids": 97
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substring(s, n):\n        cnt = 0\n        for i in range(n):\n            sum_of_digit = 0\n            for j in range(i, n):\n                sum_of_digit += int(s[j])\n                if sum_of_digit == j - i + 1:\n                    cnt += 1\n        return cnt\n    return count_substring(s, len(s))\n",
        "num_ids": 103
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Smallest = 0\n    # for x in xs:\n    #     if x < Smallest:\n    #         Smallest = x\n    # return Smallest\n    \n    return min(xs)\n",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = xs[0]\n    for number in xs:\n        if number < smallest_number:\n            smallest_number = number\n    return smallest_number\n",
        "num_ids": 45
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = 0\n    for i in range(len(xs)):\n        x = xs[i] if xs[i] < x else x\n    return x\n",
        "num_ids": 42
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Your code here\n    if len(xs)==0:\n        return None\n    else:\n        min_num=xs[0]\n        for i in xs:\n            if i < min_num:\n                min_num=i\n        return min_num\n",
        "num_ids": 66
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    s = min(xs)\n    print(s)\n",
        "num_ids": 16
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    new_list = []\n    if len(test_list) <= 1:\n        return -1\n    elif len(test_list) == 2:\n        return test_list[1]-test_list[0]\n    elif len(test_list) > 2:\n        for i in range(len(test_list)-1):\n            new_list.append(test_list[i+1]-test_list[i])\n        return max(new_list)\n    return -1\n",
        "num_ids": 118
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for idx in range(len(test_list)-1):\n        for idx2 in range(idx+1, len(test_list)):\n            if abs(test_list[idx] - test_list[idx2]) > max_diff:\n                max_diff = abs(test_list[idx] - test_list[idx2])\n    return max_diff\n",
        "num_ids": 102
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    test_list.sort()\n",
        "num_ids": 17
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise ValueError(\"list should contain at least 2 elements\")\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > result:\n                result = abs(test_list[i] - test_list[j])\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # To find the max difference, use a loop to iterate through the list.\n    # To create a list of the pairs, create a new list from the tuple.\n    # Use a 2-pointer approach: i iterates through the list and j iterates through the list backwards.\n    # If the lists match, add the two values to the new list.\n    # Compare the values in the new list and find the max difference.\n    \n    # create a new list to store the pairs\n    pair_list = []\n    # iterate through the tuple list\n    for item in test_list:\n        # create a new list to store pairs from the tuple list\n        new_list = []\n        # iterate backwards through the list\n        for j in range(len(test_list)-1, -1, -1):\n            # if the two values from the current list are equal, add them to the new list\n            if item[0] == test_list[j][0]:\n                new_list.append(test_list[j])\n        # add the new list to the new list\n        pair_list.append(new_list)\n    \n    # iterate through the new list\n    for pair in pair_list:\n        # iterate through the pair list\n        for item in pair:\n            # iterate through the pair list\n            for item2 in pair:\n                # if the two pairs are not equal, add them to a new list\n                if item!= item2:\n                    if item[1] < item2[1]:\n                        max_difference = item2[1] - item[1]\n                    else:\n                        max_difference = item[1] - item2[1]\n    # return the max difference\n    return max_difference\n",
        "num_ids": 404
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n",
        "num_ids": 91
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            max_diff = max(max_diff, test_list[j] - test_list[i])\n    return max_diff\n",
        "num_ids": 73
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        raise ValueError('Empty list is not allowed.')\n    min_value = test_list[0]\n    max_value = test_list[0]\n    diff = 0\n    for value in test_list:\n        if min_value > value:\n            min_value = value\n        if max_value < value:\n            max_value = value\n        diff = max(diff, max_value - min_value)\n    return diff\n",
        "num_ids": 117
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    maximum = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i+1] - test_list[i] > maximum:\n            maximum = test_list[i+1] - test_list[i]\n    return maximum\n",
        "num_ids": 75
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subject_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subject_marks\n",
        "num_ids": 33
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    x=sorted(subjectmarks,key=lambda x:x[1])\n    print(\"Sorted List: \",x)\n    \ndef main():\n    \n    # List of tuples\n    data = [(10, \"Ram\"),(20, \"Shyam\"),(30, \"Hari\"),(40, \"Krishna\"),(50, \"Ajay\"),(60, \"Sita\")]\n    \n    # Calling function to sort a list of tuples using the second value of each tuple\n    subject_marks(data)\n    \nif __name__==\"__main__\":\n    main(",
        "num_ids": 140
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = sorted(subjectmarks, key=lambda x: x[1])\n    return marks\n",
        "num_ids": 24
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks,key = lambda x:x[1]))\n",
        "num_ids": 22
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n    \ndef print_marks(marks):\n    '''\n    Write a function to print the sorted list of tuples.\n    '''\n    print(marks)\n",
        "num_ids": 8
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1], reverse = True)\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_list(a):\n        return a[1]\n    l = sorted(subjectmarks, key = sort_list)\n    return l\n    \nsubjectmarks = [('Mathematics', 84),('Physics', 82),('Chemistry', 78),('Biology', 69)]\nprint(subject_marks(subjectmarks))\n",
        "num_ids": 79
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    suma = 0\n    for item in data_list:\n        if isinstance(item, list):\n            suma += recursive_list_sum(item)\n        else:\n            suma += item\n    return suma\n",
        "num_ids": 55
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 0:\n        head = data_list[0]\n        tail = data_list[1:]\n        if head == 0:\n            return 0\n        else:\n            return head + recursive_list_sum(tail)\n    else:\n        return 0\n    \n",
        "num_ids": 72
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for x in data_list:\n        if isinstance(x, list):\n            sum += recursive_list_sum(x)\n        else:\n            sum += x\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 42
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    if not data_list:\n        return sum\n    else:\n        for item in data_list:\n            if type(item) == list:\n                sum += recursive_list_sum(item)\n            else:\n                sum += item\n    return sum\n",
        "num_ids": 67
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 86
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count +=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x>0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter=0\n    for num in list:\n        if num>0:\n            counter+=1\n    return counter\nprint(pos_count([5,6,7,8,9]))\n",
        "num_ids": 48
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            pos_count += 1\n    return pos_count\n",
        "num_ids": 44
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if(i>0):\n            count=count+1\n    print(\"Number of positive numbers are:\",count)\n",
        "num_ids": 42
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x>0:\n            count+=1\n    print(count)\ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x<0:\n            count+=1\n    print(count)\ndef even_count(list):\n    '''\n    Write a python function to count the number of even numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x%2==0:\n            count+=1\n    print(count)\ndef odd_count(list):\n    '''\n    Write a python function to count the number of odd numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x%2==1:\n            count+=1\n    print(count)\ndef prime_count(list):\n    '''\n    Write a python function to count the number of prime numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if prime_num(x):\n            count+=1\n    print(count)\ndef prime_num(n):\n    '''\n    Write a python function to find whether a number is a prime number or not.\n    '''\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,n):\n        if n%i==0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if n<2:\n        return 0\n    prime_list=[]\n    for i in range(2,n+1):\n        if prime_num(i):\n            prime_list.append(i)\n    return prime_list\ndef lcm(list):\n    '''\n    Write a python function to find the lowest common multiple of a list of numbers.\n    '''\n    #first find the lcm of each number in the list\n    min_list=[]\n    for x in list:\n        if prime_num(x):\n            min_list.append(x)\n    while True:\n        min_x=min_list[0]\n        for x in min_list:\n            if x%min_x!=0:\n                min_x=x\n                break\n        for x in min_list:\n            x=x/min_x\n        if min_x not in min_list:\n            break\n        min_list.append(int(min_x))\n    return min_x\ndef gcd(list):\n    '''\n    Write a python function to find the greatest common divisor of a list of numbers.\n    '''\n    #first find the gcd of each number in the list\n    max_list=[]\n    for x in list:\n        if prime_num(x):\n            max_list.append(x)\n    while True:\n        max_x=max_list[0]\n        for x in max_list:\n            if x%max_x!=0:\n                max_x=x\n                break\n        for x in max_list:\n            x=x/max_x\n        if max_x not in max_list:\n            break\n        max_list.append(int(max_x))\n    return max_x\ndef palindrome(num):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp=num\n    rev=0\n    while num!=0:\n        rem=num%10\n        num=num//10\n        rev=rev*10+rem\n    if temp==rev:\n        return True\n    else:\n        return False\ndef armstrong(num):\n    '''\n    Write a python function to check whether a number is an armstrong number or not.\n    '''\n    temp=num\n    rev=0\n    while num!=0:\n        rem=num%10\n        num=num//10\n        rev=rev+rem**3\n    if temp==rev:\n        return True\n    else:\n        return False\ndef perfect(num):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    if num==1:\n        return False\n    else:\n        sum=0\n        for x in range(1,num):\n            if num%x==0:\n                sum+=x\n        if sum==num:\n            return True\n        else:\n            return False\ndef fibonacci(n):\n    '''\n    Write a python function to return the nth fibonacci number.\n    '''\n    a,b=0,1\n    count=0\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return a\n    elif n==1:\n        return b\n    else:\n        while count<n:\n            count+=1\n            a,b=b,a+b\n        return b\ndef lucas(n):\n    '''\n    Write a python function to return the nth lucas number.\n    '''\n    a,b=2,1\n    count=0\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return a\n    elif n==1:\n        return b\n    else:\n        while count<n:\n            count+=1\n            a,b=b,a+b\n        return b\ndef sum_series(n,a=0,b=1):\n    '''\n    Write a python function to return the nth series number.\n    '''\n    count=0\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return a\n    elif n==1:\n        return b\n    else:\n        while count<n:\n            count+=1\n            a,b=b,a+b\n        return b\ndef armstrong(num):\n    '''\n    Write a python function to check whether a number is an armstrong number or not.\n    '''\n    temp=num\n    rev=0\n    while num!=0:\n        rem=num%10\n        num=num//10\n        rev=rev+rem**3\n    if temp==rev:\n        return True\n    else:\n        return False\ndef perfect(num):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    if num==1:\n        return False\n    else:\n        sum=0\n        for x in range(1,num):\n            if num%x==0:\n                sum+=x\n        if sum==num:\n            return True\n        else:\n            return False\ndef palindrome(num):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp=num\n    rev=0\n    while num!=0:\n        rem=num%10\n        num=num//10\n        rev=rev*10+rem\n    if temp==rev:\n        return True\n    else:\n        return False\ndef fibonacci(n):\n    '''\n    Write a python function to return the nth fibonacci number.\n    '''\n    a,b=0,1\n    count=0\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return a\n    elif n==1:\n        return b\n    else:\n        while count<n:\n            count+=1\n            a,b=b,a+b\n        return b\ndef lucas(n):\n    '''\n    Write a python function to return the nth lucas number.\n    '''\n    a,b=2,1\n    count=0\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return a\n    elif n==1:\n        return b\n    else:\n        while count<n:\n            count+=1\n            a,b=b,a+b\n        return b\ndef sum_series(n,a=0,b=1):\n    '''\n    Write a python function to return the nth series number.\n    '''\n    count=0\n    if n<0:\n        prin",
        "num_ids": 17
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    print(f'n is: {n}')\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n    \n",
        "num_ids": 56
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0, 1, 2]\n    for i in range(3, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]\n",
        "num_ids": 52
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = {}\n    bells[0] = 1\n    bells[1] = 1\n    bells[2] = 2\n    bells[3] = 5\n    \n    for i in range(4, n+1):\n        bells[i] = sum([bells[i-j]*bells[j] for j in range(1,i)])\n    \n    return bells[n]\n    \ndef bell_numbers_to_partition(n):\n    '''\n    Write a function that finds all ways to partition a set of n Bell numbers.\n    \n    Note that the Bell numbers are all positive and they increase with n.\n    '''\n    \n    bells = {}\n    bells[0] = 1\n    bells[1] = 1\n    bells[2] = 2\n    bells[3] = 5\n    \n    for i in range(4, n+1):\n        bells[i] = sum([bells[i-j]*bells[j] for j in range(1,i)])\n    \n    partitions = []\n    for i in range(n):\n        for j in range(1,i+1):\n            p = []\n            p.append(bells[j])\n            p.append(bells[i-j])\n            partitions.append(p)\n    \n    return partitions\n",
        "num_ids": 168
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_number_helper(n, m):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return m\n        else:\n            return bell_number_helper(n - 1, m) + bell_number_helper(n - 2, m + 1)\n",
        "num_ids": 75
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell(n)\n",
        "num_ids": 9
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_memo(n, {})\n",
        "num_ids": 16
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    s = ''\n    s += str(bell_number_helper(1, n)) + '\\n'\n    s += str(bell_number_helper(2, n)) + '\\n'\n    s += str(bell_number_helper(3, n))\n    return s\n",
        "num_ids": 72
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1]\n    for i in range(1, n):\n        bells.append(bells[i-1]*i)\n    bells_partition = []\n    for k in range(1, len(bells)):\n        bells_partition.append(bells[k]/(bells[k-n]+bells[k]))\n    return(bells_partition)\n",
        "num_ids": 101
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n        all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n  ",
        "num_ids": 61
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    count = 0\n    for i in range(1,n-1):\n        if A[i] > A[i+1]:\n            count+=1\n    if count==0:\n        return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #A = [9, 9, 5, 2, 1]\n    isNonDecreasing = True\n    isNonIncreasing = True\n    for i in range(len(A)-1):\n        if A[i]<A[i+1]:\n            isNonDecreasing = False\n        if A[i]>A[i+1]:\n            isNonIncreasing = False\n    return isNonDecreasing or isNonIncreasing\n",
        "num_ids": 103
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1 or n == 2:\n        return True\n    # all increasing\n    elif A[1] > A[0] and A[1] > A[2]:\n        for i in range(3, n):\n            if A[i] < A[i - 1] or A[i] < A[i - 2]:\n                return False\n        return True\n    # all decreasing\n    elif A[1] < A[0] and A[1] < A[2]:\n        for i in range(3, n):\n            if A[i] > A[i - 1] or A[i] > A[i - 2]:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 179
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,3,2]\n    # A = [1,2,3]\n    # A = [1,3,2,4,5]\n    # A = [1,3,3,5,5]\n    # A = [1,3,3,5,5,4]\n",
        "num_ids": 76
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    l=[]\n    for i in range(len(A)-1):\n        if A[i+1]<=A[i]:\n            l.append(False)\n        else:\n            l.append(True)\n    return l\nA=[1,2,3,4,5]",
        "num_ids": 71
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Traverse the array A\n    for i in range(len(A)-1): \n        if A[i]>A[i+1]: \n            return False\n    return True",
        "num_ids": 46
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A == sorted(A) or A == sorted(A, reverse=True)\n",
        "num_ids": 22
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    flag = 0\n    for i in range(len(l)):\n        if len(l[i]) == len(s):\n            j = 0\n            for k in range(len(l[i])):\n                if l[i][k] == s[j]:\n                    j += 1\n                if j == len(s):\n                    flag = 1\n                    break\n    if flag:\n        return True\n    return False\n",
        "num_ids": 101
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(0, len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) <= len(s):\n        return False\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if l[i+j]!= s[j]:\n                break\n            if j == len(s) - 1:\n                return True\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return (l == s) or any(is_sublist(l[i:], s) for i in range(len(l)))\n",
        "num_ids": 34
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n",
        "num_ids": 120
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)<=len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        for j in range(len(s)):\n            if l[i+j]!=s[j]:\n                break\n        else:\n            return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n",
        "num_ids": 58
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    check = False\n    i = 0\n    for j in range(len(l) - len(s) + 1):\n        if check == True:\n            break\n        for k in range(len(s)):\n            if l[j + k]!= s[k]:\n                break\n            else:\n                if k == len(s) - 1:\n                    check = True\n    return check\n",
        "num_ids": 112
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i] == s[0]:\n            if len(l[i:]) >= len(s):\n                if all(s[j] == l[j] for j in range(len(s))):\n                    return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for elem in Input:\n        if len(elem)!= len(Input[0]):\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if length!= len(Input[i]):\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(map(tuple, Input)))==1\n",
        "num_ids": 18
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # your code here\n    len_list=[]\n    for tup in Input:\n        len_list.append(len(tup))\n    if len(set(len_list))==1:\n        return True\n    else:\n        return False\nInput = [(1,2,3),(1,2,3,4),('a','b')]\nprint(find_equal_tuple(Input))\n",
        "num_ids": 99
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Solution 1 - using set\n    print(\"Using set\")\n    len_set = set()\n    for i in Input:\n        len_set.add(len(i))\n    return len(len_set) <= 1\n",
        "num_ids": 55
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(Input[0]) for Input in Input))!= 1:\n        print('Not all of the tuples in the list have same length.')\n    else:\n        print('All of the tuples in the list have same length.')\n",
        "num_ids": 63
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if len(Input[i])!= len(Input[j]):\n                    return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == len(Input[0]):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n",
        "num_ids": 17
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 37
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n",
        "num_ids": 17
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    length = len(nums)\n    gap = length\n    swapped = True\n",
        "num_ids": 56
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # The number of passes of the list is determined by the difference between the length of the list and its average.\n    # The average of the list is computed with an online algorithm.\n    # For each pass, the list is sorted by recursively calling the comb_sort method.\n    # Therefore, the time complexity of comb_sort is O(n^(log n)) (the average of the list).\n    n = len(nums)\n    average = 0\n    if n >= 0:\n        average = compute_average(nums)\n    passes = int(n * (math.log(n, 2) + 1))\n    \n    for i in range(passes):\n        for j in range(len(nums)):\n            if j + 1 < len(nums) and nums[j + 1] < nums[j]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                \n        if average == 0:\n            break\n            \n    if average!= 0:\n        # Comb Sort uses a variation of insertion sort, which makes the complexity of the sorting algorithm log(n) in the best and average cases.\n        # The worst case is O(n^2).\n        # The case of an already sorted array is O(n).\n        return comb_sort(nums)\n    else:\n        return nums\n        ",
        "num_ids": 324
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n",
        "num_ids": 17
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 34
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n",
        "num_ids": 17
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        nums[i], nums[j] = nums[j], nums[i]\n    def isSorted(start,end):\n        if nums[start]<= nums[end]:\n            return True\n        return False\n    length = len(nums)\n    gap = length\n    swapped = True\n    while gap>1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(length - gap):\n            if isSorted(i, i+gap):\n                continue\n            swap(i, i+gap)\n            swapped = True\n    return nums\n",
        "num_ids": 168
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped == True:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 131
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import sqrt \n    sq = sqrt(n)\n    x = 0\n    while (x <= sq): \n        if (sq == x * x): \n            return (True) \n        x += 1\n    return (False) \n",
        "num_ids": 63
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(n**(1/2))**2 == n :\n        print('Given number is a perfect square')\n        return True\n    else:\n        print('Given number is not a perfect square')\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def isSquare(n,  sqrt_root):\n        if (sqrt_root * sqrt_root) == n:\n            return True\n        else:\n            return False\n    if n >= 0 and isSquare(n,int(sqrt(n))):\n        return True\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n+1):\n        for j in range(i,n+1):\n            if (i*i + j*j) == n:\n                print(i,j)\n                return 1\n    print(\"0\")\n    return 0\n",
        "num_ids": 65
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if n%i == 0:\n            dif_Square_i = n - (i*i)\n            if dif_Square_i!= 0:\n                dif_Square_j = dif_Square_i - i\n                if dif_Square_j!= 0:\n                    return 'Not possible'\n    return 'Possible'\n",
        "num_ids": 95
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while(i*i<=n):\n        if (n-i*i == 0):\n            print('YES')\n            break\n        i+=1\n    if(i*i!= n):\n        print('NO')\n",
        "num_ids": 61
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    list1 = []\n    for i in range(n+1):\n        if (i*i) > n:\n            break\n        list1.append(i*i)\n    list2 = []\n    for j in range(n+1):\n        if (j*j) > n:\n            break\n        list2.append(j*j)\n    list1.sort()\n    list2.sort()\n    print(\"list1 :\", list1)\n    print(\"list2 :\", list2)\n    for i in list2:\n        for j in list1:\n            if (i-j) == n:\n                return True\n    return False\n",
        "num_ids": 157
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(n)\n    for x in range(0,n):\n        for y in range(0,n):\n            if x**2 + y**2 == n:\n                return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        j = n - i**2\n        if(j>0 and i>j):\n            return \"Yes\"\n    return \"No\"\n",
        "num_ids": 48
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    sq = int(math.sqrt(n))\n    for i in range(1,sq+1):\n        if (i**2) == n:\n            return (True, i, sq)\n        elif (i**2) < n:\n            for j in range(i+1, sq+1):\n                if (j**2) == n:\n                    return (True, i, sq)\n                elif (j**2) < n:\n                    for k in range(j+1, sq+1):\n                        if (k**2) == n:\n                            return (True, i, sq)\n                        elif (k**2) < n:\n                            pass\n                        else:\n                            return(False)\n    return (False)\n",
        "num_ids": 180
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i, j = 0, 1\n    while i < len(colors) and j < len(patterns):\n        if colors[i]!= patterns[j]:\n            return False\n        i += 1\n        j += 1\n    return i == len(colors)\n",
        "num_ids": 66
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = patterns.split(',')\n    colors = colors.split(',')\n    if len(patterns)!= len(colors):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] == 'R' and colors[i] == 'G':\n            return False\n        elif patterns[i] == 'G' and colors[i] == 'R':\n            return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_map = {c: i for i, c in enumerate(colors)}\n",
        "num_ids": 23
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    same_count = 0\n    for i in range(len(colors)):\n        if patterns[i] == colors[i]:\n            same_count += 1\n    if same_count == len(colors):\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    # TODO: Use a dictionary to store the color sequence.\n    dictionary = {color: pattern for color, pattern in zip(colors, patterns)}\n    for color in colors:\n        if color not in dictionary:\n            return False\n        if dictionary[color]!= color:\n            return False\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    temp_colors = {}\n    for i in range(len(colors)):\n        temp_colors[i] = colors[i]\n    if len(patterns)!= len(temp_colors):\n        return False\n    for i in patterns:\n        if i[0] not in temp_colors or i[1] not in temp_colors:\n            return False\n        if temp_colors[i[0]]!= i[1]:\n            return False\n        temp_colors[i[0]] = temp_colors[i[1]]\n    return True\n",
        "num_ids": 140
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # This is the list of colors used.\n    colors_used = []\n",
        "num_ids": 21
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # An array of colors is the answer\n    if colors == patterns:\n        return True\n    # If only one color is left, that's the answer\n    if len(colors) == 1:\n        return False\n    # If only one pattern is left, that's the answer\n    if len(patterns) == 1:\n        return False\n    # If no pattern is left, that's the answer\n    if len(patterns) == 0:\n        return False\n",
        "num_ids": 109
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in test_list:\n        if (i[0] % K == 0) and (i[1] % K == 0):\n            ans.append(i)\n    return ans\n",
        "num_ids": 52
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    res = []\n    for i in range(len(test_list)):\n        if (all(j % K == 0 for j in test_list[i])):\n            res.append(test_list[i])\n    return res\n    \n    \n'''\nTestcase 1\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nK = 3\nprint(find_tuples(test_list, K))\n",
        "num_ids": 54
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for element in test_list:\n        if all(x % K == 0 for x in element):\n            result.append(element)\n",
        "num_ids": 39
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        for n in tup:\n            if n % K == 0:\n                result.append(tup)\n                break\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = set()\n    for i in range(len(test_list)):\n        if all([a % K for a in test_list[i]]):\n            result.add(tuple(sorted(test_list[i])))\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        if (i[0]%K == 0) and (i[1]%K == 0):\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 58
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for tup in test_list:\n        if len([x for x in tup if x % K == 0]) == len(tup):\n            output.append(tup)\n    return output\n",
        "num_ids": 54
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if (K % tup[0] == 0) and (K % tup[1] == 0):\n            result.append(tup)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if test_list[i][0]%K == 0 and test_list[i][1]%K == 0:\n            result.append(test_list[i])\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    out_list = []\n    for item in test_list:\n        if all(num%K == 0 for num in item):\n            out_list.append(item)\n    return out_list\n",
        "num_ids": 49
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print(n,\" is divisible by 11\")\n    else:\n        print(n,\" is not divisible by 11\")\nis_Diff(11)",
        "num_ids": 46
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2,n+1):\n        if n % i == 0:\n            if i == n:\n                return True\n            else:\n                return False\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    import math\n    return n % 11 == 0\n",
        "num_ids": 14
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1,n): \n        if (n % i == 0): \n            # number is divisible by 11 \n            if(i % 11 == 0): \n                return 1\n    return 0\n  \n",
        "num_ids": 56
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0:\n        return False\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(\"{} is divisible by 11\".format(n))\n    else:\n        print(\"{} is not divisible by 11\".format(n))\n",
        "num_ids": 48
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n % 11 == 0): \n        print(\"YES\") \n    else: \n        print(\"NO\") \n",
        "num_ids": 32
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n    return True\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    return len(s)%2\n    \ndef odd_even(s):\n    '''\n    Write a Python function which checks whether a passed string is palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backward as forward,\n    e.g., madam or nurses run.\n    '''\n    return s[::-1]==s\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #Your code here\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "num_ids": 37
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print('No')\n    else:\n        print('Yes')\n",
        "num_ids": 30
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)%2!=0):\n        return \"True\"\n    else:\n        return \"False\"\n    \nprint(word_len(\"good\"))\n",
        "num_ids": 43
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\nprint(word_len('word'))\n",
        "num_ids": 23
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # nth tetrahedral number is given by (n * (3 * n) + 1) / 2.\n    return int((n * (3 * n) + 1) / 2)\n",
        "num_ids": 46
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1) * (n+2) * (n+3)) // 24\n",
        "num_ids": 27
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(tetrahedral_series(n))\n",
        "num_ids": 16
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    return (n * (n+1)) / 2\n",
        "num_ids": 26
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3) // 24\n",
        "num_ids": 24
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = [0, 1, 5, 12, 22, 35, 51, 70, 92, 117, 145,...]\n    return t[n]\n",
        "num_ids": 37
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n-1) // 2\n",
        "num_ids": 41
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(0, n+1):\n        result += (-1)**i*i*(i+1)//2\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 6\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n",
        "num_ids": 73
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        return n*(n+1)*(n+2)//6\n",
        "num_ids": 58
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",
        "num_ids": 2016
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v\n",
        "num_ids": 22
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Volume of sphere = 4/3 * pi * r^3\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 34
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r**3)\n    return v\n",
        "num_ids": 25
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4.0/3.0)*math.pi*(r**3)\n    print(f\"The volume of a sphere with a radius of {r} is {volume:.2f}\")\n    return(volume)\n",
        "num_ids": 57
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # TODO: \n    # write a function that takes r (radius of a sphere) and returns the volume\n    v = 4/3*math.pi*(r**3)\n    return v\n    \ndef is_prime(n):\n    '''\n    Write a function that takes an integer and returns True if the number is prime, False otherwise.\n    '''\n    # TODO:\n    # write a function that takes an integer and returns True if the number is prime, False otherwise\n    num_of_factors = 0\n    # factors = []\n    if n > 1:\n        for i in range(1,n+1):\n            if n % i == 0:\n                num_of_factors += 1\n        if num_of_factors <= 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef calculate_sum_primes(n):\n    '''\n    Write a function that takes an integer and returns the sum of all the primes below it.\n    '''\n    # TODO:\n    # write a function that takes an integer n and returns the sum of all the primes below n\n    primes = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            primes.append(i)\n    print(primes)\n    sum_of_primes = 0\n    for num in primes:\n        sum_of_primes += num\n    return sum_of_primes\n    \ndef is_palindrome(n):\n    '''\n    Write a function that takes an integer and returns True if the number is palindromic, False otherwise.\n    '''\n    # TODO:\n    # write a function that takes an integer and returns True if the number is palindromic, False otherwise\n    num_to_string = str(n)\n    string_reversed = num_to_string[::-1]\n    if num_to_string == string_reversed:\n        return True\n    else:\n        return False\n        \ndef create_array(n):\n    '''\n    Write a function that takes an integer and returns an array of all numbers up to and including n, that can be divided by 4.\n    '''\n    # TODO:\n    # write a function that takes an integer and returns an array of all numbers up to and including n, that can be divided by 4\n    # array = []\n    # for num in range(1,n+1):\n    #     if num % 4 == 0:\n    #         array.append(num)\n    # return array\n    return [num for num in range(1,n+1) if num % 4 == 0]\n    \ndef replace_all(s, char, replacement):\n    '''\n    Write a function that takes a string, a character, and a replacement character and returns a new string where every occurrence of the character has been replaced with the replacement character.\n    '''\n    # TODO:\n    # write a function that takes a string, a character, and a replacement character and returns a new string where every occurrence of the character has been replaced with the replacement character\n    string_list = list(s)\n    for i in range(0,len(string_list)):\n        if string_list[i] == char:\n            string_list[i] = replacement\n    s = ''.join(string_list)\n    return s\n    \ndef get_highest_product(n):\n    '''\n    Write a function that takes an integer n and returns the n-digit number with the greatest product of its digits.\n    '''\n    # TODO:\n    # write a function that takes an integer n and returns the n-digit number with the greatest product of its digits\n    digits = []\n    num = 0\n    greatest_product = 0\n    for num in range(0,n+1):\n        string = str(num)\n        product = 1\n        for i in range(0,len(string)):\n            product *= int(string[i])\n        if product > greatest_product:\n            greatest_product = product\n    return greatest_product\n    \ndef is_pandigital(n):\n    '''\n    Write a function that takes an integer and returns True if the number is pandigital, False otherwise.\n    '''\n    # TODO:\n    # write a function that takes an integer and returns True if the number is pandigital, False otherwise\n    string = str(n)\n    num_of_digits = len(string)\n    for i in range(0,num_of_digits+1):\n        if str(i) not in string:\n            return False\n    return True\n    \ndef is_curious(n):\n    '''\n    Write a function that takes an integer and returns True if the number is \"curious\", False otherwise.\n    '''\n    # TODO:\n    # write a function that takes an integer and returns True if the number is \"curious\", False otherwise\n    num_of_digits = len(str(n))\n    n_string = str(n)\n    i = 0\n    while i < num_of_digits:\n        j = 1\n        if i > 0:\n            n_string = n_string[1:]\n        while j < int(n_string[0]) and i < num_of_digits-1:\n            n_string = n_string[1:]\n            j += 1\n        if j > int(n_string[0]):\n            return False\n        i += 1\n    return True\n    \ndef write_row(n):\n    '''\n    Write a function that takes an integer and returns a string containing a row of n stars in a triangle shape.\n    '''\n    # TODO:\n    # write a function that takes an integer and returns a string containing a row of n stars in a triangle shape\n    string_list = []\n    num_of_stars = n*2 - 1\n    for i in range(0,num_of_stars):\n        string_list.append('*')\n    return''.join(string_list)\n    \ndef write_triangle(n):\n    '''\n    Write a function that takes an integer and returns a string containing a triangle of n levels.\n    '''\n    # TODO:\n    # write a function that takes an integer and returns a string containing a triangle of n levels\n    string_list = []\n    num_of_rows = n\n    for i in range(0,num_of_rows):\n        string_list.append(write_row(n))\n    string_list.reverse()\n    return '\\n'.join(string_list)\n    \ndef is_symmetrical(n):\n    '''\n    Write a function that takes an integer and returns True if the integer is symmetrical, False otherwise.\n    '''\n    # TODO:\n    # write a function that takes an integer and returns True if the integer is symmetrical, False otherwise\n    num = str(n)\n    string = ''\n    for i in range(len(num),0,-1):\n        string += num[i-1]\n    if num == string:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_in_list(n):\n    '''\n    Write a function that takes a list of integers and returns True if the list is palindromic, False otherwise.\n    '''\n    # TODO:\n    # write a function that takes a list of integers and returns True if the list is palindromic, False otherwise\n    list_of_integers = [1,2,3,4,5,6,7,8,9,10]\n    string = str(list_of_integers)\n    num_of_elements = len(list_of_integers)\n    num_of_elements_half = math.floor(num_of_elements/2)\n    #for i in range(0,num_of_elements_half):\n        #string = string[1:]\n        #if string[i]!= list_of_integers[num_of_elements-1-i]:\n            #return False\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef get_factors(n):\n    '''\n    Write a function that takes an integer and returns the product of the factors of the integer.\n    '''\n    # TODO:\n    # write a function that takes an integer and returns the product of the factors of the integer\n    factors = []\n    for ",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n",
        "num_ids": 16
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # code here\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n",
        "num_ids": 34
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result += ord(i)\n    result = result % 26\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return \n",
        "num_ids": 6
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result += ord(i)\n    return result % 26\nprint(get_Char('abcd'))\n",
        "num_ids": 40
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = 0\n    for i in strr:\n        s += ord(i)\n    return chr(s%26)\n",
        "num_ids": 33
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in range(len(strr)):\n        sum+=ord(strr[i])\n    return chr(sum%26)\n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum = sum + ord(i)\n    return chr(sum%26)\n",
        "num_ids": 35
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+ord(i)\n    return sum%26\n",
        "num_ids": 31
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=sum([ord(char) for char in strr])%26\n    return chr(x+97)\n",
        "num_ids": 30
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n=0\n    for i in strr:\n        n=(n+ord(i))%26\n    return chr(n+97)\n    \n",
        "num_ids": 39
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [1,1,2]\n    if n <= 3:\n        return a[n-1]\n    while len(a) < n:\n        a.append(sum(a[-3:]))\n    return a[-1]",
        "num_ids": 60
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: return 0\n    elif n == 1: return 2\n    else: return sequence(n - 1) + sequence(n - 2)\n",
        "num_ids": 39
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # if n < 1:\n    #     print(\"Must input a positive number\")\n    # else:\n    #     if n == 1:\n    #         return 2\n    #     elif n == 2:\n    #         return 3\n    #     else:\n    #         return sequence(n-1) + sequence(n-2)\n        \n",
        "num_ids": 84
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [1,1,1]\n    for i in range(3, n+1):\n        a.append(int((a[i-2] + a[i-1] + a[i-3]) / 3))\n    return a[n-1]\n    \n    \n    \n    \ndef triangles():\n    '''\n    A function that prints the first 10 numbers of the newman conway sequence\n    '''\n    for i in range(1,11):\n        print(sequence(i))\n    \n    \n    \n    \ndef fibonacci(n):\n    '''\n    A function that takes an integer n and returns the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \n        \ndef fibonacci_up_to_n(n):\n    '''\n    A function that takes an integer n and returns a list with the fibonacci sequence up to the nth element\n    '''\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    else:\n        fibs = fibonacci_up_to_n(n-1)\n        fibs.append(fibs[-1] + fibs[-2])\n        return fibs\n        \n        \n        \ndef primes(n):\n    '''\n    Returns a list of the first n primes\n    '''\n    nums = [2]\n    for i in range(3, n+1):\n        if i % 2!= 0:\n            nums.append(i)\n    return nums\n    \n    \n    \n    \ndef all_factors(n):\n    '''\n    A function that returns a list of all the positive divisors of n\n    '''\n    return [x for x in range(1, n+1) if n % x == 0]\n    \n    \n    \n    \ndef prime_factors(n):\n    '''\n    Returns a list of the prime factors of n\n    '''\n    factors = []\n    x = 2\n    while x <= n:\n        if n % x == 0:\n            n /= x\n            factors.append(x)\n        else:\n            x += 1\n    return factors\n    \n    \n    \ndef prime_factors_up_to_n(n):\n    '''\n    Returns a list of the prime factors up to n\n    '''\n    factors = []\n    x = 2\n    while x <= n:\n        if n % x == 0:\n            n /= x\n            factors.append(x)\n        else:\n            x += 1\n    return factors\n    \n    \n    \n    \n    \ndef prime_factor_table(n):\n    '''\n    Returns a dictionary with the prime factor of n as the key and the number of times that prime factor appears in n as the value\n    '''\n    table = {}\n    x = 2\n    while x <= n:\n        if n % x == 0:\n            if x not in table:\n                table[x] = 1\n            else:\n                table[x] += 1\n            n /= x\n        else:\n            x += 1\n    return table\n    \n    \n    \n    \ndef prime_factor_table_up_to_n(n):\n    '''\n    Returns a dictionary with the prime factor of n as the key and the number of times that prime factor appears in n as the value up to n\n    '''\n    table = {}\n    x = 2\n    while x <= n:\n        if n % x == 0:\n            if x not in table:\n                table[x] = 1\n            else:\n                table[x] += 1\n            n /= x\n        else:\n            x += 1\n    return table\n    \n    \n    \ndef is_prime(n):\n    '''\n    Returns true if n is prime and false otherwise\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    x = 5\n    w = 2\n    while x <= n**0.5:\n        if n % x == 0:\n            return False\n        x += w\n        w = 6 - w\n    return True\n    \n    \n    \ndef is_prime_up_to_n(n):\n    '''\n    Returns a list of primes up to n\n    '''\n    nums = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            nums.append(i)\n    return nums\n    \n    \n    \ndef print_primes_in_range(n):\n    '''\n    Prints all the primes in the range (2,n)\n    '''\n    for i in range(2,n+1):\n        if is_prime(i):\n            print(i)\n            \n            \ndef print_primes_in_range_up_to_n(n):\n    '''\n    Prints all the primes up to n\n    '''\n    for i in range(2,n+1):\n        if is_prime(i):\n            print(i)\n    \n    \n    \ndef print_prime_factor_table(n):\n    '''\n    Prints the prime factor table for n\n    '''\n    table = prime_factor_table_up_to_n(n)\n    for key in table:\n        print(key, \" : \", table[key])\n    \n    \n    \ndef print_prime_factor_table_up_to_n(n):\n    '''\n    Prints the prime factor table for n up to n\n    '''\n    table = prime_factor_table_up_to_n(n)\n    for key in table:\n        print(key, \" : \", table[key])\n    \n    \n    \ndef print_prime_factors_in_range(n):\n    '''\n    Prints the prime factors in the range (2,n)\n    '''\n    for i in range(2,n+1):\n        if is_prime(i):\n            factors = prime_factors_up_to_n(i)\n            print(i, \" : \", factors)\n    \n    \ndef print_prime_factors_in_range_up_to_n(n):\n    '''\n    Prints the prime factors up to n\n    '''\n    for i in range(2,n+1):\n        if is_prime(i):\n            factors = prime_factors_up_to_n(i)\n            print(i, \" : \", factors)\n    \n    \n    \ndef print_all_primes_up_to_n(n):\n    '''\n    Prints all the primes up to n\n    '''\n    for i in range(2,n+1):\n        if is_prime(i):\n            print(i)\n            \n            \n            \n            \ndef print_all_primes_in_range(n):\n    '''\n    Prints all the primes in the range (2,n)\n    '''\n    for i in range(2,n+1):\n        if is_prime(i):\n            print(i)\n            \n            \n            \ndef print_all_factors_up_to_n(n):\n    '''\n    Prints all the factors up to n\n    '''\n    for i in range(1,n+1):\n        if n % i == 0:\n            print(i)\n            \n            \n            \ndef print_all_factors_in_range(n):\n    '''\n    Prints all the factors in the range (2,n)\n    '''\n    for i in range(2,n+1):\n        if n % i == 0:\n            print(i)\n            \n            \n            \ndef print_all_factors(n):\n    '''\n    Prints all the factors of n\n    '''\n    for i in range(1,n+1):\n        if n % i == 0:\n            print(i)\n            \n            \n            \ndef print_fibonacci_up_to_n(n):\n    '''\n    Prints the fibonacci sequence up to n\n    '''\n    fo",
        "num_ids": 4
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 11\n    else:\n        return sequence(n-1) + 2 * sequence(n-2)\n",
        "num_ids": 59
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 57
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (((1+5**0.5)/2)**n-(1-5**0.5)/2)/5**0.5\n",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [0,1,1] \n    for i in range(3, n):\n        a.append(a[i-2] + a[i-1])\n    return a[n-1] \n",
        "num_ids": 54
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    current_sum = 1\n    #initialise a list to hold the sequence \n    seq = []\n    #initialise a list to hold the sums of the seq \n    seq_sum = []\n    seq_sum.append(1)\n    for i in range(n):\n        #append the current sum to the sequence list \n        seq.append(current_sum)\n        #append the current sum to the sequence sum list \n        seq_sum.append(current_sum)\n        #find the next sum in the sequence list \n        current_sum = seq_sum[i] + seq_sum[i + 1]\n    return seq[n - 1]\n",
        "num_ids": 156
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfarea = 4*math.pi*r**2\n    return surfarea\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*l**2\n    return surfarea\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfarea = 2*math.pi*r*h+2*math.pi*r**2\n    return surfarea\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfarea = math.pi*r*(r+h)+math.pi*r*r\n    return surfarea\ndef surfacearea_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surfarea = 1/2*b*h\n    return surfarea\ndef surfacearea_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surfarea = b*h\n    return surfarea\ndef surfacearea_squarepyramid(b,h):\n    '''\n    Write a function to find the surface area of a square pyramid.\n    '''\n    surfarea = 1/2*b*h+b*h\n    return surfarea\ndef surfacearea_prism(b,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    surfarea = 2*b*h+2*b*h+b*h\n    return surfarea\ndef surfacearea_rhombus(d1,d2):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    surfarea = 1/2*d1*d2\n    return surfarea\ndef surfacearea_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    surfarea = 4*math.pi*a*b*c\n    return surfarea\ndef surfacearea_cone_sideonly(h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfarea = math.pi*h**2\n    return surfarea\ndef surfacearea_parallelopiped(a,b,c,d):\n    '''\n    Write a function to find the surface area of a parallelopiped.\n    '''\n    surfarea = 2*(a*b+a*c+b*c)\n    surfarea += a*d\n    surfarea += b*d\n    surfarea += c*d\n    return surfarea\ndef surfacearea_parallelepiped_prism(a,b,c,d):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    surfarea = 2*a*b*c\n    surfarea += 2*a*c*d\n    surfarea += 2*a*b*d\n    surfarea += 2*b*c*d\n    return surfarea\ndef surfacearea_cylinder_sideonly(h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfarea = 2*math.pi*h\n    return surfarea\ndef surfacearea_cylinder_wholeds(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfarea = 2*math.pi*r*(r+h)\n    return surfarea\ndef surfacearea_cylinder_wholediam(d):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfarea = 2*math.pi*d\n    return surfarea\ndef surfacearea_cylinder_wholediam_sideonly(d):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfarea = math.pi*d**2\n    return surfarea\ndef surfacearea_cylinder_topbottom(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfarea = math.pi*r*r+math.pi*r*h\n    return surfarea\ndef surfacearea_cylinder_topbottom_sideonly(h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfarea = math.pi*h*h\n    return surfarea\ndef surfacearea_sphere_sideonly(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfarea = 4*math.pi*r*r\n    return surfarea\ndef surfacearea_sphere_wholeds(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfarea = 4*math.pi*r*(r+r)\n    return surfarea\ndef surfacearea_sphere_wholediam(d):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfarea = 4*math.pi*d\n    return surfarea\ndef surfacearea_sphere_wholeds_sideonly(d):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfarea = 4*math.pi*d*d\n    return surfarea\ndef surfacearea_sphere_topbottom(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfarea = 4*math.pi*r*r\n    return surfarea\ndef surfacearea_sphere_topbottom_sideonly(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfarea = 4*math.pi*r*r\n    return surfarea\ndef surfacearea_cube_sideonly(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*l*l\n    return surfarea\ndef surfacearea_cube_wholeds(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*l*l\n    return surfarea\ndef surfacearea_cube_wholediam(d):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*d*d\n    return surfarea\ndef surfacearea_cube_wholediam_sideonly(d):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*d*d\n    return surfarea\ndef surfacearea_cube_topbottom(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*l*l\n    return surfarea\ndef surfacearea_cube_topbottom_sideonly(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*l*l\n    return surfarea\ndef surfacearea_cube_topbottom_wholeds(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*l*l\n    return surfarea\ndef surfacearea_cube_topbottom_wholediam(d):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*d*d\n    return surfarea\ndef surfacearea_cube_topbottom_wholediam_sideonly(d):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfarea = 6*d*d\n    return surfarea\ndef surfacearea_rectangle_sideonly(l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surfarea = 2*l*l\n    return surfarea\ndef surfacearea_rectangle_wholeds(l):\n    '''",
        "num_ids": 1
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * (r**2))\n",
        "num_ids": 17
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\n",
        "num_ids": 23
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r**2\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r**2 * h\n    \ndef total_energy(m,v,k):\n    '''\n    Write a function to calculate the total energy of a system.\n    '''\n    return 0.5 * m * v**2 + k * m * v**2\n    \ndef leapyear(year):\n    '''\n    Write a function to check if a year is a leap year.\n    '''\n    if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n        return True\n    else:\n        return False\n    \ndef dates_dispersion(date1,date2):\n    '''\n    Write a function to check if a date is dispersive.\n    '''\n    x = date1.split(\"/\")\n    y = date2.split(\"/\")\n    if int(x[1]) > int(y[1]):\n        return True\n    elif int(x[1]) == int(y[1]):\n        if int(x[0]) >= int(y[0]):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 100
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef area_parallelogram(l,w):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return l*w\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r**2*h\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 1/3*math.pi*r*(r+h*math.sqrt(r**2+h**2))\ndef area_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return math.pi*r**2\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return s**3\ndef volume_rectangularprism(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef area_square(s):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return s**2\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return l*w\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\ndef area_parallelogram_alt(l,w):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return l*w\ndef surfacearea_triangle(a,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return a*h/2\ndef volume_trapezoid(l,h,b):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return l*h+h*b\ndef surfacearea_cone_alt(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r*(r+h*math.sqrt(r**2+h**2))\ndef volume_cylinder_alt(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef volume_cone_alt(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_cube_alt(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return s**3\ndef volume_rectangularprism_alt(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef area_square_alt(s):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return s**2\ndef area_rectangle_alt(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return l*w\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_cube_alt_alt(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return s**3\ndef area_cylinder_alt_alt(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\ndef surfacearea_rectangularprism_alt(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef area_trapezoid_alt_alt(l,b,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return l*h+h*b\ndef surfacearea_circle_alt_alt(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return math.pi*r**2\ndef volume_sphere_alt_alt(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef area_square_alt_alt(s):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return s**2\ndef area_rectangle_alt_alt(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return l*w\ndef surfacearea_triangle_alt_alt(a,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return a*h/2\ndef surfacearea_triangle_alt_alt_alt(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef volume_trapezoid_alt_alt_alt(l,h,b):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return l*h+h*b\ndef area_parallelogram_alt_alt(l,w):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return l*w\ndef surfacearea_cylinder_alt_alt(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\ndef volume_cube_alt_alt_alt(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return s**3\ndef volume_rectangularprism_alt_alt_alt(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef surfacearea_parallelogram_alt_alt_alt(l,w):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return l*w\ndef surfacearea_rectangle_alt_alt_alt_alt(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return l*w\ndef surfacearea_triangle_alt_alt_alt_alt(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef volume_trapezoid_alt_alt_alt_alt(l,h,b):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return l*h+h*b\ndef volume_cylinder_alt_alt_alt_alt(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef surfacearea_cylinder_alt",
        "num_ids": 22
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area= 4*math.pi*r**2\n    return surface_area\n",
        "num_ids": 23
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r * r)\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*r**2)\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*n-n+1)\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Only 6 first hexagonal numbers:\n    # 1, 2, 3, 5, 10, 16\n    # What is the formula for nth hexagonal number?\n    # x_n = n * 2 * ((-1)^(n + 1) / 2)\n    # x_n = (n * 2 * ((-1)^(n + 1) / 2)) + n\n    # x_n = n^2 + n\n    # x_n = (n^2 + n) / 2\n    # n^2 + n = 2 * (n^2 + n) / 2\n    # n^2 + n = 2 * (n^2 + n)\n    # 2n^2 + 2n + 1 = 2 * (n^2 + n)\n    # n^2 + n = (2n^2 + 2n) / 2\n    # n^2 = (2n^2 + 2n - 1) / 2\n    # n = sqrt(4n^2 + 4n - 1) / 2\n    # n = int(sqrt(4 * n**2 + 4 * n - 1))\n    # return n * 2 * ((-1)^(n + 1) / 2)\n",
        "num_ids": 282
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n - 2) // 2\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((3*n*n-n)+1)//2\n",
        "num_ids": 18
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # hexagonal numbers are not regular so we need to find the corresponding\n    # triangular number of the nth hexagonal number and then subtract n\n    # from that number.\n    triangular_number = n * (2 * n - 1)\n    centered_hexagonal_number = (triangular_number - n)\n    return centered_hexagonal_number\n",
        "num_ids": 83
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n * (2 * n - 1) * (3 **.5) / 2)\n",
        "num_ids": 26
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n) - hexagonal_number(n-1)\n",
        "num_ids": 22
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n) - math.sqrt((-1/2) * (n + 2) * (2 * n + 1))\n",
        "num_ids": 37
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n * (2*n - 1)**.5)\n",
        "num_ids": 20
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return ct.ChainMap(dict1,dict2,dict3)\n",
        "num_ids": 20
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key, value in dict3.items():\n        if key in dict1:\n            dict1[key] = dict1[key] + value\n        else:\n            dict1[key] = value\n    for key, value in dict2.items():\n        if key in dict1:\n            dict1[key] = dict1[key] + value\n        else:\n            dict1[key] = value\n    return dict1\n",
        "num_ids": 103
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Your code here\n    # For dictionaries having the same key, take the value from the first dictionary.\n    # If dictionaries having the same key do not have the same value, add the key-value pair to the dictionary.\n    # Return the merged dictionary.\n    merged_dict = dict1.copy()\n    for key,value in dict2.items():\n        if key in merged_dict and merged_dict[key] == value:\n            continue\n        else:\n            merged_dict[key] = value\n    for key,value in dict3.items():\n        if key in merged_dict and merged_dict[key] == value:\n            continue\n        else:\n            merged_dict[key] = value\n    return merged_dict\n",
        "num_ids": 176
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new = dict3.copy()\n    for i in dict2.keys():\n        if i in dict1.keys():\n            new[i] = dict1[i] + dict2[i]\n        else:\n            new[i] = dict2[i]\n    for i in dict1.keys():\n        if i not in dict2.keys():\n            new[i] = dict1[i]\n    return new\n",
        "num_ids": 102
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    d.update(dict2)\n    d.update(dict3)\n    return d\n",
        "num_ids": 33
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_two_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_list(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_one_list(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_one_list_two_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_dict(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_one_dict(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_two_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_dict(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_one_dict_two_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_two_dict_two_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_dict_two_list(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_one_dict_two_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_two_dict_two_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_dict_two_dict(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_one_dict_two_dict_two_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_two_dict_two_dict_two_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_dict_two_dict_two_list(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_one_dict_two_dict_two_dict_two_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_dict_three_list(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_one_dict_three_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_dict_three_dict(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_one_dict_three_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_dict_one_dict(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_three_list_dict(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_two_list_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_list_list(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef merge_dictionaries_one_list_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef merge_dictionaries_three_list_list_dict(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)",
        "num_ids": 21
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n",
        "num_ids": 41
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    d.update(dict2)\n    d.update(dict3)\n    return d",
        "num_ids": 32
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2) and dict1.update(dict3)\n",
        "num_ids": 22
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {**dict1, **dict2, **dict3}\n    return res\n",
        "num_ids": 23
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n",
        "num_ids": 46
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = {}\n    for element in list1:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    return counts\n",
        "num_ids": 49
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        freq[item] = list1.count(item)\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # dict = {0:4,1:3,2:2,3:1}\n    dict = {}\n    for i in range(len(list1)):\n        if list1[i] not in dict:\n            dict[list1[i]] = 1\n        else:\n            dict[list1[i]] += 1\n    return dict\n",
        "num_ids": 84
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq\n",
        "num_ids": 52
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        if ele not in dic:\n            dic[ele] = 1\n        else:\n            dic[ele] += 1\n    return dic\n    \ndef freq_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        dic[ele] = dic.get(ele, 0) + 1\n    return dic\n    \ndef count_by_frequency(list1):\n    '''\n    Write a function to count the number of elements in a list, returned as a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        dic[ele] = dic.get(ele, 0) + 1\n    return dic\n    \ndef count_by_frequency(list1):\n    '''\n    Write a function to count the number of elements in a list, returned as a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        dic[ele] = dic.get(ele, 0) + 1\n    return dic\n    \ndef dict_from_list(list1):\n    '''\n    Write a function to convert a list of elements into a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        dic[ele] = dic.get(ele, 0) + 1\n    return dic\n    \ndef list_from_dict(dict1):\n    '''\n    Write a function to convert a dictionary of elements into a list.\n    '''\n    list1 = []\n    for key, value in dict1.items():\n        for i in range(value):\n            list1.append(key)\n    return list1\n    \ndef sum_dicts(dict1, dict2):\n    '''\n    Write a function to add together two dictionaries.\n    '''\n    sum_dict = dict()\n    for key in dict1:\n        sum_dict[key] = dict1[key] + dict2[key]\n    return sum_dict\n    \ndef dict_from_tuples(tuples):\n    '''\n    Write a function to convert a list of tuples into a dictionary.\n    '''\n    dic = dict()\n    for ele in tuples:\n        dic[ele[0]] = ele[1]\n    return dic\n    \ndef dict_from_tuples(tuples):\n    '''\n    Write a function to convert a list of tuples into a dictionary.\n    '''\n    dic = dict()\n    for ele in tuples:\n        dic[ele[0]] = ele[1]\n    return dic\n    \ndef count_items(list1):\n    '''\n    Write a function to count the number of items in a list, returned as a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        dic[ele] = dic.get(ele, 0) + 1\n    return dic\n    \ndef count_items(list1):\n    '''\n    Write a function to count the number of items in a list, returned as a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        dic[ele] = dic.get(ele, 0) + 1\n    return dic\n    \ndef find_max_by_value(dict1):\n    '''\n    Write a function to find the maximum value in a dictionary, returned as a tuple.\n    '''\n    max_value = 0\n    max_key = None\n    for key, value in dict1.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n    return (max_key, max_value)\n    \ndef find_max_by_value(dict1):\n    '''\n    Write a function to find the maximum value in a dictionary, returned as a tuple.\n    '''\n    max_value = 0\n    max_key = None\n    for key, value in dict1.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n    return (max_key, max_value)\n    \ndef find_max_by_value(dict1):\n    '''\n    Write a function to find the maximum value in a dictionary, returned as a tuple.\n    '''\n    max_value = 0\n    max_key = None\n    for key, value in dict1.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n    return (max_key, max_value)\n    \ndef find_min_by_value(dict1):\n    '''\n    Write a function to find the minimum value in a dictionary, returned as a tuple.\n    '''\n    min_value = 99999999\n    min_key = None\n    for key, value in dict1.items():\n        if value < min_value:\n            min_value = value\n            min_key = key\n    return (min_key, min_value)\n    \ndef find_min_by_value(dict1):\n    '''\n    Write a function to find the minimum value in a dictionary, returned as a tuple.\n    '''\n    min_value = 99999999\n    min_key = None\n    for key, value in dict1.items():\n        if value < min_value:\n            min_value = value\n            min_key = key\n    return (min_key, min_value)\n    \ndef find_min_by_value(dict1):\n    '''\n    Write a function to find the minimum value in a dictionary, returned as a tuple.\n    '''\n    min_value = 99999999\n    min_key = None\n    for key, value in dict1.items():\n        if value < min_value:\n            min_value = value\n            min_key = key\n    return (min_key, min_value)\n    \ndef frequency_count(list1):\n    '''\n    Write a function to count the number of occurrences of each element in a list, returned as a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        if ele in dic:\n            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    return dic\n    \ndef frequency_count(list1):\n    '''\n    Write a function to count the number of occurrences of each element in a list, returned as a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        dic[ele] = dic.get(ele, 0) + 1\n    return dic\n    \ndef frequency_count(list1):\n    '''\n    Write a function to count the number of occurrences of each element in a list, returned as a dictionary.\n    '''\n    dic = dict()\n    for ele in list1:\n        dic[ele] = dic.get(ele, 0) + 1\n    return dic\n    \ndef most_frequent(list1):\n    '''\n    Write a function to find the most frequently occurring element in a list, returned as a tuple.\n    '''\n    dic = frequency_count(list1)\n    max_value = max(dic.values())\n    max_key = [key for key, value in dic.items() if value == max_value]\n    return (max_key, max_value)\n    \ndef most_frequent(list1):\n    '''\n    Write a function to find the most frequently occurring element in a list, returned as a tuple.\n    '''\n    dic = frequency_count(list1)\n    max_value = max(dic.values())\n    max_key = [key for key, value in dic.items() if value == max_value]\n    return (max_key, max_value)\n    \ndef most_frequent(list1):\n    '''\n    Write a function to find the most frequently occurring element in a list, returned as a tuple.\n    '''\n    dic = frequency_count(list1)\n    max_value = max(dic.values())\n    max_key = [key for key, value in dic.items() if value == max_value]\n    return (max_key, max",
        "num_ids": 60
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1 = [1, 2, 2, 1, 2, 3, 3]\n    dict_list = {}\n    for i in list1:\n        if i in dict_list:\n            dict_list[i] += 1\n        else:\n            dict_list[i] = 1\n    return dict_list\nprint(freq_count([1, 2, 2, 1, 2, 3, 3]))\n",
        "num_ids": 99
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n    \ndef my_dict(list1):\n    '''\n    Write a function to get a dictionary with the key as the element in the list and the value as the frequency of that element.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    s = str(N)\n    closest = N\n    for i in range(1,len(s)):\n        new_num = int(s[:i] + s[i-1] + s[i:])\n        if new_num < closest and new_num > N:\n            closest = new_num\n    return closest\n",
        "num_ids": 85
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # First, we check if n is less than the minimum number.\n    if N < 0:\n        return None\n    # If we can get the minimum number, then just return it.\n    elif N <= 10:\n        return 10\n    # Otherwise, we need to do a binary search to find the minimum number.\n    else:\n        # We check if the first half of the numbers are greater than or equal to n,\n        # because then we can return the smallest number in the first half.\n        if binary_search(0, N, N, 10):\n            return 0\n        # Otherwise, we check if the second half of the numbers are smaller than or equal to n,\n        # because then we can return the largest number in the second half.\n        elif binary_search(10, N, N, 20):\n            return 20\n        # Otherwise, we must check both halves.\n        else:\n            low = 0\n            high = 20\n            while low <= high:\n                mid = (low + high) // 2\n                if binary_search(low, mid, N, mid):\n                    return low\n                elif binary_search(mid, high, N, high):\n                    return high\n                else:\n                    low = mid + 1\n                    high = mid - 1\n",
        "num_ids": 292
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N==1:\n        return 0\n    elif N==2:\n        return 1\n    else:\n        max_distance=0\n        for i in range(N-2,0,-1):\n            if N-i<=max_distance:\n                break\n            for j in range(i,N-1):\n                if i*j<=N:\n                    max_distance=max(max_distance,N-i*j)\n                else:\n                    break\n        return max_distance\n",
        "num_ids": 120
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_set = set(range(1,N))\n    for i in range(1,N):\n        if N % i == 0:\n            num_set.discard(i)\n    return min(num_set)\n",
        "num_ids": 56
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    print(math.floor(N/2))\n",
        "num_ids": 18
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #Get numbers from 1-1000\n    nums = range(1, 1001)\n    \n    #Keep track of closest\n    closest = None\n    for num in nums:\n        #Check if num is smaller and if it is smaller than the closest\n        if num < N and abs(N - num) < abs(N - closest):\n            closest = num\n    \n    return closest\n",
        "num_ids": 96
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # if n < 10:\n    #     return n\n",
        "num_ids": 16
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def swap(L, i, j):\n        L[i], L[j] = L[j], L[i]\n",
        "num_ids": 32
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N<0:\n        return -1*(abs(N)%10)\n    else:\n        return N%10\n        \n",
        "num_ids": 35
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    try:\n        N = int(N)\n    except ValueError:\n        raise ValueError('Non-Int passed to closest_num')\n    \n    if N < 10:\n        return N\n    \n    n_str = str(N)\n    delta = float('inf')\n    \n    for i in range(len(n_str)):\n        if n_str[i] == '0':\n            continue\n        \n        for j in range(i):\n            n_str = n_str[:j] + n_str[j+1:]\n            \n            if int(n_str) < N:\n                if int(n_str) > 10:\n                    return int(n_str)\n                if delta > abs(N - int(n_str)):\n                    delta = abs(N - int(n_str))\n                    res = int(n_str)\n        \n        for j in range(i+1, len(n_str)):\n            n_str = n_str[:i] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]\n            \n            if int(n_str) < N:\n                if int(n_str) > 10:\n                    return int(n_str)\n                if delta > abs(N - int(n_str)):\n                    delta = abs(N - int(n_str))\n                    res = int(n_str)\n        \n        return res\n    \n    raise ValueError('Non-int passed to closest_num')\n",
        "num_ids": 376
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for i in list1:\n        if len(i)>length:\n            length=len(i)\n    return length\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    log=[]\n    for i in list1:\n        log.append(len(i))\n    print(\"The length of the longest word is: \",max(log))\n",
        "num_ids": 42
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split()\n    list1 = [len(i) for i in list1]\n    return(max(list1))\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_length=[]\n    for word in list1:\n        word_length.append(len(word))\n    return word_length\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list_len = []\n    for word in list1:\n        list_len.append(len(word))\n    return max(list_len)\n",
        "num_ids": 38
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max1 = 0\n    for i in list1:\n        if len(i) > max1:\n            max1 = len(i)\n    return max1\n",
        "num_ids": 41
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    temp = \"\"\n    max1 = 0\n    for i in list1:\n        if(len(i) > max1):\n            max1 = len(i)\n            temp = i\n    return [temp,max1]\n",
        "num_ids": 56
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max1 = 0\n    for i in list1:\n        if len(i) > max1:\n            max1 = len(i)\n    return max1\n",
        "num_ids": 41
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            \n    print('The length of longest word is:',max_len)\n    return max_len\n",
        "num_ids": 63
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    s = ''.join(list1)\n    s = s.split(' ')\n    max_len = 0\n    for word in s:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "num_ids": 65
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Write your code here\n    if sub_str in str1:\n        return 'YES'\n    else:\n        return 'NO'\n    \n    \ndef merge_intervals(intervals):\n    '''\n    Write a function to merge two given arrays into one. If they are overlapping, the one with the highest start time should be used\n    '''\n    # Write your code here\n    intervals = sorted(intervals, key = lambda x: x[0])\n    out = []\n    for i in intervals:\n        if out and i[0] <= out[-1][1]:\n            out[-1][1] = max(out[-1][1], i[1])\n        else:\n            out.append(i)\n    return out\n    \n    \ndef merge_intervals(intervals):\n    '''\n    Write a function to merge two given arrays into one. If they are overlapping, the one with the highest start time should be used\n    '''\n    # Write your code here\n    intervals = sorted(intervals, key = lambda x: x[0])\n    out = []\n    for i in intervals:\n        if out and i[0] <= out[-1][1]:\n            out[-1][1] = max(out[-1][1], i[1])\n        else:\n            out.append(i)\n    return out\n    \n    \ndef sum_of_intervals(intervals):\n    '''\n    Write a function to find out the sum of overlapping intervals in the given array.\n    '''\n    # Write your code here\n    intervals = sorted(intervals, key = lambda x: x[0])\n    out = []\n    for i in intervals:\n        if out and i[0] <= out[-1][1]:\n            out[-1][1] = max(out[-1][1], i[1])\n        else:\n            out.append(i)\n    return sum([i[1]-i[0] for i in out])\n    \n    \ndef max_interval(intervals):\n    '''\n    Write a function to find the largest number of an array containing the intervals.\n    '''\n    # Write your code here\n    intervals = sorted(intervals, key = lambda x: x[0])\n    out = []\n    for i in intervals:\n        if out and i[0] <= out[-1][1]:\n            out[-1][1] = max(out[-1][1], i[1])\n        else:\n            out.append(i)\n    return len(out)\n    \n    \ndef count_apples_and_oranges(s, t, a, b, apples, oranges):\n    '''\n    Write a function that returns how many apples and oranges you can collect during the visit.\n    '''\n    # Write your code here\n    apples = [apple + a for apple in apples]\n    oranges = [orange + b for orange in oranges]\n    apples = [apple for apple in apples if apple >= s and apple <= t]\n    oranges = [orange for orange in oranges if orange >= s and orange <= t]\n    return len(apples), len(oranges)\n    \n    \ndef remove_duplicates(intervals):\n    '''\n    Write a function to remove the duplicates in an array of intervals.\n    '''\n    # Write your code here\n    intervals = sorted(intervals, key = lambda x: x[0])\n    out = []\n    for i in intervals:\n        if out and i[0] <= out[-1][1]:\n            out[-1][1] = max(out[-1][1], i[1])\n        else:\n            out.append(i)\n    return out\n    \n    \ndef product_of_all(arr, n):\n    '''\n    Write a function to return the product of all the integers in the array.\n    '''\n    # Write your code here\n    product = 1\n    for i in arr:\n        product *= i\n    return product\n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function to remove the duplicates in an array of integers. The function should return the length of the new array after removing the duplicates.\n    '''\n    # Write your code here\n    arr.sort()\n    out = []\n    for i in arr:\n        if out and i == out[-1]:\n            continue\n        out.append(i)\n    return len(out)\n    \n    \ndef lemonade(bill):\n    '''\n    Write a function to determine the bill of the customer in the lemonade stand.\n    '''\n    # Write your code here\n    # Check for the 5$, 10$ and 20$ bills. If any of them are not available then return False\n    if bill[5] >= 1 and bill[10] >= 1:\n        # If the change is greater than 15$ then return True else False\n        if bill[5] + bill[10] + bill[20] < 15:\n            return False\n    elif bill[5] >= 3:\n        if bill[5] + bill[10] < 15:\n            return False\n    else:\n        return False\n    return True\n    \n    \ndef most_frequent(arr):\n    '''\n    Write a function to return the most frequent element in an array.\n    '''\n    # Write your code here\n    # Sort the array\n    arr = sorted(arr)\n    # Initialize the current element and the frequency count.\n    count = 1\n    curr = arr[0]\n    for i in range(1, len(arr)):\n        if curr == arr[i]:\n            count += 1\n        else:\n            # If the current element is not equal to the next element then make curr the next element\n            if curr!= arr[i]:\n                count -= 1\n                if count == 0:\n                    curr = arr[i]\n                    count = 1\n    return curr\n    \n    \ndef max_difference_subset(arr):\n    '''\n    Write a function to find the maximum difference between two elements such that larger element comes after the smaller number.\n    '''\n    # Write your code here\n    # Sort the array and initialize the variables to store the max difference and the current difference.\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    curr_diff = 0\n    # Iterate from the second element of the array to the last element and for every element calculate the difference with the current element.\n    for i in range(1, len(arr)):\n        curr_diff = arr[i] - arr[i-1]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n    \n    \ndef gcd_sum(a, b):\n    '''\n    Write a function to return the sum of two numbers when their greatest common divisor is equal to 1.\n    '''\n    # Write your code here\n    # Find the common divisor of both the numbers.\n    a = abs(a)\n    b = abs(b)\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        rem = a % b\n    else:\n        rem = b % a\n    while rem!= 0:\n        a = b\n        b = rem\n        rem = a % b\n    # Return the sum of both the numbers.\n    return int(b * (a+b))\n    \n    \ndef find_next_index(arr, k):\n    '''\n    Write a function to find the index of the next greatest element of the number k in the array\n    '''\n    # Write your code here\n    # Initialize the first index and the last index of the array.\n    first_index = 0\n    last_index = len(arr) - 1\n    # If the first element is greater than k then return -1.\n    if arr[first_index] > k:\n        return -1\n    # Iterate from the second element to the last element and for every element, if the element is less than k then search in the range from the index to the end of the array.\n    for i in range(1, last_index):\n        if arr[i] <= k:\n            first_index = i\n    # If no such element is found then return -1.\n    if first_index == last_index:\n        return -1\n    return firs",
        "num_ids": 181
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    for i in range(len(str1)):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    subs = [sub.lower() for sub in str1.split()]\n    subs.append(sub_str.lower())\n    subs = set(subs)\n    subs = [sub for sub in subs if sub in str1.lower()]\n",
        "num_ids": 64
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < len(sub_str):\n        return False\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:len(sub_str)+i] == sub_str:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # find sub_str in str1\n    # return true if sub_str is found\n    # return false if sub_str is not found\n    # Do not use built-in functions like split or index\n",
        "num_ids": 49
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i:].find(sub_str) > -1:\n            return str1[i:]\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # return sub_str in str1\n    print('str1=', str1, ', sub_str=', sub_str)\n    if sub_str in str1:\n        return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # base case\n    if n == 1:\n        return True\n    if n == 2 or n == 3:\n        return False\n    \n    if n % 2 == 0:\n        return False\n    \n    if n < 4:\n        return True\n    \n    n_sq = int(n ** 0.5)\n    \n    return is_undulating(n_sq) and is_undulating(n_sq + 1)",
        "num_ids": 104
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = list(map(int, str(n)))\n    if (len(l)%2==0):\n        if(len(l) == 2):\n            return True\n        else:\n            return is_undulating(sum([l[i]*l[i+1] for i in range(0,len(l)-1,2)]))\n    else:\n        return False\n",
        "num_ids": 93
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return not (n & (n+1))\n",
        "num_ids": 14
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    str_num = str(n)\n    n1 = int(str_num[0])\n    n2 = int(str_num[1])\n    n3 = int(str_num[2])\n    n4 = int(str_num[3])\n    \n    if n1 + n3 == n2 + n4:\n        return True\n    else:\n        return False\n",
        "num_ids": 93
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n%2 == 1 and (n+1)%2 == 1) or (n%2 == 0 and (n-1)%2 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Find sum of digits of n.\n    digits_sum = sum([int(digit) for digit in str(n)])\n    \n    # If sum is odd, return true.\n    if digits_sum % 2:\n        return True\n    \n    # If sum is even, find sum of its digits, and so on until 1 is reached.\n    while digits_sum > 1:\n        digits_sum = sum([int(digit) for digit in str(digits_sum)])\n    \n    # If sum is 1, return false.\n    return False\n",
        "num_ids": 133
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num_list = [int(d) for d in str(n)]\n    if len(num_list) == 1:\n        return False\n    elif len(num_list) == 2:\n        if num_list[0]!= num_list[1]:\n            return True\n        return False\n    else:\n        for i in range(0, len(num_list)-1):\n            if num_list[i] == num_list[i+1]:\n                return False\n        return True\n",
        "num_ids": 121
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    d = {}\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            d[i] = i ** 3\n    if n in d:\n        return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (is_odd(n) and is_even(n+1)) or (is_even(n) and is_odd(n-1)):\n        return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n    \ndef fib(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef binary_search(a,b,target):\n    '''\n    Write a function that performs a binary search for a number in a list of \n    numbers. If the number is not found, return None. Otherwise, return the \n    position of the number in the list. \n    '''\n    if len(a) == 0:\n        return None\n    else:\n        mid = len(a)//2\n        if a[mid] == target:\n            return mid\n        else:\n            if target < a[mid]:\n                return binary_search(a[:mid],b,target)\n            else:\n                return binary_search(a[mid+1:],b,target)\n    \ndef list_sum(a):\n    '''\n    Write a function that returns the sum of all the numbers in a list of \n    numbers.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        return a[0] + list_sum(a[1:])\n",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b // 2) ** 2\n    else:\n        return a * power(a, b // 2) ** 2\n",
        "num_ids": 55
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b%2 == 0:\n        return power(a*a,b//2)\n    else:\n        return a * power(a,b//2) * power(a,b//2)\n",
        "num_ids": 72
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == 2:\n        return a**2\n    elif b > 2:\n        return a**b\n    else:\n        return a\n",
        "num_ids": 61
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        if b % 2 == 0:\n            return power(a,b//2) * power(a,b//2)\n        else:\n            return power(a,b//2) * power(a,b//2) * a\n",
        "num_ids": 72
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \nprint(power(5,2))\n",
        "num_ids": 19
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == -1:\n        return 1/a\n",
        "num_ids": 49
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    idx_min = min(test_list, key=itemgetter(1))[0]\n    return idx_min\n",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    #create a new list of just the tuples\n    tuple_list = []\n    for i in test_list:\n        tuple_list.append(i[0])\n",
        "num_ids": 46
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # make a dictionary of the list of tuples. This is much faster than sorting the list first.\n    # it is not necessary to sort the list, since the dictionary will return the smallest value. \n    # Therefore, it is more efficient to make a dictionary than a list of tuples. \n    # if test_list is a list of tuples,\n    # d = {1:(4,5),2: (1,4), 3: (3,4), 4: (1,2), 5: (1,4), 6: (6,5)}\n    # if test_list is a list of dictionaries, \n    # d = {1: {\"a\": 5, \"b\": 4}, 2: {\"a\": 1, \"b\": 4}, 3: {\"a\": 3, \"b\": 4}, 4: {\"a\": 1, \"b\": 2}, 5: {\"a\": 1, \"b\": 4}, 6: {\"a\": 6, \"b\": 5}}\n    d = dict(test_list)\n    # d = {1: {\"a\": 5, \"b\": 4}, 2: {\"a\": 1, \"b\": 4}, 3: {\"a\": 3, \"b\": 4}, 4: {\"a\": 1, \"b\": 2}, 5: {\"a\": 1, \"b\": 4}, 6: {\"a\": 6, \"b\": 5}}\n    # now we have a dictionary of the list of tuples. \n",
        "num_ids": 326
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_so_far = None\n    smallest_index = None\n    for i, val in enumerate(test_list):\n        if smallest_so_far is None or val[1] < smallest_so_far[1]:\n            smallest_so_far = val\n            smallest_index = i\n    return smallest_index\n",
        "num_ids": 82
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return(test_list[0][0])\n",
        "num_ids": 30
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(1)(sorted(test_list,key=itemgetter(1))[0])\n",
        "num_ids": 29
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = [len(i) for i in lst]\n    min_len = min(lst)\n    return min_len\n",
        "num_ids": 35
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lengths = []\n    for l in lst:\n        lengths.append(len(l))\n    return min(lengths)\n",
        "num_ids": 35
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize min length\n    min_len = len(lst[0])\n    # iterate over the list\n    for i in lst:\n        # if the length of a list is less than current min length, update min length\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n",
        "num_ids": 84
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(i) for i in lst])\n",
        "num_ids": 17
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini=len(lst[0])\n    for i in range(0,len(lst)):\n        if len(lst[i])<mini:\n            mini=len(lst[i])\n    return mini\n",
        "num_ids": 56
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < list_length:\n            list_length = len(lst[i])\n    return list_length\n",
        "num_ids": 62
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for i in lst:\n        if len(i) == min(len(i) for i in lst):\n            return len(i)\n",
        "num_ids": 37
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        min_lst_len = len(lst[0])\n        for i in lst:\n            if len(i) < min_lst_len:\n                min_lst_len = len(i)\n        return min_lst_len\n",
        "num_ids": 79
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst.sort(key = len)\n    return len(lst[0])\n",
        "num_ids": 23
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    pass #delete this line and replace with your code here\n",
        "num_ids": 15
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i**2 == n:\n                continue\n            divisors.append(n//i)\n    return len(divisors)\n",
        "num_ids": 80
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n",
        "num_ids": 50
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            div += 2\n    if n**0.5 == int(n**0.5):\n        div -= 1\n    return div\n",
        "num_ids": 66
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if(n%i==0):\n            count+=1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        divisors_list = []\n        for i in range(1,n+1):\n            if n % i == 0:\n                divisors_list.append(i)\n        return len(divisors_list)\n",
        "num_ids": 71
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    factors = [x for x in range(1, n//2+1) if n % x == 0]\n    return len(factors)\n",
        "num_ids": 37
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    i = 1\n    while(i*i <= n):\n        if n % i == 0:\n            count = 0\n            while(n % i == 0):\n                count += 1\n                n = n//i\n            print(i,count)\n        i += 1\n    if n > 1:\n        print(i,1)\nn = int(input())\ndivisor(n)",
        "num_ids": 105
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1,n):\n        if n%i == 0:\n            div+=1\n    return div\n",
        "num_ids": 36
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n    \n    \ndef frequency_lists_nested(list2):\n    '''\n    Write a function to find frequency of each element in a nested list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for element in list2:\n        for i in element:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 69
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if element not in frequency:\n            frequency[element] = 1\n        else:\n            frequency[element] += 1\n    return frequency\n",
        "num_ids": 47
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        dictionary[element] = list1.count(element)\n    return dictionary\n",
        "num_ids": 35
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = dict()\n    for i in list1:\n        if i not in dictionary:\n            dictionary[i] = list1.count(i)\n    return dictionary\nprint(frequency_lists([[1,2,3],['a',1,2,3,'a'],['a','a','b','c']]))\n",
        "num_ids": 81
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x in freq:\n            freq[x]+=1\n        else:\n            freq[x] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = [[10, 20, 30, 40], [30, 20, 10], [40, 40, 20, 20, 10, 10], [50], [20, 10]]\n    list1_freq = {}\n    for i in list1:\n        for j in i:\n            if j in list1_freq:\n                list1_freq[j] = list1_freq[j] + 1\n            else:\n                list1_freq[j] = 1\n    print(list1_freq)\n",
        "num_ids": 126
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    unique_values = []\n    for lst in list1:\n        unique_values.extend(lst)\n    unique_values = list(set(unique_values))\n    # print(unique_values)\n    \n    dict1 = {}\n    for value in unique_values:\n        count = 0\n        for lst in list1:\n            if value in lst:\n                count += 1\n        dict1[value] = count\n    return dict1\n",
        "num_ids": 111
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_flatten = []\n    for item in list1:\n        list_flatten.extend(item)\n",
        "num_ids": 30
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    new_list = []\n    for items in list1:\n        if items not in new_list:\n            new_list.append(items)\n    for items in new_list:\n        count = 0\n        for x in list1:\n            if items == x:\n                count += 1\n        print(items, count)\n",
        "num_ids": 79
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    ans = 1\n    for num in numbers:\n        ans *= num\n",
        "num_ids": 20
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_list = [str(number) for number in numbers]\n    list_len = len(numbers_list)\n    product = int(''.join(numbers_list))\n    print(f'{product} / {list_len} = {product/list_len}')\n",
        "num_ids": 70
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total / len(numbers)\n    \n    \ndef main():\n    num_list = [1,2,3,4,5,6,7,8,9,10]\n    print(multiply_num(num_list))\n    \n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 97
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product = product * i\n    return product / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # YOUR CODE HERE\n",
        "num_ids": 8
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #list to be multiplied\n    numbers_list = numbers\n    #loop to multiply the elements in the list\n    for i in range(len(numbers_list)):\n        numbers_list[i] = numbers_list[i]*(i+1)\n    #divide with the length of the list\n    number = numbers_list[-1]/len(numbers_list)\n    #returning the result\n    return number\n",
        "num_ids": 106
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / length\n",
        "num_ids": 35
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\") \n",
        "num_ids": 17
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = int(n)\n    if n == 0:\n        return \"0\"\n    \n    result = \"\"\n",
        "num_ids": 30
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\") \n",
        "num_ids": 17
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).lstrip(\"0b\")\n",
        "num_ids": 15
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace('0b','')\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\",\"\") \n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s=str(num)\n    length=len(s)\n    s=s+\"0\"\n    len_of_new_s=len(s)\n    a=[]\n    for i in range(len_of_new_s):\n        if s[i]==s[len_of_new_s-i-1]:\n            a.append(s[i])\n        else:\n            a.append(s[i])\n            a.append(s[len_of_new_s-i-1])\n            break\n    a.pop(0)\n    b=''\n    for i in range(len(a)):\n        b=b+a[i]\n    b=int(b)\n    if b<num:\n        return b\n    else:\n        return -1\n",
        "num_ids": 193
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if num_str[i]!= \"9\":\n            break\n    if i == len(num_str)-1:\n        return -1\n    num_str = num_str[:i] + str(int(num_str[i]) + 1) + num_str[i+1:]\n    #print(num_str)\n    # if num_str == num_str[::-1]:\n    #     return num_str\n    # else:\n    #     while num_str!= num_str[::-1]:\n    #         num_str = str(int(num_str) + 1)\n    #         print(num_str)\n    #     return num_str\n    for i in range(10):\n        if str(i) + str(i) == num_str[::-1]:\n            return int(num_str)\n    return -1\n",
        "num_ids": 234
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num) and num < sys.maxsize:\n        return num + 1\n",
        "num_ids": 27
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return int(num)\n    elif len(num) == 2:\n        if int(num) % 11 == 0:\n            return int(num) + 1\n        else:\n            return int(num)\n    \n    length = len(num) - 1\n    for i in range(length):\n        if num[i]!= num[length - i]:\n            if num[i + 1] == num[length - i - 1]:\n                #print(i, num[i], num[length - i - 1], num[length - i])\n                return int(num[:i] + num[i + 1:] + num[i] + num[length - i])\n            else:\n                #print(i, num[i], num[length - i - 1], num[length - i])\n                return int(num[:i] + num[i + 1:] + num[i] + num[length - i - 1] + num[length - i])\n    return int(num + num[0])\n",
        "num_ids": 256
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # num = int(input('Enter your number to find the next smallest palindrome: '))\n    num_str = str(num)\n    print('num_str ='+ num_str)\n    if num_str[0] == '-':\n        num_str = num_str[1:]\n        if int(num_str) == 0:\n            return 1\n    # num_str = num_str.lstrip('0')\n    # if num_str == '0':\n    #     return 1\n    # if len(num_str) == 1 and int(num_str) >= 10:\n    #     return int(num_str) + 1\n    # if len(num_str) > 1:\n    #     if int(num_str) >= 10:\n    #         return int(num_str[0]) + 10 * int(num_str[1]) + 1\n    #     else:\n    #         return int(num_str) + 1\n    if len(num_str) == 1 and int(num_str) >= 10:\n        return int(num_str) + 1\n    if len(num_str) > 1:\n        if int(num_str) >= 10:\n            return int(num_str[0]) + 10 * int(num_str[1]) + 1\n        else:\n            return int(num_str) + 1\n",
        "num_ids": 325
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import math\n    num = str(num)\n    leng = len(num)\n    if leng % 2 == 0:\n        return int(num[:leng // 2] + num[:leng // 2 - 1:-1])\n    else:\n        return int(num[:(leng // 2) + 1] + num[:(leng // 2)])\n",
        "num_ids": 88
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num=str(num)\n    num_len=len(num)\n    if num_len>1:\n        if num[0]=='9':\n            return -1\n        elif num[1]=='9':\n            return int(num[0])+1\n        else:\n            return int(num[0])+1\n    else:\n        return -1\n",
        "num_ids": 92
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    return int(num + num[::-1][1:]) if num!= str(num)[::-1] else -1\n",
        "num_ids": 41
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Strip out all non-digits and convert to lowercase.\n    # num_stripped = int(str(num).strip('1234567890'))\n    num_stripped = int(num)\n    \n    # Odd-length palindromes have an extra digit\n    # to make the number odd.\n    if len(str(num_stripped)) % 2 == 0:\n        num_stripped = num_stripped * 10\n        \n    # Add 1 to all digits.\n    num_stripped = num_stripped + 1\n    \n    # Loop through each digit, and check if the number is smaller than the next palindrome.\n    for i in range(len(str(num_stripped)) - 1, -1, -1):\n        if num_stripped < next_palindrome(i, num_stripped):\n            return num_stripped\n        num_stripped = num_stripped // 10\n        \n    return -1\n    \n    \ndef next_largest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    # Strip out all non-digits and convert to lowercase.\n    num_stripped = int(str(num).strip('1234567890'))\n    \n    # Odd-length palindromes have an extra digit\n    # to make the number odd.\n    if len(str(num_stripped)) % 2 == 0:\n        num_stripped = num_stripped * 10\n        \n    # Add 1 to all digits.\n    num_stripped = num_stripped + 1\n    \n    # Loop through each digit, and check if the number is larger than the next palindrome.\n    for i in range(len(str(num_stripped)) - 1, -1, -1):\n        if num_stripped > next_palindrome(i, num_stripped):\n            return num_stripped\n        num_stripped = num_stripped // 10\n        \n    return -1\n    \n",
        "num_ids": 217
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    kth_element_recursive(arr, k, 0, n-1)\n",
        "num_ids": 30
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 1 or k > n:\n        return None\n    def find_kth_element(arr, k):\n        if k == 1:\n            return min(arr)\n        elif k == n:\n            return max(arr)\n        else:\n            pivot = partition(arr)\n            if pivot == k - 1:\n                return arr[pivot]\n            elif pivot > k - 1:\n                return find_kth_element(arr[0:pivot], k)\n            else:\n                return find_kth_element(arr[pivot+1:], k-pivot-1)\n    return find_kth_element(arr, k)\n",
        "num_ids": 170
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return -1\n    left = 0\n    right = n - 1\n    while True:\n        index = partition(arr, left, right)\n        if index == k - 1:\n            return arr[index]\n        if index < k - 1:\n            left = index + 1\n        else:\n            right = index - 1\n    return -1\n",
        "num_ids": 103
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # return arr[k-1]\n    \n    \n    def partition(arr, l, h):\n        pivot = arr[h]\n        i = l\n        \n        for j in range(l, h):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n                \n        arr[i], arr[h] = arr[h], arr[i]\n        return i\n        \n    def kth_element_helper(arr, l, h, k):\n        if l >= h:\n            return\n        \n        pivot_index = partition(arr, l, h)\n        \n        if pivot_index == k - 1:\n            return\n        elif k > pivot_index + 1:\n            return kth_element_helper(arr, pivot_index + 1, h, k)\n        else:\n            return kth_element_helper(arr, l, pivot_index - 1, k)\n            \n    return kth_element_helper(arr, 0, len(arr) - 1, k)\n    \n",
        "num_ids": 267
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return 'Invalid Input'\n",
        "num_ids": 19
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[len(arr)-k+1]\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, l, r):\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] <= arr[r]:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[r] = arr[r], arr[i+1]\n        return i+1\n",
        "num_ids": 96
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '')\n",
        "num_ids": 15
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return ''.join(word).title()\n",
        "num_ids": 23
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + ''.join([word.capitalize() for word in word[1:]])\n",
        "num_ids": 38
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    if word == '':\n        return word\n    else:\n        for i in range(len(word)):\n            if i == 0:\n                camel += word[i].upper()\n            elif word[i]!= '_':\n                camel += word[i].capitalize()\n            else:\n                camel += word[i]\n    return camel\n",
        "num_ids": 95
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = word[0]\n    rest_letters = word[1:]\n    rest_camel = snake_to_camel(rest_letters)\n    return first_letter + rest_camel\n",
        "num_ids": 51
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = word.split('_')\n    for i in range(0, len(s)):\n        if len(s[i]) > 1:\n            s[i] = s[i].capitalize()\n    s = ''.join(s)\n    return s\n",
        "num_ids": 66
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    if word:\n        for x in word.split('_'):\n            if x:\n                camel_case += x.capitalize()\n    return camel_case\n",
        "num_ids": 50
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n",
        "num_ids": 18
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = word.split('_')\n    new_word = ''\n    for i in range(len(word_list)):\n        new_word += word_list[i].capitalize() if i == 0 else word_list[i]\n    return new_word\n",
        "num_ids": 67
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = ''.join(word.split('_'))\n    return word[0].upper() + word[1:].lower()\n",
        "num_ids": 34
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if check_eulerian_num(n, m, i, j):\n                count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        temp = n\n        n = m\n        m = temp\n    # Initializing an empty array to store the subarrays\n    subarrays = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            subarrays.append(i)\n    # Initializing an empty array to store the subarrays with distinct elements\n    subarrays_distinct = []\n    for i in range(1, m + 1):\n        if m % i == 0 and i not in subarrays:\n            subarrays_distinct.append(i)\n    for i in range(len(subarrays_distinct)):\n        if subarrays_distinct[i] == n:\n            return 0\n    subarrays_distinct_len = len(subarrays_distinct)\n    # If number of distinct elements is less than the number of subarrays\n    if subarrays_distinct_len < len(subarrays):\n        return 0\n    for i in range(subarrays_distinct_len):\n        if (subarrays_distinct[i] / subarrays[i])!= int(subarrays_distinct[i] / subarrays[i]):\n            return 0\n    return 1\n",
        "num_ids": 306
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return 0\n    elif n == m:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n",
        "num_ids": 59
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n >= m:\n        return 0\n    if n == 0:\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n",
        "num_ids": 56
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # create a dictionary that stores the value of a(n, m)\n    # for each m\n    a_dict = {'1':2}\n    for m in range(2, m+1):\n        if m <= n:\n            a_dict[str(m)] = a_dict[str(m-1)] + a_dict[str(m-2)]\n        else:\n            a_dict[str(m)] = a_dict[str(m-1)]\n    # return the value of a(n, m)\n    return a_dict[str(m)]\n",
        "num_ids": 138
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    l = []\n    for i in range(n):\n        l.append([0] * m)\n    \n    l[0][0] = 1\n    for i in range(1, n):\n        l[i][0] = 1\n    for i in range(1, m):\n        l[0][i] = 1\n    \n    for i in range(1, n):\n        for j in range(1, m):\n            l[i][j] = l[i - 1][j] + l[i][j - 1]\n    \n    return l[n - 1][m - 1]\n",
        "num_ids": 146
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        n, m = m, n\n    if m == 0:\n        return 1\n    if m == 1:\n        return 0\n    if m%2 == 1:\n        return (m-1)*(m+1)*eulerian_num(n, m-1) - eulerian_num(n, m-2)\n    else:\n        return m*eulerian_num(n, m-1) + eulerian_num(n, m-2)\n",
        "num_ids": 121
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 0\n    elif n == 1 and m == 1:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "num_ids": 73
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return (2*n-1)\n    elif n > m:\n        return (2*n*(2*n-1)+m*(n-1))\n    else:\n        return (n*(2*n-1)+m*(n-1))\n",
        "num_ids": 73
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return sum(1 if n % m == 0 else 0 for n in range(1, n*m + 1))\n",
        "num_ids": 29
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "num_ids": 41
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # base case: if there are no sublists, then there is nothing to sort\n    if not input_list:\n        return []\n    \n    # recursive case\n    else:\n        # initialize two variables: the head and tail of the sublist to be sorted\n        # use a for loop to iterate through all the sublists\n        for sublist in input_list:\n            # if the sublist is empty, then don't do anything\n            if not sublist:\n                continue\n            else:\n                # otherwise, initialize variables for the head and tail\n                head = sublist[0]\n                tail = sublist[1:]\n                # sort the sublist and return\n                return [head] + sort_sublists(tail)\n        \n        \ndef is_palindrome(word):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    # base case: if the word is of length 1, then it is a palindrome\n    if len(word) == 1:\n        return True\n    \n    # recursive case\n    else:\n        # initialize variables for the head and tail of the string to be checked\n        head = word[0]\n        tail = word[1:]\n        # return whether the string is palindrome or not\n        return head == tail and is_palindrome(tail)\n",
        "num_ids": 108
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n",
        "num_ids": 54
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in input_list:\n        sorted_list = sorted(i)\n        output_list.append(sorted_list)\n    return output_list\n",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Check for the base case.\n    if len(input_list) == 1:\n        return input_list\n",
        "num_ids": 29
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate through the list, sort each sublist\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "num_ids": 38
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n",
        "num_ids": 54
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list.sort()\n    return input_list\n",
        "num_ids": 16
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n        \n",
        "num_ids": 21
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    input_list.sort(key=len, reverse=True)\n    \n    return input_list\n    \ndef get_max_str_len(input_list):\n    '''\n    Write a function to return the length of the longest string in a given list of lists.\n    '''\n    \n    max_length = 0\n    \n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    \n    return max_length\n    \ndef get_longest_str_len(input_list):\n    '''\n    Write a function to return the length of the longest string in a given list of lists.\n    '''\n    \n    max_length = 0\n    \n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    \n    return max_length\n    \ndef str_to_int(input_list):\n    '''\n    Write a function that accepts a list of strings as input and returns a list of integers as output.\n    '''\n    \n    output_list = []\n    \n    for str in input_list:\n        output_list.append(int(str))\n    \n    return output_list\n    \ndef str_to_int_list(input_list):\n    '''\n    Write a function that accepts a list of strings as input and returns a list of integers as output.\n    '''\n    \n    output_list = []\n    \n    for str in input_list:\n        output_list.append(int(str))\n    \n    return output_list\n    \ndef parse_input(input_list):\n    '''\n    Write a function that accepts a list of strings as input and returns a list of integers as output.\n    '''\n    \n    output_list = []\n    \n    for str in input_list:\n        if ',' in str:\n            output_list.append(int(str.split(',')[0]))\n        else:\n            output_list.append(int(str))\n    \n    return output_list\n    \ndef convert_list_of_strings(input_list):\n    '''\n    Write a function that accepts a list of strings as input and returns a list of integers as output.\n    '''\n    \n    output_list = []\n    \n    for str in input_list:\n        if ',' in str:\n            output_list.append(int(str.split(',')[0]))\n        else:\n            output_list.append(int(str))\n    \n    return output_list\n    \ndef get_sum_of_ints(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the sum of all elements in the list as output.\n    '''\n    \n    sum = 0\n    \n    for int in input_list:\n        sum += int\n    \n    return sum\n    \ndef get_sum_of_ints_list(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the sum of all elements in the list as output.\n    '''\n    \n    sum = 0\n    \n    for int in input_list:\n        sum += int\n    \n    return sum\n    \ndef get_average_of_ints(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the average of all elements in the list as output.\n    '''\n    \n    return get_sum_of_ints(input_list) / len(input_list)\n    \ndef get_average_of_ints_list(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the average of all elements in the list as output.\n    '''\n    \n    return get_sum_of_ints(input_list) / len(input_list)\n    \ndef find_max_int_in_list(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the maximum value in the list as output.\n    '''\n    \n    max_int = input_list[0]\n    \n    for int in input_list:\n        if int > max_int:\n            max_int = int\n    \n    return max_int\n    \ndef find_max_int_in_list_2(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the maximum value in the list as output.\n    '''\n    \n    max_int = input_list[0]\n    \n    for i in range(len(input_list) - 1):\n        if input_list[i + 1] > input_list[i]:\n            max_int = input_list[i + 1]\n    \n    return max_int\n    \ndef find_min_int_in_list(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the minimum value in the list as output.\n    '''\n    \n    min_int = input_list[0]\n    \n    for int in input_list:\n        if int < min_int:\n            min_int = int\n    \n    return min_int\n    \ndef find_min_int_in_list_2(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the minimum value in the list as output.\n    '''\n    \n    min_int = input_list[0]\n    \n    for i in range(len(input_list) - 1):\n        if input_list[i + 1] < input_list[i]:\n            min_int = input_list[i + 1]\n    \n    return min_int\n    \ndef add_one(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the list of integers as output.\n    '''\n    \n    output_list = []\n    \n    for int in input_list:\n        output_list.append(int + 1)\n    \n    return output_list\n    \ndef add_one_list(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the list of integers as output.\n    '''\n    \n    output_list = []\n    \n    for int in input_list:\n        output_list.append(int + 1)\n    \n    return output_list\n    \ndef multiply_list(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the list of integers as output.\n    '''\n    \n    output_list = []\n    \n    for int in input_list:\n        output_list.append(int * input_list[0])\n    \n    return output_list\n    \ndef multiply_list_2(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the list of integers as output.\n    '''\n    \n    output_list = []\n    \n    for i in range(len(input_list)):\n        output_list.append(input_list[0] * input_list[i])\n    \n    return output_list\n    \ndef remove_first_and_last(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the list of integers as output.\n    '''\n    \n    del input_list[0]\n    del input_list[-1]\n    \n    return input_list\n    \ndef remove_first_and_last_list(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the list of integers as output.\n    '''\n    \n    del input_list[0]\n    del input_list[-1]\n    \n    return input_list\n    \ndef replace_first(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the list of integers as output.\n    '''\n    \n    input_list[0] = 0\n    \n    return input_list\n    \ndef replace_first_list(input_list):\n    '''\n    Write a function that accepts a list of integers as input and returns the list of integers as output.\n    '''\n    \n    input_list[0] = 0\n    \n    return input_list\n    \nde",
        "num_ids": 25
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in range(len(lst)):\n        if type(lst[i])==bool:\n            count+=1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count = count + 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if bool(i):\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for x in lst:\n        if type(x) is bool:\n            if x == True:\n                counter += 1\n    return counter\n",
        "num_ids": 41
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for x in lst if x)\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n",
        "num_ids": 28
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    #return list(test_tup) + test_list\n    \n    #comprehension\n    #return list(test_tup) + [i for i in test_list]\n",
        "num_ids": 49
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return [test_list, test_tup]\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    for element in test_list:\n        test_tup = test_tup + (element,)\n    return test_tup\n    \ndef add_tuples(test_tup, test_list):\n    '''\n    Write a function to append the given tuples to the given list.\n    '''\n    print(test_tup)\n    print(test_list)\n    for element in test_tup:\n        test_list = test_list + (element,)\n    return test_list\n    \ndef mutate_list(test_list):\n    '''\n    Write a function to mutate the list in place, i.e. it should not create a new list.\n    '''\n    print(test_list)\n    test_list[0] = test_list[0] + 1\n    return test_list\n    \ndef concatenate_list(test_list):\n    '''\n    Write a function to concatenate the list in place, i.e. it should not create a new list.\n    '''\n    print(test_list)\n    test_list.append(0)\n    return test_list\n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse the list in place, i.e. it should not create a new list.\n    '''\n    print(test_list)\n    test_list.reverse()\n    return test_list\n    \ndef sum_list(test_list):\n    '''\n    Write a function to sum the list in place, i.e. it should not create a new list.\n    '''\n    print(test_list)\n    test_list[0] = test_list[0] + 1\n    return test_list\n    \ndef extend_list(test_list):\n    '''\n    Write a function to extend the list in place, i.e. it should not create a new list.\n    '''\n    print(test_list)\n    test_list.append(0)\n    return test_list\n    \ndef sum_tuples(test_tup):\n    '''\n    Write a function to sum the tuples in place, i.e. it should not create a new tuple.\n    '''\n    print(test_tup)\n    test_tup = (test_tup[0] + 1, test_tup[1] + 2, test_tup[2] + 3)\n    return test_tup\n    \ndef multiply_tuples(test_tup):\n    '''\n    Write a function to multiply the tuples in place, i.e. it should not create a new tuple.\n    '''\n    print(test_tup)\n    test_tup = (test_tup[0] * 2, test_tup[1] * 3, test_tup[2] * 4)\n    return test_tup\n    \ndef flip_tuple(test_tup):\n    '''\n    Write a function to flip the tuples in place, i.e. it should not create a new tuple.\n    '''\n    print(test_tup)\n    test_tup = (test_tup[1], test_tup[0])\n    return test_tup\n    \ndef remove_item(test_list):\n    '''\n    Write a function to remove the item in the list in place, i.e. it should not create a new list.\n    '''\n    print(test_list)\n    test_list.remove(0)\n    return test_list\n    \ndef remove_tuple(test_tup):\n    '''\n    Write a function to remove the item in the tuple in place, i.e. it should not create a new tuple.\n    '''\n    print(test_tup)\n    test_tup = (test_tup[0], test_tup[1])\n    return test_tup\n    \ndef remove_list(test_list):\n    '''\n    Write a function to remove the list in place, i.e. it should not create a new list.\n    '''\n    print(test_list)\n    test_list = []\n    return test_list\n    \ndef remove_set(test_set):\n    '''\n    Write a function to remove the set in place, i.e. it should not create a new set.\n    '''\n    print(test_set)\n    test_set = {0}\n    return test_set\n    \ndef remove_dict(test_dict):\n    '''\n    Write a function to remove the dictionary in place, i.e. it should not create a new dictionary.\n    '''\n    print(test_dict)\n    del test_dict[0]\n    return test_dict\n    \ndef remove_slice(test_slice):\n    '''\n    Write a function to remove the slice in place, i.e. it should not create a new slice.\n    '''\n    print(test_slice)\n    del test_slice[0:1]\n    return test_slice\n    \ndef remove_object(test_obj):\n    '''\n    Write a function to remove the object in place, i.e. it should not create a new object.\n    '''\n    print(test_obj)\n    del test_obj\n    return\n    ",
        "num_ids": 20
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(\"Python\")\n    test_tup.append(\"Python\")\n    return test_list, test_tup\n",
        "num_ids": 34
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append((\"Zoom\", \"ISZ-0118\"))\n    test_tup = test_tup + (\"Zoom\", \"ISZ-0118\")\n",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for x in test_list:\n        new_list.append(x)\n    \n    for y in test_tup:\n        y = y + tuple(new_list)\n",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list, )\n    return test_tup\n",
        "num_ids": 27
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    lst=[0]*(len(num1)+len(num2)+len(num3))\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            lst[i+j+k]=num1[i]\n            i+=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            lst[i+j+k]=num2[j]\n            j+=1\n        else:\n            lst[i+j+k]=num3[k]\n            k+=1\n    return lst\ndef merge_sorted_list_v2(num1,num2,num3):\n    lst=[0]*(len(num1)+len(num2)+len(num3))\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            lst[i+j+k]=num1[i]\n            i+=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            lst[i+j+k]=num2[j]\n            j+=1\n        else:\n            lst[i+j+k]=num3[k]\n            k+=1\n    while i<len(num1):\n        lst[i+j+k]=num1[i]\n        i+=1\n    while j<len(num2):\n        lst[i+j+k]=num2[j]\n        j+=1\n    while k<len(num3):\n        lst[i+j+k]=num3[k]\n        k+=1\n    return lst\ndef heap_sort(lst):\n    heapq.heapify(lst)\n    sorted_list=[]\n    while len(lst)>0:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list\ndef heap_sort_v2(lst):\n    heapq.heapify(lst)\n    return [heapq.heappop(lst) for i in range(len(lst))]\ndef rearrange_digits(input_list):\n    '''\n    Rearrange Array Elements so as to form two number such that their sum is maximum.\n    '''\n    if len(input_list)<2:\n        return None\n    else:\n        new_list=merge_sorted_list(input_list[:len(input_list)//2],input_list[len(input_list)//2:])\n        left_max=0\n        right_max=0\n        for i in range(len(input_list)//2):\n            left_max=max(left_max,new_list[i])\n        for i in range(len(input_list)//2,len(input_list)):\n            right_max=max(right_max,new_list[i])\n        return [left_max,right_max]\ndef rearrange_digits_v2(input_list):\n    if len(input_list)<2:\n        return None\n    else:\n        lst=[]\n        for i in range(len(input_list)):\n            lst.append((input_list[i],i))\n        lst=heapq.nlargest(len(input_list)//2,lst)\n        left_max=0\n        right_max=0\n        for i in range(len(input_list)//2):\n            left_max=max(left_max,lst[i][0])\n        for i in range(len(input_list)//2,len(input_list)):\n            right_max=max(right_max,lst[i][0])\n        return [left_max,right_max]\ndef next_greater_element(input_list):\n    '''\n    Given a list of elements, arrange the list in such a way that the list is arranged in strictly increasing order.\n    '''\n    sorted_list=sorted(input_list)\n    next_greater=[]\n    for i in range(len(sorted_list)):\n        next_greater.append(-1)\n    for i in range(len(sorted_list)):\n        if sorted_list[i]==input_list[i]:\n            continue\n        else:\n            for j in range(i+1,len(sorted_list)):\n                if sorted_list[j]>sorted_list[i]:\n                    next_greater[i]=sorted_list[j]\n                    break\n    return next_greater\ndef next_greater_element_v2(input_list):\n    sorted_list=sorted(input_list)\n    next_greater=[]\n    for i in range(len(sorted_list)):\n        next_greater.append(-1)\n    for i in range(len(sorted_list)-1,-1,-1):\n        if sorted_list[i]==input_list[i]:\n            continue\n        else:\n            for j in range(len(sorted_list)-1,i,-1):\n                if sorted_list[j]>sorted_list[i]:\n                    next_greater[i]=sorted_list[j]\n                    break\n    return next_greater\ndef reverse_number(input_num):\n    '''\n    Write a function that reverses the digits of an integer\n    '''\n    num=0\n    while input_num>0:\n        remainder=input_num%10\n        input_num=input_num//10\n        num=num*10+remainder\n    return num\ndef next_greater_element_v3(input_list):\n    '''\n    Given a list of elements, arrange the list in such a way that the list is arranged in strictly increasing order.\n    '''\n    sorted_list=sorted(input_list)\n    next_greater=[]\n    for i in range(len(sorted_list)):\n        next_greater.append(-1)\n    for i in range(len(sorted_list)):\n        if sorted_list[i]==input_list[i]:\n            continue\n        else:\n            for j in range(i+1,len(sorted_list)):\n                if sorted_list[j]>sorted_list[i]:\n                    next_greater[i]=sorted_list[j]\n                    break\n    return next_greater\ndef is_k_present(k,input_list):\n    '''\n    Given an unsorted list of integers and a number \u2018k\u2019,\n    determine whether \u2018k\u2019 is present in the list or not.\n    '''\n    for i in range(len(input_list)):\n        if input_list[i]==k:\n            return True\n    return False\ndef search_rotated_array(nums,target):\n    '''\n    A sorted array is rotated at some unknown point.\n    Find the minimum element in it.\n    You can assume that the array does not have any duplicates.\n    '''\n    if len(nums)==1:\n        if nums[0]==target:\n            return 0\n        else:\n            return -1\n    l=0\n    r=len(nums)-1\n    while l<=r:\n        mid=(l+r)//2\n        if nums[mid]==target:\n            return mid\n        if nums[mid]>nums[r]:\n            if nums[l]<=target and target<nums[mid]:\n                r=mid-1\n            else:\n                l=mid+1\n        elif nums[mid]<nums[r]:\n            if nums[mid]<target and target<=nums[r]:\n                l=mid+1\n            else:\n                r=mid-1\n        elif nums[mid]==num",
        "num_ids": 198
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_1=sorted(num1)\n    list_2=sorted(num2)\n    list_3=sorted(num3)\n    result=[]\n    i=0\n    j=0\n    k=0\n    while i<len(list_1) and j<len(list_2) and k<len(list_3):\n        if list_1[i]<list_2[j] and list_1[i]<list_3[k]:\n            result.append(list_1[i])\n            i+=1\n        elif list_2[j]<list_1[i] and list_2[j]<list_3[k]:\n            result.append(list_2[j])\n            j+=1\n        elif list_3[k]<list_1[i] and list_3[k]<list_2[j]:\n            result.append(list_3[k])\n            k+=1\n    result+=list_1[i:]+list_2[j:]+list_3[k:]\n    return result\n",
        "num_ids": 258
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    nums = []\n    nums.append(num1)\n    nums.append(num2)\n    nums.append(num3)\n    # nums = nums.sort()\n    # nums = sorted(nums)\n    nums.sort()\n    return nums\n",
        "num_ids": 72
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = [0]*(len(num1) + len(num2) + len(num3))\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            res[i+j+k] = num1[i]\n            i+=1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            res[i+j+k] = num2[j]\n            j+=1\n        elif num3[k] < num1[i] and num3[k] < num2[j]:\n            res[i+j+k] = num3[k]\n            k+=1\n    if i < len(num1):\n        for m in range(i,len(num1)):\n            res[i+j+k] = num1[m]\n            i+=1\n    if j < len(num2):\n        for m in range(j,len(num2)):\n            res[i+j+k] = num2[m]\n            j+=1\n    if k < len(num3):\n        for m in range(k,len(num3)):\n            res[i+j+k] = num3[m]\n            k+=1\n    return res\n",
        "num_ids": 354
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=[]\n    l2=[]\n    l3=[]\n    # l1.append(num1)\n    # l1.append(num2)\n    # l1.append(num3)\n    # num1.extend(num2)\n    # num1.extend(num3)\n    # print(num1)\n    l1.append(num1)\n    l1.append(num2)\n    l1.append(num3)\n    l1.sort()\n    # print(l1)\n    l2.append(l1[0])\n    l2.append(l1[1])\n    l2.append(l1[2])\n    print(l2)\n    l2.sort()\n    print(l2)\n    l3.append(l2[0])\n    l3.append(l2[1])\n    l3.append(l2[2])\n    print(l3)\n    return l3\n",
        "num_ids": 235
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            l.append(num1[i])\n            i+=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            l.append(num2[j])\n            j+=1\n        elif num3[k]<num1[i] and num3[k]<num2[j]:\n            l.append(num3[k])\n            k+=1\n    if i<len(num1):\n        l+=num1[i:]\n    if j<len(num2):\n        l+=num2[j:]\n    if k<len(num3):\n        l+=num3[k:]\n    return l\n",
        "num_ids": 237
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            list.append(num1[i])\n            i+=1\n        elif num2[j] < num3[k]:\n            list.append(num2[j])\n            j+=1\n        else:\n            list.append(num3[k])\n            k+=1\n    if i < len(num1):\n        list.extend(num1[i:])\n    if j < len(num2):\n        list.extend(num2[j:])\n    if k < len(num3):\n        list.extend(num3[k:])\n    return list\n",
        "num_ids": 202
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap=[]\n    merged_list=[]\n    num1=num1[::-1]\n    num2=num2[::-1]\n    num3=num3[::-1]\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while len(num1)>0 and len(num2)>0 and len(num3)>0:\n        heapq.heappush(heap,(heapq.heappop(num1),heapq.heappop(num2),heapq.heappop(num3)))\n    for i in range(len(heap)):\n        merged_list.append(heapq.heappop(heap)[2])\n    return merged_list[::-1]\n    \ndef make_squares(s):\n    '''\n    Write a function that takes a list of numbers and returns a new list with each number squared.\n    '''\n    squared_list=[]\n    for i in s:\n        squared_list.append(i**2)\n    return squared_list\n    \ndef remove_positives(nums):\n    '''\n    Write a function to remove the positive numbers from a list and return the result\n    '''\n    non_positive_list=[]\n    for i in nums:\n        if i<0:\n            non_positive_list.append(i)\n    return non_positive_list\n    \ndef remove_from_list(nums):\n    '''\n    Write a function to remove all instances of a given value in the list. The function should return the new list.\n    '''\n    nums.remove(3)\n    return nums\n    \ndef sum_of_odd_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the odd numbers.\n    '''\n    s=0\n    for i in nums:\n        if i%2!=0:\n            s+=i\n    return s\n    \ndef sum_of_even_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the even numbers.\n    '''\n    s=0\n    for i in nums:\n        if i%2==0:\n            s+=i\n    return s\n    \ndef find_smallest_and_biggest(nums):\n    '''\n    Write a function that takes a list of numbers and returns a new list containing the smallest and the largest numbers.\n    '''\n    min_num=nums[0]\n    max_num=nums[0]\n    for i in nums:\n        if i<min_num:\n            min_num=i\n        elif i>max_num:\n            max_num=i\n    return [min_num,max_num]\n",
        "num_ids": 77
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    p=0\n    l=[]\n    while p<len(num1) and p<len(num2) and p<len(num3):\n        if num1[p]<num2[p] and num1[p]<num3[p]:\n            l.append(num1[p])\n            p+=1\n        elif num2[p]<num1[p] and num2[p]<num3[p]:\n            l.append(num2[p])\n            p+=1\n        else:\n            l.append(num3[p])\n            p+=1\n    while p<len(num1):\n        if p<len(num1):\n            l.append(num1[p])\n            p+=1\n        else:\n            break\n    while p<len(num2):\n        if p<len(num2):\n            l.append(num2[p])\n            p+=1\n        else:\n            break\n    while p<len(num3):\n        if p<len(num3):\n            l.append(num3[p])\n            p+=1\n        else:\n            break\n    return l\n    \ndef sort_integers(l):\n    '''\n    Given a list of integers, sort the list in ascending order. \n    Use the Merge Sort algorithm to sort the list.\n    '''\n    if len(l)<=1:\n        return l\n    if len(l)==2:\n        if l[0]>l[1]:\n            return l[::-1]\n        else:\n            return l\n    mid=len(l)//2\n    left=sort_integers(l[:mid])\n    right=sort_integers(l[mid:])\n    return merge_sorted_list(left,right)\n    \ndef find_pos_num_occurrences(l):\n    '''\n    Find the number of occurrences of each element of a list.\n    '''\n    p=0\n    d={}\n    while p<len(l):\n        if l[p] in d:\n            d[l[p]]+=1\n        else:\n            d[l[p]]=1\n        p+=1\n    return d\n    \ndef remove_duplicates(l):\n    '''\n    Remove all the duplicate elements from a list of integers.\n    '''\n    l.sort()\n    p=1\n    while p<len(l):\n        if l[p]==l[p-1]:\n            l.pop(p)\n        else:\n            p+=1\n    return l\n    \ndef remove_k_most_frequent_words(k,t):\n    '''\n    Remove the k most frequent words from a list of words.\n    '''\n    d=find_pos_num_occurrences(t)\n    l=list(d.keys())\n    p=0\n    heapq.heapify(l)\n    while p<k:\n        heapq.heappop(l)\n        p+=1\n    return l\n    \ndef merge_lists(l1,l2):\n    '''\n    Merge two sorted lists into one sorted list.\n    '''\n    p=0\n    l=[]\n    while p<len(l1) and p<len(l2):\n        if l1[p]<l2[p]:\n            l.append(l1[p])\n            p+=1\n        else:\n            l.append(l2[p])\n            p+=1\n    while p<len(l1):\n        l.append(l1[p])\n        p+=1\n    while p<len(l2):\n        l.append(l2[p])\n        p+=1\n    return l\n    \ndef remove_k_most_frequent_words(k,t):\n    '''\n    Remove the k most frequent words from a list of words.\n    '''\n    d=find_pos_num_occurrences(t)\n    l=list(d.keys())\n    p=0\n    heapq.heapify(l)\n    while p<k:\n        heapq.heappop(l)\n        p+=1\n    return l\n    \ndef generate_dictionary_words(s):\n    '''\n    Generate all the possible dictionary words from a given string.\n    '''\n    if len(s)==1:\n        return [s]\n    if len(s)==2:\n        if s[0]==s[1]:\n            return [s[0]+s[1]]\n        else:\n            return [s[0],s[1],s[0]+s[1]]\n    else:\n        l=[]\n        if s[0]==s[1]:\n            l.extend(generate_dictionary_words(s[1:]))\n        else:\n            l.extend(generate_dictionary_words(s[1:]))\n            l.extend(generate_dictionary_words(s[1:]))\n        return l\n        \ndef reorganize_string(s):\n    '''\n    Reorganize a string so that no character next to each other are the same.\n    '''\n    d={}\n    l=[]\n    for i in range(len(s)):\n        if s[i] in d:\n            d[s[i]]+=1\n        else:\n            d[s[i]]=1\n    for key in d:\n        l.append([key,d[key]])\n    p=0\n    while p<len(l):\n        if l[p][1]>1:\n            for j in range(l[p][1]//2):\n                l.append([l[p][0],1])\n        p+=1\n    l.sort()\n    p=0\n    while p<len(l):\n        if p==len(l)-1:\n            return s\n        if l[p][0]==l[p+1][0]:\n            if l[p][1]>=l[p+1][1]:\n                s=s.replace(l[p][0],'',l[p][1])\n                p+=2\n            else:\n                s=s.replace(l[p+1][0],'',l[p+1][1])\n                p+=2\n        else:\n            p+=1\n    return s\n    \ndef merge_sorted_lists(l1,l2):\n    '''\n    Merge two sorted lists into one sorted list.\n    '''\n    l=[]\n    p=0\n    while p<len(l1) and p<len(l2):\n        if l1[p]<l2[p]:\n            l.append(l1[p])\n            p+=1\n        else:\n            l.append(l2[p])\n            p+=1\n    while p<len(l1):\n        l.append(l1[p])\n        p+=1\n    while p<len(l2):\n        l.append(l2[p])\n        p+=1\n    return l\n    \ndef find_substring(s):\n    '''\n    Find the longest substring in a given string.\n    '''\n    d={}\n    p=0\n    while p<len(s):\n        if s[p] in d:\n            d[s[p]]+=1\n        else:\n            d[s[p]]=1\n        p+=1\n    l=list(d.keys())\n    l.sort()\n    p=0\n    q=1\n    max_length=0\n    while q<len(l):\n        if l[q]==l[p]:\n            if d[l[q]]>max_length:\n                max_length=d[l[q]]\n            q+=1\n        else:\n            p=q\n            q+=1\n    return max_length\n    \ndef find_shortest_substring(s):\n    '''\n    Find the shortest substring in a given string.\n    '''\n    d={}\n    p=0\n    while p<len(s):\n        if s[p] in d:\n            d[s[p]]+=1\n        else:\n            d[s[p]]=1\n        p+=1\n    l=list(d.keys())\n    l.sort()\n    p",
        "num_ids": 78
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n",
        "num_ids": 25
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    sum=0\n    for i in range(n):\n        for j in range(0,len(s)):\n            if(s[j]=='0'):\n                sum=sum+1\n            else:\n                sum=sum+0\n        if(sum%2==0):\n            print('False')\n        else:\n            print('True')\n        sum=0\nodd_Equivalent('100100100',3)\n",
        "num_ids": 104
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return n in (s+s[:n%len(s)]).split('0')\n",
        "num_ids": 24
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def binary_string(s):\n        lst = []\n        s = str(s)\n        for i in s:\n            lst.append(i)\n        return lst\n",
        "num_ids": 46
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = int(n)\n    count = 0\n    for i in range(n):\n        temp = s[-1] + s[:-1]\n        count += temp.count('1')\n        s = temp\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return len([i for i in range(len(s)) if int(s[i])%2==1 and int(s[(i-n)%len(s)])%2==0])\n",
        "num_ids": 49
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    num = 0\n    for i in s:\n        if i == '1':\n            num+=1\n    return num\n",
        "num_ids": 31
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return n + 1 - sum(s[i] == '1' for i in range(len(s)))\n    \ndef main():\n    print(odd_Equivalent(str(input()), int(input())))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 69
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return int((n + 1) / 2)\n",
        "num_ids": 14
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum(b % 2 for b in bin(n)[2:].rjust(len(s), '0'))\nprint(odd_Equivalent('10101010', 5))\n",
        "num_ids": 45
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (s==\"0\"*n):\n        return n\n    return min(s.count(\"1\"),s.count(\"0\"))\n",
        "num_ids": 35
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result_list = []\n    for i in nestedlist:\n        if type(i) == list:\n            for j in i:\n                if j not in result_list:\n                    result_list.append(j)\n    return result_list\n",
        "num_ids": 60
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    s=[]\n    if nestedlist == []:\n        return s\n    for i in nestedlist:\n        if type(i) == list:\n            s = s + common_in_nested_lists(i)\n        else:\n            if type(i)==str:\n                s.append(i)\n    return s\n",
        "num_ids": 80
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def nestedlist_helper(nestedlist):\n        return [list(set(el)) for el in nestedlist]\n    \n    def is_sublist(list1, list2):\n        # if the first list is a sublist of the second\n        if len(list1) > len(list2):\n            return False\n        elif list1 == list2:\n            return True\n        else:\n            for element in list1:\n                if element not in list2:\n                    return False\n        return True\n",
        "num_ids": 122
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    #your code here\n    return 0\n",
        "num_ids": 14
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if set(i) == set(j):\n                if i not in common_list:\n                    common_list.append(i)\n    return common_list\n",
        "num_ids": 63
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    s1 = []\n    for i in nestedlist:\n        s1 += i\n    s2 = []\n    for i in range(len(s1)-1):\n        for j in range(i+1,len(s1)):\n            if s1[i] == s1[j] and s1[i] not in s2:\n                s2.append(s1[i])\n    return s2\n",
        "num_ids": 101
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        result.extend(i)\n",
        "num_ids": 24
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    print(set([x for list in nestedlist for x in list]))\n",
        "num_ids": 20
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    shared_items = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item in shared_items:\n                continue\n            else:\n                shared_items.append(item)\n    return shared_items",
        "num_ids": 57
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n",
        "num_ids": 11
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        print(num)\n    except:\n        print(f\"{text} is not a number\")\n",
        "num_ids": 38
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return int(text)\n    return text\n",
        "num_ids": 22
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except ValueError:\n        print(\"Invalid Input\")\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(map(lambda x: x == {}, list1))\n",
        "num_ids": 19
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i):\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(len(d) == 0 for d in list1)\n",
        "num_ids": 19
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in list1:\n        if bool(i):\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(dict().items()):\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums:\n        return 0\n    else:\n        s = ''\n        for n in nums:\n            s += str(n)\n        return int(s)\n",
        "num_ids": 45
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \ndef tuple_to_int_sum(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return sum(list(map(int, nums)))\n    \n    \ndef tuple_to_int_alt(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(nums)\n    \n    \ndef tuple_to_int_alt_sum(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return sum(nums)\n    \n    \ndef tuple_to_int_alt_sum_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return sum(nums)\n    \n    \ndef tuple_to_int_list(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return sum(list(map(int, nums)))\n    \n    \ndef tuple_to_int_list_sum_list_map_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return sum(list(map(int, nums)))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_sum(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_sum_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_sum_list_map(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_sum_list_map_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_sum_list_map_sum(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_sum_list_map_sum_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_sum_list_map_sum_list_map(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_sum_list_map_sum_list_map_iter(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum_list_map_sum_list_map_sum_list_map_sum_list_map_sum(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(str(i) for i in nums))\n    \n    \ndef tuple_to_int_list_sum_list_map_sum",
        "num_ids": 42
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(num) for num in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert to a string\n    str_tuple = ''\n    for num in nums:\n        str_tuple += str(num) + '.'\n",
        "num_ids": 39
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    string = ''.join(map(str,nums))\n    return int(string)\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(list(map(str, nums))))\n",
        "num_ids": 19
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for elem in test_list:\n        try:\n            new_list.append(float(elem))\n        except ValueError:\n            pass\n    return new_list\n",
        "num_ids": 51
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n",
        "num_ids": 59
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(i) for i in test_list]\n    except:\n        return test_list\n    \ndef mean_and_std(df, column_names):\n    '''\n    Write a function to compute the mean and standard deviation of a given column(s) in a dataframe.\n    '''\n    if isinstance(column_names, str):\n        column_names = [column_names]\n    return [df[name].mean(), df[name].std(ddof=0) for name in column_names]\n",
        "num_ids": 53
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n",
        "num_ids": 59
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(item) for sublist in test_list for item in sublist]\n    except Exception as e:\n        print(\"Exception occurred: \", e)\n",
        "num_ids": 44
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            for item in test_list[i]:\n                if isinstance(item, str) and ',' in item:\n                    temp = item.replace(',', '')\n                elif isinstance(item, str) and '.' in item:\n                    temp = item.replace('.','')\n                elif isinstance(item, str) and'' in item:\n                    temp = item.replace(' ','')\n                new_list.append(float(temp))\n        elif isinstance(test_list[i], str):\n            if ',' in test_list[i]:\n                temp = test_list[i].replace(',', '')\n            elif '.' in test_list[i]:\n                temp = test_list[i].replace('.','')\n            elif'' in test_list[i]:\n                temp = test_list[i].replace(' ','')\n            new_list.append(float(temp))\n    return new_list\n",
        "num_ids": 259
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    floated = []\n    for i in test_list:\n        try:\n            floated.append(float(i))\n        except ValueError:\n            pass\n    return floated\n",
        "num_ids": 45
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n",
        "num_ids": 59
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ')\n    return string\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split(' ')\n    return list_of_strings\n",
        "num_ids": 24
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ')\n    return string\n    \ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a single string joined by the space character.\n    '''\n    string =''.join(list)\n    return string\n",
        "num_ids": 15
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string using the'' as a separator.\n    # return the resulting list.\n    return string.split(' ')\n",
        "num_ids": 33
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = string.split(\" \")\n    return list_string\n",
        "num_ids": 20
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [i for i in string.split(' ')]\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings to a string.\n    '''\n    return''.join(list)\n",
        "num_ids": 10
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(\" \")\n    return string\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    #make a new list to store the values\n    new_list = []\n    #loop through the string and split on the space character\n    for i in string.split(\" \"):\n        #add the split value to the new list\n        new_list.append(i)\n    #return the new list\n    return new_list\n",
        "num_ids": 78
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while(i<=j):\n        mid = i+(j-i)//2\n        if(arr[mid] == arr[mid+1]):\n            if(mid%2 == 0):\n                i = mid\n            else:\n                j = mid\n        elif(arr[mid] == arr[mid-1]):\n            if(mid%2 == 0):\n                j = mid\n            else:\n                i = mid\n        else:\n            return arr[mid]\n    return\n",
        "num_ids": 132
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n            return arr[i]\n    return 'No element is present only once.'\n",
        "num_ids": 60
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    if len(arr) == 3:\n        if arr[0]!= arr[1] or arr[1]!= arr[2]:\n            return arr[0]\n        else:\n            return arr[2]\n    if len(arr) == 4:\n        if arr[0]!= arr[1] or arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[2]!= arr[3] or arr[3]!= arr[4]:\n            return arr[2]\n        else:\n            return arr[4]\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n",
        "num_ids": 230
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Need to count\n    arr = sorted(arr)\n    count_dict = dict()\n",
        "num_ids": 24
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    print(arr)\n    res=0\n    for i in range(len(arr)):\n        res^=arr[i]\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid!= arr[mid] - 1:\n            if arr[mid] > mid + 1:\n                right = mid\n            else:\n                left = mid + 1\n        else:\n            right = mid\n    return left + 1\n",
        "num_ids": 93
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    n = len(arr)\n    if n <= 1:\n        return\n        \n    # keep track of the first and last element\n    first = 0\n    last = n-1\n    \n    # this is for search\n    mid = (first + last)//2\n    \n    # iterate the array until we find the element at mid index\n    while arr[mid]!= mid:\n        # if mid element is larger than next element, search in the left part\n        if arr[mid] > arr[mid+1]:\n            last = mid\n        # if mid element is smaller than next element, search in the right part\n        else:\n            first = mid+1\n        mid = (first+last)//2\n        \n    # once we reach the element we need, we start iterating the array from left to right until we hit this element again\n    left = mid\n    right = mid\n    \n    # iterate the array from right to left\n    while arr[right]!= right:\n        right -= 1\n        \n    # check if the left and right index of the element we need is different\n    if left!= right:\n        return arr[right]\n    # otherwise, we have to iterate the array from right to left once again to find the unique element\n    while arr[left]!= left:\n        left += 1\n        \n    # this means we have found the element we need\n    return arr[left]\n    \n    \nif __name__ == '__main__':\n    arr = [0, 1, 0, 2, 0, 1, 2, 2, 1, 2]\n    print(search(arr))\n    \n    \n    ",
        "num_ids": 385
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n",
        "num_ids": 58
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    result = 0\n    for element in arr:\n        result ^= element\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Write your code here\n    n = len(arr)\n    i = 0\n    while i<n:\n        if arr[i]!=arr[i+1]:\n            return arr[i]\n        i+=2\n    return -1\n",
        "num_ids": 61
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0, len(list1)):\n        for j in range(1, len(list1)):\n            if abs(list1[i][0] * list1[j][0]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][0])\n            elif abs(list1[i][1] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][1] * list1[j][1])\n",
        "num_ids": 136
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # This function iterates through every tuple in the given list and returns the absolute value of the product of\n    # the two largest numbers in every pair.\n    # This function takes in a list of tuples as input.\n    \n    maximum = 0\n    for i in list1:\n        product = i[0] * i[1]\n        if product > maximum:\n            maximum = product\n            \n    return maximum\n    \nlist1 = [(2, 3), (1, 2), (-1, 0)]\nprint(max_product_tuple(list1))\n",
        "num_ids": 131
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)==2:\n        max_prod=max(list1[0]*list1[1],list1[1]*list1[0])\n        return max_prod\n    else:\n        max_prod=max(list1[0]*list1[1],list1[1]*list1[2],list1[2]*list1[0])\n        return max_prod\n",
        "num_ids": 104
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = [tuple(i) for i in list1]\n    list1.sort()\n    max_product = list1[0][0] * list1[0][1] * list1[1][0] * list1[1][1]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if max_product < list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]:\n                max_product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            elif max_product < list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]:\n                max_product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n    return max_product\n",
        "num_ids": 250
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == tuple:\n            new_list.append(i)\n        elif type(i) == list:\n            for x in i:\n                if type(x) == tuple:\n                    new_list.append(x)\n    new_list = list(set(new_list))\n    max_product = 0\n    for i in new_list:\n        for j in new_list:\n            if i!= j and i[0] * j[0] > max_product:\n                max_product = i[0] * j[0]\n    return max_product\n",
        "num_ids": 157
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!=j:\n                list2.append((list1[i],list1[j]))\n    return max([max([abs(x[0]*x[1]) for x in list2 if x[0]>x[1]]),max([abs(x[0]*x[1]) for x in list2 if x[0]<x[1]])])\n    \n    \nprint(max_product_tuple([-3,-2,-1,4]))\nprint(max_product_tuple([-3,-2,-1,4,-5,3,-4]))\nprint(max_product_tuple([-3,-2,-1,4,-5,3]))\nprint(max_product_tuple([-3,-2,-1,4,-5,3,-4,0,1,2,4]))\nprint(max_product_tuple([-3,-2,-1,4,3]))\nprint(max_product_tuple([-3,-2,-1,4,3,-5,4]))\nprint(max_product_tuple([-3,-2,-1,4,3,4]))\nprint(max_product_tuple([-3,-2,-1,4,-5,3,-4,0,1,2,4,-5]))\nprint(max_product_tuple([-3,-2,-1,4,-5,3,-4,0,1,2,4,-5,6,-7,8]))\nprint(max_product_tuple([-3,-2,-1,4,-5,3,-4,0,1,2,4,-5,6,-7,8,9]))\n",
        "num_ids": 426
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = list1[0][0] * list1[0][1]\n    for i in list1:\n        if i[0] * i[1] > max_prod:\n            max_prod = i[0] * i[1]\n    return max_prod\n",
        "num_ids": 73
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for a,b in zip(list1[0::2],list1[1::2]):\n        list2.append(a*b)\n    return max(list2)\n",
        "num_ids": 51
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = [tuple(i) for i in list1]\n    prod = [i[0] * i[1] for i in list2]\n    max_prod = max(prod)\n    min_prod = min(prod)\n    list3 = [(i,j) for i,j in zip(prod,list2)]\n    max_tuple = max(list3, key = lambda i:i[0])\n    min_tuple = min(list3, key = lambda i:i[0])\n    return (max_prod, max_tuple[0], max_tuple[1], min_prod, min_tuple[0], min_tuple[1])\n",
        "num_ids": 171
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[0] if type(x) == tuple else -1)\n    print(list1)\n    list2 = []\n    list3 = []\n    for i in range(0, len(list1)):\n        if type(list1[i]) == tuple:\n            list2.append(list1[i])\n    for i in range(0, len(list2)):\n        if list2[i][0] == list2[i][1]:\n            list3.append(list2[i])\n    print(list3)\n    list4 = []\n    for i in range(0, len(list3)):\n        list4.append(list3[i][0])\n    print(list4)\n    max1 = list4[0]\n    for i in range(0, len(list4)):\n        if list4[i] * list4[i] > max1 * max1:\n            max1 = list4[i]\n    print(max1)\n    print(list4)\n    for i in range(0, len(list4)):\n        for j in range(0, len(list4)):\n            if list4[i] * list4[j] > max1 * max1:\n                max1 = list4[i] * list4[j]\n    return max1\n",
        "num_ids": 324
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(d for d in range(1,limit) if d == sum_divisors(d) and sum_divisors(d) < limit)\n",
        "num_ids": 40
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    def sum_of_amicables_below_limit(limit):\n        amicable_numbers = []\n        numbers = range(1, limit)\n        for number in numbers:\n            amicable_number = sum_of_divisors(number)\n            if amicable_number < limit and amicable_number!= number and number == sum_of_divisors(amicable_number):\n                amicable_numbers.append(number)\n                amicable_numbers.append(amicable_number)\n        return sum(set(amicable_numbers))\n",
        "num_ids": 137
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(n):\n        #Returns the sum of all divisors of a number\n        divisor_sum = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisor_sum += i\n                if i!= n // i:\n                    divisor_sum += n // i\n        return divisor_sum - n\n",
        "num_ids": 105
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(number):\n        '''\n        Given a number return whether it is amicable or not.\n        '''\n        divisor = 2\n        sum_of_divisors = 0\n        while divisor < number:\n            if number % divisor == 0:\n                sum_of_divisors += divisor\n            divisor += 1\n        if sum_of_divisors == number:\n            return False\n        else:\n            sum_of_divisors = 0\n            while divisor < number:\n                if number % divisor == 0:\n                    sum_of_divisors += divisor\n                divisor += 1\n            return sum_of_divisors == number\n    def amicable_numbers_sum_helper(number):\n        '''\n        Helper function to sum all amicable numbers from 1 to number.\n        '''\n        if number == 1:\n            return 0\n        else:\n            sum_of_amicable_numbers = 0\n            for number_1 in range(1, number):\n                if is_amicable(number_1):\n                    sum_of_amicable_numbers += number_1\n            return sum_of_amicable_numbers\n    return amicable_numbers_sum_helper(limit)\n",
        "num_ids": 98
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # using a dict to store all amicable numbers, O(1)\n    # using the sum of each amicable number, O(n)\n    result = 0\n    amicable = {}\n",
        "num_ids": 46
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        sum += is_amicable(i)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit < 2:\n        return 0\n    total = 0\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            continue\n        if amicable_numbers[i] < 2:\n            continue\n        if i < amicable_numbers[i]:\n            total += i\n        else:\n            total += amicable_numbers[i]\n    return total\n",
        "num_ids": 99
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all numbers up to limit\n    numbers = list(range(1, limit + 1))\n    # only add to list if it is an amicable number\n    amicable_numbers = list()\n    for n in numbers:\n        if is_amicable(n):\n            amicable_numbers.append(n)\n    # sum amicable numbers\n    amicable_sum = sum(amicable_numbers)\n    return amicable_sum\n",
        "num_ids": 111
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    print(f'\\nProblem 13:\\nThe sum of the amicable numbers from 1 to {limit} is {amicable_numbers_sum_helper(limit)}.')\n",
        "num_ids": 44
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(limit):\n        '''\n        Return a sum of amicable numbers.\n        '''\n        amicable_numbers = set()\n        for i in range(1, limit):\n            j = sum_divisors(i)\n            if i == sum_divisors(j) and i!= j:\n                amicable_numbers.add(i)\n                amicable_numbers.add(j)\n        return sum(amicable_numbers)\n    return sum_amicable_numbers(limit)\n",
        "num_ids": 102
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # a = complex(a)\n    # b = complex(b)\n    # angle = cmath.phase(a+b)\n    # return round(angle,2)\n    return round(cmath.phase(complex(a,b)),2)\n",
        "num_ids": 62
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z=complex(a,b)\n    return (cmath.phase(z))\n",
        "num_ids": 23
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = a\n    y = b\n    x = complex(a)\n    y = complex(b)\n    z = cmath.phase(x/y)\n    return z\n",
        "num_ids": 45
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a,b)\n    return cmath.phase(z)\n",
        "num_ids": 22
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(complex(a,b)))\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z=complex(a,b)\n    return cmath.phase(z)\n",
        "num_ids": 22
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x=complex(a)\n    y=complex(b)\n    angle = cmath.phase(complex(x,y))\n    print(angle)\n",
        "num_ids": 39
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = a[:-1].split(\"+\")\n    y = b[:-1].split(\"+\")\n    x = int(x[0])\n    y = int(y[0])\n    z = cmath.polar(complex(x,y))\n    angle = z[1]\n    print(angle)\n",
        "num_ids": 78
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if isinstance(a,complex):\n        if a.imag==0:\n            return 0\n        else:\n            return cmath.phase(a)\n    else:\n        return None\n",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = cmath.phase(complex(a,b))\n    return z\n",
        "num_ids": 21
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    max_length = 0\n    index = 0\n    if len(string) == 1:\n        return 0\n    while index < len(string):\n        if string[index] == '0':\n            length += 1\n        else:\n            length += 0\n        if length > max_length:\n            max_length = length\n        index += 1\n    return max_length\n",
        "num_ids": 94
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([string.count('0')-string.count('1'), string.count('1')-string.count('0')])\n",
        "num_ids": 34
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count = 0\n    count = 0\n",
        "num_ids": 14
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string) \n    count_of_0 = 0\n    count_of_1 = 0\n    max_count = 0\n    for i in range(0,length): \n        if (string[i] == '0'): \n            count_of_0 += 1\n        else: \n            count_of_1 += 1\n        if (max_count < count_of_0 - count_of_1): \n            max_count = count_of_0 - count_of_1\n    return max_count \nstring=\"1100100111111010\"\nprint(find_length(string)) \nstring=\"111011101111111010\"\nprint(find_length(string)) \n",
        "num_ids": 170
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n=len(string)\n    l=0\n    for i in range(n):\n        c0=0\n        c1=0\n        for j in range(i,n):\n            if string[j]=='0':\n                c0+=1\n            else:\n                c1+=1\n            if c0>c1:\n                if c0-c1>l:\n                    l=c0-c1\n    return l\nprint(find_length(\"10111\")",
        "num_ids": 116
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    for i in range(len(string)):\n        count0 = 0\n        count1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            if max < abs(count0 - count1):\n                max = abs(count0 - count1)\n    return max\n",
        "num_ids": 101
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    count = 0\n    for i in string:\n        if i == \"0\":\n            count = count+1\n        elif i == \"1\":\n            count = 0\n        if count > max_length:\n            max_length = count\n",
        "num_ids": 66
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_length = 0\n    start = 0\n",
        "num_ids": 20
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    max_result = 0\n    # for i in range(len(string)):\n    #     left = i\n    #     right = i\n    #     count_0 = 0\n    #     count_1 = 0\n    #     while left >= 0:\n    #         if string[left] == '0':\n    #             count_0 += 1\n    #         elif string[left] == '1':\n    #             count_1 += 1\n    #         left -= 1\n    #     while right <= len(string) - 1:\n    #         if string[right] == '0':\n    #             count_0 += 1\n    #         elif string[right] == '1':\n    #             count_1 += 1\n    #         right += 1\n    #     if count_0 > count_1:\n    #         diff = count_0 - count_1\n    #     elif count_0 < count_1:\n    #         diff = count_1 - count_0\n    #     else:\n    #         diff = 0\n    #     max_result = max(diff, max_result)\n    #     # print(max_result)\n    # return max_result\n    for i in range(len(string)):\n        left = i\n        right = i\n        count_0 = 0\n        count_1 = 0\n        while left >= 0:\n            if string[left] == '0':\n                count_0 += 1\n            elif string[left] == '1':\n                count_1 += 1\n            left -= 1\n        while right <= len(string) - 1:\n            if string[right] == '0':\n                count_0 += 1\n            elif string[right] == '1':\n                count_1 += 1\n            right += 1\n        if count_0 > count_1:\n            diff = count_0 - count_1\n        elif count_0 < count_1:\n            diff = count_1 - count_0\n        else:\n            diff = 0\n        if diff > result:\n            result = diff\n    return result\n",
        "num_ids": 495
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #Code here\n    k=0\n    l=0\n    for i in range(len(string)):\n        if(string[i]==\"0\"):\n            k=k+1\n        else:\n            l=l+1\n    return max(k,l)\nprint(find_length(\"1\"))\n",
        "num_ids": 78
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a1=set(range(1,a+1))\n    a2=set(range(1,b+1))\n    a3=a1.intersection(a2)\n    return(sum(a3))\n",
        "num_ids": 55
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < 0 or b < 0:\n        raise ValueError('Numbers must be positive')\n    if a == 0 or b == 0:\n        return 0\n    s = 1\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            s += i\n    return s\n",
        "num_ids": 85
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(divmod(a,b))\n    a1,a2,b1,b2=divmod(a,b)\n    print(divmod(a1,b1))\n    print(divmod(a2,b2))\n    return a1+a2+b1+b2\n",
        "num_ids": 74
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div = []\n    for i in range(1, min(a,b) + 1): \n        if a % i == 0 and b % i == 0: \n            div.append(i)\n    return sum(div)\n",
        "num_ids": 57
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum([i for i in range(1,min(a,b)+1) if a%i==0 and b%i==0])\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    return gcd(b,a%b) if b!=0 else a\n    \ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two given numbers.\n    '''\n    return int(a*b/gcd(a,b))\n",
        "num_ids": 18
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # a, b = int(input()), int(input())\n    # if a>b:\n    #     c = b\n    #     b = a\n    #     a = c\n    # c = 0\n    # for i in range(1,a+1):\n    #     if a%i == 0:\n    #         b = b%i\n    #         if b == 0:\n    #             c+=i\n    # print(c)\n",
        "num_ids": 110
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    d=[]\n    for i in range(1,a+1):\n        if a%i==0:\n            d.append(i)\n    for j in range(1,b+1):\n        if b%j==0:\n            if j in d:\n                d.remove(j)\n    return(sum(d))\nprint(sum(12,15))\n",
        "num_ids": 91
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return divisor_sum(a,b)\n",
        "num_ids": 15
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l = [i for i in range(1,min(a,b)+1) if a%i==0 and b%i==0]\n    return sum(l)\n",
        "num_ids": 43
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return sum(b,a%b)\n",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = str.split()\n    return [w for w in lst if len(w) > n]\n",
        "num_ids": 29
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = str.split(' ')\n    result = [i for i in lst if len(i) > n]\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str.split() if len(w) > n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [i for i in str.split() if len(i) > n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str.split(' '):\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 46
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [i for i in str.split() if len(i) > n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n < 0:\n        return 'Number of characters should be positive'\n    if type(str)!= list:\n        return 'The input should be a list'\n    else:\n        result = []\n        for word in str:\n            if len(word) > n:\n                result.append(word)\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = str.split()\n    long_words = []\n    for word in word_list:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 54
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    #list of rows\n    row_list = []\n    #list of cols\n    col_list = []\n    #list of diag\n    diag_list = []\n    #list of anti_diag\n    anti_diag_list = []\n",
        "num_ids": 65
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # we only need to go through all the possible rows and columns to check if it is a magic square.\n    # the sum of each row/column should be the same, then sum the same for the diagonal.\n    # for this problem we will only consider squares of 3x3.\n    n = 3\n    if (len(my_matrix)!= n):\n        return False\n    # get the sum of each row/column\n    # get the sum of the diagonal.\n    # print(my_matrix)\n    # print(sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))))\n    # print(sum(my_matrix[i][j] for i in range(n) for j in range(n)))\n    # print(sum(my_matrix[i][j] for i in range(n) for j in range(n)) == sum(my_matrix[i][j] for i in range(n) for j in range(n)))\n    if (sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))) == sum(my_matrix[i][j] for i in range(n) for j in range(n))):\n        if (sum(my_matrix[i][j] for i in range(n) for j in range(n)) == sum(my_matrix[i][j] for i in range(n) for j in range(n))):\n            return True\n    return False\n",
        "num_ids": 375
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the expected sum\n    expected = (my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2]\n    + my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2]\n    + my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2])\n    \n    # Calculate the actual sum\n    actual = 0\n    for row in my_matrix:\n        for col in row:\n            actual += col\n    \n    # Return true if the actual sum equals the expected sum\n    return actual == expected\n",
        "num_ids": 166
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_sum = 0\n    for i in range(0,len(my_matrix)):\n        for j in range(0,len(my_matrix[i])):\n            my_sum += my_matrix[i][j]\n    #check if the sum of every column equals the sum of every row\n    if(my_sum!= sum([sum(row) for row in my_matrix])):\n        return False\n    #check if sum of diagonal1 is equal to sum of diagonal2\n    if(my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]):\n        return False\n    return True\n",
        "num_ids": 193
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list):\n        print(\"Please enter a list of integers.\")\n    elif len(my_matrix) == 0:\n        print(\"Please enter a list of integers.\")\n    elif len(my_matrix)!= len(my_matrix[0]):\n        print(\"Please enter a list of square matrix.\")\n    else:\n        diagonal_sum = 0\n        diagonal_1 = 0\n        diagonal_2 = 0\n        horizontal_sum = 0\n        vertical_sum = 0\n        for row in range(len(my_matrix)):\n            diagonal_1 += my_matrix[row][row]\n            diagonal_2 += my_matrix[row][len(my_matrix) - row - 1]\n        for column in range(len(my_matrix[0])):\n            for row in range(len(my_matrix)):\n                horizontal_sum += my_matrix[row][column]\n                vertical_sum += my_matrix[column][row]\n        if diagonal_1!= diagonal_2 or horizontal_sum!= diagonal_1 or vertical_sum!= diagonal_1:\n            print(\"Please enter a magic square.\")\n        else:\n            print(\"Yes, it is a magic square.\")\n",
        "num_ids": 307
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_magic = (my_matrix[0][0]+my_matrix[0][1]+my_matrix[0][2]+my_matrix[1][0]+my_matrix[1][1]+my_matrix[1][2]+my_matrix[2][0]+my_matrix[2][1]+my_matrix[2][2])\n    sum_square = my_matrix[0][0]+my_matrix[1][1]+my_matrix[2][2]\n    \n    if sum_magic == sum_square:\n        if my_matrix[0][0] == my_matrix[0][1] == my_matrix[0][2] or my_matrix[1][0] == my_matrix[1][1] == my_matrix[1][2] or my_matrix[2][0] == my_matrix[2][1] == my_matrix[2][2]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 248
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Assumption: all elements are distinct\n    # Assumption: no negative elements\n    # Assumption: no repeated rows\n    # Assumption: no repeated columns\n",
        "num_ids": 39
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_list = []\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            my_list.append(my_matrix[i][j])\n    temp_list = []\n    for i in range(0, len(my_list)):\n        if i % 3 == 0:\n            temp_list.append(my_list[i])\n    if len(temp_list)!= 3:\n        return False\n    # check if the sum of each row and column is the same\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            if i == 0:\n                sum_row = my_matrix[i][j]\n            else:\n                sum_row += my_matrix[i][j]\n        if sum_row!= sum(temp_list):\n            return False\n    # check if the sum of the diagonal is equal to the original sum\n    temp_list = []\n    for i in range(0, len(my_list)):\n        if i % 3 == 0:\n            temp_list.append(my_list[i])\n    sum_diag = temp_list[0] + temp_list[1]\n    if sum_diag!= sum(my_list):\n        return False\n    return True\n",
        "num_ids": 339
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all the rows have the same length\n    rows_len = [len(i) for i in my_matrix]\n    if not all(rows_len[0] == el for el in rows_len):\n        return False\n    # Check if all the columns have the same length\n    cols_len = [len(i) for i in zip(*my_matrix)]\n    if not all(cols_len[0] == el for el in cols_len):\n        return False\n    # Check if the diagonals have the same length\n    diag1 = [my_matrix[i][i] for i in range(len(my_matrix))]\n    diag2 = [my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))]\n    if not all(diag1[0] == el for el in diag1):\n        return False\n    if not all(diag2[0] == el for el in diag2):\n        return False\n    return True\n",
        "num_ids": 253
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        print(\"Not a square.\")\n        return False\n    sum_list = []\n    for row in range(len(my_matrix)):\n        sum_list.append(sum(my_matrix[row]))\n    if sum(sum_list)!= sum([(i+1)*(i+2)//2 for i in range(1, len(sum_list)+1)]):\n        print(\"Not a magic square.\")\n        return False\n    print(\"Magic square.\")\n    return True\n",
        "num_ids": 139
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    dict = defaultdict(int)\n    max_freq = 0\n    for num in nums:\n        dict[num] += 1\n        if dict[num] > max_freq:\n            max_freq = dict[num]\n            max_num = num\n    return max_num, max_freq\n",
        "num_ids": 79
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dict with default value 0\n    d = defaultdict(int)\n    # Iterate through the list\n    for n in nums:\n        d[n] += 1\n    max_freq = max(d.values())\n    for k, v in d.items():\n        if v == max_freq:\n            return k\n",
        "num_ids": 83
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums = list(set(nums))\n    max_occurrence = 0\n    for num in nums:\n        if nums.count(num) >= max_occurrence:\n            max_occurrence = nums.count(num)\n    print(max_occurrence)\n",
        "num_ids": 69
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # creating a dictionary\n    myDict = dict()\n    # iterating through nums to count frequencies\n    for n in nums:\n        if n in myDict:\n            myDict[n] += 1\n        else:\n            myDict[n] = 1\n    # iterating through myDict and storing the key, value pair where value is maximum\n    for k, v in myDict.items():\n        if v == max(myDict.values()):\n            print('Maximum: ', k, v)\n",
        "num_ids": 126
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=lambda k: d[k])\n",
        "num_ids": 43
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # first approach\n    # d = defaultdict(int)\n    # for n in nums:\n    #     d[n] += 1\n    # return max(d, key=d.get)\n    \n    # second approach\n    # d = {}\n    # for i in nums:\n    #     if i not in d:\n    #         d[i] = 0\n    #     d[i] += 1\n    # return max(d, key=d.get)\n",
        "num_ids": 116
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for i in nums:\n        d[i] += 1\n        if max_freq < d[i]:\n            max_freq = d[i]\n            max_item = i\n    return max_item\n",
        "num_ids": 78
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    return max(d, key=d.get)\n",
        "num_ids": 40
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_ = defaultdict(int)\n    for num in nums:\n        dict_[num] += 1\n    return max(dict_, key=dict_.get)\n",
        "num_ids": 43
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums_dict = defaultdict(int)\n    nums_max = 0\n    for num in nums:\n        nums_dict[num] += 1\n        if nums_dict[num] > nums_max:\n            nums_max = nums_dict[num]\n    return nums_max\n",
        "num_ids": 78
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    print(vowels_list)\n    vowels_list.reverse()\n    print(vowels_list)\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1 = str1[:i] + vowels_list.pop() + str1[i+1:]\n    print(str1)\n    return str1\n",
        "num_ids": 171
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    vowel_list = []\n    str_list = []\n    for letter in str1:\n        str_list.append(letter)\n    \n    for char in str_list:\n        if char in vowels:\n            vowel_list.append(char)\n    \n    print(vowel_list)\n    vowel_list.reverse()\n    \n    return ''.join(vowel_list)\n",
        "num_ids": 121
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a','e','i','o','u','A','E','I','O','U'])\n    str1 = list(str1)\n    i,j = 0,len(str1)-1\n    while(i<j):\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i],str1[j] = str1[j],str1[i]\n            i+=1\n            j-=1\n        if str1[i] not in vowels:\n            i+=1\n        if str1[j] not in vowels:\n            j-=1\n    return ''.join(str1)\n",
        "num_ids": 166
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str2 = list(str1)\n    i = 0\n    j = len(str2) - 1\n",
        "num_ids": 42
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    str2 = \"\"\n    for i in str1:\n        if i in vowel:\n            str2 = str2+i\n    for i in str1:\n        if i not in vowel:\n            str2 = str2+i\n    print(str2)\n",
        "num_ids": 103
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    for i in str1:\n        if i in vowels:\n            str1 = str1.replace(i, '', 1)\n    return str1\n",
        "num_ids": 53
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    rev_string = ''\n",
        "num_ids": 45
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n",
        "num_ids": 42
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_list = []\n    vowel_str = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_list.append(str1[i])\n            vowel_str = ''.join(vowel_list)\n    return vowel_str[::-1]\n",
        "num_ids": 103
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    # idx_list = []\n    # for idx,char in enumerate(str1):\n    #     if char in vowels:\n    #         idx_list.append(idx)\n    #         print(idx)\n    # for idx in idx_list:\n    #     str1 = str1[:idx] + str1[idx+1:]\n    # print(idx_list)\n    # print(str1)\n    # return str1\n",
        "num_ids": 139
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for char in tup1:\n        str1 += char\n    return str1\n",
        "num_ids": 28
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    my_str = ''\n    for i in range(len(tup1)):\n        my_str += tup1[i] + ','\n    my_str = my_str[:-1]\n    return my_str\n",
        "num_ids": 57
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup = str(tup1)\n    return tup\n",
        "num_ids": 18
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i)\n    return string\n",
        "num_ids": 28
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 = str1 + str(i) + \" \"\n    return str1.strip()\n",
        "num_ids": 40
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    my_string = \"\"\n    for i in tup1:\n        my_string += str(i)\n        my_string += \" \"\n    return my_string\n",
        "num_ids": 42
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return(str(tup1))\ntup_string((1,2,3,4,5))\n",
        "num_ids": 28
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # def sum_negativenum(nums):\n    #     negative_sum = 0\n    #     for x in nums:\n    #         if x < 0:\n    #             negative_sum += x\n    #     return negative_sum\n    return sum(n for n in nums if n < 0)\n",
        "num_ids": 77
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sumnum = 0\n    for i in nums:\n        if i < 0:\n            sumnum += i\n    return sumnum\n",
        "num_ids": 36
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s=0\n    for i in nums:\n        if i<0:\n            s+=i\n    return s",
        "num_ids": 30
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for i in nums:\n        if i < 0:\n            sum_neg += i\n    return sum_neg\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\nprint(sum_negativenum([1,-2,3,4,-5]))\n",
        "num_ids": 52
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n",
        "num_ids": 19
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return -sum(nums)\n",
        "num_ids": 11
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n",
        "num_ids": 18
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    n -= 1\n    result = 1\n    while n!= 0:\n        result += 6 * n\n        n -= 1\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n<0:\n        return 'Invalid input'\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # pass\n    return n*(2*n-1)\ndef hexagonal_num_again(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        return n*(2*n-1)\ndef sum_digits(n):\n    '''\n    Write a function to sum all the digits of n.\n    '''\n    # pass\n    return n % 10 + sum_digits(int(n/10)) if n > 0 else 0\ndef sum_digits_again(n):\n    '''\n    Write a function to sum all the digits of n.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits_again(int(n/10))\ndef count_vowels(word):\n    '''\n    Write a function to count how many vowels are in a given word.\n    '''\n    # pass\n    if word == '':\n        return 0\n    elif word[0] == 'a' or word[0] == 'e' or word[0] == 'i' or word[0] == 'o' or word[0] == 'u':\n        return 1 + count_vowels(word[1:])\n    else:\n        return count_vowels(word[1:])\ndef count_vowels_again(word):\n    '''\n    Write a function to count how many vowels are in a given word.\n    '''\n    # pass\n    if word == '':\n        return 0\n    elif word[0].lower() == 'a' or word[0].lower() == 'e' or word[0].lower() == 'i' or word[0].lower() == 'o' or word[0].lower() == 'u':\n        return 1 + count_vowels_again(word[1:])\n    else:\n        return count_vowels_again(word[1:])\ndef fib(n):\n    '''\n    Write a function to compute the nth Fibonacci number.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\ndef fib_again(n):\n    '''\n    Write a function to compute the nth Fibonacci number.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_again(n-1) + fib_again(n-2)\ndef sum_integers(n):\n    '''\n    Write a function that computes the sum of all the integers from 1 to n.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        return n + sum_integers(n-1)\ndef sum_integers_again(n):\n    '''\n    Write a function that computes the sum of all the integers from 1 to n.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        return n + sum_integers_again(n-1)\ndef power(a, n):\n    '''\n    Write a function to compute a^n.\n    '''\n    # pass\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a\n    elif n == 2:\n        return a*a\n    else:\n        return a * power(a, n-1)\ndef power_again(a, n):\n    '''\n    Write a function to compute a^n.\n    '''\n    # pass\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a\n    elif n == 2:\n        return a*a\n    else:\n        return a * power_again(a, n-1)\ndef power_v2(a, n):\n    '''\n    Write a function to compute a^n.\n    '''\n    # pass\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a\n    else:\n        return a * power_v2(a, n-1)\ndef power_v3(a, n):\n    '''\n    Write a function to compute a^n.\n    '''\n    # pass\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a\n    elif n == 2:\n        return a*a\n    else:\n        return a * power_v3(a, n-1)\ndef power_v4(a, n):\n    '''\n    Write a function to compute a^n.\n    '''\n    # pass\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a\n    elif n == 2:\n        return a*a\n    elif n == 3:\n        return a*a*a\n    else:\n        return a * power_v4(a, n-1)\ndef power_v5(a, n):\n    '''\n    Write a function to compute a^n.\n    '''\n    # pass\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a\n    elif n == 2:\n        return a*a\n    elif n == 3:\n        return a*a*a\n    else:\n        if n % 2 == 0:\n            return power_v5(a*a, n/2)\n        else:\n            return power_v5(a*a, (n-1)/2)\ndef power_v6(a, n):\n    '''\n    Write a function to compute a^n.\n    '''\n    # pass\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a\n    elif n == 2:\n        return a*a\n    elif n == 3:\n        return a*a*a\n    else:\n        if n % 2 == 0:\n            return power_v6(a*a, n/2)\n        else:\n            return a * power_v6(a*a, (n-1)/2)\ndef print_integers(n):\n    '''\n    Write a function to print all integers from 1 to n.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        print(n)\n        print_integers(n-1)\ndef print_integers_again(n):\n    '''\n    Write a function to print all integers from 1 to n.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        print(n)\n        print_integers_again(n-1)\ndef print_integers_v2(n):\n    '''\n    Write a function to print all integers from 1 to n.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        print(n)\n        print_integers_v2(n-1)\ndef print_integers_v3(n):\n    '''\n    Write a function to print all integers from 1 to n.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        print(n)\n        print_integers_v3(n-1)\ndef print_integers_v4(n):\n    '''\n    Write a function to print all integers from 1 to n.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        print(n)\n        print_integers_v4(n-1)\ndef print_integers_v5(n):\n    '''\n    Write a function to print all integers from 1 to n.\n    '''\n    # pass\n    if n == 0:\n        return 0\n    else:\n        if n % 2 == 0:\n            print_integers_v5(n/2)\n        else:\n            print_integers_v5((n-1)/2)\ndef print_integers_v6(n):\n    '''\n    Write a function to print all integers from 1 to n.\n    '''\n    # pass\n    if n == 0:",
        "num_ids": 12
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))\n",
        "num_ids": 15
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*(2*n-1)\n",
        "num_ids": 29
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    print(count)\n    print(len(nums)-count)\n    return count / len(nums)\n",
        "num_ids": 54
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_nonzeros = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_nonzeros += 1\n    return num_zeros / num_nonzeros\n",
        "num_ids": 68
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        count = 0\n        for i in nums:\n            if i == 0:\n                count += 1\n        return count/len(nums)\n",
        "num_ids": 53
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count_zero += 1\n",
        "num_ids": 40
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums_length = len(nums)\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count/nums_length\n",
        "num_ids": 54
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return [zeros, non_zeros]\n",
        "num_ids": 61
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return num_zeroes / num_non_zeroes\n",
        "num_ids": 71
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nums = array('i', nums)\n    for n in nums:\n        if n == 0:\n            zeros += 1\n    \n    return zeros, len(nums)-zeros\n",
        "num_ids": 56
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #arr = [int(x) for x in input().split()]\n    #arr_cnt = [0,0]\n    #for x in arr:\n    #    if x == 0:\n    #        arr_cnt[0] += 1\n    #    else:\n    #        arr_cnt[1] += 1\n",
        "num_ids": 82
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    nz = 0\n    for i in nums:\n        if i == 0:\n            z += 1\n        else:\n            nz += 1\n    return z,nz\n",
        "num_ids": 47
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pow = 0\n    while 2**pow < n:\n        pow+=1\n    pow-=1\n    return 2**pow == n\n",
        "num_ids": 40
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = set()\n    s.add(1)\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            s.add(2)\n        else:\n            if 2 in s:\n                return True\n            else:\n                return False\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        sum = 0\n        while (n > 0):\n            sum += (n % 2)\n            n = int(n / 2)\n        if sum == 1:\n            return True\n        else:\n            return False\n",
        "num_ids": 68
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    import math\n    if (n == 0):\n        return True\n    while n!= 0:\n        if (n % 2 == 1):\n            return False\n        else:\n            n = int(n / 2)\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0): \n        return 1\n    if ((n & (n - 1) == 0) and (n!= 0)): \n        return 1\n    else: \n        return 0\n",
        "num_ids": 51
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = abs(int(n))\n    \n    while (n): \n        i = 1\n        p = 1\n        while (i <= n): \n            if (i == n): \n                return True\n            p = p * 2\n            i = i * 2\n        n = n - p / 2\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n == 0): \n        return False\n    while(n): \n        if(n & 1): \n            return False\n        n = n >> 1\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 1\n    sum = 0\n    while power < n:\n        power *= 2\n    while power:\n        if power % 10:\n            sum += 1\n        power //= 10\n    return sum == 1\n",
        "num_ids": 54
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # base cases \n    if n == 0: \n        return False\n    if n == 1: \n        return True\n    if n == 2: \n        return True\n    if n == 3: \n        return False\n",
        "num_ids": 56
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    elif n==0:\n        return True\n    while n>1:\n        for i in range(2,n+1):\n            if n%i==0:\n                n=n/i\n                break\n    return True if n==1 else False\n",
        "num_ids": 74
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    return r*2*pi\n",
        "num_ids": 17
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n",
        "num_ids": 17
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n    \ndef circle_circumference2(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n    \ndef circle_circumference3(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return r * pi * 2\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * r * math.pi\n    \nif __name__ == '__main__':\n    print(circle_circumference(3))\n    print(circle_circumference(6))\n    print(circle_circumference(3.5)",
        "num_ids": 62
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    PI = 3.14159265\n    return 2 * PI * r\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten_lists(a_list):\n        '''\n        Write a function to flatten the list of lists into a single set of numbers.\n        '''\n        if isinstance(a_list, list):\n            if a_list == []:\n                return []\n            else:\n                return a_list[0] + flatten_lists(a_list[1:])\n        else:\n            return a_list\n    return flatten_lists(test_list)\n",
        "num_ids": 75
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for sublist in test_list:\n        for item in sublist:\n            res.append(item)\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = []\n    for list_ in test_list:\n        for item in list_:\n            singly.append(item)\n    return singly\n",
        "num_ids": 40
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    out_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            out_list.extend(extract_singly(item))\n        else:\n            out_list.append(item)\n    return out_list\n",
        "num_ids": 65
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def extract_singly_helper(sub_list):\n        result = set()\n        for item in sub_list:\n            if type(item) is list:\n                result.update(extract_singly_helper(item))\n            else:\n                result.add(item)\n        return result\n",
        "num_ids": 75
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for i in test_list:\n        return_list += i\n    return return_list\n",
        "num_ids": 31
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for item in test_list:\n        if type(item) == list:\n            singly_list += item\n        else:\n            singly_list.append(item)\n",
        "num_ids": 52
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list += item\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "num_ids": 55
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    lst_out = []\n    # base case\n    if len(nums) == 1:\n        return [nums[0]]\n",
        "num_ids": 35
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        k = nums.index(max(nums[:i+1]))\n        nums = nums[k:] + nums[:k]\n        nums = nums[:i+1] + nums[i+1:][::-1]\n    return nums\n",
        "num_ids": 89
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Make a copy of the list\n    nums = nums.copy()\n    # Add a dummy first element to the front\n    # of the list so that the largest element\n    # is always at the end of the list\n    nums.insert(0, 0)\n    # Loop through the list\n    for i in range(len(nums)):\n        # Find the largest element in the\n        # list and move it to the end of the list\n        max_index = nums.index(max(nums[1:nums.index(0)]))\n        nums[max_index + 1], nums[0] = nums[0], nums[max_index + 1]\n        # Flip the list from the start to the\n        # end so that the largest element is\n        # now the first element in the list\n        nums[0:max_index + 1] = nums[0:max_index + 1][::-1]\n    # Remove the first dummy element\n    nums.pop(0)\n    return nums\n",
        "num_ids": 246
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for size in reversed(range(len(nums))):\n        # print(size)\n        for i in range(size):\n            if nums[i] > nums[i+1]:\n                # print(nums[i], nums[i+1])\n                temp = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = temp\n                # print(nums[i], nums[i+1])\n                # flip(nums, i)\n        # print(nums)\n    return nums\n",
        "num_ids": 141
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for k in range(len(nums) // 2):\n        max_index = len(nums) - k - 1\n        max_index_reverse = k + 1\n        swap(nums, max_index, max_index_reverse)\n        for i in range(0, len(nums) - k - 1):\n            if nums[i] > nums[i + 1]:\n                swap(nums, i, i + 1)\n",
        "num_ids": 110
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(arr, left, right):\n        while left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n",
        "num_ids": 49
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    nums_to_sort = len(nums)\n    \n    while(nums_to_sort > 1):\n        if nums_to_sort % 2 == 1:\n            nums_to_sort -= 1\n            continue\n        \n        nums_to_sort //= 2\n        \n        for i in range(nums_to_sort - 1):\n            if nums[i] > nums[i + 1]:\n                nums = swap(nums, i, i + 1)\n                \n        nums = swap(nums, 0, nums_to_sort - 1)\n    \n    return nums\n    \ndef swap(nums, i, j):\n    nums[i], nums[j] = nums[j], nums[i]\n    return nums",
        "num_ids": 209
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Loop through the list\n    for k in range(len(nums) - 1, 0, -1):\n        # Find the largest value in the list\n        max_value = max(nums[:k])\n        # Find its index in the list\n        max_index = nums.index(max_value)\n        # Reverse the list from index 0 to max_index\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        # Reverse the list from index 0 to k\n        nums = nums[:k][::-1] + nums[k:]\n    return nums\n",
        "num_ids": 158
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        max_ind = nums.index(max(nums[i:]))\n        if max_ind!= 0:\n            flip(nums, max_ind)\n            flip(nums, i)\n    return nums\n",
        "num_ids": 71
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # for i in range(len(nums)):\n    #     nums = pancake_sort_helper(nums, len(nums)-i-1)\n    # return nums\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            a+=1\n    return a\ndef count_samepair_v2(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] or list1[i]==list3[i] or list2[i]==list3[i]:\n            a+=1\n    return a\ndef same_str(a,b,c):\n    '''\n    Write a function to count number of common characters between the given strings.\n    '''\n    if a==b==c:\n        return True\n    elif a==b:\n        return True\n    elif a==c:\n        return True\n    elif b==c:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n    \ndef unique_emails(emails):\n    '''\n    Write a function to remove duplicate emails from the list.\n    '''\n    unique_list=[]\n    for i in range(len(emails)):\n        if emails[i] not in unique_list:\n            unique_list.append(emails[i])\n    return unique_list\n",
        "num_ids": 54
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    print('\\n',list1)\n    print(list2)\n    print(list3)\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            counter += 1\n    return counter\n",
        "num_ids": 73
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            counter=counter+1\n    return counter\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1,list2,list3 = list(list1),list(list2),list(list3)\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count+1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_number = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            same_number = same_number + 1\n    return same_number\n",
        "num_ids": 61
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            sum += 1\n    return sum\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = (1, [2], (3, [4, (5)]), [6, [7, [8, (9, 10)]]], 11)\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count += 1\n    print(\"Number of lists present in the given tuple: \", count)\nfind_lists(Input)\n",
        "num_ids": 90
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = 0\n    for x in Input:\n        if type(x) == list:\n            result += 1\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n    # def find_length(Input): \n    #     return len(Input)\n    # Output = find_length(Input)\n    # return Output\n",
        "num_ids": 45
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Lists = []\n    count = 0\n    for i in range(len(Input)):\n        if isinstance(Input[i],list):\n            Lists.append(Input[i])\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # return len([i for i in Input if isinstance(i, list)])\n    # return len([i for i in Input if isinstance(i, list)])\n    return len(list(filter(lambda i: type(i)==list, Input)))\n",
        "num_ids": 63
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists=[]\n    for i in range(len(Input)):\n        if isinstance(Input[i],list):\n            lists.append(Input[i])\n    return lists\n",
        "num_ids": 45
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(filter(lambda x: isinstance(x, list), Input))) \n",
        "num_ids": 24
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([i for i in Input if type(i) == list])\n",
        "num_ids": 20
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([i for i in Input if type(i) == list])\n",
        "num_ids": 20
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for element in Input:\n        if type(element) == type([]):\n            lists.append(element)\n    return len(lists)\n",
        "num_ids": 41
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n  \ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.",
        "num_ids": 21
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_abs = max(abs(arr[i] - arr[j]),max_abs)\n    return max_abs\n",
        "num_ids": 66
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr)-min(arr)\n",
        "num_ids": 13
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max = 0\n    arr = sorted(arr)\n    for i in range(len(arr) - 1):\n        dif = arr[i+1] - arr[i]\n        if dif > Max:\n            Max = dif\n    return Max\n    \nif __name__ == '__main__':\n    arr = [1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6]\n    print(max_Abs_Diff(arr))",
        "num_ids": 116
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return max(arr[-1]-arr[0], arr[-2]-arr[1], arr[-3]-arr[2])\n    #Code here\n",
        "num_ids": 45
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n",
        "num_ids": 70
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    diff = abs(arr[0] - arr[1])\n    for i in range(0, len(arr)-1):\n        if(abs(arr[i] - arr[i+1]) > diff):\n            diff = abs(arr[i] - arr[i+1])\n    return diff\n",
        "num_ids": 81
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1): \n        for j in range(i+1,len(arr)): \n            if abs(arr[i]-arr[j])>max_diff: \n                max_diff=abs(arr[i]-arr[j]) \n    return max_diff \n",
        "num_ids": 83
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = abs(arr[0]-arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i]-arr[j])>max:\n                max = abs(arr[i]-arr[j])\n    return max\n",
        "num_ids": 78
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n",
        "num_ids": 20
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = gcd(a, n)\n    if d == 1:\n        return None\n",
        "num_ids": 24
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return (int(n / a) if a!= 0 else None, n % a) if b == 0 else (n % b, int(n / b))\n",
        "num_ids": 40
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #solution for n = 1\n    if n == 1:\n        return (1, 0)\n",
        "num_ids": 26
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y, gcd = extended_euclidean(a, n)\n    return (x * b, y * a) if gcd == 1 else None\n",
        "num_ids": 41
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if (n - x * a) % b == 0:\n            y = (n - x * a) // b\n            return x, y\n    return None\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0 and n % b == 0:\n        return (n//a, n//b)\n    return None\n",
        "num_ids": 33
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0:\n        return (n/a, 0)\n    for y in range(n):\n        if (n - y * a) % b == 0:\n            return (a, y)\n    return None\n",
        "num_ids": 57
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x * a + y * b == n:\n                return (x, y)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return (0, 1)\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 60
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [num for num in list1 if num not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3=[]\n    for elem in list1:\n        if elem not in list2:\n            list3.append(elem)\n    print(list3)\nlist1=[2,3,4,5]\nlist2=[3,5,6]\nremove_elements(list1, list2)\n",
        "num_ids": 78
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    while list2[0] in list1:\n        list1.remove(list2[0])\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l = []\n    for item in list1:\n        if item not in list2:\n            l.append(item)\n    return l\n",
        "num_ids": 36
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        while x in list1:\n            list1.remove(x)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        while item in list1:\n            list1.remove(item)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\nprint(remove_elements([1,2,3,4,5], [1,2,5]))\n",
        "num_ids": 58
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i in list2:\n            pass\n        else:\n            result.append(i)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = [x for x in list1 if x not in list2]\n    return list3\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n -= 1\n    i = 0\n    summ = 0\n    while n - 2*i >= 0:\n        summ += (n - 2*i)\n        i += 1\n    return summ\n",
        "num_ids": 50
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return n + sum_series(n - 2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize a variable to hold the sum\n    sum = 0\n    # for each number from 0 to n // 2\n    for i in range(n//2 + 1):\n        # add the number to the sum\n        sum += n - 2*i\n    # return the sum\n    return sum\n",
        "num_ids": 70
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #initialise the list\n    list_of_numbers = []\n    #add the values of the list from 0 to n\n    for i in range(0,n):\n        # print(i)\n        list_of_numbers.append(i)\n    #print(list_of_numbers)\n",
        "num_ids": 75
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n * (n + 1)) // 2\n    \ndef sum_series_recursive(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # base case\n    if n < 0:\n        return 0\n    # recursive case\n    return n + sum_series_recursive(n - 2)\n    \ndef mult_series(n):\n    '''\n    Write a function to calculate the product (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n - 1) // 2\n    \ndef mult_series_recursive(n):\n    '''\n    Write a function to calculate the product (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # base case\n    if n < 0:\n        return 0\n    # recursive case\n    return n + mult_series_recursive(n - 2)\n    \ndef get_factorial(n):\n    '''\n    Write a function to compute n factorial.\n    '''\n    # base case\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    # recursive case\n    return n * get_factorial(n - 1)\n    \ndef get_factorial_recursive(n):\n    '''\n    Write a function to compute n factorial.\n    '''\n    # base case\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    # recursive case\n    return n * get_factorial_recursive(n - 1)\n    \ndef main():\n    print(\"sum_series(10):\\t\\t\", sum_series(10))\n    print(\"sum_series(10):\\t\\t\", sum_series(10))\n    print(\"sum_series_recursive(10):\\t\", sum_series_recursive(10))\n    print(\"sum_series_recursive(10):\\t\", sum_series_recursive(10))\n    print(\"mult_series(10):\\t\\t\", mult_series(10))\n    print(\"mult_series(10):\\t\\t\", mult_series(10))\n    print(\"mult_series_recursive(10):\\t\", mult_series_recursive(10))\n    print(\"mult_series_recursive(10):\\t\", mult_series_recursive(10))\n    print(\"get_factorial(5):\\t\\t\", get_factorial(5))\n    print(\"get_factorial(5):\\t\\t\", get_factorial(5))\n    print(\"get_factorial_recursive(5):\\t\", get_factorial_recursive(5))\n    print(\"get_factorial_recursive(5):\\t\", get_factorial_recursive(5))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 357
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    # Recursive case\n    return n + sum_series(n-2)\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    if n == 0:\n        return sum\n    else:\n        for i in range(0, n):\n            sum = sum + (n - 2 * i)\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0,n//2 + 1):\n        sum += n-2*i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = n\n    sum = 0\n    while (i > 0):\n        sum += (n - (2*i))\n        i -= 1\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #test cases\n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10,5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15,3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20,6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n    \n    #returns area for regular polygon with sides of length 10 and 20\n    #print(area_polygon(10, 5))\n    #returns area for regular polygon with sides of length 15 and 30\n    #print(area_polygon(15, 3))\n    #returns area for regular polygon with sides of length 20 and 50\n    #print(area_polygon(20, 6))\n",
        "num_ids": 2000
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s/2\n    b = l/2\n    c = (a**2)/tan(pi/l)\n    return a*b*c\n",
        "num_ids": 39
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 3:\n        print('Error: The length of sides of a polygon must be greater than 3.')\n        return\n    if l % 2 == 0:\n        print('Error: The length of sides of a polygon must be odd.')\n        return\n    A = s * l * tan(pi / l) / 2\n    return round(A, 2)\n",
        "num_ids": 89
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l**2) / (4 * tan(pi / l))\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / 2 * tan(pi / l)\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)*(3**0.5)/4*(l/s)\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l ** 2) / (4 * tan(pi / l))\n    return area\n",
        "num_ids": 27
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * l / 2\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (s > 0 and l > 0):\n        return (s * l ** 2 / (4 * tan(pi / l)))\n    else:\n        return None\n",
        "num_ids": 41
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 3:\n        return None\n    else:\n        return (s**2*(3*tan(pi/l)-4*tan(pi/2))) / (12*tan(pi/l))\n",
        "num_ids": 52
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return False\n    else:\n        result = 0 \n        for i in range(1,int(math.sqrt(n))+1):\n            if n%i == 0:\n                result = result + i + n//i \n        if result == n:\n            return True\n        else:\n            return False\n",
        "num_ids": 96
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = [1]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            a.append(i)\n            a.append(n//i)\n    b = set(a)\n    if sum(b) == n:\n        return 1\n    return 0\n",
        "num_ids": 83
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            sum1 += i\n            sum2 += int(n / i)\n    return sum1 == sum2\ndef armstrong(a):\n    '''\n    Write a function to check if an integer is an Armstrong number or not.\n    '''\n    n = a\n    sum1 = 0\n    while n > 0:\n        d = n % 10\n        sum1 += d**3\n        n = int(n / 10)\n    return sum1 == a\ndef interleave(l1,l2):\n    '''\n    Write a function to interleave two lists.\n    '''\n    return [i for i in l1+l2]\ndef check_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    flag = 0\n    if n<2:\n        flag = 1\n    elif n%2==0:\n        flag = 2\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                flag = 3\n                break\n    if flag==0:\n        return True\n    else:\n        return False\ndef check_super(n):\n    '''\n    Write a function to check if a number is super prime or not.\n    '''\n    flag = 0\n    if n<2:\n        flag = 1\n    elif n%2==0:\n        flag = 2\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                flag = 3\n                break\n    if flag==0:\n        return True\n    else:\n        return False\ndef check_fun(n):\n    '''\n    Write a function to check if a number is a combination of a prime and a power of two or not.\n    '''\n    flag = 0\n    if n<2:\n        flag = 1\n    elif n%2==0:\n        flag = 2\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                flag = 3\n                break\n    if flag==0:\n        return True\n    else:\n        return False\ndef check_super_fun(n):\n    '''\n    Write a function to check if a number is a combination of a super prime and a power of two or not.\n    '''\n    flag = 0\n    if n<2:\n        flag = 1\n    elif n%2==0:\n        flag = 2\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                flag = 3\n                break\n    if flag==0:\n        return True\n    else:\n        return False\ndef krishnamurthy(n):\n    '''\n    Write a function to determine if a number is krishnamurthy or not.\n    '''\n    flag = 0\n    if n<2:\n        flag = 1\n    elif n%2==0:\n        flag = 2\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                flag = 3\n                break\n    if flag==0:\n        return True\n    else:\n        return False\ndef krishnamurthy_num(n):\n    '''\n    Write a function to determine all the krishnamurthy numbers upto a given number.\n    '''\n    for i in range(1,n+1):\n        if krishnamurthy(i):\n            print(i)\ndef hcf(a,b):\n    '''\n    Write a function to determine the highest common factor of two integers.\n    '''\n    min_num = min(a,b)\n    for i in range(min_num,0,-1):\n        if a%i==0 and b%i==0:\n            return i\ndef lcm(a,b):\n    '''\n    Write a function to determine the least common multiple of two integers.\n    '''\n    return int(a*b/hcf(a,b))\ndef sum_of_digits(n):\n    '''\n    Write a function to determine the sum of digits of an integer.\n    '''\n    sum1 = 0\n    while n > 0:\n        d = n%10\n        sum1 += d\n        n = int(n / 10)\n    return sum1\ndef num_digits(n):\n    '''\n    Write a function to determine the number of digits of an integer.\n    '''\n    count = 0\n    while n > 0:\n        n = int(n / 10)\n        count += 1\n    return count\ndef digit_sum(n):\n    '''\n    Write a function to determine the sum of digits of a number represented as a list.\n    '''\n    sum1 = 0\n    while n > 0:\n        d = n%10\n        sum1 += d\n        n = int(n / 10)\n    return sum1\ndef digit_power(n):\n    '''\n    Write a function to determine the sum of digits of a number represented as a list to the power of the number of digits.\n    '''\n    sum1 = 0\n    while n > 0:\n        d = n%10\n        sum1 += d**num_digits(n)\n        n = int(n / 10)\n    return sum1\ndef digit_product(n):\n    '''\n    Write a function to determine the product of digits of a number represented as a list.\n    '''\n    pro = 1\n    while n > 0:\n        d = n%10\n        pro *= d\n        n = int(n / 10)\n    return pro\ndef digital_root(n):\n    '''\n    Write a function to determine the digital root of a number.\n    '''\n    pro = digit_product(n)\n    return pro\ndef digital_sum(n):\n    '''\n    Write a function to determine the digital sum of a number.\n    '''\n    sum1 = 0\n    while n > 0:\n        d = n%10\n        sum1 += digit_sum(d)\n        n = int(n / 10)\n    return sum1\ndef digital_root_sum(n):\n    '''\n    Write a function to determine the digital sum of a number and its digital root.\n    '''\n    sum1 = 0\n    while n > 0:\n        d = n%10\n        sum1 += digit_sum(d) + d\n        n = int(n / 10)\n    return sum1\ndef digital_sum_root(n):\n    '''\n    Write a function to determine the digital sum of a number and its digital root.\n    '''\n    sum1 = 0\n    while n > 0:\n        d = n%10\n        sum1 += digit_sum(d) + d**num_digits(n)\n        n = int(n / 10)\n    return sum1\ndef digital_root_power(n):\n    '''\n    Write a function to determine the digital root of a number and its power of ten.\n    '''\n    sum1 = 0\n    while n > 0:\n        d = n%10\n        sum1 += digit_root(d) + d\n        n = int(n / 10)\n    return sum1\ndef digital_root_sum_power(n):\n    '''\n    Write a function to determine the digital sum of a number and its digital root and power of ten.\n    '''\n    sum1 = 0\n    while n > 0:\n        d = n%10\n        sum1 += digit_sum(d) + d + digit_power(n)\n        n = int(n / 10)\n    return sum1\ndef digital_root_power_sum(n):\n    '''\n    Write a function to determine the digital sum of a number and its digital root, power of ten, and sum of digits.\n    '''\n    sum1 = 0\n    while n > 0:\n        d = n%10\n        sum1 += digit_sum(d) + d + digit_root(d) + d\n        n = int(n / 10)\n    return sum1\ndef digital_power_sum",
        "num_ids": 65
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # get divisors of number n\n    div_n = [1]\n    for i in range(2,int(math.sqrt(n))+1): \n        if n%i == 0:\n            div_n.append(i)\n    div_n.append(n)\n    \n    # get sum of divisors\n    sum_div_n = sum(div_n)\n    \n    # loop through number n\n    for i in range(1,n+1):\n        # get divisors of i\n        div_i = [1]\n        for j in range(2,int(math.sqrt(i))+1):\n            if i%j == 0:\n                div_i.append(j)\n        div_i.append(i)\n        # sum of divisors\n        sum_div_i = sum(div_i)\n        \n        if sum_div_i == sum_div_n:\n            return 1\n        if sum_div_i > sum_div_n:\n            return 0\n            \n        \n    return 0\n",
        "num_ids": 257
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n1,n2=n,n\n    n1_factors,n2_factors=[],[]\n    sum1,sum2=0,0\n    n1_factors.append(1)\n    n2_factors.append(1)\n    for i in range(2,int(math.sqrt(n1))+1):\n        if n1%i==0:\n            n1_factors.append(i)\n            n1_factors.append(int(n1/i))\n    for i in range(2,int(math.sqrt(n2))+1):\n        if n2%i==0:\n            n2_factors.append(i)\n            n2_factors.append(int(n2/i))\n    for i in n1_factors:\n        for j in n2_factors:\n            sum1+=i\n            sum2+=j\n    if sum1==sum2:\n        return True\n    return False\n    \ndef qubo_solver(n):\n    '''\n    Write a function to determine the sum of all values in the square below zero which are also perfect squares.\n    '''\n    sum1,square=[],[]\n    i=1\n    while i<n:\n        square.append(i*i)\n        i+=1\n    for i in range(1,n):\n        sum1.append(square[i-1]+square[i])\n    return sum1\n",
        "num_ids": 71
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(n): \n        sum_divisors = 0\n        for i in range(1, int(n ** 0.5) + 1): \n            if (n % i == 0): \n                if (n // i == i): \n                    sum_divisors += i \n                else: \n                    sum_divisors += (i + n//i) \n        return sum_divisors\n    return sum_divisors(n)\n    \ndef armstrong_number(n): \n    '''\n    Write a program to check whether a number is an Armstrong number or not.\n    '''\n    sum=0\n    temp=n \n    while(temp>0): \n        digit=temp%10\n        sum+=digit**3\n        temp//=10\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set() \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.add(i) \n            divisors.add(int(n / i)) \n    return sum(divisors)\n",
        "num_ids": 78
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total_divisors = [] \n    for i in range(2, int(n**0.5)+1): \n        if n % i == 0: \n            total_divisors.append(i) \n            if n//i!= i: \n                total_divisors.append(n//i) \n    return sum(total_divisors) \ndef amicable_numbers(n): \n    '''\n    Write a function to find all the amicable numbers between two numbers.\n    '''\n    amicable_sum = [] \n    for i in range(2, n+1): \n        if div_sum(div_sum(i)) == i and div_sum(i)!= i: \n            amicable_sum.append(i) \n    return amicable_sum \ndef sum_pandigital(n): \n    '''\n    Write a function to determine if a number is pandigital.\n    '''\n    if len(str(n))!= 9: \n        return False \n    if sorted(list(str(n)))!= ['1', '2', '3', '4', '5', '6', '7', '8', '9']: \n        return False \n    return True \ndef digit_sum(n): \n    '''\n    Write a function to determine if the sum of each digit is equal.\n    '''\n    digit_sum = 0 \n    for digit in list(str(n)): \n        digit_sum += int(digit) \n    return digit_sum \ndef digit_multiply(n): \n    '''\n    Write a function to determine if the sum of the product of each digit is equal.\n    '''\n    digit_product = 1 \n    for digit in list(str(n)): \n        digit_product *= int(digit) \n    return digit_product \ndef palindrome_product(n): \n    '''\n    Write a function to determine if the product of the palindromes is a palindrome.\n    '''\n    palindrome_product = 1 \n    for i in range(1, n+1): \n        if digit_sum(i) == digit_sum(div_sum(i)): \n            palindrome_product *= i \n    return palindrome_product \ndef abundant(n): \n    '''\n    Write a function to determine if a number is abundant.\n    '''\n    sum_divisors = 0 \n    for i in range(1, n+1): \n        if n % i == 0: \n            sum_divisors += i \n    return sum_divisors > n \ndef perfect_number(n): \n    '''\n    Write a function to determine if a number is perfect.\n    '''\n    sum_divisors = 1 \n    for i in range(2, int(n**0.5)+1): \n        if n % i == 0: \n            sum_divisors += i \n            if n//i!= i: \n                sum_divisors += n//i \n    return sum_divisors == n \ndef divisor_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors is equal.\n    '''\n    sum_divisors = 0 \n    for i in range(1, n+1): \n        if n % i == 0: \n            sum_divisors += i \n    return sum_divisors \ndef amicable_numbers_sum(n): \n    '''\n    Write a function to determine if the sum of the amicable numbers is equal.\n    '''\n    amicable_sum = 0 \n    for i in range(1, n+1): \n        if div_sum(i) == div_sum(div_sum(i)): \n            if i!= div_sum(i) and i!= div_sum(div_sum(i)): \n                amicable_sum += i \n                amicable_sum += div_sum(i) \n    return amicable_sum \ndef abundant_numbers_sum(n): \n    '''\n    Write a function to determine if the sum of the abundant numbers is equal.\n    '''\n    abundant_sum = 0 \n    for i in range(1, n+1): \n        if abundant(i): \n            abundant_sum += i \n    return abundant_sum \ndef super_palindromes_sum(n): \n    '''\n    Write a function to determine if the sum of the palindromes which are products of two abundant numbers is equal.\n    '''\n    super_palindromes_sum = 0 \n    for i in range(1, n+1): \n        if abundant(i) and palindrome_product(i): \n            super_palindromes_sum += i \n    return super_palindromes_sum \ndef fibonacci_sum(n): \n    '''\n    Write a function to determine if the sum of the fibonacci numbers is equal.\n    '''\n    fibonacci_sum = 0 \n    a, b = 0, 1 \n    while b < n: \n        a, b = b, a+b \n        fibonacci_sum += a \n    return fibonacci_sum \ndef twin_prime_sum(n): \n    '''\n    Write a function to determine if the sum of the twin primes is equal.\n    '''\n    twin_prime_sum = 0 \n    for i in range(1, n+1): \n        if super_palindromes_sum(i): \n            twin_prime_sum += i \n    return twin_prime_sum \ndef quad_sum(n): \n    '''\n    Write a function to determine if the sum of the quadratic primes is equal.\n    '''\n    quad_sum = 0 \n    for i in range(1, n+1): \n        if perfect_number(i): \n            if quad_sum == 0: \n                quad_sum = i \n            else: \n                quad_sum += i \n    return quad_sum \ndef quad_product(n): \n    '''\n    Write a function to determine if the product of the quadratic primes is equal.\n    '''\n    quad_product = 1 \n    for i in range(1, n+1): \n        if perfect_number(i): \n            quad_product *= i \n    return quad_product \ndef abundant_squares_sum(n): \n    '''\n    Write a function to determine if the sum of the abundant squares is equal.\n    '''\n    abundant_squares_sum = 0 \n    for i in range(1, n+1): \n        if abundant(i**2): \n            abundant_squares_sum += i \n    return abundant_squares_sum \ndef abundant_squares_product(n): \n    '''\n    Write a function to determine if the product of the abundant squares is equal.\n    '''\n    abundant_squares_product = 1 \n    for i in range(1, n+1): \n        if abundant(i**2): \n            abundant_squares_product *= i \n    return abundant_squares_product \ndef pandigital_products_sum(n): \n    '''\n    Write a function to determine if the sum of the pandigital products is equal.\n    '''\n    pandigital_products_sum = 0 \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if sorted(list(str(i*j))) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']: \n                pandigital_products_sum += i*j \n    return pandigital_products_sum \ndef pandigital_products_product(n): \n    '''\n    Write a function to determine if the product of the pandigital products is equal.\n    '''\n    pandigital_products_product = 1 \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if sorted(list",
        "num_ids": 48
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1,n):\n        if n%i==0:\n            divs.append(i)\n    return(sum(divs)+1)\n",
        "num_ids": 48
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # n = 12\n    n_list = [x for x in range(1,n//2+1) if n % x == 0]\n    n_list.append(n)\n    s = sum(n_list)\n    # print(n_list)\n    # print(s)\n    l = [x for x in range(1,s//2+1) if s % x == 0]\n    if sum(l) == s:\n        return True\n    else:\n        return False\n",
        "num_ids": 120
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic = {}\n    for i in str1:\n        if i.lower() not in dic:\n            dic[i.lower()] = str1.count(i.lower())\n    return dic\n",
        "num_ids": 53
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for ch in str1:\n        if ch.isalpha():\n            if ord(ch) == ord(ch.upper()):\n                count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([x for x in str1 if x.lower() == x[0]])\n",
        "num_ids": 24
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == chr(ord('a') + j) or str1[i] == chr(ord('A') + j):\n                count += 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1=str1.lower()\n    letter=list(set(str1))\n    count=0\n    for i in range(0,len(letter)):\n        if letter[i]!=' ':\n            for j in range(0,len(str1)):\n                if letter[i]==str1[j]:\n                    count=count+1\n    return count\n",
        "num_ids": 92
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0, 'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0, 'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0, 'V': 0, 'W': 0, 'X': 0, 'Y': 0, 'Z': 0}\n    for i in str1.lower():\n        if i in dict:\n            dict[i] += 1\n    print(dict)\n    return dict\n",
        "num_ids": 300
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if len(str1)>0:\n        characters_position=[]\n        for i in range(len(str1)):\n            if str1[i].isalpha():\n                characters_position.append(str1[i])\n",
        "num_ids": 59
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import re\n    match_list = []\n    match_list = [len(match[0]) for match in re.finditer(r'([a-zA-Z])', str1.lower())]\n    return sum(match_list)\n",
        "num_ids": 60
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    print('count character at same position')\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1)):\n            if str1[i] == str1[j]:\n                count += 1\n    print(count)\n    return\n    \ncount_char_position(\"aBcbD\")\ncount_char_position(\"abcdefghijklmnopqrstuvwxyz\")\ncount_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n",
        "num_ids": 148
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet_index = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    alphabet_count = {}\n    for i in alphabet_index:\n        alphabet_count[i] = 0\n    for i in str1.lower():\n        if i in alphabet_index:\n            alphabet_count[i] += 1\n    return alphabet_count\n",
        "num_ids": 202
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    table = {}\n    for num in A:\n        if num not in table:\n            table[num] = 1\n        else:\n            table[num] += 1\n    count = 0\n    for num in table:\n        if table[num] % 2 == 0:\n            count += table[num]//2\n    return count \n",
        "num_ids": 81
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A:\n        for j in A:\n            if i ^ j == 0:\n                count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    d = {}\n    for i in A:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    c = 0\n    for i in d:\n        if (d[i]%2 == 0):\n            c += d[i]//2\n    return c\n",
        "num_ids": 80
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    ans = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                ans += 1\n    return ans\n    \nA = [1,2,3,4,5,6]\n",
        "num_ids": 82
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if(A[i]^A[j]%2 == 0):\n                even_count += 1\n    return even_count\n",
        "num_ids": 68
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor_count = 0\n    # Initialise a dict to hold all the values that are already seen\n    seen = {}\n    for a in A:\n        b = a ^ even\n        if b in seen:\n            even_xor_count += 1\n        else:\n            seen[a] = True\n    return even_xor_count\n",
        "num_ids": 85
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n",
        "num_ids": 8
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n    return even_count\n",
        "num_ids": 38
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if((A[i] ^ A[j]) % 2 == 0):\n                result += 1\n",
        "num_ids": 58
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while(1):\n        i += 1\n        n = n >> 1\n        if n == 0:\n            return 2**i\n",
        "num_ids": 38
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n - 1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #return 2**((len(bin(n))-1)-(n-1))\n    return 1<<(n-1).bit_length()\n",
        "num_ids": 37
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n==0 else 2**(n-1).bit_length()\n",
        "num_ids": 22
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**int(math.ceil(math.log2(n)))\n",
        "num_ids": 21
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while (2**i < n): \n        i = i + 1\n    return (2**i)\n",
        "num_ids": 33
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1).bit_length()\n",
        "num_ids": 31
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given positive integer n.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n",
        "num_ids": 29
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n-1).bit_length()\n    \n    \ndef count_trailing_zeros(n):\n    '''\n    Write a python function to count the number of trailing zeros in a factorial of a given number.\n    '''\n    x=0\n    while n>=5:\n        n = n//5\n        x+=n\n    return x\n        \n    \ndef get_nth_bit(n):\n    '''\n    Write a python function to return the nth bit of a given input. \n    Note : The first bit is the least significant bit.\n    '''\n    if n&(n-1)==0:\n        return 0\n    else:\n        return 1\n    \n    \ndef swap_bits(n):\n    '''\n    Write a python function to swap the bits of a given input.\n    '''\n    return int('0b'+('10'*(n//2))+(('1' if n&1 else '0')*(n//2)),2)\n    \n    \ndef update_nth_bit(n,b):\n    '''\n    Write a python function to update the nth bit of a given input.\n    '''\n    return int('0b'+('0'*(n//2))+('1' if n&1 and b else '0')+('0'*(n//2)),2)\n    \n    \ndef flip_bit(n):\n    '''\n    Write a python function to flip the bits of a given input.\n    '''\n    return int('0b'+('1' if n&1 else '0')+('0'*(n//2)),2)\n    \n    \ndef set_bit(n):\n    '''\n    Write a python function to set the nth bit of a given input.\n    '''\n    return n|1\n    \n    \ndef clear_bit(n):\n    '''\n    Write a python function to clear the nth bit of a given input.\n    '''\n    return n&(n-1)\n    \n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check whether a given input is a power of 2 or not.\n    '''\n    return not(n&(n-1))\n    \n    \ndef is_sum_of_powers_of_2(n):\n    '''\n    Write a python function to check whether a given input is a sum of powers of 2 or not.\n    '''\n    return is_power_of_2(n) or is_power_of_2(n-1)\n    \n    \ndef set_bit_at_index(n,i):\n    '''\n    Write a python function to set the i-th bit of a given input.\n    '''\n    return (n|(1<<i))\n    \n    \ndef clear_bit_at_index(n,i):\n    '''\n    Write a python function to clear the i-th bit of a given input.\n    '''\n    return n&(~(1<<i))\n    \n    \ndef flip_bit_at_index(n,i):\n    '''\n    Write a python function to flip the i-th bit of a given input.\n    '''\n    return n^(1<<i)\n    \n    \ndef set_bit_at_most_k_positions(n,k,i):\n    '''\n    Write a python function to set the i-th bit of a given input if it is not set or clear the i-th bit of a given input if it is set.\n    '''\n    return (n|(1<<i)) if (n&(1<<i))==0 else (n&(~(1<<i)))\n    \n    \ndef set_bit_at_least_k_positions(n,k,i):\n    '''\n    Write a python function to set the i-th bit of a given input if it is set or clear the i-th bit of a given input if it is not set.\n    '''\n    return (n|(1<<i)) if (n&(1<<i))!=0 else (n&(~(1<<i)))\n    \n    \ndef set_bit_at_index(n,i):\n    '''\n    Write a python function to set the i-th bit of a given input.\n    '''\n    return (n|(1<<i))\n    \n    \ndef clear_bit_at_index(n,i):\n    '''\n    Write a python function to clear the i-th bit of a given input.\n    '''\n    return n&(~(1<<i))\n    \n    \ndef flip_bit_at_index(n,i):\n    '''\n    Write a python function to flip the i-th bit of a given input.\n    '''\n    return n^(1<<i)\n    \n    \ndef toggle_bit(n,i):\n    '''\n    Write a python function to toggle the i-th bit of a given input.\n    '''\n    return n^(1<<i)\n    \n    \ndef get_index_of_least_significant_bit(n,i):\n    '''\n    Write a python function to get the index of the least significant bit in a number.\n    '''\n    return int(math.log2(n&(-n)))\n    \n    \ndef get_index_of_most_significant_bit(n,i):\n    '''\n    Write a python function to get the index of the most significant bit in a number.\n    '''\n    return int(math.log2((n>>i)<<i))\n    \n    \ndef right_shift(n,i):\n    '''\n    Write a python function to shift the bits of a given input to the right.\n    '''\n    return (n>>i)\n    \n    \ndef left_shift(n,i):\n    '''\n    Write a python function to shift the bits of a given input to the left.\n    '''\n    return (n<<i)\n    \n    \ndef and_n_bits(n,i):\n    '''\n    Write a python function to get the value of i-th bit of a given input after applying a logical AND operation.\n    '''\n    return n&(1<<i)\n    \n    \ndef or_n_bits(n,i):\n    '''\n    Write a python function to get the value of i-th bit of a given input after applying a logical OR operation.\n    '''\n    return n|(1<<i)\n    \n    \ndef xor_n_bits(n,i):\n    '''\n    Write a python function to get the value of i-th bit of a given input after applying a logical XOR operation.\n    '''\n    return n^(1<<i)\n    \n    \ndef shift_left_by_one(n):\n    '''\n    Write a python function to shift the bits of a given input to the left by one bit.\n    '''\n    return n<<1\n    \n    \ndef shift_right_by_one(n):\n    '''\n    Write a python function to shift the bits of a given input to the right by one bit.\n    '''\n    return n>>1\n    \n    \ndef shift_left(n,i):\n    '''\n    Write a python function to shift the bits of a given input to the left by i-th bit.\n    '''\n    return n<<i\n    \n    \ndef shift_right(n,i):\n    '''\n    Write a python function to shift the bits of a given input to the right by i-th bit.\n    '''\n    return n>>i\n    \n    \ndef set_bit(n,i):\n    '''\n    Write a python function to set the i-th bit of a given input.\n    '''\n    return n|(1<<i)\n    \n    \ndef clear_bit(n,i):\n    '''\n    Write a python function to clear the i-th bit of a given input.\n    '''\n    return n&(~(1<<i))\n    \n    \ndef toggle_bit(n,i):\n    '''\n    Write a python function to toggle the i-th bit of a given input.\n    '''\n    return n^(1<<i)\n    \n    \ndef is_bit_set(n,i):\n    '''\n    Write a python function to check whether the i-th bit of ",
        "num_ids": 17
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if x==a[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for ele in a:\n        if ele == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if(i==x):\n            count=count+1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n    return count",
        "num_ids": 29
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a:\n        return 0\n    else:\n        count=0\n        for i in range(len(a)):\n            if x==a[i]:\n                count+=1\n        return count\n",
        "num_ids": 53
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s += list1[i]\n    return s\n    \nl = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(sum_range_list(l, 0, 4))         \nprint(sum_range_list(l, 0, 5))\nprint(sum_range_list(l, 0, 6))\n",
        "num_ids": 99
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum = 0\n    for i in range(m, n):\n        sum = sum + list1[i]\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = 0\n    for i in range(m, n
        "num_ids": 2318
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_num = 0\n    for i in range(m,n+1):\n        sum_num += list1[i]\n    return sum_num\n",
        "num_ids": 39
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    l = len(list1)\n    total = 0\n    if m < 0 or m > l or n < 0 or n > l:\n        return \"Incorrect index(es).\"\n    else:\n        if m <= n:\n            for i in range(m, n+1):\n                total += list1[i]\n        else:\n            for i in range(m, n-1, -1):\n                total += list1[i]\n        return total\n",
        "num_ids": 111
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_of_list = 0\n    for index in range(m, n):\n        sum_of_list += list1[index]\n    return sum_of_list\n",
        "num_ids": 43
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if m is less than 0\n    if m < 0:\n        print(\"Invalid m\")\n        return 0\n    # Check if n is greater than the length of list1\n    if n > len(list1):\n        print(\"Invalid n\")\n        return 0\n    # Check if m > n\n    if m > n:\n        print(\"Invalid range\")\n        return 0\n    # else\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 126
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        if list1[i] in range(m,n+1):\n            sum_list.append(list1[i])\n    return sum_list\n",
        "num_ids": 58
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of pentagon\n    perimeter = 0\n    for i in range(5):\n        perimeter += a\n    return perimeter\n",
        "num_ids": 37
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5*a\n    return p\ndef area_pentagon(a):\n    '''\n    Write a function to calculate the area of a regular pentagon. \n    '''\n    A = a**2 * math.tan(math.pi/5)\n    return A\ndef distance_point_line(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the distance between a point and a line.\n    '''\n    a = abs((y2-y1)*x3-(y3-y1)*x2+(x2-x1)*y3+(x3-x1)*y2)/math.sqrt((y2-y1)**2+(x2-x1)**2)\n    return a\ndef distance_point_line2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the distance between a point and a line.\n    '''\n    if x2-x1!= 0:\n        m = (y2-y1)/(x2-x1)\n    else:\n        m = (y3-y1)/(x3-x1)\n    return abs(m*x1-y1+m*x2-y2)/math.sqrt(m**2+1)\ndef area_of_triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    a = distance_point_line(x1,y1,x2,y2,x3,y3)\n    b = distance_point_line(x1,y1,x2,y2,x3,y3)\n    c = distance_point_line2(x1,y1,x2,y2,x3,y3)\n    p = a+b+c\n    return p*0.5\ndef area_of_circle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    p = area_of_triangle(x1,y1,x2,y2,x3,y3)\n    r = math.sqrt(p/math.pi)\n    return r\ndef area_of_square(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    a = abs(x2-x1)\n    b = abs(y2-y1)\n    return a*b\ndef area_of_rectangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    a = abs(x3-x1)\n    b = abs(y3-y1)\n    return a*b\ndef area_of_parallelogram(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    a = abs(x2-x1)\n    b = abs(y2-y1)\n    c = abs(x3-x1)\n    d = abs(y3-y1)\n    return a*b\ndef area_of_trapezoid(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    a = distance_point_line(x1,y1,x2,y2,x3,y3)\n    b = distance_point_line(x1,y1,x2,y2,x3,y3)\n    c = distance_point_line2(x1,y1,x2,y2,x3,y3)\n    p = a+b+c\n    return p*0.5\ndef area_of_ellipse(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    a = distance_point_line(x1,y1,x2,y2,x3,y3)\n    b = distance_point_line(x1,y1,x2,y2,x3,y3)\n    p = a*b\n    r = math.sqrt(p/(math.pi*2))\n    return r\ndef area_of_triangle2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    p = area_of_triangle(x1,y1,x2,y2,x3,y3)\n    r = math.sqrt(p/3)\n    return r\ndef area_of_parallelogram2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    p = area_of_parallelogram(x1,y1,x2,y2,x3,y3)\n    r = math.sqrt(p/4)\n    return r\ndef area_of_square2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    p = area_of_square(x1,y1,x2,y2,x3,y3)\n    r = math.sqrt(p/2)\n    return r\ndef area_of_rectangle2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    p = area_of_rectangle(x1,y1,x2,y2,x3,y3)\n    r = math.sqrt(p/2)\n    return r\ndef area_of_trapezoid2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    p = area_of_trapezoid(x1,y1,x2,y2,x3,y3)\n    r = math.sqrt(p/2)\n    return r\ndef area_of_ellipse2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    p = area_of_ellipse(x1,y1,x2,y2,x3,y3)\n    r = math.sqrt(p/2)\n    return r\ndef area_of_circle2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    p = area_of_circle(x1,y1,x2,y2,x3,y3)\n    r = math.sqrt(p/2)\n    return r\ndef calculate_area(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    #area of triangle: a = 1/2*b*h\n    #a = 1/2*(x2-x1)*(y3-y1)\n    #b = 1/2*(x3-x2)*(y4-y2)\n    #h = 1/2*(x3-x1)*(y4-y1)\n    a = area_of_triangle2(x1,y1,x2,y2,x3,y3)\n    b = area_of_triangle2(x2,y2,x3,y3,x4,y4)\n    c = area_of_triangle2(x3,y3,",
        "num_ids": 164
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 0\n    for i in range(len(a)):\n        perimeter += a[i]\n    return perimeter\n",
        "num_ids": 33
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3)/4*math.pow(a,2)\ndef volume_hexagon(a):\n    '''\n    Write a function to find the volume of a regular hexagon from the length of its sides.\n    '''\n    return 6/3*math.pow(a,2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*a\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3)*math.pow(a,2)\ndef volume_heptagon(a):\n    '''\n    Write a function to find the volume of a regular heptagon from the length of its sides.\n    '''\n    return 7/3*math.pow(a,2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7*a\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return math.sqrt(3)*math.pow(a,2)\ndef volume_octagon(a):\n    '''\n    Write a function to find the volume of a regular octagon from the length of its sides.\n    '''\n    return 8/3*math.pow(a,2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return math.sqrt(3)*math.pow(a,2)\ndef volume_nonagon(a):\n    '''\n    Write a function to find the volume of a regular nonagon from the length of its sides.\n    '''\n    return 9/3*math.pow(a,2)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 9*a\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return math.sqrt(3)*math.pow(a,2)\ndef volume_decagon(a):\n    '''\n    Write a function to find the volume of a regular decagon from the length of its sides.\n    '''\n    return 10/3*math.pow(a,2)\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 10*a\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return math.sqrt(3)*math.pow(a,2)\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a regular circle from the length of its radius.\n    '''\n    return 2*math.pi*a\ndef area_circle(a):\n    '''\n    Write a function to find the area of a regular circle from the length of its radius.\n    '''\n    return math.pi*math.pow(a,2)\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a regular cube from the length of its sides.\n    '''\n    return math.pow(a,3)\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a regular cube from the length of its sides.\n    '''\n    return 6*a\ndef area_cube(a):\n    '''\n    Write a function to find the area of a regular cube from the length of its sides.\n    '''\n    return math.pow(a,3)\ndef volume_tetrahedron(a):\n    '''\n    Write a function to find the volume of a regular tetrahedron from the length of its sides.\n    '''\n    return (math.pow(a,3)/6)\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return 4*a\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return math.pow(a,3)/6\ndef volume_dodecahedron(a):\n    '''\n    Write a function to find the volume of a regular dodecahedron from the length of its sides.\n    '''\n    return (math.pow(a,3)/12)\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to find the perimeter of a regular dodecahedron from the length of its sides.\n    '''\n    return 5*a\ndef area_dodecahedron(a):\n    '''\n    Write a function to find the area of a regular dodecahedron from the length of its sides.\n    '''\n    return math.pow(a,3)/12\ndef volume_icosahedron(a):\n    '''\n    Write a function to find the volume of a regular icosahedron from the length of its sides.\n    '''\n    return (math.pow(a,3)/12)\ndef perimeter_icosahedron(a):\n    '''\n    Write a function to find the perimeter of a regular icosahedron from the length of its sides.\n    '''\n    return 5*a\ndef area_icosahedron(a):\n    '''\n    Write a function to find the area of a regular icosahedron from the length of its sides.\n    '''\n    return math.pow(a,3)/12\ndef volume_cube_section(a):\n    '''\n    Write a function to find the volume of a regular cube section from the length of its radius.\n    '''\n    return (math.pow(a,3)/4)\ndef perimeter_cube_section(a):\n    '''\n    Write a function to find the perimeter of a regular cube section from the length of its radius.\n    '''\n    return 6*a\ndef area_cube_section(a):\n    '''\n    Write a function to find the area of a regular cube section from the length of its radius.\n    '''\n    return math.pow(a,3)/4\ndef volume_cube_cluster(a):\n    '''\n    Write a function to find the volume of a regular cube cluster from the length of its sides.\n    '''\n    return (math.pow(a,3)/3)\ndef perimeter_cube_cluster(a):\n    '''\n    Write a function to find the perimeter of a regular cube cluster from the length of its sides.\n    '''\n    return 6*a\ndef area_cube_cluster(a):\n    '''\n    Write a function to find the area of a regular cube cluster from the length of its sides.\n    '''\n    return math.pow(a,3)/3\ndef volume_cube_stack(a):\n    '''\n    Write a function to find the volume of a regular cube stack from the length of its sides.\n    '''\n    return math.pow(a,3)\ndef perimeter_cube_stack(a):\n    '''\n    Write a function to find the perimeter of a regular cube stack from the length of its sides.\n    '''\n    return 12*a\ndef area_cube_stack(a):\n    '''\n    Write a function to find the area of a regular cube stack from the length of its sides.\n    ''",
        "num_ids": 25
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (25.00*math.sqrt(5))/4\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(\"\\n***** Pentagon Perimeter *****\")\n    side = float(input(\"Enter the side length: \"))\n    perimeter = 5*side\n    print(\"\\nThe perimeter of the pentagon is {}.\".format(perimeter))\n    return perimeter\n",
        "num_ids": 63
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a >= 0:\n        return 5 * a\n    else:\n        return \"Invalid input\"\n",
        "num_ids": 26
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    try:\n        return s.count('std')\n    except:\n        return -1\n",
        "num_ids": 24
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\nprint(count_occurance('Hello, I am std. I am learning Python'))\n",
        "num_ids": 64
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    print(s.count('std'))\n    \n    \n    \ndef get_unique_characters(s):\n    '''\n    Write a function to get the unique characters in a given string.\n    '''\n    print(list(set(s)))\n    \n    \n    \ndef replace_vowel_with_x(s):\n    '''\n    Write a function to replace vowels in a string with 'x'\n    '''\n    vowels = ['a','e','i','o','u']\n    for x in s:\n        if x in vowels:\n            s = s.replace(x,'x')\n    print(s)\n    \n    \n    \ndef get_text_length(s):\n    '''\n    Write a function to return the length of a text which contains new line and tab characters.\n    '''\n    s = s.split('\\n')\n    s = sum(len(x) for x in s)\n    s = s + s.count('\\t')\n    print(s)\n    \n    \n    \ndef sort_words_alphabetically(s):\n    '''\n    Write a function to sort words in a string\n    '''\n    s = s.split(' ')\n    s.sort()\n    print(' '.join(s))\n    \n    \n    \ndef replace_characters(s):\n    '''\n    Write a function to replace a character in a string with a character.\n    '''\n    s = list(s)\n    index = 0\n    for i in s:\n        if i == 'a':\n            s[index] = '@'\n        index += 1\n    print(''.join(s))\n    \n    \n    \ndef count_freq(s):\n    '''\n    Write a function to count the frequency of each character in a string.\n    '''\n    s = list(s)\n    freq = {}\n    for i in s:\n        if i not in freq:\n            freq[i] = s.count(i)\n    print(freq)\n    \n    \n    \ndef find_word_count(s):\n    '''\n    Write a function to return the count of words in a given string.\n    '''\n    s = s.split(' ')\n    print(len(s))\n    \n    \n    \ndef find_char_count(s):\n    '''\n    Write a function to return the count of characters in a given string.\n    '''\n    s = list(s)\n    print(len(s))\n    \n    \n    \ndef get_words_containing_substring(s,substring):\n    '''\n    Write a function to return the words in a given string containing the substring.\n    '''\n    s = s.split(' ')\n    print(s)\n    for x in s:\n        if substring in x:\n            print(x)\n            \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to return true if the given string is a palindrome.\n    '''\n    s = list(s)\n    s = list(reversed(s))\n    print(s)\n    if s == s:\n        print('True')\n    else:\n        print('False')\n        \n        \n        \ndef find_substrings_with_given_char(s,char):\n    '''\n    Write a function to find the number of times the given character occurs in the given string.\n    '''\n    s = list(s)\n    index = 0\n    count = 0\n    for i in s:\n        if i == char:\n            count += 1\n        index += 1\n    print(count)\n    \n    \n    \ndef find_characters_with_only_upper_case(s):\n    '''\n    Write a function to find all the characters that are having only uppercase letters in a given string.\n    '''\n    s = list(s)\n    for x in s:\n        if x.islower():\n            s.remove(x)\n    print(s)\n    \n    \n    \ndef find_characters_with_only_lower_case(s):\n    '''\n    Write a function to find all the characters that are having only lowercase letters in a given string.\n    '''\n    s = list(s)\n    for x in s:\n        if x.isupper():\n            s.remove(x)\n    print(s)\n    \n    \n    \ndef find_largest_word(s):\n    '''\n    Write a function to find the longest word in a given string.\n    '''\n    s = s.split(' ')\n    largest_word = 0\n    for i in s:\n        if len(i) > largest_word:\n            largest_word = len(i)\n            print(i)\n    \n    \n    \ndef remove_characters_from_string(s,char):\n    '''\n    Write a function to remove all occurrences of a character in a string.\n    '''\n    s = list(s)\n    for i in s:\n        if i == char:\n            s.remove(i)\n    print(''.join(s))\n    \n    \n    \ndef replace_all_occurance_with_char(s,char):\n    '''\n    Write a function to replace all occurrences of a character in a string with another character.\n    '''\n    s = list(s)\n    for i in s:\n        if i == char:\n            s.remove(i)\n            s.append(char)\n    print(''.join(s))\n    \n    \n    \ndef find_longest_substring_without_repeating_characters(s):\n    '''\n    Write a function to find the longest substring without repeating characters.\n    '''\n    s = list(s)\n    longest_substring = 0\n    for i in s:\n        index = 0\n        for x in s:\n            if i == x:\n                index += 1\n                if index > longest_substring:\n                    longest_substring = index\n            else:\n                break\n    print(longest_substring)\n    \n    \n    \ndef substring_after_replacing_characters(s,char):\n    '''\n    Write a function to find the longest substring with no repeating characters in a given string.\n    '''\n    s = list(s)\n    index = 0\n    longest_substring = 0\n    for i in s:\n        if i == char:\n            index = 0\n            print(index)\n        index += 1\n        if index > longest_substring:\n            longest_substring = index\n    print(longest_substring)\n    \n    \n    \ndef is_anagram(s1,s2):\n    '''\n    Write a function to find if two strings are anagram of each other.\n    '''\n    s1 = list(s1)\n    s2 = list(s2)\n    s1.sort()\n    s2.sort()\n    print(s1)\n    print(s2)\n    if s1 == s2:\n        print('True')\n    else:\n        print('False')\n    \n    \n    \ndef find_word_with_max_occurance(s):\n    '''\n    Write a function to find the word with maximum occurance in a given string.\n    '''\n    s = s.split(' ')\n    s.sort(reverse=True,key=len)\n    for x in s:\n        if len(x) == len(s[0]):\n            print(x)\n            break\n    \n    \n    \ndef count_numbers(s):\n    '''\n    Write a function to count the number of numbers in a given string.\n    '''\n    s = list(s)\n    count = 0\n    for i in s:\n        if i.isdigit():\n            count += 1\n    print(count)\n    \n    \n    \ndef is_anagram_of_palindrome(s):\n    '''\n    Write a function to check if a given string is an anagram of a palindrome.\n    '''\n    s = list(s)\n    s = list(reversed(s))\n    s.sort()\n    s = ''.join(s)\n    if s == s[::-1]:\n        print('True')\n    else:\n        print('False')\n    ",
        "num_ids": 66
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    print('Number of Occurence is : ', s.count('std'))\n",
        "num_ids": 21
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #num = 0\n    #for i in range(0, len(s)-3):\n    #    if s[i:i+3] =='std':\n    #        num += 1\n    #return num\n    return s.count('std')\n",
        "num_ids": 62
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Method 1\n    test_tuple = tuple(test_tuple)\n    return(type(test_tuple[0])) == type(test_tuple[1]) == type(test_tuple[2]) == type(test_tuple[3])\n",
        "num_ids": 65
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = tuple(test_tuple)\n    if len(set(test_tuple)) == 1:\n        return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    print(f'Given tuple is: {test_tuple}')\n    try:\n        for i in test_list:\n            if type(i) == type(test_list[0]):\n                print('All elements are of same data type.')\n            else:\n                print('All elements are not of same data type.')\n    except TypeError as e:\n        print(f'Error: {e}')\n",
        "num_ids": 113
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return type(test_tuple[0]) == type(test_tuple[1]) == type(test_tuple[2]) == type(test_tuple[3]) == type(test_tuple[4]) == type(test_tuple[5]) == type(test_tuple[6]) == type(test_tuple[7]) == type(test_tuple[8]) == type(test_tuple[9]) == type(test_tuple[10]) == type(test_tuple[11])\n",
        "num_ids": 124
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"Original tuple: \", test_tuple)\n    print(\"\\n\")\n    \n    if len(set(test_tuple)) == 1:\n        print(\"All elements in tuple are of same data type.\")\n    else:\n        print(\"Elements in tuple are of different data types.\")\n    \n    print(\"\\n\")\n    \n    return None\n",
        "num_ids": 86
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(x, type(test_tuple[0])) for x in test_tuple)\n",
        "num_ids": 30
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    \n    tup=tuple(test_tuple)\n    #print(type(tup))\n    \n    lst=list(tup)\n    \n    if type(lst[0])==type(lst[1])==type(lst[2])==type(lst[3])==type(lst[4])==type(lst[5])==type(lst[6])==type(lst[7])==type(lst[8])==type(lst[9]):\n        print(\"all elements have same data type\")\n    else:\n        print(\"Not all elements have same data type\")\n",
        "num_ids": 153
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= tuple_type:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    global lst\n    for i in test_tuple:\n        if type(i) == list or type(i) == tuple:\n            lst.append(i)\n    return lst\n",
        "num_ids": 48
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if len(test_tuple) == 0:\n            return False\n        if len(test_tuple) == 1:\n            return True\n        \n        count = 0\n        for item in test_tuple:\n            if count == 0:\n                check_type = type(item)\n                count += 1\n                continue\n            elif type(item)!= check_type:\n                return False\n            count += 1\n        return True\n    except Exception as e:\n        print(\"Exception in check_type\", e)\n        return False\n",
        "num_ids": 131
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i, j = 0, n - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if x > arr[n - 1]:\n        return False\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0 or n == 1:\n        return False\n    start = 0\n    end = n - 1\n    mid = start + ((end - start) // 2)\n    while start <= end:\n        if arr[mid] == x:\n            return True\n        if arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n        mid = start + ((end - start) // 2)\n",
        "num_ids": 106
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x in arr:\n        if arr.count(x) > n/2:\n            return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x >= arr[0] and x <= arr[n - 1]:\n        return True if arr.count(x) > n/2 else False\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    \n    if x == arr[n//2]:\n        return True\n    \n    if arr[0] == x:\n        return is_majority(arr[1:n//2], n//2, x)\n    elif arr[n//2+1] == x:\n        return is_majority(arr[n//2+1:n], n-n//2, x)\n    else:\n        return False\n",
        "num_ids": 127
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n-1\n    #print(n)\n    while i <= j:\n        if arr[i] == x and arr[j]!= x:\n            #print('left')\n            return False\n        if arr[i]!= x and arr[j] == x:\n            #print('right')\n            return False\n        if arr[i] == x and arr[j] == x:\n            #print('equal')\n            return True\n        i += 1\n        j -= 1\n    return False\n",
        "num_ids": 128
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[0] == x:\n        return True\n    return is_majority(arr[1:], n-1, x)\n",
        "num_ids": 45
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return n.bit_count()\n",
        "num_ids": 11
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize the result\n    count = 0\n    while (n):\n        # check the right most set bit\n        count += 1\n        # clear the right most set bit\n        n &= (n - 1)\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while n: \n        set_bits += n & 1\n        n >>= 1\n    return set_bits\n",
        "num_ids": 36
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \ndef add_digits(n):\n    '''\n    Write a python function to add all digits of a number.\n    '''\n    sum = 0\n    while(n):\n        sum += n % 10\n        n //= 10\n    return sum\ndef find_max(n):\n    '''\n    Write a python function to find the maximum digit in a number.\n    '''\n    max = 0\n    while(n):\n        if max < n % 10:\n            max = n % 10\n        n //= 10\n    return max\ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert a number from decimal to binary.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(int(n / 2)) \ndef binary_to_decimal(n):\n    '''\n    Write a python function to convert a number from binary to decimal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(n % 10) + 2 * binary_to_decimal(int(n / 10)) \ndef decimal_to_octal(n):\n    '''\n    Write a python function to convert a number from decimal to octal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 8 + 10 * decimal_to_octal(int(n / 8)) \ndef octal_to_decimal(n):\n    '''\n    Write a python function to convert a number from octal to decimal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(n % 10) + 8 * octal_to_decimal(int(n / 8)) \ndef decimal_to_hexadecimal(n):\n    '''\n    Write a python function to convert a number from decimal to hexadecimal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 16 + 10 * decimal_to_hexadecimal(int(n / 16)) \ndef hexadecimal_to_decimal(n):\n    '''\n    Write a python function to convert a number from hexadecimal to decimal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(n % 10) + 16 * hexadecimal_to_decimal(int(n / 16)) \ndef swap_numbers(n1,n2):\n    '''\n    Write a python function to swap two numbers without using third variable.\n    '''\n    return n2,n1\ndef reverse_number(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    r_n = 0\n    while(n):\n        r_n = r_n * 10 + n % 10\n        n //= 10\n    return r_n\ndef reverse_number_alternate(n):\n    '''\n    Write a python function to reverse a number. (Alternate method)\n    '''\n    return int(''.join(reversed(str(n))))\ndef calculate_sum(n):\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\ndef calculate_product(n):\n    '''\n    Write a python function to calculate product of digits of a number.\n    '''\n    return prod(int(x) for x in str(n))\ndef add_two_numbers_carry(n1,n2):\n    '''\n    Write a python function to add two numbers with carry.\n    '''\n    sum = n1 + n2\n    carry = 0\n    if sum > 9:\n        sum = sum - 10\n        carry = 1\n    return sum,carry\ndef add_two_numbers_without_carry(n1,n2):\n    '''\n    Write a python function to add two numbers without carry.\n    '''\n    sum = n1 + n2\n    return sum\ndef multiply_two_numbers_without_carry(n1,n2):\n    '''\n    Write a python function to multiply two numbers without carry.\n    '''\n    prod = 0\n    for i in range(0,n2):\n        prod = prod + n1\n    return prod\ndef multiply_two_numbers_carry(n1,n2):\n    '''\n    Write a python function to multiply two numbers with carry.\n    '''\n    sum = 0\n    prod = 0\n    carry = 0\n    for i in range(0,n2):\n        sum,carry = add_two_numbers_carry(sum,n1)\n        prod = prod + sum\n    return prod,carry\ndef add_two_numbers_carry_recursive(n1,n2,carry):\n    '''\n    Write a python function to add two numbers with carry using recursion.\n    '''\n    sum = n1 + n2 + carry\n    if sum > 9:\n        sum = sum - 10\n        carry = 1\n    else:\n        carry = 0\n    return sum,carry\ndef subtract_two_numbers_carry(n1,n2):\n    '''\n    Write a python function to subtract two numbers with carry.\n    '''\n    sum = n1 - n2\n    carry = 0\n    if sum < 0:\n        sum = sum + 10\n        carry = 1\n    return sum,carry\ndef subtract_two_numbers_without_carry(n1,n2):\n    '''\n    Write a python function to subtract two numbers without carry.\n    '''\n    return n1-n2\ndef multiply_two_numbers_without_carry(n1,n2):\n    '''\n    Write a python function to multiply two numbers without carry.\n    '''\n    prod = 0\n    for i in range(0,n2):\n        prod = prod + n1\n    return prod\ndef multiply_two_numbers_carry_recursive(n1,n2,carry):\n    '''\n    Write a python function to multiply two numbers with carry using recursion.\n    '''\n    sum = 0\n    for i in range(0,n2):\n        sum,carry = add_two_numbers_carry_recursive(sum,n1,carry)\n    return sum,carry\ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef binary_to_octal(n):\n    '''\n    Write a python function to convert a binary number to octal.\n    '''\n    return oct(int(n,2))\ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert a decimal number to binary.\n    '''\n    return bin(n)\ndef decimal_to_hexadecimal(n):\n    '''\n    Write a python function to convert a decimal number to hexadecimal.\n    '''\n    return hex(n)\ndef hexadecimal_to_decimal(n):\n    '''\n    Write a python function to convert a hexadecimal number to decimal.\n    '''\n    return int(n,16)\ndef binary_to_decimal(n):\n    '''\n    Write a python function to convert a binary number to decimal.\n    '''\n    return int(n,2)\ndef octal_to_decimal(n):\n    '''\n    Write a python function to convert a octal number to decimal.\n    '''\n    return int(n,8)\ndef octal_to_hexadecimal(n):\n    '''\n    Write a python function to convert a octal number to hexadecimal.\n    '''\n    return hex(int(n,8))\ndef hexadecimal_to_decimal(n):\n    '''\n    Write a python function to convert a hexadecimal number to decimal.\n    '''\n    return int(n,16)\ndef convert_base_10(s",
        "num_ids": 19
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #index = len(str)\n    #while index > 0:\n    #    if index % 2 == 0:\n    #        str = str[:index-1] + str[index:]\n    #    index -= 1\n",
        "num_ids": 55
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for i in str if ord(i)%2 == 0])\n",
        "num_ids": 24
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # return ''.join([i for index,i in enumerate(str) if index%2==0])\n    # or\n    return ''.join([i for index,i in enumerate(str) if index%2!=0])\n",
        "num_ids": 58
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_new = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            str_new += str[i]\n    return str_new\n",
        "num_ids": 46
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print (str[1::2])\n",
        "num_ids": 12
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = []\n    for i in range(len(str)):\n        if i%2!= 0:\n            str_list.append(str[i])\n    return \"\".join(str_list)\n    \ndef count_words(str):\n    '''\n    Write a python function to count and display the number of uppercase and lowercase letters in a given string.\n    '''\n    upper_count = 0\n    lower_count = 0\n    for letter in str:\n        if letter.isupper():\n            upper_count+=1\n        elif letter.islower():\n            lower_count+=1\n    print(\"The number of uppercase letters are: \",upper_count)\n    print(\"The number of lowercase letters are: \",lower_count)\n",
        "num_ids": 89
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(\"Original String: \"+str)\n    print(\"Odd index values removed String: \"+''.join([str[i] for i in range(len(str)) if i%2==0]))\n",
        "num_ids": 48
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for i in str if (str.index(i) % 2 == 0)])\n    \nodd_values_string(\"PythonExercises\")\n",
        "num_ids": 42
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        print(f'Minimum is {a}')\n    elif b < a and b < c:\n        print(f'Minimum is {b}')\n    else:\n        print(f'Minimum is {c}')\n",
        "num_ids": 65
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            print(a)\n        else:\n            print(c)\n    elif b < a:\n        if b < c:\n            print(b)\n        else:\n            print(c)\n    elif c < a:\n        print(c)\n    elif c < b:\n        print(b)\n    elif a == b:\n        print(a)\n    elif a == c:\n        print(a)\n    elif b == c:\n        print(b)\n",
        "num_ids": 133
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a if a < b else b\n    minimum = minimum if minimum < c else c\n    return minimum\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    maximum = a if a > b else b\n    maximum = maximum if maximum > c else c\n    return maximum\ndef min_max_of_two(a,b):\n    '''\n    Write a function to find minimum and maximum of two numbers.\n    '''\n    return (min(a,b),max(a,b))\ndef multiply_num(a,b):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return a * b\ndef is_even(a):\n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    return a % 2 == 0\ndef is_odd(a):\n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    return a % 2!= 0\ndef is_greater_than(a,b):\n    '''\n    Write a function to check whether a number is greater than another number.\n    '''\n    return a > b\ndef is_greater_than_or_equal(a,b):\n    '''\n    Write a function to check whether a number is greater than another number.\n    '''\n    return a >= b\ndef is_less_than(a,b):\n    '''\n    Write a function to check whether a number is less than another number.\n    '''\n    return a < b\ndef is_less_than_or_equal(a,b):\n    '''\n    Write a function to check whether a number is less than another number.\n    '''\n    return a <= b\ndef num_to_str(a):\n    '''\n    Write a function to convert a number to a string.\n    '''\n    return str(a)\ndef num_to_str_to_num(a):\n    '''\n    Write a function to convert a number to a string and then convert it back to a number.\n    '''\n    return int(str(a))\ndef num_divided_by_num(a,b):\n    '''\n    Write a function to find the result of dividing two numbers.\n    '''\n    return a // b\ndef num_times_num(a,b):\n    '''\n    Write a function to find the result of multiplying two numbers.\n    '''\n    return a * b\ndef num_minus_num(a,b):\n    '''\n    Write a function to find the result of subtracting two numbers.\n    '''\n    return a - b\ndef num_plus_num(a,b):\n    '''\n    Write a function to find the result of adding two numbers.\n    '''\n    return a + b\ndef num_round_num(a):\n    '''\n    Write a function to round a number to two decimal places.\n    '''\n    return round(a,2)\ndef num_floor_num(a):\n    '''\n    Write a function to round a number down to the nearest integer.\n    '''\n    return math.floor(a)\ndef num_ceil_num(a):\n    '''\n    Write a function to round a number up to the nearest integer.\n    '''\n    return math.ceil(a)\ndef num_sqrt_num(a):\n    '''\n    Write a function to take the square root of a number.\n    '''\n    return math.sqrt(a)\ndef num_factorial_num(a):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    return math.factorial(a)\ndef num_power_num(a,b):\n    '''\n    Write a function to raise a number to the power of another number.\n    '''\n    return a ** b\ndef num_sin_num(a):\n    '''\n    Write a function to take the sine of a number.\n    '''\n    return math.sin(a)\ndef num_cos_num(a):\n    '''\n    Write a function to take the cosine of a number.\n    '''\n    return math.cos(a)\ndef num_tan_num(a):\n    '''\n    Write a function to take the tangent of a number.\n    '''\n    return math.tan(a)\ndef num_lg_num(a):\n    '''\n    Write a function to find the log base 10 of a number.\n    '''\n    return math.log10(a)\ndef num_ln_num(a):\n    '''\n    Write a function to find the natural log of a number.\n    '''\n    return math.log(a)\ndef num_exp_num(a):\n    '''\n    Write a function to find the exponential of a number.\n    '''\n    return math.exp(a)\ndef num_mod_num(a,b):\n    '''\n    Write a function to find the remainder of two numbers.\n    '''\n    return a % b\ndef num_divmod_num(a,b):\n    '''\n    Write a function to find the quotient and remainder of two numbers.\n    '''\n    return divmod(a,b)\ndef num_gcd_num(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    return math.gcd(a,b)\ndef num_lcm_num(a,b):\n    '''\n    Write a function to find the lowest common multiple of two numbers.\n    '''\n    return math.lcm(a,b)\ndef convert_f_to_c(f):\n    '''\n    Write a function to convert fahrenheit to celsius.\n    '''\n    return (f - 32) * 5/9\ndef convert_c_to_f(c):\n    '''\n    Write a function to convert celsius to fahrenheit.\n    '''\n    return c * 9/5 + 32\ndef convert_mile_to_km(miles):\n    '''\n    Write a function to convert miles to kilometres.\n    '''\n    return miles * 1.6\ndef convert_km_to_mile(km):\n    '''\n    Write a function to convert kilometres to miles.\n    '''\n    return km / 1.6\ndef convert_lb_to_kg(lb):\n    '''\n    Write a function to convert pounds to kilograms.\n    '''\n    return lb * 0.453592\ndef convert_kg_to_lb(kg):\n    '''\n    Write a function to convert kilograms to pounds.\n    '''\n    return kg * 2.20462\ndef convert_gal_to_l(gal):\n    '''\n    Write a function to convert gallons to litres.\n    '''\n    return gal * 3.78541\ndef convert_l_to_gal(l):\n    '''\n    Write a function to convert litres to gallons.\n    '''\n    return l / 3.78541\ndef convert_mpg_to_l_100km(mpg):\n    '''\n    Write a function to convert miles per gallon to liters per 100 kilometers.\n    '''\n    return 235.215 / mpg\ndef convert_l_100km_to_mpg(l_100km):\n    '''\n    Write a function to convert liters per 100 kilometers to miles per gallon.\n    '''\n    return 235.215 / l_100km\ndef convert_celsius_to_fahrenheit(c):\n    '''\n    Write a function to convert celsius to fahrenheit.\n    '''\n    return c * 9/5 + 32\ndef convert_fahrenheit_to_celsius(f):\n    '''\n    Write a function to convert fahrenheit to celsius.\n    '''\n    return (f - 32) * 5/9\ndef convert_inch_to_cm(inch):\n    '''\n    Write a function to convert inches to centimeters.\n    '''\n    return inch * 2.54\ndef convert_cm_to_inch(cm):\n    '''\n    Write a function to convert centimeters to inches.\n    '''\n    return cm / 2.54\ndef convert_miles_to_feet(miles):\n    '''\n    Write a function to convert miles to feet.\n    ''",
        "num_ids": 15
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b: \n        if b<c:\n            return c\n        else:\n            return b\n    else:\n        if a<c:\n            return c\n        else:\n            return a\n",
        "num_ids": 52
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    if b <= a and b <= c:\n        return b\n    if c <= a and c <= b:\n        return c\n    else:\n        return None\n",
        "num_ids": 55
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        print (\"The smallest number is: \",a)\n    elif b < a and b < c:\n        print (\"The smallest number is: \",b)\n    else:\n        print (\"The smallest number is: \",c)\n        \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a > b and a > c:\n        print (\"The maximum number is: \",a)\n    elif b > a and b > c:\n        print (\"The maximum number is: \",b)\n    else:\n        print (\"The maximum number is: \",c)\n        \ndef add_numbers(a,b,c):\n    '''\n    Write a function to add three numbers.\n    '''\n    print (\"The sum of three numbers is: \",a+b+c)\n",
        "num_ids": 20
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_val = min(a,b,c)\n    return min_val",
        "num_ids": 21
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    #Initialize all the variables\n    minimum = a\n    if b < minimum:\n        minimum = b\n    if c < minimum:\n        minimum = c\n",
        "num_ids": 39
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c) \n",
        "num_ids": 14
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        if n&(1<<i) == 0:\n            count = count + 1\n    if count == n.bit_length() -1:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    flag=0\n    for i in range(1,n+1):\n        if(bin(i)[2:].zfill(n)==bin(r)[2:].zfill(n) and bin(i)[2:].zfill(n)==bin(l)[2:].zfill(n)):\n            flag=1\n        else:\n            flag=0\n    if flag==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 109
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def binary(n):\n        return bin(n).replace(\"0b\", \"\")\n",
        "num_ids": 23
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = 0\n    while (1 << i) <= n:\n        if (((1 << i) - 1) & n) >= l and (((1 << i) - 1) & n) <= r:\n            i += 1\n        else:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((2**n)-1)&l==0 and ((2**n)-1)&r==((2**n)-1)\n    \n",
        "num_ids": 36
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    k=0\n    while(1):\n        if(n & (1<<k)==0):\n            if(l<=k<=r):\n                continue\n            else:\n                return 0\n        else:\n            k+=1\n    return 1\n",
        "num_ids": 63
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 1\n    for i in range(l,r+1):\n        if ((mask<<i)-1) & n == 0:\n            return False\n    return True\n    pass\n",
        "num_ids": 46
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count=0\n    while(n>0):\n        if (n%2==0):\n            count=count+1\n            n=n/2\n        else:\n            break\n",
        "num_ids": 46
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFFFFFFFF\n    while mask:\n        a = n&mask\n        b = l&mask\n        c = r&mask\n        if a ^ b!= c:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range2(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range3(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range4(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0x1\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask<<1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range5(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0x3\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range6(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0x7\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range7(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range8(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range9(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0x1F\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range10(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0x3F\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range11(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0x7F\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range12(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range13(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range14(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range15(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFFFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range16(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFFFFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range17(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFFFFFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range18(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFFFFFFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range19(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFFFFFFFF\n    while mask:\n        if n&mask!= l&mask or n&mask!= r&mask:\n            return False\n        mask = mask>>1\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range20(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0xFFFFFFFFFF\n    while mas",
        "num_ids": 14
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def all_Bits_In_Range(n):\n        binary = bin(n)\n        binary_in_str = str(binary)\n        #print(binary_in_str)\n        for i in range(len(binary_in_str)):\n            if binary_in_str[i] == '1':\n                return False\n        return True\n",
        "num_ids": 86
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left = 0\n    right = n - 1\n    while left < right:\n        if arr[left] < 0:\n            left += 1\n        elif arr[right] >= 0:\n            right -= 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n",
        "num_ids": 85
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        return False\n    arr = list(filter(lambda x: x < 0, arr)) + list(filter(lambda x: x >= 0, arr))\n    return arr[:n] + arr[n:2*n] + arr[2*n:]\n    \ndef re_arrange_array_2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        return False\n    arr = list(filter(lambda x: x < 0, arr)) + list(filter(lambda x: x >= 0, arr))\n    return arr[n:] + arr[:n]\n",
        "num_ids": 59
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low, high = 0, n - 1\n    while low <= high:\n        if arr[low] < 0 and arr[high] >= 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] > 0:\n            low += 1\n        elif arr[high] < 0:\n            high -= 1\n    return arr\n",
        "num_ids": 102
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, left_idx and right_idx\n    left_idx, right_idx = 0, len(arr)-1\n    \n    # Loop until left_idx is less than or equal to right_idx\n    while left_idx <= right_idx:\n        # Increment left_idx if the current element is positive\n        if arr[left_idx] >= 0:\n            left_idx += 1\n        \n        # Decrement right_idx if the current element is negative\n        elif arr[right_idx] < 0:\n            right_idx -= 1\n        \n        # If left_idx is larger than right_idx, then swap the two elements\n        else:\n            arr[left_idx], arr[right_idx] = arr[right_idx], arr[left_idx]\n            left_idx += 1\n            right_idx -= 1\n",
        "num_ids": 221
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n < 1 or n > len(arr):\n        return None\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > 0:\n            if arr[j] < 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n        else:\n            if arr[j] > 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n                j -= 1\n            else:\n                i += 1\n",
        "num_ids": 151
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return None\n",
        "num_ids": 6
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while i < n:\n        if arr[j] < 0:\n            temp = arr[j]\n            arr[j] = arr[i]\n            arr[i] = temp\n            i += 1\n        j += 1\n    return arr\n",
        "num_ids": 70
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        return \"Array size not sufficient.\"\n    else:\n        n = n - 1\n        i = 0\n        while i < n:\n            while arr[i] < 0 and i < n:\n                i += 1\n            j = i\n            while j < len(arr):\n                while arr[j] > 0 and j < len(arr):\n                    j += 1\n                if j < len(arr):\n                    if arr[i] < 0 and arr[j] > 0:\n                        arr[j], arr[i] = arr[i], arr[j]\n                        i += 1\n                    elif arr[i] < 0 and arr[j] < 0:\n                        i += 1\n                    elif arr[i] > 0 and arr[j] < 0:\n                        j += 1\n        return arr\n",
        "num_ids": 197
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp = []\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    temp = neg + pos\n    for i in range(n):\n        arr[i] = temp[i]\n    return arr\n",
        "num_ids": 91
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[index] = arr[index], arr[i]\n            index += 1\n    return arr[:n] + arr[index:]\n",
        "num_ids": 66
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == '':\n        return ''\n    else:\n        str1 = str1.replace(' ',char)\n        return str1\n",
        "num_ids": 36
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s' %char)\n",
        "num_ids": 18
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            str1 = str1[:i] + char + str1[i+1:]\n    return str1\n",
        "num_ids": 53
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return(str1.replace(\" \",\"%s\"))",
        "num_ids": 15
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\".format(char))\n",
        "num_ids": 19
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(' ','%')\n    return new_str\n",
        "num_ids": 23
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list = []\n    for i in range(0,n):\n        maxi = heapq.nlargest(1,list1)\n        new_list.append(maxi)\n        list1.remove(maxi)\n    return new_list",
        "num_ids": 62
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n    \n",
        "num_ids": 31
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        if list1:\n            num=heapq.nlargest(1,list1)[0]\n            list2.append(num)\n            list1.remove(num)\n    return list2\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n        list1[-1*i]=None\n    return list2\ndef larg_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,reverse=True)\n    list2=list1[:n]\n    return list2\ndef larg_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    list2=[]\n    for i in range(n):\n        list2.append(heapq.heappop(list1))\n    return list2\ndef larg_nnum8(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1])\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum9(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum10(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    list2=[]\n    for i in range(n):\n        list2.append(heapq.heappop(list1))\n    return list2\ndef larg_nnum11(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum12(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1])\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum13(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum14(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1])\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum15(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum16(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum17(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum18(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum19(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*i])\n    return list2\ndef larg_nnum20(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    list2=[]\n    for i in range(n):\n    ",
        "num_ids": 42
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #iterate through the list and store the items in the min_heap\n    #if the heap size is less than n, add the next item in the list\n    #else pop n items from the heap and add the next item to the heap\n    #return the sorted list\n    min_heap = []\n    new_list = []\n    for i in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap,i)\n        else:\n            heapq.heappushpop(min_heap,i)\n    for i in range(len(min_heap)):\n        new_list.append(heapq.heappop(min_heap))\n    return new_list\n    \ndef larg_nnum_2(list1,n):\n    #create a new list, a min heap and an index\n    #iterate through the list, add items to the min heap\n    #keep iterating until the heap is full or the list is exhausted\n    #create a copy of the min heap\n    #pop n items from the copy and add to the copy\n    #push the items back into the min heap\n    #return the min heap\n    new_list = []\n    min_heap = []\n    index = 0\n    for i in list1:\n        heapq.heappush(min_heap,i)\n    while(len(min_heap) < n):\n        index += 1\n        heapq.heappush(min_heap,list1[index])\n    while(len(min_heap) > 0):\n        heapq.heappop(min_heap)\n    return min_heap\n    \ndef larg_nnum_3(list1,n):\n    #create a new list, a min heap and an index\n    #iterate through the list, add items to the min heap\n    #keep iterating until the heap is full or the list is exhausted\n    #create a copy of the min heap\n    #pop n items from the copy and add to the copy\n    #push the items back into the min heap\n    #return the min heap\n    new_list = []\n    min_heap = []\n    index = 0\n    for i in list1:\n        heapq.heappush(min_heap,i)\n    while(len(min_heap) < n):\n        index += 1\n        heapq.heappush(min_heap,list1[index])\n    new_list = heapq.nlargest(n,min_heap)\n    return new_list\n",
        "num_ids": 616
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l1=[]\n    for i in range(0,n):\n        l1.append(list1[i])\n    return l1\n",
        "num_ids": 36
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # n=int(input())\n    list1.sort()\n    l=[]\n    for i in range(n):\n        l.append(list1[i])\n    print(l)\n    return l\n",
        "num_ids": 53
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a new list of size n\n    res=[]\n    # loop through the list\n    for i in list1:\n        #if the list is less than n append it to res\n        if len(res)<n:\n            res.append(i)\n        else:\n            # if the list is more than n pop the smallest item and append it to res\n            if i>res[0]:\n                res.pop(0)\n                res.append(i)\n    return res\n    \ndef larg_nnum_with_heap(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a new list of size n\n    res=[]\n    # create a new heapq with list1 as the only element\n    heap=list1[:]\n    heapq.heapify(heap)\n    # loop through the heap\n    for i in range(n):\n        # append the largest item to the list\n        res.append(heapq.heappop(heap))\n    return res\n    \ndef larg_nnum_with_heap_and_push(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a new list of size n\n    res=[]\n    # create a new heapq with list1 as the only element\n    heap=list1[:]\n    heapq.heapify(heap)\n    # loop through the heap\n    for i in range(n):\n        # append the largest item to the list\n        res.append(heapq.heappop(heap))\n        # push the new largest item to the heap\n        heapq.heappush(heap,list1[i])\n    return res\n    \ndef larg_nnum_with_insert(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a new list of size n\n    res=[]\n    # loop through the list\n    for i in list1:\n        #if the list is less than n append it to res\n        if len(res)<n:\n            res.append(i)\n        else:\n            # pop the smallest item and append it to res\n            res.pop(0)\n            res.append(i)\n    return res\n    \ndef larg_nnum_with_insert_and_pop(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a new list of size n\n    res=[]\n    # loop through the list\n    for i in list1:\n        #if the list is less than n append it to res\n        if len(res)<n:\n            res.append(i)\n        else:\n            # pop the smallest item and append it to res\n            res.pop(0)\n            res.append(i)\n        # remove the first item in the list\n        list1.pop(0)\n    return res\n    \ndef larg_nnum_with_insert_and_pop_and_push(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a new list of size n\n    res=[]\n    # loop through the list\n    for i in list1:\n        #if the list is less than n append it to res\n        if len(res)<n:\n            res.append(i)\n        else:\n            # pop the smallest item and append it to res\n            res.pop(0)\n            res.append(i)\n        # remove the first item in the list\n        list1.pop(0)\n        # push the new smallest item to the list\n        list1.insert(0,i)\n    return res\n",
        "num_ids": 141
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for i in range(n)]\n",
        "num_ids": 37
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, i)\n        elif len(heap) > n:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    return heap\nprint(larg_nnum([-1, 0, 5, 7, 3, -1, 4], 4))\nprint(larg_nnum([-1, 0, 5, 7, 3, -1, 4], 3))\nprint(larg_nnum([-1, 0, 5, 7, 3, -1, 4], 2))\nprint(larg_nnum([-1, 0, 5, 7, 3, -1, 4], 1))\nprint(larg_nnum([-1, 0, 5, 7, 3, -1, 4], 0))\nprint(larg_nnum([], 5))\nprint(larg_nnum([4, 5, -3, 7, -1], 5))\n",
        "num_ids": 249
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    return 2*pi*r*(r+h)\n",
        "num_ids": 22
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14159265358979)*r*h\n",
        "num_ids": 20
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    from math import pi,sqrt\n    #define function with input radius and height\n    def lateral_cylinder(r,h):\n        '''\n        Write a function to find the lateral surface area of a cylinder.\n        '''\n        #check for positive radius\n        if r>0:\n            #check for positive height\n            if h>0:\n                #use the pi*r^2 + pi*h*r formula\n                return np.pi*r**2 + np.pi*h*r\n            else:\n                #print error message\n                return \"Error. Negative height entered. Please try again.\"\n        else:\n            #print error message\n            return \"Error. Negative radius entered. Please try again.\"\n",
        "num_ids": 113
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14*(r**2)*h\n",
        "num_ids": 15
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    S = 2*np.pi*r*h + 2*np.pi*r**2\n    return S\n    \n    \n    \n    \n    \ndef diameter_cylinder(r):\n    '''\n    Write a function to find the diameter of a cylinder.\n    '''\n    d = 2*r\n    return d\n    \n    \n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = np.pi*r**2*h\n    return V\n    \n    \n    \n    \n    \ndef length_of_cylinder(r,h):\n    '''\n    Write a function to find the length of a cylinder.\n    '''\n    L = 2*np.pi*r*h\n    return L\n    \n    \n    \n    \n    \ndef density_cylinder(m,r,h):\n    '''\n    Write a function to find the density of a cylinder.\n    '''\n    rho = m/(np.pi*r**2*h)\n    return rho\n    \n    \n    \n    \n    \ndef lateral_pressure_cylinder(r,h,p):\n    '''\n    Write a function to find the lateral pressure of a cylinder.\n    '''\n    q = p*np.pi*r**2/h\n    return q\n    \n    \n    \n    \n    \ndef radial_pressure_cylinder(r,h,p):\n    '''\n    Write a function to find the radial pressure of a cylinder.\n    '''\n    q = p*np.pi/r**2\n    return q\n    \n    \n    \n    \n    \ndef pressure_cylinder(r,h,p):\n    '''\n    Write a function to find the total pressure of a cylinder.\n    '''\n    q = 2*np.pi*r*p + 2*np.pi*r**2*p\n    return q\n    \n    \n    \n    \n    \ndef pressure_ratio_cylinder(r,h):\n    '''\n    Write a function to find the pressure ratio of a cylinder.\n    '''\n    q = np.pi*r/(h*2*np.pi)\n    return q\n    \n    \n    \n    \n    \ndef change_in_volume_cylinder(r,h,V):\n    '''\n    Write a function to find the change in volume of a cylinder.\n    '''\n    dV = 2*np.pi*r**2*h\n    return dV\n    \n    \n    \n    \n    \ndef change_in_length_cylinder(r,h,L):\n    '''\n    Write a function to find the change in length of a cylinder.\n    '''\n    dL = np.pi*r**2*h\n    return dL\n    \n    \n    \n    \n    \ndef change_in_radius_cylinder(V,L):\n    '''\n    Write a function to find the change in radius of a cylinder.\n    '''\n    dr = (V*L)/(np.pi)\n    return dr\n    \n    \n    \n    \n    \ndef change_in_height_cylinder(V,L):\n    '''\n    Write a function to find the change in height of a cylinder.\n    '''\n    dH = (V*L)/(np.pi*(2*np.pi*r)**2)\n    return dH\n    \n    \n    \n    \n    \ndef change_in_pressure_cylinder(p):\n    '''\n    Write a function to find the change in pressure of a cylinder.\n    '''\n    dp = 2*np.pi*r*p + 2*np.pi*r**2*p\n    return dp\n    \n    \n    \n    \n    \ndef change_in_mass_cylinder(r,h,m):\n    '''\n    Write a function to find the change in mass of a cylinder.\n    '''\n    dm = np.pi*r**2*h\n    return dm\n    \n    \n    \n    \n    \ndef initial_data_cylinder(r,h):\n    '''\n    Write a function to calculate the initial data for a cylinder.\n    '''\n    m = np.pi*r**2*h\n    V = np.pi*r**2*h\n    L = 2*np.pi*r*h\n    p = np.pi*r*(h/2)\n    return m, V, L, p\n    \n    \n    \n    \n    \ndef function_cylinder(r,h,V,p,L,m,q):\n    '''\n    Write a function to find the force of gravity acting on a cylinder.\n    '''\n    f = q*r*2*np.pi*r\n    return f\n    \n    \n    \n    \n    \ndef rate_of_change_cylinder(f,m,V,L,p):\n    '''\n    Write a function to find the rate of change of volume, length, mass, pressure, and temperature of a cylinder.\n    '''\n    dV = f*2*np.pi*r**2*h\n    dL = np.pi*r**2*h\n    dm = np.pi*r**2*h\n    dp = 2*np.pi*r*p + 2*np.pi*r**2*p\n    return dV, dL, dm, dp\n    \n    \n    \n    \n    \ndef change_in_temperature_cylinder(r,h,p,V,T):\n    '''\n    Write a function to find the change in temperature of a cylinder.\n    '''\n    dT = (1/2)*(np.pi*r**2*h*p)/(V*k)\n    return dT\n    \n    \n    \n    \n    \ndef efficiency_cylinder(r,h,p):\n    '''\n    Write a function to find the efficiency of a cylinder.\n    '''\n    e = (p*np.pi*r**2*h*(k))/(V*(h*2*np.pi*r)**2)\n    return e\n    \n    \n    \n    \n    \ndef energy_production_cylinder(r,h,p):\n    '''\n    Write a function to find the energy production of a cylinder.\n    '''\n    e = (p*np.pi*r**2*h*(k))/(V*(h*2*np.pi*r)**2)\n    return e\n    \n    \n    \n    \n    \ndef mass_to_temperature_cylinder(m,V):\n    '''\n    Write a function to find the mass to temperature ratio of a cylinder.\n    '''\n    mT = m/(V*k)\n    return mT\n    \n    \n    \n    \n    \ndef density_to_temperature_cylinder(r,h,p,V):\n    '''\n    Write a function to find the density to temperature ratio of a cylinder.\n    '''\n    dT = (p*np.pi*r**2*h*(k))/(V*(h*2*np.pi*r)**2)\n    return dT\n    \n    \n    \n    \n    \ndef change_in_temperature_cylinder(r,h,p,V,T):\n    '''\n    Write a function to find the change in temperature of a cylinder.\n    '''\n    dT = (1/2)*(np.pi*r**2*h*p)/(V*k)\n    return dT\n    \n    \n    \n    \n    \ndef volume_to_mass_cylinder(V,L):\n    '''\n    Write a function to find the volume to mass ratio of a cylinder.\n    '''\n    m = V*L\n    return m\n    \n    \n    \n    \n    \ndef volume_to_pressure_cylinder(V,L):\n    '''\n    Write a function to find the volume to pressure ratio of a cylinder.\n    '''\n    p = V*L/np.pi\n    return p\n    \n    \n    \n    \n    \ndef volume_to_length_cylinder(V,L):\n    '''\n    Write a function to find the volume to length ratio of a cylinder.\n    '''\n    l = V*L\n    return l\n    \n    \n    \n    \n    \ndef volume_to_radius_cylinder(",
        "num_ids": 33
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Your code here\n    a=math.pi*(r**2)\n    b=2*math.pi*r*h\n    c=math.pi*(h**2)\n    d=(a+b+c)\n    return d\n",
        "num_ids": 61
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r+h)\n",
        "num_ids": 18
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l**3)\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l**3)\n    print(volume)\n",
        "num_ids": 17
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    print(\"The volume of a cube with side length %.3f is %.3f\" % (l, volume))\n",
        "num_ids": 37
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #  first shift number to set all even bits as 1,\n    #  then & it with original number to get even bits set\n    return n << 1 if n & 1 == 0 else n << 1 | 1\n",
        "num_ids": 50
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n >> 1)\n",
        "num_ids": 12
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x5555555555555555  # set all even bits of n\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Example: 242 -> 101010\n    # even bits: 101010 -> 101010\n    # odd bits: 101010 -> 101100\n    # So we just need to replace even bits with their original value.\n    # Create a mask that has all the even bits set.\n    mask = 0xAAAAAAAA\n    # Apply that mask to n.\n    return n & mask\n",
        "num_ids": 85
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n&(n-1)) ^ n\n",
        "num_ids": 15
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    assert n>=0 and type(n) == int, \"Invalid Input\"\n    m = n\n    while m!= 0:\n        if m % 2 == 0:\n            print(\"0\", end=\"\")\n        else:\n            print(\"1\", end=\"\")\n        m = m // 2\n    return\n",
        "num_ids": 75
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n",
        "num_ids": 13
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        return -1 * even_bit_set_number(-n)\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n\n    if n % 2!= 0:\n        return even_bit_set_number(n - 1) + 2\n",
        "num_ids": 76
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # set number of even bits \n    # first set all bits and then & the number with 0xAAAAAAAA \n    return n & 0xAAAAAAAA \n",
        "num_ids": 37
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    sorted_list = sorted(test_list,key=lambda tup:tup[0])\n    list_dict = {}\n    list_count = 0\n    for item in sorted_list:\n        if item[0] in list_dict:\n            list_dict[item[0]] += 1\n        else:\n            list_dict[item[0]] = 1\n        list_count += 1\n    return list_dict\n",
        "num_ids": 102
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n    # print(check_occurences([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(2,3,4),(5,7,8)]))\n",
        "num_ids": 65
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # if len(test_list) == 1:\n    #     return {test_list[0]: 1}\n    # return {test_list[0]: 1} | {t: count + 1 for t, count in check_occurences(test_list[1:]) if t not in {test_list[0]}}\n",
        "num_ids": 79
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    freqs = dict()\n    for tup in test_list:\n        if tup in freqs:\n            freqs[tup] += 1\n        else:\n            freqs[tup] = 1\n    return freqs\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    tuple_dict = {}\n    for tuple in test_list:\n        if tuple in tuple_dict:\n            tuple_dict[tuple] += 1\n        else:\n            tuple_dict[tuple] = 1\n",
        "num_ids": 56
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output_dict = {}\n    for tup in test_list:\n        if tup in output_dict:\n            output_dict[tup] = output_dict[tup] + 1\n        else:\n            output_dict[tup] = 1\n    return output_dict\n",
        "num_ids": 69
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_elements = []\n    occurences = {}\n    for item in test_list:\n        if item[0] not in unique_elements:\n            unique_elements.append(item[0])\n            occurences[item[0]] = 1\n        else:\n            occurences[item[0]] += 1\n    return occurences\n",
        "num_ids": 87
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = list(map(lambda x : x[0], test_list))\n    occurences = Counter(test_list)\n    return occurences\n    \ndef check_occurences2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = list(map(lambda x : x[0], test_list))\n    occurences = Counter(test_list)\n    return occurences.keys()\n",
        "num_ids": 44
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    new_dict = dict()\n    for item in test_list:\n        if item in new_dict.keys():\n            new_dict[item] += 1\n        else:\n            new_dict[item] = 1\n    return new_dict\n",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {tuple(t):test_list.count(t) for t in set(test_list)}\n",
        "num_ids": 28
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i:j+1] == \"\": \n                count+=1\n    return count \n    \nprint(number_of_substrings(\"pqpqu\")) \nprint(number_of_substrings(\"aab\")) \n",
        "num_ids": 92
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_count = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if i<=j and j-i+1 < len(str):\n                substring_count+=1\n",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize the variable number_of_substrings to 0\n    # Use a while loop to iterate through the string\n    # Inside the loop, append each character to the variable substring\n    # If the substring is not empty then increment the number_of_substrings variable by 1\n    # Finally, return the number_of_substrings variable\n    \n    number_of_substrings = 0\n    substring = \"\"\n    while (len(str) > 0):\n        substring = substring + str[0]\n        str = str[1:]\n        if (substring!= \"\"):\n            number_of_substrings = number_of_substrings + 1\n",
        "num_ids": 157
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    substrings = []\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substring = str[i:j+1]\n            substrings.append(substring)\n    print(len(substrings))\n    \n",
        "num_ids": 70
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if j <= i:\n                count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            count +=1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str == '':\n        return 0\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i, len(str)):\n            if is_palindrome(str[i:j+1]):\n                count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(set(str.replace(' ', '')))\n",
        "num_ids": 16
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Make a variable to hold the count\n    count = 0\n",
        "num_ids": 17
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    def get_pos_ints(m):\n        \n        if m < 1:\n            raise ValueError('Input must be positive integer.')\n        \n        if m == 1:\n            return [1]\n        \n        else:\n            num_seqs = get_pos_ints(m-1)\n            \n            for seq in num_seqs:\n                num_seqs.append(seq+1)\n                \n                \n            return num_seqs\n            \n    \n    \n    def find_pos_seqs(m,n,pos_ints,pos_seqs):\n        \n        if n == 0:\n            return pos_seqs\n        \n        for i in pos_ints:\n            if i >= m and i <= m * 2:\n                find_pos_seqs(m,n-1,pos_ints,pos_seqs)\n        \n        \n        return pos_seqs\n    \n    pos_ints = get_pos_ints(m)\n    pos_seqs = []\n    pos_seqs = find_pos_seqs(m,n,pos_ints,pos_seqs)\n    \n    return len(pos_seqs)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1972
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # 1) BASE CASE: IF n == 0 or m == 0, then there are 0 sequences.\n    # 2) OTHERWISE:\n    # 3) CREATE A VARIABLE THAT TAKES THE RESULT OF MULTIPLYING n-1 AND n\n    # 4) RETURN THE RESULT OF (3)\n    def count_of_sequences(m,n): \n        if n == 0 or m == 0: \n            return 0\n        else: \n            return count_of_sequences(m,n-1) + count_of_sequences(m,n)\n    return count_of_sequences(m,n)\n",
        "num_ids": 156
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #This can be done in O(n^2) time. \n    return m**n - ((m-1)**n) - (m**(n-1) - (m-1)**(n-1))\n",
        "num_ids": 55
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    m=int(input('Enter m:'))\n    n=int(input('Enter n:'))\n    total_number_of_sequences=0\n    for i in range(m-2*n+1):\n        total_number_of_sequences+=factorial(m-i)/(factorial(i)*factorial(n)*factorial(m-i-n))\n    print(total_number_of_sequences)\ndef get_largest_prime_factor(n):\n    '''\n    Write a function that takes in a number n and finds the largest prime factor of n. If n is prime return n, otherwise return the largest prime factor of n.\n    '''\n    n=int(input('Enter n:'))\n    factor=n\n    largest_prime_factor=0\n    if n==1:\n        return 1\n    else:\n        while factor>1:\n            if n%factor==0:\n                largest_prime_factor=factor\n                factor=factor-1\n            else:\n                factor=factor-1\n        return largest_prime_factor\n    print(largest_prime_factor)\ndef get_largest_prime_factor_fast(n):\n    '''\n    Write a function that takes in a number n and finds the largest prime factor of n. If n is prime return n, otherwise return the largest prime factor of n.\n    '''\n    n=int(input('Enter n:'))\n    if n==1:\n        return 1\n    else:\n        factor=2\n        largest_prime_factor=0\n        while factor<n:\n            if n%factor==0:\n                largest_prime_factor=factor\n            factor+=1\n        return largest_prime_factor\n    print(largest_prime_factor)\ndef get_largest_prime_factor_fast_better(n):\n    '''\n    Write a function that takes in a number n and finds the largest prime factor of n. If n is prime return n, otherwise return the largest prime factor of n.\n    '''\n    n=int(input('Enter n:'))\n    factor=2\n    largest_prime_factor=0\n    while factor<n:\n        if n%factor==0:\n            largest_prime_factor=factor\n            n=n/factor\n        factor+=1\n    return largest_prime_factor\n    print(largest_prime_factor)\ndef get_longest_substring_with_unique_chars(s):\n    '''\n    Write a function that takes in a string s and returns the length of the longest substring in s that contains only unique characters.\n    '''\n    s=input('Enter string:')\n    s=sorted(list(s))\n    temp_string=s[0]\n    count=1\n    unique_characters=0\n    longest_substring_with_unique_chars=0\n    for i in range(1,len(s)):\n        if s[i]==temp_string:\n            count+=1\n            temp_string=s[i]\n            unique_characters+=1\n            if unique_characters<=count:\n                longest_substring_with_unique_chars=count\n        else:\n            temp_string=s[i]\n            unique_characters=1\n            count=1\n    return longest_substring_with_unique_chars\n    print(longest_substring_with_unique_chars)\ndef get_longest_substring_with_unique_chars_better(s):\n    '''\n    Write a function that takes in a string s and returns the length of the longest substring in s that contains only unique characters.\n    '''\n    s=input('Enter string:')\n    s=list(s)\n    char_set=set()\n    char_count_dict={}\n    max_unique_char_count=0\n    max_unique_char_count_so_far=0\n    char_set_so_far=set()\n    for i in range(len(s)):\n        char=s[i]\n        if char in char_set:\n            if char in char_count_dict:\n                char_count_dict[char]+=1\n                if char_count_dict[char]>max_unique_char_count:\n                    max_unique_char_count_so_far=char_count_dict[char]\n            else:\n                char_count_dict[char]=1\n                if char_count_dict[char]>max_unique_char_count:\n                    max_unique_char_count_so_far=char_count_dict[char]\n        else:\n            if char_count_dict[char]==1:\n                char_count_dict.pop(char)\n            else:\n                char_count_dict[char]-=1\n            char_set.add(char)\n            if char_count_dict[char]>max_unique_char_count:\n                max_unique_char_count_so_far=char_count_dict[char]\n        if char_count_dict[char]>max_unique_char_count:\n            max_unique_char_count=char_count_dict[char]\n        if len(char_set)<max_unique_char_count_so_far:\n            max_unique_char_count_so_far=len(char_set)\n    return max_unique_char_count_so_far\n    print(max_unique_char_count_so_far)\ndef get_longest_substring_with_unique_chars_fast(s):\n    '''\n    Write a function that takes in a string s and returns the length of the longest substring in s that contains only unique characters.\n    '''\n    s=input('Enter string:')\n    char_set=set()\n    char_count_dict={}\n    max_unique_char_count=0\n    max_unique_char_count_so_far=0\n    char_set_so_far=set()\n    for i in range(len(s)):\n        char=s[i]\n        if char in char_set:\n            if char in char_count_dict:\n                char_count_dict[char]+=1\n                if char_count_dict[char]>max_unique_char_count:\n                    max_unique_char_count_so_far=char_count_dict[char]\n            else:\n                char_count_dict[char]=1\n                if char_count_dict[char]>max_unique_char_count:\n                    max_unique_char_count_so_far=char_count_dict[char]\n        else:\n            if char_count_dict[char]==1:\n                char_count_dict.pop(char)\n            else:\n                char_count_dict[char]-=1\n            char_set.add(char)\n            if char_count_dict[char]>max_unique_char_count:\n                max_unique_char_count_so_far=char_count_dict[char]\n        if char_count_dict[char]>max_unique_char_count:\n            max_unique_char_count=char_count_dict[char]\n        if len(char_set)<max_unique_char_count_so_far:\n            max_unique_char_count_so_far=len(char_set)\n    return max_unique_char_count_so_far\n    print(max_unique_char_count_so_far)\ndef get_longest_substring_with_unique_chars_fastest(s):\n    '''\n    Write a function that takes in a string s and returns the length of the longest substring in s that contains only unique characters.\n    '''\n    s=input('Enter string:')\n    char_set=set()\n    char_count_dict={}\n    max_unique_char_count=0\n    max_unique_char_count_so_far=0\n    char_set_so_far=set()\n    for i in range(len(s)):\n        char=s[i]\n        if char in char_set:\n            if char in char_count_dict:\n                char_count_dict[char]+=1\n                if char_count_dict[char]>max_unique_char_count:\n                    max_unique_char_count",
        "num_ids": 147
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(((m**n)**(1/n))/(n**(1/n)))\n",
        "num_ids": 26
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_count = 0\n    for i in range(1,m):\n        for j in range(1,n):\n            if j > 2*i and j <= m:\n                total_count += 1\n    return total_count\n",
        "num_ids": 57
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    if m < n:\n        return 0\n    return m-n+get_total_number_of_sequences(m-1,n)+get_total_number_of_sequences(m-2,n)\nprint(get_total_number_of_sequences(10,5))",
        "num_ids": 82
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_sequences(n):\n        # This nested function is used to generate all sequences of length n\n        def get_combinations(items):\n            # This inner function finds all combinations of N elements\n            if n == 0:\n                return [[]]\n            combinations = []\n            for i in range(len(items)):\n                new_combinations = get_combinations(items[i+1:])\n                for new_combination in new_combinations:\n                    combinations.append( [items[i]] + new_combination )\n            return combinations\n",
        "num_ids": 133
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Use dynamic programming to find the solutions to the subproblems. \n    # We know that if i is greater than or equal to 2 * j, \n    # the number of sequences of length j is 0.\n",
        "num_ids": 51
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Define variables \n    \n    n = n\n    m = m\n    seq_lst = []\n    seq_lst = [i for i in range(1,m+1)]\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    print(seq_lst)\n    seq_lst.remove(m)\n    prin",
        "num_ids": 1974
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #list1 = [1,2,3,4,5,6,7,8,9,10]\n    #list2 = [1,2,3,4,5,6,7]\n    return list1[0:-1] + list2\n",
        "num_ids": 63
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # iterate through the list1\n    for i in range(len(list1)):\n        # check if the element in list1 is the last element in list1\n        if i == (len(list1) - 1):\n            # replace the last element of list1 with the last element of list2\n            list1[i] = list2[-1]\n            break\n",
        "num_ids": 89
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n    \ndef append_list(list1,list2):\n    '''\n    Write a function that takes in two lists and appends list2 to the end of list1.\n    '''\n    for elem in list2:\n        list1.append(elem)\n    return list1\n",
        "num_ids": 26
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for i in range(len(list2)):\n        list1.append(list2[i])\n    return list1\n",
        "num_ids": 39
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #if list1 = [1,2,3]\n    #list2 = [4,5]\n    #list1 should be [1,2,3,4,5] after you run your function.\n    list1 = list1[:-1]\n    list1 = list1 + list2\n    return list1\n",
        "num_ids": 77
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #Check if the lengths are the same\n    if len(list1)!= len(list2):\n        print(\"Lists are not the same length\")\n        return None\n    else:\n        #Pop the last element of the first list\n        list1.pop()\n        #Pop the last element of the second list\n        list2.pop()\n        #Add the elements of the second list to the first list\n        list1.extend(list2)\n        #return the new list\n        return list1\n",
        "num_ids": 119
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:-1]\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1 = list2[:]\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count+=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for x in str1:\n        count+=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for x in str1:\n        count+=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    s=0\n    for i in str1:\n        s+=1\n    return s\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count +=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num = 0\n    for i in str1:\n        num += 1\n    return num\n",
        "num_ids": 24
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N >= 1): \n        x = (int)(math.sqrt(N)) \n        return (x + 1) * (x + 1) \n    else: \n        return 0\n",
        "num_ids": 50
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # One liner solution\n    #return (math.sqrt(N)+1)**2 if math.sqrt(N).is_integer() else -1\n    \n    # Solution 2\n    n = N\n    for i in range(2, 1+int(math.sqrt(N))):\n        if n % i == 0:\n            n += 1\n            break\n    return n if n < N else -1\n",
        "num_ids": 100
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt = math.sqrt(N)\n    if math.isnan(sqrt):\n        return -1\n    else:\n        return (int(math.ceil(sqrt)))\n",
        "num_ids": 48
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 2:\n        print('Not a valid input')\n    if N%2 == 0:\n        if N%4 == 0:\n            return int(math.sqrt(N))**2\n        return int(math.sqrt(N))**2 + 1\n    return int(math.sqrt(N))**2 + 2\n    \ndef perfect_square(N): \n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    if math.sqrt(N)%1 == 0:\n        return 'YES'\n    return 'NO'\n",
        "num_ids": 29
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N<0):\n        return -1\n    count=0\n    next_perfect_sq=0\n    while(next_perfect_sq<N):\n        next_perfect_sq=next_perfect_sq+count**2\n        count+=1\n    if(next_perfect_sq==N):\n        return next_perfect_sq\n    else:\n        return next_perfect_sq+1\nprint(next_Perfect_Square(6))\nprint(next_Perfect_Square(15))\nprint(next_Perfect_Square(9))\nprint(next_Perfect_Square(0))\nprint(next_Perfect_Square(-7))\n",
        "num_ids": 152
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = math.ceil(math.sqrt(N)) \n    if (sq * sq == N): \n        return -1\n    else: \n        return (sq + 1) * (sq + 1) \n",
        "num_ids": 55
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    '''\n    1. Take the input and store in a variable\n    2. The first number is perfect square\n    3. The second number is the greater square than the input number\n    4. The third number is the difference between the input number and the previous square\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #Initialize the minimum and maximum to be considered \n    minimum = 0\n    maximum = N\n    #if N is even then return the previous perfect square\n    if N%2 == 0:\n        return int(math.sqrt(N)*2)\n    else:\n        #if N is odd then check the value of sqrt(N)\n        if int(math.sqrt(N))%2 == 0:\n            return int(math.sqrt(N))\n        else:\n            return int(math.sqrt(N))\n            ",
        "num_ids": 128
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while N % 2 == 0:\n        N //= 2\n",
        "num_ids": 17
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.ceil(math.sqrt(N)) \n    if (math.sqrt(x)*math.sqrt(x) == N): \n        return(x*x) \n    else: \n        return (x*x + 1) \n",
        "num_ids": 66
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    arr.sort()\n    l = 0\n    r = n - 1\n    ans = arr[0]\n    while(l < r):\n        if arr[l] < arr[r]:\n            ans = max(ans, arr[r] + arr[l])\n            r -= 1\n        else:\n            ans = max(ans, arr[r] + arr[l])\n            l += 1\n",
        "num_ids": 104
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: return 0\n",
        "num_ids": 10
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Convert to list of integers\n    arr = [int(x) for x in arr]\n",
        "num_ids": 24
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #Initalize variables\n    max_sum = 0\n    start = 0\n    end = 0\n    \n    #Iterate through the list\n    for i in range(len(arr) - 1):\n        \n        #Check if the list is decreasing\n        if arr[i] < arr[i + 1]:\n            #Check if the current max_sum is higher than the sum from start to end\n            if max_sum < sum(arr[start:end]):\n                #Store the new max_sum\n                max_sum = sum(arr[start:end])\n                #Store the starting and ending indices\n                start = start\n                end = end\n            #Otherwise, reset the indices\n            else:\n                start = start\n                end = end\n        #If the list is increasing, reset the indices\n        else:\n            start = start\n            end = end\n    return max_sum\n",
        "num_ids": 206
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    arr.sort()\n    for i in range(1, len(arr) - 1):\n        sum = arr[i] + arr[i - 1] + arr[i + 1]\n        max_sum = max(max_sum, sum)\n    return max_sum\n",
        "num_ids": 77
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_bitonic_subsequence_sum(arr, 0, len(arr) - 1)\n",
        "num_ids": 26
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Computes the length of the array\n    n = len(arr) \n    \n    # Creates an empty array that will hold the maximum sum\n    max_sum_arr = [0] * n\n    \n    # A function that computes the maximum sum of a bitonic subsequence\n    max_sum_arr = compute_max_sum(arr, max_sum_arr, n) \n",
        "num_ids": 96
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # to find the maximum sum of the bitonic sequence, we can use the recursive function, and compare the value of its maximum sum with the previous maximum sum and keep on updating the maximum sum\n    return max_sum_bitonic_recursive(arr, 0, len(arr)-1)\n",
        "num_ids": 66
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_bitonic_array(arr, 0, len(arr)-1)\n",
        "num_ids": 24
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n",
        "num_ids": 10
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError\n    guess = 1\n    next_guess = number/guess\n    while abs(guess-next_guess) > 0.00001:\n        guess = next_guess\n        next_guess = number/guess\n    return guess\n    \ndef bhaskara(a,b,c):\n    '''\n    Write a function to solve the quadratic equation ax**2 + bx + c = 0\n    '''\n    if a == 0:\n        raise ValueError\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b/(2*a)\n    else:\n        return (-b + discriminant**(1/2))/(2*a), (-b - discriminant**(1/2))/(2*a)\n    \ndef count_characters(str):\n    '''\n    Write a function that counts the number of characters in a string. \n    '''\n    if str == '':\n        return 0\n    return 1 + count_characters(str[1:])\n    \ndef factorial(n):\n    '''\n    Write a recursive function that computes the factorial of a non-negative integer.\n    '''\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a recursive function that computes the nth Fibonacci number.\n    '''\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef flatten(array):\n    '''\n    Write a function that flattens an array. \n    '''\n    def flatten_helper(array, result):\n        if len(array) == 0:\n            return result\n        if isinstance(array[0], list):\n            return flatten_helper(array[0], result) + flatten_helper(array[1:], result)\n        return flatten_helper(array[1:], result + [array[0]])\n    return flatten_helper(array, [])\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome. \n    '''\n    if len(string) < 2:\n        return True\n    if string[0]!= string[-1]:\n        return False\n    return is_palindrome(string[1:-1])\n    \ndef is_prime(number):\n    '''\n    Write a function to check if a number is prime. \n    '''\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n    \ndef length_of_longest_substring(str):\n    '''\n    Write a function to find the length of the longest substring in a string \n    without repeating characters. \n    '''\n    if str == '':\n        return 0\n    if len(str) == 1:\n        return 1\n    max_length = 0\n    substring = ''\n    for i in range(len(str)):\n        substring += str[i]\n        if len(set(substring)) == len(substring):\n            if len(substring) > max_length:\n                max_length = len(substring)\n        else:\n            substring = ''\n    return max_length\n    \ndef multiply(array):\n    '''\n    Write a function that takes in an array of integers and returns an array of the products of all of the integers except the integer itself.\n    '''\n    if len(array) == 1:\n        return array\n    prod = 1\n    for i in array:\n        prod *= i\n    return [prod/i for i in array]\n    \ndef reverse(string):\n    '''\n    Write a function that reverses a string.\n    '''\n    if string == '':\n        return ''\n    return reverse(string[1:]) + string[0]\n    \ndef is_substring(substring, string):\n    '''\n    Write a function that takes in a string and checks if it is a substring of another string. \n    '''\n    if substring in string:\n        return True\n    return False\n    \ndef is_superstring(string, superstring):\n    '''\n    Write a function that takes in two strings and checks if the first string is a superstring of the second string. \n    '''\n    if superstring in string or string in superstring:\n        return True\n    return False\n    \ndef is_valid_parenthesis(string):\n    '''\n    Write a function that takes in a string of parentheses and determines if they are balanced. \n    '''\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n    \ndef reverse_words_in_string(string):\n    '''\n    Write a function that takes in a string and reverses the order of the words in the string. \n    '''\n    if string == '':\n        return ''\n    return string.split()[-1] +'' + reverse_words_in_string(string[:string.find(' ')])\n    \ndef search_for_word(string, word):\n    '''\n    Write a function that takes in a string and a word and searches the string for the word. \n    '''\n    if string == '':\n        return None\n    if string.find(word) == -1:\n        return None\n    if string.find(word) == 0:\n        return 0\n    return 1 + search_for_word(string[string.find(word)+len(word):], word)\n    \ndef is_palindrome_permutation(str):\n    '''\n    Write a function to check if a string is a permutation of a palindrome. \n    '''\n    if str == '':\n        return True\n    return len(set(str)) <= 1\n    \ndef is_palindrome_permutation_2(str):\n    '''\n    Write a function to check if a string is a permutation of a palindrome. \n    '''\n    if str == '':\n        return True\n    dict = {}\n    for char in str:\n        if char =='':\n            continue\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    odd = 0\n    for key in dict:\n        if dict[key] % 2!= 0:\n            odd += 1\n    return odd <= 1\n    \ndef longest_palindromic_subsequence(string):\n    '''\n    Write a function that finds the longest palindromic subsequence in a string.\n    '''\n    if string == '':\n        return 0\n    if len(string) == 1:\n        return 1\n    if string == string[::-1]:\n        return len(string)\n    return max(longest_palindromic_subsequence(string[:-1]) + 1, longest_palindromic_subsequence(string[1:]))\n    \ndef longest_palindromic_substring(string):\n    '''\n    Write a function that finds the longest palindromic substring in a string.\n    '''\n    if string == '':\n        return ''\n    if len(string) == 1:\n        return string\n    if string == string[::-1]:\n        return string\n    max_length = 0\n    max_string = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j] == string[i:j][::-1]:\n                if len(string[i:j]) > max_length:\n                    max_length = len(string[i:j])\n                    max_string = string[i:j]\n    return max_string\n    \ndef remove_vowels(string):\n    '''\n    Write a function that takes in a string and removes all vowels. \n    '''\n    vowels = [",
        "num_ids": 8
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    epsilon = 0.0001\n    num_guesses = 0\n    low = 0\n    high = x\n",
        "num_ids": 34
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2\n    while True:\n        better = (approx + number/approx)/2\n        if abs(approx-better) < 0.000001:\n            return better\n        approx = better\n",
        "num_ids": 55
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    previous = 1\n    current = 1\n    for i in range(1, number):\n        previous, current = current, (previous + (number / current)) * 0.5\n    return current\n",
        "num_ids": 50
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number / 2.0\n",
        "num_ids": 16
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # The variable x is the guess, n is the number we want to find the square root of.\n    x = 1\n    n = number\n    \n    # This loop runs until the difference between our guess and the number we want to find the square root of is less than 0.001\n    while (abs(n - x**2) > 0.001):\n        # We then update the guess and the number we want to find the square root of.\n        x = (x + n / x) / 2\n        n = number\n        \n    # We then print the guess.\n    print(x)\n    ",
        "num_ids": 139
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # The Babylonian method for computing square roots\n    # Find a number such that its square root is less than 1\n    # Compute new approximation by adding the previous value\n    # The difference between the two is always a positive number\n    # Thus, the difference between the two is always less than 1\n    # We can iterate this algorithm until the difference between\n    # the current approximation and the previous approximation\n    # is less than 10^-14\n    \n    # Initialize variables\n    previous_guess = number / 2\n    current_guess = 0\n    \n    while True:\n        current_guess = (previous_guess + number / previous_guess) / 2\n        difference = current_guess - previous_guess\n        if abs(difference) < 10**-14:\n            break\n        previous_guess = current_guess\n        \n    return current_guess\n    \n    \ndef heron(a, b, c):\n    '''\n    Write a function for computing the area of a triangle\n    using the heron's method.\n    '''\n    \n    # Heron's method for computing the area of a triangle\n    # Heron's formula\n    \n    # a^2 + b^2 = c^2\n    # a = hypotenuse\n    # b = opposite\n    # c = adjacent\n    \n    # Get the lengths of the sides\n    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n    \n    # Compute the semiperimeter\n    s = (a + b + c) / 2\n    \n    # Compute the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    return area\n    \n    \ndef heron_test():\n    '''\n    A test function for the heron's method.\n    '''\n    \n    # Define the lengths\n    a = 2\n    b = 3\n    c = 4\n    \n    # Get the area\n    area = heron(a, b, c)\n    \n    # Print the area\n    print(area)\n    \n    \nif __name__ == \"__main__\":\n    \n    # Define the number\n    number = 2\n    \n    # Get the square root\n    square_root = babylonian_squareroot(number)\n    \n    # Print the square root\n    print(square_root)\n    \n    # Get the area of the triangle\n    # Use the heron's method\n    area = heron(3, 4, 5)\n    \n    # Print the area of the triangle\n    print(area)\n    \n    # Test the heron's method\n    heron_test(",
        "num_ids": 198
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) / 2\n    while abs(y * y - number) > 0.001:\n        x = y\n        y = (x + number / x) / 2\n    return y\n",
        "num_ids": 56
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number/2\n    while True:\n        better = (approx + number/approx)/2\n        print(better)\n        if abs(better - approx) < 0.001:\n            return better\n        approx = better\n        \n",
        "num_ids": 61
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number / 2) + 1\n    while True:\n        y = ((x + number / x) / 2)\n        if y == x:\n            break\n        x = y\n    return y\n",
        "num_ids": 56
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n",
        "num_ids": 52
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # code here\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    for i in range(2,n):\n        for j in range(n-i):\n            k = j+i\n            if str[j] == str[k] and dp[j+1][k-1] > 0:\n                dp[j][k] = dp[j+1][k-1] + 2\n            else:\n                dp[j][k] = max(dp[j][k-1],dp[j+1][k])\n    return dp[0][n-1]",
        "num_ids": 227
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    l = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        l[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                l[i][j] = 2\n            elif str[i] == str[j]: \n                l[i][j] = l[i+1][j-1] + 2\n            else: \n                l[i][j] = max(l[i][j-1], l[i+1][j]); \n",
        "num_ids": 185
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    def lps_helper(str, i, j):\n        if i > j:\n            return 0\n        elif i == j:\n            return 1\n        if str[i] == str[j]:\n            return 2 + lps_helper(str, i+1, j-1)\n        else:\n            return max(lps_helper(str, i+1, j), lps_helper(str, i, j-1))\n",
        "num_ids": 112
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2,n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1],L[i+1][j]); \n",
        "num_ids": 185
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    else:\n        n = len(str)\n        dp = [[0 for i in range(n)] for j in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-1):\n            if str[i] == str[i+1]:\n                dp[i][i+1] = 2\n            else:\n                dp[i][i+1] = 1\n",
        "num_ids": 123
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    # get list of numbers from 1 to n\n    \n    nums = [x for x in range(1, n+1)]\n",
        "num_ids": 35
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n    return round(total, 2)\n",
        "num_ids": 34
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n * sum([1 / i for i in range(1,n)])\n",
        "num_ids": 24
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    while n >= 1:\n        sum += 1/n\n        n -= 1\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += 1/i\n    return sum\n    \ndef is_odd(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is odd and False otherwise.\n    '''\n    \n    return n % 2!= 0\n    \ndef num_digits(n):\n    '''\n    Write a function that takes in an integer n and returns the number of digits in n.\n    '''\n    \n    return len(str(n))\n    \ndef num_even_digits(n):\n    '''\n    Write a function that takes in an integer n and returns the number of even digits in n.\n    '''\n    \n    count = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2 == 0:\n            count += 1\n    return count\n    \ndef num_odd_digits(n):\n    '''\n    Write a function that takes in an integer n and returns the number of odd digits in n.\n    '''\n    \n    count = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2!= 0:\n            count += 1\n    return count\n    \ndef num_even_digits_sum(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the even digits in n.\n    '''\n    \n    sum = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2 == 0:\n            sum += int(digit)\n    return sum\n    \ndef num_odd_digits_sum(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the odd digits in n.\n    '''\n    \n    sum = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2!= 0:\n            sum += int(digit)\n    return sum\n    \ndef num_even_digits_average(n):\n    '''\n    Write a function that takes in an integer n and returns the average of the even digits in n.\n    '''\n    \n    sum = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2 == 0:\n            sum += int(digit)\n    return sum/num_even_digits(n)\n    \ndef num_odd_digits_average(n):\n    '''\n    Write a function that takes in an integer n and returns the average of the odd digits in n.\n    '''\n    \n    sum = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2!= 0:\n            sum += int(digit)\n    return sum/num_odd_digits(n)\n    \ndef num_even_digits_prod(n):\n    '''\n    Write a function that takes in an integer n and returns the product of the even digits in n.\n    '''\n    \n    prod = 1\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2 == 0:\n            prod *= int(digit)\n    return prod\n    \ndef num_odd_digits_prod(n):\n    '''\n    Write a function that takes in an integer n and returns the product of the odd digits in n.\n    '''\n    \n    prod = 1\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2!= 0:\n            prod *= int(digit)\n    return prod\n    \ndef num_even_digits_sum_prod(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the even digits in n, followed by the product of the even digits in n.\n    '''\n    \n    sum = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2 == 0:\n            sum += int(digit)\n    prod = 1\n    for digit in n:\n        if int(digit) % 2 == 0:\n            prod *= int(digit)\n    return sum, prod\n    \ndef num_odd_digits_sum_prod(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the odd digits in n, followed by the product of the odd digits in n.\n    '''\n    \n    sum = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2!= 0:\n            sum += int(digit)\n    prod = 1\n    for digit in n:\n        if int(digit) % 2!= 0:\n            prod *= int(digit)\n    return sum, prod\n    \ndef num_even_digits_sum_avg(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the even digits in n, followed by the average of the even digits in n.\n    '''\n    \n    sum = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2 == 0:\n            sum += int(digit)\n    return sum, sum/num_even_digits(n)\n    \ndef num_odd_digits_sum_avg(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the odd digits in n, followed by the average of the odd digits in n.\n    '''\n    \n    sum = 0\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2!= 0:\n            sum += int(digit)\n    return sum, sum/num_odd_digits(n)\n    \ndef num_even_digits_prod_sum(n):\n    '''\n    Write a function that takes in an integer n and returns the product of the even digits in n, followed by the sum of the even digits in n.\n    '''\n    \n    prod = 1\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2 == 0:\n            prod *= int(digit)\n    sum = 0\n    for digit in n:\n        if int(digit) % 2 == 0:\n            sum += int(digit)\n    return prod, sum\n    \ndef num_odd_digits_prod_sum(n):\n    '''\n    Write a function that takes in an integer n and returns the product of the odd digits in n, followed by the sum of the odd digits in n.\n    '''\n    \n    prod = 1\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2!= 0:\n            prod *= int(digit)\n    sum = 0\n    for digit in n:\n        if int(digit) % 2!= 0:\n            sum += int(digit)\n    return prod, sum\n    \ndef num_even_digits_prod_avg(n):\n    '''\n    Write a function that takes in an integer n and returns the product of the even digits in n, followed by the average of the even digits in n.\n    '''\n    \n    prod = 1\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2 == 0:\n            prod *= int(digit)\n    avg = 0\n    sum = 0\n    for digit in n:\n        if int(digit) % 2 == 0:\n            sum += int(digit)\n            avg += int(digit)\n    return prod, sum/num_even_digits(n), avg/num_even_digits(n)\n    \ndef num_odd_digits_prod_avg(n):\n    '''\n    Write a function that takes in an integer n and returns the product of the odd digits in n, followed by the average of the odd digits in n.\n    '''\n    \n    prod = 1\n    n = str(n)\n    \n    for digit in n:\n        if int(digit) % 2!= 0:\n            prod *= int(digit)\n    avg = 0\n    sum = 0",
        "num_ids": 60
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize the sum\n    sum = 0\n    # use a for loop to iterate through the values from 1 to n, where n is the argument to the function\n    for i in range(1, n):\n        # get the value of the current iteration\n        cur = i\n        # use a while loop to iterate through the values from 1 to i-1, where i is the value of the current iteration\n        while cur > 0:\n            # add the value of the current iteration to the sum\n            sum += 1/cur\n            # decrement the current iteration value\n            cur -= 1\n    # return the sum\n    return sum\n    \n",
        "num_ids": 147
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    while n > 0:\n        result += 1 / n\n        n -= 1\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # n = 1\n    # return 1\n    # if n == 0:\n    #     return 0\n",
        "num_ids": 27
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)<len(array_nums2):\n        base_array=array_nums1\n        check_array=array_nums2\n    else:\n        base_array=array_nums2\n        check_array=array_nums1\n    set_array=[]\n    for num in base_array:\n        if num in check_array:\n            set_array.append(num)\n    return set_array\n",
        "num_ids": 111
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    #set1 = set(array_nums1)\n    #set2 = set(array_nums2)\n    #set3 = set1.intersection(set2)\n    #print(set3)\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    set3 = set1.intersection(set2)\n    return list(set3)\n",
        "num_ids": 103
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_1 = []\n    array_2 = []\n    for i in array_nums1:\n        if i not in array_1:\n            array_1.append(i)\n    for j in array_nums2:\n        if j not in array_2:\n            array_2.append(j)\n    return array_1, array_2\n",
        "num_ids": 88
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set2.intersection(set1))\n",
        "num_ids": 42
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        array_nums1,array_nums2 = array_nums2,array_nums1\n    unique = {}\n    result = []\n    for num in array_nums1:\n        if num not in unique:\n            unique[num] = 1\n    for num in array_nums2:\n        if num in unique and unique[num] == 1:\n            result.append(num)\n            unique[num] = 2\n    return result\n",
        "num_ids": 129
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    p1 = 0\n    p2 = 0\n",
        "num_ids": 34
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # loop over first array\n    #loop over second array\n    # if the number is already in the new list add it to the new list\n    # return new list\n    #\n    # make a new list\n    # loop over both arrays\n    # if the number is already in the new list add it to the new list\n    # return new list\n    #\n    # loop over both arrays\n    # make a new list\n    # loop over the new list\n    # append the number to the new list if it is not in the new list\n    # return the new list\n",
        "num_ids": 131
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1=set(array_nums1)\n    set2=set(array_nums2)\n    return list(set1&set2)\n",
        "num_ids": 39
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    num_dict = {}\n    res_list = []\n    for num in array_nums1:\n        num_dict[num] = num_dict.get(num,0) + 1\n",
        "num_ids": 48
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_list = list(tup)\n    return tup_list.count(x) \n",
        "num_ids": 27
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for t in tup:\n        if t == x: \n            count = count + 1\n    return count \n",
        "num_ids": 36
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for i in tup:\n        if i==x:\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if x in tup:\n        return tup.count(x)\n    return 0\n",
        "num_ids": 24
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count = count + 1\n    return count\nprint(count_X((1,2,3,4,4,4,3), 4))\n",
        "num_ids": 58
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 30
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your code here\n    #list = [1,3,4,5]\n    #element = 2\n    \n    index = 0\n    for i in list:\n        if i == element:\n            list.insert(index,element)\n            index += 1\n        index += 1\n    return list\n",
        "num_ids": 73
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    list.append(element)\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i-1,element)\n    return list\ndef replace_element(list,old_element,new_element):\n    '''\n    Write a function that takes in a list, a value, and a value and replaces all instances of the value in the list with the new value and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == old_element:\n            list[i] = new_element\n    return list\ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes all instances of the element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.pop(i)\n    return list\ndef common_elements(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list containing all of the elements that are common between the lists.\n    '''\n    common_list = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                common_list.append(list1[i])\n    return common_list\ndef sum_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all of the numbers in the list.\n    '''\n    total = 0\n    for i in range(len(list)):\n        total = total + list[i]\n    return total\ndef average_list(list):\n    '''\n    Write a function that takes in a list and returns the average (mean) of the values in the list.\n    '''\n    total = 0\n    for i in range(len(list)):\n        total = total + list[i]\n    return total/len(list)\ndef length_list(list):\n    '''\n    Write a function that takes in a list and returns the length of the list.\n    '''\n    return len(list)\ndef minimum_list(list):\n    '''\n    Write a function that takes in a list and returns the minimum value in the list.\n    '''\n    min = list[0]\n    for i in range(len(list)):\n        if list[i] < min:\n            min = list[i]\n    return min\ndef maximum_list(list):\n    '''\n    Write a function that takes in a list and returns the maximum value in the list.\n    '''\n    max = list[0]\n    for i in range(len(list)):\n        if list[i] > max:\n            max = list[i]\n    return max\ndef is_list_sorted(list,type):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted in ascending order and False if the list is not sorted in ascending order.\n    '''\n    if type == \"ascending\":\n        for i in range(len(list)):\n            if list[i] < list[i+1]:\n                continue\n            else:\n                return False\n    elif type == \"descending\":\n        for i in range(len(list)):\n            if list[i] > list[i+1]:\n                continue\n            else:\n                return False\n    return True\ndef count_occurrences_list(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the element appears in the list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            count = count + 1\n    return count\ndef is_element_list(list,element):\n    '''\n    Write a function that takes in a list and an element and returns True if the element appears in the list, and False if the element does not appear in the list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return True\n    return False\ndef index_of_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element in the list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return i\n    return None\ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a list with all duplicate elements removed.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if list[i] not in new_list:\n            new_list.append(list[i])\n    return new_list\ndef copy_list(list):\n    '''\n    Write a function that takes in a list and returns a copy of the list.\n    '''\n    return list.copy()\ndef nested_list_depth(list):\n    '''\n    Write a function that takes in a nested list and returns the depth of the nested list.\n    '''\n    depth = 1\n    for i in list:\n        if type(i) == list:\n            depth = depth + 1\n    return depth\ndef print_depth(list):\n    '''\n    Write a function that takes in a nested list and prints the depth of the nested list.\n    '''\n    depth = nested_list_depth(list)\n    print(\"the depth of the list is\",depth)\ndef max_number_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    max = list[0]\n    for i in range(len(list)):\n        if list[i] > max:\n            max = list[i]\n    return max\ndef min_number_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns the smallest number in the list.\n    '''\n    min = list[0]\n    for i in range(len(list)):\n        if list[i] < min:\n            min = list[i]\n    return min\ndef minimum_index_list(list):\n    '''\n    Write a function that takes in a list and returns the index of the minimum value in the list.\n    '''\n    index = 0\n    min = list[0]\n    for i in range(len(list)):\n        if list[i] < min:\n            min = list[i]\n            index = i\n    return index\ndef maximum_index_list(list):\n    '''\n    Write a function that takes in a list and returns the index of the maximum value in the list.\n    '''\n    index = 0\n    max = list[0]\n    for i in range(len(list)):\n        if list[i] > max:\n            max = list[i]\n            index = i\n    return index\ndef swap_list(list,index1,index2):\n    '''\n    Write a function that takes in a list and two index values and swaps the values at the two indexes.\n    '''\n    list[index1],list[index2] = list[index2],list[index1]\n    return list\ndef selection_sort_list(list):\n    '''\n    Write a function that takes in a list and returns a sorted version of the list using selection sort.\n    '''\n    for i in range(len(list)):\n        min = i\n        for j in range(i+1,len(list)):\n            if list[j] < list[min]:\n                min = j\n        list[i],list[min] = list[min],list[i]\n    return list\ndef insertion_sort_list(list):\n    '''\n    Write a function that takes in a list and returns a sorted version of the list using insertion sort.\n    '''\n    for i in range(len(list)):\n        j = i\n        while j >= 1 and list[j] < list[j-1]:\n            list[j],list[j-1] = list[j-1],list[j]\n            j = j-1\n    return list\ndef bubble_sort_list(list):\n",
        "num_ids": 81
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 28
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "num_ids": 10
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index,item in enumerate(list):\n        list.insert(index,element)\n    return list\n    # return [element].extend(list)\n",
        "num_ids": 40
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index = 0\n    for element in list:\n        list.insert(index,element)\n        index += 1\n    return list\n",
        "num_ids": 33
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 36
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    length=len(list)\n    new_list=[]\n    if(element in list):\n        for i in range(length):\n            if(list[i]==element):\n                new_list.append(element)\n            new_list.append(list[i])\n    else:\n        for i in range(length):\n            new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n",
        "num_ids": 108
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    output = []\n    for complex_num in numbers:\n        num = complex_num.real\n        den = complex_num.imag\n        output.append(((num**2) + (den**2), cmath.phase(complex_num)))\n    return output\n",
        "num_ids": 64
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def r(z):\n        return(z.real)\n    def i(z):\n        return(z.imag)\n    def a(z):\n        return(abs(z))\n    def p(z):\n        return(cmath.phase(z))\n    if(type(numbers)==list):\n        ret_lst=[]\n        for z in numbers:\n            if(type(z)==complex):\n                ret_lst.append([z,p(z),a(z),i(z)])\n            else:\n                print(\"complex number expected\")\n                return\n    else:\n        print(\"list expected\")\n        return\n    return ret_lst\n",
        "num_ids": 163
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #list_num=[]\n    #print(\"Input : \",numbers)\n    real=numbers.real\n    imaginary=numbers.imag\n    #print(real,imaginary)\n    polar=cmath.polar(complex(real,imaginary))\n    #print(polar)\n    #print(polar[0],polar[1])\n    return(polar)\n",
        "num_ids": 96
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for i in numbers:\n        x = i.real\n        y = i.imag\n        if y == 0:\n            polar_numbers.append((i,0))\n        else:\n            z = cmath.polar(complex(x,y))\n            polar_numbers.append((complex(z[0],z[1]),z[2]))\n    print(polar_numbers)\n",
        "num_ids": 108
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        z = complex(number)\n        x = z.real\n        y = z.imag\n        polar_coordinates.append([round(cmath.polar(complex(x,y)),2)])\n    return polar_coordinates\n",
        "num_ids": 74
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list1 = []\n    for i in numbers:\n        c = complex(i)\n        p = cmath.polar(c)\n        list1.append(p)\n    return list1\n",
        "num_ids": 49
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list1=numbers.split()\n    complex1=complex(list1[0],list1[1])\n    a=complex1.real\n    b=complex1.imag\n    if complex1 ==0:\n        return \"The input was zero\"\n    else:\n        p=abs(complex1)\n        polar=cmath.polar(complex1)\n        r=polar[0]\n        theta=polar[1]\n        return \"The complex number is: \"+str(a)+\"+\"+str(b)+\"i.\\nThe radius is: \"+str(r)+\".\\nThe phase is: \"+str(theta)+\".\"\n        \n        \ndef square_root(numbers):\n    '''\n    Write a python function to take the square root of a complex number.\n    '''\n    list1=numbers.split()\n    complex1=complex(list1[0],list1[1])\n    a=complex1.real\n    b=complex1.imag\n    if complex1 ==0:\n        return \"The input was zero\"\n    else:\n        p=abs(complex1)\n        polar=cmath.polar(complex1)\n        r=polar[0]\n        theta=polar[1]\n        theta=cmath.phase(complex1)\n        polar=(r**2)**(1/2)\n        polar=(polar*cmath.exp(theta*1j))\n        return \"The complex number is: \"+str(a)+\"+\"+str(b)+\"i.\\nThe radius is: \"+str(polar.real)+\".\\nThe phase is: \"+str(polar.imag)+\".\"\n        \n",
        "num_ids": 213
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    newnumbers=[]\n    for num in numbers:\n        num=complex(num)\n        if (num.imag)>=0:\n            #newnumbers.append(num)\n            newnumbers.append(abs(num))\n            newnumbers.append(cmath.phase(num))\n        else:\n            #newnumbers.append(num)\n            newnumbers.append(abs(num))\n            newnumbers.append(cmath.phase(num))\n    return newnumbers\n",
        "num_ids": 122
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(cmath.polar(x))\n    return ans\ndef convert_to_polar(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(cmath.polar(x))\n    return ans\ndef zip_complex(numbers):\n    '''\n    Write a python function to convert complex numbers to cartesian coordinates.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(cmath.rect(x[0],x[1]))\n    return ans\ndef zip_cartesian(numbers):\n    '''\n    Write a python function to convert complex numbers to cartesian coordinates.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(cmath.rect(x[0],x[1]))\n    return ans\ndef zip_polar(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(cmath.polar(x))\n    return ans\ndef zip_polar_to_complex(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(cmath.rect(x[0],x[1]))\n    return ans\ndef add_complex(numbers):\n    '''\n    Write a python function to add complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]+x[1])\n    return ans\ndef add_complex_to_complex(numbers):\n    '''\n    Write a python function to add complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]+x[1])\n    return ans\ndef multiply_complex(numbers):\n    '''\n    Write a python function to multiply complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]*x[1])\n    return ans\ndef multiply_complex_to_complex(numbers):\n    '''\n    Write a python function to multiply complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]*x[1])\n    return ans\ndef get_absolute_value(numbers):\n    '''\n    Write a python function to get absolute value of complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(abs(x))\n    return ans\ndef get_absolute_value_complex(numbers):\n    '''\n    Write a python function to get absolute value of complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(abs(x))\n    return ans\ndef mod_complex(numbers):\n    '''\n    Write a python function to get modulus of complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(abs(x))\n    return ans\ndef mod_complex_to_complex(numbers):\n    '''\n    Write a python function to get modulus of complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(abs(x))\n    return ans\ndef div_complex(numbers):\n    '''\n    Write a python function to divide complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]/x[1])\n    return ans\ndef div_complex_to_complex(numbers):\n    '''\n    Write a python function to divide complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]/x[1])\n    return ans\ndef add_complex_to_real(numbers):\n    '''\n    Write a python function to add complex numbers with real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]+(x[1]))\n    return ans\ndef add_complex_to_real_complex(numbers):\n    '''\n    Write a python function to add complex numbers with real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]+(x[1]))\n    return ans\ndef add_real_to_complex(numbers):\n    '''\n    Write a python function to add real numbers with complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append((x[0]+x[1]))\n    return ans\ndef add_real_to_complex_complex(numbers):\n    '''\n    Write a python function to add real numbers with complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append((x[0]+x[1]))\n    return ans\ndef sub_complex_from_real(numbers):\n    '''\n    Write a python function to subtract complex numbers from real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]-x[1])\n    return ans\ndef sub_complex_from_real_complex(numbers):\n    '''\n    Write a python function to subtract complex numbers from real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]-x[1])\n    return ans\ndef sub_real_from_complex(numbers):\n    '''\n    Write a python function to subtract real numbers from complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]-x[1])\n    return ans\ndef sub_real_from_complex_complex(numbers):\n    '''\n    Write a python function to subtract real numbers from complex numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]-x[1])\n    return ans\ndef add_real_to_complex_from_real(numbers):\n    '''\n    Write a python function to add real numbers from complex numbers with real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]+x[1])\n    return ans\ndef add_real_to_complex_from_real_complex(numbers):\n    '''\n    Write a python function to add real numbers from complex numbers with real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]+x[1])\n    return ans\ndef sub_real_from_complex_from_real(numbers):\n    '''\n    Write a python function to subtract real numbers from complex numbers with real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]-x[1])\n    return ans\ndef sub_real_from_complex_from_real_complex(numbers):\n    '''\n    Write a python function to subtract real numbers from complex numbers with real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(x[0]-x[1])\n    return ans\ndef add_complex_from_real_from_real(numbers):\n    '''\n    Write a python function to add complex numbers from real numbers with real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(complex(x[0],x[1]))\n    return ans\ndef add_complex_from_real_from_real_complex(numbers):\n    '''\n    Write a python function to add complex numbers from real numbers with real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(complex(x[0],x[1]))\n    return ans\ndef sub_complex_from_real_from_real(numbers):\n    '''\n    Write a python function to subtract complex numbers from real numbers with real numbers.\n    '''\n    ans=[]\n    for x in numbers:\n        ans.append(complex(x[0],-x",
        "num_ids": 27
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(numbers)\n    a=cmath.phase(numbers)\n    print(a)\n    print(math.degrees(a))\n    #print(math.cos(numbers))\n    #print(math.sin(numbers))\ndef convert1(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    print(numbers)\n    a=cmath.polar(numbers)\n    print(a)\n    print(complex(a[0],a[1]))\ndef addition(a,b):\n    '''\n    Write a python function to add two complex numbers.\n    '''\n    c=complex(a,b)\n    c=c+2\n    print(c)\ndef multiplication(a,b):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    c=complex(a,b)\n    c=c*2\n    print(c)\ndef subtraction(a,b):\n    '''\n    Write a python function to subtract two complex numbers.\n    '''\n    c=complex(a,b)\n    c=c-2\n    print(c)\ndef division(a,b):\n    '''\n    Write a python function to divide two complex numbers.\n    '''\n    c=complex(a,b)\n    c=c/2\n    print(c)\ndef multiplication_by_constant(a,b):\n    '''\n    Write a python function to multiply complex number by a constant.\n    '''\n    c=complex(a,b)\n    c=c*2\n    print(c)\ndef division_by_constant(a,b):\n    '''\n    Write a python function to divide complex number by a constant.\n    '''\n    c=complex(a,b)\n    c=c/2\n    print(c)\ndef addition_by_constant(a,b):\n    '''\n    Write a python function to add a complex number by a constant.\n    '''\n    c=complex(a,b)\n    c=c+2\n    print(c)\ndef subtraction_by_constant(a,b):\n    '''\n    Write a python function to subtract a complex number by a constant.\n    '''\n    c=complex(a,b)\n    c=c-2\n    print(c)\ndef subtraction_complex_numbers(a,b):\n    '''\n    Write a python function to subtract complex numbers.\n    '''\n    c=complex(a,b)\n    c=c-c\n    print(c)\ndef division_complex_numbers(a,b):\n    '''\n    Write a python function to divide complex numbers.\n    '''\n    c=complex(a,b)\n    c=c/c\n    print(c)\ndef multiplication_complex_numbers(a,b):\n    '''\n    Write a python function to multiply complex numbers.\n    '''\n    c=complex(a,b)\n    c=c*c\n    print(c)\ndef absolute_value(a):\n    '''\n    Write a python function to calculate absolute value of a complex number.\n    '''\n    c=complex(a)\n    c=abs(c)\n    print(c)\ndef unit_circle_area(r):\n    '''\n    Write a python function to calculate area of unit circle.\n    '''\n    pi=math.pi\n    c=complex(r)\n    c=pi*(c**2)\n    print(c)\ndef polar_coordinate_of_a_point(x,y):\n    '''\n    Write a python function to calculate polar coordinate of a point.\n    '''\n    print(complex(x,y))\n    print(cmath.polar(complex(x,y)))\ndef arg_of_a_point(x,y):\n    '''\n    Write a python function to calculate argument of a point.\n    '''\n    c=complex(x,y)\n    print(cmath.arg(c))\ndef mod_of_a_point(x,y):\n    '''\n    Write a python function to calculate modulus of a point.\n    '''\n    c=complex(x,y)\n    print(cmath.phase(c))\ndef complex_number_to_polar_coordinate(a):\n    '''\n    Write a python function to convert complex number to polar coordinate.\n    '''\n    print(cmath.polar(a))\ndef complex_number_to_cartesian_coordinate(a):\n    '''\n    Write a python function to convert complex number to cartesian coordinate.\n    '''\n    print(cmath.rect(a))\ndef complex_number_to_magnitude_and_phase(a):\n    '''\n    Write a python function to convert complex number to magnitude and phase.\n    '''\n    print(cmath.polar(a))\ndef complex_number_to_unit_circle(a):\n    '''\n    Write a python function to convert complex number to unit circle.\n    '''\n    print(cmath.rect(a))\ndef complex_number_to_magnitude_and_phase(a):\n    '''\n    Write a python function to convert complex number to magnitude and phase.\n    '''\n    print(cmath.polar(a))\ndef complex_number_to_unit_circle(a):\n    '''\n    Write a python function to convert complex number to unit circle.\n    '''\n    print(cmath.rect(a))\ndef convert_complex_number_to_decimal(a):\n    '''\n    Write a python function to convert complex number to decimal.\n    '''\n    print(cmath.phase(a))\n    print(cmath.polar(a)[0])\ndef convert_decimal_to_complex_number(a):\n    '''\n    Write a python function to convert decimal to complex number.\n    '''\n    print(cmath.rect(a))\ndef convert_complex_number_to_decimal(a):\n    '''\n    Write a python function to convert complex number to decimal.\n    '''\n    print(cmath.phase(a))\n    print(cmath.polar(a)[0])\ndef modulus_of_complex_number(a):\n    '''\n    Write a python function to calculate modulus of a complex number.\n    '''\n    print(cmath.phase(a))\n    print(cmath.polar(a)[0])\ndef convert_decimal_to_complex_number(a):\n    '''\n    Write a python function to convert decimal to complex number.\n    '''\n    print(cmath.rect(a))\ndef arg_of_complex_number(a):\n    '''\n    Write a python function to calculate argument of a complex number.\n    '''\n    print(cmath.phase(a))\n    print(cmath.polar(a)[0])\ndef convert_complex_number_to_decimal(a):\n    '''\n    Write a python function to convert complex number to decimal.\n    '''\n    print(cmath.phase(a))\n    print(cmath.polar(a)[0])\ndef convert_decimal_to_complex_number(a):\n    '''\n    Write a python function to convert decimal to complex number.\n    '''\n    print(cmath.rect(a))\ndef convert_complex_number_to_decimal(a):\n    '''\n    Write a python function to convert complex number to decimal.\n    '''\n    print(cmath.phase(a))\n    print(cmath.polar(a)[0])\ndef convert_decimal_to_complex_number(a):\n    '''\n    Write a python function to convert decimal to complex number.\n    '''\n    print(cmath.rect(a))\ndef convert_complex_number_to_decimal(a):\n    '''\n    Write a python function to convert complex number to decimal.\n    '''\n    print(cmath.phase(a))\n    print(cmath.polar(a)[0])\ndef convert_decimal_to_complex_number(a):\n    '''\n    Write a python function to convert decimal to complex number.\n    '''\n    print(cmath.rect(a))\ndef convert_complex_number_to_decimal(a):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i)==int:\n            count +=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i)==int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if type(list1[i])==int:\n            count=count+1\n    return count\n    #Remove pass and write your logic here\n",
        "num_ids": 54
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if(isinstance(item, int)):\n            count+=1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if(isinstance(i,int)):\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if isinstance(i,int):\n            list2.append(i)\n    print(len(list2))\n    return len(list2)\nlist1 = [1,2,3,4,5,6,'a',True]\ncount_integer(list1)\n",
        "num_ids": 81
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list2 = []\n    for x in list1:\n        if type(x) == int:\n            list2.append(x)\n    return len(list2)\n",
        "num_ids": 43
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if isinstance(i, int):\n            counter += 1\n    return counter\n",
        "num_ids": 34
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l,n)]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                comb_list.append([l[i],l[j],l[k]])\n    return comb_list\n",
        "num_ids": 80
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return None\n    combos = list(combinations_with_replacement(l,n))\n    combo_list = []\n    for i in combos:\n        combo_list.append(tuple(i))\n    return combo_list\n",
        "num_ids": 70
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # list(combinations_with_replacement([1,2,3], 2)) --> [(1,1), (1,2), (1,3), (2,2), (2,3), (3,3)]\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 71
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if(len(l) < n):\n        return \"List too short\"\n    else:\n        colors = []\n        for i in range(0,len(l)):\n            for j in range(i+1,len(l)):\n                if(l[i]!= l[j]):\n                    colors.append((l[i],l[j]))\n    return colors\n",
        "num_ids": 96
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    pass\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(len(l)):\n        if len(l[i]) == n:\n            for j in range(len(l[i])):\n                l[i][j] = l[i][j].lower()\n",
        "num_ids": 57
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]\n",
        "num_ids": 21
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # my list [1, 2, 3]\n    # possible combos = [(), (1,), (1, 2), (1, 2, 3), (2,), (2, 3), (3,)]\n    return [tuple(sorted(list(combo))) for combo in combinations_with_replacement(l, n)]\n",
        "num_ids": 80
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        raise ValueError('n cannot be larger than the list size!')\n    if n == 1:\n        return [(i,) for i in l]\n    else:\n        return combinations_with_replacement(l, n)\n",
        "num_ids": 63
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(n):\n        if i > 1:\n            for j in range(2,i):\n                if (i % j) == 0:\n                    break\n            else:\n                primes.append(i)\n    return len(primes)\n",
        "num_ids": 70
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        primes = []\n        for i in range(2,n):\n            isPrime = True\n            for j in range(2,i):\n                if i % j == 0:\n                    isPrime = False\n            if isPrime:\n                primes.append(i)\n        return len(primes)\n",
        "num_ids": 89
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if (n == 2):\n        return 1\n    elif (n == 3):\n        return 2\n    elif (n <= 1):\n        return 0\n    else:\n        if (n % 2 == 0):\n            return count_Primes_nums(n - 1)\n        else:\n            return count_Primes_nums(n - 1) + 1\n",
        "num_ids": 90
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if (n<2):\n        return 0\n    elif (n==2):\n        return 1\n    else:\n        return count_Primes_nums(n-1)+count_Primes_nums(n-2)\n",
        "num_ids": 58
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        return num > 1 and all(num%i for i in range(2,int(num**0.5)+1))\n    return len([i for i in range(2,n+1) if is_prime(i)])\n",
        "num_ids": 65
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Function to check if the input number is prime or not.\n    def is_Prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 73
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n):\n        if i > 1:\n            for j in range(2, i):\n                if(i % j == 0):\n                    break\n            else:\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 3:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= n:\n        for y in range(3,x,2):\n            if x%y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    return len(primes)\n",
        "num_ids": 89
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_num = []\n    count_of_prime_num = 0\n    for i in range(1, n+1):\n        if i>1:\n            for j in range(2,i):\n                if(i % j) == 0:\n                    break\n            else:\n                prime_num.append(i)\n                count_of_prime_num += 1\n    return count_of_prime_num\n",
        "num_ids": 100
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if(n<=0):\n        return 0\n    ans=0\n    for i in range(2,n+1):\n        if isPrime(i)==True:\n            ans+=1\n    return ans\n    \ndef isPrime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n",
        "num_ids": 25
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    return b,a\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    ",
        "num_ids": 9
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = a\n    a = b\n    b = x\n    return a, b\n",
        "num_ids": 23
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a, b = b, a\n",
        "num_ids": 11
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    return tuple(sorted(test_tup1 + test_tup2))\n",
        "num_ids": 44
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #your code here\n    max_val = 0\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i] and test_tup1[i] >= max_val:\n            max_val = test_tup1[i]\n            max_tup = test_tup1\n        if test_tup2[i] >= test_tup1[i] and test_tup2[i] >= max_val:\n            max_val = test_tup2[i]\n            max_tup = test_tup2\n    return max_tup\n",
        "num_ids": 166
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # write code here\n    max_tup = ()\n    # first for loop\n    for elem in test_tup1:\n        if elem > test_tup2[0]:\n            max_tup += (elem,)\n        else:\n            max_tup += (test_tup2[0],)\n    return max_tup\n",
        "num_ids": 87
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # This function takes in two tuples with numerical values,\n    # and returns a tuple with the two values, sorted from highest to lowest.\n    # TODO: YOUR CODE HERE\n    return (max(test_tup1), max(test_tup2))\n    \n",
        "num_ids": 67
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple([max(x,y) for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 33
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if test_tup1[0] >= test_tup2[0]:\n        max_tup = test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        max_tup = test_tup2\n    return max_tup\n",
        "num_ids": 82
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        if i > j:\n            max_tup += (i, )\n        else:\n            max_tup += (j, )\n    return max_tup\n",
        "num_ids": 71
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_sum = 0\n    max_tup1 = ()\n    max_tup2 = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_sum:\n            max_sum = test_tup1[i]\n            max_tup1 = (test_tup1[i],)\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_sum:\n            max_sum = test_tup2[i]\n            max_tup2 = (test_tup2[i],)\n    return (max_tup1, max_tup2)\n",
        "num_ids": 171
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0] * test_tup2[0], test_tup1[0] * test_tup2[1], test_tup1[1] * test_tup2[0], test_tup1[1] * test_tup2[1])\n",
        "num_ids": 75
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1_max_elem = max(test_tup1)\n    test_tup2_max_elem = max(test_tup2)\n    if test_tup1_max_elem > test_tup2_max_elem:\n        return test_tup1_max_elem\n    else:\n        return test_tup2_max_elem\n",
        "num_ids": 99
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0 or n == 1:\n        return 2\n    if n == 2 or n == 3:\n        return 3\n    else:\n        x = 5\n        while True:\n            x = x + 2\n            if (is_prime(x)):\n                return x\n",
        "num_ids": 68
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n        \n    n = int(n)\n    prime_numbers = []\n    num = 3\n    while len(prime_numbers) < n:\n        if is_prime(num):\n            prime_numbers.append(num)\n        num += 2\n    return prime_numbers[-1]\n    \nprint(newman_prime(int(input())))",
        "num_ids": 160
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 79\n    if n == 23:\n        return 83\n    if n == 24:\n        return 89\n    if n == 25:\n        return 97\n    if n == 26:\n        return 101\n    if n == 27:\n        return 103\n    if n == 28:\n        return 107\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 127\n    if n == 32:\n        return 131\n    if n == 33:\n        return 137\n    if n == 34:\n        return 139\n    if n == 35:\n        return 149\n    if n == 36:\n        return 151\n    if n == 37:\n        return 157\n    if n == 38:\n        return 163\n    if n == 39:\n        return 167\n    if n == 40:\n        return 173\n    if n == 41:\n        return 179\n    if n == 42:\n        return 181\n    if n == 43:\n        return 191\n    if n == 44:\n        return 193\n    if n == 45:\n        return 197\n    if n == 46:\n        return 199\n    if n == 47:\n        return 211\n    if n == 48:\n        return 223\n    if n == 49:\n        return 227\n    if n == 50:\n        return 229\n    if n == 51:\n        return 233\n    if n == 52:\n        return 239\n    if n == 53:\n        return 241\n    if n == 54:\n        return 251\n    if n == 55:\n        return 257\n    if n == 56:\n        return 263\n    if n == 57:\n        return 269\n    if n == 58:\n        return 271\n    if n == 59:\n        return 277\n    if n == 60:\n        return 281\n    if n == 61:\n        return 283\n    if n == 62:\n        return 293\n    if n == 63:\n        return 307\n    if n == 64:\n        return 311\n    if n == 65:\n        return 313\n    if n == 66:\n        return 317\n    if n == 67:\n        return 331\n    if n == 68:\n        return 337\n    if n == 69:\n        return 347\n    if n == 70:\n        return 349\n    if n == 71:\n        return 353\n    if n == 72:\n        return 359\n    if n == 73:\n        return 367\n    if n == 74:\n        return 373\n    if n == 75:\n        return 379\n    if n == 76:\n        return 383\n    if n == 77:\n        return 389\n    if n == 78:\n        return 397\n    if n == 79:\n        return 401\n    if n == 80:\n        return 409\n    if n == 81:\n        return 419\n    if n == 82:\n        return 421\n    if n == 83:\n        return 431\n    if n == 84:\n        return 433\n    if n == 85:\n        return 439\n    if n == 86:\n        return 443\n    if n == 87:\n        return 449\n    if n == 88:\n        return 457\n    if n == 89:\n        return 461\n    if n == 90:\n        return 463\n    if n == 91:\n        return 467\n    if n == 92:\n        return 479\n    if n == 93:\n        return 487\n    if n == 94:\n        return 491\n    if n == 95:\n        return 499\n    if n == 96:\n        return 503\n    if n == 97:\n        return 509\n    if n == 98:\n        return 521\n    if n == 99:\n        return 523\n    if n == 100:\n        return 541\n    if n == 101:\n        return 547\n    if n == 102:\n        return 557\n    if n == 103:\n        return 563\n    if n == 104:\n        return 569\n    if n == 105:\n        return 571\n    if n == 106:\n        return 577\n    if n == 107:\n        return 581\n    if n == 108:\n        return 583\n    if n == 109:\n        return 593\n    if n == 110:\n        return 599\n    if n == 111:\n        return 601\n    if n == 112:\n        return 607\n    if n == 113:\n        return 613\n    if n == 114:\n        return 617\n    if n == 115:\n        return 619\n    if n == 116:\n        return 631\n    if n == 117:\n        return 641\n    if n == 118:\n        return 643\n    if n == 119:\n        return 647\n    if n == 120:\n        return 653\n    if n == 121:\n        return 659\n    if n == 122:\n        return 661\n    if n == 123:\n        return 673\n    if n == 124:\n        return 677\n    if n == 125:\n        return 683\n    if n == 126:\n        return 691\n    if n == 127:\n        return 701\n    if n == 128:\n        return 709\n    if n == 129:\n        return 719\n    if n == 130:\n        return 727\n    if n == 131:\n        return 733\n    if n == 132:\n        return 739\n    if n == 133:\n        return 743\n    if n == 134:\n        return 751\n    if n == 135:\n        return 757\n    if n == 136:\n        return 761\n    if n == 137:\n        return 769\n    if n == 138:\n        return 773\n    if n == 139:\n        return 787\n    if n == 140:\n        return 797\n    if n == 141:\n        return 809\n    if n == 142:\n        return 811\n    if n == 143:\n        return 821\n    if n == 144:\n        return 823\n    if n == 145:\n        return 827\n    if n == 146:\n        return 829\n    if n == 147:\n        return 839\n    if n == 148:\n        return 853\n    if n == 149:\n        return 857\n    if n == 150:\n        return 859\n    if n == 151:\n        return 863\n    if n == 152:\n        return 877\n    if n == 153:\n        return 881\n    if n == 154:\n        return 883\n    if n == 155:\n        return 887\n    if n == 156:\n        return 907\n    if n == 157:\n        return 911\n    if n == 158:\n        return 919\n    if n == 159:\n        return 929\n    if n == 160:\n        return 937\n    if n == 161:\n        return 941\n    if n == 162:\n        return 947\n    if n == 163:\n        return 953\n    if n == 164:\n        return 967\n    if n == 165:\n        return 971\n    if n == 166:\n        return 977\n    if n == 167:\n        return 983\n    if n == 168:\n        return 991\n    if n == 169:\n        return 997\n    if n == 170:\n        return 1009\n    if n == 171:\n        return 1013\n    if n == 172:\n        return 1019\n    if n == 173:\n        return 1021\n    if n == 174:\n        return 1031\n    if n == 175:\n        retur",
        "num_ids": 2011
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 2\n    p = [2]\n    s = 0\n    i = 3\n    while(s < n):\n        p.append(i)\n        x = i + 1\n        y = i - 1\n        while(x % i == 0):\n            x = x / i\n        while(y % i == 0):\n            y = y / i\n        q = x * y\n        if (q % i!= 0):\n            i = i + 2\n        else:\n            s = s + 1\n            i = i + 4\n    return p[n - 1]\n",
        "num_ids": 157
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isPrime(n):\n        for i in range(2,int(sqrt(n)+1)):\n            if n%i==0:\n                return False\n        return True\n",
        "num_ids": 46
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def next_prime(n):\n        k = n\n        while not k % 2:\n            k /= 2\n        return 2, int(k)\n",
        "num_ids": 39
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n < 3:\n        return 2\n",
        "num_ids": 21
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n < 1):\n        return \"Enter a positive number\"\n    else:\n        if(n == 1):\n            return 2\n        else:\n            counter = 2\n            current_number = 3\n            while(counter < n):\n                current_number += 2\n                if(is_prime(current_number)):\n                    counter += 1\n            return current_number\n",
        "num_ids": 90
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n<1:\n        raise ValueError(\"input must be greater than or equal to 1\")\n    x,y,p=3,1,5\n    count = 2\n    if n==1:\n        return 2\n    while count<n:\n        x=x**2+y**2\n        y=x+2*y\n        y,x=x,y\n        y=y%p\n        x=x%p\n        count+=1\n    return x\n    \nif __name__=='__main__':\n    for i in range(1,11):\n        print(newman_prime(i)",
        "num_ids": 147
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # create a variable to store the new tuple\n    new_tup = ()\n    # get the len of each tuple\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    # loop through the first tuple\n    for i in range(0, length1):\n        # get the length of each element in the tuple\n        length1_ele = len(test_tup1[i])\n        # loop through the second tuple\n        for j in range(0, length2):\n            # get the length of each element in the tuple\n            length2_ele = len(test_tup2[j])\n            # if the lengths are not the same, raise an exception\n            if length1_ele!= length2_ele:\n                raise Exception(\"Tuple lengths must be equal.\")\n            # if lengths are equal, then divide\n            else:\n                new_tup_ele = (round(float(test_tup1[i][j]) / float(test_tup2[j][0]),2))\n                # add the element to the new tuple\n                new_tup = new_tup + (new_tup_ele,)\n    # return the new tuple\n    return new_tup\n",
        "num_ids": 291
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tuple = ()\n",
        "num_ids": 10
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    first_tup = test_tup1\n    second_tup = test_tup2\n",
        "num_ids": 26
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1 // test_tup2\n",
        "num_ids": 16
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(t1/t2 for t1, t2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division(tup1,tup2):\n        tup1 = list(tup1)\n        tup2 = list(tup2)\n        for x in range(0, len(tup1)):\n            try:\n                tup1[x] = tup1[x]/tup2[x]\n            except:\n                tup1[x] = tup1[x]\n        tup1 = tuple(tup1)\n        return tup1\n    return division(test_tup1,test_tup2)\nprint(division_elements((2,4),(4,2)))\nprint(division_elements((4,2),(2,4)))\nprint(division_elements((2,0),(2,4)))\nprint(division_elements((0,2),(2,4)))\nprint(division_elements((2,0),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,4),(2,0)))\nprint(division_elements((2,0),(0,2)))\nprint(division_elements((0,2),(2,4)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,4),(2,0)))\nprint(division_elements((2,0),(0,2)))\nprint(division_elements((2,4),(2,4)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((0,2),(2,4)))\nprint(division_elements((2,0),(2,4)))\nprint(division_elements((2,4),(2,0)))\nprint(division_elements((4,2),(2,0)))\nprint(division_elements((2,0),(4,2)))\nprint(division_elements((0,2),(4,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((2,4),(0,2)))\nprint(division_elements((4,2),(2,0)))\nprint(division_elements((2,0),(4,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((4,2),(2,0)))\nprint(division_elements((2,0),(4,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((4,2),(2,0)))\nprint(division_elements((2,4),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((2,4),(0,2)))\nprint(division_elements((2,0),(0,2)))\nprint(division_elements((4,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,0),(4,2)))\nprint(division_elements((4,2),(0,2)))\nprint(division_elements((2,4),(0,2)))\nprint(division_elements((4,2),(2,0)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,0),(4,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((0,2),(2,4)))\nprint(division_elements((2,4),(2,0)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((2,4),(2,4)))\nprint(division_elements((4,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,0),(2,4)))\nprint(division_elements((2,4),(4,2)))\nprint(division_elements((2,0),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((2,4),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((4,2),(2,0)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((2,0),(2,4)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,0),(0,2)))\nprint(division_elements((2,0),(2,4)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,0),(0,2)))\nprint(division_elements((4,2),(2,0)))\nprint(division_elements((4,2),(0,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((0,2),(2,4)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,4),(2,0)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,0),(0,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((0,2),(4,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((2,0),(2,0)))\nprint(division_elements((2,0),(0,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(2,0)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((4,2),(2,0)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,2),(0,2)))\nprint(division_elements((0,",
        "num_ids": 1997
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1], test_tup1[2]/test_tup2[2])\n",
        "num_ids": 58
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # this method is accepted, but not accepted on leetcode, so i put it here for now.\n    return [t1 / t2 for t1, t2 in zip(test_tup1, test_tup2)]\n",
        "num_ids": 56
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    #create empty lists\n    list1_first_part = []\n    list1_second_part = []\n",
        "num_ids": 30
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if length <= L:\n        return (list1, [])\n    else:\n        return ([list1[0:L]], list1[L:])\n",
        "num_ids": 49
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #Approach 1: Using loop\n    length = len(list1)\n    l = 0\n    list1_1 = []\n    list1_2 = []\n    if length % L!= 0:\n        return None\n    for i in range(0, length):\n        if i % L == L - 1:\n            list1_2.append(list1[l])\n            list1_1 = list1[l + 1:]\n            break\n        l += 1\n    return (list1_1, list1_2)\n",
        "num_ids": 127
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if (len(list1) < L):\n        print(\"List length is less than L, returning the list\")\n        return list1, None\n    return list1[0:L], list1[L:]\n    pass\n",
        "num_ids": 54
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    split1 = list1[:L]\n    split2 = list1[L:]\n",
        "num_ids": 25
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = list1[L:]\n    list3 = list1[:L]\n    return (list3, list2)\n",
        "num_ids": 33
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_len = len(list1)\n    list1_2 = list1[:L]\n    list1_3 = list1[L:]\n",
        "num_ids": 39
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l = len(list1) // 2\n    x = list1[:l]\n    y = list1[l:]\n    return (x, y)\n",
        "num_ids": 40
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    if len(list1) % L == 0:\n        return (list1[:L], list1[L:])\n    elif len(list1) % L!= 0:\n        list1.append('*')\n        return (list1[:L], list1[L:])\n",
        "num_ids": 77
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l_1 = list1[:L]\n    l_2 = list1[L:]\n    return (l_1, l_2)\n",
        "num_ids": 37
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 0\n    if h_age <= 2:\n        dog_age = h_age * 10.5\n    else:\n        dog_age = 20 + (h_age - 2)*4\n    return dog_age\n",
        "num_ids": 57
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # 1. Use this information to return the correct number of years.\n    # 2. Calculate the answer in dog's years.\n    return h_age*7\n",
        "num_ids": 40
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 0\n    for i in range(h_age):\n        if i == 0:\n            dog_age = (14 * i)\n        else:\n            dog_age = (4 * (i))\n    return dog_age\n",
        "num_ids": 60
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # 4 human years is equivalent to 10.5 dog years\n    return h_age * 10.5\n",
        "num_ids": 26
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n",
        "num_ids": 41
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age = h_age * 7\n    return h_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age*7\n    return(dog_age)\n",
        "num_ids": 21
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    splits = []\n    splits.append(S[0::step])\n    for i in range(1,len(S)):\n        splits.append(S[i*step:(i+1)*step])\n    return splits\n",
        "num_ids": 58
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_split = []\n    if step > len(S):\n        return list_split\n    for i in range(0, len(S), step):\n        list_split.append(S[i:i+step])\n    return list_split\n",
        "num_ids": 61
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = [S[i:i+step] for i in range(0, len(S), step)]\n    return lst\n",
        "num_ids": 34
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0,len(S),step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # slice the list into n equal slices\n    # loop through the slices and print them out\n    # from https://stackoverflow.com/questions/34644035/split-a-python-list-into-n-pieces-of-equal-size\n    # https://www.geeksforgeeks.org/python-split-list-into-n-parts-of-equal-size/\n    # https://stackoverflow.com/questions/11011720/how-to-split-a-list-into-evenly-sized-chunks\n    \n    # S is a list\n    # step is an int\n    \n    # returns a list of lists\n    return [S[x:x+step] for x in range(0, len(S), step)]\n    \ndef slice_list(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # slice the list into n equal slices\n    # loop through the slices and print them out\n    # from https://stackoverflow.com/questions/34644035/split-a-python-list-into-n-pieces-of-equal-size\n    # https://www.geeksforgeeks.org/python-split-list-into-n-parts-of-equal-size/\n    # https://stackoverflow.com/questions/11011720/how-to-split-a-list-into-evenly-sized-chunks\n    \n    # S is a list\n    # step is an int\n    \n    # returns a list of lists\n    return [S[x:x+step] for x in range(0, len(S), step)]\n",
        "num_ids": 183
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0,len(S),step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # create an empty list to store the split lists\n    split = []\n    \n    # split the list into multiple lists of the same size\n    for i in range(0, len(S), step):\n        split.append(S[i:i+step])\n    \n    # return the split list\n    return split\n",
        "num_ids": 78
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface_area(l):\n        return 6*l**2\n    return lateral_surface_area(l)\n",
        "num_ids": 32
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n    \ndef lateral_surface_rect(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its width and length.\n    '''\n    return 2*a*b\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface(side_length):\n        return 6 * side_length * side_length\n    return lateral_surface(l)\n",
        "num_ids": 34
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n    return 0\n",
        "num_ids": 9
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    s = l**2\n    area = 6*s\n    return area\n",
        "num_ids": 24
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum+=i**2\n    return sum\nprint(square_Sum(15))\n",
        "num_ids": 42
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #print(\"\\nLets start\")\n    #print(\"The sum of the squares of the first n odd natural numbers is equal to the sum of the n odd natural numbers multiplied by itself\")\n    n = int(input(\"Please enter a positive integer: \"))\n    num = 0\n    for i in range(1,n+1,2):\n        num += i*i\n    print(\"The sum of the squares of the first n odd natural numbers is: \", num)\nsquare_Sum(10)\n",
        "num_ids": 116
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**2\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    num = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    count = 1\n    total = 0\n    while count <= n:\n        for i in num:\n            total += i ** 2\n        count += 1\n    return total\n",
        "num_ids": 147
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + (i*i)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1,n+1):\n        sum+=x**2\n    return sum\n    \n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(0,n+1,2):\n        s+=i**2\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(1, n+1, 2))\n",
        "num_ids": 23
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int((1 + n**2)/2)\n",
        "num_ids": 15
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    count = 0\n    while star_num < n:\n        star_num += 5 ** count\n        count += 1\n    star_num -= 5 ** (count - 1)\n    count -= 1\n    return star_num + 5 ** count\n",
        "num_ids": 65
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x = int(n)\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    else:\n        return find_star_num(n-1) + 2*find_star_num(n-2)\n        \nif __name__ == '__main__':\n    print(find_star_num(int(input(\"Enter the number : \"))))\n    \n'''\nEnter the number : 5\n15\n'''",
        "num_ids": 1
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int((n*(n+1))/2)\n",
        "num_ids": 17
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 0\n    for i in range(1, n + 1):\n        star_num += i\n    return star_num\n    \nif __name__ == '__main__':\n    n = 4\n    print(find_star_num(n))",
        "num_ids": 64
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_list = list(range(1, 10))\n    return int(num_list[int(n/2)])\n",
        "num_ids": 32
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Initialize count\n    count = 0\n    # Loop over numbers, stop at nth\n    for i in range(1, (n + 1)):\n        # print(i)\n        # Increment count by 3\n        count += 3\n        # if 3 numbers have been added, reset count to 0\n        if i % 3 == 0: \n            count = 0\n    # Return count\n    return count\n",
        "num_ids": 97
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n_factorial = 1\n    for i in range(1, n):\n        n_factorial *= i\n    return n_factorial\n",
        "num_ids": 37
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n ** 2 + n + 2\n",
        "num_ids": 12
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_stars = 0\n    while num_stars < n:\n        num_stars += 1\n        if is_star_num(num_stars):\n            return num_stars\n",
        "num_ids": 44
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    assert (isinstance(k, str) and len(k) == 1)\n    return ord(k)\n",
        "num_ids": 28
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == 'A' or k == 'a':\n        return 65\n    elif k == 'B' or k == 'b':\n        return 66\n    elif k == 'C' or k == 'c':\n        return 67\n    elif k == 'D' or k == 'd':\n        return 68\n    elif k == 'E' or k == 'e':\n        return 69\n    elif k == 'F' or k == 'f':\n        return 70\n    elif k == 'G' or k == 'g':\n        return 71\n    elif k == 'H' or k == 'h':\n        return 72\n    elif k == 'I' or k == 'i':\n        return 73\n    elif k == 'J' or k == 'j':\n        return 74\n    elif k == 'K' or k == 'k':\n        return 75\n    elif k == 'L' or k == 'l':\n        return 76\n    elif k == 'M' or k =='m':\n        return 77\n    elif k == 'N' or k == 'n':\n        return 78\n    elif k == 'O' or k == 'o':\n        return 79\n    elif k == 'P' or k == 'p':\n        return 80\n    elif k == 'Q' or k == 'q':\n        return 81\n    elif k == 'R' or k == 'r':\n        return 82\n    elif k == 'S' or k =='s':\n        return 83\n    elif k == 'T' or k == 't':\n        return 84\n    elif k == 'U' or k == 'u':\n        return 85\n    elif k == 'V' or k == 'v':\n        return 86\n    elif k == 'W' or k == 'w':\n        return 87\n    elif k == 'X' or k == 'x':\n        return 88\n    elif k == 'Y' or k == 'y':\n        return 89\n    elif k == 'Z' or k == 'z':\n        return 90\n    elif k == 'a':\n        return 97\n    elif k == 'b':\n        return 98\n    elif k == 'c':\n        return 99\n    elif k == 'd':\n        return 100\n    elif k == 'e':\n        return 101\n    elif k == 'f':\n        return 102\n    elif k == 'g':\n        return 103\n    elif k == 'h':\n        return 104\n    elif k == 'i':\n        return 105\n    elif k == 'j':\n        return 106\n    elif k == 'k':\n        return 107\n    elif k == 'l':\n        return 108\n    elif k =='m':\n        return 109\n    elif k == 'n':\n        return 110\n    elif k == 'o':\n        return 111\n    elif k == 'p':\n        return 112\n    elif k == 'q':\n        return 113\n    elif k == 'r':\n        return 114\n    elif k =='s':\n        return 115\n    elif k == 't':\n        return 116\n    elif k == 'u':\n        return 117\n    elif k == 'v':\n        return 118\n    elif k == 'w':\n        return 119\n    elif k == 'x':\n        return 120\n    elif k == 'y':\n        return 121\n    elif k == 'z':\n        return 122\n",
        "num_ids": 833
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    assert(type(k)==str)\n    return ord(k)\n",
        "num_ids": 20
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    print(k)\n    return\n    \nascii_value('a')\n",
        "num_ids": 30
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k\n",
        "num_ids": 14
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not arr:\n        return 0\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\nprint(sum_even_and_even_index([1,2,3,4,5]))\nprint(sum_even_and_even_index([1,3,5]))\n",
        "num_ids": 103
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            if arr[i]%2 == 0:\n                sum = sum + arr[i]\n    return sum \n",
        "num_ids": 55
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    index = 0\n    for num in arr:\n        if index % 2 == 0:\n            if num % 2 == 0:\n                even_sum += num\n        index += 1\n    return even_sum\n",
        "num_ids": 57
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(0,len(arr)):\n        if arr[i]%2==0 and i%2==0:\n            sum+=arr[i]\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for item in arr:\n        if (item%2==0 and item!=0):\n            sum_even += item\n    return sum_even\n",
        "num_ids": 44
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers = []\n    sum_even = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0 and i % 2 == 0):\n            even_numbers.append(arr[i])\n    for num in even_numbers:\n        sum_even += num\n    return sum_even\n",
        "num_ids": 84
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even_numbers = 0\n    for i in range(len(arr)):\n        if(i % 2 == 0):\n            if(arr[i] % 2 == 0):\n                sum_of_even_numbers = sum_of_even_numbers + arr[i]\n    print(sum_of_even_numbers)\n",
        "num_ids": 86
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum = sum + arr[i]\n    return sum\n    \n    \n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n    return sum([num for num in arr if num % 2 == 0 and (arr.index(num) % 2 == 0)])\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(filter(lambda x: x % 2 == 0, arr))\n    \n    \n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(filter(lambda x: (x % 2 == 0) and (arr.index(x) % 2 == 0), arr))\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum((x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0), 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x in arr if x % 2 == 0 and arr.index(x) % 2 == 0)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for x i",
        "num_ids": 10
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    x = 0\n    for i in arr:\n        if (i % 2 == 0 and i % 2 == 0):\n            x += i\n    return x\n",
        "num_ids": 39
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_nums = [ num for num in arr if num % 2 == 0]\n    even_index_nums = [ num for index, num in enumerate(arr) if index % 2 == 0 ]\n    return sum(even_index_nums), sum(even_nums)\n",
        "num_ids": 69
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    e = 0\n    for i in range(0,n):\n        if (i**5) % 2 == 0:\n            e += i**5\n    return e\n",
        "num_ids": 42
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if (i%2 == 0):\n            sum += pow(i,5)\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if (i % 2 == 0):\n            s = s + pow(i, 5)\n    return s\n",
        "num_ids": 46
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(map(lambda x: x**5, filter(lambda x: x%2 == 0, range(1, n+1))))\n",
        "num_ids": 35
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        sum += x**5\n    return sum",
        "num_ids": 30
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            total += i**5\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # input n, check n is positive integer and n is even.\n    # n = int(input('Please enter a positive integer: '))\n    if n > 0 and n%2 == 0:\n        sum = 0\n        for i in range(1,n+1,2): # range(1,n+1,2) means n is even number only\n            sum += i**5\n        return sum\n    else:\n        return -1\n",
        "num_ids": 105
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if (i % 2 == 0):\n            sum += (i**5)\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #return sum([i**5 for i in range(1, n+1)])\n",
        "num_ids": 23
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_Sum = 0\n    for i in range(1, n+1):\n        even_Sum += i**5\n    return even_Sum\n",
        "num_ids": 37
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for x in test_list:\n        rear_list.append(x[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_tuple[1] for test_tuple in test_list]\n",
        "num_ids": 23
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n",
        "num_ids": 36
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n",
        "num_ids": 40
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n",
        "num_ids": 36
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [list(x)[1] for x in test_list]\n",
        "num_ids": 19
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n",
        "num_ids": 40
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list = [('a', 'b'), ('c', 'd', 'e', 'f'), ('g', 'h'), ('i'), ('j', 'k')]\n    new_list = []\n    for i in test_list:\n        new_list.append(i[-1])\n    return new_list\n",
        "num_ids": 78
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # Return a tuple with the elements that are not in the second tuple.\n    \n    return tuple(set(test_tup1) - set(test_tup2))\n",
        "num_ids": 45
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    my_tuple = ()\n    my_list = list(test_tup1)\n    for i in range(len(my_list)):\n        my_tuple += (my_list[i] - test_tup2[i],)\n    return tuple(my_tuple)\n",
        "num_ids": 72
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for index, value in enumerate(test_tup1):\n        result.append(value - test_tup2[index])\n    return tuple(result)\n",
        "num_ids": 46
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a - b for a,b in zip(test_tup1,test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] - test_tup2[i])\n        return tuple(result)\n    else:\n        return ('Error')\n        \nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((5, 6, 7, 8, 9), (1, 2, 3, 4, 5)))\nprint(substract_elements((1, 2, 3), (3, 2, 1)))\nprint(substract_elements((0, 0, 0), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (4, 5, 6)))\nprint(substract_elements((5, 6, 7, 8, 9), (4, 5, 6, 7, 8, 9)))\nprint(substract_elements((1, 2, 3), (4, 5, 6, 7, 8, 9)))\n",
        "num_ids": 263
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1, test_tup2 = list(test_tup1), list(test_tup2)\n    if len(test_tup1) < len(test_tup2):\n        len_tup2 = len(test_tup2)\n        test_tup1 = test_tup1 + [0]*(len_tup2-len(test_tup1))\n    elif len(test_tup1) > len(test_tup2):\n        len_tup1 = len(test_tup1)\n        test_tup2 = test_tup2 + [0]*(len_tup1-len(test_tup2))\n    for x, y in zip(test_tup1, test_tup2):\n        test_tup1[x] = test_tup1[x] - test_tup2[y]\n    return tuple(test_tup1)\n",
        "num_ids": 231
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([i - j for i, j in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup3 = ()\n    for x in range(0, len(test_tup1)):\n        test_tup3 += (test_tup1[x] - test_tup2[x],)\n    return test_tup3\n",
        "num_ids": 64
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomialCoeff(n, k): \n        C = [[0 for i in range(k + 1)] for j in range(n + 1)] \n        for i in range(n+1): \n            for j in range(min(i, k) + 1): \n                if j == 0 or j == i: \n                    C[i][j] = 1\n                else: \n                    C[i][j] = C[i - 1][j - 1] + C[i - 1][j] \n        return C[n][k] \n    return sum([binomialCoeff(n, i) for i in range(n) if i%2 == 0])\n",
        "num_ids": 165
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = [0] * (n+1)\n    binomial_coeff[0] = 1\n    binomial_coeff[1] = 1\n    for i in range(2,n+1):\n        binomial_coeff[i] = binomial_coeff[i-1] * (n-i+1) // i\n        if (binomial_coeff[i] % 2 == 0):\n            binomial_coeff[i] = binomial_coeff[i] // 2\n        else:\n            binomial_coeff[i] = binomial_coeff[i] // 2 + 1\n",
        "num_ids": 152
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    i = n//2\n    while(i>0):\n        result += ((math.factorial(n))//(math.factorial(i)*math.factorial(n-i)))\n        i -= 1\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            sum += math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    l = [i for i in range(0, n+1)]\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            # print(i)\n            sum += (math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))\n    print(sum)\n",
        "num_ids": 87
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    b = [1]\n    for i in range(1,n+1):\n        b.append((b[i-1]*(n-i+1))//i)\n    return sum([b[i] for i in range(0,n,2)])\n",
        "num_ids": 66
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        even_binomials = 0\n        for k in range(n+1):\n            if k % 2 == 0:\n                even_binomials += math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n        return even_binomials\n",
        "num_ids": 92
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def bino(n,k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        elif k > 1:\n            return bino(n, k-1) + bino(n-1, k)\n    def even_index_bino(n):\n        sum = 0\n        for i in range(0,n+1):\n            if i % 2 == 0:\n                sum += bino(n,i)\n        return sum\n    return even_index_bino(n)\ndef hanoi_tower(n,from_rod,to_rod,aux_rod):\n    '''\n    A function to solve the classic problem of the Towers of Hanoi.\n    This code is adapted from the following python tutorial: https://www.tutorialspoint.com/data_structures_algorithms/data_structures_algorithms_tutorial.htm\n    '''\n    if n == 1:\n        print( \"Move disk 1 from rod\", from_rod, \"to rod\", to_rod)\n    else:\n        hanoi_tower(n-1, from_rod, aux_rod, to_rod)\n        print( \"Move disk\", n, \"from rod\", from_rod, \"to rod\", to_rod)\n        hanoi_tower(n-1, aux_rod, to_rod, from_rod)\n    return\ndef quicksort(array):\n    '''\n    A function to sort an array using the quicksort algorithm.\n    The code in this function is adapted from the following python tutorial: https://www.tutorialspoint.com/data_structures_algorithms/data_structures_algorithms_quick_sort.htm\n    '''\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n    return quicksort(less) + [pivot] + quicksort(greater)\ndef binary_search(array, element):\n    '''\n    A function to search for a specified element in a list using the binary search algorithm.\n    The code in this function is adapted from the following python tutorial: https://www.tutorialspoint.com/data_structures_algorithms/data_structures_algorithms_binary_search.htm\n    '''\n    array = quicksort(array)\n    if len(array) < 1:\n        return False\n    else:\n        midpoint = len(array)//2\n        if array[midpoint] == element:\n            return True\n        else:\n            if element < array[midpoint]:\n                return binary_search(array[:midpoint], element)\n            else:\n                return binary_search(array[midpoint+1:], element)\n",
        "num_ids": 106
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return math.comb(n,0)\n    \ndef binomial_Coeff_Sum(n,k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the sum of the first k index binomial coefficients.\n    '''\n    if k < 1 or k > n:\n        return 0\n    else:\n        return math.comb(n,k)\n",
        "num_ids": 32
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coeff( n, k):\n        if k == 0:\n            return 1\n        return ((n - k) * binomial_coeff( n - 1, k - 1)) // k\n",
        "num_ids": 51
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r**2*h\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    \n    return math.pi*(r**2)*h\n    \n",
        "num_ids": 23
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r**2)*h\n",
        "num_ids": 11
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Volume = pi*r^2*h\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14 * r ** 2 * h)\ndef area_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the surface area.\n    '''\n    return (2 * 3.14 * r ** 2 + 2 * 3.14 * r * h)\ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    return (1.33 * 3.14 * r ** 2 * h)\ndef area_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the surface area.\n    '''\n    return (3.14 * r * (r + h))\ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    return (4 / 3 * 3.14 * r ** 3)\ndef area_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area.\n    '''\n    return (4 * 3.14 * r ** 2)",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = pi * r**2 * h\n    return volume\n",
        "num_ids": 17
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=3.14*(r**2)*h\n    return volume\n",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi*r*r*h\n",
        "num_ids": 18
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict=dict.copy()\n    for key,value in dict.items():\n        if value<n:\n            del newdict[key]\n    return newdict\n",
        "num_ids": 42
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filter = {key:value for key, value in dict.items() if value>=n}\n    return dict_filter\n",
        "num_ids": 33
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {x:y for x,y in dict.items() if y>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict2 = {}\n    for key, value in dict.items():\n        if value >= n:\n            dict2[key] = value\n    return dict2\n",
        "num_ids": 40
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result={}\n    for k,v in dict.items():\n        if v>=n:\n            result[k]=v\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = dict\n    filter_dict = {k: v for (k, v) in d.items() if v >= n}\n    return filter_dict\n",
        "num_ids": 39
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {k:v for (k,v) in dict.items() if v>=n}\n    print(filtered)\n",
        "num_ids": 35
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict2={}\n    for x in dict:\n        if dict[x]>=n:\n            dict2[x]=dict[x]\n    return dict2\n",
        "num_ids": 42
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key,value in dict.items():\n        if value>=n:\n            new_dict[key]=value\n    return new_dict\ndict={1:10,2:20,3:30,4:40,5:50}\nn=15\nprint(dict_filter(dict,n))\n",
        "num_ids": 81
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = len(test_tup)\n    count = 0\n    \n    for i in range(n-1):\n        for j in range(i+1,n):\n            if test_tup[i] == test_tup[j]:\n                count += 1\n    \n    return count\n",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n    print(test_tup)\n    print(test_tup[0])\n    print(test_tup[0][0])\n    print(len(test_tup))\n    \ncount_first_elements(tup_1)\n",
        "num_ids": 64
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([i for i in test_tup if i == test_tup[0]])\n",
        "num_ids": 26
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count +=1\n        elif test_tup[i] == test_tup[0]:\n            break\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            break\n        else:\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    print(\"\\n\")\n    print(\"\\n\")\n    print(\"Welcome to the Function Exercise!\\n\")\n    print(\"This function is designed to take a tuple and count the number of elements before each element in the tuple\")\n    \n    #Test to see if this function works\n    print(\"Test 1:\", count_first_elements((\"test\", 3, \"one\", 2, 1, \"test\", \"two\", \"test\", \"three\")))\n    print(\"Test 2:\", count_first_elements((\"one\", \"one\", 1, 2, 3, 1, 2, 1, \"one\", 2, \"one\", 1, 2, 3, 1)))\n    print(\"Test 3:\", count_first_elements((\"test\", \"test\", \"one\", \"one\", 2, 2, 1, \"test\", \"one\", \"one\", \"test\", 1, 2, 3)))\n    print(\"Test 4:\", count_first_elements((\"one\", \"one\", 2, 1, 3, 1, 2, 1, \"one\", 2, \"one\", 1, 2, 3)))\n    print(\"Test 5:\", count_first_elements((\"one\", \"two\", \"three\", \"one\", 1, 2, 1, \"one\", 2, \"one\", 1, 2, 3)))\n",
        "num_ids": 300
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == '*':\n            print('1. The tuple element is:'+ str(test_tup[i]))\n            print('2. The number of elements that occur before the tuple element is:'+ str(i))\n            return(i)\n",
        "num_ids": 84
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == 'first':\n            count += 1\n        else:\n            return count\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # for loop in range(0, len(test_tup)):\n    #     print(test_tup[0])\n    #     print(test_tup[1])\n    #     print(test_tup[2])\n    #     print(test_tup[3])\n    #     print(test_tup[4])\n    #     print(test_tup[5])\n    #     print(test_tup[6])\n    #     print(test_tup[7])\n    #     print(test_tup[8])\n    #     print(test_tup[9])\n    #     print(test_tup[10])\n",
        "num_ids": 163
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    #solution\n    #-----------------------------------------------------------------------------\n    #i_tup = 0\n    #i_sub_tup = 0\n    #n = len(test_tup)\n    #for i in range(0,n):\n    #    if test_tup[i] == 0:\n    #        i_tup += 1\n    #    else:\n    #        i_sub_tup += 1\n    #    if i_tup == 2:\n    #        break\n    #return i_sub_tup\n",
        "num_ids": 128
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_string = str(n)\n    sum = 0\n    for i in range(len(num_string)):\n        sum += int(num_string[i])*(10**(len(num_string)-i-1))\n    return sum\n",
        "num_ids": 62
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #Decagonal numbers are the numbers of form n+nn+n...\n    #for eg: 1, 22, 333, 4444,...\n",
        "num_ids": 34
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def check(num):\n        if num == 0:\n            return False\n        elif num == 1:\n            return True\n        else:\n            return (((num*10)%2 + (num*9))%10) == num\n    \n    if (n < 1):\n        return False\n    elif (n == 1):\n        return 1\n    else:\n        return check(n-1) + is_num_decagonal(n-1)\n",
        "num_ids": 110
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def num_of_digits(n):\n        return len(str(n))\n",
        "num_ids": 23
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<0: \n        return \"No negative numbers allowed\"\n    else: \n        num=int(n*(n+1)/2)\n        return num\n",
        "num_ids": 43
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # base case\n    if n == 0: return 0\n    \n    # compute remainder of n modulo 10\n    rem = 10 - (n % 10)\n    \n    # recursive step\n    if rem == 10:\n        return int(n * 10) + 1\n    else:\n        return int(n * 10) + rem\n    ",
        "num_ids": 82
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = lambda n: n*(n+8)//2\n    return d(n) if n>0 else None\n",
        "num_ids": 31
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(round((n*(3*n-1)/2)))\n",
        "num_ids": 20
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+9)//2\n",
        "num_ids": 14
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(round((n/2)*(8*n + 1)/2))\n",
        "num_ids": 22
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return (found, pos)\n",
        "num_ids": 59
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n",
        "num_ids": 38
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return (found, pos)\n",
        "num_ids": 59
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, -1)\n    i = 0\n    while i < len(dlist):\n        if dlist[i] == item:\n            return (True, i)\n        i = i + 1\n    return (False, -1)\n",
        "num_ids": 72
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n",
        "num_ids": 12
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 41
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Your code here\n    i = 0\n    for item in dlist:\n        if item == item:\n            return (True, i)\n        i = i+1\n    return (False, -1)\n",
        "num_ids": 52
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    while index < len(dlist) and dlist[index]!= item:\n        index += 1\n    return index < len(dlist), index if index < len(dlist) else -1\n",
        "num_ids": 54
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Python program to check if the list \n    # has unique elements \n    unique = []\n    for x in test_list:\n        if x not in unique:\n            unique.append(x)\n    if len(unique) == len(test_list):\n        return True\n    else:\n        return False\n    \n    ",
        "num_ids": 79
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # unique_set = set(test_list)\n    # if len(test_list) == len(unique_set):\n    #     return True\n    # return False\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 61
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if test_list == []:\n        return True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_set = set(test_list)\n    if len(list_set) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print('\\nTask 1')\n    print('---------')\n    print('Input :', test_list)\n    print('Output :')\n    print('Unique list :', [ele for ele in test_list if test_list.count(ele) == 1])\n    print('Unique elements :', len(test_list))\n    print('Unique list :', [ele for ele in test_list if test_list.count(ele) == 1])\n    print('Unique elements :', len(test_list))\n    \n    \ndef reverse_list(test_list):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    print('\\nTask 2')\n    print('---------')\n    print('Input :', test_list)\n    print('Output :')\n    print('Reversed list :', list(reversed(test_list)))\n    print('Length of the list :', len(test_list))\n    print('Reversed list :', list(reversed(test_list)))\n    print('Length of the list :', len(test_list))\n    \n    \ndef remove_duplicates(test_list):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    print('\\nTask 3')\n    print('---------')\n    print('Input :', test_list)\n    print('Output :')\n    print('Unique elements :', set(test_list))\n    print('Length of the list :', len(test_list))\n    print('Unique elements :', set(test_list))\n    print('Length of the list :', len(test_list))\n    \n    \ndef find_anagrams(test_str, test_word):\n    '''\n    Write a python function to find all the anagrams of a given word.\n    '''\n    print('\\nTask 4')\n    print('---------')\n    print('Input :')\n    print('String :', test_str)\n    print('Word :', test_word)\n    print('Output :')\n    all_anagrams = []\n    for word in test_str.split():\n        if sorted(word) == sorted(test_word):\n            all_anagrams.append(word)\n    print('All Anagrams :', all_anagrams)\n    print('Length of all anagrams :', len(all_anagrams))\n    \n    \ndef even_odd_list(test_list):\n    '''\n    Write a python function to check if the list is even or odd.\n    '''\n    print('\\nTask 5')\n    print('---------')\n    print('Input :', test_list)\n    print('Output :')\n    print('Even list :', [ele for ele in test_list if ele % 2 == 0])\n    print('Odd list :', [ele for ele in test_list if ele % 2!= 0])\n    \n    \ndef find_sum_of_elements(test_list):\n    '''\n    Write a python function to find the sum of all the elements of a given list.\n    '''\n    print('\\nTask 6')\n    print('---------')\n    print('Input :', test_list)\n    print('Output :')\n    print('Sum of elements :', sum(test_list))\n    \n    \ndef check_if_sublist(test_list, test_sublist):\n    '''\n    Write a python function to check if a given list contains a given sublist or not.\n    '''\n    print('\\nTask 7')\n    print('---------')\n    print('Input :', test_list)\n    print('Input :', test_sublist)\n    print('Output :')\n    if test_sublist in test_list:\n        print('Sublist :', test_sublist, 'is present in the list')\n    else:\n        print('Sublist :', test_sublist, 'is not present in the list')\n    \n    \ndef remove_all_occurances(test_str, test_char):\n    '''\n    Write a python function to remove all the occurrences of a given character from a given string.\n    '''\n    print('\\nTask 8')\n    print('---------')\n    print('Input :', test_str)\n    print('Input :', test_char)\n    print('Output :')\n    for char in test_str:\n        if char == test_char:\n            test_str = test_str.replace(test_char, '')\n    print('String after removal of all occurrences of the given character :', test_str)\n    print('Length of the string after removal of all occurrences of the given character :', len(test_str))\n    \n    \ndef find_all_sublists(test_list):\n    '''\n    Write a python function to find all the sublists of a given list.\n    '''\n    print('\\nTask 9')\n    print('---------')\n    print('Input :', test_list)\n    print('Output :')\n    sublists = []\n    for i in range(len(test_list) + 1):\n        for j in range(i + 1, len(test_list) + 1):\n            sublists.append(test_list[i:j])\n    print('Sublists of the list :', sublists)\n    print('Number of sublists :', len(sublists))\n    \n    \ndef check_if_palindrome(test_str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    print('\\nTask 10')\n    print('---------')\n    print('Input :', test_str)\n    print('Output :')\n    if test_str == test_str[::-1]:\n        print('The given string is a palindrome')\n    else:\n        print('The given string is not a palindrome')\n    \n    \ndef check_if_prime(test_num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    print('\\nTask 11')\n    print('---------')\n    print('Input :', test_num)\n    print('Output :')\n    if test_num > 1:\n        for i in range(2, test_num):\n            if (test_num % i) == 0:\n                print(test_num, 'is not a prime number')\n                break\n        else:\n            print(test_num, 'is a prime number')\n    else:\n        print(test_num, 'is not a prime number')\n    \n    \ndef count_occurences_of_each_element(test_list):\n    '''\n    Write a python function to count the number of occurences of each element in a given list.\n    '''\n    print('\\nTask 12')\n    print('---------')\n    print('Input :', test_list)\n    print('Output :')\n    element_dict = {}\n    for ele in test_list:\n        if ele in element_dict.keys():\n            element_dict[ele] += 1\n        else:\n            element_dict[ele] = 1\n    print('Occurences of each element :', element_dict)\n    print('Number of occurences of each element :', len(element_dict))\n    \n    \ndef check_if_pangram(test_str):\n    '''\n    Write a python function to check if a given string is a pangram or not.\n    '''\n    print('\\nTask 13')\n    print('---------')\n    print('Input :', test_str)\n    print('Output :')\n    print('String :', test_str)\n    char_list = []\n    for char in test_str:\n        if char not in char_list:\n            char_list.append(char)\n    print('String after removing all the occurences of the characters :', ''.join(char_list))\n    print('Length of the string after removing all the occurences of the characters :', len(char_list))\n    if len(char_list) == 26:\n        print('The given string is a pangram')\n    else:\n        print('The given string is not a pangram')\n    \n    \ndef reverse_words_in_string(test_str):\n    '''\n    Write a python function to reverse the words in a given string.\n    '''\n    print('\\nTask 14')\n    print('---------')\n    print('Input ",
        "num_ids": 22
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    nums = []\n    for i in range(len(nums1)):\n        nums.append(nums1[i] - nums2[i])\n    return nums\n",
        "num_ids": 83
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a = nums1\n    b = nums2\n    if len(a) >= len(b):\n        for i in range(len(b)):\n            a[i] -= b[i]\n    else:\n        for i in range(len(a)):\n            a[i] -= b[i]\n    return a\n",
        "num_ids": 82
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [i-j for i,j in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n    \ndef add_two_numbers(n1, n2):\n    '''\n    Write a function that takes a number n and return all numbers up to n \n    inclusive that are divisible by either 4 or 6, but not both.\n    '''\n    \n    return [n for n in range(n1, n2+1) if (n % 4 == 0 or n % 6 == 0) and not(n % 4 == 0 and n % 6 == 0)]\n",
        "num_ids": 51
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n    \ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [n1+n2 for n1,n2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(0,len(nums1)):\n        nums1[i]=nums1[i]-nums2[i]\n    return nums1\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1 - n2 for n1, n2 in zip(nums1, nums2)]\n    # or\n    return [n1 - n2 for n1, n2 in zip(nums1, nums2)]\n",
        "num_ids": 58
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    arr = []\n    while(n):\n        arr.append(n % 10)\n        n //= 10\n    arr.sort()\n    for i in arr:\n        if arr.count(i) > i:\n            return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Initialize a dictionary to store the count of each digit\n    d = dict()\n    for i in range(0, 10):\n        d[str(i)] = 0\n        \n    # Print the number of occurrences of each digit \n    for i in str(n):\n        d[i] += 1\n        \n    # Check whether the number is valid or not\n    count = 0\n    for i in d.values():\n        if i > 1:\n            count += 1\n    \n    # If the count is 0, return True else False\n    if count == 0:\n        return True\n    else:\n        return False\n    ",
        "num_ids": 150
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_count = [0] * 10\n    while (n!= 0): \n        digit_count[n % 10] += 1\n        n //= 10\n    for i in digit_count:\n        if (i > 0 and i <= i):\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Create a list of frequency of each digit in the given number\n    n = str(n)\n    freq = [0] * 10\n    for i in n:\n        freq[int(i)] += 1\n",
        "num_ids": 53
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(n) == 1:\n        return True\n    else:\n        n = str(n)\n        for i in n:\n            if n.count(i) > int(i):\n                return False\n        return True\n",
        "num_ids": 57
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n_freq = {}\n    for c in str(n):\n        if c not in n_freq:\n            n_freq[c] = 1\n        else:\n            n_freq[c] += 1\n    for k, v in n_freq.items():\n        if v > int(k):\n            return False\n    return True\n    \n",
        "num_ids": 89
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    x = n\n    s = 0\n    while x > 0:\n        y = x % 10\n        x = x//10\n        if y > s:\n            s = y\n        if y < s:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit = {}\n    for i in n:\n        if i in digit:\n            digit[i] += 1\n        else:\n            digit[i] = 1\n    # print(digit)\n    for i in digit:\n        if digit[i] > i:\n            return False\n    return True\n    \nif __name__ == '__main__':\n    # print(validate(121))\n    # print(validate(12))\n    # print(validate(1011))\n    # print(validate(1211))\n    # print(validate(111111111111111111111111111111111111111111111111111111111111111111111111111111))\n",
        "num_ids": 157
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in n:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n",
        "num_ids": 41
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return False\n    return True\n",
        "num_ids": 17
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([i==element for i in list])\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in range(0,len(list)):\n        if list[i] == element:\n            count += 1\n    if count == len(list):\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n    #return True if all(item == element for item in list) else False\n    #return list == element\n",
        "num_ids": 40
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #loop through the list\n    for item in list:\n        #if any item is different from given element, return False\n        if item!= element:\n            return False\n        #otherwise, return True\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\nprint(check_element([1,1,1,1,1,1,1,1,1,1],1))\nprint(check_element([1,2,1,1,1,1,1,3,1],1))\nprint(check_element([1,1,1,1,1,1,1,1,1],5))\n",
        "num_ids": 108
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return len(list) == sum([1 for item in list if item == element])\n",
        "num_ids": 22
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(i == element for i in list)\n",
        "num_ids": 15
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('ab{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern=re.compile(r\"a[b]{2,3}\")\n    result=pattern.search(text)\n    if result:\n        return True\n    return False\nprint(text_match_two_three(\"aaaabbb\"))\nprint(text_match_two_three(\"a\"))\nprint(text_match_two_three(\"ab\"))\nprint(text_match_two_three(\"abb\"))\nprint(text_match_two_three(\"abbb\"))\nprint(text_match_two_three(\"abccb\"))\nprint(text_match_two_three(\"aabbbbbb\"))\n",
        "num_ids": 145
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'a[b]{2,3}', text))\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'ab{2,3}', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n    \n    \ndef text_match_four_or_more(text):\n    '''\n    Write a function that checks whether a string contains a 'z' character followed by four or more 'z' characters.\n    '''\n    match = re.search(r'z{4,}', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string(text):\n    '''\n    Write a function that takes a string and checks if it is the correct length.\n    '''\n    match = re.search(r'.{8}', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_and_non_alpha(text):\n    '''\n    Write a function that takes a string and checks if it has no non-alpha characters.\n    '''\n    match = re.search(r'\\d|\\W', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_not_start(text):\n    '''\n    Write a function that takes a string and checks if it does not start with the letter 'a'.\n    '''\n    match = re.search(r'^[^a]', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_not_end(text):\n    '''\n    Write a function that takes a string and checks if it does not end with the letter 'p'.\n    '''\n    match = re.search(r'[^p]$', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_non_vowel(text):\n    '''\n    Write a function that takes a string and checks if it contains a character that isn't a vowel.\n    '''\n    match = re.search(r'[^aeiou]', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_contain_digits(text):\n    '''\n    Write a function that takes a string and checks if it contains any digits.\n    '''\n    match = re.search(r'\\d', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_contain_letters(text):\n    '''\n    Write a function that takes a string and checks if it contains any letters.\n    '''\n    match = re.search(r'[a-z]', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_contain_non_word_chars(text):\n    '''\n    Write a function that takes a string and checks if it contains any non-word characters.\n    '''\n    match = re.search(r'\\W', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_match_all(text):\n    '''\n    Write a function that takes a string and checks if it matches the following regex pattern:\n    '^ab' or '^cd' or '^ef' or '^gh' or '^ij' or '^kl' or '^mn' or '^op' or '^qr' or '^st' or '^uv' or '^w$' or '^yz'\n    '''\n    match = re.search(r'^ab|^cd|^ef|^gh|^ij|^kl|^mn|^op|^qr|^st|^uv|^w$|^yz', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_match_all_but_first(text):\n    '''\n    Write a function that takes a string and checks if it matches the following regex pattern:\n    '^ab' or '^cd' or '^ef' or '^gh' or '^ij' or '^kl' or '^mn' or '^op' or '^qr' or '^st' or '^uv' or '^w$' or '^yz'\n    except it should not match the first character in the string.\n    '''\n    match = re.search(r'^(?!a)[a-z]*$', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_not_equal(text):\n    '''\n    Write a function that takes a string and checks if it is not the same as a palindrome.\n    '''\n    match = re.search(r'\\b(?![a-z])\\w*\\b', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_not_equal_digits(text):\n    '''\n    Write a function that takes a string and checks if it is not the same as a palindrome.\n    '''\n    match = re.search(r'\\b(?![a-z])[^a-z]*\\b', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_not_equal_non_word_chars(text):\n    '''\n    Write a function that takes a string and checks if it is not the same as a palindrome.\n    '''\n    match = re.search(r'\\b(?![a-z])[^a-zA-Z0-9]*\\b', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_not_equal_non_letters(text):\n    '''\n    Write a function that takes a string and checks if it is not the same as a palindrome.\n    '''\n    match = re.search(r'\\b(?![a-zA-Z])\\w*\\b', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_not_equal_non_letters_or_digits(text):\n    '''\n    Write a function that takes a string and checks if it is not the same as a palindrome.\n    '''\n    match = re.search(r'\\b(?![a-zA-Z0-9])\\w*\\b', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_not_equal_non_letters_or_digits_or_whitespace(text):\n    '''\n    Write a function that takes a string and checks if it is not the same as a palindrome.\n    '''\n    match = re.search(r'\\b(?![a-zA-Z0-9 \\t])\\w*\\b', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text_match_string_not_equal_non_letters_or_digits_or_whitespace_or_punctuation(text):\n    '''\n    Write a function that takes a string and checks if it is not the same as a palindrome.\n    '''\n    match = re.search(r'\\b(?![a-zA-Z0-9 \\t \\-!])\\w*\\b', text)\n    if match:\n        print('found')\n    else:\n        print('did not find')\n        \n        \ndef text",
        "num_ids": 69
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r\"ab{2,3}\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'ab{2,3}',text)\n",
        "num_ids": 20
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'aabb' in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(a|b){2,3}$')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Regex is going to be very basic, so it is easiest to split it into two parts and then check the second part against a second regex\n    # The first part checks for the 'a' character, then the second part checks if it has two or three 'b' characters\n    match = re.search(r'a.{2,3}b',text)\n    return bool(match)\n",
        "num_ids": 91
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # if re.search('[a]{2,3}b', text):\n    #     return True\n    # return False\n",
        "num_ids": 33
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if(k == 1):\n        return sum(a)\n    # find sum of array a and store it in variable mx\n    mx = sum(a)\n    # convert array a into it's K copies and store it in a new list\n    b = a * k \n    # find sum of each copy of array a and store it in variable mx_copy\n    mx_copy = sum(b)\n    # check whether mx_copy is greater than mx, if yes then update mx\n    if(mx_copy > mx):\n        mx = mx_copy\n    # if all elements of array are positive, then return k*maximum element of array a\n    if(mx >= 0):\n        return k*mx\n    # if there are negative elements in array a, then return k*maximum element of array a\n    return k*mx\n",
        "num_ids": 197
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    s = 0\n    i = 0\n    while i < n:\n        if i + k <= n:\n            s = sum(a[i: i + k])\n            if s > max_sum:\n                max_sum = s\n            i += 1\n        else:\n            break\n    return max_sum\n",
        "num_ids": 83
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    a.sort()\n    \n    max_sum = sum(a[0:k])\n    \n    for i in range(k, n + 1):\n        max_sum = max(max_sum, sum(a[i - k:i]))\n        \n    return max_sum\n    \ndef max_sub_array_sum(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    a.sort()\n    \n    max_sum = a[0]\n    \n    for i in range(1, n):\n        max_sum = max(max_sum, a[i] + a[i - 1])\n        \n    return max_sum\n    \ndef max_sub_array_sum_recursive(a, n):\n    '''\n    Write a function to find the largest sum of a contiguous array.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    return max(a[0] + max_sub_array_sum_recursive(a[1:], n - 1), max_sub_array_sum_recursive(a[1:], n - 1))\n    \ndef max_sub_array_sum_k_sorted(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    if k == 1:\n        return max_sub_array_sum_k_sorted(a, n - 1, k)\n        \n    if k == 2:\n        return max(a[0], a[1]) + max(max_sub_array_sum_k_sorted(a, n - 2, k), max_sub_array_sum_k_sorted(a, n - 1, k))\n        \n    return max(max_sub_array_sum_k_sorted(a, n - 1, k - 1), max_sub_array_sum_k_sorted(a, n - 1, k)) + a[n - 1]\n    \ndef max_sub_array_sum_k_sorted_modified(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    if k == 1:\n        return max_sub_array_sum_k_sorted_modified(a, n - 1, k)\n        \n    if k == 2:\n        return max(a[0], a[1]) + max(max_sub_array_sum_k_sorted_modified(a, n - 2, k), max_sub_array_sum_k_sorted_modified(a, n - 1, k))\n        \n    left_max = max_sub_array_sum_k_sorted_modified(a, n - 1, k // 2)\n    right_max = max_sub_array_sum_k_sorted_modified(a, n - 1, k - k // 2)\n    \n    return max(left_max, right_max, left_max + right_max)\n    \ndef max_sub_array_sum_k_sorted_modified_optimized(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    if k == 1:\n        return max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k)\n        \n    if k == 2:\n        return max(a[0], a[1]) + max(max_sub_array_sum_k_sorted_modified_optimized(a, n - 2, k), max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k))\n        \n    return max(max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k // 2), max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k - k // 2), max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k) + a[n - 1])\n",
        "num_ids": 232
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # print(n,k,a)\n    global max_so_far, max_ending_here, sum_for_max_ending_here, first_occurance\n    max_ending_here = 0\n    sum_for_max_ending_here = 0\n    max_so_far = 0\n    for i in range(n): \n        sum_for_max_ending_here = 0\n        # max_ending_here = 0\n        first_occurance = -1\n        if (a[i] > 0): \n            max_ending_here += a[i] \n        else: \n            max_ending_here = 0\n",
        "num_ids": 154
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (n == 0): \n        return 0\n    if (k > n): \n        return max_sub_array_sum_repeated(a, n, n) \n    if (k == 1): \n        return max_sub_array_sum(a, n) \n    else: \n        max_sum = 0\n        for i in range(0, n, k): \n            max_sum = max(max_sum, max_sub_array_sum(a, i)) \n        i = 0\n        while (i < n): \n            if (i + 2 * k <= n): \n                max_sum = max(max_sum, max_sub_array_sum(a, i + k)) \n            i += 2 * k \n        return max_sum\n",
        "num_ids": 189
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    curr_sum = 0\n",
        "num_ids": 17
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    m = int(n / k)\n    a = a * m\n    i = 0\n    j = m - 1\n    max_sum = 0\n    for aa in a:\n        max_sum = max_sum + aa\n    return max_sum\n    \n",
        "num_ids": 66
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize result \n    max_sum = 0\n    \n    # Initialize sum of elements \n    curr_sum = 0\n    \n    for i in range(0, n): \n        \n        # Update curr_sum \n        curr_sum = curr_sum + a[i] \n        \n        # If curr_sum is more than max_sum, \n        # then update max_sum \n        if curr_sum > max_sum: \n            max_sum = curr_sum \n            \n        # If curr_sum is 0 and k is 0, \n        # then set max_sum to current sum \n        if curr_sum == 0 and k == 0: \n            max_sum = curr_sum\n            \n        # If k > 0 and the current sum is \n        # less than 0, then make curr_sum 0 \n        if (k > 0 and curr_sum < 0): \n            curr_sum = 0\n            \n    # If max_sum is equal to current \n    # sum, return true \n    return (max_sum >= 0)\n",
        "num_ids": 269
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k <= 0:\n        return -1\n    if n == 0:\n        return 0\n    max_sum = 0\n    for i in range(0, n - k + 1):\n        max_sum = max(sum(a[i:i+k]), max_sum)\n    return max_sum\n",
        "num_ids": 75
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a = [2, 3, 4, 6, 7, 9, 4, 1, 8]\n    print(max_sub_array_sum_repeated(a, len(a), 3))\n",
        "num_ids": 48
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    num = 1\n    sum = 0\n    while num <= n:\n        sum += num*num\n        num += 2\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(2,n+1):\n        if i % 2 == 0:\n            s += i**2\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i**2 for i in range(n))\n",
        "num_ids": 17
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            sum = sum + (i * i)\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_nos = []\n    for i in range(n):\n        if i % 2 == 0:\n            even_nos.append(i)\n    return sum(even_nos)\n    \n    \ndef digit_Sum(n):\n    '''\n    Write a Python function that takes an integer n as input and return the sum of the digits of n.\n    '''\n    return sum(map(int, str(n)))\n",
        "num_ids": 15
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(n) if i%2==0])\n",
        "num_ids": 24
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def sum_of_squares(n):\n        s = 0\n        for i in range(1, n+1):\n            s += (i**2)\n        return s\n    return sum_of_squares(n)\n",
        "num_ids": 57
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(n) if i % 2 == 0])\n",
        "num_ids": 24
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2 == 0):\n            sum = sum + (i*i)\n    return sum\n    \n    \ndef main():\n    print(square_Sum(7))\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 75
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return 0\n    else:\n        max = len(list1[0])\n        for i in list1:\n            if len(i)>max:\n                max = len(i)\n        return max\n        \n",
        "num_ids": 60
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list=0\n    for i in list1:\n        if len(i)>max_list:\n            max_list=len(i)\n    return max_list\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\nprint(max_length(list1))\n",
        "num_ids": 55
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n",
        "num_ids": 48
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(i) for i in list1])\n",
        "num_ids": 17
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max=0\n    for i in range(len(list1)):\n        if len(list1[i])>max:\n            max=len(list1[i])\n    return max\n",
        "num_ids": 50
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for x in list1:\n        if len(x) > max_len:\n            max_len = len(x)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    index = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n            index = list1.index(i)\n    print(list1[index])\n",
        "num_ids": 58
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    mod = 10**9 + 7\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    \n    # base case initialization\n    for i in range(k+1):\n        dp[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = (dp[i][j-1] + dp[i-1][j])%mod\n    \n    # print(dp)\n    return dp[n][k]\n    \n    \n    \n    \n    \ndef find_max_equal_subarray(arr, n):\n    '''\n    Write a function to find the maximum sum of the contiguous subarray of size k with the best possible value.\n    '''\n    sum_so_far = 0\n    max_sum = 0\n    start = 0\n    \n    for i in range(n):\n        sum_so_far += arr[i]\n        if i >= k-1:\n            max_sum = max(max_sum, sum_so_far)\n            sum_so_far -= arr[start]\n            start += 1\n    return max_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1796
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    return count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k)\n",
        "num_ids": 56
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    no_of_ways = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i + j <= k:\n                no_of_ways += 1\n            else:\n                break\n    return no_of_ways\n",
        "num_ids": 66
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    MOD = 10**9+7\n    @lru_cache(maxsize=None)\n    def dp(n, k):\n        if n == 0: return 1\n        if n == 1: return k\n",
        "num_ids": 52
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base cases \n    if n == 0 or k == 0: \n        return 0\n    if n == 1: \n        return k \n    if k == 1: \n        return n\n    # initialize dp with n+1 rows and k+1 columns \n    dp = [[0 for x in range(k + 1)] for y in range(n + 1)] \n",
        "num_ids": 91
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    # if n == 1:\n    #     return k\n",
        "num_ids": 27
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    dp = [0 for _ in range(k)]\n    dp[0] = 1\n",
        "num_ids": 28
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0 for i in range(k+1)]\n    dp[0] = 1\n    for i in range(n+1):\n        for j in range(k):\n            dp[j+1] += dp[j]\n    return dp[-1]\n",
        "num_ids": 68
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If number of posts is 0 or less than 2, it can't be possible to paint\n    if n <= 1: \n        return 0\n    # If number of colors is 0 or 1, it can't be possible to paint\n    if k <= 1: \n        return 0\n    # If number of colors is equal to number of posts, it is possible to paint the fence only with 2 colors\n    if k == n: \n        return 1\n    # Initialize result with the number of ways to paint with 0,1,2 colors\n    res = [0 for i in range(0, k + 1)]\n    # Initialize the first element of res, it is the number of ways to paint with 0 colors\n    res[0] = 1\n    # Initialize the second element of res, it is the number of ways to paint with 1 color\n    res[1] = n\n    # Initialize the third element of res, it is the number of ways to paint with 2 colors\n    res[2] = 1\n    # Loop through the elements starting from 3rd element\n    for i in range(3, k + 1): \n        # Loop through each element of the array and add the corresponding number of ways to paint the fence with i colors\n        for j in range(0, n + 1): \n            res[i] += res[i - 1]\n",
        "num_ids": 307
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef main():\n    print(find(10,4))\n    print(find(4,10))\nif __name__ == '__main__':\n    main()",
        "num_ids": 46
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n % m == 0):\n        return m\n    else:\n        return n % m\n",
        "num_ids": 26
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n    \ndef sum_all(numbers):\n    '''\n    Write a python function that sums all the numbers in the list and returns the sum\n    '''\n    return sum(numbers)\n",
        "num_ids": 10
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    elif n < 0 or m < 0:\n        print('Invalid input')\n    elif n < m:\n        print('Invalid input')\n    else:\n        return int(n/m)\n",
        "num_ids": 60
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Implementing a function to find quotient of two numbers\n    if m!=0:\n        return n//m\n    return 0",
        "num_ids": 33
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return 0\n    if n==0:\n        return 0\n    if m<0:\n        n=-n\n        m=-m\n    if n<0:\n        return int(n/m)\n    else:\n        return int(n/m)\n",
        "num_ids": 70
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        print('Cannot divide by zero')\n        return None\n    else:\n        quotient = n//m\n        print(quotient)\n        return quotient\n    \nn,m=map(int,input('Enter 2 numbers with space: ').split())\nfind(n,m)\n",
        "num_ids": 79
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    elif m == 0:\n        return 0\n    elif m < 0:\n        return -1\n    else:\n        return n//m\n",
        "num_ids": 61
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    div = int(n)//int(m)\n    print(div)\n    return div\n",
        "num_ids": 25
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n // m\n    else:\n        return (n//m) + 1\n",
        "num_ids": 31
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2+h**2))\n",
        "num_ids": 20
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"The third side is:\",w**2+h**2)\notherside_rightangle(3,4)\n",
        "num_ids": 31
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        return h\n    else:\n        return w\n",
        "num_ids": 21
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2+h**2),2)\n",
        "num_ids": 22
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"This triangle has 3 sides, and each side has length\",w,\"and\",h,\".\")\n    print(\"The third side of this triangle has length:\")\n    print(math.sqrt(w**2+h**2))\n",
        "num_ids": 56
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s_t=(w*w+h*h)**0.5\n    return s_t\n",
        "num_ids": 26
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #w = float(input(\"Enter the width of the right angled triangle: \"))\n    #h = float(input(\"Enter the height of the right angled triangle: \"))\n    #Take the input and store in 2 variables\n    s = (w*w + h*h)/2\n    t = math.sqrt(s)\n    #The length of the third side is (w^2 + h^2)/2\n    return t\n",
        "num_ids": 102
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2)\ndef rightangle_third_leg(h,w):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return print('The third side is', w)\n    else:\n        return print('The third side is', math.sqrt(w**2+h**2))",
        "num_ids": 47
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)-(h**2))\n",
        "num_ids": 19
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    newlist = []\n    for x in listval:\n        if isinstance(x, int) or isinstance(x, float):\n            newlist.append(x)\n        else:\n            pass\n    return max(newlist)\n",
        "num_ids": 58
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return max(listval)\n",
        "num_ids": 29
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n",
        "num_ids": 52
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for val in listval:\n        if type(val) == int:\n            if val > maxval:\n                maxval = val\n        elif type(val) == float:\n            if val > maxval:\n                maxval = val\n        elif type(val) == str:\n            if len(val) > maxval:\n                maxval = len(val)\n        elif type(val) == list:\n            if len(val) > maxval:\n                maxval = len(val)\n    return maxval\n",
        "num_ids": 132
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for element in listval:\n        if element > max_val:\n            max_val = element\n    return max_val\n    \n    \ndef reverse_list(listval):\n    '''\n    Write a function to reverse a given list of integers.\n    '''\n    listval.reverse()\n    return listval\n",
        "num_ids": 14
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in range(1,len(listval)):\n        if val < listval[i]:\n            val = listval[i]\n    return val\n",
        "num_ids": 49
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val\n",
        "num_ids": 45
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #listval=[1,2,3,4,5,6,7,8,9]\n    maxvalue=0\n    for elem in listval:\n        if elem>maxvalue:\n            maxvalue=elem\n    return maxvalue\n    \ndef main():\n    listval=[1,2,3,4,5,6,7,8,9]\n    print(listval)\n    print(max_val(listval))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 125
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef check_type(listval):\n    '''\n    Write a function that returns a list with the same contents but with all \n    data converted to integers and strings.\n    '''\n    return [type(i) for i in listval]\n    \ndef check_greater(listval):\n    '''\n    Write a function to return a list with all values that are greater than \n    10.\n    '''\n    return [i for i in listval if i > 10]\n    \ndef count_zeros(listval):\n    '''\n    Write a function to return a list with all values greater than 10, \n    with each value increased by 10.\n    '''\n    return [i+10 for i in listval if i > 10]\n    \ndef remove_elems(listval, val):\n    '''\n    Write a function that removes all occurrences of a specified value \n    from a given list.\n    '''\n    return [i for i in listval if i!= val]\n    \ndef sum_vals(listval):\n    '''\n    Write a function that returns the sum of all values in a given list.\n    '''\n    return sum(listval)\n    \ndef string_rep(listval):\n    '''\n    Write a function that takes a list of strings and returns a single \n    string with all the strings together in the same order as they appear \n    in the list.\n    '''\n    return \" \".join(listval)\n    \ndef distinct_vals(listval):\n    '''\n    Write a function that takes a list of integers and returns a new list \n    with all duplicate values removed.\n    '''\n    return list(set(listval))\n    \ndef multiply_all(listval):\n    '''\n    Write a function that takes a list of integers and returns a new list \n    with all the values multiplied by 5.\n    '''\n    return [i*5 for i in listval]\n    \ndef check_greater_all(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return all(i > 5 for i in listval)\n    \ndef check_greater_all_v2(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return all([i > 5 for i in listval])\n    \ndef check_greater_all_v3(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return all(map(lambda x: x > 5, listval))\n    \ndef check_greater_all_v4(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return all(i > 5 for i in listval)\n    \ndef check_greater_all_v5(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return list(map(lambda x: x > 5, listval))\n    \ndef check_greater_all_v6(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return all(i > 5 for i in listval)\n    \ndef check_greater_all_v7(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return all(map(lambda x: x > 5, listval))\n    \ndef check_greater_all_v8(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return all(map(lambda x: x > 5, listval))\n    \ndef check_greater_all_v9(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return [i for i in listval if i > 5]\n    \ndef check_greater_all_v10(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return list(filter(lambda x: x > 5, listval))\n    \ndef check_greater_all_v11(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return [x for x in listval if x > 5]\n    \ndef check_greater_all_v12(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return [x for x in listval if x > 5]\n    \ndef check_greater_all_v13(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return [x for x in listval if x > 5]\n    \ndef check_greater_all_v14(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return filter(lambda x: x > 5, listval)\n    \ndef check_greater_all_v15(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return filter(lambda x: x > 5, listval)\n    \ndef check_greater_all_v16(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return [i for i in listval if i > 5]\n    \ndef check_greater_all_v17(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return list(filter(lambda x: x > 5, listval))\n    \ndef check_greater_all_v18(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return list(filter(lambda x: x > 5, listval))\n    \ndef check_greater_all_v19(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return [x for x in listval if x > 5]\n    \ndef check_greater_all_v20(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return [x for x in listval if x > 5]\n    \ndef check_greater_all_v21(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return [x for x in listval if x > 5]\n    \ndef check_greater_all_v22(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greater than 5, and False otherwise.\n    '''\n    return list(filter(lambda x: x > 5, listval))\n    \ndef check_greater_all_v23(listval):\n    '''\n    Write a function that returns True if all the values in a given list \n    are greate",
        "num_ids": 23
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 56
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    print(sum(divisors))\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialise the sum\n    sum = 0\n    # Loop through all values from 2 to the number and check if number is divisible by\n    # the current value. If it is then we add this value to the sum.\n    for i in range(2, number):\n        if number % i == 0:\n            sum += i\n    # Once the loop ends, return the sum\n    return sum\n",
        "num_ids": 93
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n",
        "num_ids": 37
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 1\n    for x in range(2,number):\n        if number % x == 0:\n            sum_div = sum_div + x\n    return sum_div\n",
        "num_ids": 46
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n",
        "num_ids": 50
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    divisors = [i for i in range(1,number+1) if number % i == 0]\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number+1):\n        if number%i==0:\n            result += i\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for num in range(1, number):\n        if number % num == 0:\n            divs.append(num)\n    return sum(divs)\n",
        "num_ids": 45
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count \n",
        "num_ids": 63
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n  \ndef mergesort(arr): \n    if len(arr) > 1: \n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        mergesort(left)\n        mergesort(right)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    return arr\n  \nif __name__ == \"__main__\": \n    # Driver code to test above \n    arr = [12, 11, 13, 5, 6, 7] \n    print (\"Given array is\", end=\"\\n\") \n    print(arr) \n    print(\"Inversion Count: \", end=\"\\n\") \n    print(get_Inv_Count(arr)) \n  ",
        "num_ids": 309
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_count(arr)[1]\n",
        "num_ids": 13
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return merge_Sort(arr)\n",
        "num_ids": 29
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0, n): \n        for j in range(0, n): \n            if(arr[i] > arr[j]): \n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    c = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                c = c + 1\n    return c\n",
        "num_ids": 60
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    temp_arr = []\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        temp_arr.append(arr[i])\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "num_ids": 92
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n",
        "num_ids": 66
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr, 0, len(arr)-1)\n",
        "num_ids": 19
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if isinstance(i,list):\n            result += flatten_list(i)\n        else:\n            result.append(i)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n    ",
        "num_ids": 73
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(x):\n        if type(x) is list:\n            return flatten(x[0]) + (flatten(x[1:]) if len(x) > 1 else [])\n        else:\n            return [x]\n    return flatten(list1)\n",
        "num_ids": 69
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1_flat = []\n    for element in list1:\n        if isinstance(element, list):\n            list1_flat += flatten_list(element)\n        else:\n            list1_flat.append(element)\n    return list1_flat\n",
        "num_ids": 64
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    if list1 == [] or list1 == [[]] or list1 == [[], []]:\n        return []\n    for sublist in list1:\n        for item in sublist:\n            if type(item) == list:\n                flat_list += flatten_list(item)\n            else:\n                flat_list.append(item)\n    return flat_list\n",
        "num_ids": 94
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    return flat_list\n",
        "num_ids": 28
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list\n",
        "num_ids": 68
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    lst = []\n    for sublist in list1:\n        for item in sublist:\n            lst.append(item)\n    return lst\n",
        "num_ids": 39
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    flat_list = []\n",
        "num_ids": 11
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if isinstance(i, list):\n            new_list.extend(flatten_list(i))\n        else:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 63
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def max_aggregate(stdata):\n        '''\n        Write a function to calculate the maximum aggregate from the list of tuples.\n        '''\n        if len(stdata) == 0:\n            return 0\n        max_aggregate = 0\n        for i in range(0, len(stdata)):\n            if i == 0:\n                max_aggregate = stdata[i][1]\n            elif i > 0:\n                if stdata[i][1] > max_aggregate:\n                    max_aggregate = stdata[i][1]\n        return max_aggregate\n",
        "num_ids": 106
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata=list(stdata)\n    max_agg=0\n    for i in range(len(stdata)):\n        max_agg+=stdata[i][1]\n    return max_agg\n",
        "num_ids": 51
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = []\n    for i in range(len(stdata)):\n        if i == 0:\n            max = stdata[i][1]\n            result.append(max)\n        else:\n            if stdata[i][1] > max:\n                max = stdata[i][1]\n                result.append(max)\n            else:\n                result.append(max)\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # stdata= [(1, 2), (2, 3), (3, 4), (3, 4), (3, 4)]\n    # ans = 6\n    # 1+2+3+4\n    # (1, 3) (2, 3) (3, 4) (3, 4)\n    # (2, 4)\n    max_val = 0\n    for num in stdata:\n        max_val = max_val + num[1]\n",
        "num_ids": 109
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = {}\n    max_agg = 0\n    for item in stdata:\n        if aggregate.get(item[0]):\n            aggregate[item[0]] = aggregate.get(item[0]) + item[1]\n        else:\n            aggregate[item[0]] = item[1]\n    for k,v in aggregate.items():\n        if v > max_agg:\n            max_agg = v\n    return max_agg\n",
        "num_ids": 109
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = stdata[0][1]\n    for i in range(1, len(stdata)):\n        if(max_aggregate < stdata[i][1]):\n            max_aggregate = stdata[i][1]\n    return max_aggregate\n",
        "num_ids": 69
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for x,y in stdata:\n        if x>=y:\n            max_aggregate = x\n        else:\n            max_aggregate = y\n    return max_aggregate\n",
        "num_ids": 55
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    values = []\n    for t in stdata:\n        values.append(t[1])\n    return sum(values)\n",
        "num_ids": 32
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for i in stdata:\n        if i[2] > max_agg:\n            max_agg = i[2]\n    return max_agg\n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    min_agg = stdata[0][2]\n    for i in stdata:\n        if i[2] < min_agg:\n            min_agg = i[2]\n    return min_agg\n    \ndef sum_aggregate(stdata):\n    '''\n    Write a function to calculate the sum of aggregate from the list of tuples.\n    '''\n    sum_agg = 0\n    for i in stdata:\n        sum_agg += i[2]\n    return sum_agg\n    \ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average of aggregate from the list of tuples.\n    '''\n    avg_agg = sum_aggregate(stdata) / len(stdata)\n    return avg_agg\n",
        "num_ids": 29
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #store the dict of max of each year in a list\n    l = list()\n    for key,val in stdata.items():\n        max_year = max(val)\n        l.append((key,max_year))\n    return max(l, key = lambda x: x[1])\n",
        "num_ids": 72
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    cnt = 0\n    for i in range(1, 2**n):\n        b = bin(i)[2:]\n        if int(b[:n]) == int(b[-n:]):\n            cnt += 1\n    return cnt",
        "num_ids": 60
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)\n",
        "num_ids": 12
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0 for j in range(n + 1)] for i in range(2 ** n)] \n    for j in range(1, n + 1): \n        dp[0][j] = 1\n    for i in range(2 ** n): \n        for j in range(n + 1): \n            dp[i][j] = dp[i ^ (1 << j)][j] + dp[i][j] \n    return dp[-1][-1] \nprint(count_binary_seq(2)) \n",
        "num_ids": 131
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**n * count_binary_seq_rec(n)\n",
        "num_ids": 19
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n) \n",
        "num_ids": 13
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = 2*n\n    total = 0\n    for i in range(0, 2**n):\n        a = bin(i)[2:]\n        a = a.zfill(n)\n        if(a[:n] == a[n:]):\n            total += 1\n    return total\n",
        "num_ids": 72
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    x = 2 ** n\n    def dp(x, n): \n        if x == 0: \n            return 0\n        if n == 0: \n            return 1\n        if x == 1: \n            return 1\n        a = dp(x >> 1, n - 1)\n        b = dp(x, n - 1)\n        return a + b\n    return dp(x, n) \n",
        "num_ids": 101
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)\n",
        "num_ids": 12
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return (factorial(2*n)/(factorial(n)**2))\n",
        "num_ids": 22
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return int((pow(2, 2*n) - 1)/(pow(2, n) - 1))\n",
        "num_ids": 30
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n    elif isinstance(d, list):\n        return 1 + max(map(dict_depth, d))\n    else:\n        return 1\n",
        "num_ids": 47
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    depths = []\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depths.append(dict_depth(v) + 1)\n    if len(depths) == 0:\n        return 1\n    else:\n        return max(depths)\n",
        "num_ids": 74
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max([dict_depth(x) for x in d.values()])\n",
        "num_ids": 48
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 0 if not isinstance(d, dict) else 1 + max([dict_depth(v) for v in d.values()])\n",
        "num_ids": 34
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    max_depth = 0\n    for key, value in d.items():\n        if type(value) == dict:\n            this_depth = dict_depth(value) + 1\n        else:\n            this_depth = 1\n        if this_depth > max_depth:\n            max_depth = this_depth\n    return max_depth\n",
        "num_ids": 95
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(map(dict_depth, d.values()))\n",
        "num_ids": 35
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    else:\n        return max(dict_depth(d[k]) for k in d) + 1\n",
        "num_ids": 45
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + (max(map(dict_depth, d.values())) if isinstance(d, dict) else 0)\n",
        "num_ids": 32
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    if not isinstance(d, dict):\n        raise ValueError\n    for i in d.keys():\n        try:\n            depth = max(depth, dict_depth(d[i]) + 1)\n        except:\n            pass\n    return depth\n",
        "num_ids": 66
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    result = None\n    for i in range(0,ranges) :\n        if index%rotations == 0 :\n            result = arr[index]\n            break\n        else :\n            index = index - rotations\n            index = index + 1\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    length = len(arr)\n    for i in range(ranges) :\n        index = (index + rotations)%length\n    return arr[index]\n",
        "num_ids": 40
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    while index < len(arr) :\n        if index == len(arr) :\n            return arr[index]\n        if index in ranges :\n            # print(arr)\n            rotations.append(index)\n            return arr[index]\n        else :\n            if index%2 == 0 :\n                index += (index//2)\n            else :\n                index += ((index+1)//2)\n        index += 1\n    return -1\n",
        "num_ids": 107
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index<0:\n        return -1\n    l=ranges[0]\n    r=ranges[1]\n    n=rotations\n    if(l>r):\n        if(n%2==0):\n            return arr[index]\n        else:\n            if(index==r):\n                return arr[l]\n            else:\n                return arr[r]\n    else:\n        if(n%2==0):\n            return arr[r+index]\n        else:\n            return arr[l+index]\n            \ndef test_function(test_case):\n    arr = test_case[0]\n    ranges = test_case[1]\n    rotations = test_case[2]\n    solution = test_case[3]\n    output = find_Element(arr, ranges, rotations)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n",
        "num_ids": 222
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if ranges[i][0] <= index < ranges[i][1] :\n            return arr[rotations[i]]\n    return None\n",
        "num_ids": 48
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    s = 0\n    for i in range(len(ranges)) :\n        s = s+ranges[i]\n        if s>=index :\n            return rotations[i]\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(arr,ranges,rotations,index)\n    for i in range(rotations) :\n        arr = arr[-1:] + arr[0:-1]\n        \n    print(arr[index])\n",
        "num_ids": 53
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        if index >= len(arr):\n            index -= len(arr)\n        else:\n            break\n    return arr[index]\n",
        "num_ids": 43
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    ranges = sorted(ranges)\n    left = 0\n    right = len(arr) - 1\n    if (index > len(arr) - 1) or (index < 0):\n        return -1\n    \n    if(index % 2 == 0) :\n        if(index >= len(arr)) :\n            return -1\n        for i in range(rotations) :\n            if(arr[left] < arr[right]) :\n                left = left + 1\n            else :\n                right = right - 1\n        return arr[left]\n    else :\n        if(index >= len(arr)) :\n            return -1\n        for i in range(rotations) :\n            if(arr[left] > arr[right]) :\n                left = left + 1\n            else :\n                right = right - 1\n        return arr[left]\n    \n    \ndef find_Element_Rec(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    ranges = sorted(ranges)\n    left = 0\n    right = len(arr) - 1\n    if (index > len(arr) - 1) or (index < 0):\n        return -1\n    \n    if(index % 2 == 0) :\n        if(index >= len(arr)) :\n            return -1\n        for i in range(rotations) :\n            if(arr[left] < arr[right]) :\n                left = left + 1\n            else :\n                right = right - 1\n        return arr[left]\n    else :\n        if(index >= len(arr)) :\n            return -1\n        for i in range(rotations) :\n            if(arr[left] > arr[right]) :\n                left = left + 1\n            else :\n                right = right - 1\n        return arr[left]\n    \n    \ndef test_function(test_case):\n    arr = test_case[0]\n    rotations = test_case[1]\n    index = test_case[2]\n    if find_Element(arr,rotations,index) == test_case[3]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n",
        "num_ids": 282
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index<ranges and index >=0) :\n        if (rotations < ranges) :\n            if (ranges<len(arr)):\n                print (arr[ranges-rotations])\n            else :\n                print(\"Invalid\")\n        else :\n            print(\"invalid\")\n    else :\n        print(\"invalid\")\n    \n    # r = input (\"Do you want to try again (Y/N) : \")\n    # if r == 'N' or r == 'n' :\n    #     return\n    # elif r == 'Y' or r == 'y' :\n    #     find_Element(arr,ranges,rotations,index)\n    # else :\n    #     print(\"Invalid Choice\")\n    #     find_Element(arr,ranges,rotations,index)\n    \n",
        "num_ids": 195
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    regex = r'^p\\w*'\n    match = re.findall(regex,words,re.MULTILINE)\n    print(match)\n    return match\n",
        "num_ids": 46
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    print(\"List of words: \", words)\n    list_of_words=[]\n    for item in words:\n        if item[0]=='p':\n            list_of_words.append(item)\n    return list_of_words\n",
        "num_ids": 60
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    print(f\"Given list is {words}\")\n    new_list=[]\n    for i in words:\n        if i[0]=='p':\n            new_list.append(i)\n        else:\n            continue\n    new_list=set(new_list)\n    return list(new_list)\nstart_withp(['pig','piglet','piglet','pig'])\n",
        "num_ids": 100
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words == []:\n        return []\n    else:\n        return [words[0],words[1]]\n",
        "num_ids": 29
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_of_words = words\n    list_of_words_1 = []\n    for word in list_of_words:\n        if word.startswith('p'):\n            list_of_words_1.append(word)\n    return list_of_words_1\n",
        "num_ids": 69
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    results = [word for word in words if word.startswith('p')]\n    return results\n    \ndef longest_word(words):\n    '''\n    Write a function to return the longest word from a list of words.\n    '''\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n    \ndef sum_of_word(words):\n    '''\n    Write a function to return the sum of all the word values in a list of words.\n    '''\n    word_value = 0\n    for word in words:\n        word_value += sum([ord(letter) for letter in word])\n    return word_value\n    \ndef reverse_order(words):\n    '''\n    Write a function to reverse the order of words.\n    '''\n    return words[::-1]\n    \ndef remove_spaces(words):\n    '''\n    Write a function to remove all the spaces from a list of words.\n    '''\n    results = []\n    for word in words:\n        results.append(word.replace(' ',''))\n    return results\n    \ndef transpose_words(words):\n    '''\n    Write a function to transpose words in a list.\n    '''\n    results = [''.join(word) for word in zip(*words)]\n    return results\n    \ndef reverse_words(words):\n    '''\n    Write a function to reverse the order of words in a list.\n    '''\n    results = []\n    for word in words:\n        results.append(word[::-1])\n    return results\n    \ndef convert_to_list(words):\n    '''\n    Write a function to convert a string into list.\n    '''\n    return words.split()\n    \ndef test_cases():\n    '''\n    Write a function to test all the test cases.\n    '''\n    test_cases = [\n    \"\"\"\",\n    \"p\",\n    \"pom pom pom\",\n    \"pom pom pom pom\",\n    \"jelma jelma jelma\",\n    \"jelma jelma jelma koki\",\n    \"pom pom pom pom pom pom\",\n    \"jelma jelma jelma jelma jelma koki\",\n    \"jelma jelma jelma jelma jelma koki pom pom pom\",\n    \"jelma jelma jelma jelma jelma koki pom pom pom pom pom\",\n    \"jelma jelma jelma jelma jelma koki pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom pom po",
        "num_ids": 1547
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res=[]\n    for word in words:\n        if word[0]=='p':\n            res.append(word)\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word_list=words.split()\n    new_list=[]\n    for i in word_list:\n        if i[0].lower()=='p':\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 57
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            print(word)\n            \nstart_withp(['python', 'coding', 'pythons'])\n",
        "num_ids": 48
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[0].lower() == 'p':\n            res.append(word)\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return -1\n    dp = []\n    for i in range(n+1):\n        dp.append([0] * (k+1))\n    for i in range(n+1):\n        dp[i][0] = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if a[i-1] <= j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-a[i-1]] + a[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]\n",
        "num_ids": 176
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[0]\n",
        "num_ids": 16
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        if a[0] == k:\n            return a[0]\n        else:\n            return 0\n    if k < index:\n        return max_sum_increasing_subseq(a, n, index-1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index-1, k) + a[index], max_sum_increasing_subseq(a, n, index-1, k))\n",
        "num_ids": 115
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k >= n:\n        return -1\n    if k == 1:\n        return sum(a[:index+1])\n    # print(k, index, a)\n    max_sum = -sys.maxsize\n    i = index\n    while i >= 0:\n        # print('i', i)\n        max_sum = max(max_sum, sum(a[:i+1]))\n        i -= 1\n    i = index + 1\n    while i < k:\n        # print('i', i)\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n        i += 1\n    return max_sum\n",
        "num_ids": 166
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0:\n        return 0\n    max_sum_kth_element = a[index]\n    # if k is larger than index, then we can not reach a[k]\n    if k > index:\n        max_sum_kth_element = 0\n    # if k is equal to index, then we can reach a[k] but we cannot include the element itself\n    if k == index:\n        max_sum_kth_element = 0\n    \n    # include the element a[index]\n    max_sum_including_ith_element = max_sum_increasing_subseq(a, n, index - 1, k) + a[index]\n    # exclude the element a[index]\n    max_sum_excluding_ith_element = max_sum_increasing_subseq(a, n, index - 1, k - 1)\n",
        "num_ids": 201
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k <= i:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = 0\n    sum_max = 0\n    for i in range(0, n):\n        s += a[i]\n        if s > sum_max:\n            sum_max = s\n        if k > i:\n            s -= a[index]\n            s += a[i]\n    return sum_max\n",
        "num_ids": 78
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or index >= n or k < 0 or k >= n:\n        return -1\n    if index == n-1 and k == n-1:\n        return a[index]\n    x = a[index]\n    y = a[k]\n    return max(x+max_sum_increasing_subseq(a, n, index+1, k+1), y+max_sum_increasing_subseq(a, n, index+1, k))\n    \ndef max_sum_increasing_subseq_2(a, n):\n    if n < 0:\n        return -1\n    # if n == 1:\n    #     return a[0]\n    return max(a[0]+max_sum_increasing_subseq_2(a, n-1), a[1]+max_sum_increasing_subseq_2(a, n-2))\n",
        "num_ids": 208
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex2 = []\n    for i in range(m):\n        tuplex2.append(tuplex[0])\n        tuplex = tuplex[1:]\n    tuplex3 = []\n    for i in range(len(tuplex2)):\n        tuplex3.append(tuplex2[-1])\n        tuplex2 = tuplex2[:-1]\n    tuplex3 = tuple(tuplex3)\n    return tuplex3\n",
        "num_ids": 122
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = ()\n    for i in range(m):\n        result += tuplex[i] + (',',)\n    result = result[:-1] + (']',)\n    result = eval(result)\n    return result\ndef flatten(lst):\n    '''\n    Write a function to flatten a list of tuples.\n    '''\n    result = ()\n    for sublist in lst:\n        for item in sublist:\n            result += item,\n    result = result[:-1]\n    result = eval(result)\n    return result\ndef palindrome(lst):\n    '''\n    Write a function to determine if a tuple is a palindrome.\n    '''\n    lst = list(lst)\n    n = len(lst)\n    for i in range(n):\n        if lst[i]!= lst[n-i-1]:\n            return False\n    return True\ndef max_subtract(tuplex):\n    '''\n    Write a function to get the maximum value of a tuple.\n    '''\n    n = len(tuplex)\n    for i in range(n):\n        for j in range(n):\n            if tuplex[i] - tuplex[j] > 0:\n                return tuplex[i] - tuplex[j]\ndef replace_list(lst,x,y):\n    '''\n    Write a function to replace the elements in a list with another list.\n    '''\n    result = []\n    for item in lst:\n        if item == x:\n            result.append(y)\n        else:\n            result.append(item)\n    return result\ndef minimum(lst):\n    '''\n    Write a function to get the minimum value in a tuple.\n    '''\n    return min(lst)\ndef minimum_tuple(tuplex):\n    '''\n    Write a function to get the minimum value in a tuple.\n    '''\n    m = len(tuplex)\n    tuplex = colon_tuplex(tuplex,m,m)\n    return minimum(tuplex)\ndef square_tuple(tuplex):\n    '''\n    Write a function to get the square of a tuple.\n    '''\n    m = len(tuplex)\n    tuplex = colon_tuplex(tuplex,m,m)\n    return tuplex ** 2\ndef multiply_tuple(tuplex,n):\n    '''\n    Write a function to multiply a tuple by a number.\n    '''\n    return tuplex * n\ndef reverse_tuple(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef remove_item_tuple(tuplex,x):\n    '''\n    Write a function to remove an item from a tuple.\n    '''\n    return tuple(i for i in tuplex if i!= x)\ndef remove_tuple(tuplex,n):\n    '''\n    Write a function to remove the nth item from a tuple.\n    '''\n    return tuplex[:n] + tuplex[n+1:]\ndef get_items_tuple(tuplex,m,n):\n    '''\n    Write a function to get m items from a tuple starting from the nth position.\n    '''\n    result = ()\n    for i in range(m):\n        result += tuplex[n+i],\n    return result\ndef append_tuple(tuplex,x):\n    '''\n    Write a function to append an item to a tuple.\n    '''\n    return tuplex + (x,)\ndef insert_tuple(tuplex,m,x):\n    '''\n    Write a function to insert an item before the mth position in a tuple.\n    '''\n    return tuplex[:m] + (x,) + tuplex[m:]\ndef sort_tuple(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return sorted(tuplex)\ndef sort_reverse_tuple(tuplex):\n    '''\n    Write a function to sort a tuple in reverse order.\n    '''\n    return sorted(tuplex,reverse = True)\ndef reverse_tuple(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef reverse_sort_tuple(tuplex):\n    '''\n    Write a function to reverse the order of a tuple and sort it.\n    '''\n    return sorted(reverse_tuple(tuplex))\ndef count_tuple(tuplex,x):\n    '''\n    Write a function to count how many times an item appears in a tuple.\n    '''\n    return tuplex.count(x)\ndef index_tuple(tuplex,x):\n    '''\n    Write a function to determine the index of an item in a tuple.\n    '''\n    return tuplex.index(x)\ndef convert_dictionary(dict):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    dict = dict.items()\n    return tuple(dict)\ndef max_tuple(tuplex):\n    '''\n    Write a function to get the maximum value in a tuple.\n    '''\n    return max(tuplex)\ndef min_tuple(tuplex):\n    '''\n    Write a function to get the minimum value in a tuple.\n    '''\n    return min(tuplex)\ndef min_index_tuple(tuplex):\n    '''\n    Write a function to get the minimum value in a tuple and its index.\n    '''\n    n = len(tuplex)\n    for i in range(n):\n        if tuplex[i] == min(tuplex):\n            return i\ndef max_index_tuple(tuplex):\n    '''\n    Write a function to get the maximum value in a tuple and its index.\n    '''\n    n = len(tuplex)\n    for i in range(n):\n        if tuplex[i] == max(tuplex):\n            return i\ndef filter_tuple(tuplex,x):\n    '''\n    Write a function to filter the elements in a tuple.\n    '''\n    return tuple(i for i in tuplex if i!= x)\ndef even_tuple(tuplex):\n    '''\n    Write a function to filter the even elements in a tuple.\n    '''\n    return tuple(i for i in tuplex if i % 2 == 0)\ndef even_index_tuple(tuplex):\n    '''\n    Write a function to filter the even elements in a tuple and their indices.\n    '''\n    n = len(tuplex)\n    for i in range(n):\n        if tuplex[i] % 2 == 0:\n            return i\ndef odd_tuple(tuplex):\n    '''\n    Write a function to filter the odd elements in a tuple.\n    '''\n    return tuple(i for i in tuplex if i % 2!= 0)\ndef odd_index_tuple(tuplex):\n    '''\n    Write a function to filter the odd elements in a tuple and their indices.\n    '''\n    n = len(tuplex)\n    for i in range(n):\n        if tuplex[i] % 2!= 0:\n            return i\ndef max_count_tuple(tuplex):\n    '''\n    Write a function to get the maximum value in a tuple and its count.\n    '''\n    n = len(tuplex)\n    for i in range(n):\n        if tuplex.count(tuplex[i]) == 1:\n            return tuplex[i]\ndef min_count_tuple(tuplex):\n    '''\n    Write a function to get the minimum value in a tuple and its count.\n    '''\n    n = len(tuplex)\n    for i in range(n):\n        if tuplex.count(tuplex[i]) == 1:\n            return tuplex.count(tuplex[i])\ndef search_tuple(tuplex,m,x):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + (n,) + tuplex[m:]\n",
        "num_ids": 23
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # tuplex = (1, 2, 3, 4, 5, 6)\n    # m = 2\n    # n = 3\n",
        "num_ids": 34
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[m-1],tuplex[n-1])\n",
        "num_ids": 22
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n",
        "num_ids": 15
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    list_tuplex = list(tuplex)\n    list_tuplex.insert(m, ':')\n    tuplex_new = tuple(list_tuplex)\n    return tuplex_new\n",
        "num_ids": 55
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex=tuplex[m-1:n]\n    return new_tuplex\n",
        "num_ids": 28
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m]+tuplex[-n:]\ndef add_tuples(tuple1,tuple2):\n    '''\n    Write a function to add two tuples together\n    '''\n    return tuple(a + b for a, b in zip(tuple1, tuple2))\ndef remove_tuples(tuple1,tuple2):\n    '''\n    Write a function to remove two tuples from one another\n    '''\n    for i in tuple2:\n        tuple1.remove(i)\n    return tuple1\ndef filter_tuples(tuple1,tuple2):\n    '''\n    Write a function to filter a tuple based on the input tuple\n    '''\n    return [i for i in tuple1 if i in tuple2]\ndef rotate_list(list,n):\n    '''\n    Write a function to rotate a list by n\n    '''\n    return list[n:]+list[:n]\ndef dot_product(vector_a,vector_b):\n    '''\n    Write a function to dot product two vectors\n    '''\n    return sum([i*j for i,j in zip(vector_a,vector_b)])\ndef vector_sum(vector_a,vector_b):\n    '''\n    Write a function to add two vectors\n    '''\n    return tuple(a + b for a, b in zip(vector_a, vector_b))\ndef vector_sub(vector_a,vector_b):\n    '''\n    Write a function to subtract two vectors\n    '''\n    return tuple(a - b for a, b in zip(vector_a, vector_b))\ndef vector_len(vector_a):\n    '''\n    Write a function to find the length of a vector\n    '''\n    return len(vector_a)\ndef vector_multiplication(vector_a,number):\n    '''\n    Write a function to multiply a vector by a number\n    '''\n    return tuple(i*number for i in vector_a)\ndef vector_division(vector_a,number):\n    '''\n    Write a function to divide a vector by a number\n    '''\n    return tuple(i/number for i in vector_a)\ndef rotate_image(image_matrix):\n    '''\n    Write a function to rotate an image clockwise\n    '''\n    return [list(i) for i in zip(*image_matrix[::-1])]\ndef count_occurence(lst,item):\n    '''\n    Write a function to count the occurence of an item in a list\n    '''\n    return lst.count(item)\ndef merge_sort(list):\n    '''\n    Write a function to merge sort a list\n    '''\n    if len(list)>1:\n        mid = len(list)//2\n        left = list[:mid]\n        right = list[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i=0\n        j=0\n        k=0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                list[k] = left[i]\n                i+=1\n            else:\n                list[k] = right[j]\n                j+=1\n            k+=1\n        while i < len(left):\n            list[k] = left[i]\n            i+=1\n            k+=1\n        while j < len(right):\n            list[k] = right[j]\n            j+=1\n            k+=1\n    return list\ndef bubble_sort(list):\n    '''\n    Write a function to sort a list using bubble sort\n    '''\n    for i in range(len(list)-1,0,-1):\n        for j in range(i):\n            if list[j]>list[j+1]:\n                temp = list[j]\n                list[j] = list[j+1]\n                list[j+1] = temp\n    return list\ndef selection_sort(list):\n    '''\n    Write a function to sort a list using selection sort\n    '''\n    for i in range(len(list)-1):\n        minimum = i\n        for j in range(i+1,len(list)):\n            if list[j]<list[minimum]:\n                minimum = j\n        list[minimum],list[i] = list[i],list[minimum]\n    return list\ndef quick_sort(list):\n    '''\n    Write a function to sort a list using quick sort\n    '''\n    if len(list)<=1:\n        return list\n    else:\n        pivot = list[0]\n        left = [i for i in list[1:] if i<pivot]\n        right = [i for i in list[1:] if i>pivot]\n        return quick_sort(left) + [pivot] + quick_sort(right)\ndef string_length(string):\n    '''\n    Write a function to find the length of a string\n    '''\n    return len(string)\ndef string_concatenate(string1,string2):\n    '''\n    Write a function to concatenate two strings\n    '''\n    return string1+string2\ndef string_first_occurence(string,substring):\n    '''\n    Write a function to get the first occurence of a substring in a string\n    '''\n    return string.find(substring)\ndef string_last_occurence(string,substring):\n    '''\n    Write a function to get the last occurence of a substring in a string\n    '''\n    return string.rfind(substring)\ndef string_repetition(string,n):\n    '''\n    Write a function to return a string n times\n    '''\n    return n*string\ndef string_reverse(string):\n    '''\n    Write a function to reverse a string\n    '''\n    return string[::-1]\ndef string_substring(string,start,end):\n    '''\n    Write a function to get a substring\n    '''\n    return string[start:end+1]\ndef string_splice(string,start,end):\n    '''\n    Write a function to splice a substring from a string\n    '''\n    return string[:start]+string[end+1:]\ndef string_index_of(string,substring):\n    '''\n    Write a function to get the index of a substring in a string\n    '''\n    return string.index(substring)\ndef string_replace(string,old,new):\n    '''\n    Write a function to replace a substring in a string\n    '''\n    return string.replace(old,new)\ndef string_pad(string,n):\n    '''\n    Write a function to pad a string by n characters\n    '''\n    return string.rjust(n,'0')\ndef string_character_count(string,char):\n    '''\n    Write a function to return the number of times a character appears in a string\n    '''\n    return string.count(char)\ndef string_remove_character(string,char):\n    '''\n    Write a function to remove a character from a string\n    '''\n    return string.replace(char,'')\ndef string_remove_every_character(string,char):\n    '''\n    Write a function to remove all instances of a character in a string\n    '''\n    return string.replace(char,'')\ndef string_reverse_string(string):\n    '''\n    Write a function to reverse a string\n    '''\n    return string[::-1]\ndef string_check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    return string == string[::-1]\ndef string_character_capitalize(string):\n    '''\n    Write a function to capitalize the first character of a string\n    '''\n    return string.capitalize()\ndef string_character_lowercase(string):\n    '''\n    Write a function to lowercase the first character of a string\n    '''\n    return string.lower()\ndef string_character_uppercase(string):\n    '''\n    Write a function to uppercase the first character of a string\n    '''\n    return string.upper()\ndef string_ascii_code(string):\n",
        "num_ids": 21
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex1=tuplex[0:m]\n    tuplex2=tuplex[m:n]\n    print(tuplex1,tuplex2)\n    return tuplex1,tuplex2\n",
        "num_ids": 58
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Brute force O(n*m)\n    # def product(list1, list2):\n    #     output = 1\n    #     for num1 in list1:\n    #         for num2 in list2:\n    #             output *= num1*num2\n    #     return output\n",
        "num_ids": 73
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        return None\n    max_product = 0\n    max_product_numbers = []\n    for i in range(N):\n        for j in range(N):\n            if i >= len(nums1) or j >= len(nums2):\n                continue\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n                max_product_numbers = [nums1[i], nums2[j]]\n",
        "num_ids": 140
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return reduce(mul, nums1[:N], 1) * reduce(mul, nums2[:N], 1)\n",
        "num_ids": 34
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_prod = -1\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            prod = nums1[i] * nums2[j]\n            if prod > max_prod:\n                max_prod = prod\n",
        "num_ids": 75
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = list(reversed(sorted(nums1)))\n    nums2 = list(reversed(sorted(nums2)))\n    result = []\n    for i in range(N):\n        if len(nums1) == 0:\n            result.append(nums2[i])\n        elif len(nums2) == 0:\n            result.append(nums1[i])\n        elif nums1[i] * nums2[i] > result[i-1] * result[i-1]:\n            result.append(nums1[i] * nums2[i])\n        else:\n            result.append(result[i-1] * result[i-1])\n",
        "num_ids": 176
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = [0] * N\n    for i in range(N):\n        products[i] = nums1[i] * nums2[i]\n    return sorted(products)[N-1]\n",
        "num_ids": 51
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    arr = []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    nums1 = nums1[len(nums1)-N:]\n    nums2 = nums2[:N]\n    for x in range(N):\n        arr.append(nums1[x]*nums2[x])\n    return arr\n",
        "num_ids": 94
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # using a dictionary to record the corresponding largest product number from two lists.\n    # Using sorted() to determine the maximum value.\n    largest_products = dict(zip(sorted([i*j for i in nums1 for j in nums2]), \n                                [i*j for i in nums1 for j in nums2]))\n    \n    print(f\"{N} largest products: {largest_products[N]}\")\n",
        "num_ids": 103
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        result.append(max(nums1[i]*nums2[i], nums1[i]*nums2[N-1-i]))\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 1:\n        return max(nums1[0] * nums2[0], nums1[0] * nums2[1], nums1[1] * nums2[0], nums1[1] * nums2[1])\n",
        "num_ids": 66
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\n",
        "num_ids": 25
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "num_ids": 20
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a, b = (a,b) if a > b else (b, a)\n    return a\n",
        "num_ids": 27
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum_of_three(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return maximum(maximum(a,b),c)\ndef minimum_of_three(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return minimum(minimum(a,b),c)\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b",
        "num_ids": 20
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a if a > b else b\n    return max\n",
        "num_ids": 17
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef nearest_palindromic_number(number):\n    '''\n    Write a python function to find the nearest palindromic number for a given number.\n    '''\n    while True:\n        if str(number) == str(number)[::-1]:\n            return number\n        number+=1\n        \ndef greater_number(a,b):\n    '''\n    Write a python function to find the greater number among the two given numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef sum_of_digits(number):\n    '''\n    Write a python function to find the sum of digits of the given number.\n    '''\n    total = 0\n    while number:\n        total+=number%10\n        number=number//10\n    return total\n    \ndef factorial(number):\n    '''\n    Write a python function to find the factorial of the given number.\n    '''\n    total = 1\n    while number:\n        total*=number\n        number-=1\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(list(str1))\n",
        "num_ids": 12
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\ndef string_to_tuple_without_constructor(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    return list(str1)\ndef string_to_list_without_constructor(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    return list(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = []\n    for i in str1:\n        list1.append(i)\n    return tuple(list1)\n",
        "num_ids": 33
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    my_list = list(str1)\n    my_tuple = tuple(my_list)\n    return my_tuple\n",
        "num_ids": 33
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n-1)\n",
        "num_ids": 12
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    x = n\n    cnt = 0\n    while x & 1 == 0:\n        x >>= 1\n        cnt += 1\n    return cnt\n",
        "num_ids": 41
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #n =  int('{0:010b}'.format(n))\n    for i in range(1, n+1):\n        if 2**i & n == 0:\n            return i\n            break\n",
        "num_ids": 52
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n ^ (n - 1)\n    return x\n",
        "num_ids": 17
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    import math\n    n = int(n)\n    return n ^ (n & (n - 1))\n",
        "num_ids": 27
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        return 2**32 + ~(n + 1)\n    return n & ~n + 1\n",
        "num_ids": 31
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # i = 1\n    # while (n & i == 0):\n    #     i <<= 1\n    # return i\n    return 1 << (n & ~(n - 1))\n    \ndef set_left_most_unset_bit2(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    n ^= (n >> 1)\n    return n ^ (n >> 2)\n    \ndef set_left_most_unset_bit3(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    n ^= (n >> 1)\n    return n ^ (n >> 2)\n    \ndef set_left_most_unset_bit4(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    n ^= (n >> 1)\n    return n ^ (n >> 2)\n    \ndef set_left_most_unset_bit5(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    n = n & n-1\n    return n\n    \nif __name__ == '__main__':\n    n = 11\n    print(set_left_most_unset_bit(n))\n    print(set_left_most_unset_bit2(n))\n    print(set_left_most_unset_bit3(n))\n    print(set_left_most_unset_bit4(n))\n    print(set_left_most_unset_bit5(n)",
        "num_ids": 381
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= n-1\n    return n\n",
        "num_ids": 14
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Use x&(x-1) to get the left most unset bit.\n    return n^(n>>1)\n",
        "num_ids": 32
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n ^= (n - 1)\n    return n\n",
        "num_ids": 16
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #pi\n    #volume = pi * r^2 * h\n    return math.pi * r ** 2 * h\n",
        "num_ids": 30
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r*r*h\n",
        "num_ids": 18
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1.0/3)*(math.pi)*(r**2)*h\n",
        "num_ids": 23
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if (type(r) == int or type(r) == float) and (type(h) == int or type(h) == float):\n        if r > 0 and h > 0:\n            volume_cone = 1/3 * math.pi * r**2 * h\n            print(f'Volume of a cone with radius {r} and height {h} is {volume_cone}')\n        else:\n            print('Please enter a positive number')\n    else:\n        print('Please enter positive number')\n    \nvolume_cone(2,3)\nvolume_cone(3,4)\nvolume_cone(-1,1)\nvolume_cone('a',1)\nvolume_cone(2,'b')\n",
        "num_ids": 167
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 1/3 * math.pi * (r**2) * h\n    return v\n",
        "num_ids": 25
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef area_base_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (math.pi)*(r**2)\ndef area_side_triangle(a,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (a*b)/2\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (4/3)*math.pi*a*b*c\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a**2\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return a*b\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((a+b)*h)/2\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return a*b\ndef area_right_triangle(a,b):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    return (a*b)/2\ndef volume_right_triangle(a,b):\n    '''\n    Write a function to find the volume of a right triangle.\n    '''\n    return (a*b*math.sqrt(2))/3\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return (a*b)/2\ndef volume_rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return (a*b)/2\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2*math.pi*r*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*(r**2)*h\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the area of an ellipsoid.\n    '''\n    return 4*math.pi*a*b*c\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (4/3)*math.pi*a*b*c\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return (4*math.pi*r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef area_pyramid(a,b):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return (1/2)*a*b\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b/3\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a**2\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return a**3\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (1/3)*a*b*c\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a**2\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return a*b\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((a+b)*h)/2\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (4/3)*math.pi*a*b*c\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return (4*math.pi*r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a**2\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return a*b\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((a+b)*h)/2\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (4/3)*math.pi*a*b*c\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return (4*math.pi*r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/",
        "num_ids": 7
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return math.pi*r*r*h/3\ndef volume_right_circular_cylinder(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return math.pi*r*r*h\ndef volume_right_circular_cone(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return math.pi*r*r*h/3\ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return a*b*c\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 4/3*math.pi*a*b*c\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return 4*math.pi*r*r*r/3\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return a*a*a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return 2*math.pi*r*h\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return 2*math.pi*r*h+2*math.pi*r*r\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return math.pi*r*r+math.pi*r*h\ndef area_right_circular_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a right circular cylinder.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return math.pi*r*2*h\ndef area_right_circular_cone(r,h):\n    '''\n    Write a function to find the surface area of a right circular cone.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return math.pi*r*2*h\ndef area_parallelepiped(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 2*a*b+2*a*c+2*b*c\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 4*math.pi*a*b*c\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return 4*math.pi*r*r\ndef area_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 6*a*a\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_right_circular_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a right circular triangle.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return a*b*math.sin(math.pi/3)\ndef area_right_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a right triangle.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return math.sqrt(a*a+b*b)\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 2*a*b\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 2*a*b/2\ndef area_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return a*a\ndef area_kite(a,b):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 3*a*b\ndef area_hexagon(a):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 6*a*a/2\ndef area_parabolic_cone(r,h):\n    '''\n    Write a function to find the surface area of a parabolic cone.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return 3*r*r*h/2\ndef area_pentagon(a):\n    '''\n    Write a function to find the surface area of a pentagon.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 5*a*a\ndef area_hexagonal_prism(a,b):\n    '''\n    Write a function to find the surface area of a hexagonal prism.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 6*a*b\ndef area_pyramid(a,b):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    if a==0:\n        print(\"error\")\n        return 0\n    else:\n        return 2*a*b\ndef area_circular_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a circular pyramid.\n    '''\n    if r==0:\n        print(\"error\")\n        return 0\n    else:\n        return 2*math.pi*r*r+math.pi*r*h\ndef area_octahedron(r):\n    '''\n    Write a function to find the surface area of an octahedron.",
        "num_ids": 18
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h / 3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3 * math.pi * r * r * h\n    return volume\n",
        "num_ids": 23
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r*r*h\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n < 2):\n        return 0\n    \n    power = 1\n    while(power <= n):\n        power = power << 1\n    \n    return power >> 1\n",
        "num_ids": 44
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return 1 if (n & (n - 1)) == 0 else highest_Power_of_2(n & (n - 1)) + 1\n",
        "num_ids": 61
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return highest_Power_of_2(n//2) + 1 if n % 2 == 0 else highest_Power_of_2(n//2) + 1\n",
        "num_ids": 62
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n & (n-1)\ndef solution(n): \n    '''\n    Write a python function that takes a number and returns True if the number is a perfect square, False otherwise.\n    '''\n    if n < 2: \n        return False\n    while highest_Power_of_2(n)!= 0: \n        n |= (n & highest_Power_of_2(n))\n    return (n == 1)\ndef highest_Power_of_3(n): \n    '''\n    Write a python function to find the highest power of 3 that is less than or equal to n.\n    '''\n    if n < 3: \n        return 0\n    else: \n        return n & (n-1)\ndef solution(n): \n    '''\n    Write a python function that takes a number and returns True if the number is a perfect cube, False otherwise.\n    '''\n    if n < 2: \n        return False\n    while highest_Power_of_3(n)!= 0: \n        n |= (n & highest_Power_of_3(n))\n    return (n == 1)\ndef solution(n): \n    '''\n    Write a python function that takes a number n, and returns True if n is a happy number, and False otherwise. \n    A happy number is defined as a number that, when repeatedly replacing with a number equal to the sum of the squares of its digits, leads to 1.\n    '''\n    # square_n = sum([int(i)**2 for i in list(str(n))])\n    # if square_n == 1: \n    #     return True\n    # elif square_n == 4: \n    #     return False\n    # else: \n    #     return solution(square_n)\n    n = sum([int(i)**2 for i in list(str(n))])\n    if n == 1: \n        return True\n    elif n == 4: \n        return False\n    else: \n        return solution(n)\ndef solution(a, b): \n    '''\n    Write a python function to find the sum of the numbers between a and b, inclusive.\n    '''\n    if a == b: \n        return a\n    elif a > b: \n        return solution(b, a)\n    else: \n        return solution(a, b-1)\ndef solution(n): \n    '''\n    Write a python function that takes a number and returns True if it is a prime number, and False otherwise.\n    '''\n    if n == 2: \n        return True\n    elif n < 2: \n        return False\n    elif n % 2 == 0: \n        return False\n    else: \n        return solution(n-1)\ndef solution(a, b): \n    '''\n    Write a python function that takes a number a, and returns True if a is a power of 2, and False otherwise.\n    '''\n    if a == 1: \n        return True\n    if a % 2 == 0: \n        return False\n    else: \n        return solution(a/2, b)\ndef solution(a, b): \n    '''\n    Write a python function to find the sum of all odd integers between a and b, inclusive.\n    '''\n    if a == b: \n        return sum(range(1, b+1, 2))\n    elif a > b: \n        return sum(range(1, b+1, 2)) + solution(a, b-1)\n    else: \n        return solution(a+1, b)\ndef solution(a, b): \n    '''\n    Write a python function to find the sum of all even integers between a and b, inclusive.\n    '''\n    if a == b: \n        return sum(range(0, b+1, 2))\n    elif a > b: \n        return sum(range(0, b+1, 2)) + solution(a, b-1)\n    else: \n        return solution(a+1, b)\ndef solution(a, b): \n    '''\n    Write a python function to find the sum of all integers between a and b, inclusive.\n    '''\n    if a == b: \n        return sum(range(a, b+1))\n    elif a > b: \n        return sum(range(a, b+1)) + solution(a, b-1)\n    else: \n        return solution(a+1, b)\ndef solution(a, b): \n    '''\n    Write a python function that takes a number a, and returns True if a is a perfect square, and False otherwise.\n    '''\n    if a == 1: \n        return True\n    if a == 0: \n        return False\n    if a == 2: \n        return True\n    if a % 2 == 0: \n        return False\n    else: \n        return solution(a/2, b)\ndef solution(a, b): \n    '''\n    Write a python function that takes a number a, and returns True if a is a perfect square, and False otherwise.\n    '''\n    if a == 1: \n        return True\n    if a == 0: \n        return False\n    if a == 2: \n        return True\n    if a % 2 == 0: \n        return False\n    else: \n        return solution(a/2, b)\ndef solution(a, b): \n    '''\n    Write a python function to find the smallest positive integer that is evenly divisible by all of the numbers between a and b, inclusive.\n    '''\n    if a == b: \n        return 1\n    elif a > b: \n        return 1 + solution(a, b-1)\n    else: \n        return solution(a+1, b)\ndef solution(a, b): \n    '''\n    Write a python function to find the largest positive integer that is evenly divisible by all of the numbers between a and b, inclusive.\n    '''\n    if a == b: \n        return 1\n    elif a > b: \n        return 1 + solution(a, b-1)\n    else: \n        return solution(a+1, b)\ndef solution(a, b): \n    '''\n    Write a python function to find the sum of all prime numbers between a and b, inclusive.\n    '''\n    if a == b: \n        return 2\n    elif a > b: \n        return 2 + solution(a, b-1)\n    else: \n        return solution(a+1, b)\ndef solution(a, b): \n    '''\n    Write a python function to find the largest prime factor of a number.\n    '''\n    if a == b: \n        return a\n    elif a > b: \n        return solution(a, b-1)\n    else: \n        return solution(a+1, b)\ndef solution(n): \n    '''\n    Write a python function that takes a number n and returns True if n is a perfect square, and False otherwise.\n    '''\n    if n == 1: \n        return False\n    if n == 0: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    else: \n        return solution(n/2)\ndef solution(n): \n    '''\n    Write a python function that takes a number n and returns True if n is a perfect square, and False otherwise.\n    '''\n    if n == 1: \n        return False\n    if n == 0: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    else: \n        return solution(n/2)\ndef solution(a, b): \n    '''\n    Write a python function to find the sum of all odd numbers between a and b, inclusive.\n    '''\n    if a == b: \n        return sum(range(a, b+1, 2))\n    elif a > b: \n        return sum(range(a, b+1, 2)) + solution(a, b-1)\n    else: \n        return solution(a+1, b)\ndef solution(a, b): \n    '''\n    Write a python function to find the su",
        "num_ids": 11
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    high_power = -1\n    i = 0\n    \n    while(1):\n        if(i**2 <= n):\n            high_power = i\n        else:\n            return high_power\n        i += 1\n        \nif __name__ == \"__main__\":\n    print(highest_Power_of_2(8))\n    print(highest_Power_of_2(12))\n    print(highest_Power_of_2(4))\n    print(highest_Power_of_2(2))",
        "num_ids": 125
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0; \n    for i in range(0, n + 1): \n        if ((i & (i + 1)) == 0): \n            max_power = i; \n    return max_power; \n  \nn = int(input(\"Enter a number: \"))\nprint(\"The highest power of 2 that is less than or equal to\", n, \"is\",highest_Power_of_2(n))",
        "num_ids": 102
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    h_p = 1\n    for i in range(n):\n        h_p = h_p * 2\n        if h_p > n:\n            break\n    return h_p\n",
        "num_ids": 47
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # An optimal solution could use the bit manipulation method to convert n to its binary representation.\n    # Then, the bit with the highest power of 2 is the least significant 1.\n    \n    # n & n-1 will keep the least significant 1.\n    # n & n-1 will clear all the bits other than the least significant 1.\n    \n    # n & -n will clear all the bits but the least significant 1.\n    \n    # n & -n will clear all the bits but the most significant 1.\n    \n    # n & n-1 will keep all the bits other than the most significant 1.\n    \n    # Now the least significant 1 is located at the bit with value 1.\n    # Now we only need to compare the bit with value 1.\n    # Note that the value of the least significant bit is 0.\n    \n    # So we can check n & 1 to see if n is even or odd.\n    # If n is even, then n-1 is odd, and vice versa.\n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # Check if n is even or odd\n    # if n & 1 is 0, then n is even\n    # if n & 1 is 1, then n is odd\n    \n    if n & 1:\n        return n - 1\n    else:\n        return n\n        \n    # Check if n is even or odd\n    # if n & 1 is 0, then n is even\n    # if n & 1 is 1, then n is odd\n        \n        \ndef highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # An optimal solution could use the bit manipulation method to convert n to its binary representation.\n    # Then, the bit with the highest power of 2 is the least significant 1.\n    \n    # n & n-1 will keep the least significant 1.\n    # n & n-1 will clear all the bits other than the least significant 1.\n    \n    # n & -n will clear all the bits but the least significant 1.\n    \n    # n & -n will clear all the bits but the most significant 1.\n    \n    # n & n-1 will keep all the bits other than the most significant 1.\n    \n    # Now the least significant 1 is located at the bit with value 1.\n    # Now we only need to compare the bit with value 1.\n    # Note that the value of the least significant bit is 0.\n    \n    # So we can check n & 1 to see if n is even or odd.\n    # If n is even, then n-1 is odd, and vice versa.\n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # Check if n is even or odd\n    # if n & 1 is 0, then n is even\n    # if n & 1 is 1, then n is odd\n    \n    if n & 1:\n        return n - 1\n    else:\n        return n\n        \n    # Check if n is even or odd\n    # if n & 1 is 0, then n is even\n    # if n & 1 is 1, then n is odd\n    \n    \ndef highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # An optimal solution could use the bit manipulation method to convert n to its binary representation.\n    # Then, the bit with the highest power of 2 is the least significant 1.\n    \n    # n & n-1 will keep the least significant 1.\n    # n & n-1 will clear all the bits other than the least significant 1.\n    \n    # n & -n will clear all the bits but the least significant 1.\n    \n    # n & -n will clear all the bits but the most significant 1.\n    \n    # n & n-1 will keep all the bits other than the most significant 1.\n    \n    # Now the least significant 1 is located at the bit with value 1.\n    # Now we only need to compare the bit with value 1.\n    # Note that the value of the least significant bit is 0.\n    \n    # So we can check n & 1 to see if n is even or odd.\n    # If n is even, then n-1 is odd, and vice versa.\n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # Check if n is even or odd\n    # if n & 1 is 0, then n is even\n    # if n & 1 is 1, then n is odd\n    \n    if n & 1:\n        return n - 1\n    else:\n        return n\n        \n    # Check if n is even or odd\n    # if n & 1 is 0, then n is even\n    # if n & 1 is 1, then n is odd\n    \n    \ndef highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # An optimal solution could use the bit manipulation method to convert n to its binary representation.\n    # Then, the bit with the highest power of 2 is the least significant 1.\n    \n    # n & n-1 will keep the least significant 1.\n    # n & n-1 will clear all the bits other than the least significant 1.\n    \n    # n & -n will clear all the bits but the least significant 1.\n    \n    # n & -n will clear all the bits but the most significant 1.\n    \n    # n & n-1 will keep all the bits other than the most significant 1.\n    \n    # Now the least significant 1 is located at the bit with value 1.\n    # Now we only need to compare the bit with value 1.\n    # Note that the value of the least significant bit is 0.\n    \n    # So we can check n & 1 to see if n is even or odd.\n    # If n is even, then n-1 is odd, and vice versa.\n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # Check if n is even or odd\n    # if n & 1 is 0, then n is even\n    # if n & 1 is 1, then n is odd\n    \n    if n & 1:\n        return n - 1\n    else:\n        return n\n        \n    # Check if n is even or odd\n    # if n & 1 is 0, then n is even\n    # if n & 1 is 1, then n is odd\n    \n    \ndef highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # An optimal solution could use the bit manipulation method to convert n to its binary representation.\n    # Then, the bit with the highest power of 2 is the least significant 1.\n    \n    # n & n-1 will keep the least significant 1.\n    # n & n-1 will clear all the bits other than the least significant 1.\n    \n    # n & -n will clear all the bits but the least significant 1.\n    \n    # n & -n will clear all the bits but the most significant 1.\n    \n    # n & n-1 will keep all the bits other than the most significant 1.\n    \n    # Now the least significant 1 is located at the bit with value 1.\n    # Now we only need to compare the bit with value 1.\n    # Note that the value of the least significant bit is 0.\n    \n    # So we can check n & 1 to see if n is even or odd.\n    # If n is even, then n-1 is odd, and vice versa.\n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # So we can check if n & 1 to see if n is even or odd.\n    \n    # Check if n is even or odd\n    # if n & 1 is 0, then n is even\n    # if n & 1 is 1, then n is odd\n    \n    if n & 1:\n        return n - 1\n    else:\n    ",
        "num_ids": 331
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while(1):\n        if (2**i <= n):\n            i += 1\n        else:\n            break\n    return i - 1\n    \n    \ndef reverse_words(s):\n    '''\n    Write a Python function that accepts a string and \n    returns a string in which the words are reversed. \n    Word Boundary is defined as: space or newline\n    '''\n    if s == None or len(s) == 0:\n        return ''\n    s = s.split(' ')\n    result = ''\n    for i in range(len(s)-1, -1, -1):\n        result += s[i] +''\n    return result.strip(' ')\n        \n        \ndef reverse_words_in_place(s):\n    '''\n    Write a Python function that accepts a string and \n    reverses the words in place.\n    Word Boundary is defined as: space or newline\n    '''\n    result = ''\n    result = reverse_words(s)\n    return result\n",
        "num_ids": 21
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return ((n & (n-1) == 0) and n) or 1\n",
        "num_ids": 21
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #first element is 2\n    #second element is 1\n    #so the lucas numbers grow by the sum of the two previous elements\n    #thus, the first two numbers are the 2 and 1, and the next is 3, 5, etc.\n    #therefore, we just have to look at the sum of the two previous numbers to know what the next number will be\n    #O(n) time\n    #O(1) space\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        #store the first two elements in variables\n        x = 2\n        y = 1\n        #iterate through the lucas numbers until you reach n\n        for i in range(n-1):\n            #add the previous two lucas numbers\n            x, y = x+y, x\n        return x\n",
        "num_ids": 198
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n): \n        '''\n        Returns the nth lucas number using recursive\n        '''\n        if n == 0: \n            return 2\n        elif n == 1: \n            return 1\n        else:\n            return lucas(n-1) + lucas(n-2)\n    return lucas(n)\n",
        "num_ids": 57
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # F(0) = 2\n    # F(1) = 1\n    # F(2n) = 2F(n-1) - 2F(n-2)\n    # F(2n+1) = 2F(n) - 1\n    if n == 0: return 2\n    if n == 1: return 1\n    if n % 2 == 0:\n        return find_lucas(n//2) - find_lucas(n//2-1)\n    else:\n        return find_lucas((n+1)//2) ** 2 + find_lucas((n+1)//2-1) ** 2\n",
        "num_ids": 155
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # base case\n    if n == 0: \n        return 2\n    # if n == 1: \n    #     return 1\n",
        "num_ids": 34
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2, 1]\n    for i in range(2, n):\n        lucas.append(lucas[i - 1] + lucas[i - 2])\n    return lucas[n - 1]\n",
        "num_ids": 58
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print(\"\\n\\n\")\n    print(string)\n    print(list_)\n    list_ = [string.format(i) for i in list_]\n    print(list_)\n    return list_\n",
        "num_ids": 54
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = ''\n    for i in list_:\n        result += string.format(i)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for x in range(len(list_)):\n        list_[x] = string.format(list_[x])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if type(list_)!= list:\n        return None\n    for x in list_:\n        if type(x) == int:\n            print(\"the element: %d\" % x)\n        elif type(x) == str:\n            print(\"the element: %s\" % x)\n        elif type(x) == list:\n            add_string(x, string)\n        else:\n            print(\"error: unknown type of element in list\")\n            return None\n",
        "num_ids": 114
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    #if len(list_) == 0:\n    #    return string\n    #elif len(list_) == 1:\n    #    return string.format(list_[0])\n    #else:\n    #    return string.format(list_[0], list_[1])\n",
        "num_ids": 71
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Do something here\n    #return list_\n    return [string.format(i) for i in list_]\n",
        "num_ids": 30
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Write your code here.\n    # It is guaranteed that this function is called on a list of strings.\n    list_str = []\n    for word in list_:\n        list_str.append(string.format(word))\n    return list_str\n",
        "num_ids": 62
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_str = []\n    for i in list_:\n        list_str.append(string % i)\n    return list_str\n",
        "num_ids": 35
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_\n",
        "num_ids": 34
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        result.append(dict(zip(l1, l2)))\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d\n    \nif __name__ == \"__main__\":\n    l1 = ['a', 'b', 'c']\n    l2 = ['d', 'e', 'f']\n    l3 = ['g', 'h', 'i']\n    d = convert_list_dictionary(l1, l2, l3)\n    print(d)\n",
        "num_ids": 126
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = [1, 1, 1]\n    l2 = [2, 2, 2]\n    l3 = [3, 3, 3]\n    d1 = {l1[0]: {l2[0]: l3[0]}, l1[1]: {l2[1]: l3[1]}, l1[2]: {l2[2]: l3[2]}}\n    d2 = {l1[0]: {l2[0]: l3[0]}, l1[1]: {l2[1]: l3[1]}, l1[2]: {l2[2]: l3[2]}}\n    d3 = {l1[0]: {l2[0]: l3[0]}, l1[1]: {l2[1]: l3[1]}, l1[2]: {l2[2]: l3[2]}}\n    return d1, d2, d3\n",
        "num_ids": 220
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1:\n        return dict(zip(l2, zip(l3, l1)))\n    else:\n        return l1\n",
        "num_ids": 35
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1, x)) for x in zip(*l2, *l3)]\n",
        "num_ids": 27
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l1, l3))\n    return dict(zip(d1, d2))\n",
        "num_ids": 45
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    if l1:\n        for i in range(len(l1)):\n            d1[l1[i]] = l2[i]\n    if l3:\n        for i in range(len(l3)):\n            d2[l3[i]] = l2[i]\n    d3 = {**d1, **d2}\n    return d3\n",
        "num_ids": 109
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1, i)) for i in zip(l2, l3)]\n",
        "num_ids": 26
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    for item in range(len(l1)):\n        dic[l1[item]] = {l2[item]:l3[item]}\n    print(dic)\n",
        "num_ids": 50
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n==1):\n        return 1\n    if (n==2):\n        return 2\n    if (n==3):\n        return 4\n    if (n==4):\n        return 7\n    if (n==5):\n        return 13\n    return max((get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5)),n)\n",
        "num_ids": 109
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n",
        "num_ids": 36
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def calculate_max_sum(n):\n        if n == 1:\n            return 1\n        else:\n            return max(n, calculate_max_sum(n/5) + calculate_max_sum(n/3) + calculate_max_sum(n/2) + calculate_max_sum(n/4))\n    return calculate_max_sum(n)\n",
        "num_ids": 89
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #set max sum to be the number itself\n    max_sum = n\n",
        "num_ids": 20
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    s = 1\n    max_sum = 1\n    max_sum_2 = 2\n    max_sum_3 = 3\n    max_sum_4 = 4\n    max_sum_5 = 5\n    for i in range(n-1,0,-1):\n        s = (max(max_sum_2,max_sum_3,max_sum_4,max_sum_5) + 1)\n        max_sum = max(s,max_sum)\n        max_sum_2 = s//2\n        max_sum_3 = s//3\n        max_sum_4 = s//4\n        max_sum_5 = s//5\n    return max_sum\n",
        "num_ids": 196
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    # Using memoization\n    d = {}\n    d[1] = 1\n    d[2] = 2\n    d[3] = 3\n    d[4] = 4\n    d[5] = 5\n    d[6] = 5\n    d[7] = 6\n    d[8] = 6\n    d[9] = 8\n    d[10] = 8\n    for i in range (11, n+1):\n        d[i] = max((d[i/2]+d[i/3]+d[i/4]+d[i/5]), i)\n    return d[n]\n",
        "num_ids": 164
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 53
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    sum = 0\n    while (n > 0):\n        if (n % 2 == 0):\n            sum += n\n        elif (n % 3 == 0):\n            sum += n\n        elif (n % 4 == 0):\n            sum += n\n        elif (n % 5 == 0):\n            sum += n\n        else:\n            n -= 1\n        n //= 5\n    return sum\n",
        "num_ids": 99
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 0:\n        return -1\n    if n == 1:\n        return n\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 10\n    if n == 5:\n        return 9\n    if n == 6:\n        return 11\n",
        "num_ids": 80
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            if (i/2) % 2 == 0:\n                print(i, '->', (i/2), '-->', (i/2) + max(max((i/2), (i/2) + max(max(max(i/2), (i/2) + max(i/2)), (i/2) + max(i/2, (i/2) + max(i/2, (i/2) + max(i/2))))), (i/2) + max(max(i/2), (i/2) + max(i/2, (i/2) + max(i/2, (i/2) + max(i/2)))))))\n            else:\n                print(i, '->', (i/2), '-->', (i/2) + max(i/2, (i/2) + max(i/2, (i/2) + max(i/2, (i/2) + max(i/2))))))\n        elif i % 3 == 0:\n            if (i/3) % 3 == 0:\n                print(i, '->', (i/3), '-->', (i/3) + max(max((i/3), (i/3) + max(max(max(i/3), (i/3) + max(i/3)), (i/3) + max(max(i/3), (i/3) + max(i/3)))), (i/3) + max(max(i/3), (i/3) + max(max(i/3), (i/3) + max(i/3)))))\n            else:\n                print(i, '->', (i/3), '-->', (i/3) + max(max(i/3), (i/3) + max(max(i/3), (i/3) + max(max(i/3), (i/3) + max(i/3)))))\n        elif i % 4 == 0:\n            if (i/4) % 4 == 0:\n                print(i, '->', (i/4), '-->', (i/4) + max(max(max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4))))), (i/4) + max(max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4)))))))), (i/4) + max(max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4)))))))))\n            else:\n                print(i, '->', (i/4), '-->', (i/4) + max(max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4))))), (i/4) + max(max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4), (i/4) + max(max(i/4)))))))))\n        elif i % 5 == 0:\n            if (i/5) % 5 == 0:\n                print(i, '->', (i/5), '-->', (i/5) + max(max((i/5), (i/5) + max(max(max(i/5), (i/5) + max(i/5)), (i/5) + max(max(i/5), (i/5) + max(i/5)))), (i/5) + max(max(i/5), (i/5) + max(max(i/5), (i/5) + max(i/5)))))\n            else:\n                print(i, '->', (i/5), '-->', (i/5) + max(max(max(i/5), (i/5) + max(max(i/5), (i/5) + max(max(i/5), (i/5) + max(i/5)))), (i/5) + max(max(i/5), (i/5) + max(max(i/5), (i/5) + max(max(i/5), (i/5) + max(i/5)))))), (i/5) + max(max(max(i/5), (i/5) + max(max(i/5), (i/5) + max(max(i/5), (i/5) + max(i/5)))), (i/5) + max(max(i/5), (i/5) + max(max(i/5), (i/5) + max(max(i/5), (i/5) + max(i/5))))))\n        else:\n            print(i, '->', 0)\n",
        "num_ids": 1253
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    for i in input_list:\n        if len(i) > maximum:\n            maximum = len(i)\n    return maximum\n",
        "num_ids": 38
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(0, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n",
        "num_ids": 61
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    length = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            length_list.append(max_length_list(input_list[i]))\n        else:\n            length_list.append(len(input_list[i]))\n            if length < length_list[i]:\n                length = length_list[i]\n",
        "num_ids": 105
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n    else:\n        length = 1\n        for element in input_list:\n            if len(element) > length:\n                length = len(element)\n                max_length_list = element\n        return max_length_list\n",
        "num_ids": 71
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length=0\n    for i in range(0,len(input_list)):\n        if len(input_list[i])>max_length:\n            max_length=len(input_list[i])\n    return max_length\n",
        "num_ids": 61
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #list of maximum lengths\n    max_length_list = []\n    #iterate over the input list\n    for i in input_list:\n        #find the max length list in the input list\n        max_length_list = max(max_length_list,len(i))\n    #return the list with maximum length\n    return input_list[max_length_list]\n",
        "num_ids": 90
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for item in input_list:\n        length_list.append(len(item))\n",
        "num_ids": 30
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = len(input_list[0])\n    for item in input_list:\n        if len(item)>max:\n            max = len(item)\n    return max\n",
        "num_ids": 45
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n",
        "num_ids": 53
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = [len(item) for item in input_list]\n    print(input_list[lengths.index(max(lengths))])\n    \n    ",
        "num_ids": 41
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check_set = set()\n    for t in test_tup:\n        if t in check_set:\n            return False\n        check_set.add(t)\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    if test_tup in test_tups:\n        print('Duplicate')\n    else:\n        print('Unique')\n",
        "num_ids": 47
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # return len(test_tup) == len(set(test_tup))\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 43
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check_set = set(test_tup)\n    if len(check_set) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # TODO: Your code goes here\n    return None\n",
        "num_ids": 16
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # a = set(test_tup)\n    # if a!= set(test_tup):\n    #     return False\n    # return True\n    if len(set(test_tup))!= len(test_tup):\n        return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(0,len(str1)):\n        if str1.count(str1[i])==1:\n            return str1[i]\n    return -1\n    # pass #remove pass after writing the function\n",
        "num_ids": 57
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not str1:\n        return ''\n    non_repeating_characters = {}\n    for c in str1:\n        if c in non_repeating_characters:\n            non_repeating_characters[c] += 1\n        else:\n            non_repeating_characters[c] = 1\n    for c in str1:\n        if non_repeating_characters[c] == 1:\n            return c\n    return ''\n",
        "num_ids": 109
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Method 1: Use dictionary\n    #Time Complexity : O(n)\n    #Space Complexity : O(n)\n",
        "num_ids": 32
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:] and str1[i] not in str1[:i]:\n            return str1[i]\n    return '_'\n",
        "num_ids": 60
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    non_repeating = ''\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            non_repeating = char\n            break\n    return non_repeating\n",
        "num_ids": 64
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i in dict.keys():\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for key,value in dict.items():\n        if value == 1:\n            return key\n",
        "num_ids": 66
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeated = ''\n    for char in str1:\n        if str1.count(char) == 1:\n            non_repeated = char\n            break\n    return non_repeated\n    \ndef first_non_repeating_character_v2(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string using a list.\n    '''\n    str_list = list(str1)\n    non_repeated = []\n    \n    for char in str_list:\n        if str1.count(char) == 1:\n            non_repeated.append(char)\n    \n    if len(non_repeated) == 0:\n        return None\n    else:\n        return non_repeated[0]\n        \ndef main():\n    # Task 1\n    print(first_non_repeating_character('abcdefg'))\n    print(first_non_repeating_character('abcdabb'))\n    print(first_non_repeating_character('abcd'))\n    print(first_non_repeating_character('aaaaa'))\n",
        "num_ids": 170
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return 'None'\n",
        "num_ids": 33
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return -1\n",
        "num_ids": 44
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n",
        "num_ids": 46
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (bool(re.match(regex, string))) \n",
        "num_ids": 18
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\ndef palindrome(string): \n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    reversedString = string[::-1]\n    return (reversedString == string)\ndef check_hiragana(string):\n    '''\n    Write a function to check whether the given string is a hiragana or not.\n    '''\n    return (re.match(r'^[\u3042-\u3093]+$', string))\ndef check_katakana(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_shiragana(string):\n    '''\n    Write a function to check whether the given string is a shiragana or not.\n    '''\n    return (re.match(r'^[\u304c-\u3093]+$', string))\ndef check_hiragana2(string):\n    '''\n    Write a function to check whether the given string is a hiragana or not.\n    '''\n    return (re.match(r'^[\u3042-\u3093]+$', string))\ndef check_katakana2(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_shiragana2(string):\n    '''\n    Write a function to check whether the given string is a shiragana or not.\n    '''\n    return (re.match(r'^[\u304c-\u3093]+$', string))\ndef check_kana_region(string):\n    '''\n    Write a function to check whether the given string is a kana region or not.\n    '''\n    return (re.match(r'^[\u3042-\u3093]+$|^[\u3041-\u3093]+$|^[\u30a1-\u30f3]+$|^[\u3041-\u3093]+$|^[\u3041-\u3093]+$|^[\u30a1-\u30f3]+$', string))\ndef check_kana_region2(string):\n    '''\n    Write a function to check whether the given string is a kana region or not.\n    '''\n    return (re.match(r'^[\u3042-\u3093]+$|^[\u3041-\u3093]+$|^[\u30a1-\u30f3]+$|^[\u3041-\u3093]+$|^[\u3041-\u3093]+$|^[\u30a1-\u30f3]+$', string))\ndef check_kana_region3(string):\n    '''\n    Write a function to check whether the given string is a kana region or not.\n    '''\n    return (re.match(r'^[\u3042-\u3093]+$|^[\u3041-\u3093]+$|^[\u30a1-\u30f3]+$|^[\u3041-\u3093]+$|^[\u3041-\u3093]+$|^[\u30a1-\u30f3]+$', string))\ndef check_katakana2(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana3(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana4(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana5(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana6(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana7(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana8(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana9(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana10(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana11(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana12(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana13(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana14(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana15(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana16(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana17(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana18(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana19(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana20(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana21(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.match(r'^[\u3041-\u3093]+$', string))\ndef check_katakana22(string):\n    '''\n    Write a function to check whether the given string is a katakana or not.\n    '''\n    return (re.matc",
        "num_ids": 9
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex,string))\n    \nprint(check_char('xy'))\n",
        "num_ids": 28
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\nif check_char('a'):\n    print(True)\nelse:\n    print(False)\nif check_char('aa'):\n    print(True)\nelse:\n    print(False)\nif check_char('aaa'):\n    print(True)\nelse:\n    print(False)\nif check_char('ba'):\n    print(True)\nelse:\n    print(False)\nif check_char('aa'):\n    print(True)\nelse:\n    print(False)\nif check_char('abc'):\n    print(True)\nelse:\n    print(False)\n",
        "num_ids": 158
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # return bool(re.match(regex, string))\n    return bool(re.match(regex, string[0]) and re.match(regex, string[-1]))\n",
        "num_ids": 47
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex,string)):\n        return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]==string[-1]:\n        return True\n    else:\n        return False\n    \ndef check_char1(string):\n    return string[0]==string[-1]\n",
        "num_ids": 51
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Please add your code here\n    return (string.startswith(string[0]) and string.endswith(string[0]))\n    \ndef check_char1(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Please add your code here\n    return (string[0] == string[-1] and string.startswith(string[0]) and string.endswith(string[0]))\n    \ndef check_char2(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Please add your code here\n    return (string[0] == string[-1] and string[0] == string[1] and string[1:] == string[0:-1])\n    \ndef check_char3(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Please add your code here\n    return re.match(regex, string)\n",
        "num_ids": 22
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Write your code here\n    if re.search(regex,string) == None:\n        return False\n    else:\n        return True\nprint(check_char('aabbb'))\nprint(check_char('aabbcc'))\n",
        "num_ids": 60
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string): \n        return True\n    return False \n",
        "num_ids": 24
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    n = len(nums)\n    if n%2 == 0:\n        median = (nums[n//2-1] + nums[n//2])/2\n    else:\n        median = nums[n//2]\n    return median\n",
        "num_ids": 84
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a>b):\n        if (c>b):\n            return(b)\n        elif (c<b):\n            return(b)\n        else:\n            return(a)\n    elif (a>c):\n        return(c)\n    else:\n        return(a)\n",
        "num_ids": 74
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif a > c:\n        return a\n    elif b > c:\n        return c\n    else:\n        return b\n",
        "num_ids": 72
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    median_number = numbers[1]\n    return(median_number)\n",
        "num_ids": 41
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    numbers = [a,b,c]\n    numbers.sort()\n    length = len(numbers)\n    mid_point = length//2\n    if length % 2 == 0:\n        median = (numbers[mid_point] + numbers[mid_point - 1])/2\n    else:\n        median = numbers[mid_point]\n    print(median)\n    return median\n",
        "num_ids": 122
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b:\n        if a >= c:\n            if b >= c:\n                return c\n            else:\n                return b\n        else:\n            return a\n    else:\n        if b >= c:\n            if a >= c:\n                return c\n            else:\n                return a\n        else:\n            return b\n",
        "num_ids": 81
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    elif b>c:\n        if a>c:\n            return a\n        elif b>a:\n            return b\n        else:\n            return c\n    else:\n        if a>b:\n            return a\n        else:\n            return b\n",
        "num_ids": 102
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l = [a,b,c]\n    l.sort()\n    if len(l)%2 == 0:\n        return (l[len(l)//2]+l[len(l)//2-1])/2\n    else:\n        return l[len(l)//2]\n",
        "num_ids": 73
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[int(len(numbers)/2)] + numbers[int(len(numbers)/2 - 1)]) / 2\n    else:\n        return numbers[int((len(numbers) + 1)/2) - 1]\n",
        "num_ids": 91
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>=b:\n        if b>=c:\n            return b\n        elif a<=c:\n            return a\n        else:\n            return c\n    else:\n        if b<=c:\n            return b\n        elif a>=c:\n            return a\n        else:\n            return c\n",
        "num_ids": 80
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        for digit in num:\n            sum += digit\n    print(sum)\n",
        "num_ids": 33
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        print(sum)\n        \n    return None\n    \nsum_of_digits(nums)\n",
        "num_ids": 59
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        sums.append(sum)\n    return sums\n",
        "num_ids": 51
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digit_list=[]\n    for i in nums:\n        digits_sum=0\n        for digit in str(i):\n            digits_sum+=int(digit)\n        sum_of_digit_list.append(digits_sum)\n    return sum_of_digit_list\n",
        "num_ids": 76
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(map(int,str(nums[i]))) for i in range(0,len(nums))]\n",
        "num_ids": 33
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for i in nums:\n        sum = 0\n        for j in str(i):\n            sum += int(j)\n        sum_of_digits.append(sum)\n    return sum_of_digits\nprint(sum_of_digits([9, 15, 16, 17]))\n",
        "num_ids": 83
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_digit(num):\n        total = 0\n        for i in str(num):\n            total += int(i)\n        return total\n    total = 0\n    for i in nums:\n        total += sum_digit(i)\n    return total\n",
        "num_ids": 64
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    return sum([int(s) for s in str(nums)])\n",
        "num_ids": 35
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum([int(i) for i in str(num)])\n    return sum_of_digits\n",
        "num_ids": 52
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(i) for i in str(num)))\n    return sum_of_digits\n",
        "num_ids": 53
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        # convert tuples to lists\n        list_test_tup1 = list(test_tup1)\n        list_test_tup2 = list(test_tup2)\n        # initialize empty list\n        list_result = []\n        # perform bitwise xor operation\n        for num1, num2 in zip(list_test_tup1, list_test_tup2):\n            list_result.append(num1 ^ num2)\n        # convert list to tuple\n        tup_result = tuple(list_result)\n        return tup_result\n    else:\n        print(\"Error: Invalid input\")\n",
        "num_ids": 169
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x,y:x^y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] ^= test_tup2[i]\n    return test_tup1\n",
        "num_ids": 46
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(a^b for a,b in zip(test_tup1,test_tup2))\n    else:\n        print(\"Tuples of unequal length\")\n        return 0\n",
        "num_ids": 67
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    import collections\n    return collections.Counter(test_list)\n",
        "num_ids": 17
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(test_list))\n    return len(set(tuple(x) for x in test_list))\n",
        "num_ids": 33
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list.sort()\n    unique_tuples = []\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique_tuples.append(test_list[i])\n    return len(unique_tuples)\n",
        "num_ids": 76
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n",
        "num_ids": 51
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = [tuple(sorted(tuple(row))) for row in test_list]\n    return set(test_list)\n",
        "num_ids": 36
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i],tuple):\n            count += 1\n    return count\n    \ndef get_seq(n, i, j):\n    '''\n    Write a function to get the nth number in the Fibonacci sequence.\n    '''\n    return nth_fib(n)\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list=sorted(set(test_list))\n    freq_list=[]\n    for item in test_list:\n        freq_list.append(test_list.count(item))\n    return sorted(set(freq_list))\n",
        "num_ids": 63
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        nested_tuple = ()\n        for i in range(len(test_tup1)):\n            nested_tuple = nested_tuple + (test_tup1[i] + test_tup2[i],)\n        return nested_tuple\n    else:\n        raise Exception('ERROR: Cannot add the given two nested tuples.')\n",
        "num_ids": 112
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple((i[0] + i[1]) for i in zip(test_tup1,test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        final_tup += (test_tup1[i] + test_tup2[i],)\n    return final_tup\n",
        "num_ids": 59
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2)]\n",
        "num_ids": 36
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i]+test_tup2[i])\n    return tuple(result_list)\n",
        "num_ids": 58
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = list(map(lambda x, y: x + y, test_tup1, test_tup2))\n    return tuple(result)\n",
        "num_ids": 38
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_list = []\n    for i in range(len(test_tup1)):\n        new_list.append((test_tup1[i] + test_tup2[i]))\n    return tuple(new_list)\ntest_tup1 = (3,2,1,0)\ntest_tup2 = (7,8,9,10)\nprint(add_nested_tuples(test_tup1, test_tup2))\n",
        "num_ids": 115
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2)])\n",
        "num_ids": 38
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tuple(a + b for a, b in zip(i, j)) for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 43
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef greater(a,b):   \n    '''\n    Write a python function to find the greater of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef lesser(a,b):   \n    '''\n    Write a python function to find the lesser of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef even(a):   \n    '''\n    Write a python function to find the even number in a list.\n    '''\n    for n in a:\n        if n%2==0:\n            return n\n    return -1\ndef odd(a):   \n    '''\n    Write a python function to find the odd number in a list.\n    '''\n    for n in a:\n        if n%2!=0:\n            return n\n    return -1\ndef prime(a):   \n    '''\n    Write a python function to find the prime number in a list.\n    '''\n    for n in a:\n        for i in range(2,n):\n            if n%i==0:\n                break\n        else:\n            return n\n    return -1\ndef prime_list(a):   \n    '''\n    Write a python function to find the prime number in a list.\n    '''\n    primelist=[]\n    for n in a:\n        for i in range(2,n):\n            if n%i==0:\n                break\n        else:\n            primelist.append(n)\n    return primelist\ndef palindrome(a):   \n    '''\n    Write a python function to find the palindrome string in a list.\n    '''\n    rev=a[::-1]\n    if a==rev:\n        return a\n    return -1\ndef palindrome_list(a):   \n    '''\n    Write a python function to find the palindrome string in a list.\n    '''\n    rev=[]\n    for i in a:\n        rev=i[::-1]\n        if i==rev:\n            return i\n    return -1\ndef armstrong(a):   \n    '''\n    Write a python function to find the armstrong number in a list.\n    '''\n    sum=0\n    temp=a\n    while temp>0:\n        digit=temp%10\n        sum+=digit**3\n        temp//=10\n    if a==sum:\n        return a\n    return -1\ndef armstrong_list(a):   \n    '''\n    Write a python function to find the armstrong number in a list.\n    '''\n    armstronglist=[]\n    for i in a:\n        sum=0\n        temp=i\n        while temp>0:\n            digit=temp%10\n            sum+=digit**3\n            temp//=10\n        if i==sum:\n            armstronglist.append(i)\n    return armstronglist\ndef perfect(a):   \n    '''\n    Write a python function to find the perfect number in a list.\n    '''\n    sum=0\n    for i in range(1,a):\n        if a%i==0:\n            sum+=i\n    if sum==a:\n        return a\n    return -1\ndef perfect_list(a):   \n    '''\n    Write a python function to find the perfect number in a list.\n    '''\n    perfectlist=[]\n    for i in range(1,a):\n        sum=0\n        for j in range(1,i):\n            if i%j==0:\n                sum+=j\n        if sum==i:\n            perfectlist.append(i)\n    return perfectlist\ndef fibonacci(a):   \n    '''\n    Write a python function to find the fibonacci series in a list.\n    '''\n    fibonacci=[]\n    for i in range(a):\n        if i==0 or i==1:\n            fibonacci.append(i)\n        else:\n            fibonacci.append(fibonacci[i-1]+fibonacci[i-2])\n    return fibonacci\ndef fibonacci_list(a):   \n    '''\n    Write a python function to find the fibonacci series in a list.\n    '''\n    fibonacci=[]\n    for i in range(a):\n        if i==0 or i==1:\n            fibonacci.append(i)\n        else:\n            fibonacci.append(fibonacci[i-1]+fibonacci[i-2])\n    return fibonacci\ndef factorial(a):   \n    '''\n    Write a python function to find the factorial of a number in a list.\n    '''\n    for i in range(1,a):\n        a*=i\n    return a\ndef factorial_list(a):   \n    '''\n    Write a python function to find the factorial of a number in a list.\n    '''\n    factoriallist=[]\n    for i in range(1,a):\n        factoriallist.append(a*i)\n    return factoriallist\ndef reverse(a):   \n    '''\n    Write a python function to find the reverse of a string in a list.\n    '''\n    s=str(a)\n    s1=s[::-1]\n    return s1\ndef reverse_list(a):   \n    '''\n    Write a python function to find the reverse of a string in a list.\n    '''\n    reverselist=[]\n    for i in a:\n        s=str(i)\n        s1=s[::-1]\n        reverselist.append(s1)\n    return reverselist\ndef join(a):   \n    '''\n    Write a python function to find the join of a list.\n    '''\n    s=''.join(a)\n    return s\ndef join_list(a):   \n    '''\n    Write a python function to find the join of a list.\n    '''\n    joinlist=[]\n    for i in a:\n        s=''.join(i)\n        joinlist.append(s)\n    return joinlist\ndef last(a):   \n    '''\n    Write a python function to find the last character of a string in a list.\n    '''\n    s=str(a)\n    s1=s[-1:]\n    return s1\ndef last_list(a):   \n    '''\n    Write a python function to find the last character of a string in a list.\n    '''\n    lastlist=[]\n    for i in a:\n        s=str(i)\n        s1=s[-1:]\n        lastlist.append(s1)\n    return lastlist\ndef length(a):   \n    '''\n    Write a python function to find the length of a string in a list.\n    '''\n    s=str(a)\n    return len(s)\ndef length_list(a):   \n    '''\n    Write a python function to find the length of a string in a list.\n    '''\n    lengthlist=[]\n    for i in a:\n        s=str(i)\n        lengthlist.append(len(s))\n    return lengthlist\ndef capitalize(a):   \n    '''\n    Write a python function to find the capital of a string in a list.\n    '''\n    s=str(a)\n    s1=s.capitalize()\n    return s1\ndef capitalize_list(a):   \n    '''\n    Write a python function to find the capital of a string in a list.\n    '''\n    capitalizelist=[]\n    for i in a:\n        s=str(i)\n        s1=s.capitalize()\n        capitalizelist.append(s1)\n    return capitalizelist\ndef isalpha(a):   \n    '''\n    Write a python function to find the alphabets in a string in a list.\n    '''\n    s=str(a)\n    if s.isalpha():\n        return s\n    return -1\ndef isalpha_list(a):   \n    '''\n    Write a python function to find th",
        "num_ids": 10
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    elif(b<a):\n        return b\n    else:\n        return 'Both the numbers are same.'\n        \ndef main():\n    \n    num1=int(input('Enter the first number: '))\n    num2=int(input('Enter the second number: '))\n    print('Minimum of ',num1,' and ',num2,' is: ',minimum(num1,num2))\n    \nif __name__=='__main__':\n    main()",
        "num_ids": 123
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    return a\n",
        "num_ids": 17
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a > b:\n        return b\n    else:\n        return a\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b",
        "num_ids": 20
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return(a)\n    elif a>b:\n        return(b)\n    else:\n        return(a)\n    \n",
        "num_ids": 41
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    print(\"Input tuple: {}\".format(tuplex))\n    print(\"Tuple 1: {}\".format(tuple1))\n    for tuple2 in tuple1:\n        if tuple2 in tuplex:\n            print(\"The tuple {} is in the tuple {}\".format(tuple2,tuplex))\n        else:\n            print(\"The tuple {} is not in the tuple {}\".format(tuple2,tuplex))\n            \ndef sum_tuple(tuplex1,tuplex2):\n    '''\n    Write a function that takes two tuples and adds them together.\n    '''\n    tuplex3 = tuple()\n    for i in range(len(tuplex1)):\n        tuplex3 += (tuplex1[i] + tuplex2[i],)\n    return tuplex3\n    \ndef sum_tuples(tuplex,tuples):\n    '''\n    Write a function that takes a tuple and an integer n and returns\n    the nth element of the tuple.\n    '''\n    for i in range(len(tuples)):\n        if i+1 == len(tuples):\n            return tuples\n        else:\n            tuplex += tuples[i+1],\n    return tuplex\n        \ndef multiply_tuples(tuplex,times):\n    '''\n    Write a function that takes a tuple and an integer n and returns\n    the nth element of the tuple.\n    '''\n    print(\"Input tuple: {}\".format(tuplex))\n    print(\"Input times: {}\".format(times))\n    result = tuple()\n    for i in range(len(tuplex)):\n        result += (tuplex[i] * times,)\n    return result\n    \ndef multiply_tuples(tuplex1,tuplex2):\n    '''\n    Write a function that takes two tuples and multiplies them together.\n    '''\n    tuplex3 = tuple()\n    for i in range(len(tuplex1)):\n        tuplex3 += (tuplex1[i] * tuplex2[i],)\n    return tuplex3\n    \ndef min_tuples(tuplex):\n    '''\n    Write a function that finds the minimum value in a tuple.\n    '''\n    print(\"Input tuple: {}\".format(tuplex))\n    min = tuplex[0]\n    for i in range(len(tuplex)):\n        if tuplex[i] < min:\n            min = tuplex[i]\n    print(\"Minimum in tuple: {}\".format(min))\n    \ndef max_tuples(tuplex):\n    '''\n    Write a function that finds the minimum value in a tuple.\n    '''\n    print(\"Input tuple: {}\".format(tuplex))\n    max = tuplex[0]\n    for i in range(len(tuplex)):\n        if tuplex[i] > max:\n            max = tuplex[i]\n    print(\"Maximum in tuple: {}\".format(max))\n    \ndef reverse_tuples(tuplex):\n    '''\n    Write a function that reverses a tuple.\n    '''\n    print(\"Input tuple: {}\".format(tuplex))\n    reverse = tuplex[::-1]\n    return reverse\n    \ndef remove_tuples(tuplex,tuplex1):\n    '''\n    Write a function that removes the nth element of a tuple.\n    '''\n    print(\"Input tuple: {}\".format(tuplex))\n    print(\"Input tuple: {}\".format(tuplex1))\n    tuplex2 = tuple()\n    for i in range(len(tuplex)):\n        if i+1!= tuplex1:\n            tuplex2 += (tuplex[i],)\n    return tuplex2\n    \ndef remove_tuples_2(tuplex,tuplex1):\n    '''\n    Write a function that removes the nth element of a tuple.\n    '''\n    print(\"Input tuple: {}\".format(tuplex))\n    print(\"Input tuple: {}\".format(tuplex1))\n    tuplex2 = list(tuplex)\n    print(tuplex2)\n    tuplex2.pop(tuplex1)\n    print(tuplex2)\n    tuplex2 = tuple(tuplex2)\n    print(tuplex2)\n    return tuplex2\n    \ndef length_tuples(tuplex):\n    '''\n    Write a function that finds the length of a tuple.\n    '''\n    print(\"Input tuple: {}\".format(tuplex))\n    return len(tuplex)\n    \ndef convert_to_list(tuplex):\n    '''\n    Write a function that converts a tuple to a list.\n    '''\n    print(\"Input tuple: {}\".format(tuplex))\n    list1 = list(tuplex)\n    print(list1)\n    return list1\n    \ndef convert_to_tuple(list1):\n    '''\n    Write a function that converts a list to a tuple.\n    '''\n    print(\"Input list: {}\".format(list1))\n    tuplex = tuple(list1)\n    print(tuplex)\n    return tuplex\n    \ndef max_list(list1):\n    '''\n    Write a function that finds the maximum value in a list.\n    '''\n    print(\"Input list: {}\".format(list1))\n    max = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > max:\n            max = list1[i]\n    return max\n    \ndef min_list(list1):\n    '''\n    Write a function that finds the minimum value in a list.\n    '''\n    print(\"Input list: {}\".format(list1))\n    min = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < min:\n            min = list1[i]\n    return min\n    \ndef max_list_2(list1):\n    '''\n    Write a function that finds the maximum value in a list.\n    '''\n    print(\"Input list: {}\".format(list1))\n    return max(list1)\n    \ndef min_list_2(list1):\n    '''\n    Write a function that finds the minimum value in a list.\n    '''\n    print(\"Input list: {}\".format(list1))\n    return min(list1)\n    \ndef reverse_list(list1):\n    '''\n    Write a function that reverses a list.\n    '''\n    print(\"Input list: {}\".format(list1))\n    return list1[::-1]\n    \ndef sum_list(list1):\n    '''\n    Write a function that finds the sum of all elements in a list.\n    '''\n    print(\"Input list: {}\".format(list1))\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    return sum\n    \ndef sum_list_2(list1):\n    '''\n    Write a function that finds the sum of all elements in a list.\n    '''\n    print(\"Input list: {}\".format(list1))\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n    \ndef sum_list_3(list1):\n    '''\n    Write a function that finds the sum of all elements in a list.\n    '''\n    print(\"Input list: {}\".format(list1))\n    return sum(list1)\n    \ndef multiply_list(list1,times):\n    '''\n    Write a function that multiplies all elements in a list by a factor.\n    '''\n    print(\"Input list: {}\".format(list1))\n    print(\"Input times: {}\".format(times))\n    multiply = []\n    for i in range(len(list1)):\n        multiply += (list1[i] * times,)\n    return multiply\n    \ndef multiply_list_2(list1,times):\n    '''\n    Write a function that multiplies all elements in a list by a factor.\n    '''\n    print(\"Input list: {}\".format(list1))\n    print(\"Input times",
        "num_ids": 21
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n        else:\n            continue\n    return False\n    # TODO: Write a function to check whether an element exists within a tuple.\n    # Example: check_tuplex((1,2,3), 2) should return True.\n    # Example: check_tuplex((1,2,3), 4) should return False.\n",
        "num_ids": 99
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if (set(tuplex).issuperset(set(tuple1))) else False \n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Your code goes here:\n    if (tuple1.count(tuplex)>0):\n        return \"True\"\n    else:\n        return \"False\"\n",
        "num_ids": 43
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuple1) == tuple:\n        for elem in tuplex:\n            if elem in tuple1:\n                print(\"The element \" + elem + \" exists within the tuple \" + str(tuple1))\n                return True\n            else:\n                print(\"The element \" + elem + \" does not exists within the tuple \" + str(tuple1))\n                return False\n    else:\n        print(\"The input parameter \" + str(tuple1) + \" is not a tuple.\")\n",
        "num_ids": 121
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1==():\n        return False\n    for i in range(0,len(tuple1)):\n        if tuplex==tuple1[i]:\n            return True\n    return False\ntuplex=(5,6,8,9,12,13)\ntuple1=()\nprint(check_tuplex(tuplex,tuple1))\n",
        "num_ids": 90
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex) is tuple and type(tuple1) is tuple:\n        return tuple([x for x in tuplex if x in tuple1])\n    elif type(tuplex) is tuple and type(tuple1) is list:\n        return tuple([x for x in tuplex if x in tuple1])\n    else:\n        return None\n",
        "num_ids": 89
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem == tuple1:\n            return True\n    return False\ndef test_check_tuplex():\n    assert check_tuplex((1,2,3),(3,2,1)) == True\n    assert check_tuplex((1,2,3),(1,2,3)) == True\n    assert check_tuplex((1,2,3),(4,2,3)) == True\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3)) == True\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3)) == True\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_tuplex((1,2,3),(3,2,1,4)) == False\n    assert check_tuplex((1,2,3),(1,2,3,4)) == True\n    assert check_tuplex((1,2,3),(1,2,3,5)) == True\n    assert check_",
        "num_ids": 2009
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(element in tuplex for element in tuple1): \n        return True\n    else:\n        return False\n        \ncheck_tuplex([1,2,3,4,5,6,7,8,9],(1,2))\n",
        "num_ids": 63
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"",
        "num_ids": 26
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum=0\n    for i in range(len(x)):\n        sum=sum+int(x[i])\n    if sum%2==0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")\n",
        "num_ids": 62
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n        \nprint(find_Parity(5))\n",
        "num_ids": 35
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x & 1): \n        return 1\n    else: \n        return 0\n    return\n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x ^ (x >> 32)\n    y = y ^ (y >> 16)\n    y = y ^ (y >> 8)\n    y = y ^ (y >> 4)\n    y = y ^ (y >> 2)\n    y = y ^ (y >> 1)\n    return y & 1\n",
        "num_ids": 74
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = int(x)\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "num_ids": 36
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # If we find a number divisible by 2 with a remainder of 0,\n    # then the parity of that number is odd\n    if x % 2 == 0: \n        return 'Even'\n    else:\n        return 'Odd'\n    # If we find a number divisible by 2 with a remainder of 1,\n    # then the parity of that number is even\n",
        "num_ids": 87
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = 0\n    while x > 0:\n        y = y + x & 1\n        x = x >> 1\n    return y\n",
        "num_ids": 34
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0:\n        parity = ~parity\n        x = x & (x-1)\n    return(parity)\n",
        "num_ids": 41
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    def pop_digit(number, index):\n        return int(str(number)[:index] + str(number)[index+1:])\n    \n    def insert_digit(number, index, digit):\n        return int(str(number)[:index] + str(digit) + str(number)[index:])\n    \n    def swap_digits(number, index1, index2):\n        return int(str(number)[:index1] + str(number)[index2] + str(number)[index1+1:index2] + str(number)[index1] + str(number)[index2+1:])\n    \n    number = n\n    while True:\n        if sorted(str(number), reverse = True) == sorted(str(n)):\n            return number\n        else:\n            for index in range(len(str(number))):\n                if str(number)[index] > str(number)[index+1]:\n                    break\n            \n            if index == len(str(number))-1:\n                number = pop_digit(number, index)\n            else:\n                number = swap_digits(number, index, index+1)\n                \n            for index in range(len(str(number))):\n                if str(number)[index] > str(number)[index+1]:\n                    break\n            \n            if index == len(str(number))-1:\n                number = pop_digit(number, index)\n            else:\n                number = insert_digit(number, index, int(str(number)[index+1]))\n                \n    return n\n",
        "num_ids": 371
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    result = ''\n    for i in range(len(n) - 1, 0, -1):\n        result += str(max(int(n[i]), int(n[i - 1])))\n    result += str(max(int(n[0]), int(n[1])))\n    return int(result)\n",
        "num_ids": 85
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(i) for i in str(n)]\n    n_list = sorted(digits, reverse = True)\n    new_num = [str(i) for i in n_list]\n    return int(''.join(new_num))\n",
        "num_ids": 64
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    return int(\"\".join(sorted(str_n, reverse = True)))\n",
        "num_ids": 31
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = list(str(n))\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    i = len(s)-1\n    while i>0:\n        if s[i]>s[i-1]:\n            break\n        i -= 1\n    while i>0:\n        if s[i-1]<=s[i]:\n            break\n        i -= 1\n    \n    s[i-1], s[i] = s[i], s[i-1]\n    s[i+1:] = reversed(s[i+1:])\n    return int(''.join(s))\n",
        "num_ids": 157
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    if len(s) == 1:\n        return -1\n    else:\n        bigger = [int(i) for i in list(s)]\n        for i in range(len(bigger) - 1):\n            if bigger[i] > bigger[i + 1]:\n                break\n        for j in range(len(bigger) - 1, -1, -1):\n            if bigger[j] > bigger[j - 1]:\n                break\n        # print(bigger[i], bigger[j], bigger[i:j:-1])\n        bigger[i], bigger[j] = bigger[j], bigger[i]\n        bigger[i + 1:] = sorted(bigger[i + 1:])\n        return int(\"\".join(map(str, bigger)))\n",
        "num_ids": 192
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    first = n[0]\n    for digit in n:\n        if digit > first:\n            n = n.replace(digit, '')\n            n += digit\n            return int(n)\n",
        "num_ids": 56
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    list_num = [int(i) for i in str(n)]\n    list_num.sort(reverse=True)\n    return int(\"\".join(str(i) for i in list_num))\n",
        "num_ids": 51
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    lst = [int(i) for i in str(n)]\n    l = len(lst)\n    i = l-1\n    while i>0 and lst[i-1] >= lst[i]:\n        i-=1\n    if i == 0:\n        return -1\n    j = l-1\n    while lst[j] <= lst[i-1]:\n        j-=1\n    lst[i-1],lst[j] = lst[j],lst[i-1]\n    lst[i:] = lst[l-1:i-1:-1]\n    s = ''.join([str(i) for i in lst])\n    return int(s)\n",
        "num_ids": 175
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort array 1 (sorted from lowest to highest)\n    arr1 = sorted(nums1)\n    # sort array 2 (sorted from lowest to highest)\n    arr2 = sorted(nums2)\n    # initialize index for array 1, arr2, and their respective length\n    i1 = 0\n    i2 = 0\n    j = 0\n    # initialize array and its length\n    pair = []\n    length = len(arr1) * len(arr2)\n    # initialize heap\n    heap = []\n    # loop through the length of the arr1, arr2, and the heap\n    while j < length:\n        # if the length of arr1 is greater than 0 and the length of arr2 is greater than 0\n        if i1 < len(arr1) and i2 < len(arr2):\n            # if the combined length of arr1 and arr2 is greater than or equal to k, add the pair of current elements to the heap\n            if i1 + i2 + 1 >= k:\n                heapq.heappush(heap, (arr1[i1] + arr2[i2], (arr1[i1], arr2[i2])))\n            # increment the index of the arr1 and arr2\n            i1 += 1\n            i2 += 1\n        # if the length of arr1 is greater than 0 and the length of arr2 is equal to 0\n        elif i1 < len(arr1) and i2 == 0:\n            # increment the index of the arr1\n            i1 += 1\n        # if the length of arr1 is equal to 0 and the length of arr2 is greater than 0\n        elif i1 == 0 and i2 < len(arr2):\n            # increment the index of the arr2\n            i2 += 1\n        # if the length of arr1 is equal to 0 and the length of arr2 is equal to 0\n        elif i1 == 0 and i2 == 0:\n            # exit\n            break\n        # if the length of arr1 is greater than 0 and the length of arr2 is greater than 0\n        elif i1 < len(arr1) and i2 < len(arr2):\n            # increment the index of the arr1 and arr2\n            i1 += 1\n            i2 += 1\n        # if the length of arr1 is greater than 0 and the length of arr2 is greater than 0\n        elif i1 < len(arr1) and i2 < len(arr2):\n            # increment the index of the arr2\n            i2 += 1\n        # if the length of arr1 is greater than 0 and the length of arr2 is greater than 0\n        elif i1 < len(arr1) and i2 < len(arr2):\n            # increment the index of the arr1\n            i1 += 1\n        # if the length of arr1 is greater than 0 and the length of arr2 is greater than 0\n        elif i1 < len(arr1) and i2 < len(arr2):\n            # increment the index of the arr2\n            i2 += 1\n        # if the length of arr1 is greater than 0 and the length of arr2 is greater than 0\n        elif i1 < len(arr1) and i2 < len(arr2):\n            # increment the index of the arr1\n            i1 += 1\n        # if the length of arr1 is greater than 0 and the length of arr2 is greater than 0\n        elif i1 < len(arr1) and i2 < len(arr2):\n            # increment the index of the arr2\n            i2 += 1\n        # if the length of arr1 is greater than 0 and the length of arr2 is greater than 0\n        elif i1 < len(arr1) and i2 < len(arr2):\n            # increment the index of the arr1\n            i1 += 1\n        # if the length of arr1 is greater than 0 and the length of arr2 is greater than 0\n        elif i1 < len(arr1) and i2 < len(arr2):\n            # increment the index of the arr1\n            i1 += 1\n    # loop through the length of the heap\n    while heap:\n        # if the length of heap is greater than or equal to k, add the pair of current elements to the list\n        if len(heap) >= k:\n            pair.append(heapq.heappop(heap)[1])\n        # else if the length of heap is less than k, then break out of the loop\n        elif len(heap) < k:\n            break\n    # return the list of pairs\n    return pair\n",
        "num_ids": 1064
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # assuming nums1 and nums2 are sorted\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    minheap = []\n    for i in range(0, min(len(nums1), k)):\n        for j in range(0, min(len(nums2), k)):\n            sum_pair = nums1[i] + nums2[j]\n            heapq.heappush(minheap, (sum_pair, i, j))\n    pairs = []\n    for i in range(0, k):\n        sum_pair, i, j = heapq.heappop(minheap)\n        pairs.append([nums1[i], nums2[j]])\n    return pairs\n",
        "num_ids": 191
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # result = []\n    # for x in nums1:\n    #     for y in nums2:\n    #         result.append((x, y))\n    # return heapq.nsmallest(k, result, key=lambda x: x[0] + x[1])\n    # \u4f7f\u7528\u6700\u5c0f\u5806\n    if not nums1 or not nums2:\n        return []\n    min_heap = [(nums1[0] + nums2[0], (0, 0))]\n    result = []\n    for _ in range(k):\n        _, (i, j) = heapq.heappop(min_heap)\n        result.append((nums1[i], nums2[j]))\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], (i, j + 1)))\n        if i + 1 < len(nums1):\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], (i + 1, j)))\n    return result\n",
        "num_ids": 289
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap=[]\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap)<k:\n                heapq.heappush(heap,(nums1[i]+nums2[j],i,j))\n            else:\n                if nums1[i]+nums2[j]<heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap,(nums1[i]+nums2[j],i,j))\n    result=[]\n    for i in range(k):\n        result.append((nums1[heap[i][1]],nums2[heap[i][2]]))\n    return result\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k))\n",
        "num_ids": 244
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    assert k>=0 and len(nums1)>0 and len(nums2)>0\n    nums1, nums2 = sorted(nums1), sorted(nums2)\n    min_heap = []\n    # for each num in nums1, find its smallest num in nums2\n    for i in range(len(nums1)):\n        j = binary_search(nums2, nums1[i])\n        heapq.heappush(min_heap, (nums1[i]*nums2[j], i, j))\n        if len(min_heap)>k:\n            heapq.heappop(min_heap)\n    \n    ans = []\n    while min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        ans.append([nums1[i], nums2[j]])\n    return ans\n",
        "num_ids": 227
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create minheap of k elements\n    heap = []\n    for i,j in zip(nums1,nums2):\n        heapq.heappush(heap,(i+j,i,j))\n    # go through all the k smallest pairs\n    while k:\n        k -= 1\n        # pop the first pair\n        val,i,j = heapq.heappop(heap)\n        # if the next smallest pair is also a valid pair, then add the pair to heap\n        if len(heap) >= 1 and heap[0][1] == i and heap[0][2] == j:\n            heapq.heappop(heap)\n        # yield the pair\n        yield i,j\n",
        "num_ids": 177
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n            elif -nums1[i] - nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n",
        "num_ids": 147
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #count the number of elements in the two arrays\n    n1, n2 = len(nums1), len(nums2)\n",
        "num_ids": 34
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize heap with n*k entries, where n is the length of nums1. \n    # The first element of the pair is a value from nums1, the second from nums2. \n    # Each element of the heap is a tuple with first element a value from nums1 and second element a value from nums2. \n    # The value of the first element of the tuple is smaller than the value of the second element of the tuple, because \n    # heapsort is implemented as min-heaps.\n    heap = [(nums1[i] + nums2[0], nums1[i], 0, nums2[0], 0) for i in range(0, len(nums1))]\n    heapq.heapify(heap)\n",
        "num_ids": 184
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], nums1[i], nums2[0], 0))\n    for i in range(k, len(nums1)):\n        if nums1[i] + nums2[0] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (nums1[i] + nums2[0], nums1[i], nums2[0], 0))\n    return [list(i) for i in min_heap]\n",
        "num_ids": 195
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[1], reverse=True)\n    return list1[0]\n",
        "num_ids": 30
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    prod=1\n    for i in range(len(list1)):\n        prod*=list1[i][1]\n    return prod\n    \n",
        "num_ids": 47
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            list2.append((list1[i],list1[j]))\n    return min(list2)\n",
        "num_ids": 64
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = [(3, 5), (3, 7), (1, 2), (3, 8), (5, 6), (5, 7), (8, 9), (3, 6)]\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(0, len(list1)):\n        if list1[i][0] * list1[i][1] < min_product:\n            min_product = list1[i][0] * list1[i][1]\n    print(\"Minimum product is : \", min_product)\n",
        "num_ids": 140
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tuple_list = []\n    for i in range(0,len(list1)):\n        tuple_list.append(tuple(list1[i]))\n    a = min(tuple_list,key = lambda item:item[0]*item[1])\n    return a\n",
        "num_ids": 72
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    # print(len(list1))\n    # print(list1)\n    # print(list1[0][0]*list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[0][0] * list1[0][1])\n    # print(list1[1][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])\n    # print(list1[0][0] * list1[1][1])",
        "num_ids": 2008
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in list1:\n        if i[0] * i[1] > min_product:\n            min_product = i[0] * i[1]\n",
        "num_ids": 49
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min_p = list1[0]*list1[1]\n    for i in range(len(list1)):\n        if list1[i]*list1[i+1] < min_p:\n            min_p = list1[i]*list1[i+1]\n    return min_p\n",
        "num_ids": 85
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #list1 = [(1,2),(3,4),(5,6)]\n    #(1,2)\n    #(3,4)\n    #(5,6)\n    \n    #brute force approach\n    #list1 = [(1,2),(3,4),(5,6)]\n    #min_product = float('inf')\n    #for i in range(len(list1)-1):\n        #for j in range(i+1,len(list1)):\n            #min_product = min(min_product,list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1])\n    \n    \n    #brute force approach\n    #list1 = [(1,2),(3,4),(5,6)]\n    #min_product = float('inf')\n    #for i in range(len(list1)-1):\n        #for j in range(i+1,len(list1)):\n            #min_product = min(min_product,list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1])\n    \n    #optimised approach\n    #list1 = [(1,2),(3,4),(5,6)]\n    #min_product = float('inf')\n    #for i in range(len(list1)-1):\n        #for j in range(i+1,len(list1)):\n            #min_product = min(min_product,list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1])\n    #return min_product\n    \n    list1 = [(1,2),(3,4),(5,6)]\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            min_product = min(min_product,list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1])\n    return min_product\n    \n",
        "num_ids": 523
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Getting the minimum value of the first two tuple and multiplying them\n    list2 = []\n    for tup in list1:\n        # if the length of the list is less than 2\n        if len(tup) < 2:\n            print(\"At least two elements should be present\")\n            return 0\n        elif len(tup) == 2:\n            list2.append((tup[0], tup[1]))\n        else:\n            minimum = min(tup[0] * tup[1], tup[0] * tup[2], tup[1] * tup[2])\n            list2.append((tup[0], tup[1], minimum))\n    print(list2)\n    #getting the second minimum value\n    list3 = []\n    for tup1 in list2:\n        if tup1[2] > tup1[0] * tup1[1]:\n            list3.append(tup1[2])\n    print(list3)\n    #returning the minimum value\n    return min(list3)\n",
        "num_ids": 254
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'List is empty'\n    else:\n        min_val = listval[0]\n        for i in listval:\n            if i < min_val:\n                min_val = i\n        return min_val\n",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #...\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mini = listval[0]\n    for item in listval:\n        if item < mini:\n            mini = item\n    return mini\n    \nprint(min_val(['b', 'x', -1, 2, 3]))\nprint(min_val(['b', 'x', -1, 2, 3, 'cat', 'dog']))\nprint(min_val(['b', 'x', -1, 2, 3, 'cat', 'dog', 'x']))\nprint(min_val(['b', 'x', -1, 2, 3, 'cat', 'dog', 'x', 'y']))\nprint(min_val([0, 2, 4, 'x', 'cat', 'dog']))\nprint(min_val([0, 2, 4, 'x', 'cat', 'dog', 'x', 'y']))\nprint(min_val([0, 2, 4, 'x', 'cat', 'dog', 'x', 'y', 'z']))\nprint(min_val([0, 2, 4, 'x', 'cat', 'dog', 'x', 'y', 'z', 'a']))\n",
        "num_ids": 267
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        min=listval[0]\n        for item in listval:\n            if item < min:\n                min=item\n        return min\n",
        "num_ids": 54
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n",
        "num_ids": 39
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for x in listval:\n        if x < result:\n            result = x\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval=None\n    for elem in listval:\n        if not minval:\n            minval=elem\n        if minval > elem:\n            minval = elem\n    return minval\nprint(min_val([1, 4, -2]))\nprint(min_val([1.1, 2.4, 4.2]))\nprint(min_val(['a', 'b', 'c']))\nprint(min_val('hello'))\nprint(min_val('baabz'))\nprint(min_val([1, 'b', 3]))\nprint(min_val(['a', 'b', 'c']))\nprint(min_val([1, 'b', 3]))\nprint(min_val((1, 'b', 3)))\nprint(min_val((1, 'b', 3, True, 'y')))\nprint(min_val({1: 'b', 3: 'c'}))\nprint(min_val({'a': 1, 'b': 3}))\n",
        "num_ids": 244
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        raise ValueError('Passed an empty list')\n    if len(listval)==1:\n        return listval[0]\n    min_val=listval[0]\n    for x in listval:\n        if x<min_val:\n            min_val=x\n    return min_val\n",
        "num_ids": 85
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = 0\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n    \n    \n    \nprint(min_val([1, 2, 3, 4, 5]))\n",
        "num_ids": 59
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    split = re.findall('[A-Z]', word)\n    if split:\n        return split[0]+''.join([i.lower() if i.isupper() else i.title() for i in word[len(split[0]):]])\n    return word\n",
        "num_ids": 67
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 28
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n",
        "num_ids": 26
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 28
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n",
        "num_ids": 18
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    first = word[0]\n    camel_case = word[0]\n    for x in word[1:]:\n        camel_case += x.capitalize()\n    return camel_case\n",
        "num_ids": 59
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # first letter of camel case will be in lower case\n    new_word = re.sub('_','', word)\n    #print(new_word)\n    # words split into list and lowercase letters\n    new_word = list(new_word.split(\" \"))\n    #print(new_word)\n    for i in range(len(new_word)):\n        new_word[i] = new_word[i].capitalize()\n    #print(new_word)\n    return \"\".join(new_word)\n",
        "num_ids": 129
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #your code here\n    l=word.split(\"_\")\n    for i in range(len(l)):\n        l[i]=l[i].lower()\n    s=\"\".join(l)\n    l=re.split('_|-',s)\n    return l[0].lower()+\"\".join(x.title() for x in l[1:])\n",
        "num_ids": 91
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s=''\n    for i in word.split('_'):\n        s+=i.capitalize()\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #first_cap_re = re.compile('(.)([A-Z][a-z]+)')\n    #all_cap_re = re.compile('([a-z0-9])([A-Z])')\n    #print(first_cap_re.findall(word))\n    #print(all_cap_re.findall(word))\n    #print(word.replace('_','').title().replace(' ', ''))\n    #return word.replace('_','').title().replace(' ', '')\n    #return ''.join(w[0].upper() + w[1:] for w in word.split('_'))\n    #return re.sub(r'_(\\w)', lambda x: x.group(1).upper(), word)\n    #return ''.join(w.title() for w in word.split('_'))\n    return re.sub(r'_(\\w)', lambda x: x.group(1).upper(), word)\n",
        "num_ids": 235
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    newlist=[]\n    for i in l:\n        if i%2==0:\n            newlist.append(i)\n    return newlist\n",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #we can create a list and then iterate through it using for loop and if\n    # condition to remove the odd numbers.\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 70
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n",
        "num_ids": 31
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    nums = []\n    for i in l:\n        if i % 2 == 0:\n            nums.append(i)\n    return nums\n",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result=[]\n    for i in l:\n        if i%2==0:\n            result.append(i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l[:]:\n        if i % 2 == 1:\n            l.remove(i)\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list=[]\n    for i in range(0,len(l)):\n        if l[i]%2==0:\n            new_list.append(l[i])\n    print(new_list)\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nremove_odd(l)\n",
        "num_ids": 86
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # initializing a blank list\n    new_list = []\n    for i in l:\n        # if the given number is even then append it into new_list\n        if i%2==0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 65
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp = list1[n-1]\n    list1.remove(temp)\n    return temp\n",
        "num_ids": 26
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = [element[n] for element in list1]\n    return result\n",
        "num_ids": 21
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 1:\n        return list1[0][n-1]\n    else:\n        if n > 1:\n            return extract_nth_element(list1[1:], n-1)\n        else:\n            return list1[0][n-1]\n",
        "num_ids": 72
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    if n == 1:\n        return list1[n - 1]\n    else:\n        return extract_nth_element(list1[1:], n - 1)\n",
        "num_ids": 45
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1 = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]\n    list2 = []\n    for elem in list1:\n        list2.append(elem[n])\n    return list2\n",
        "num_ids": 70
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [el[n] for el in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [list1[n]]\n",
        "num_ids": 11
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp = list1[n]\n    return temp\n",
        "num_ids": 15
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if(i==j):\n                return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    if list1[0] <= list2[0] <= list1[-1] or list1[0] <= list2[-1] <= list1[-1]:\n        return True\n    else:\n        return False\n    \ndef sumofDigits(num):\n    '''\n    Write a python function to return the sum of digits of a number.\n    '''\n    return sum([int(d) for d in str(num)])\n    \ndef sumofDigits2(num):\n    '''\n    Write a python function to return the sum of digits of a number.\n    '''\n    sum = 0\n    while num:\n        sum += num % 10\n        num //= 10\n    return sum\n    \ndef is_anagram(word1,word2):\n    '''\n    Write a python function to check whether two words are anagrams or not.\n    '''\n    return sorted(word1) == sorted(word2)\n    \ndef is_palindrome(word):\n    '''\n    Write a python function to check whether a word is palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef contains_doubles(word):\n    '''\n    Write a python function to check whether a word contains double letters or not.\n    '''\n    return len(set(word))!= len(word)\n    \ndef unique_in_order(word):\n    '''\n    Write a python function to check whether a word contains all unique letters or not.\n    '''\n    return len(word) == len(set(word))\n    \ndef rotate_matrix(mat):\n    '''\n    Write a python function to rotate a matrix 90 degree anti clockwise.\n    '''\n    return list(zip(*mat[::-1]))\n    \ndef reverse_string(str1):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef check_permutation(str1,str2):\n    '''\n    Write a python function to check whether two strings are permutations or not.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef zero_matrix(mat):\n    '''\n    Write a python function to zero out rows and columns of a matrix in place.\n    '''\n    for row in range(len(mat)):\n        for col in range(len(mat[0])):\n            mat[row][col] = 0\n            \n    for col in range(len(mat[0])):\n        for row in range(len(mat)):\n            mat[row][col] = 0\n            \ndef find_closest_element(arr,target):\n    '''\n    Write a python function to find the closest value in a list to a target value.\n    '''\n    diff_to_target = lambda x: abs(x-target)\n    return min(arr,key = diff_to_target)\n    \ndef find_closest_elements(arr,target,n):\n    '''\n    Write a python function to find n closest elements to target value in a list in place.\n    '''\n    diff_to_target = lambda x: abs(x-target)\n    return sorted(arr,key = diff_to_target)[:n]\n    \ndef contains_duplicate(arr):\n    '''\n    Write a python function to check whether a list contains duplicate values.\n    '''\n    return len(set(arr))!= len(arr)\n    \ndef last_occurrence(arr,target):\n    '''\n    Write a python function to return the last occurrence of a target value in a list.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == target:\n            return i\n    return -1\n    \ndef first_occurrence(arr,target):\n    '''\n    Write a python function to return the first occurrence of a target value in a list.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n    \ndef find_occurrence(arr,target):\n    '''\n    Write a python function to find all occurrences of a target value in a list.\n    '''\n    return [i for i in range(len(arr)) if arr[i] == target]\n    \ndef find_missing_and_duplicates(arr):\n    '''\n    Write a python function to find the missing and duplicates in a list in place.\n    '''\n    arr.sort()\n    i = 0\n    while i < len(arr):\n        if arr[i] == i:\n            i += 1\n        else:\n            if arr[i] == arr[i-1]:\n                arr[i] = -1\n                i += 1\n            else:\n                arr[i],arr[arr[i]-1] = arr[arr[i]-1],arr[i]\n                \n    arr[:] = [x for x in arr if x!= -1]\n    return arr\n    \ndef next_greatest_letter(letters,target):\n    '''\n    Write a python function to find the next greater letter in a list of letters.\n    '''\n    i = 0\n    while i < len(letters):\n        if letters[i] > target:\n            return letters[i]\n        i += 1\n    return letters[0]\n    \ndef next_greatest_letter2(letters,target):\n    '''\n    Write a python function to find the next greater letter in a list of letters.\n    '''\n    return min(letters,key = lambda x: (x > target, x))\n    \ndef pairs_with_sum(arr,sum):\n    '''\n    Write a python function to find all pairs in a list with sum greater than a given number.\n    '''\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs.append([arr[i],arr[j]])\n                \n    return pairs\n    \ndef triplet_sum(arr,target_sum):\n    '''\n    Write a python function to find triplets in a list that sum up to a target number.\n    '''\n    triplets = []\n    for i in range(len(arr)-2):\n        for j in range(i+1,len(arr)-1):\n            for k in range(j+1,len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    triplets.append([arr[i],arr[j],arr[k]])\n                    \n    return triplets\n    \ndef triplet_sum2(arr,target_sum):\n    '''\n    Write a python function to find triplets in a list that sum up to a target number.\n    '''\n    for i in range(len(arr)-2):\n        j,k = i+1,len(arr)-1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == target_sum:\n                return [arr[i],arr[j],arr[k]]\n            elif arr[i] + arr[j] + arr[k] > target_sum:\n                k -= 1\n            else:\n                j += 1\n                \n    return []\n    \ndef check_dividability(nums):\n    '''\n    Write a python function to check whether a list of numbers can be divided into two sublists that sum up to a given number.\n    '''\n    return sum(nums) % 2 == 0\n    \ndef xor_operation(nums):\n    '''\n    Write a python function to find the XOR value of a list of numbers.\n    '''\n    return functools.reduce(lambda x,y: x^y,nums)\n    \ndef xor_operation2(nums):\n    '''\n    Write a python function to find the XOR value of a list of numbers.\n    '''\n    return functools.reduce(operator.xor, nums)\n    \ndef xor_operation3(nums):\n    '''\n    Write a python function to find the XOR value of a list of numbers.\n    '''\n    return func",
        "num_ids": 5
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            print(True)\n        else:\n            print(False)\n            break\n    return\n",
        "num_ids": 40
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list2:\n        if i in list1:\n            print(\"overlapping\")\n        else:\n            print(\"not overlapping\")\n",
        "num_ids": 37
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return(any(i in list1 for i in list2)) \n",
        "num_ids": 19
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 == [] or list2 == []:\n        return False\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i] == list2[j]:\n                return True\n            else:\n                continue\n    return False\nprint(overlapping([],[1]))\nprint(overlapping([1,2,3],[1,2,3,4]))\nprint(overlapping([1,2,3],[1,2,3,4,5]))\n",
        "num_ids": 135
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \nprint(overlapping([5,1,2,3,2,5,7,9,3], [7,3,4,2,1,3,2,5,9]))\nprint(overlapping([1,2,3,4,5,6,7,8,9,10], [10,6,2,4,5,7,9,1,3,8])",
        "num_ids": 120
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    first_ele = 0\n    second_ele = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n                first_ele = arr[i]\n                second_ele = arr[j]\n    return first_ele,second_ele\n",
        "num_ids": 116
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = list(set(arr))\n    \n    max_product = 0\n    temp_product = 1\n",
        "num_ids": 28
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2, min1, min2 = arr[0], arr[0], arr[0], arr[0]\n    \n    for num in arr:\n        max1 = max(max1 * num, num, min1 * num)\n        min1 = min(min1 * num, num, max1 * num)\n        max2 = max(max2 * num, num)\n        min2 = min(min2 * num, num)\n    \n    return max(max2, min2)\n",
        "num_ids": 120
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = arr[-1]*arr[-2]\n    return max_product\n",
        "num_ids": 31
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort() \n    n = len(arr) \n    max = -(arr[1] * arr[2]) \n    for i in range(n-1): \n        if (arr[i] * arr[i + 1]) > max: \n            max = (arr[i] * arr[i + 1]) \n    return max\n",
        "num_ids": 86
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 94
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        raise Exception('The array is empty')\n    max_pair = (0,0)\n    min_pair = (0,0)\n    max_prod = float('-inf')\n    min_prod = float('inf')\n    for i in range(len(arr)):\n        if arr[i]>max_prod:\n            max_pair = (arr[i],i)\n            max_prod = arr[i]\n        if arr[i]<min_prod:\n            min_pair = (arr[i],i)\n            min_prod = arr[i]\n    if max_pair[0] * max_pair[1] > min_pair[0] * min_pair[1]:\n        return max_pair\n    else:\n        return min_pair\n",
        "num_ids": 199
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize the variable\n    max_product = arr[0]*arr[1]\n    max_pair = []\n    # Iterate through the array elements\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            product = arr[i]*arr[j]\n            if(product > max_product):\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    return max_pair\n",
        "num_ids": 123
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return max(arr[0]*arr[1],arr[-1]*arr[-2])\n",
        "num_ids": 33
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # m = arr[0]\n    # for i in range(len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         if arr[i] * arr[j] > m:\n    #             m = arr[i] * arr[j]\n    # return m\n    max1 = max2 = -999\n    min1 = min2 = 999\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max(max1*max2, min1*min2)\n",
        "num_ids": 223
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize variable\n    Tuple = Input\n    dct = {}\n    # Loop through list\n    for i in Tuple:\n        # If element is in dict, increment the value of it\n        if i[0] in dct:\n            dct[i[0]] += 1\n        else:\n            # If not, add it to dict with value 1\n            dct[i[0]] = 1\n    # Loop through dict\n    for k, v in dct.items():\n        # If value is greater than 1, there is more than one tuple contains that first element\n        if v > 1:\n            # Return first element\n            print(k)\n            return k\n",
        "num_ids": 159
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for i in range(0, len(Input)):\n        if result.get(Input[i][0]) == None:\n            result[Input[i][0]] = []\n            result[Input[i][0]].append(Input[i])\n        else:\n            result[Input[i][0]].append(Input[i])\n    return result\n",
        "num_ids": 91
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element_list = []\n    for tup in Input:\n        first_element_list.append(tup[0])\n    print(first_element_list)\n    first_element_list = set(first_element_list)\n    print(first_element_list)\n    if len(first_element_list) > 0:\n        print(first_element_list.pop())\n        \n",
        "num_ids": 98
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output = []\n    for item in Input:\n        if not output:\n            output.append(item)\n        else:\n            for i in range(len(output)):\n                if set(output[i]) == set(item):\n                    output[i] = list(set(output[i] + item))\n                    break\n                else:\n                    output.append(item)\n                    break\n    return output\n",
        "num_ids": 98
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Result = set()\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Result.add(Input[i][0])\n                Result.add(Input[j][0])\n                break\n    return Result\n",
        "num_ids": 83
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    n = len(Input)\n    for i in range(n):\n        for j in range(i+1,n):\n            if Input[i][0] == Input[j][0] and Input[i] not in result:\n                result.append(Input[i])\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group = []\n    for i in Input:\n        group.append(i[0])\n    print(group)\n",
        "num_ids": 30
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print(\"Tuple: \",Input)\n    Input_List = list(Input)\n    l_1 = Input_List[0][0]\n    l_2 = Input_List[1][0]\n    l_3 = Input_List[2][0]\n    print(\"List: \",Input_List)\n    if l_1 == l_2:\n        if l_2 == l_3:\n            print(\"All elements are equal\")\n        else:\n            print(\"First element is: \", l_1)\n    elif l_1 == l_3:\n        print(\"First element is: \", l_1)\n    elif l_2 == l_3:\n        print(\"First element is: \", l_1)\n    else:\n        print(\"First element is: \",l_1)\n    return\n",
        "num_ids": 193
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = [] \n    if Input == []: \n        return Output \n    else: \n        for i in range(len(Input)): \n            if Input[i] not in Output: \n                Output.append(Input[i]) \n        return Output \n",
        "num_ids": 67
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return len(set([x[0] for x in Input]))\n",
        "num_ids": 19
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #start writing your code here\n    Max = 0\n    for i in lst:\n        if len(i) > Max:\n            Max = len(i)\n    for i in lst:\n        if len(i) == Max:\n            return i\n        \nprint(Find_Max([\"geeks\", \"for\", \"geeks\"]))\nprint(Find_Max([\"cat\", \"camel\", \"dog\", \"geek\"]))\nprint(Find_Max([\"geek\", \"geeks\"]))\nprint(Find_Max([\"for\", \"geeks\"])",
        "num_ids": 136
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    a = []\n    for i in lst:\n        a.append(len(i))\n    a.sort()\n    print a[-1]\n",
        "num_ids": 39
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)>0:\n        max_len = len(lst[0])\n        for i in range(1,len(lst)):\n            if max_len < len(lst[i]):\n                max_len = len(lst[i])\n        return max_len\n    else:\n        return 0\n",
        "num_ids": 83
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Find the length of list \n    lst_len = len(lst) \n    # Initialize max \n    max = 0\n    # Iterate the list \n    for i in range(lst_len): \n        # If the length of list is greater than max, \n        # then update max \n        if len(lst[i]) > max: \n            max = len(lst[i]) \n    # Return the maximum element of list \n    return max\n",
        "num_ids": 118
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if max<len(i):\n            max=len(i)\n            max_str=i\n    return max_str\n",
        "num_ids": 45
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n    for item in lst:\n        if len(item) == max_len:\n            return item\n",
        "num_ids": 63
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    max = len(lst[0])\n    for x in lst:\n        if len(x) > max:\n            max = len(x)\n",
        "num_ids": 41
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > m:\n            m = len(lst[i])\n            ans = lst[i]\n    return ans\n",
        "num_ids": 57
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1 = list(set(lst))\n    lst1.sort()\n    lst1 = lst1[::-1]\n    return lst1[0]\n",
        "num_ids": 46
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_str = i\n    print(max_str)\n",
        "num_ids": 54
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(list1)\n    return sum(list(map(lambda x: round(x,2), list1))) * len(list1)\n",
        "num_ids": 36
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i],1)\n        sum += list1[i]\n    print(sum*len(list1))\n",
        "num_ids": 57
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(round(sum(list1),2)*len(list1))\n    return sum(list1)*len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    return total * len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(f\"Length of list: {len(list1)}\")\n    for i in list1:\n        print(round(i))\n    print(f\"Total sum: {round(sum(list1))}\")\n    print(f\"Total multiplied by length: {round(sum(list1)*len(list1))}\")\n",
        "num_ids": 80
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    sum = 0\n",
        "num_ids": 14
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        round(i, 2)\n        sum += i\n    print(sum * len(list1))\n",
        "num_ids": 39
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list=0\n    for i in list1:\n        sum_list+=round(i)\n    return sum_list*len(list1)\nprint(round_and_sum([1.234, 5.678, 9.101]))\nprint(round_and_sum([1.53, 8.176, 4.365]))\nprint(round_and_sum([1.01, 2.223, 3.665]))\nprint(round_and_sum([1.4356, 2.6546, 4.9188]))\n",
        "num_ids": 130
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in list1:\n        i = round(i)\n        sum1 += i\n    print(sum1*len(list1))\n    \nround_and_sum([1.1, 2.2, 3.3, 4.4, 5.5])\nround_and_sum([2.2, 4.4, 6.6, 8.8, 10.10])\n",
        "num_ids": 98
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        total += round(item)\n    print(total*len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            sum = sum + i*i*i\n    return sum\n    \n    \ndef cube_Sum_optimized(n):\n    '''\n    Write a python program to find the cube sum of first n even natural numbers.\n    '''\n    return n*n*n*(n/2)\n    \n    \ndef cube_Sum_Optimized(n):\n    '''\n    Write a python program to find the cube sum of first n even natural numbers.\n    '''\n    return n*(n+1)*(n+2)/6\n    \n    \ndef sum_digit(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    sum = 0\n    n = int(n)\n    while(n > 0):\n        sum = sum + n % 10\n        n = n//10\n    return sum\n    \n    \ndef sum_digit_Optimized(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        sum = sum + int(str(n)[i])\n    return sum\n    \n    \ndef sum_digit_Faster(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \n    \ndef sum_digit_faster(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return sum(map(int, str(n)))\n    \n    \ndef sum_digit_FasterOptimized(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    sum = 0\n    while(n > 0):\n        sum = sum + n % 10\n        n = n//10\n    return sum\n    \n    \ndef sum_Digits_Optimized(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        sum = sum + int(str(n)[i])\n    return sum\n    \n    \ndef sum_Digits_Faster(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \n    \ndef sum_Digits_FasterOptimized(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return sum(map(int, str(n)))\n    \n    \ndef sum_Digits_FasterOptimized2(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    sum = 0\n    while(n > 0):\n        sum = sum + int(n % 10)\n        n = n//10\n    return sum\n    \n    \ndef list_string(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return [int(i) for i in str(n)]\n    \n    \ndef list_string_Optimized(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return [int(i) for i in str(n)]\n    \n    \ndef list_string_Optimized2(n):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return list(map(int, str(n)))\n    \n    \ndef string_to_list(s):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return [int(i) for i in s]\n    \n    \ndef string_to_list_Optimized(s):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return [int(i) for i in s]\n    \n    \ndef string_to_list_Optimized2(s):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return list(map(int, s))\n    \n    \ndef list_to_string(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized2(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized3(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return ''.join(map(str, l))\n    \n    \ndef list_to_string_Optimized4(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized5(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized6(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized7(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized8(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized9(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized10(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized11(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized12(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized13(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized14(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Optimized15(l):\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    return \"\".join(map(str, l))\n    \n    \ndef list_to_string_Op",
        "num_ids": 27
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i%2 == 0):\n            sum += i**3\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubeSum=0\n    for i in range(n):\n        if(i%2==0):\n            cubeSum+=i**3\n    return cubeSum\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        if(i%2==0):\n            sum=sum+i*i*i\n    return sum\nn=int(input(\"Enter the number of natural numbers : \"))\nprint(\"The cube sum of first\",n,\"natural numbers is :\",cube_Sum(n))\n",
        "num_ids": 81
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return n * (3 * n - 1)\n    \n    \ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of digits of a given number n.\n    '''\n    # base case\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(int(n / 10))\n        \n        \ndef print_concat(str):\n    '''\n    Write a python function to print the concatenated string in a specific way\n    '''\n    # base case\n    if len(str) == 1:\n        print(str)\n    else:\n        # recursive call\n        print(str[0], end=\"\")\n        print_concat(str[1:])\n        \n        \ndef print_all_paths(root):\n    '''\n    Write a python function to print all possible paths from the root to leaf in a binary tree.\n    '''\n    if root is None:\n        return\n    \n    if root.left is None and root.right is None:\n        return\n    \n    print_all_paths(root.left)\n    print_all_paths(root.right)\n    \n    \ndef print_all_paths_recur(root, path=[]):\n    '''\n    Write a python function to print all possible paths from the root to leaf in a binary tree using recursion.\n    '''\n    # base case\n    if root is None:\n        return\n    \n    if root.left is None and root.right is None:\n        path.append(root.data)\n        print(path)\n    \n    if root.left:\n        print_all_paths_recur(root.left, path)\n        \n    if root.right:\n        print_all_paths_recur(root.right, path)\n        \n        \ndef get_in_order_successor(root, node):\n    '''\n    Write a python function to find the inorder successor of a given node in a binary tree.\n    '''\n    if root is None:\n        return\n    \n    # if the given node has a right subtree, return the leftmost node in the right subtree\n    if node.right:\n        node = node.right\n        while node.left:\n            node = node.left\n        return node\n    \n    # otherwise, start traversing the tree from the root\n    while root:\n        # if node is on the left side of the given node, return its parent\n        if root.data < node.data:\n            return root\n        root = root.left\n        \n        \ndef print_all_paths_using_stack(root):\n    '''\n    Write a python function to print all possible paths from the root to leaf in a binary tree using stack.\n    '''\n    stack = []\n    path = []\n    stack.append(root)\n    \n    while stack:\n        curr = stack.pop()\n        if curr.right:\n            stack.append(curr.right)\n        if curr.left:\n            stack.append(curr.left)\n        path.append(curr.data)\n        \n    print(path)\n    \n    \ndef path_sum(root, sum_):\n    '''\n    Write a python function to find the sum of all the nodes along the path from root to leaf in a binary tree.\n    '''\n    # base case\n    if root is None:\n        return 0\n        \n    if root.left is None and root.right is None:\n        if sum_ == root.data:\n            return 1\n        else:\n            return 0\n            \n    return path_sum(root.left, sum_ - root.data) + path_sum(root.right, sum_ - root.data)\n        \n        \ndef path_sum_recur(root, sum_, path=[]):\n    '''\n    Write a python function to find the sum of all the nodes along the path from root to leaf in a binary tree using recursion.\n    '''\n    # base case\n    if root is None:\n        return 0\n        \n    if root.left is None and root.right is None:\n        if sum_ == root.data:\n            path.append(root.data)\n            print(path)\n            return 1\n        else:\n            return 0\n        \n    return path_sum_recur(root.left, sum_ - root.data, path) + path_sum_recur(root.right, sum_ - root.data, path)\n        \n        \ndef get_max_path(root):\n    '''\n    Write a python function to find the maximum sum of the path from root to leaf in a binary tree.\n    '''\n    # base case\n    if root is None:\n        return -sys.maxsize\n        \n    # return max of the max path sum of the left subtree\n    left_sum = get_max_path(root.left)\n    # return max of the max path sum of the right subtree\n    right_sum = get_max_path(root.right)\n    \n    # initialize the current path with the root\n    curr_path = root.data\n    # initialize the current sum\n    curr_sum = curr_path\n    \n    # if root is leaf\n    if root.left is None and root.right is None:\n        # return root\n        return root.data\n        \n    # if root is not a leaf, return max of left path and right path\n    if curr_sum < left_sum + curr_path:\n        curr_sum = left_sum + curr_path\n    if curr_sum < right_sum + curr_path:\n        curr_sum = right_sum + curr_path\n        \n    return curr_sum\n        \n        \ndef get_max_path_recur(root):\n    '''\n    Write a python function to find the maximum sum of the path from root to leaf in a binary tree using recursion.\n    '''\n    # base case\n    if root is None:\n        return -sys.maxsize\n        \n    # return max of the max path sum of the left subtree\n    left_sum = get_max_path_recur(root.left)\n    # return max of the max path sum of the right subtree\n    right_sum = get_max_path_recur(root.right)\n    \n    # initialize the current path with the root\n    curr_path = root.data\n    \n    # if root is leaf\n    if root.left is None and root.right is None:\n        # return root\n        return root.data\n        \n    # if root is not a leaf, return max of left path and right path\n    if curr_path < left_sum + root.data:\n        curr_path = left_sum + root.data\n    if curr_path < right_sum + root.data:\n        curr_path = right_sum + root.data\n        \n    return curr_path\n        \n        \ndef get_tree_height(root):\n    '''\n    Write a python function to find the height of a binary tree.\n    '''\n    # base case\n    if root is None:\n        return 0\n    \n    # return the max of left and right subtree\n    return 1 + max(get_tree_height(root.left), get_tree_height(root.right))\n    \n    \ndef get_tree_height_recur(root):\n    '''\n    Write a python function to find the height of a binary tree using recursion.\n    '''\n    # base case\n    if root is None:\n        return 0\n        \n    # return the max of left and right subtree\n    return 1 + max(get_tree_height_recur(root.left), get_tree_height_recur(root.right))\n        \n        \ndef get_depth_of_node(root, key):\n    '''\n    Write a python function to find the depth of a given node in a binary tree.\n    '''\n    # base case\n    if root is None:\n        return -1\n    if root.data == key:\n        return 0\n    \n    # if the given key is smaller, search the left subtree\n    if root.data > key:\n        return 1 + get_depth_of_node(root.left, key)\n    \n    # if the given key is greater, search the right subtree\n    else:\n        return ",
        "num_ids": 101
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    l = [] \n    for i in range(1, n+1): \n        if i%2 == 0: \n            l.append(i**3) \n    return sum(l) \n",
        "num_ids": 51
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(i%2==0):\n            sum=sum+i**3\n    return sum\nprint(cube_Sum(6))\n",
        "num_ids": 52
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            total = total + i**3\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(0,n):\n        cube_sum = cube_sum + (i * i * i)\n    return cube_sum\n",
        "num_ids": 43
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    return cube_sum\n",
        "num_ids": 37
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print(\"\\n****** TUPLE ******\")\n    if test_tup is None:\n        return\n    for i in range(len(test_tup)):\n        print(f\"Tuple element {i+1}: {test_tup[i]}\")\n    print(\"\\n****** TUPLE ******\")\n",
        "num_ids": 81
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = (\"I\", \"am\", \"a\", \"teacher\")\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + \"-\"\n    print(result)\n",
        "num_ids": 54
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return_str = ''\n    for i in range(len(test_tup)):\n        return_str += test_tup[i]\n        if i!= len(test_tup) - 1:\n            return_str += ', '\n    return return_str\n",
        "num_ids": 67
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #We can also use the join function in python\n    #However join function requires that all elements in the sequence are string\n    #We can use the map function to convert each element into string\n    #join function also requires that the delimiter is a string not a tuple\n    #Converting each element into string using map and join\n    print(''.join(map(str, test_tup)))\n",
        "num_ids": 90
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return deli.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return str(test_tup[0]) + \"_\" + str(test_tup[1]) + \"_\" + str(test_tup[2])\n",
        "num_ids": 40
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    average = sum/n\n    return average\n",
        "num_ids": 38
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n<=0:\n        print(\"Please enter a valid input\")\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        avg = sum/n\n        print(\"Average of cubes of first\",n,\"natural numbers is\",round(avg, 2))\n",
        "num_ids": 80
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # write your code here\n    s = 0\n    for i in range(1, n + 1):\n        s += i * i * i\n    return s / n\n    \ndef find_Average_Of_Square(n):  \n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    # write your code here\n    s = 0\n    for i in range(1, n + 1):\n        s += i * i\n    return s / n\n    \ndef find_Average_Of_Quadratic(a, b, n):  \n    '''\n    Write a python function to find the average of n first terms of quadratic\n    equation a * x^2 + b * x.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += a * (i * i) + b * i\n    return s / n\n    \ndef find_Average_Of_Hyperbolic(a, n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of hyperbolic function.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += (a / i)\n    return s / n\n    \ndef find_Average_Of_Factorial(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of factorial.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.factorial(i)\n    return s / n\n    \ndef find_Average_Of_Logarithmic(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of logarithmic.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.log(i, math.e)\n    return s / n\n    \ndef find_Average_Of_Natural_Logarithm(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of natural logarithm.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.log(i)\n    return s / n\n    \ndef find_Average_Of_Exponential(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of exponential.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.exp(i)\n    return s / n\n    \ndef find_Average_Of_Sine(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of sine.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.sin(i)\n    return s / n\n    \ndef find_Average_Of_Cosine(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of cosine.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.cos(i)\n    return s / n\n    \ndef find_Average_Of_Tangent(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of tangent.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.tan(i)\n    return s / n\n    \ndef find_Average_Of_Secant(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of secant.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += 1 / math.cos(i)\n    return s / n\n    \ndef find_Average_Of_Cosecant(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of cosecant.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += 1 / math.sin(i)\n    return s / n\n    \ndef find_Average_Of_Cotangent(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of cotangent.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += 1 / math.tan(i)\n    return s / n\n    \ndef find_Average_Of_Cotangent_Inverse(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of cotangent inverse.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += 1 / math.atan(i)\n    return s / n\n    \ndef find_Average_Of_Sine_Inverse(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of sine inverse.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += 1 / math.asin(i)\n    return s / n\n    \ndef find_Average_Of_Cosine_Inverse(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of cosine inverse.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += 1 / math.acos(i)\n    return s / n\n    \ndef find_Average_Of_Tangent_Inverse(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of tangent inverse.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += 1 / math.atan(i)\n    return s / n\n    \ndef find_Average_Of_Hyperbolic_Sine(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of hyperbolic sine.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.sinh(i)\n    return s / n\n    \ndef find_Average_Of_Hyperbolic_Cosine(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of hyperbolic cosine.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.cosh(i)\n    return s / n\n    \ndef find_Average_Of_Hyperbolic_Tangent(n):  \n    '''\n    Write a python function to find the average of the first n natural numbers.\n    Then apply the formula to find the average of hyperbolic tangent.\n    '''\n    # write your code here\n    s = 0\n    for i in range(n + 1):\n        s += math.tanh(i)\n    return s / n\n    \ndef find_Average",
        "num_ids": 48
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = (n*(n+1)*(n+2))/6\n    print(\"average of cubes of first n natural numbers:\",total)\n",
        "num_ids": 37
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    x=1\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+x**3\n        x+=1\n    return sum/n\n    \ndef find_Number_Of_Occurences_Of_Digit_In_A_String(string,digit):\n    '''\n    Write a Python function to get the count of number of times that a given digit occurs in the given string.\n    '''\n    count=0\n    for i in string:\n        if i==digit:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += pow(i,3)\n    avg = sum/n\n    return avg\n",
        "num_ids": 42
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**3)\n    return (sum/n)\n",
        "num_ids": 39
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print(\"The average of cubes of first n natural numbers is \", end=\"\")\n    sum=0\n    for i in range(1, n+1):\n        sum=sum+i**3\n    avg=sum//n\n    print(avg)\n    \n    \nfind_Average_Of_Cube(5)    \n",
        "num_ids": 78
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Average_Of_Cube = lambda n: n*(n+1)*(2*n+1) / 6  # Lambda Function\n    Average_Of_Cube = lambda n: sum([i**3 for i in range(1,n+1)])/n  # lambda function\n    return(Average_Of_Cube(n))\n",
        "num_ids": 81
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return n ** 3\n",
        "num_ids": 8
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(sub[len(sub)-1] for sub in test_tuple)\n",
        "num_ids": 23
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = [x[-1] for x in test_tuple]\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print('Extract Rear : ', test_tuple[1])\n",
        "num_ids": 18
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        new_tuple += (i[::-1][::-1],)\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if (list1[i] == x):\n            count = count+1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count+=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        j = 0\n        while j < len(list1[i]): \n            if list1[i][j] == x: \n                count += 1\n            j += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i] == x and list1[j] == x:\n                count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    def is_odd(num):\n        if num % 2 == 0:\n            return False\n        else:\n            return True\n    return filter(is_odd, nums)\n",
        "num_ids": 44
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num % 2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = [num for num in nums if num % 2!= 0]\n    return filtered_nums\n",
        "num_ids": 32
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num%2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n",
        "num_ids": 45
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            nums.remove(num)\n    return nums\n",
        "num_ids": 33
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = list(filter(lambda n: n % 2, nums))\n    return odd_nums\n",
        "num_ids": 30
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_nums.append(i)\n    return odd_nums\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]))",
        "num_ids": 50
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_numbers.append(i)\n    return odd_numbers\n",
        "num_ids": 46
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    d = dt[2]\n    m = dt[1]\n    y = dt[0]\n    \n    return '{}-{}-{}'.format(d,m,y)\n    \n",
        "num_ids": 65
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    dt = \"-\".join(dt[::-1])\n    return dt\n",
        "num_ids": 32
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.split(r'[\\s]',dt)\n    year = date_format[0]\n    month = date_format[1]\n    day = date_format[2]\n    date_format = day + '-' + month + '-' + year\n    return date_format\n",
        "num_ids": 74
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dd = dt[8:10]\n    mm = dt[5:7]\n    yyyy = dt[0:4]\n    d = \"{}-{}-{}\".format(dd,mm,yyyy)\n    return d\n",
        "num_ids": 62
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list = dt.split('-')\n    return '-'.join(dt_list[::-1])\n",
        "num_ids": 31
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    match = pattern.search(dt)\n    if match is None:\n        return None\n    else:\n        # print(match.group())\n        match = match.group().split('-')\n        # print(match)\n        new_date = []\n        for i in match:\n            if len(i) == 2:\n                new_date.append('0' + i)\n            else:\n                new_date.append(i)\n        # print(new_date)\n        new_date = '-'.join(new_date)\n        return new_date\n",
        "num_ids": 165
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = str(dt)\n    dt = dt.split('-')\n    if len(dt[0]) == 4:\n        dt[0] = dt[0][2:]\n        dt[1] = dt[1][:2]\n        dt[2] = dt[2][:2]\n        dt = '-'.join(dt)\n    elif len(dt[0]) == 2:\n        dt[0] = '0' + dt[0]\n        dt[1] = dt[1][:2]\n        dt[2] = dt[2][:2]\n        dt = '-'.join(dt)\n    return dt\n",
        "num_ids": 163
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime(\"%d-%m-%Y\")\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:] + \"-\" + dt[5:7]+ \"-\" + dt[:4]\n",
        "num_ids": 30
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) > 1:\n        gap = len(my_list)//2\n        while gap > 0:\n            for i in range(gap, len(my_list)):\n                temp = my_list[i]\n                j = i\n                while j >= gap and my_list[j-gap] > temp:\n                    my_list[j] = my_list[j-gap]\n                    j -= gap\n                my_list[j] = temp\n            gap //= 2\n    return my_list\n",
        "num_ids": 126
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # step 1: Start from the first sublist.\n    list_length = len(my_list)\n    gap = list_length // 2\n    while gap > 0:\n        for start in range(gap):\n            # step 2: Traverse through all the sublists, and\n            # insert the element in its right position\n            for i in range(start, list_length, gap):\n                temp = my_list[i]\n                j = i\n                while j >= gap and my_list[j-gap] > temp:\n                    my_list[j] = my_list[j-gap]\n                    j -= gap\n                my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 163
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Get the length of the list\n    length = len(my_list)\n    # Initialize gap\n    gap = length//2\n",
        "num_ids": 34
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # TODO: Implement this function\n",
        "num_ids": 11
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = int(n / 2)\n",
        "num_ids": 22
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(i&j for i,j in zip(test_tup1, test_tup2)))\n",
        "num_ids": 31
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(i for i in test_tup1 if i in test_tup2), tuple(i for i in test_tup1 if i not in test_tup2))\n",
        "num_ids": 48
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([test_tup1[i] and test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([tuple([i, j]) for i, j in list(zip(test_tup1, test_tup2)) if i == j])\n",
        "num_ids": 40
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n",
        "num_ids": 41
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [ i and j for i, j in zip(test_tup1, test_tup2)]\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    return [ i or j for i, j in zip(test_tup1, test_tup2)]\n",
        "num_ids": 28
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 for tup1, tup2 in zip(test_tup1, test_tup2) if tup1 and tup2)\n",
        "num_ids": 41
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_min = -b/(2*a)\n    x_max = -(b**2 - 4*a*c)/(4*a)\n",
        "num_ids": 38
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # print('a = ', a)\n    # print('b = ', b)\n    # print('c = ', c)\n    \n    # Determine the discriminant of the parabola:\n    discriminant = b**2 - 4*a*c\n    # print('discriminant = ', discriminant)\n    \n    # Determine the X-coordinate of the directrix:\n    x = ( -b + discriminant**0.5 ) / ( 2 * a )\n    # print('x = ', x)\n    \n    # Find the y-coordinate of the directrix:\n    y = a*( x**2 ) + b*x + c\n    # print('y = ', y)\n    \n    # Return the directrix:\n    return (x, y)\n",
        "num_ids": 187
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # x = ax^2 + bx + c\n    # x = ax^2 + ax - b\n    # x = ax^2 - ax + b\n    # x = ax^2 + bx + c\n    # x = ax^2 - 2ac\n    # x = ax^2 - 2ax - ac\n    # a = 1\n    # b = 1\n    # c = 1\n    import math\n    x_1 = -b/2\n    x_2 = math.sqrt((b**2 - 4*a*c)/2*a**2)\n    #x_2 = (-b + math.sqrt((b**2 - 4*a*c)))/(2*a)\n    x_3 = (-b - math.sqrt((b**2 - 4*a*c)))/(2*a)\n",
        "num_ids": 196
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if c == 0:\n        return None\n    elif a == 0:\n        return (-c)/b\n    else:\n        return -b/(2*a)\n",
        "num_ids": 42
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b*b - 4*a*c\n    if d == 0: \n        return -b / (2*a)\n    elif d > 0:\n        return (-b - d**0.5) / (2*a), (-b + d**0.5) / (2*a)\n    else:\n        return \"No solution\"\n",
        "num_ids": 86
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # ax**2 + bx + c = 0\n    # a = 1\n    # b = -4\n    # c = -4\n    # Directrix of the parabola:\n    # x = (-b +/- (b**2 - 4*a*c)**0.5)/(2*a)\n    x_d = (-b + ((b**2)-(4*a*c))**0.5)/(2*a)\n    y_d = x_d*x_d*a\n    return x_d, y_d\n",
        "num_ids": 131
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = Symbol('x')\n    y = a*x**2+b*x+c\n    \n    def f(x):\n        return a*x**2+b*x+c\n    \n    d = ((f(a)-f(b))/(a-b))\n    \n    sol = solve(d*x**2+y,x)\n    \n    return list(sol)[0]\n    \n    \n",
        "num_ids": 101
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((a**2)*(c**2))/(4*b)\n",
        "num_ids": 20
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a == 0):\n        if (b == 0):\n            if (c == 0):\n                return [0, 0]\n            else:\n                return []\n        else:\n            x0 = -c/b\n            return [x0, x0]\n    else:\n        # Compute the discriminant\n        d = b*b - 4*a*c\n        if d >= 0:\n            # Compute two different roots\n            root1 = (-b + sqrt(d)) / (2*a)\n            root2 = (-b - sqrt(d)) / (2*a)\n            return [root1, root2]\n        else:\n            # Compute one double root (the discriminant is negative)\n            sqrtD = sqrt(-d)\n            x1 = (-b + sqrtD) / (2*a)\n            x2 = root1 = (-b - sqrtD) / (2*a)\n            return [x1, x2]\n        \ndef parabola_focus(a, b, c):\n    '''\n    Write a function to find the focus of a parabola.\n    '''\n    if (a == 0):\n        if (b == 0):\n            if (c == 0):\n                return [[0, 0]]\n            else:\n                return []\n        else:\n            x0 = -c/b\n            return [[x0, x0]]\n    else:\n        # Compute the discriminant\n        d = b*b - 4*a*c\n        if d >= 0:\n            # Compute two different roots\n            root1 = (-b + sqrt(d)) / (2*a)\n            root2 = (-b - sqrt(d)) / (2*a)\n            return [[root1, root2]]\n        else:\n            # Compute one double root (the discriminant is negative)\n            sqrtD = sqrt(-d)\n            x1 = (-b + sqrtD) / (2*a)\n            x2 = root1 = (-b - sqrtD) / (2*a)\n            return [[x1, x2]]\n",
        "num_ids": 232
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return set(list1).intersection(list2)\n",
        "num_ids": 16
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [6, 7, 8, 9, 10]\n    for x in list1:\n        if x in list2:\n            return True\n        else:\n            return False\n",
        "num_ids": 62
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # your code here\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    try:\n        result = False\n        for i in list1:\n            for j in list2:\n                if i == j:\n                    result = True\n        return result\n    except Exception as err:\n        print('Error: {0}'.format(err))\n    finally:\n        print('Func common_element finished.')\n",
        "num_ids": 81
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n",
        "num_ids": 29
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return set(list1) & set(list2)\n",
        "num_ids": 16
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2)*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2\n    \ndef median_of_medians(arr):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_list = sorted(arr)\n    if len(median_list)%2 == 0:\n        median = median_list[len(median_list)//2]\n    else:\n        median = median_list[len(median_list)//2]\n    return median\n    \ndef median_of_medians_quicksort(arr):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if len(arr) == 1:\n        return arr\n    elif len(arr)%2 == 0:\n        median_list = sorted(arr[:len(arr)//2]) + sorted(arr[len(arr)//2:])\n    else:\n        median_list = sorted(arr[:len(arr)//2+1]) + sorted(arr[len(arr)//2+1:])\n    return median_of_medians(median_list)\n    \ndef median_of_medians_heapsort(arr):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_list = []\n    for i in range(len(arr)):\n        median_list.append(arr[i])\n        if i%2 == 0:\n            median_list.sort()\n        else:\n            median_list.sort(reverse=True)\n    return median_list[len(median_list)//2]\n",
        "num_ids": 87
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2)/2\n    return median * height\n",
        "num_ids": 21
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(\"The median length of a trapezium is: \" + str(((base1+base2)/2)*height))\n",
        "num_ids": 31
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1>=base2:\n        print(\"Invalid base!\")\n    elif height<=0:\n        print(\"Invalid height!\")\n    else:\n        print(base1)\n        print(base2)\n        print(height)\n        print(\"Area: \" + str((base1+base2)*height/2))\n        print(\"Perimeter: \" + str((base1+base2)*2+height))\n        print(\"Median: \" + str(base1+base2))\n",
        "num_ids": 119
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = ((base1+base2)/2)*height\n    return area\n    #or area = height*((base1+base2)/2)\n    #or area = height*(base1+base2) / 2\n",
        "num_ids": 54
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] >= number:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return len([i for i in arr if i > number]) == len(arr)\n",
        "num_ids": 22
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return(any(number>ele for ele in arr))\n",
        "num_ids": 16
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if number < x:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return any([x > number for x in arr])\n",
        "num_ids": 15
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_arr = []\n    for i in arr:\n        if i > number:\n            greater_than_arr.append(i)\n    return greater_than_arr\n",
        "num_ids": 47
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if max(arr) < number:\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab+\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n",
        "num_ids": 41
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    if re.search(pattern, text):\n        return 'Found a+b'\n    else:\n        return 'No match'\n",
        "num_ids": 43
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat = re.compile(r'ab+')\n    if re.search(pat, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "num_ids": 46
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # pattern = re.compile(r'ab*')\n    # pattern = re.compile(r'ab{1,}')\n    # pattern = re.compile(r'ab{0,}')\n    # pattern = re.compile(r'ab{0,1}')\n    # pattern = re.compile(r'ab{1,3}')\n    # pattern = re.compile(r'ab{1,3}?')\n    # pattern = re.compile(r'ab{3,}')\n    # pattern = re.compile(r'ab{3,}?')\n    # pattern = re.compile(r'ab{3,5}')\n    # pattern = re.compile(r'ab{3,5}?')\n    # pattern = re.compile(r'ab{5,}')\n    # pattern = re.compile(r'ab{5,}?')\n    # pattern = re.compile(r'ab{,5}')\n    # pattern = re.compile(r'ab{,5}?')\n    # pattern = re.compile(r'ab{,1}')\n    # pattern = re.compile(r'ab{,1}?')\n    # pattern = re.compile(r'ab{,3}')\n    # pattern = re.compile(r'ab{,3}?')\n    # pattern = re.compile(r'ab{,5}')\n    # pattern = re.compile(r'ab{,5}?')\n    # pattern = re.compile(r'ab{,}')\n    # pattern = re.compile(r'ab{,}?')\n",
        "num_ids": 407
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.strip()\n    # [ab*] = a followed by zero or more b's\n    # [ab+] = a followed by one or more b's\n    pattern = '[ab*]'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall('ab*',text)\n",
        "num_ids": 15
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '^a.*(b)+$'\n    result = re.search(pattern, text)\n    return result!= None\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's not preceded by a c.\n    '''\n    pattern = '^a(?!c).*(b)+$'\n    result = re.search(pattern, text)\n    return result!= None\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more non-empty b's.\n    '''\n    pattern = '^a.*(b)+$'\n    result = re.search(pattern, text)\n    return result!= None\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b's.\n    '''\n    pattern = '^a.*bbb.*$'\n    result = re.search(pattern, text)\n    return result!= None\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's not at the start or end of the string.\n    '''\n    pattern = '^a.*?b.*?b+$'\n    result = re.search(pattern, text)\n    return result!= None\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's not more than two times in a row.\n    '''\n    pattern = '^a.*(b){2,}.*$'\n    result = re.search(pattern, text)\n    return result!= None\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more digits not more than once in a row.\n    '''\n    pattern = '^a.*?(0|1)+$'\n    result = re.search(pattern, text)\n    return result!= None\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more lowercase letters.\n    '''\n    pattern = '^a.*?[a-z]+$'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "num_ids": 37
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "num_ids": 29
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    p = re.findall('ab+', text)\n    return''.join(p)\n",
        "num_ids": 24
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'a(.*)b',text)\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'a(.*)b',text)\n",
        "num_ids": 19
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Please add your code here\n    return int(str(n)[-1])\n",
        "num_ids": 22
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit=n%10\n    return last_digit",
        "num_ids": 16
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    def get_digit(number,digit):\n        return number // 10**digit % 10\n    if n < 0:\n        return -1 * get_digit(abs(n),0)\n    return get_digit(n,0)\ndef greater(a,b) :\n    '''\n    Write a python function to find the greatest of 2 numbers.\n    '''\n    if a > b :\n        return a\n    return b\ndef is_even(n) :\n    '''\n    Write a python function to check if a number is even.\n    '''\n    return n % 2 == 0\ndef less(a,b) :\n    '''\n    Write a python function to find the least of 2 numbers.\n    '''\n    if a < b :\n        return a\n    return b\ndef is_greater(a,b) :\n    '''\n    Write a python function to check if a number is greater than another number.\n    '''\n    if a > b :\n        return True\n    return False\ndef num_divisors(n) :\n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\ndef sum_divisors(n) :\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            sum += i\n    return sum\ndef main() :\n    '''\n    Write a python function to find the sum of squares of the first N natural numbers.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        sum = 0\n        for i in range(1,n+1) :\n            sum += (i**2)\n        print('Sum of squares of first N natural numbers is :',sum)\ndef main1() :\n    '''\n    Write a python function to find the prime numbers between 1 to N.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        for i in range(1,n+1) :\n            if i > 1 :\n                for j in range(2,i) :\n                    if i % j == 0 :\n                        break\n                else :\n                    print(i)\ndef main2() :\n    '''\n    Write a python function to find the sum of the cubes of the first N natural numbers.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        sum = 0\n        for i in range(1,n+1) :\n            sum += (i**3)\n        print('Sum of cubes of first N natural numbers is :',sum)\ndef main3() :\n    '''\n    Write a python function to find the difference between the sum of the squares of the first N natural numbers and the sum of cubes of the first N natural numbers.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        sum_square = 0\n        sum_cube = 0\n        for i in range(1,n+1) :\n            sum_square += (i**2)\n            sum_cube += (i**3)\n        print('Difference between the sum of squares of first N natural numbers and the sum of cubes of first N natural numbers is :',sum_square - sum_cube)\ndef main4() :\n    '''\n    Write a python function to print the first N natural numbers in reverse order.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        for i in range(n,0,-1) :\n            print(i)\ndef main5() :\n    '''\n    Write a python function to print the first N odd natural numbers in reverse order.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        for i in range(n,0,-2) :\n            print(i)\ndef main6() :\n    '''\n    Write a python function to print the Fibonacci series from 1 to N numbers.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    elif n <= 2 :\n        print('Fibonacci series is :',1)\n    else :\n        f1 = 1\n        f2 = 1\n        print('Fibonacci series is :',f1,f2)\n        for i in range(3,n+1) :\n            f3 = f1 + f2\n            print(f3)\n            f1 = f2\n            f2 = f3\ndef main7() :\n    '''\n    Write a python function to print the first N odd natural numbers in ascending order.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        for i in range(1,n+1,2) :\n            print(i)\ndef main8() :\n    '''\n    Write a python function to find the first N numbers which are divisible by both 5 and 7.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        count = 0\n        for i in range(n) :\n            if i % 5 == 0 and i % 7 == 0 :\n                count += 1\n                print(i)\n        print('The number of first N numbers which are divisible by both 5 and 7 are :',count)\ndef main9() :\n    '''\n    Write a python function to find the first N numbers which are divisible by either 5 or 7.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        count = 0\n        for i in range(n) :\n            if i % 5 == 0 or i % 7 == 0 :\n                count += 1\n                print(i)\n        print('The number of first N numbers which are divisible by either 5 or 7 are :',count)\ndef main10() :\n    '''\n    Write a python function to find the sum of first N numbers which are divisible by 3.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        count = 0\n        for i in range(n) :\n            if i % 3 == 0 :\n                count += i\n        print('The sum of first N numbers which are divisible by 3 is :',count)\ndef main11() :\n    '''\n    Write a python function to find the sum of first N numbers which are divisible by either 3 or 5.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        count = 0\n        for i in range(n) :\n            if i % 3 == 0 or i % 5 == 0 :\n                count += i\n        print('The sum of first N numbers which are divisible by either 3 or 5 is :',count)\ndef main12() :\n    '''\n    Write a python function to find the sum of first N numbers which are divisible by either 3 or 5 and 7.\n    '''\n    n = int(input('Enter the value of N : '))\n    if n < 0 :\n        print('Invalid input')\n    else :\n        count = 0\n        for i in range(n) :\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0 :\n                count += i\n        print('The sum of first N numbers which are divisible by either 3 or 5 or 7 is :',count)\ndef main13() :\n    '''\n    Write a python function to find the sum of first N numbers which are divisible by any of the give",
        "num_ids": 24
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    a = 10 ** n - 1\n    return a % 10\n",
        "num_ids": 17
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while (n!= 0) :\n        n = n//10\n    return n\n    \ndef last_digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    if n < 0:\n        n *= -1\n    return last_Digit(n)\n    \ndef last_digit_f(n, m) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return last_digit(n) % m\n",
        "num_ids": 13
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    if n > 0 :\n        return n % 10\n    return -1 * last_Digit(abs(n))\n",
        "num_ids": 41
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #Type your code here\n    #Return the last digit of the number\n    return n%10\n",
        "num_ids": 25
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l=[]\n    for x in list1:\n        if x<0:\n            l.append(x)\n    return l\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for num in list1:\n        if num < 0:\n            list2.append(num)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negatives = []\n    for i in list1:\n        if i < 0:\n            negatives.append(i)\n    return negatives\n",
        "num_ids": 36
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    lst = []\n    for i in list1:\n        if i < 0:\n            lst.append(i)\n    return lst\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums=[]\n    for i in list1:\n        if i<0:\n            neg_nums.append(i)\n    return neg_nums\n",
        "num_ids": 43
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = list(filter(lambda x:x<0,list1))\n    return new_list\n    \nprint(neg_nos([12,-7,5,64,-14]))\nprint(neg_nos([12,14,-95,3]))\n",
        "num_ids": 64
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for x in range(0,len(list1)):\n        if(list1[x]<0):\n            print(list1[x])\n    \n    \n    \ndef fib(n):\n    '''\n    Write a Python function to calculate the Fibonacci series.\n    '''\n    a = 0\n    b = 1\n    if n == 1:\n        print(a)\n    elif n == 2:\n        print(a,b)\n    else:\n        print(a,b, end=' ')\n        for x in range(2,n):\n            c = a+b\n            a = b\n            b = c\n            print(c, end=' ')\n            \n            \ndef fib2(n):\n    '''\n    Write a Python function to calculate the Fibonacci series.\n    '''\n    a = 0\n    b = 1\n    if n == 1:\n        return a\n    elif n == 2:\n        return a,b\n    else:\n        return a,b, end=' '\n        for x in range(2,n):\n            c = a+b\n            a = b\n            b = c\n            return c, end=' '\n    \ndef main():\n    print(\"-Negative numbers in the list-\")\n    neg_nos([1,2,3,4,5,6,7,8,9])\n    print(\"\\n-Fibonacci Series-\")\n    n = int(input(\"Enter the number of terms : \"))\n    fib(n)\n    n2 = int(input(\"Enter the number of terms : \"))\n    print(fib2(n2))\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 213
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for ch in str1:\n        if ch in string.ascii_lowercase:\n            return chr(ord(ch) - ord('a') + ord('A'))\n        elif ch in string.ascii_uppercase:\n            return chr(ord(ch) - ord('A') + ord('a'))\n    return str1\n    ",
        "num_ids": 88
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return ''\n    else:\n        str1 = list(str1)\n        i = 0\n        while i < len(str1):\n            if str1[i] % 2:\n                str1.pop(i)\n                continue\n            else:\n                i += 1\n        return ''.join(str1)\n",
        "num_ids": 84
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if i not in \"13579\":\n            result += i\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if ord(i) % 2 == 1:\n            str1 = str1.replace(i, '')\n    return str1\n",
        "num_ids": 41
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # remove odd characters\n    str_clean = ''\n    for char in str1:\n        if char % 2 == 0:\n            str_clean += char\n    return str_clean\n",
        "num_ids": 45
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\"o\",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([x for x in str1 if x%2==0])\n",
        "num_ids": 22
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.translate(None, '13579')\n",
        "num_ids": 17
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\n",
        "num_ids": 11
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in str1:\n        if i in 'abcdefghijklmnopqrstuvwxyz':\n            result = result + i\n    print(result)\n",
        "num_ids": 49
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_bidirectional = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == '(' or test_list[i][j] == ')':\n                count_bidirectional += 1\n    return count_bidirectional\n",
        "num_ids": 85
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    freq = {}\n    for ele in test_list:\n        freq[ele] = freq.get(ele, 0) + 1\n",
        "num_ids": 36
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return [tuple for tuple in test_list if tuple[0] == tuple[1]]\n",
        "num_ids": 24
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list.sort()\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1][::-1]:\n            count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # create tuples of the item and next item\n    # initialize variables to keep track of indexes\n    counter = 0\n    i = 0\n    j = len(test_list) - 1\n",
        "num_ids": 46
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list) - 1):\n        if test_list[i] < test_list[i + 1] and test_list[i + 1] > test_list[i + 2]:\n            count = count + 1\n        elif test_list[i] > test_list[i + 1] and test_list[i + 1] < test_list[i + 2]:\n            count = count + 1\n        else:\n            continue\n",
        "num_ids": 119
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for element in test_list:\n        count += 2 if isinstance(element, (list, tuple)) else 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for idx, item in enumerate(test_list):\n        if item % 2 == 0 and (test_list[idx+1] == (item + 1) or test_list[idx+1] == (item - 1)):\n            count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = [('x', 'y'), ('y', 'x'), ('y', 'z'), ('z', 'y')]\n    \n    print(\"Original list:\", test_list)\n    \n    x_pairs = 0\n    y_pairs = 0\n    z_pairs = 0\n    \n    for i in range(len(test_list)):\n        if test_list[i][0] == 'x':\n            x_pairs += 1\n        elif test_list[i][0] == 'y':\n            y_pairs += 1\n        elif test_list[i][0] == 'z':\n            z_pairs += 1\n        \n    print(\"Number of ('x', 'y') pairs:\", x_pairs)\n    print(\"Number of ('y', 'x') pairs:\", y_pairs)\n    print(\"Number of ('y', 'z') pairs:\", z_pairs)\n    \ncount_bidirectional(test_list)\n    \n    \ndef count_bidirectional_2(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = [('x', 'y'), ('y', 'x'), ('y', 'z'), ('z', 'y')]\n    \n    print(\"Original list:\", test_list)\n    \n    x_pairs = 0\n    y_pairs = 0\n    z_pairs = 0\n    \n    for i in range(len(test_list)):\n        if test_list[i][0] == 'x':\n            x_pairs += 1\n        elif test_list[i][0] == 'y':\n            y_pairs += 1\n        elif test_list[i][0] == 'z':\n            z_pairs += 1\n    \n    return x_pairs, y_pairs, z_pairs\n    \nprint(count_bidirectional_2(test_list))\n    \n    \n    ",
        "num_ids": 202
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    L.sort()\n    return int(''.join([str(n) for n in L]))\n",
        "num_ids": 28
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return \"\".join(map(str,L))\n",
        "num_ids": 15
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # list_len = len(L)\n    # L = ''.join(str(L))\n    # L = int(L)\n    return int(''.join(map(str, L)))\n",
        "num_ids": 49
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #return int(\"\".join(map(str,L)))\n    return int(\"\".join(map(lambda x: str(x),L)))\n",
        "num_ids": 36
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #create a new list\n    new_list=[]\n    #check the length of the list\n    if len(L) == 0:\n        return 0\n    #set an index and check the range of the list\n    else:\n        for i in range(len(L)):\n            #add the single element to the new list\n            new_list.append(L[i])\n            #check the range of the new list\n            if i<len(L)-1:\n                #the last element is a single element\n                if L[i+1]==\" \":\n                    new_list.append(\" \")\n    #join the list of single elements into a single number\n    string=str(new_list[0])\n    for i in range(len(new_list)-1):\n        string=string+str(new_list[i+1])\n    return int(string)\n",
        "num_ids": 208
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(L))\n",
        "num_ids": 12
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = \"\"\n    for x in L:\n        s += str(x)\n    return int(s)\n",
        "num_ids": 29
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n",
        "num_ids": 16
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    matches = re.findall(r'\\bADVERB\\b', text)\n    if matches:\n        matches = [m.start() for m in matches]\n        return matches\n    else:\n        return 'No matches found.'\n",
        "num_ids": 60
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    for i in range(len(text)):\n        if text[i] == ',':\n            adverb_position = i\n            return adverb_position\n",
        "num_ids": 40
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos = re.compile('\\w+ly')\n    text_words = text.split(' ')\n    adverbs = []\n    for i in range(len(text_words)):\n        if pos.match(text_words[i]):\n            adverbs.append(text_words[i])\n    if len(adverbs) == 0:\n        print('No adverbs found!')\n    else:\n        print('{} adverbs found:'.format(len(adverbs)))\n        print(' '.join(adverbs))\n    return len(adverbs)\n",
        "num_ids": 136
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\b)*\\b(?:[A-Z][a-z]+|[A-Z]+(?:\\'[A-Z]+)?)\\b'\n    # regex = r'\\b(?:[a-z]+(?:\\'[a-z]+)?\\",
        "num_ids": 2008
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r\"\\s*(([Aa]dverbs?|[Aa]d|[Aa]ll right|[Aa]ll right|[Aa]ny(thing)?|[Aa]ny(thing)?|[Aa]ny(place)?|[Aa]nywhere|[Aa]n?[Tt]hey|[Tt]he|[Tt]his|[Tt]hat|[Tt]hose|[Tt]hose|[Tt]hose|[Tt]hem|[Tt]hem|[Tt]heir|[Tt]heirs|[Tt]hems?|[Tt]hemselves|[Tt]hen|[Tt]hen(thing)?|[Tt]hen(place)?|[Tt]hen(any(thing)?|any(place)?))\\s+(\\w+)\\s*\"\n    res = re.findall(regex, text)\n    print(res)\n    # for m in re.finditer(regex, text):\n    #     print(m.groups())\n",
        "num_ids": 263
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result_dict = {}\n    first_adverb = re.compile(r'[Aa]ddverb', re.IGNORECASE)\n    for m in first_adverb.finditer(text):\n        result_dict[m.start()] = m.group()\n    return result_dict\n",
        "num_ids": 74
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    adverbs = []\n    # Find adverbs\n    for match in re.finditer(r'\\w+ly', text):\n        adverbs.append(match.group())\n    print(\"The adverbs in the given sentence are: \",adverbs)\n",
        "num_ids": 66
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    l=[]\n    m=re.search(\"[A-Za-z]*[ ]*[A-Za-z]*[ ]*adverb[ ]*[A-Za-z]*[ ]*[A-Za-z]*[ ]*[A-Za-z]*\",text)\n    n=re.search(\"[A-Za-z]*[ ]*[A-Za-z]*[ ]*adverb[ ]*[A-Za-z]*[ ]*[A-Za-z]*[ ]*[A-Za-z]*\",text)\n    if m==None:\n        return l\n    if n==None:\n        return l\n    if m.start()<n.start():\n        l.append((m.start(),m.end()))\n        l.append((n.start(),n.end()))\n        return l\n    else:\n        l.append((n.start(),n.end()))\n        l.append((m.start(),m.end()))\n        return l\n",
        "num_ids": 259
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # split the text into list of words\n    words = text.split()\n    adverb_position = {}\n    for i, word in enumerate(words):\n        # find the index of first letter in the word to determine if it is an adverb\n        first_letter_index = re.search(r'^[a-zA-Z]', word).start()\n        if first_letter_index!= 0:\n            # add the index of word to adverb_position dict if it is an adverb\n            adverb_position[i] = word\n    return adverb_position\n",
        "num_ids": 138
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    for i, chunk in enumerate(text.split()):\n        if chunk in ['I', 'am', 'a', 'an', 'is', 'was', 'were', 'do', 'does', 'did', 'can', 'could','should', 'would']:\n            return i, chunk\n",
        "num_ids": 70
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # First create a variable to track the surface area.\n    sa = 0\n    # Then, use the formula given in the problem to solve for the surface area.\n    sa = 6 * (l ** 2)\n    # Return the surface area.\n    return sa\n",
        "num_ids": 62
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l*l*6\n    return a\n",
        "num_ids": 15
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # length = input('Enter the side length of the cube: ')\n    # # print(l)\n    # print(type(l))\n    # print(l.isdigit())\n    # print(int(length))\n    # if l.isdigit() == False:\n    #     print(\"Input is not valid. Only int is allowed. Exiting now...\")\n    #     return\n",
        "num_ids": 95
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s1 = 6*l**2\n    s2 = l**2\n    s = s1 + s2\n    return s\n    \n",
        "num_ids": 35
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    def cube_area(l):\n        return 6 * (l**2)\n    \n    return cube_area(l)\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube of a given size.\n    '''\n    \n    def cube_volume(l):\n        return l**3\n    \n    return cube_volume(l)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere of a given radius.\n    '''\n    \n    def sphere_volume(r):\n        return 4/3 * math.pi * (r**3)\n    \n    return sphere_volume(r)\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    \n    def sphere_surfacearea(r):\n        return 4 * math.pi * (r**2)\n    \n    return sphere_surfacearea(r)\n    \ndef test_surfacearea_cube():\n    assert surfacearea_cube(5) == 190, \"Should be 190\"\n    assert surfacearea_cube(3) == 94, \"Should be 94\"\n    assert surfacearea_cube(4) == 108, \"Should be 108\"\n    \ndef test_surfacearea_sphere():\n    assert surfacearea_sphere(4) == 257, \"Should be 257\"\n    assert surfacearea_sphere(5) == 314, \"Should be 314\"\n    assert surfacearea_sphere(6) == 434, \"Should be 434\"\n",
        "num_ids": 176
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    length = len(nums)\n    positive_num = 0\n    for i in nums:\n        if i > 0:\n            positive_num += 1\n    return positive_num/length\n",
        "num_ids": 48
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n    return positive_count / total_count\n",
        "num_ids": 52
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += 1\n    return total / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = sum(num for num in nums if num > 0)\n    return positive / len(nums)\n",
        "num_ids": 29
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_count += 1\n    return (pos_count/len(nums))\n",
        "num_ids": 53
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums_len = len(nums)\n    nums_positive = 0\n    for i in range(nums_len):\n        if nums[i] >= 0:\n            nums_positive += 1\n",
        "num_ids": 53
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # new array to store the values of the original array\n    pos_nums = array('i',[])\n",
        "num_ids": 28
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in list1:\n        if i < 0 and i > max:\n            max = i\n    return max\n    #return -1\nlist1 = [10, -80, 23, -90, 56, -79, 56, 32, 89, -56]\nprint(\"Largest negative number is:\",largest_neg(list1))\n",
        "num_ids": 88
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    max1 = list1[-1]\n    return max1\n",
        "num_ids": 25
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest_num:\n                largest_num = list1[i]\n    return largest_num\n",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    max_neg = list1[0]\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            max_neg = list1[i]\n    return max_neg\n    \nlist1 = [-8, -1, -6, -3, -2, -4, -9]\nprint(\"Largest negative number is: \", largest_neg(list1))",
        "num_ids": 107
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if not list1:\n        return 'list is empty'\n    else:\n        for i in list1:\n            if i < 0:\n                return i\n",
        "num_ids": 40
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = list(map(int, list1)) \n    return -1 * min(list1) \n",
        "num_ids": 29
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_of_neg_nums = []\n    for item in list1:\n        if item < 0:\n            list_of_neg_nums.append(item)\n    return(max(list_of_neg_nums))\n",
        "num_ids": 59
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    if len(list2)>0:\n        return max(list2)\n    else:\n        return -1\n",
        "num_ids": 60
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(n for n in list1 if n < 0)\n",
        "num_ids": 18
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    print(\"The largest negative number in the list is: \", end=\"\")\n    for i in range(len(list1)): \n        if(list1[i] < 0 and list1[i] > list1[i-1]): \n            print(list1[i], end=\"\") \n    return 0\n",
        "num_ids": 77
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return map(lambda x: tuple(x[:K]), test_list)\n",
        "num_ids": 21
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # print(test_list)\n    trim_list = list()\n    for i in range(len(test_list)):\n        if i < K:\n            trim_list.append(test_list[i])\n        elif i >= len(test_list)-K:\n            trim_list.append(test_list[i])\n        else:\n            trim_list.append(test_list[i][K:])\n    return trim_list\n",
        "num_ids": 113
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = list()\n    for tup in test_list:\n        tup = tup[:K]\n        result.append(tup)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        if len(tup) < K:\n            continue\n        elif len(tup) == K:\n            new_list.append(tup)\n        else:\n            new_list.append(tup[:K])\n    return new_list\n",
        "num_ids": 80
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        if len(i) >= K:\n            new_list.append(i[:K])\n        else:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 61
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n    \ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list",
        "num_ids": 5
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for t in test_list:\n        if len(t)>= K:\n            new_list.append(t[0:K])\n    return new_list\n",
        "num_ids": 49
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i,tuple in enumerate(test_list):\n        test_list[i] = tuple[:K]\n    return test_list\n",
        "num_ids": 37
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        if len(i) > K:\n            new_list.append(tuple(i[:K]))\n    return new_list\n",
        "num_ids": 51
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [test_list[i] for i in range(len(test_list)) if i < K]\n",
        "num_ids": 28
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result = result + (test_tup1[i]*test_tup2[i],)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] * test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # result = ()\n    # for i in range(0,len(test_tup1)):\n    #     result += (test_tup1[i] * test_tup2[i], )\n    result = tuple(test_tup1[i] * test_tup2[i] for i in range(0,len(test_tup1)))\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n",
        "num_ids": 40
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mul = 1\n    for i in range(0,len(test_tup1)):\n        mul = mul * test_tup1[i] * test_tup2[i]\n    return mul\n",
        "num_ids": 54
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += (test_tup1[i] * test_tup2[i],)\n",
        "num_ids": 54
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #approach 1\n    \n    multiplied_list = []\n    for i in range(len(test_tup1)):\n        multiplied_list.append(test_tup1[i]*test_tup2[i])\n    return tuple(multiplied_list)\n",
        "num_ids": 70
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mult_tup = ()\n    for i in range(len(test_tup1)):\n        mult_tup = mult_tup + ((test_tup1[i] * test_tup2[i]),)\n    return mult_tup\n",
        "num_ids": 64
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    result = 0\n    for i in tup: \n        if i in lst: \n            result += 1\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in lst: \n        occ = tup.count(i) \n        print (\"Occurrence of\", i, \"is :\", occ) \n",
        "num_ids": 40
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur_dict = Counter(tup) \n    lst = set(lst) \n    return [occur_dict[ele] for ele in lst] \n",
        "num_ids": 44
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for el in lst: \n        if el in tup: \n            count = count + 1\n    return count \n",
        "num_ids": 37
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = [tup]\n    dct = dict(Counter(lst)) \n    return dct\n",
        "num_ids": 29
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(set(lst))\n    c = Counter(lst)\n    for key, val in tup:\n        if key in c:\n            print(\"Occurance of\", key, \"is:\", c[key])\n        else:\n            print(\"The element\", key, \"is not in the tuple\")\n",
        "num_ids": 78
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in lst: \n        cnt = 0\n        for j in tup: \n            if (i == j): \n                cnt = cnt + 1\n        print (\"%d : %d\"%(i,cnt))\n",
        "num_ids": 61
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(lst)\n    for item in tup: \n        print (\"{} occurs {} times\".format(item, counts[item])) \n",
        "num_ids": 41
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Initializing the dictionary \n    # counter = dict() \n    # counter = {tup[0]: 0} \n    # for item in lst: \n    #     counter[tup[0]] += lst.count(item) \n    return Counter(tup[0]).most_common(len(tup[0]))\n",
        "num_ids": 84
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # return dict(Counter(lst)) \n    \n    return dict(Counter(tup).most_common())\n",
        "num_ids": 30
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for i in nums:\n        cube_nums.append(i ** 3)\n    return cube_nums\n",
        "num_ids": 38
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x: pow(x, 3), nums))\n",
        "num_ids": 21
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = list()\n    for num in nums:\n        result.append(num ** 3)\n    return result\nprint(cube_nums([1, 2, 3, 4, 5]))\n",
        "num_ids": 49
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i ** 3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n",
        "num_ids": 35
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n        print(i)\n    return sum\nprint(cal_sum(50))\n",
        "num_ids": 42
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n): \n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\ndef cal_prod(n):\n    '''\n    Write a function to calculate the product of perrin numbers.\n    '''\n    return (cal_sum(n))*(cal_sum(n+1))\ndef cal_perrin(n):\n    '''\n    Write a function to calculate the perrin number of an input.\n    '''\n    return cal_prod(n)/cal_sum(n)\ndef cal_perrin_list(n):\n    '''\n    Write a function to calculate the perrin numbers of an input.\n    '''\n    return [cal_perrin(i) for i in range(1,n+1)]\ndef cal_perrin_odd_list(n):\n    '''\n    Write a function to calculate the perrin numbers of an input.\n    '''\n    return [cal_perrin(i) for i in range(1,n+1) if i%2!=0]\ndef cal_perrin_even_list(n):\n    '''\n    Write a function to calculate the perrin numbers of an input.\n    '''\n    return [cal_perrin(i) for i in range(1,n+1) if i%2==0]\n",
        "num_ids": 31
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 1: \n        return 0\n    else: \n        return n + cal_sum(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n",
        "num_ids": 27
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += perrin(i)\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    return 0\n",
        "num_ids": 8
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 2 * cal_sum(n - 1) - 2 * cal_sum(n - 2)\n",
        "num_ids": 53
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_l = []\n    for i in range(0, len(l)):\n        new_l.append(l[i][0:l[i].index(str) + len(str)])\n    return new_l\n",
        "num_ids": 57
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(l):\n        new_list.append(str[i*5:(i*5)+5])\n    return new_list\n",
        "num_ids": 44
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i for i in str if len(i) == l]\n",
        "num_ids": 19
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(len(l)):\n        if len(l[i]) >= l:\n            output.append(l[i][0:l])\n    return output\n",
        "num_ids": 49
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # We can use the string slicing [:] to extract specified string size.\n    # This will create a new list and return it.\n    return [str[i:i+l] for i in range(0, len(str), l)]\n    \ndef check_string_length(list_of_strings, length):\n    '''\n    Write a function to check if each string in a given list is of specified length.\n    '''\n    # Let's assume that we have a list of string values.\n    # Then, we can iterate through the list using a for loop.\n    # The for loop will iterate through the list of strings.\n    # Let's assume that the strings are of variable length.\n    # To do this, we can use the string slicing [:] to extract strings of specified length.\n    # This will create a new list and return it.\n    # We can check if the extracted strings are of specified length by using the len() function.\n    # We can use the boolean variable check to track if the string length matches the length specified.\n    # We can use the boolean variable check to track if the list is empty.\n    # We can use the boolean variable check to track if the list is of specified length.\n    # Let's assume that the length of the strings is not known beforehand.\n    # We can use a while loop to iterate through the list until we find the length of the string.\n    # We can use the boolean variable check to track if the length of the string is found.\n    # Once the length of the string is found, we can use the string slicing [:] to extract the strings.\n    # This will create a new list and return it.\n    # We can then use the len() function to check if the extracted string length matches the length specified.\n    # We can use the boolean variable check to track if the string length matches the length specified.\n    # We can use the boolean variable check to track if the list is empty.\n    # We can use the boolean variable check to track if the list is of specified length.\n    # Let's assume that the length of the strings is not known beforehand.\n    # We can use a while loop to iterate through the list until we find the length of the string.\n    # We can use the boolean variable check to track if the length of the string is found.\n    # Once the length of the string is found, we can use the string slicing [:] to extract the strings.\n    # This will create a new list and return it.\n    # We can then use the len() function to check if the extracted string length matches the length specified.\n    # We can use the boolean variable check to track if the string length matches the length specified.\n    # We can use the boolean variable check to track if the list is empty.\n    # We can use the boolean variable check to track if the list is of specified length.\n    check = False\n    empty = True\n    while not check:\n        while empty:\n            if len(list_of_strings) == 0:\n                print(\"List is empty\")\n                return False\n            else:\n                empty = False\n                print(\"List is not empty\")\n        for i in range(0, len(list_of_strings)):\n            if len(list_of_strings[i]) == length:\n                print(list_of_strings[i], \"is of specified length\")\n                return True\n            else:\n                print(\"Extracted strings:\", extract_string(list_of_strings[i], length))\n                print(\"Length of extracted strings:\", len(extract_string(list_of_strings[i], length)))\n                print(\"Length of specified string:\", length)\n                check = False\n                break\n                return False\n",
        "num_ids": 741
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # temp = []\n    # for i in str:\n    #     temp.append(i[:l])\n    # print(temp)\n    return [i[:l] for i in str]\n",
        "num_ids": 50
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    ret = []\n    for i in l:\n        if len(i) > l:\n            ret.append(i[:l])\n        else:\n            ret.append(i)\n    return ret\n",
        "num_ids": 51
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    assert len(str) >= l, 'list length can not be less than length'\n    output = []\n    for i in range(0, len(str), l):\n        output.append(str[i:i + l])\n    return output\n",
        "num_ids": 60
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(str[0:l])\n    return str[0:l]\n",
        "num_ids": 21
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n",
        "num_ids": 14
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return \"\".join(text1.split())\n",
        "num_ids": 14
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = ''\n    for i in text1:\n        if i.isalpha():\n            new_text += i\n    return new_text\n",
        "num_ids": 38
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_string = text1.replace(\" \",\"\")\n    return new_string\n",
        "num_ids": 22
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.split()\n    return ''.join(text1)\n",
        "num_ids": 22
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    print(\"remove_whitespaces(\\\"\"\"%s\"\"\")\" %text1)\n    return text1.replace(\" \", \"\")\nremove_whitespaces(\"\"\"\\tThis is a sample string\nwhich has some whitespaces.\\t\n            I want to remove whitespaces from this string.\\t\n            How can I do it?\"\"\")\n",
        "num_ids": 82
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    text1=str(text1)\n    text1 = re.sub('\\s+', '', text1)\n    return text1\n",
        "num_ids": 37
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    whitespace = re.compile(r'\\s+')\n    return whitespace.sub(' ', text1).strip()\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return int(actual_cost) - int(sale_amount)\n",
        "num_ids": 18
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(sale_amount >= actual_cost):\n        return 0\n    else:\n        return sale_amount-actual_cost\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return round(actual_cost-sale_amount,2)\n",
        "num_ids": 17
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount - actual_cost if actual_cost > sale_amount else 0\n",
        "num_ids": 22
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        loss=sale_amount-actual_cost\n        return loss\n    else:\n        return 0\n        ",
        "num_ids": 37
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if (actual_cost < sale_amount): \n        return sale_amount - actual_cost \n    else: \n        return 0\n",
        "num_ids": 35
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0): \n        return 1\n    return n % 2 + sumofFactors(math.floor(n / 2)) \n  \ndef solution(n):\n    '''\n    Returns the sum of the only perfect square number(s) for a given positive integer n, \n    where n is squarefree.\n",
        "num_ids": 32
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,int(n/2)+1) :\n        if(n%i==0) :\n            if(i%2==0) :\n                sum=sum+i\n    return sum\ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check whether a number is a perfect square or not.\n    '''\n    #initialize the left and right to their values\n    left=0\n    right=n\n    while left<=right:\n        mid=(left+right)/2\n        if mid**2==n:\n            return True\n        elif mid**2<n:\n            left=mid+1\n        else:\n            right=mid-1\n    return False\ndef countSetBits(n) : \n    '''\n    Write a python function to count the set bits of a given number.\n    '''\n    count=0\n    while n!=0:\n        if n%2==1:\n            count=count+1\n        n=n/2\n    return count\ndef getPrime(n) : \n    '''\n    Write a python function to get the nth prime number.\n    '''\n    count=0\n    number=3\n    while count<n:\n        if isPrime(number)==True:\n            count=count+1\n        number=number+2\n    return number-2\ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef getPrimeNumbers(n):\n    '''\n    Write a python function to get the nth prime number.\n    '''\n    count=0\n    number=3\n    primeList=[]\n    while count<n:\n        if isPrime(number)==True:\n            count=count+1\n            primeList.append(number)\n        number=number+2\n    return primeList[n-1]\ndef find_GCD(x, y): \n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    while(y):\n        x, y = y, x % y \n    return x \ndef find_LCM(x, y): \n    '''\n    Write a python function to find the lcm of two numbers.\n    '''\n    lcm = (x*y)//find_GCD(x,y)\n    return lcm\ndef find_factors(n): \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    factor=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factor.append(i)\n    return factor\ndef find_sum_of_divisors(n): \n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    sum=0\n    factor=find_factors(n)\n    for i in factor:\n        sum=sum+i\n    return sum\ndef find_sum_of_divisors_rec(n): \n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+find_sum_of_divisors_rec(n-1)\ndef find_hcf(x, y): \n    '''\n    Write a python function to find the hcf of two numbers.\n    '''\n    if x>y: \n        small=y \n    else: \n        small=x \n    for i in range(1,small+1):\n        if((x%i==0) and (y%i==0)):\n            hcf=i \n    return hcf \ndef find_lcm(x, y): \n    '''\n    Write a python function to find the lcm of two numbers.\n    '''\n    lcm = (x*y)//find_hcf(x,y)\n    return lcm \ndef find_lcm_rec(x, y): \n    '''\n    Write a python function to find the lcm of two numbers.\n    '''\n    if x>y: \n        greater=x \n    else: \n        greater=y \n    while(True):\n        if((greater%x==0) and (greater%y==0)):\n            lcm=greater\n            break\n        greater+=1\n    return lcm \ndef find_factors_rec(n): \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    if n==0:\n        return []\n    else:\n        return [1]+find_factors_rec(n-1)\ndef find_hcf_rec(x, y): \n    '''\n    Write a python function to find the hcf of two numbers.\n    '''\n    if x==0:\n        return y \n    if y==0:\n        return x \n    if x>y: \n        small=y \n    else: \n        small=x \n    for i in range(1,small+1):\n        if((x%i==0) and (y%i==0)):\n            hcf=i \n    return hcf \ndef find_exponent(x, y): \n    '''\n    Write a python function to find the exponent of a number.\n    '''\n    count=0\n    while x%y==0:\n        count+=1\n        x=x/y\n    return count \ndef find_fibonacci_number_again(n): \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n<0:\n        print(\"Incorrect input\")\n    # First Fibonacci number is 0 \n    elif n==0:\n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1:\n        return 1\n    else:\n        return find_fibonacci_number_again(n-1)+find_fibonacci_number_again(n-2)\ndef find_fibonacci_number(n): \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    n1=0\n    n2=1\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return n1\n    elif n==1:\n        return n2\n    else:\n        for i in range(2,n+1):\n            nth=n1+n2\n            n1=n2\n            n2=nth\n        return nth\ndef isPalindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp=n\n    rev=0\n    while(n>0):\n        dig=n%10\n        rev=rev*10+dig\n        n=n/10\n    if(temp==rev):\n        return True\n    else:\n        return False\ndef find_largest_palindrome(n): \n    '''\n    Write a python function to find the largest palindrome number smaller than a given number.\n    '''\n    while(True):\n        temp=n\n        rev=0\n        while(temp>0):\n            dig=temp%10\n            rev=rev*10+dig\n            temp=temp/10\n        if(isPalindrome(rev)==True):\n            return rev\n        else:\n            n=n-1\ndef isArmstrong(n): \n    '''\n    Write a python function to check whether a number is armstrong or not.\n    '''\n    temp=n\n    order=len(str(n))\n    sum1=0\n    while(temp>0):\n        dig=temp%10\n        sum1=sum1+math.pow(dig,order)\n        temp=temp/10\n    if(sum1==n):\n        return True\n    else:\n        return False\ndef find_armstrong_numbers(n)",
        "num_ids": 94
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum+=i\n            else:\n                sum+=n/i\n    return sum\n",
        "num_ids": 66
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i + n/i\n    return sum\n",
        "num_ids": 56
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1 : \n        return 0\n    return n + sumofFactors(n - 2)\ndef countDivisibles(n,k) :\n    '''\n    Write a function to count the number of numbers in a range, that are divisible by k.\n    '''\n    if n == k :\n        return 1\n    if n < k :\n        return 0\n    return countDivisibles(n-k,k) + countDivisibles(n,k+1)\ndef isPrime(n) : \n    '''\n    Write a function to return True if n is prime, and False if n is not prime.\n    '''\n    if n == 1 :\n        return False\n    if n == 2 :\n        return True\n    if n > 2 and n % 2 == 0 :\n        return False\n    maxdivisor = int(math.sqrt(n))\n    for factor in range(3,maxdivisor+1,2) :\n        if n % factor == 0 :\n            return False\n    return True\ndef isDivisibleBy(n,k) :\n    '''\n    Write a function to check if n is divisible by k.\n    '''\n    if n == 0 :\n        return False\n    if n % k == 0 :\n        return True\n    return isDivisibleBy(n-k,k)\ndef factorial(n) : \n    '''\n    Write a function to return n!\n    '''\n    if n == 1 :\n        return 1\n    return n * factorial(n-1)\ndef sumOfDigits(n) : \n    '''\n    Write a function to return the sum of the digits in the number n.\n    '''\n    return sumOfDigits(n//10) + n % 10\ndef sumOfDigitsRecursive(n) : \n    '''\n    Write a function to return the sum of the digits in the number n.\n    '''\n    if n < 10 :\n        return n\n    return n%10 + sumOfDigitsRecursive(n//10)\ndef sumOfDigitsIterative(n) : \n    '''\n    Write a function to return the sum of the digits in the number n.\n    '''\n    sum = 0\n    while n!= 0 :\n        sum = sum + n%10\n        n = n//10\n    return sum\ndef fibonacci(n) : \n    '''\n    Write a function that takes in a number n and returns the nth Fibonacci number. \n    Note that the Fibonacci sequence starts with zero index.\n    '''\n    if n == 0 or n == 1 :\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\ndef factorialIterative(n) : \n    '''\n    Write an iterative function to return the factorial of the number n.\n    '''\n    result = 1\n    for i in range(2,n+1) :\n        result = result * i\n    return result\ndef factorialRecursive(n) : \n    '''\n    Write a recursive function to return the factorial of the number n.\n    '''\n    if n == 1 :\n        return 1\n    return n * factorialRecursive(n-1)\ndef fibonacciIterative(n) : \n    '''\n    Write an iterative function to return the nth Fibonacci number.\n    '''\n    if n == 0 :\n        return 0\n    f0, f1 = 0, 1\n    for i in range(2,n+1) :\n        result = f0 + f1\n        f0 = f1\n        f1 = result\n    return result\ndef fibonacciRecursive(n) : \n    '''\n    Write a recursive function to return the nth Fibonacci number.\n    '''\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    return fibonacciRecursive(n-1) + fibonacciRecursive(n-2)\ndef palindrome(n) : \n    '''\n    Write a function to determine if the number n is palindrome.\n    '''\n    if n < 0 :\n        return False\n    m = n\n    r = 0\n    while m > 0 :\n        r = 10 * r + m % 10\n        m = m // 10\n    return r == n\ndef palindromeIterative(n) : \n    '''\n    Write a function to determine if the number n is palindrome.\n    '''\n    if n < 0 :\n        return False\n    r = 0\n    t = n\n    while t!= 0 :\n        r = r * 10 + t%10\n        t = t//10\n    return r == n\ndef decimalToBinary(n) : \n    '''\n    Write a function to convert decimal number to binary.\n    '''\n    if n == 0 :\n        return 0\n    return n % 2 + 10 * decimalToBinary(int(n/2))\ndef decimalToBinaryIterative(n) : \n    '''\n    Write a function to convert decimal number to binary.\n    '''\n    if n == 0 :\n        return 0\n    r = 0\n    t = 1\n    while n!= 0 :\n        r = r * 10 + n%2\n        t = t * 10\n        n = n // 2\n    return r\ndef binaryToDecimal(n) : \n    '''\n    Write a function to convert binary number to decimal.\n    '''\n    if n == 0 :\n        return 0\n    return int(n) + 10 * binaryToDecimal(int(n/10))\ndef binaryToDecimalIterative(n) : \n    '''\n    Write a function to convert binary number to decimal.\n    '''\n    r = 0\n    t = 0\n    for i in range(len(n)) :\n        r = r + int(n[-(i+1)])*(2**t)\n        t = t + 1\n    return r\ndef baseConversion(n,b1,b2) : \n    '''\n    Write a function to convert from base b1 to base b2.\n    '''\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n == 0 :\n        return 0\n    return baseConversion((n-1) // b2, b2, b1) + digits[(n-1) % b2]\ndef baseConversionIterative(n,b1,b2) : \n    '''\n    Write a function to convert from base b1 to base b2.\n    '''\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n == 0 :\n        return 0\n    r = ''\n    while n > 0 :\n        r = digits[n%b2] + r\n        n = n // b2\n    return r\ndef isPowerOfTwo(n) : \n    '''\n    Write a function to check if the number is a power of two.\n    '''\n    if n == 0 :\n        return False\n    if n == 1 :\n        return True\n    if n % 2 == 0 :\n        return isPowerOfTwo(n//2)\n    return False\ndef isPowerOfTwoIterative(n) : \n    '''\n    Write a function to check if the number is a power of two.\n    '''\n    if n == 0 :\n        return False\n    if n == 1 :\n        return True\n    while n!= 1 :\n        if n % 2 == 0 :\n            n = n//2\n        else :\n            return False\n    return True\ndef reverse(n) : \n    '''\n    Write a function to return the reverse of the number.\n    '''\n    rev = 0\n    while n!= 0 :\n        rev = 10 * rev + n%10\n        n = n // 10\n    return rev\ndef reverseIterative(n) : \n    '''\n    Write a function to return the reverse of the number.\n    '''\n    rev = 0\n    while n!= 0 :\n        rev = rev * 10 + n%10\n        n = n // 10\n    return rev\ndef binaryGcd(a,b) : \n    '''\n    Write a function to find the gcd of two binary numbers.\n    '''\n    if b == 0 :\n        return a\n",
        "num_ids": 13
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = [1]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0 : \n            factors.append(i)\n            factors.append(n//i)\n    sum = 0\n    for j in factors : \n        if j % 2 == 0 : \n            sum += j\n    return sum\n",
        "num_ids": 93
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1,n) if n%i == 0 and i%2 == 0])\n",
        "num_ids": 30
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if n % i == 0:\n            sum += i \n    return sum \n",
        "num_ids": 40
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            # If number is divisible by i \n            # then we have to check if i is a factor \n            # or not \n            if (i % 2 == 0): \n                sum += i \n            else: \n                sum += n / i \n    return sum\n",
        "num_ids": 106
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            s += i\n            if i * i!= n:\n                s += n / i\n    return int(s)\n",
        "num_ids": 64
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # return re.findall('[A-Za-z]*z[A-Za-z]*',text)\n    return re.findall('[A-Za-z]*z[A-Za-z]*', text)\n",
        "num_ids": 63
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('[A-Za-z]*z[A-Za-z]*', text)\n",
        "num_ids": 31
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #pattern = re.compile(r'[^\\w\\s]z[^\\w\\s]')\n    #print(pattern.search(text).group())\n    \n    #return bool(re.search(r'[^\\w\\s]z[^\\w\\s]', text))\n    print('text_match_wordz: {}'.format(re.search(r'z.*z', text, re.IGNORECASE)))\n",
        "num_ids": 109
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = r\"\\b[\\w]+z\\w*\\b\"\n    return re.findall(word,text,re.IGNORECASE)\n",
        "num_ids": 40
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(\"\\sz.\\s\", text)\n",
        "num_ids": 18
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #result = re.match('z',text)\n    result = re.search('z',text)\n    if result:\n        print(\"found match for z\")\n    else:\n        print(\"no match for z\")\n",
        "num_ids": 54
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    r = r'[^z]+z[^z]+'\n    print(re.findall(r, text, flags=re.IGNORECASE))\n    return\n",
        "num_ids": 45
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    list = []\n    x = re.findall('\\b\\w*z\\w*\\b', text)\n    for i in x:\n        if i not in list:\n            list.append(i)\n    return list\n",
        "num_ids": 57
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\Bz\\B')\n    if pattern.search(text):\n        return 'Found a word!'\n    return 'Not Found!'\n",
        "num_ids": 43
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b\\w*z\\w*\\b', text)\n",
        "num_ids": 25
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = int(monthnum2)\n    if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n        print(\"31 days in given month number\")\n    elif monthnumb == 4 or monthnumb == 6 or monthnumb == 9 or monthnumb == 11:\n        print(\"30 days in given month number\")\n    elif monthnumb == 2:\n        print(\"28 days in given month number\")\n    else:\n        print(\"Please Enter Month Number Correctly!\")\n",
        "num_ids": 146
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return '31'\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return '30'\n    else:\n        return 'Unsupported month number'\n",
        "num_ids": 100
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n        \ndef check_monthnum_number(monthnum1):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum1 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n    \ndef check_leapyear_number(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n        \ndef check_leapyear_number_v2(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n        return True\n    else:\n        return False\n        \ndef check_leapyear_number_v3(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 and year % 100!= 0 or year % 400 == 0\n    \ndef check_leapyear_number_v4(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 400 == 0 or year % 4 == 0 and year % 100!= 0\n    \ndef check_leapyear_number_v5(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (year % 100 == 0 and year % 400 == 0) or year % 4 == 0:\n        return True\n    else:\n        return False\n        \ndef check_leapyear_number_v6(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n        return True\n    else:\n        return False\n    \ndef check_leapyear_number_v7(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n        return True\n    else:\n        return False\n    \ndef check_leapyear_number_v8(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 400 == 0 or year % 4 == 0 and year % 100!= 0\n    \ndef check_leapyear_number_v9(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 and year % 100!= 0 or year % 400 == 0\n    \ndef check_leapyear_number_v10(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or year % 100 == 0 and year % 400 == 0\n    \ndef check_leapyear_number_v11(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or (year % 100 == 0 and year % 400 == 0)\n    \ndef check_leapyear_number_v12(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or (year % 4 == 0 and year % 100!= 0)\n    \ndef check_leapyear_number_v13(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or (year % 4 == 0 and year % 100 == 0 and year % 400!= 0)\n    \ndef check_leapyear_number_v14(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0 and year % 400 == 0)\n    \ndef check_leapyear_number_v15(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 or year % 100 == 0 and year % 400 == 0)\n    \ndef check_leapyear_number_v16(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 or year % 100 == 0) and year % 400 == 0\n    \ndef check_leapyear_number_v17(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 400 == 0) or (year % 4 == 0 and year % 100!= 0)\n    \ndef check_leapyear_number_v18(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 400 == 0) or (year % 4 == 0 and year % 100 == 0)\n    \ndef check_leapyear_number_v19(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 and year % 100 == 0\n    \ndef check_leapyear_number_v20(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0\n    \ndef check_leapyear_number_v21(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 400 == 0) or (year % 4 == 0 and year % 100 == 0)\n    \ndef check_leapyear_number_v22(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0) or year % 400 == 0\n    \ndef check_leapyear_number_v23(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0) or (year % 400 == 0)\n    \ndef check_leapyear_number_v24(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or year % 100 == 0 and year % 400 == 0\n    \ndef check_leapyear_number_v25(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or year % 100 == 0 or year % 400 == 0\n    \ndef check_leapyear_number_v26(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or (year % 100 == 0 and year % 400 == 0)\n    \ndef check_leapyear_number_v27(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0) or (year % 400 == 0)\n    \ndef check_leapyear_number_v28(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0) or (year % 4 == 0 and yea",
        "num_ids": 26
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(\"January\")\n    elif monthnum2 == 2:\n        print(\"February\")\n    elif monthnum2 == 3:\n        print(\"March\")\n    elif monthnum2 == 4:\n        print(\"April\")\n    elif monthnum2 == 5:\n        print(\"May\")\n    elif monthnum2 == 6:\n        print(\"June\")\n    elif monthnum2 == 7:\n        print(\"July\")\n    elif monthnum2 == 8:\n        print(\"August\")\n    elif monthnum2 == 9:\n        print(\"September\")\n    elif monthnum2 == 10:\n        print(\"October\")\n    elif monthnum2 == 11:\n        print(\"November\")\n    elif monthnum2 == 12:\n        print(\"December\")\n    else:\n        print(\"Enter a valid month number\")\n",
        "num_ids": 207
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(\"It has 31 days\")\n    elif monthnum2 == 2:\n        print(\"It has 28 days\")\n    elif monthnum2 == 3:\n        print(\"It has 31 days\")\n    elif monthnum2 == 4:\n        print(\"It has 30 days\")\n    elif monthnum2 == 5:\n        print(\"It has 31 days\")\n    elif monthnum2 == 6:\n        print(\"It has 30 days\")\n    elif monthnum2 == 7:\n        print(\"It has 31 days\")\n    elif monthnum2 == 8:\n        print(\"It has 31 days\")\n    elif monthnum2 == 9:\n        print(\"It has 30 days\")\n    elif monthnum2 == 10:\n        print(\"It has 31 days\")\n    elif monthnum2 == 11:\n        print(\"It has 30 days\")\n    elif monthnum2 == 12:\n        print(\"It has 31 days\")\n    else:\n        print(\"Please check the month number\")\n        ",
        "num_ids": 244
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return False\n",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return '31 days'\n    elif monthnum2 == 2:\n        return '28 days'\n    else:\n        return '30 days'\n",
        "num_ids": 64
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 28\n",
        "num_ids": 57
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in stringlist:\n        newlist.append(i[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # length = len(stringlist)\n    # listOfLen = []\n    # for i in range(length):\n    #     listOfLen.append(len(stringlist[i]))\n    # for i in range(length):\n    #     for j in range(len(stringlist[i])):\n    #         if len(stringlist[i]) < len(stringlist[i+1]):\n    #             listOfLen.append(len(stringlist[i]))\n    # print(listOfLen)\n    return list(reversed(stringlist))\n",
        "num_ids": 137
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse = []\n    for i in stringlist:\n        reverse.insert(0, i)\n    return reverse\n",
        "num_ids": 29
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Create a copy of the stringlist\n    stringlist_copy = stringlist[:]\n    # For each string in the stringlist, slice and reverse it\n    for i in range(len(stringlist)):\n        stringlist_copy[i] = stringlist[i][::-1]\n    return stringlist_copy\n",
        "num_ids": 77
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for eachstring in stringlist:\n        newlist.append(eachstring[::-1])\n    return newlist\n    \n    \ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    vowels = set(['a','e','i','o','u'])\n    return len([char for char in string if char in vowels])\n    \n    \ndef make_list_of_ints(stringlist):\n    '''\n    Write a function that converts all elements in a given list of string values to integers.\n    '''\n    return [int(char) for char in stringlist]\n    \n    \ndef sum_list(intlist):\n    '''\n    Write a function to calculate the sum of all integers in a given list of integers.\n    '''\n    return sum(intlist)\n    \n    \ndef find_lowest_int(intlist):\n    '''\n    Write a function to find and return the lowest value in a given list of integers.\n    '''\n    return min(intlist)\n    \n    \ndef find_highest_int(intlist):\n    '''\n    Write a function to find and return the highest value in a given list of integers.\n    '''\n    return max(intlist)\n    \n    \ndef sort_integers(intlist):\n    '''\n    Write a function to sort a given list of integers.\n    '''\n    return sorted(intlist)\n    \n    \ndef reverse_sort(intlist):\n    '''\n    Write a function to reverse the order of a given list of integers.\n    '''\n    return sorted(intlist, reverse=True)\n    \n    \ndef get_middle_int(intlist):\n    '''\n    Write a function to find and return the middle value in a given list of integers. If the list has an even number of elements, include the higher of the two middle values.\n    '''\n    middle = len(intlist) // 2\n    return intlist[middle] if len(intlist) % 2!= 0 else intlist[middle - 1:middle + 1][0]\n    \n    \ndef get_middle_3(intlist):\n    '''\n    Write a function to find the'middle three' in a given list of integers. If the list has less than three elements, have the function return False.\n    '''\n    if len(intlist) < 3:\n        return False\n    else:\n        return intlist[len(intlist) // 2 - 1 : len(intlist) // 2 + 2]\n    \n    \ndef get_middle_5(intlist):\n    '''\n    Write a function to find the'middle five' in a given list of integers. If the list has less than five elements, have the function return False.\n    '''\n    if len(intlist) < 5:\n        return False\n    else:\n        return intlist[len(intlist) // 2 - 2 : len(intlist) // 2 + 3]\n    \n    \ndef sum_all_multiples_up_to(max_num, max_value):\n    '''\n    Write a function to calculate the sum of all the multiples of a given number up to a maximum value.\n    '''\n    return sum([num for num in range(1, max_num) if num % max_value == 0])\n    \n    \ndef count_missing_numbers(intlist):\n    '''\n    Write a function to count the number of missing numbers in a given list of integers.\n    '''\n    return sum(set(range(1, len(intlist) + 1)).difference(set(intlist)))\n    \n    \ndef count_matching_integers(intlist):\n    '''\n    Write a function to count the number of matching numbers in a given list of integers.\n    '''\n    count = 0\n    for index in range(1, len(intlist)):\n        if intlist[index - 1] == intlist[index]:\n            count += 1\n    return count\n    \n    \ndef find_matching_integers(intlist):\n    '''\n    Write a function to find and return the two numbers in a given list of integers that match.\n    '''\n    for num in range(0, len(intlist) - 1):\n        if intlist[num] == intlist[num + 1]:\n            return [intlist[num], intlist[num + 1]]\n    return False\n    \n    \ndef find_matching_integers_any(intlist):\n    '''\n    Write a function to find and return the two numbers in a given list of integers that match.\n    '''\n    for num in range(0, len(intlist) - 1):\n        if intlist[num] in intlist[num + 1:]:\n            return [intlist[num], intlist[num + 1]]\n    return False\n    \n    \ndef find_matching_integers_all(intlist):\n    '''\n    Write a function to find and return the two numbers in a given list of integers that match.\n    '''\n    for num in range(0, len(intlist) - 1):\n        if intlist[num] not in intlist[num + 1:]:\n            return False\n    return False\n    \n    \ndef return_list_of_matching_integers(intlist):\n    '''\n    Write a function to return a list of all the matching numbers in a given list of integers.\n    '''\n    matching_numbers = []\n    for num in range(0, len(intlist) - 1):\n        if intlist[num] == intlist[num + 1]:\n            matching_numbers.append(intlist[num])\n    return matching_numbers\n    \n    \ndef find_all_matching_integers(intlist):\n    '''\n    Write a function to return a list of all the matching numbers in a given list of integers.\n    '''\n    matching_numbers = []\n    for num in range(0, len(intlist) - 1):\n        if intlist[num] in intlist[num + 1:]:\n            matching_numbers.append(intlist[num])\n    return matching_numbers\n    \n    \ndef find_all_matching_integers_any(intlist):\n    '''\n    Write a function to return a list of all the matching numbers in a given list of integers.\n    '''\n    matching_numbers = []\n    for num in range(0, len(intlist) - 1):\n        if intlist[num] in intlist[num + 1:]:\n            matching_numbers.append(intlist[num])\n    return matching_numbers\n    \n    \ndef find_all_matching_integers_all(intlist):\n    '''\n    Write a function to return a list of all the matching numbers in a given list of integers.\n    '''\n    matching_numbers = []\n    for num in range(0, len(intlist) - 1):\n        if intlist[num] not in intlist[num + 1:]:\n            return False\n    return matching_numbers\n    \n    \ndef return_list_of_missing_numbers(intlist):\n    '''\n    Write a function to return a list of all the missing numbers in a given list of integers.\n    '''\n    return list(set(range(1, len(intlist) + 1)).difference(set(intlist)))\n    \n    \ndef return_list_of_duplicates(intlist):\n    '''\n    Write a function to return a list of all the duplicate numbers in a given list of integers.\n    '''\n    return [intlist[i] for i in range(len(intlist)) if intlist.count(intlist[i]) > 1]\n    \n    \ndef return_list_of_multiples_of_x_up_to_n(intlist, x, n):\n    '''\n    Write a function to return a list of all the numbers in a given list of integers that are multiples of a given number.\n    '''\n    return [num for num in intlist if num % x == 0 and num <= n]\n    \n    \ndef return_list_of_multiples_of_x_greater_than_n(intlist, x, n):\n    '''\n    Write a function to return a list of all the numbers in a given list of integers that are multiples of a given number and greater than a given numbe",
        "num_ids": 35
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string_list = []\n    for word in stringlist:\n        reverse_string_list.append(word[::-1])\n    return reverse_string_list\n",
        "num_ids": 43
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_len = [len(i) for i in lst]\n    sub_len.sort()\n    return sub_len[0]\n",
        "num_ids": 36
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m=len(lst)\n    mn=len(lst[0])\n    for i in range(m):\n        if len(lst[i])<mn:\n            mn=len(lst[i])\n            ind=i\n    return lst[ind]\n",
        "num_ids": 68
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    min_len = l\n    for i in range(l):\n        for j in range(i+1,l):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                first_index = i\n                last_index = j\n    return lst[first_index:last_index+1]\n",
        "num_ids": 106
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist_min=[]\n    for i in lst:\n        if len(i)<len(sublist_min):\n            sublist_min=i\n    return sublist_min\n",
        "num_ids": 48
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key=len)\n    \n",
        "num_ids": 16
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minlen = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < minlen:\n            min_sublist = sublist\n            minlen = len(sublist)\n    return min_sublist\n",
        "num_ids": 73
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    for i in range(1,len(lst)):\n        if(len(lst[i])<min_length):\n            min_length=len(lst[i])\n            index=i\n    return(index)\n",
        "num_ids": 70
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = min(len(i) for i in lst)\n    return [i for i in lst if len(i) == m][0]\n",
        "num_ids": 38
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    return lst[0]\n",
        "num_ids": 17
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sub = lst[0]\n    for each_sub in lst: \n        if len(each_sub) < min_len: \n            min_len = len(each_sub)\n            min_sub = each_sub\n    return min_sub\n",
        "num_ids": 79
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    print(area)\n",
        "num_ids": 15
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l*b)\n    \nrectangle_area(3,4)\n",
        "num_ids": 22
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    ",
        "num_ids": 9
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for match in re.finditer(r'([A-Z]+\\w+)|([A-Z]+\\w+)',str1):\n        #print(match.group())\n        str1 = str1.replace(match.group(),'')\n    return str1\n",
        "num_ids": 65
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if len(str1) < 3:\n        return str1\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] == 'A' or str1[i] == 'B' or str1[i] == 'C' or str1[i] == 'D' or str1[i] == 'E' or str1[i] == 'F' or str1[i] == 'G' or str1[i] == 'H' or str1[i] == 'I' or str1[i] == 'J' or str1[i] == 'K' or str1[i] == 'L' or str1[i] == 'M' or str1[i] == 'N' or str1[i] == 'O' or str1[i] == 'P' or str1[i] == 'Q' or str1[i] == 'R' or str1[i] == 'S' or str1[i] == 'T' or str1[i] == 'U' or str1[i] == 'V' or str1[i] == 'W' or str1[i] == 'X' or str1[i] == 'Y' or str1[i] == 'Z':\n            pass\n        else:\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 321
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r\"[A-Z]\", \"\", str1)\n",
        "num_ids": 21
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    import re\n    str1 = ''.join([i for i in str1 if i.islower()])\n    return str1\n",
        "num_ids": 33
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    newstr = ''\n    for i in str1:\n        if(i.isupper() == False):\n            newstr = newstr + i\n    return newstr\n",
        "num_ids": 42
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str(str1)\n    str2 = re.findall(r'[a-z][A-Z]*',str1)\n    str3 = \"\".join(str2)\n    print(str3)\n    return str3\nremove_uppercase(\"HEllo World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"HELLO WORLD\")\nremove_uppercase(\"HELLO WORLD!\")\nremove_uppercase(\"HELLO WORLD!!!\")\nremove_uppercase(\"hello WORLD\")\n",
        "num_ids": 132
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]','',str1)\n",
        "num_ids": 21
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = \"This Is A String\"\n    pattern = \"[A-Z]\"\n    result = re.sub(pattern,\"\",str1)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst] \n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n",
        "num_ids": 18
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]\n",
        "num_ids": 24
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for char in str:\n        if char.isupper():\n            upper_ctr += 1\n    return upper_ctr\n",
        "num_ids": 37
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt=0\n    for i in str:\n        if(i>='A' and i<='Z'):\n            cnt+=1\n    return cnt\n",
        "num_ids": 42
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n",
        "num_ids": 27
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr=0\n    for i in range(0,len(str)):\n        if str[i].isupper():\n            ctr+=1\n    return ctr\n",
        "num_ids": 41
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if ord(str[i])>=65 and ord(str[i])<=90:\n            count = count+1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            combination = []\n            combination.append(list1[i])\n            combination.append(list1[j])\n            combinations.append(combination)\n    return combinations\n",
        "num_ids": 82
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_of_lists = []\n    for i in range(len(list1)):\n        list_of_lists += list(itertools.combinations(list1,i+1))\n    return list_of_lists\n",
        "num_ids": 56
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return itertools.combinations(list1, 4)\n",
        "num_ids": 17
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n",
        "num_ids": 8
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combinations = []\n    for i in range(1, len(list1)+1):\n        combination = []\n        for j in range(len(list1)-i+1):\n            combination.append(list1[j:j+i])\n        all_combinations.append(combination)\n    return all_combinations\n",
        "num_ids": 83
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, 3))\n",
        "num_ids": 19
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n    for i in range(len(list1) + 1):\n        combinations_list += [list(itertools.combinations(list1,i))]\n    return combinations_list\n",
        "num_ids": 54
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    \n    return [[list1[0]] + rest for rest in combinations_list(list1[1:])] + combinations_list(list1[1:])\n    \nprint(combinations_list([1, 2, 3]))\n",
        "num_ids": 73
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)<=1:\n        return [list1]\n    return combinations_list([i for i in list1 if i not in list1[1:]]) + combinations_list_helper(list1[1:])\n",
        "num_ids": 59
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    combinations.append(list1[0])\n    for i in range(len(list1)):\n        if list1[i] not in combinations:\n            combinations.append(list1[i])\n",
        "num_ids": 57
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    size = len(arr)\n    if size <= 1:\n        return arr[0]\n    elif size == 2:\n        return min(arr)\n    left_max = [None] * size\n    right_max = [None] * size\n    left_max[0] = 1\n    right_max[size-1] = 1\n    max_left_right = 1\n    max_right_left = 1\n    for i in range(1, size):\n        if arr[i-1] > 0:\n            left_max[i] = max(left_max[i-1]*arr[i-1], 1)\n        else:\n            left_max[i] = 1\n        if arr[size-i-1] > 0:\n            right_max[size-i-1] = max(right_max[size-i]*arr[size-i-1], 1)\n        else:\n            right_max[size-i-1] = 1\n        max_left_right = max(max_left_right, left_max[i]*right_max[size-i-1])\n    return max(left_max[0], right_max[0], max_left_right)\n",
        "num_ids": 288
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = float('-inf')\n    local_max = 1\n    start = 0\n    end = 0\n    for i in range(0, len(arr)):\n        local_max = local_max * arr[i]\n        if local_max > global_max:\n            global_max = local_max\n            start = arr[i]\n            end = arr[i]\n        if local_max < 0:\n            local_max = 1\n    print(global_max)\n    return start, end\n",
        "num_ids": 124
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 1\n    max_start = 0\n    max_end = 0\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        #if current element is less than 0, we'll reset the start and end to be i+1, i+1\n        if arr[i] < 0:\n            start = i+1\n            end = i+1\n        #if it's greater than 0, we'll keep track of the current start and end\n        if arr[i] > 0:\n            start = i\n            end = i\n        #for the current array, we'll check if the product of any subarray is greater than the current max product\n        for j in range(start, end):\n            if max_prod < arr[j]*arr[j+1]:\n                max_prod = arr[j]*arr[j+1]\n                max_start = j\n                max_end = j+1\n    return [max_start, max_end]\n",
        "num_ids": 238
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    start = 0\n    end = 0\n",
        "num_ids": 36
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # from https://www.geeksforgeeks.org/dynamic-programming-subarray-multiplication/\n    n = len(arr)\n    mx_so_far = arr[0]\n    my_so_far = 1\n    s = set()\n    for i in range(n):\n        #print('{} {} {}'.format(i, mx_so_far, my_so_far))\n        my_so_far *= arr[i]\n        mx_so_far = max(mx_so_far, my_so_far)\n        my_so_far = 1\n        if my_so_far == 0:\n            s.add(i)\n    #print(mx_so_far)\n    #print(s)\n",
        "num_ids": 181
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    curr_max = arr[0]\n    curr_min = arr[0]\n    curr_max_prod = arr[0]\n    curr_min_prod = arr[0]\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            curr_max, curr_min = curr_min, curr_max\n        curr_max = max(arr[i], curr_max * arr[i])\n        curr_min = min(arr[i], curr_min * arr[i])\n        curr_max_prod = max(curr_max, curr_max_prod)\n        curr_min_prod = min(curr_min, curr_min_prod)\n        max_prod = max(max_prod, curr_max_prod)\n    return max_prod\n",
        "num_ids": 245
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max, local_max, local_min = 1, 1, 1\n    \n    for i in range(len(arr)):\n        if arr[i] > 0:\n            local_max = local_max * arr[i]\n            local_min = min(local_min * arr[i], 1)\n            global_max = max(global_max, local_max)\n        elif arr[i] < 0:\n            local_max = max(local_min * arr[i], 1)\n            local_min = min(local_min * arr[i], 1)\n            global_max = max(global_max, local_max)\n        else:\n            global_max = max(global_max, 1)\n            local_max = 1\n            local_min = 1\n    \n    return global_max\n",
        "num_ids": 196
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr = arr[0]\n    max_prod = arr[0]\n    for i in range(1,len(arr)):\n        curr = max(arr[i], curr * arr[i])\n        max_prod = max(curr, max_prod)\n    return max_prod\n",
        "num_ids": 78
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if (len(dict.values()) == 0):\n        return False\n    count = 1\n    for i in dict:\n        if (dict[i] == dict.values()[0]):\n            count += 1\n    if (count == len(dict)):\n        return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i == n:\n            return True\n        else:\n            return False\n",
        "num_ids": 30
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict.values()) == n:\n        return True\n    else:\n        return False\n    \ndef check_values(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if v == n:\n            continue\n        else:\n            return False\n    return True\n    \ndef check_len(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n    \ndef check_len2(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    if len(set(dict_len)) == 1:\n        return True\n    else:\n        return False\n        \ndef check_len3(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all([len(i) for i in dict.values()]):\n        return True\n    else:\n        return False\n        \ndef check_len4(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if len(v) == n:\n            continue\n        else:\n            return False\n    return True\n        \ndef check_len5(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len6(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len7(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if len(v) == n:\n            continue\n        else:\n            return False\n    return True\n        \ndef check_len8(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set([len(i) for i in dict.values()])) == 1\n    \ndef check_len9(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return len(set(dict_len)) == 1\n    \ndef check_len10(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set([len(i) for i in dict.values()])) == 1\n    \ndef check_len11(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len12(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len13(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set([len(i) for i in dict.values()])) == 1\n    \ndef check_len14(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set([len(i) for i in dict.values()])) == 1\n    \ndef check_len15(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set([len(i) for i in dict.values()])) == 1\n    \ndef check_len16(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set([len(i) for i in dict.values()])) == 1\n    \ndef check_len17(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return n in [len(i) for i in dict.values()]\n    \ndef check_len18(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len19(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return n in [len(i) for i in dict.values()]\n    \ndef check_len20(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len21(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len22(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len23(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len24(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len25(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return n in [len(i) for i in dict.values()]\n    \ndef check_len26(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len27(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return n in [len(i) for i in dict.values()]\n    \ndef check_len28(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return n in [len(i) for i in dict.values()]\n    \ndef check_len29(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len30(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_len = [len(i) for i in dict.values()]\n    return n in dict_len\n    \ndef check_len31(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.",
        "num_ids": 17
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(f'All values are the same: {n}')\n    else:\n        print(f'Not all values are the same: {n}')\n",
        "num_ids": 54
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values)!= n:\n        return False\n    elif values.count(values[0]) == len(values):\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n",
        "num_ids": 16
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return (all(val == dict[0] for val in dict))\n",
        "num_ids": 19
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return list(dict.values())[0]\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    return check_value(dict[0], n-1) and check_value(dict[1], n-1)\n",
        "num_ids": 74
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    return len(set(values)) == 1\n",
        "num_ids": 21
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1.keys():\n        if dict1[key] == \"\":\n            pass\n        else:\n            new_dict[key] = dict1[key]\n    return new_dict\n",
        "num_ids": 57
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict1={}\n    for k,v in dict1.items():\n        if v!=[]:\n            new_dict1[k]=v\n    return new_dict1\n",
        "num_ids": 46
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!=''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key in dict1:\n        if dict1[key]!= '':\n            dict2[key] = dict1[key]\n    return dict2\n",
        "num_ids": 46
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key, value in dict1.items() if value}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= []}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:val for key, val in dict1.items() if val}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            dict1.pop(key)\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if item == '':\n            dict1.pop(item)\n    return dict1\n",
        "num_ids": 31
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            temp = 1\n            for k in range(i, j+1):\n                temp = temp*arr[k]\n            if max < temp:\n                max = temp\n    return max\n",
        "num_ids": 77
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr == None:\n        return None\n    n = len(arr)\n    if n == 0:\n        return None\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_p = 1\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2,n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if l == 2:\n                dp[i][j] = arr[i]*arr[j]\n            else:\n                dp[i][j] = arr[i]*arr[j] + dp[i+1][j]\n            max_p = max(max_p, dp[i][j])\n    return max_p\n",
        "num_ids": 195
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_so_far = 1\n    for i in range(0,len(arr)):\n        max_so_far = max_so_far * arr[i]\n    min_so_far = 1\n    for i in range(len(arr)-1,-1,-1):\n        min_so_far = min_so_far * arr[i]\n        if arr[i] == 0:\n            max_so_far = 0\n            break\n        max_so_far = max(max_so_far, min_so_far)\n        min_so_far = min_so_far * arr[i]\n    return max_so_far\n",
        "num_ids": 171
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr is None or len(arr) == 0:\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_prod = 1\n    for i in range(n):\n        temp = 1\n        for j in range(i,n):\n            temp *= arr[j]\n            if temp > max_prod:\n                max_prod = temp\n    return max_prod\n",
        "num_ids": 77
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr.sort()\n    res = arr[0]*arr[1]\n    max_res = res\n",
        "num_ids": 28
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # dp = {}\n    # for i in range(len(arr)):\n    #     if i == 0:\n    #         dp[i] = 1\n    #     else:\n    #         dp[i] = max(arr[i] * dp[i-1], arr[i])\n",
        "num_ids": 74
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    max_prod = 1\n    # two variables to store the max product at index and max product after that index\n    # if element is added to subsequence, max_prod at that index changes.\n    # then max_prod for next index is reset to 1\n    # and max_prod for previous index gets changed to max_prod at that index\n    max_prod_after_index, max_prod_after_index_prev = 1, 1\n    max_prod_before_index, max_prod_before_index_prev = 1, 1\n    for i in range(1, n):\n        max_prod_after_index_prev = max_prod_after_index\n        max_prod_before_index_prev = max_prod_before_index\n        if arr[i] > arr[i-1]:\n            max_prod_after_index = max_prod_before_index_prev*arr[i]\n            max_prod_before_index = max_prod_after_index_prev*arr[i-1]\n        else:\n            max_prod_after_index = max_prod_before_index_prev*arr[i]\n            max_prod_before_index = max_prod_after_index_prev*arr[i-1]\n        max_prod = max(max_prod, max_prod_after_index)\n    return max_prod\n",
        "num_ids": 362
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # def find_subsequences(nums):\n    #     dp = [[1]*2 for _ in range(len(nums))]\n    #     for i in range(len(nums)):\n    #         dp[i][1] = nums[i]\n    #     for i in range(len(nums)):\n    #         for j in range(i+1, len(nums)):\n    #             if nums[i] > nums[j]:\n    #                 dp[i][1] = max(dp[i][1], nums[j]*dp[j][0])\n    #                 dp[j][0] = max(dp[j][0], dp[i][1])\n    #     return max(dp[i][0] for i in range(len(nums)))\n    \n    def find_subsequences(nums):\n        '''\n        :type nums: List[int]\n        :rtype: int\n        '''\n        if not nums:\n            return 0\n        dp = [[0]*2 for _ in range(len(nums))]\n        # for i in range(len(nums)):\n        #     dp[i][1] = nums[i]\n        for i in range(len(nums)):\n            dp[i][1] = nums[i]\n        max_dp = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > nums[j]:\n                    if dp[j][0] < dp[i][1]*nums[j]:\n                        dp[j][0] = dp[i][1]*nums[j]\n                    dp[j][1] = max(dp[j][1], nums[j])\n                max_dp = max(max_dp, dp[j][0])\n        return max_dp\n    \n    return find_subsequences(arr)\n    \n    \nif __name__ == '__main__':\n    arr = [3, 4, -2, 0, 2]\n    print(max_product(arr))\n",
        "num_ids": 288
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(lambda x: x[0]+x[1], zip(test_tup, test_tup[1:])))\n",
        "num_ids": 35
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(sum(test_tup))\n    \n    \ndef test_add_pairwise():\n    '''\n    Call the function add_pairwise with a tuple of your choice and print out the result.\n    '''\n    my_tup = (1,2,3,4,5,6,7)\n    add_pairwise(my_tup)\n    \n    \ntest_add_pairwise()\n",
        "num_ids": 48
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(0, len(test_tup)):\n        try:\n            print(test_tup[i], test_tup[i+1], test_tup[i]+test_tup[i+1])\n        except IndexError:\n            break\n",
        "num_ids": 68
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # i=0\n    # for j in range(len(test_tup)-1):\n    #     i=i+test_tup[j]\n    # return i\n    return sum(test_tup[:len(test_tup)-1])\n",
        "num_ids": 65
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return [test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[2] + test_tup[3]]\n",
        "num_ids": 51
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Method 1\n    # return tuple(sum(tup) for tup in zip(test_tup, test_tup[1:])\n    \n    # Method 2\n    lst = []\n    for i in range(len(test_tup)-1):\n        lst.append(test_tup[i] + test_tup[i+1])\n    return tuple(lst)\n",
        "num_ids": 98
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"Too few elements in tuple!\")\n    else:\n        neighbor_add = []\n        for i in range(len(test_tup)-1):\n            neighbor_add.append(test_tup[i] + test_tup[i+1])\n        return neighbor_add\n",
        "num_ids": 88
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1]\n",
        "num_ids": 20
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    l = []\n    for i in range(len(test_tup)):\n        if i == 0:\n            l.append(test_tup[i+1])\n        elif i == len(test_tup)-1:\n            l.append(test_tup[i-1])\n        else:\n            l.append(test_tup[i-1])\n            l.append(test_tup[i+1])\n",
        "num_ids": 108
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for num in arr:\n        mul = (mul * num) % n\n    return mul\n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in arr:\n        mul *= i\n    mul %= n\n    return mul\n",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 0:\n        return 0\n    result = 1\n    for x in arr:\n        result = (result * x) % n\n    return result\ndef find_product(arr):\n    '''\n    Write a python function to find the product of the array multiplication.\n    '''\n    if len(arr) == 0:\n        return 0\n    result = 1\n    for x in arr:\n        result = (result * x)\n    return result\ndef array_addition(arr1, arr2):\n    '''\n    Write a python function to find the sum of two arrays.\n    '''\n    result = []\n    if len(arr1) == 0 and len(arr2) == 0:\n        return result\n    if len(arr1) == 0:\n        return arr2\n    if len(arr2) == 0:\n        return arr1\n    for x in range(len(arr1)):\n        result.append(arr1[x] + arr2[x])\n    return result\ndef array_difference(arr1, arr2):\n    '''\n    Write a python function to find the difference of two arrays.\n    '''\n    result = []\n    if len(arr1) == 0 and len(arr2) == 0:\n        return result\n    if len(arr1) == 0:\n        return arr2\n    if len(arr2) == 0:\n        return arr1\n    for x in range(len(arr1)):\n        result.append(arr1[x] - arr2[x])\n    return result\ndef string_compression(s):\n    '''\n    Write a python function to compress a string using Run Length Encoding.\n    '''\n    if len(s) == 0:\n        return ''\n    count = 1\n    result = ''\n    for x in range(1, len(s)):\n        if s[x] == s[x - 1]:\n            count += 1\n        else:\n            result = result + s[x - 1] + str(count)\n            count = 1\n    result = result + s[x - 1] + str(count)\n    if len(result) >= len(s):\n        return s\n    else:\n        return result\ndef string_decompression(s):\n    '''\n    Write a python function to decompress a string using Run Length Encoding.\n    '''\n    if len(s) == 0:\n        return ''\n    result = ''\n    count = 0\n    for x in range(len(s)):\n        if s[x].isdigit():\n            count = count * 10 + int(s[x])\n        else:\n            result = result + s[x] * count\n            count = 0\n    return result\ndef valid_parentheses(s):\n    '''\n    Write a python function to determine if a string has valid parentheses.\n    '''\n    if len(s) == 0:\n        return True\n    stack = []\n    mapping = {')':'(', ']':'[', '}':'{'}\n    for x in s:\n        if x in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[x]!= top_element:\n                return False\n        else:\n            stack.append(x)\n    return not stack\ndef is_balanced(s):\n    '''\n    Write a python function to check if a string has balanced parentheses.\n    '''\n    if len(s) == 0:\n        return True\n    mapping = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for x in s:\n        if x in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[x]!= top_element:\n                return False\n        else:\n            stack.append(x)\n    return not stack\ndef create_array(n, k):\n    '''\n    Write a python function to create an array of size n having k unique random values between 1 and n.\n    '''\n    import random\n    if n == 0 and k == 0:\n        return []\n    if n == 0:\n        return []\n    if k == 0:\n        return []\n    arr = []\n    for x in range(k):\n        arr.append(random.randint(1, n))\n    arr = list(set(arr))\n    return arr\ndef left_rotate(arr, n):\n    '''\n    Write a python function to perform n left rotations of a given array.\n    '''\n    if n == 0:\n        return arr\n    if len(arr) == 0:\n        return arr\n    n = n % len(arr)\n    return arr[n:] + arr[:n]\ndef reverse(arr, start, end):\n    '''\n    Write a python function to reverse an array of numbers between start and end indices.\n    '''\n    if len(arr) == 0:\n        return arr\n    if start < 0:\n        start = 0\n    if end < 0:\n        end = 0\n    if end > len(arr):\n        end = len(arr)\n    if start >= len(arr) or end >= len(arr):\n        return []\n    arr[start:end] = arr[start:end][::-1]\n    return arr\ndef string_rotation(s1, s2):\n    '''\n    Write a python function to determine if s2 is a rotation of s1 using only one call to isSubstring.\n    '''\n    return isSubstring(s1 + s1, s2)\ndef isSubstring(s1, s2):\n    '''\n    Write a python function to determine if s2 is a rotation of s1 using only one call to isSubstring.\n    '''\n    if len(s2)!= len(s1):\n        return False\n    if s2 in s1:\n        return True\n    return False\ndef count_matching_subsequences(arr, string):\n    '''\n    Write a python function to count the number of matching subsequences of string in arr.\n    '''\n    if len(arr) == 0 or len(string) == 0:\n        return 0\n    result = 0\n    for x in range(len(arr)):\n        if arr[x] == string[0]:\n            result += 1\n            if is_match(arr, string, x):\n                result += 1\n    return result\ndef is_match(arr, string, index):\n    '''\n    Write a python function to check if string is a matching subsequence of arr.\n    '''\n    if len(string) == 0:\n        return True\n    if len(arr) == 0:\n        return False\n    if len(arr) - index < len(string):\n        return False\n    if arr[index] == string[0]:\n        return is_match(arr, string[1:], index + 1)\n    return False\ndef find_longest_substring(arr):\n    '''\n    Write a python function to find the longest substring of unique elements of arr.\n    '''\n    if len(arr) == 0:\n        return ''\n    result = ''\n    for x in range(len(arr)):\n        if len(arr) - x < len(result):\n            break\n        temp = ''\n        for y in range(x, len(arr)):\n            if arr[y] not in temp:\n                temp += arr[y]\n            else:\n                break\n        if len(temp) > len(result):\n            result = temp\n    return result\ndef is_matched(arr):\n    '''\n    Write a python function to check if all the brackets are matched in a given array of strings.\n    '''\n    if len(arr) == 0:\n        return False\n    stack = []\n    mapping = {')':'(', ']':'[', '}':'{'}\n    for x in arr:\n        for y in x:\n            if y in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[y]!= top_element:\n                    return False\n            else:\n                stack.append(y)\n    return not stack\ndef smallest_greater_element(arr, n):\n    '''\n    Write a python function to find the smallest element greater than n in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    for x in range(le",
        "num_ids": 23
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for x in arr: \n        product = (product * x) % n \n    return product\n",
        "num_ids": 31
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    multiply = 1\n    for i in range(0, len(arr)):\n        multiply = multiply*arr[i]\n    remainder = multiply % n\n    return remainder\n",
        "num_ids": 48
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0, len(arr)): \n        prod = (prod * arr[i]) % n\n    return prod % n \n",
        "num_ids": 45
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n \n    return prod % n\n",
        "num_ids": 35
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    p = 1\n    for i in range(len(arr)):\n        p = (p * arr[i]) % n\n    return p\n",
        "num_ids": 36
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1; \n    for i in arr: \n        prod *= i; \n    return prod % n; \ndef find_remainder_recursive(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 1: \n        return arr[0] % n; \n    else: \n        prod = arr[0] * find_remainder_recursive(arr[1:], n); \n        return prod % n; \ndef find_remainder_iterative(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1; \n    for i in arr: \n        prod *= i; \n    while prod > n: \n        prod = prod % n; \n    return prod; \n",
        "num_ids": 51
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l)==list(range(min(l), max(l)+1)) \n",
        "num_ids": 25
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i] == l[i+1] - 1 for i in range(len(l)-1))\n",
        "num_ids": 31
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(map(int, l))\n    # print(l)\n    for i in range(0,len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return \"Not Consecutive\"\n    return \"Consecutive\"\n",
        "num_ids": 70
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==1:\n        return \"Yes,consecutive\"\n    elif len(l)==2:\n        if abs(l[0]-l[1])==1:\n            return \"Yes,consecutive\"\n        else:\n            return \"No,not consecutive\"\n    else:\n        for i in range(len(l)-1):\n            if l[i+1]-l[i]==1:\n                pass\n            else:\n                return \"No,not consecutive\"\n        return \"Yes,consecutive\"\n",
        "num_ids": 131
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    return sorted(l) == list(range(min(l), max(l)+1))\n",
        "num_ids": 26
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    else:\n        c = l[0]\n        if c+1 in l:\n            c = c+1\n            while c in l:\n                c = c+1\n            return True\n        else:\n            return False\n    \ndef list_num(l):\n    '''\n    Write a function to convert the number list into string list.\n    '''\n    l = [str(x) for x in l]\n    return l\n",
        "num_ids": 20
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i]+1==l[i+1]):\n            print(l[i],l[i+1])\n        else:\n            print('Not consecutive')\n            break\n",
        "num_ids": 60
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l),max(l)+1))\n",
        "num_ids": 24
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<2:\n        return 0\n    elif sorted(l)==l:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 39
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (max(l)-min(l))==(len(l)-1)\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp_set1 = set()\n    temp_set2 = set()\n",
        "num_ids": 20
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for x in test_list1:\n        if x in test_list2:\n            result.append(x)\n    return set(result)\n",
        "num_ids": 42
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) < len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n    return set(test_list1).intersection(test_list2)\n",
        "num_ids": 59
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # print('Original list:', test_list1)\n    # print('Original list:', test_list2)\n    tuple_inter = set(test_list1).intersection(set(test_list2))\n    # print('Intersection: ', tuple_inter)\n    return tuple(tuple_inter)\n",
        "num_ids": 77
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    try:\n        test_list1 = list(test_list1)\n        test_list2 = list(test_list2)\n",
        "num_ids": 34
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in range(0,len(test_list1)):\n        for j in range(0,len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                result.append(test_list1[i])\n                break\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    final_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if set(i).intersection(set(j)) not in final_list:\n                final_list.append(list(set(i).intersection(set(j))))\n    return final_list\n",
        "num_ids": 76
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #converting list to set and then joining the elements to make a string\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n    #converting the string to tuple\n    test_tuple = tuple(test_set1.intersection(test_set2))\n    return test_tuple\n",
        "num_ids": 85
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(*map(set,test_list2))\n",
        "num_ids": 24
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for tup in test_list1:\n        if tup in test_list2:\n            new_list.append(tup)\n    return new_list\n",
        "num_ids": 48
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newStr = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newStr = newStr + newch\n        else:\n            newStr = newStr + str1[i]\n    return newStr\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams or not. An anagram is\n    a word, phrase, or name formed by rearranging the letters of a different\n    word, phrase, or name.\n    '''\n    return sorted(str1) == sorted(str2)\n",
        "num_ids": 16
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=list(str1)\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str1[i]=newch\n    return ''.join(str1)\n",
        "num_ids": 55
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    print(str1.replace(ch, newch))\n",
        "num_ids": 16
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=list(str1)\n    for i in range(0,len(str1)):\n        if(str1[i]==ch):\n            str1[i]=newch\n    str1=''.join(str1)\n    return str1\n",
        "num_ids": 64
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1])\n",
        "num_ids": 23
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    count = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_values = sorted(dict1.values())\n    sorted_dict = {}\n    for i in sorted_values:\n        for k in dict1.keys():\n            if dict1[k] == i:\n                sorted_dict[k] = dict1[k]\n    return sorted_dict\n",
        "num_ids": 75
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    result = []\n    for key, value in dict1.items():\n        result.append((value, key))\n    result = sorted(result, reverse=True)\n    for key, value in result:\n        print(f'{key}:{value}')\n",
        "num_ids": 63
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\ndef sort_counter_2(dict1):\n    '''\n    Another way to sort a dictionary by value.\n    '''\n    sorted_dict = {k:v for k, v in sorted(dict1.items(), key=lambda x: x[1], reverse=True)}\n    return sorted_dict\ndef sort_counter_3(dict1):\n    '''\n    Another way to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return {k:v for k, v in sorted_dict}\ndef sort_counter_4(dict1):\n    '''\n    Yet another way to sort a dictionary by value.\n    '''\n    sorted_dict = {k:v for k, v in sorted(dict1.items(), key=lambda x: x[1], reverse=True)}\n    return sorted_dict\ndef sort_counter_5(dict1):\n    '''\n    Yet another way to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\ndef count_letters(string1):\n    '''\n    Write a function that will take a string and return a dictionary\n    with each letter of the alphabet as keys and the number of times\n    that letter appears in the string as values.\n    '''\n    string1 = string1.lower()\n    sorted_dictionary = {}\n    for char in string1:\n        if char.isalpha():\n            sorted_dictionary[char] = string1.count(char)\n    return sorted_dictionary\ndef count_letters_2(string1):\n    '''\n    Another way to do the same thing.\n    '''\n    string1 = string1.lower()\n    sorted_dictionary = {char:string1.count(char) for char in string1 if char.isalpha()}\n    return sorted_dictionary\ndef count_letters_3(string1):\n    '''\n    Yet another way to do the same thing.\n    '''\n    string1 = string1.lower()\n    sorted_dictionary = dict(Counter(string1))\n    return sorted_dictionary\ndef count_letters_4(string1):\n    '''\n    Yet another way to do the same thing.\n    '''\n    string1 = string1.lower()\n    sorted_dictionary = {k:string1.count(k) for k in string1 if k.isalpha()}\n    return sorted_dictionary\ndef count_letters_5(string1):\n    '''\n    Yet another way to do the same thing.\n    '''\n    string1 = string1.lower()\n    sorted_dictionary = {k:string1.count(k) for k in string1 if k.isalpha()}\n    return sorted_dictionary\ndef find_maximum_value(dict1):\n    '''\n    Write a function that will take a dictionary and return the key with the\n    greatest value.\n    '''\n    key_with_max_value = max(dict1, key=dict1.get)\n    return key_with_max_value\ndef find_maximum_value_2(dict1):\n    '''\n    Another way to do the same thing.\n    '''\n    key_with_max_value = max(dict1, key=lambda x: dict1[x])\n    return key_with_max_value\ndef find_maximum_value_3(dict1):\n    '''\n    Another way to do the same thing.\n    '''\n    key_with_max_value = max(dict1.items(), key=lambda x: x[1])\n    return key_with_max_value\ndef find_maximum_value_4(dict1):\n    '''\n    Another way to do the same thing.\n    '''\n    key_with_max_value = max({k:v for k,v in dict1.items()}.items(), key=lambda x: x[1])\n    return key_with_max_value\ndef find_maximum_value_5(dict1):\n    '''\n    Another way to do the same thing.\n    '''\n    key_with_max_value = max((k,v) for k,v in dict1.items())\n    return key_with_max_value\ndef find_minimum_value(dict1):\n    '''\n    Write a function that will take a dictionary and return the key with the\n    lowest value.\n    '''\n    key_with_min_value = min(dict1, key=dict1.get)\n    return key_with_min_value\ndef find_minimum_value_2(dict1):\n    '''\n    Another way to do the same thing.\n    '''\n    key_with_min_value = min(dict1, key=lambda x: dict1[x])\n    return key_with_min_value\ndef find_minimum_value_3(dict1):\n    '''\n    Another way to do the same thing.\n    '''\n    key_with_min_value = min(dict1.items(), key=lambda x: x[1])\n    return key_with_min_value\ndef find_minimum_value_4(dict1):\n    '''\n    Another way to do the same thing.\n    '''\n    key_with_min_value = min({k:v for k,v in dict1.items()}.items(), key=lambda x: x[1])\n    return key_with_min_value\ndef find_minimum_value_5(dict1):\n    '''\n    Another way to do the same thing.\n    '''\n    key_with_min_value = min((k,v) for k,v in dict1.items())\n    return key_with_min_value\ndef words_with_letters(string1, letters):\n    '''\n    Write a function that will return the words in a string that contain\n    the list of letters provided.\n    '''\n    string1 = string1.split()\n    new_list = []\n    for word in string1:\n        for char in letters:\n            if char in word:\n                new_list.append(word)\n    return new_list\ndef words_with_letters_2(string1, letters):\n    '''\n    Another way to do the same thing.\n    '''\n    string1 = string1.split()\n    new_list = [word for word in string1 if all(char in word for char in letters)]\n    return new_list\ndef words_with_letters_3(string1, letters):\n    '''\n    Yet another way to do the same thing.\n    '''\n    string1 = string1.split()\n    new_list = [word for word in string1 if set(word).issubset(set(letters))]\n    return new_list\ndef words_with_letters_4(string1, letters):\n    '''\n    Yet another way to do the same thing.\n    '''\n    string1 = string1.split()\n    new_list = []\n    for word in string1:\n        if set(word).issubset(set(letters)):\n            new_list.append(word)\n    return new_list\ndef words_with_letters_5(string1, letters):\n    '''\n    Yet another way to do the same thing.\n    '''\n    string1 = string1.split()\n    new_list = [word for word in string1 if set(word)<=set(letters)]\n    return new_list\ndef find_first_letters(string1):\n    '''\n    Write a function that will return a dictionary with the first letters of\n    each word in a string as keys and the number of times that letter appears\n    in the string as values.\n    '''\n    string1 = string1.split()\n    first_letter_dict = {}\n    for word in string1:\n        first_letter = word[0]\n        if first_letter in first_letter_dict:\n            first_letter_dict[first_letter] += 1\n        else:\n            first_letter_dict[first_letter] = 1\n    return first_letter_dict\ndef find_first_letters_2(string1):\n    '''\n    Another way to d",
        "num_ids": 7
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get)\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([nums[i] for i in range(len(nums)) if i == 0 or nums[i] < nums[i-1]])",
        "num_ids": 40
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n    \ndef multiply(nums):\n    '''\n    Write a python function to multiply the element in the array, if the element is less than 0 set it to 0.\n    '''\n    return functools.reduce(lambda x,y: x*y if y>0 else x,nums)\n    \ndef main():\n    #print('big_sum(nums):',big_sum(nums))\n    #print('multiply(nums):',multiply(nums))\n    \n    \n    \n    \nif __name__ == '__main__':\n    nums = [1, 2, 3, -4, -5, 6, 7, -8, 9]\n    main()\n    \n",
        "num_ids": 128
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(sum(sorted(nums)[0:2]))\n",
        "num_ids": 19
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    largest = 0\n    smallest = 0\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return (largest, smallest)\n",
        "num_ids": 80
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    nums.sort()\n    print(f\"{nums[0]} and {nums[len(nums)-1]}\")\n    \n    return\n    \nbig_sum([-2, -4, -6, -8])\n",
        "num_ids": 60
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(sum(sorted(nums)[0:2]))\n",
        "num_ids": 19
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    for char in string:\n        if char.isupper():\n            string = string.replace(char, char.lower())\n    return string\n",
        "num_ids": 35
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n",
        "num_ids": 10
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    print(\"The given string is: \",string)\n    print(\"The lower case version of string is: \",string.lower())\n",
        "num_ids": 31
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) == str:\n        return string.lower()\n    else:\n        return \"Error\"\n",
        "num_ids": 29
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #Code here\n    if string.isupper() == True:\n        return string.lower()\n    else:\n        return string\n",
        "num_ids": 33
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str2 = str2 + str1[i]\n    return str2\n",
        "num_ids": 50
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str(str1)\n    for x in list(str1):\n        if x.islower():\n            str1 = str1.replace(x, '')\n    return str1\n",
        "num_ids": 49
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # str1 = str1.replace(' ', '')\n    # str1 = re.sub('[a-z]*', '', str1)\n    str1 = re.sub('[a-z]*', '', str1, flags=re.I)\n    return str1\n",
        "num_ids": 70
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # loop over the list of letters\n    for char in str1:\n        if char.islower():\n            str1 = str1.replace(char, \"\")\n    return str1\n",
        "num_ids": 46
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Return all characters from str1 that are not lowercase.\n    return ''.join(ch for ch in str1 if ch.isupper())\n",
        "num_ids": 36
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    print(str1)\n    str2 = str1.lower()\n    print(str2)\n    str3 = str2.replace(' ','')\n    print(str3)\n    return str3\n",
        "num_ids": 51
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    res = [char for char in str1 if char.isupper()]\n    str1 = ''.join(res)\n    return str1\n",
        "num_ids": 46
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i.isupper():\n            str2 += i\n        else:\n            pass\n    return str2\n",
        "num_ids": 42
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lower = \"abcdefghijklmnopqrstuvwxyz\"\n    removed_lower = str1\n    for c in lower:\n        if c in removed_lower:\n            removed_lower = removed_lower.replace(c, \"\")\n    return removed_lower\n",
        "num_ids": 70
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]\n",
        "num_ids": 11
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n / 10\n    return int(n)\n",
        "num_ids": 23
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while(n>10):\n        n = n/10\n    print(n)\n",
        "num_ids": 23
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n>=10:\n        n = n//10\n    return n",
        "num_ids": 20
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 0 :\n        return n % 10\n    else :\n        return abs(n) % 10\n",
        "num_ids": 28
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    # 1.\n    def first_digit_1(n) :\n        return int(str(n)[0])\n    # 2.\n    def first_digit_2(n) :\n        if n < 0 : \n            return int(str(n)[0])\n        else :\n            return int(str(n)[1])\n    # 3.\n    def first_digit_3(n) :\n        return int(str(n)[0]) if n < 0 else int(str(n)[1])\n    \n    return first_digit_1(n)\n",
        "num_ids": 137
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n >= 0 :\n        return int(n/10)\n    else :\n        return int(n/100)\n        \ndef last_Digit(n) : \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if n >= 0 :\n        return n%10\n    else :\n        return int(n/10)%10\n        \ndef middle_Digit(n) : \n    '''\n    Write a python function to find the middle digit of a given number.\n    '''\n    \n    return int(n/100)\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try :\n        return int(str(n)[0])\n    except IndexError :\n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # base case\n    if len(list) == 0:\n        return []\n    # recursive case\n    else:\n        new_list = []\n        for i in list:\n            if i % 2 == 1:\n                new_list.append(i)\n        return Split(new_list)\n",
        "num_ids": 72
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [element for element in list if element % 2 == 1]\n",
        "num_ids": 18
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num%2==1]\n",
        "num_ids": 18
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[1::2]\n",
        "num_ids": 11
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_split = []\n    for n in list:\n        if n % 2 == 0:\n            list_split.append(n)\n    return list_split\n",
        "num_ids": 41
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    x = 0\n    a = []\n    while x < len(list):\n        if list[x]%2 == 1:\n            a.append(list[x])\n        x += 1\n    return a\n",
        "num_ids": 54
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[1::2]\n",
        "num_ids": 11
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum(n)**3)-(sum(n)**2)\n",
        "num_ids": 21
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = sum(i**3 for i in range(n+1))\n    return (total**2 - sum(i for i in range(n+1))) \n",
        "num_ids": 41
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        '''\n        Function to find sum of cubes of first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1,n+1):\n            sum += (i*i*i)\n        return sum\n    return sum_of_cubes(n) - (n*(n+1)*(n+2))/6\n",
        "num_ids": 63
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = (n * (n + 1) / 2) ** 2\n    sum_of_nums = n * (n + 1) * (2 * n + 1) / 6\n",
        "num_ids": 50
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_nums += i\n    return sum_of_cubes - sum_of_nums**2\n",
        "num_ids": 75
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) : \n      return (n*(n+1)*(2*n+1))/6\n    def diff(n) : \n      return (sum_of_cubes(n))**2 - (sum_of_cubes(n))\n    return diff(n)\n",
        "num_ids": 78
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = sum([i ** 3 for i in range(1, n + 1)])\n    squares = sum([i ** 2 for i in range(1, n + 1)])\n    diff = abs(total - squares)\n    return diff\n",
        "num_ids": 59
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    sumOfCubes = 0\n",
        "num_ids": 15
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cube = 0\n    sum_of_num = 0\n    for i in range(1, n+1) :\n        sum_of_cube = sum_of_cube + (i*i*i)\n        sum_of_num = sum_of_num + i\n    return (sum_of_num*sum_of_num) - sum_of_cube\n",
        "num_ids": 92
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    nth_num = n*(n+1)*(2*n+1)//6\n    sum_of_cubes = 0\n    for i in range(1, n+1) :\n        sum_of_cubes += i**3\n    return nth_num - sum_of_cubes\n",
        "num_ids": 75
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if ((A[i]^A[j])%2):\n                count+=1\n    return count\nA = [1, 2, 3, 4, 5, 6]\nprint(find_Odd_Pair(A,len(A)))\n",
        "num_ids": 87
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0;\n    \n    # Your code goes here\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if(A[i] ^ A[j] & 1) : \n                count+=1;\n    \n    return count;\n    \ndef find_Odd_Pair_Iterative(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0;\n    \n    # Your code goes here\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if(A[i] ^ A[j] & 1) : \n                count+=1;\n    \n    return count;\n    \ndef find_Odd_Pair_Iterative2(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0;\n    \n    # Your code goes here\n    \n    for i in range(0,N-1) : \n        if(A[i] & 1) : \n            for j in range(i+1,N) : \n                if(A[j] & 1) : \n                    count+=1;\n    \n    return count;\n",
        "num_ids": 90
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res = 0\n    for i in range(0,N) :\n        for j in range(0,N):\n            if ((A[i]^A[j])%2!= 0):\n                res += 1\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_array = []\n    for i in range(0, N) : \n        for j in range(0, i+1) : \n            xor_array.append(A[i] ^ A[j])\n    xor_set = set(xor_array)\n    xor_dict = dict.fromkeys(xor_set, 0)\n    for val in xor_array:\n        xor_dict[val] += 1\n    print(xor_dict)\n    odd_pairs = 0\n    for key, val in xor_dict.items():\n        if val%2!= 0:\n            odd_pairs += 1\n    return odd_pairs\n    \nif __name__ == \"__main__\" : \n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    print(find_Odd_Pair(A,N))\n    \n'''\nSample Input 1 : \n5\n2 4 5 2 4\n",
        "num_ids": 16
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            count += 1 if (A[i] ^ A[j]) & 1 else 0 \n    return count\n",
        "num_ids": 54
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N): \n        for j in range(i + 1, N): \n            if(A[i] ^ A[j] & 1): \n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i+1, N) : \n            if (A[i] ^ A[j] & 1) : \n                count = count + 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    sorted_A = sorted(A)\n    count = 0\n    for i in range(1,N) :\n        if (sorted_A[i] ^ sorted_A[i-1]) & 1 :\n            count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if((A[i] ^ A[j]) & 1) : \n                count = count + 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    counter = 0\n    for i in range(N) :\n        for j in range(i + 1, N) : \n            if (A[i] ^ A[j]) & 1 : \n                counter += 1\n    return counter\n",
        "num_ids": 58
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    upper = string.upper()\n    lower = string.lower()\n    return upper + '\\n' + lower\n",
        "num_ids": 31
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(x.upper() if x.islower() else x.lower() for x in string)\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string:\n        return ''.join([i.lower() if i.islower() else i.upper() for i in string])\n    else:\n        return string\n",
        "num_ids": 42
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    chars = list(string)\n    for index, char in enumerate(chars):\n        chars[index] = char.swapcase()\n    return \"\".join(chars)\n",
        "num_ids": 48
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join([c.upper() if c.islower() else c.lower() for c in string])\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    t = []\n    for x in string:\n        if x.islower() == True:\n            t.append(x.upper())\n        elif x.isupper() == True:\n            t.append(x.lower())\n        else:\n            t.append(x)\n",
        "num_ids": 69
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digit_list = [int(d) for d in str(n1)]\n    n2_digit_list = [int(d) for d in str(n2)]\n    digit_list = [n1_digit_list[i] - n2_digit_list[i] for i in range(0, len(n1_digit_list))]\n    digit_sum = 0\n    for d in digit_list:\n        digit_sum += abs(d)\n    return digit_sum\n",
        "num_ids": 121
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if not n1 and not n2:\n        return 0\n    elif not n1:\n        return len(str(n2))\n    elif not n2:\n        return len(str(n1))\n    else:\n        return len(str(n1)) + len(str(n2))\n",
        "num_ids": 75
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n    if n1 == n2:\n        return 0\n    return abs(n1 - n2)\n",
        "num_ids": 46
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # try:\n    #     n1, n2 = int(n1), int(n2)\n    # except:\n    #     print(\"Please input integer only.\")\n    #     return 0\n    return sum([abs(x1-x2) for x1, x2 in zip(str(n1), str(n2))])\n",
        "num_ids": 82
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(int(str(n1)[0]) - int(str(n2)[0])) + abs(int(str(n1)[1]) - int(str(n2)[1])) + abs(int(str(n1)[2]) - int(str(n2)[2])) + abs(int(str(n1)[3]) - int(str(n2)[3]))\n",
        "num_ids": 96
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < n2:\n        return digit_distance_nums(n2, n1)\n    \n    # We are assuming that all digits from n1 to n2 are present in n1 and n2\n    n2_digit_sum = sum([int(d) for d in str(n2)])\n    n1_digit_sum = sum([int(d) for d in str(n1)])\n    digit_sum = n1_digit_sum - n2_digit_sum\n",
        "num_ids": 119
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # set up the list of digits and the final value\n    digits = []\n    final_value = []\n",
        "num_ids": 28
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert(type(n1) == int and type(n2) == int)\n",
        "num_ids": 22
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(a-b) for a,b in zip(str(n1), str(n2)))\n",
        "num_ids": 30
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n",
        "num_ids": 16
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "num_ids": 97
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_sum = 0\n    max_sum_end = 0\n    max_sum_start = 0\n    sum = 0\n    for i in range(size):\n        sum += a[i]\n        if max_sum <= sum:\n            max_sum = sum\n            max_sum_end = i\n            max_sum_start = max_sum_end - max_sum\n        if sum < 0:\n            sum = 0\n    print \"max sum: \", max_sum\n    print \"start index: \", max_sum_start\n    print \"end index: \", max_sum_end\n    return (max_sum, max_sum_start, max_sum_end)\n",
        "num_ids": 171
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    elif size == 1:\n        return a[0]\n    else:\n        max_so_far = max_ending_here = 0\n        for i in range(0,size):\n            max_ending_here += a[i]\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n",
        "num_ids": 126
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        if current_sum > 0:\n            current_sum += a[i]\n        else:\n            current_sum = a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum\n",
        "num_ids": 100
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # return max([sum(a[x:x+size]) for x in range(0, len(a), size)])\n    curr_sum = 0\n    max_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    curr_sum = 0\n    for i in range(size, len(a)):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n",
        "num_ids": 186
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    cur_sum, max_sum = 0, 0\n    for i in range(size):\n        cur_sum = cur_sum + a[i]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return max_sum\n",
        "num_ids": 80
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_max = 0\n    max_sum = 0\n",
        "num_ids": 16
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "num_ids": 67
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = a[0]\n    sub_array_start = 0\n    sub_array_end = 0\n",
        "num_ids": 36
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1).union(test_tup2)\n    union = list(sorted(union))\n    return union\n",
        "num_ids": 37
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for i in test_tup1:\n        union_list.append(i)\n    for i in test_tup2:\n        if i not in union_list:\n            union_list.append(i)\n    return sorted(union_list)\n",
        "num_ids": 70
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    union_tup = tuple(list(test_tup1) + list(test_tup2))\n    union_tup = sorted(union_tup)\n    return union_tup\n",
        "num_ids": 57
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (sorted(list(set(test_tup1).union(set(test_tup2)))))\n",
        "num_ids": 30
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    union_list = list(test_tup1)\n    for element in test_tup2:\n        if element not in union_list:\n            union_list.append(element)\n    union_list.sort()\n    for element in union_list:\n        union_tup += (element,)\n    return union_tup\n",
        "num_ids": 89
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list1.extend(list2)\n    list1.sort()\n    return tuple(list1)\n",
        "num_ids": 54
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return list(sorted(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 27
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # DONE:\n    # Use the builtin function'set' and do the same as\n    # below to find the union of the two tuples\n",
        "num_ids": 37
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    for element in test_tup1:\n        if element in test_tup2:\n            union_set.add(element)\n    union_set.add(element)\n    return tuple(sorted(union_set))\n",
        "num_ids": 64
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(set(test_tup2))))\n",
        "num_ids": 27
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublist = lst\n    sublist.sort()\n    print(sublist)\n    print(len(sublist))\n",
        "num_ids": 32
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=[]\n    for x in lst:\n        length.append(len(x))\n    length.sort(reverse=True)\n    return length[0]\n",
        "num_ids": 42
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    # print(len(lst))\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            sub_list = []\n            if i<=j:\n                sub_list.extend(lst[i:j+1])\n            if len(sub_list) > max_len:\n                max_len = len(sub_list)\n    return max_len\n",
        "num_ids": 110
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        s = len(lst[i])\n        if s > max:\n            max = s\n    return max\n",
        "num_ids": 47
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlength = 0\n    for i in range(len(lst)):\n        sublist = [lst[i]]\n        for j in range(i + 1, len(lst)):\n            sublist.append(lst[j])\n            if len(sublist) > maxlength:\n                maxlength = len(sublist)\n    return maxlength\n",
        "num_ids": 88
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return []\n    length=len(lst)\n    maxlen=0\n    index=0\n    for i in range(length):\n        if(length-i)>maxlen:\n            maxlen=length-i\n            index=i\n    return [index,maxlen]\n    \n    \n    \ndef Print_Number_Pattern(row):\n    '''\n    Write a python program to print the following pattern.\n    Sample input: 4\n    Expected output:\n    4\n    32\n    678\n    9012\n    '''\n    for i in range(row):\n        for j in range(i+1):\n            print(str(i+j),end=\"\")\n        print()\n",
        "num_ids": 39
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if (len(lst[i:j]) > maxLen):\n                maxLen = len(lst[i:j])\n    return maxLen\n",
        "num_ids": 72
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    final_list=[]\n    for sublist in lst:\n        if len(sublist)>len(final_list):\n            final_list.clear()\n            final_list=sublist\n        elif len(sublist)==len(final_list):\n            final_list.append(sublist)\n        else:\n            pass\n    return final_list\n",
        "num_ids": 89
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # lst = [1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    # lst = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n",
        "num_ids": 111
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst = sorted(lst)\n    longest = []\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            longest.append(i)\n        elif len(i) == max_len:\n            longest.append(i)\n        else:\n            pass\n    return longest\n",
        "num_ids": 97
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # return re.findall('\"(.+?)\"', text)\n    # return re.findall(r'\\((.+?)\\)', text)\n    return re.findall(r'[0-9]*.[0-9]+', text)\n",
        "num_ids": 63
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    s = re.findall(r'[\\'\"].+?[\\'\"\\s]', text)\n    s2 = list(filter(None, s))\n    return s2\n",
        "num_ids": 46
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('\"(\\w+)\"', text)\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\"'\n    text = \"\\\"First Name\\\": \\\"Shahbaz\\\"\"\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\"'\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\"'\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\", \\\"Last Name\\\": \\\"Khan\\\"'\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\"'\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\"'\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\"'\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\"'\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\"'\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\"'\n    # text = '\\\"First Name\\\": \\\"Shahbaz\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\\"Khan\\\", \\\"Last Name\\\": \\",
        "num_ids": 2016
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\\\"[\\w\\s\\d]*\\\"', text)\n    values = [value.strip('\\\"') for value in values]\n    return values\ndef extract_zip_code(text):\n    '''\n    Write a function to extract the zip codes from a string.\n    '''\n    values = re.findall('\\d{5}', text)\n    return values\ndef extract_phone_numbers(text):\n    '''\n    Write a function to extract all phone numbers from a string.\n    '''\n    values = re.findall(r'''(\n        (\\d{3}|\\(\\d{3}\\))?              # area code\n        (\\s|-|\\.)?                      # separator\n        (\\d{3})                         # first 3 digits\n        (\\s|-|\\.)                       # separator\n        (\\d{4})                         # last 4 digits\n        (\\s*(ext|x|ext.)\\s*(\\d{2,5}))?  # extension\n        )''', text)\n    return [re.sub(r'\\D', '', number[0]) for number in values]\ndef extract_host_names(text):\n    '''\n    Write a function to extract all host names from a string.\n    '''\n    values = re.findall('[A-Z][a-z]*\\s[A-Z][a-z]*', text)\n    return values\ndef extract_from_to(text):\n    '''\n    Write a function to extract all dates of format dd/mm/yyyy from a string.\n    '''\n    values = re.findall(r'\\d{1,2}/\\d{1,2}/\\d{4}', text)\n    return values\ndef extract_price(text):\n    '''\n    Write a function to extract all numbers from a string.\n    '''\n    values = re.findall('\\d+', text)\n    return values\ndef extract_names(text):\n    '''\n    Write a function to extract all names from a string.\n    '''\n    values = re.findall('[A-Z][a-z]*\\s[A-Z][a-z]*', text)\n    return values\ndef extract_names_with_numbers(text):\n    '''\n    Write a function to extract all names from a string, that also have numbers.\n    '''\n    values = re.findall('[A-Z][a-z]*\\s[A-Z][a-z]*\\d+', text)\n    return values\ndef extract_dates(text):\n    '''\n    Write a function to extract all dates from a string.\n    '''\n    values = re.findall('\\d{2}/\\d{2}/\\d{4}', text)\n    return values\ndef extract_time(text):\n    '''\n    Write a function to extract all times from a string.\n    '''\n    values = re.findall('\\d{2}:\\d{2}:\\d{2}', text)\n    return values\ndef extract_money(text):\n    '''\n    Write a function to extract all money values from a string.\n    '''\n    values = re.findall('\\$\\d*\\.\\d+', text)\n    return values\ndef extract_email_addresses(text):\n    '''\n    Write a function to extract all email addresses from a string.\n    '''\n    values = re.findall('[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text)\n    return values\ndef extract_words(text):\n    '''\n    Write a function to extract all words from a string.\n    '''\n    values = re.findall('[a-zA-Z]*', text)\n    return values\ndef find_urls(text):\n    '''\n    Write a function to extract all URLs from a string.\n    '''\n    values = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)\n    return values\ndef remove_newlines(text):\n    '''\n    Write a function to remove all newlines from a string.\n    '''\n    return re.sub('\\n', '', text)\ndef is_keyword(text):\n    '''\n    Write a function to check if a string is a keyword.\n    '''\n    keywords = ['breakfast', 'lunch', 'dinner', 'brunch', 'br', 'break', 'lun', 'din', 'brnch', 'dinner', 'lun', 'br', 'brnch']\n    if text in keywords:\n        return True\n    else:\n        return False\ndef is_email_address(text):\n    '''\n    Write a function to check if a string is an email address.\n    '''\n    if re.match(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text):\n        return True\n    else:\n        return False\ndef is_phone_number(text):\n    '''\n    Write a function to check if a string is a phone number.\n    '''\n    if re.match(r'\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4}', text):\n        return True\n    else:\n        return False\ndef is_url(text):\n    '''\n    Write a function to check if a string is a URL.\n    '''\n    if re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text):\n        return True\n    else:\n        return False\ndef is_time(text):\n    '''\n    Write a function to check if a string is a time.\n    '''\n    if re.match(r'\\d{2}:\\d{2}:\\d{2}', text):\n        return True\n    else:\n        return False\ndef is_date(text):\n    '''\n    Write a function to check if a string is a date.\n    '''\n    if re.match(r'\\d{2}/\\d{2}/\\d{4}', text):\n        return True\n    else:\n        return False\ndef is_money(text):\n    '''\n    Write a function to check if a string is a money value.\n    '''\n    if re.match(r'\\$\\d*\\.\\d+', text):\n        return True\n    else:\n        return False\ndef is_email(text):\n    '''\n    Write a function to check if a string is an email address.\n    '''\n    if re.match(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text):\n        return True\n    else:\n        return False\ndef is_name(text):\n    '''\n    Write a function to check if a string is a name.\n    '''\n    if re.match(r'[A-Z][a-z]*\\s[A-Z][a-z]*', text):\n        return True\n    else:\n        return False\ndef is_number(text):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    if re.match(r'\\d+', text):\n        return True\n    else:\n        return False\ndef is_zip_code(text):\n    '''\n    Write a function to check if a string is a zip code.\n    '''\n    i",
        "num_ids": 4
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'\"([^\"]*)\"'\n    matches = re.findall(regex, text)\n    return matches\n",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #text = re.findall('\"([^\"]*)\"', text)\n    #text = re.findall('\\(([^)]*)\\)', text)\n    #text = re.findall('\\[[^\\]]*\\]', text)\n    text = re.findall('\\(([^)]*)\\)', text)\n    text = re.findall('\\[[^\\]]*\\]', text)\n    return text\n",
        "num_ids": 107
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\"([^\"]*)\"',text)\n    return values\n",
        "num_ids": 24
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = \"\\\"This is a test\\\" that was said.\\\"Also, some more\"\n    output = re.findall(r'\"([^\"]*)\"',text)\n    print(output)\n    # ['This is a test', 'Also, some more']\n    \ndef extract_quotes(text):\n    '''\n    Write a function to extract a pair of (letter, number) \n    pairs from a string. \n    '''\n    text = \"\\\"This is a test\\\" that was said.\\\"Also, some more\"\n    output = re.findall(r'\"([A-Za-z0-9])\"\\s\\d',text)\n    print(output)\n    # ['T', 'h', 'i','s','', 'a', 't', 'e','s', 't','', 't', 'h', 'a', 't','', 'i','s','', 'a', 't', 'h', 'e', 'r', 't','','s', 'p', 'e','s','', 't', 'h', 'e','s', 't','', 'a', 'l', 'o', 't','','s', 'a','m', 'e', 'r','','m', 'o', 'n','']\n    \ndef extract_words(text):\n    '''\n    Write a function to extract words from a string \n    that are within double quotes. \n    '''\n    text = \"\\\"This is a test\\\" that was said.\\\"Also, some more\"\n    output = re.findall(r'\"([A-Za-z0-9\\']*)\"',text)\n    print(output)\n    # ['This', 'is', 'a', 'test', 'that', 'was','said', '.', 'Also','some','more']\n    \ndef extract_words_not_in_quotes(text):\n    '''\n    Write a function to extract words from a string \n    that are not within double quotes. \n    '''\n    text = \"\\\"This is a test\\\" that was said.\\\"Also, some more\"\n    output = re.findall(r'([A-Za-z0-9\\']*)',text)\n    print(output)\n    # ['This', 'is', 'a', 'test', 'that', 'was','said', '.', 'Also','some','more']\n    \ndef extract_word_pairs(text):\n    '''\n    Write a function to extract words and their frequencies \n    from a string. \n    '''\n    text = \"\\\"This is a test\\\" that was said.\\\"Also, some more\"\n    output = re.findall(r'\"([A-Za-z0-9\\']*)\"\\s(\\d*)',text)\n    print(output)\n    # [('This', '1'), ('is', '1'), ('a', '1'), ('test', '1'), ('that', '1'), ('was', '1'), ('said', '1'), ('.', '1'), ('Also', '1'), ('some', '1'), ('more', '1')]\n    \ndef extract_word_pairs_with_quotes(text):\n    '''\n    Write a function to extract words and their frequencies \n    from a string, \n    while at the same time \n    extracting and counting words that contain \n    double quotes within them. \n    '''\n    text = \"\\\"This is a test\\\" that was said.\\\"Also, some more\"\n    output = re.findall(r'\"([A-Za-z0-9\\']*)\"\\s(\\d*)\\s\\d*',text)\n    print(output)\n    # [('This', '1'), ('is', '1'), ('a', '1'), ('test', '1'), ('that', '1'), ('was', '1'), ('said', '1'), ('.', '1'), ('Also', '1'), ('some', '1'), ('more', '1')]\n    \ndef check_for_email(text):\n    '''\n    Write a function to check if a given string is a valid email address. \n    '''\n    email = \"test@mail.ru\"\n    output = re.findall(r'[\\w-]+@[a-zA-Z0-9_]+(\\.[a-zA-Z0-9_-]+)+',email)\n    print(output)\n    # ['test@mail.ru']\n    \ndef check_for_url(text):\n    '''\n    Write a function to check if a given string is a valid URL. \n    '''\n    url = \"http://www.google.com\"\n    output = re.findall(r'https?://(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+~#?&/=]*)?',url)\n    print(output)\n    # ['http://www.google.com']\n    \ndef find_emails(text):\n    '''\n    Write a function to find all email addresses in a given string. \n    '''\n    email = \"abc@mail.ru test@mail.ru abc@gmail.com abc@mail.com test@yahoo.com abc@.ru\"\n    output = re.findall(r'[\\w\\.-]+@[a-zA-Z0-9_]+(\\.[a-zA-Z0-9_-]+)+',email)\n    print(output)\n    # ['abc@mail.ru', 'abc@gmail.com', 'abc@.ru']\n    \ndef find_urls(text):\n    '''\n    Write a function to find all URLs in a given string. \n    '''\n    url = \"www.abc.com https://www.test.com test.com abc.com\"\n    output = re.findall(r'(https?://[^\\s]+)',url)\n    print(output)\n    # ['https://www.test.com', 'test.com', 'abc.com']\n    \ndef count_code_chars(text):\n    '''\n    Write a function to count the number of times \n    that the string \"code\" appears anywhere in a given string, \n    except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count. \n    '''\n    text = \"The code is: test. test again! test code test again\"\n    output = re.findall(r'co(e|e\\w)',text)\n    print(output)\n    # ['code', 'code', 'code']\n    \ndef count_any_chars(text):\n    '''\n    Write a function to count the number of times \n    that the string \"code\" appears anywhere in a given string, \n    except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count. \n    '''\n    text = \"The code is: test. test again! test code test again\"\n    output = re.findall(r'co(?:e|e\\w)',text)\n    print(output)\n    # ['code', 'code', 'code']\n    \ndef count_specific_chars(text):\n    '''\n    Write a function to count the number of times \n    that a specific character appears anywhere in a given string, \n    except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count. \n    '''\n    text = \"The code is: test. test again! test code test again\"\n    output = re.findall(r'co(?:e|e\\w\\s)',text)\n    print(output)\n    # ['code']\n    \ndef remove_urls(text):\n    '''\n    Write a function to remove URLs from a given string. \n    '''\n    url = \"www.abc.com https://www.test.com test.com abc.com\"\n    output = re.findall(r'(https?://[^\\s]+)',url)\n    print(output)\n    # ['https://www.test.com', 'test.com', 'abc.com']\n    \ndef remove_emails",
        "num_ids": 86
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = \"the double-quoted string\"\n    print(text.split('\"'))\n    print(re.findall(r'\"(.*?)\"', text))\n    print(re.findall(r'\"(.*?)\"', text))\n",
        "num_ids": 60
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return len(set([(i,j) for i in arr for j in arr if i!=j]))\n    # if len(arr)==1:\n    #     return 0\n    # else:\n    #     return int(len(set([(i,j) for i in arr for j in arr if i!=j]))/2)\n",
        "num_ids": 85
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairCount = 0\n    for i in range(n):\n        for j in range(i + 1,n):\n            if arr[i]!= arr[j]:\n                pairCount += 1\n",
        "num_ids": 49
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    print(count)\n",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n",
        "num_ids": 7
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(0, n): \n        for j in range(0, n): \n            if arr[i]!= arr[j]:\n                pairs+=1\n    return pairs \n",
        "num_ids": 56
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                count+=1\n    return count",
        "num_ids": 60
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    unpaired = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                unpaired.append((arr[i],arr[j]))\n    return len(unpaired)\narr = [1,2,3,4,6,5]\nn = len(arr)\nprint(count_Pairs(arr,n))\n",
        "num_ids": 105
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count \n",
        "num_ids": 52
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return countPairs(arr,n)\n",
        "num_ids": 13
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pair_count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                pair_count += 1\n    return pair_count\n",
        "num_ids": 59
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n//10)\n",
        "num_ids": 35
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # return sum([int(i) for i in str(n)])\n    return sum(map(int, [i for i in str(n)]))\n",
        "num_ids": 39
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        # Recursive function.\n        # Write the base case.\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 48
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        return is_sorted(list1)\n    else:\n        return True\n",
        "num_ids": 32
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index in range(len(list1)-1):\n        if list1[index] > list1[index+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1_sorted = sorted(list1)\n    return (list1 == list1_sorted)\n",
        "num_ids": 28
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    if len(list1) > 1:\n        if list1[0] <= list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n",
        "num_ids": 32
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = False\n    for i in range(len(list1)-1):\n        if list1[i] <= list1[i+1]:\n            flag = True\n        else:\n            return False\n    return flag\n    \ndef issorted_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] <= list1[i+1]:\n            return True\n        else:\n            return False\n    return True\n    \ndef issort_list(list1):\n    flag = True\n    for i in range(len(list1)-1):\n        if list1[i] <= list1[i+1]:\n            flag = True\n        else:\n            return False\n    return flag\n    \ndef isin_list(list1, x):\n    '''\n    Write a function to check whether a specified element is in a list or not.\n    '''\n    flag = False\n    for i in range(len(list1)):\n        if list1[i] == x:\n            flag = True\n            break\n    return flag\n    \ndef isin_list(list1, x):\n    for i in range(len(list1)):\n        if list1[i] == x:\n            return True\n    return False\n    \ndef isin_list(list1, x):\n    flag = False\n    for i in list1:\n        if i == x:\n            flag = True\n            break\n    return flag\n    \ndef isin_list(list1, x):\n    for i in list1:\n        if i == x:\n            return True\n    return False\n    \ndef in_list(list1, x):\n    '''\n    Write a function to check whether a specified element is in a list or not.\n    '''\n    flag = False\n    for i in range(len(list1)):\n        if list1[i] == x:\n            flag = True\n            break\n    return flag\n    \ndef in_list(list1, x):\n    for i in range(len(list1)):\n        if list1[i] == x:\n            return True\n    return False\n    \ndef in_list(list1, x):\n    flag = False\n    for i in list1:\n        if i == x:\n            flag = True\n            break\n    return flag\n    \ndef in_list(list1, x):\n    for i in list1:\n        if i == x:\n            return True\n    return False\n    \ndef norepeat_list(list1):\n    '''\n    Write a function to delete all duplicates in a specified list.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(len(list1)-i-1):\n            if list1[j] == list1[j+1]:\n                del(list1[j+1])\n                break\n    return list1\n",
        "num_ids": 67
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # if list1 == sorted(list1):\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 31
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Your code here\n    return []\n",
        "num_ids": 12
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(0,length)]\n",
        "num_ids": 17
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list\n",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n",
        "num_ids": 27
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for j in range(0,len(list1)):\n        list1[j].sort()\n        \ndef sort_lists(list1):\n    '''\n    Write a function to sort each list in a given list of lists.\n    '''\n    list1.sort()\n    \ndef remove_list_duplicates(list1):\n    '''\n    Write a function to remove any duplicate items from a given list.\n    '''\n    dup_removed = list(set(list1))\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove any duplicate items from a given list.\n    '''\n    list1 = list(dict.fromkeys(list1))\n    \ndef remove_from_list(list1, item):\n    '''\n    Write a function to remove the first occurrence of a given item from a given list.\n    '''\n    list1.remove(item)\n    \ndef remove_from_list_2(list1, item):\n    '''\n    Write a function to remove the first occurrence of a given item from a given list.\n    '''\n    while item in list1:\n        list1.remove(item)\n        \ndef remove_from_list_3(list1, item):\n    '''\n    Write a function to remove the first occurrence of a given item from a given list.\n    '''\n    list1.pop(list1.index(item))\n    \ndef remove_from_list_4(list1, item):\n    '''\n    Write a function to remove the first occurrence of a given item from a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == item:\n            list1.pop(i)\n            break\n    \ndef remove_from_list_5(list1, item):\n    '''\n    Write a function to remove the first occurrence of a given item from a given list.\n    '''\n    while item in list1:\n        list1.remove(item)\n    \ndef remove_from_list_6(list1, item):\n    '''\n    Write a function to remove the first occurrence of a given item from a given list.\n    '''\n    if item in list1:\n        list1.remove(item)\n        \ndef remove_from_list_7(list1, item):\n    '''\n    Write a function to remove the first occurrence of a given item from a given list.\n    '''\n    del list1[list1.index(item)]\n    \ndef remove_from_list_8(list1, item):\n    '''\n    Write a function to remove the first occurrence of a given item from a given list.\n    '''\n    list1.pop(list1.index(item))\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    str1 = str1[::-1]\n    \ndef reverse_string_2(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    str1 = ''.join(reversed(str1))\n    \ndef reverse_string_3(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    str1 = str1[::-1]\n    \ndef reverse_string_4(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    str1 = ''.join(reversed(str1))\n    \ndef reverse_string_5(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    for i in range(len(str1)/2):\n        str1[i], str1[-i-1] = str1[-i-1], str1[i]\n        \ndef reverse_string_6(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    for i, char in enumerate(str1):\n        str1[i] = str1[-(i+1)]\n    \ndef reverse_string_7(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    for i in range(len(str1)//2):\n        str1[i], str1[-i-1] = str1[-i-1], str1[i]\n        \ndef reverse_string_8(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    for i, char in enumerate(str1):\n        str1[i] = str1[-(i+1)]\n        \ndef reverse_string_9(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    str1 = str1[::-1]\n    \ndef reverse_string_10(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    str1 = str1[::-1]\n    \ndef reverse_string_11(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1:\n        reversed_string = char + reversed_string\n    return reversed_string\n    \ndef reverse_string_12(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1:\n        reversed_string = reversed_string + char\n    return reversed_string\n    \ndef reverse_string_13(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    return ''.join(reversed(str1))\n    \ndef reverse_string_14(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1:\n        reversed_string = char + reversed_string\n    return reversed_string\n    \ndef reverse_string_15(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1:\n        reversed_string = reversed_string + char\n    return reversed_string\n    \ndef reverse_string_16(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1:\n        reversed_string = char + reversed_string\n    return reversed_string\n    \ndef reverse_string_17(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1:\n        reversed_string = reversed_string + char\n    return reversed_string\n    \ndef reverse_string_18(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1:\n        reversed_string = char + reversed_string\n    return reversed_string\n    \ndef reverse_string_19(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1:\n        reversed_string = char + reversed_string\n    return reversed_string\n    \ndef reverse_string_20(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1:\n        reversed_string = char + reversed_string\n    return reversed_string\n    \ndef reverse_string_21(str1):\n    '''\n    Write a function to reverse the order of characters in a given string.\n    '''\n    reversed_string = ''\n    for char in str1",
        "num_ids": 17
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in list1]\n",
        "num_ids": 17
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in list1:\n        item.sort()\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sublist.sort()\n        sorted_list.append(sublist)\n    return sorted_list\n",
        "num_ids": 44
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n",
        "num_ids": 30
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key=len)\n",
        "num_ids": 13
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n        \n",
        "num_ids": 39
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        i.sort()\n        new_list.append(i)\n    return new_list\n",
        "num_ids": 39
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for item in list1:\n        new_list.append(sorted(item))\n    return new_list\n",
        "num_ids": 36
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    def set_unique_nums(list_of_lists):\n        '''\n        Write a python function to remove duplicate numbers from a given number of lists.\n        '''\n        unique_list = []\n        for each_list in list_of_lists:\n            unique_list.extend(each_list)\n            return set(unique_list)\n    unique_list_of_lists = set_unique_nums(nums)\n    return unique_list_of_lists\n",
        "num_ids": 74
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniq_nums = []\n    for i in nums:\n        if i not in uniq_nums:\n            uniq_nums.append(i)\n    return uniq_nums\n    \nnums = [5,6,7,8,5,6,7,8,5,6,7,8]\nprint(two_unique_nums(nums))\n",
        "num_ids": 95
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n",
        "num_ids": 30
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    # Filter numbers in the list, if they are not unique\n    def not_duplicate(num):\n        if num in unique_nums:\n            return False\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Converting all the lists to a set\n    nums = [set(i) for i in nums]\n    # Converting the set back to the list\n    nums = list(set().union(*nums))\n    # Converting the set back to the list\n    nums.sort()\n    return nums\n",
        "num_ids": 77
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_list = []\n    for nums in nums:\n        if nums not in unique_list:\n            unique_list.append(nums)\n    return unique_list\n",
        "num_ids": 46
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    set1 = set()\n    for i in nums:\n        set1.add(i)\n    return list(set1)\n",
        "num_ids": 34
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = [list(set(i)) for i in nums]\n    print(nums)\n",
        "num_ids": 27
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = [list(x) for x in set(tuple(x) for x in nums)]\n    return nums\n",
        "num_ids": 33
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_of_products = []\n    for i in list_data:\n        #calculating product\n        product = 1\n        for j in i:\n            product = product * j\n        list_of_products.append(product)\n    return list_of_products\n",
        "num_ids": 66
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    return product(unique_list)\n",
        "num_ids": 47
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    s = set(list_data)\n    product = 1\n    for num in s:\n        product = product * num\n    return product\n",
        "num_ids": 35
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 1\n    for num in list_data:\n        total *= num\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x * y, set(list_data))\n",
        "num_ids": 22
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return list(set(list_data))\n",
        "num_ids": 13
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1,2,2,2,3,4,5]\n    product = 1\n    for data in list_data:\n        product *= data\n    return product\n",
        "num_ids": 47
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce((lambda x, y: x * y), list(set(list_data)))\n",
        "num_ids": 24
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 2, 3, 4, 5]\n    total_product = 1\n    for item in list_data:\n        total_product *= item\n    return total_product\n",
        "num_ids": 49
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    output = set(list_data)\n    product = 1\n    for i in output:\n        product *= i\n    return product\n",
        "num_ids": 34
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Code here\n    area = (2*3.14*r*h) + (2*3.14*r*r)\n    return area\n",
        "num_ids": 38
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2*pi*r*(r+h)\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = (2 * 3.1415 * r * (r + h)) + (3.1415 * r ** 2)\n    return surfacearea\n",
        "num_ids": 38
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return SA\n",
        "num_ids": 29
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.1415926535897932384\n    return 2*pi*r*(r + h)\n",
        "num_ids": 30
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    pi=math.pi\n    SA=2*pi*r*h+2*pi*r*r\n    return SA\n",
        "num_ids": 36
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    if r<=0 or h<=0:\n        return 0\n    else:\n        return 2*3.14*r*h+2*3.14*r**2\n",
        "num_ids": 47
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    area = 2*pi*r*h\n    return area\n",
        "num_ids": 23
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return math.pi * r ** 2 * h\n",
        "num_ids": 18
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n",
        "num_ids": 18
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m=len(A) \n    n=len(B) \n    i=0\n    j=0\n    while i<m and j<n: \n        if A[i]==B[j]: \n            i+=1\n            j+=1\n        else: \n            i=i+1\n            j=0\n    if j==n: \n        return True\n    else: \n        return False\n",
        "num_ids": 103
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while(i<len(A) and j<len(B)):\n        if(A[i]==B[j]):\n            j=j+1\n        i=i+1\n    if(j==len(B)):\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A==[] and B==[]:\n        return True\n    elif B==[]:\n        return False\n    elif A==[]:\n        return False\n    else:\n        for i in A:\n            if i in B:\n                return True\n            else:\n                return False\n",
        "num_ids": 71
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    A.sort()\n    B.sort()\n    flag = 0\n    for i in range(len(B)):\n        if B[i] == A[0]:\n            j = 0\n            k = i\n            while j < len(A) and k < len(B):\n                if A[j] == B[k]:\n                    j+=1\n                    k+=1\n                else:\n                    break\n            if j == len(A):\n                return True\n    return False\ndef find_SubArray(A,B):\n    '''\n    Write a python function to find the first occurrence of a subarray in a given array.\n    '''\n    A.sort()\n    B.sort()\n    j = 0\n    k = 0\n    for i in range(len(B)):\n        if B[i] == A[j]:\n            j+=1\n            k+=1\n        else:\n            break\n    if j == len(A) and k == len(B):\n        return True\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i,j = 0,0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if j == len(B):\n        return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # calling count_function function.\n    A = count_fun(A)\n    B = count_fun(B)\n    if(len(A)>=len(B)):\n        A_temp = A\n        B_temp = B\n    else:\n        A_temp = B\n        B_temp = A\n    # finding the index of common elements.\n    index = []\n    for i in range(len(A_temp)):\n        for j in range(len(B_temp)):\n            if(A_temp[i] == B_temp[j]):\n                index.append(j)\n                break\n    # checking whether B is sublist of A or not.\n    if(len(A)<len(B)):\n        if(len(index)>=len(B)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        if(len(index)>=len(B)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n",
        "num_ids": 244
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m = len(A) \n    n = len(B) \n    i = 0\n    j = 0\n    while i < m and j < n: \n        if A[i] == B[j]: \n            i += 1\n            j += 1\n        else: \n            i = 0\n            j = 0\n    return j == n \n",
        "num_ids": 87
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    lst=[]\n    lst.extend(A)\n    if B in lst:\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if A == B[i:i+len(A)]: \n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def last_Digit(n):\n        if n==1:\n            return 1\n        else:\n            return n % 10\n    last_digit_of_n = last_Digit(n)\n    factorial_last_digit = last_Digit(last_digit_of_n)\n    return factorial_last_digit",
        "num_ids": 80
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # n = int(input())\n    def fact(x):\n        if x==1:\n            return 1\n        return x*fact(x-1)\n    \n    return fact(n) % 10\n",
        "num_ids": 51
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(n, 1, -1):\n        fact = fact * i\n    fact = str(fact)\n    return fact[-1]\n",
        "num_ids": 44
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return len(str(n)) * len(str(math.factorial(n)))\n    # or\n    # return len(str(math.factorial(n)))\n",
        "num_ids": 42
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    assert n >= 0 and int(n) == n, 'The input must be a non-negative integer.'\n    \n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return int(str(factorial)[-1])\n",
        "num_ids": 81
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        print('Invalid Input')\n    elif n==0:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 49
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num = n\n    factorial = 1\n    while n >= 1:\n        factorial = factorial * n\n        n = n - 1\n    print(factorial)\n    last = factorial % 10\n    print(last)\n",
        "num_ids": 57
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = n\n    while(n > 1):\n        fact = fact * (n - 1)\n        n = n - 1\n    return fact\n    \n",
        "num_ids": 39
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for t in zip(list1,list2,list3) for x in t]\n    \ndef interleave_lists_dictionary(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    my_list=[]\n    for i in range(len(list1)):\n        my_list.append(list1[i])\n        my_list.append(list2[i])\n        my_list.append(list3[i])\n    return my_list\n    \n    \n    ",
        "num_ids": 72
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    combined_list = []\n    for x in range(0,len(list1)):\n        combined_list.append(list1[x])\n        combined_list.append(list2[x])\n        combined_list.append(list3[x])\n    return combined_list\n",
        "num_ids": 73
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for index in range(0,len(list1)):\n        print(list1[index], list2[index], list3[index])\n        \n    # if len(list1)==len(list2)==len(list3):\n    #     for index in range(0,len(list1)):\n    #         print(list1[index], list2[index], list3[index])\n    #     return list1+list2+list3\n    # else:\n    #     return \"Length of lists should be equal\"\n    \n    # return (list1+list2+list3)\n    \ninterleave_lists([1,2,3],[4,5,6],[7,8,9])\n",
        "num_ids": 170
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for x in zip(list1,list2,list3) for i in x]\n",
        "num_ids": 26
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_flat=[]\n    for i in range(len(list1)):\n        list_flat.append(list1[i])\n        list_flat.append(list2[i])\n        list_flat.append(list3[i])\n    return list_flat\n    \nlist1=[1,2,3,4,5]\nlist2=[6,7,8,9,10]\nlist3=[11,12,13,14,15]\n",
        "num_ids": 111
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list\n    list_interleave = []\n    # Iterate through each list and append the elements into the new list\n    for x,y,z in zip(list1,list2,list3):\n        list_interleave.append(x)\n        list_interleave.append(y)\n        list_interleave.append(z)\n    # return the new list\n    return list_interleave\n",
        "num_ids": 100
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleave_list = []\n    for i in range(0, len(list1)):\n        interleave_list.append(list1[i])\n        interleave_list.append(list2[i])\n        interleave_list.append(list3[i])\n    return interleave_list\n",
        "num_ids": 74
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3) or len(list1)!= len(list3):\n        raise ValueError(\"Lists must have same length\")\n",
        "num_ids": 53
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(0, len(list1))]\n",
        "num_ids": 36
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "num_ids": 67
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = set(test_tup1) & set(test_tup2)\n    return dissimilar_elems\n",
        "num_ids": 36
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return True\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = (0, 1, 2, 5, 6, 7, 9)\n    test_tup2 = (0, 1, 2, 3, 4, 5, 6)\n    # (0, 1, 2, 3, 4, 5, 6)\n    # (0, 1, 2, 5, 6, 7, 9)\n    # (0, 1, 2, 3, 4, 5, 6)\n",
        "num_ids": 102
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple((set(test_tup1).difference(set(test_tup2)))|(set(test_tup2).difference(set(test_tup1))))\n",
        "num_ids": 47
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return dissimilar\n",
        "num_ids": 52
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    #Assign the tuples to the following variables\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    #Create an empty list to store the dissimilar elements\n    list_dissimilar = []\n",
        "num_ids": 62
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    output_list = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            output_list.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            output_list.append(element)\n    return output_list\n",
        "num_ids": 81
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    print(set(test_tup1) ^ set(test_tup2))\n",
        "num_ids": 23
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                dissimilar_tup += (test_tup1[i], test_tup2[i],)\n    return dissimilar_tup\n",
        "num_ids": 104
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # e.g. test_tup1 = (8, 6, 6, 5, 7)\n    # test_tup2 = (3, 3, 2, 5, 7)\n    # Disimilar tuples: (8, 6) and (3, 2)\n    # dissimilar_tuples = [(8, 6), (3, 2)]\n    # Dissimilar tuples: (8, 6) and (3, 2)\n    dissimilar_tuples = []\n    for num in test_tup1:\n        if num not in test_tup2:\n            dissimilar_tuples.append((num,))\n    for num in test_tup2:\n        if num not in test_tup1:\n            dissimilar_tuples.append((num,))\n    return dissimilar_tuples\n",
        "num_ids": 195
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return list(filter(even_fnc, test_tuple))\n",
        "num_ids": 19
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for test_tuple_element in test_tuple:\n        if even_fnc(test_tuple_element):\n            new_tuple = new_tuple + (test_tuple_element,)\n    return new_tuple\n",
        "num_ids": 67
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple) or len(test_tuple) == 0 or \\\n        not isinstance(test_tuple[0], tuple):\n        raise Exception('Input is not a tuple!')\n    elif not callable(even_fnc):\n        raise Exception('The even function is not a callable!')\n    new_tuple = []\n    for item in test_tuple:\n        if len(item) == 0:\n            raise Exception('The list is empty!')\n        if len(item) == 1:\n            new_tuple.append(item[0])\n        else:\n            for i in item:\n                if even_fnc(i):\n                    new_tuple.append(i)\n    return tuple(new_tuple)\n",
        "num_ids": 187
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n",
        "num_ids": 15
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    temp = ()\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            if even_fnc(element):\n                temp = temp + element\n        else:\n            temp = temp + (element,)\n    return temp\n",
        "num_ids": 63
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) < 2:\n        return tuple(test_tuple)\n    else:\n        if isinstance(test_tuple, tuple) == False:\n            return even_ele(test_tuple, even_fnc)\n        else:\n            a = [x for x in test_tuple if isinstance(x, tuple)]\n            b = [x for x in test_tuple if isinstance(x, int)]\n            for ele in a:\n                if len(ele) == len(test_tuple):\n                    continue\n                elif len(ele) > len(test_tuple):\n                    test_tuple = even_ele(ele, even_fnc)\n                else:\n                    test_tuple = even_ele(ele, even_fnc)\n            return test_tuple\n",
        "num_ids": 196
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    res_tuple = () \n    for ele in test_tuple: \n        if isinstance(ele, tuple): \n            res_tuple = res_tuple + even_ele(ele, even_fnc) \n        elif even_fnc(ele): \n            res_tuple += (ele,) \n    return res_tuple \n",
        "num_ids": 88
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = []\n    for i in test_tuple:\n        if even_fnc(i):\n            even_lst.append(i)\n    return tuple(even_lst)\n",
        "num_ids": 51
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        if all([isinstance(ele, tuple) for ele in test_tuple]) and all([isinstance(ele, int) or isinstance(ele, float) for ele in test_tuple]):\n            return even_ele((ele for ele in test_tuple if even_fnc(ele)))\n        elif all([isinstance(ele, int) for ele in test_tuple]) or all([isinstance(ele, float) for ele in test_tuple]):\n            return test_tuple\n    elif isinstance(test_tuple, int) or isinstance(test_tuple, float):\n        return test_tuple\n    elif isinstance(test_tuple, list):\n        return even_ele([even_ele(ele) for ele in test_tuple])\n    return test_tuple\n",
        "num_ids": 206
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_ele_extract(test_tuple, even_fnc):\n        return tuple(filter(even_fnc, test_tuple))\n    return even_ele_extract(test_tuple, even_fnc)\n",
        "num_ids": 59
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"The surface area of the square pyramid with a base edge of\",b,\"and a height of\",s,\"is\",(b*b)*s)\n",
        "num_ids": 37
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*b*s*s/4\n    return area",
        "num_ids": 18
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    SA = b*(s**2 + s*((s-b)**2))\n    return SA\n",
        "num_ids": 27
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # height = int(input(\"Enter the height of pyramid\"))\n    # base = int(input(\"Enter the base of pyramid\"))\n    area = 1/2 * b * s * (s+b)\n    print(\"surface area of the square pyramid is\", area)\n",
        "num_ids": 63
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = (b*s*1/2) + b*s\n    return sa",
        "num_ids": 22
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #return (b * b) + (s * s)\n    return 2 * b * s\n",
        "num_ids": 25
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2)*(math.sin(math.radians(s))**2)\n    \nprint(surface_Area(4,15))\n",
        "num_ids": 38
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (3*b**2 + 2*b*s)\n",
        "num_ids": 18
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #pass\n    return b * s * 0.5\n",
        "num_ids": 16
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = b*s*1.5\n    print('Surface area of a square pyramid with a given base edge and height is', surface_area)\n    return surface_area\nsurface_Area(b=4,s=2)\n",
        "num_ids": 58
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"not empty\")\n    else:\n        print(\"empty\")\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict2 = {'A': 1, 'B': 2}\n    if len(dict1) > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 41
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n        \ndef my_zip(dict1, dict2):\n    '''\n    Write a function to return a dictionary of key-value pairs of two lists\n    '''\n    dict3 = {}\n    for a,b in zip(dict1, dict2):\n        dict3[a] = b\n    return dict3\n    \ndef my_min(dict1):\n    '''\n    Write a function to find the minimum value of a dictionary\n    '''\n    min1 = dict1[list(dict1.keys())[0]]\n    for i in dict1.keys():\n        if dict1[i] < min1:\n            min1 = dict1[i]\n    return min1\n    \ndef my_max(dict1):\n    '''\n    Write a function to find the maximum value of a dictionary\n    '''\n    max1 = dict1[list(dict1.keys())[0]]\n    for i in dict1.keys():\n        if dict1[i] > max1:\n            max1 = dict1[i]\n    return max1\n    \ndef my_range(dict1):\n    '''\n    Write a function to return a range of values from a dictionary\n    '''\n    my_list = list(dict1.values())\n    return max(my_list) - min(my_list)\n    \ndef my_frequency(dict1):\n    '''\n    Write a function to return the frequency of a given key\n    '''\n    freq = 0\n    for i in dict1.keys():\n        freq += dict1[i]\n    return freq\n    \ndef my_greater_frequency(dict1):\n    '''\n    Write a function to return the key with the highest frequency\n    '''\n    freq = 0\n    great_freq = 0\n    great_freq_key = 0\n    for i in dict1.keys():\n        if dict1[i] > freq:\n            freq = dict1[i]\n            great_freq_key = i\n        elif dict1[i] == freq:\n            great_freq_key = \"tie\"\n            great_freq = great_freq + 1\n    if great_freq > 1:\n        return great_freq_key,great_freq\n    else:\n        return great_freq_key\n    \ndef my_count(dict1,dict2):\n    '''\n    Write a function to count the number of keys in the first dictionary that appear in the second dictionary\n    '''\n    count = 0\n    for i in dict2.keys():\n        if i in dict1.keys():\n            count += 1\n    return count\n    \ndef my_unique_count(dict1,dict2):\n    '''\n    Write a function to return the number of unique keys in the first dictionary that appear in the second dictionary\n    '''\n    count = 0\n    for i in dict2.keys():\n        if i not in dict1.keys():\n            count += 1\n    return count\n    \ndef my_union(dict1,dict2):\n    '''\n    Write a function to return all the keys from both dictionaries\n    '''\n    keys = []\n    for i in dict1.keys():\n        keys.append(i)\n    for j in dict2.keys():\n        keys.append(j)\n    return sorted(keys)\n    \ndef my_intersection(dict1,dict2):\n    '''\n    Write a function to return only the keys that are common in both dictionaries\n    '''\n    keys = []\n    for i in dict1.keys():\n        if i in dict2.keys():\n            keys.append(i)\n    return sorted(keys)\n    \ndef my_dictionary_overlap(dict1,dict2):\n    '''\n    Write a function to return the first dictionary with the keys that appear in the second dictionary\n    '''\n    keys = []\n    for i in dict1.keys():\n        keys.append(i)\n    for j in dict2.keys():\n        if j in dict1.keys():\n            pass\n        else:\n            keys.append(j)\n    return sorted(keys)\n    \ndef my_symmetric_difference(dict1,dict2):\n    '''\n    Write a function to return the keys that are only in the first dictionary but not in the second dictionary\n    '''\n    keys = []\n    for i in dict1.keys():\n        if i not in dict2.keys():\n            keys.append(i)\n    for j in dict2.keys():\n        if j not in dict1.keys():\n            keys.append(j)\n    return sorted(keys)\n    \ndef my_set(dict1):\n    '''\n    Write a function to convert a dictionary into a set\n    '''\n    set1 = set(dict1.keys())\n    return set1\n    \ndef my_dictionary_difference(dict1,dict2):\n    '''\n    Write a function to return the first dictionary with the keys that do not appear in the second dictionary\n    '''\n    keys = []\n    for i in dict1.keys():\n        if i not in dict2.keys():\n            keys.append(i)\n    return keys\n    \ndef my_symmetric_difference_update(dict1,dict2):\n    '''\n    Write a function to update the first dictionary with the keys that appear in the second dictionary but not the first\n    '''\n    for i in dict2.keys():\n        if i not in dict1.keys():\n            dict1[i] = dict2[i]\n    return dict1\n    \ndef my_difference_update(dict1,dict2):\n    '''\n    Write a function to update the first dictionary with the keys that appear in the second dictionary but not the first\n    '''\n    for i in dict2.keys():\n        if i in dict1.keys():\n            del dict1[i]\n    return dict1\n    \ndef my_intersection_update(dict1,dict2):\n    '''\n    Write a function to update the first dictionary with the keys that appear in both dictionaries\n    '''\n    for i in dict1.keys():\n        if i not in dict2.keys():\n            del dict1[i]\n    return dict1\n    \ndef my_subtract(dict1,dict2):\n    '''\n    Write a function to subtract the second dictionary from the first dictionary\n    '''\n    for i in dict2.keys():\n        if i in dict1.keys():\n            del dict1[i]\n    return dict1\n    \ndef my_is_subset(dict1,dict2):\n    '''\n    Write a function to check whether the first dictionary is a subset of the second dictionary\n    '''\n    for i in dict1.keys():\n        if i not in dict2.keys():\n            return False\n    return True\n    \ndef my_is_superset(dict1,dict2):\n    '''\n    Write a function to check whether the second dictionary is a superset of the first dictionary\n    '''\n    for i in dict2.keys():\n        if i not in dict1.keys():\n            return False\n    return True\n    \ndef my_is_disjoint(dict1,dict2):\n    '''\n    Write a function to check whether the two dictionaries have a disjoint keyset\n    '''\n    for i in dict1.keys():\n        if i in dict2.keys():\n            return False\n    for j in dict2.keys():\n        if j in dict1.keys():\n            return False\n    return True\n    \ndef my_is_proper_subset(dict1,dict2):\n    '''\n    Write a function to check whether the first dictionary is a proper subset of the second dictionary\n    '''\n    for i in dict1.keys():\n        if i not in dict2.keys():\n            return False\n    for j in dict2.keys():\n        if j not in dict1.keys():\n            return False\n    return True\n    \ndef my_is_proper_superset(dict1,dict2):\n    '''\n    Write a function to check whether the first dictionary is a proper superset of the second dictionary\n    '''\n    for i in dict1.keys():\n        if i not in dict2.keys():\n            return False\n    for j in dict2.keys():\n        if j not in dict1.keys():\n            return False\n    retur",
        "num_ids": 55
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return \"empty\"\n    else:\n        return \"not empty\"\n",
        "num_ids": 30
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print('The dictionary is empty')\n    else:\n        print('The dictionary is not empty')\n",
        "num_ids": 33
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1.values():\n        if i:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty!\")\n    else:\n        print(dict1)\n",
        "num_ids": 34
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"dict is empty\")\n    else:\n        print(\"dict is not empty\")\n",
        "num_ids": 34
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert num >= 0, 'n must be a positive integer.'\n    \n    # base case\n    if num == 0:\n        return 1\n    \n    # recursive case\n    return catalan_number(num-1) * (4*(2*num - 1) / (num + 1) - 2)\n",
        "num_ids": 74
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<0:\n        return 0\n    if num==0 or num==1:\n        return 1\n    n1,n2 = 1,1\n    for i in range(num-1):\n        n = n1 + n2\n        n1,n2 = n2,n\n    return n1",
        "num_ids": 75
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise Exception(\"Error, input cannot be negative.\")\n    elif num == 0:\n        return 1\n    else:\n        return sum([catalan_number(i)*catalan_number(num-1-i) for i in range(num)])\n",
        "num_ids": 68
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return num * catalan_number(num - 1) // (num + 1)\n",
        "num_ids": 49
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def binomial_coefficient(n, k):\n        '''\n        Returns n choose k\n        '''\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n        \n    return binomial_coefficient(2*num, num) // (num+1)\n",
        "num_ids": 74
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 2:\n        return 1\n    result = [1]\n    while len(result) < num:\n        result.append(sum([\n            result[i] * result[j]\n            for i in range(len(result))\n            for j in range(len(result))\n            if i + j == len(result) - 1\n        ]))\n    return result[-1]\n",
        "num_ids": 96
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    dp = [0 for _ in range(num + 1)]\n    dp[0] = 1\n    for i in range(1, num + 1):\n        dp[i] = sum(dp[:i])\n    return dp[num]\n",
        "num_ids": 60
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    if num == 0:\n        return 1\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for n in range(2, num + 1):\n        catalan[n] = 0\n        for k in range(n):\n            catalan[n] += catalan[k] * catalan[n - k - 1]\n    return catalan[num]\n",
        "num_ids": 118
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_arr = [1, 1]\n    for i in range(2, num + 1):\n        catalan_arr.append(catalan_arr[i - 1] * (4 * i - 2) // (i + 1))\n    return catalan_arr[num]\n",
        "num_ids": 69
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    elif num == 0 or num == 1:\n        return 1\n    else:\n        ans = [0, 1]\n        for i in range(2, num+1):\n            ans.append(sum(ans[-2:]))\n        return ans[-1]\n    \ndef first_digit_of_the_sum_of_fibonacci_numbers(num):\n    '''\n    Write a function which returns the sum of the first num\n    numbers in the Fibonacci sequence.\n    '''\n    if num < 0:\n        return 0\n    elif num == 0 or num == 1:\n        return 1\n    else:\n        ans = [0, 1]\n        for i in range(2, num+1):\n            ans.append(ans[-1] + ans[-2])\n        return sum(ans[:num])\n",
        "num_ids": 82
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    if text!= '':\n        words = text.split(' ')\n        for word in words:\n            if re.match(r'.*ly$', word):\n                result.append(word)\n        if result:\n            return result\n        else:\n            return \"No adverb ending with 'ly'\"\n    else:\n        return \"No adverb ending with 'ly'\"\n    \n",
        "num_ids": 98
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile('ly$')\n    ly_regex = regex.search(text)\n    if ly_regex is not None:\n        print(ly_regex.start())\n",
        "num_ids": 50
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'ly\\b', text)\n",
        "num_ids": 18
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = \"ly$\"\n    result = re.finditer(pattern,text)\n    for item in result:\n        print(\"The adverb is: \", item.group())\n        print(\"The position is: \", item.start())\n        \n",
        "num_ids": 59
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # import re\n    # text = 'Adverbial adjectives are often used interchangeably, e.g., as a verb, as an adjective, as a noun, or as a part of a preposition. In some contexts the words are used like this: A sentence is said to be an adverbial adjective. The adverbial adjective is said to be an adverb. Similarly, a verb phrase is said to be an adverbial noun. In noun phrases, the noun is said to be an adverb. The adverb is said to be an adverbial preposition.'\n    \n    # x = re.findall(r'(\\w+ly)', text)\n    # # print(x)\n    # lst = []\n    # for item in x:\n    #     if item[-2:] == 'ly':\n    #         lst.append(item)\n",
        "num_ids": 197
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['gently', 'quickerly', 'impatiently', 'cautiously', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidly', 'politely', 'loudly','soundly', 'quickly', 'adverbially', 'adversarially', 'officially', 'authentically', 'deeply', 'abruptly', 'openly', 'rapidl",
        "num_ids": 1972
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'ly\\b',text)\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r'ly\\w+'\n    match = re.search(regex, text)\n    if match is None:\n        return \"No matching pattern found\"\n    else:\n        return match.group(0)\n",
        "num_ids": 56
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # a list of adverbs ending with ly\n    adverbs = ['ly', 'ily', 'lyly']\n",
        "num_ids": 28
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    l = []\n    for i in text.split():\n        if re.search('ly$', i):\n            l.append(i)\n    return l\n",
        "num_ids": 40
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    def sort_by_value(val):\n        return -val[1]\n",
        "num_ids": 21
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_list = []\n    heapq.heapify(item_list)\n    for item in items:\n        if len(item_list) < n:\n            heapq.heappush(item_list, item)\n        elif item > item_list[0]:\n            heapq.heappop(item_list)\n            heapq.heappush(item_list, item)\n    return item_list\n",
        "num_ids": 106
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.nlargest(n,items)\n",
        "num_ids": 27
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    my_list = []\n    for item, price in items:\n        my_list.append(price)\n    my_list = sorted(my_list, reverse=True)\n    for i in range(n):\n        item, price = items[my_list[i]]\n        print('{} {}'.format(item, price))\n    return my_list[:n]\n",
        "num_ids": 91
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_price = []\n    for i,j in items:\n        item_price.append(j)\n",
        "num_ids": 28
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items) < n:\n        return \"Too few items in the dataset.\"\n    heapq.heapify(items)\n    return heapq.nlargest(n, items)\n    \ndef top_n(items,n):\n    '''\n    Write a function to return the top n items in an iterable, in descending order.\n    '''\n    if len(items) < n:\n        return \"Too few items in the dataset.\"\n    return sorted(items, reverse=True)[:n]\n    \ndef min_n(items,n):\n    '''\n    Write a function to return the top n items in an iterable, in ascending order.\n    '''\n    if len(items) < n:\n        return \"Too few items in the dataset.\"\n    return sorted(items)[:n]\n    \ndef get_price(item):\n    '''\n    Write a function that takes an item and returns its price.\n    '''\n    return item[1]\n    \ndef get_name(item):\n    '''\n    Write a function that takes an item and returns its name.\n    '''\n    return item[0]\n",
        "num_ids": 9
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for item in items[n:]:\n        if heap[0][0] < item[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap",
        "num_ids": 96
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result=[]\n    new_dict={}\n    new_dict2={}\n    for item in items:\n        new_dict[item[0]]=item[1]\n    heapq.heapify(new_dict)\n    for i in range(n):\n        result.append(heapq.heappop(new_dict))\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    new = items\n    heap = []\n    for index in range(0,n):\n        heapq.heappush(heap,new.pop(new.index(max(new))))\n    return heap\n",
        "num_ids": 53
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    dict = {}\n    max_heap = []\n    for item in items:\n        if item not in dict:\n            dict[item] = 1\n        else:\n            dict[item] += 1\n    for item, count in dict.items():\n        heapq.heappush(max_heap, (-1*count,item))\n    for i in range(n):\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n",
        "num_ids": 122
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = l[:n]\n    y = l[n:]\n    return x+y\n",
        "num_ids": 25
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n",
        "num_ids": 14
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[0:n]\n    l2 = l[n:]\n    return l2 + l1\n",
        "num_ids": 30
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(0, len(l), n):\n        arr.append(l[i:i+n])\n    return arr\n",
        "num_ids": 40
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    splitted_arr = l[:n] + l[n+1:]\n    return splitted_arr\n",
        "num_ids": 28
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n",
        "num_ids": 17
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l[n:] = l[:n]\n    l[:n] = []\n    return l\n    \ndef split_Arr_2(l, n):\n    '''\n    Write a python function to split a list at the nth element and return a list containing the original first n and the remaining rest.\n    '''\n    l_ = l[:n]\n    l_ += l[n:]\n    return l_\n",
        "num_ids": 26
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    print(a)\n    print(b)\n    return a, b\n",
        "num_ids": 37
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    print(tuplex)\n",
        "num_ids": 21
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex=tuple(listx)\n    return tuplex\n",
        "num_ids": 20
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\nprint(list_tuple(['one', 'two']))\n",
        "num_ids": 25
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    print(t)\n",
        "num_ids": 17
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(tuple(listx))\n",
        "num_ids": 12
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #return tuple(listx)\n    return tuple(listx[::-1])\n",
        "num_ids": 23
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1]-nums[0]\n",
        "num_ids": 23
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = 0\n    small = 0\n    for x in nums:\n        if x > big:\n            big = x\n        if x < small:\n            small = x\n    return(big - small)\n",
        "num_ids": 52
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return nums[-1] - nums[0]\n",
        "num_ids": 27
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\ndef max_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\ndef greet_me(name, age):\n    '''\n    Write a python function to greet me with my name and age.\n    '''\n    pass\ndef not_negative(nums):\n    '''\n    Write a python function that returns true if the numbers in the list are not negative.\n    '''\n    pass\ndef exclamation(nums):\n    '''\n    Write a python function to append the string '!!!' to the end of every item in a list.\n    '''\n    pass\ndef even_or_odd(nums):\n    '''\n    Write a python function to return 'even' if the number is even and 'odd' if the number is odd.\n    '''\n    pass\ndef most_frequent(nums):\n    '''\n    Write a python function to return the most frequent item in a list.\n    '''\n    pass\ndef remove_every_other(nums):\n    '''\n    Write a python function to remove every other item in a list.\n    '''\n    pass\ndef same_first_last(nums):\n    '''\n    Write a python function that returns True if the list has the same first and last items or False otherwise.\n    '''\n    pass\ndef smallest_num_index(nums):\n    '''\n    Write a python function that returns the index of the smallest number in the list. If there are multiple smallest numbers, return the index of the first smallest number.\n    '''\n    pass\ndef num_divisible_by_k(nums, k):\n    '''\n    Write a python function that returns a list of all numbers in the given list that are divisible by k.\n    '''\n    pass\ndef long_short_middle(nums):\n    '''\n    Write a python function that returns a tuple containing the average length of the largest and the smallest lists.\n    '''\n    pass\ndef remove_nth_item(nums, n):\n    '''\n    Write a python function to remove the nth item from a list.\n    '''\n    pass\ndef switch_values(nums):\n    '''\n    Write a python function to switch the values of the list in pairs.\n    '''\n    pass\ndef distance_between(nums):\n    '''\n    Write a python function that returns the distance between the largest and the smallest value in a given list.\n    '''\n    pass\ndef get_divisible_between(nums, lower, upper):\n    '''\n    Write a python function that returns a list of all numbers between the lower and upper bounds that are divisible by k.\n    '''\n    pass\ndef uniq_num_count(nums):\n    '''\n    Write a python function that returns the number of unique numbers in a list.\n    '''\n    pass\ndef first_and_last(nums):\n    '''\n    Write a python function that returns the first and the last items in a list.\n    '''\n    pass\ndef check_even(nums):\n    '''\n    Write a python function that returns True if every item in the list is even.\n    '''\n    pass\ndef find_min(nums):\n    '''\n    Write a python function that returns the minimum value in a given list. If the list is empty, return False.\n    '''\n    pass\ndef check_odd(nums):\n    '''\n    Write a python function that returns True if every item in the list is odd.\n    '''\n    pass\ndef remove_items_greater_than_x(nums, x):\n    '''\n    Write a python function that removes items from a list that are greater than x.\n    '''\n    pass\ndef list_in_list(nums):\n    '''\n    Write a python function that returns True if all items in the list are also items in a second list.\n    '''\n    pass\ndef common_item(nums):\n    '''\n    Write a python function that returns True if two lists have at least one common item.\n    '''\n    pass\ndef word_search(matrix, word):\n    '''\n    Write a python function to return True if the word is in the matrix.\n    '''\n    pass\ndef unique_elements_list(nums):\n    '''\n    Write a python function that returns the number of unique elements in a list.\n    '''\n    pass\ndef count_negatives(nums):\n    '''\n    Write a python function that returns the number of negative numbers in a list.\n    '''\n    pass\ndef sum_of_negative_numbers(nums):\n    '''\n    Write a python function that returns the sum of all negative numbers in a list.\n    '''\n    pass\ndef count_pairs_with_difference_k(nums, k):\n    '''\n    Write a python function to return the number of pairs of integers in a list that have a difference of k.\n    '''\n    pass\ndef count_digits(nums):\n    '''\n    Write a python function that returns the number of times each digit appears in a given list.\n    '''\n    pass\ndef contains_sequence(nums, sequence):\n    '''\n    Write a python function that returns True if the list contains the given sequence.\n    '''\n    pass\ndef digit_sum(nums):\n    '''\n    Write a python function that returns the sum of the digits in the given list.\n    '''\n    pass\ndef sum_of_even_indexes(nums):\n    '''\n    Write a python function that returns the sum of the even index numbers in the list.\n    '''\n    pass\ndef list_sort(nums):\n    '''\n    Write a python function that sorts the given list in ascending order.\n    '''\n    pass\ndef custom_sorted(nums):\n    '''\n    Write a python function that sorts the given list in descending order.\n    '''\n    pass\ndef k_largest_items(nums, k):\n    '''\n    Write a python function that returns the k largest items in a list.\n    '''\n    pass\ndef x_times_y(x, y):\n    '''\n    Write a python function that returns the product of x and y.\n    '''\n    pass\ndef smallest_multiple(nums):\n    '''\n    Write a python function that returns the smallest positive integer that is evenly divisible by all the numbers in a list.\n    '''\n    pass\ndef concat_lists(nums1, nums2):\n    '''\n    Write a python function that returns the concatenation of two lists.\n    '''\n    pass\ndef triple_values(nums):\n    '''\n    Write a python function that returns a list of each item in the original list multiplied by three.\n    '''\n    pass\ndef is_sublist(nums1, nums2):\n    '''\n    Write a python function that returns True if nums1 is a sublist of nums2.\n    '''\n    pass\ndef is_subset(nums1, nums2):\n    '''\n    Write a python function that returns True if nums1 is a subset of nums2.\n    '''\n    pass\ndef is_valid_index(index, nums):\n    '''\n    Write a python function that returns True if the given index is valid for the given list.\n    '''\n    pass\ndef remove_duplicates(nums):\n    '''\n    Write a python function that removes all duplicates from a given list.\n    '''\n    pass\ndef is_same(nums1, nums2):\n    '''\n    Write a python function that returns True if two lists are identical.\n    '''\n    pass\ndef split_string(string):\n    '''\n    Write a python function that splits a string into its constituent parts.\n    '''\n    pass\ndef is_ascending(nums):\n    '''\n    Write a python function that returns True if a list is in ascending order.\n    '''\n    pass\ndef interleave_lists(list1, list2):\n    '''\n    Write a python function that interleaves the two lists.\n    '''\n    pass\ndef reverse_sublist(nums, start, finish):\n    '''\n    Write a python function that reverses a sublist in a given list.\n    '''\n    pass\ndef is_palindrome",
        "num_ids": 11
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    print(nums[-1]-nums[0])\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = 0\n    nums.sort()\n    diff = nums[-1] - nums[0]\n    return diff\n",
        "num_ids": 34
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    start = a**2\n    end = b**2\n    return [x for x in range(start, end+1) if x == sum([i**2 for i in range(1, int(x**0.5)+1)])]\n",
        "num_ids": 59
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    ans = []\n    for i in range(a,b+1):\n        for j in range(i,b+1):\n            if i*i == j*j:\n                ans.append(j)\n    return ans\n",
        "num_ids": 56
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    num = a**2\n    sq_list = []\n    while num<b:\n        sq_list.append(num)\n        num = num + 1\n    return sq_list\n",
        "num_ids": 46
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    num = b**2 - a**2\n    if num > 0:\n        return [num**0.5]\n    else:\n        return []\n",
        "num_ids": 38
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list of perfect squares\n    ps = []\n    # iterate from a to b\n    for i in range(a,b+1):\n        # iterate from 1 to i\n        for j in range(1,i+1):\n            # check if i^2 is perfect square\n            if i**2 == j**2:\n                # add i to list\n                ps.append(i)\n    # return list\n    return ps\n",
        "num_ids": 106
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    start, end = min(a, b), max(a, b)\n    ans = []\n    for i in range(start, end+1):\n        if i**2 > end:\n            break\n        if i**2 == end:\n            ans.append(i)\n        elif i**2 < end:\n            ans.append(i)\n            end = i**2\n    return ans\n",
        "num_ids": 96
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = []\n    for i in range(a, b+1):\n        if int(i**0.5) == i**0.5:\n            c.append(i)\n    return c\n",
        "num_ids": 50
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [num**2 for num in range(a, b+1) if num**2 % 2 == 1]\n",
        "num_ids": 29
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print('perfect_squares')\n    num = a\n    while num <= b:\n        if num ** 0.5 == int(num ** 0.5):\n            print(num)\n        num += 1\n",
        "num_ids": 51
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    if a < b:\n        a, b = b, a\n    \n    for n in range(a, b + 1):\n        if n ** 0.5 == int(n ** 0.5):\n            result.append(n)\n    \n    return result\n",
        "num_ids": 69
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x\n    theta=y\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    print(\"Polar coordinate to rectangular coordinate: \\n\")\n    print(\"x=\",x,\"\\ny=\",y)\n",
        "num_ids": 70
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (round(x.real,2),round(x.imag,2),round(y.real,2),round(y.imag,2))\n",
        "num_ids": 77
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    t = cmath.atan(y/x)\n    return t,r\n",
        "num_ids": 32
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    return r\nprint(polar_rect(5,5))\n",
        "num_ids": 31
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = int(r * cmath.cos(theta))\n    y = int(r * cmath.sin(theta))\n    return x,y\n    \ndef get_rect_origin(x, y, radius):\n    '''\n    Write a function to get rectangular coordinates of the center of a circle.\n    '''\n    x = x - radius\n    y = y - radius\n    return x,y\n",
        "num_ids": 22
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=int(x**2+y**2)**0.5\n    theta=cmath.phase(complex(x,y))\n    return [round(r,3),round(theta,3)]\n",
        "num_ids": 53
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # define complex number\n    complex_num = x + y*1j\n    # get real and imaginary parts\n    real = complex_num.real\n    imaginary = complex_num.imag\n    # check if imaginary number is not 0, if it is, then print error message and quit\n    if imaginary!= 0:\n        print(\"Error: Imaginary number not allowed.\")\n        quit()\n    else:\n        # use polar to get magnitude and convert to degrees\n        magnitude = cmath.polar(complex_num)[0]\n        magnitude = round(magnitude * 3600)\n        # define two angles\n        # if angle is negative, add 180 to make it positive\n        if complex_num.imag < 0:\n            angle1 = complex_num.real\n            angle2 = 180 + complex_num.imag\n        else:\n            angle1 = complex_num.real\n            angle2 = complex_num.imag\n        # now convert to degrees\n        angle1 = round(angle1 * 3600)\n        angle2 = round(angle2 * 3600)\n        # define angle 1\n        # get the smallest angle and round it\n        if angle1 < angle2:\n            angle1 = angle1\n        elif angle2 < angle1:\n            angle1 = angle1\n            angle2 = angle2\n        else:\n            angle1 = angle2\n        # return magnitude and angles\n        return (magnitude, angle1, angle2)\n    \nprint(\"(magnitude, angle1, angle2)\")\nprint(polar_rect(3,2))\nprint(polar_rect(-3,2))\nprint(polar_rect(0,3))\nprint(polar_rect(0,0))\n",
        "num_ids": 404
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r, theta = cmath.polar(complex(x,y))\n    return r,theta\n",
        "num_ids": 28
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_=x*cmath.exp(y*1j)\n    return x_.real,x_.imag\n    \ndef rectangular_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_=x+y*1j\n    y_=cmath.log(x_)/1j\n    return x_,y_\n",
        "num_ids": 36
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x<0:\n        x=cmath.rect(x,y)\n    else:\n        x=cmath.rect(x,y)\n        x=x.real\n    return x\n",
        "num_ids": 50
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List2(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList[::-1],newList)\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List3(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList,newList[::-1],sep=\"\\n\")\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List4(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList,newList[::-1],newList[::-1],sep=\"\\n\")\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List5(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList,newList[::-1],newList[::-1],sep=\"\\n\")\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 58
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #print(newList)\n    length = len(newList)\n    temp = newList[0]\n    newList[0] = newList[length -1]\n    newList[length - 1] = temp\n    return newList\n",
        "num_ids": 59
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n",
        "num_ids": 48
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = len(newList)\n    temp = newList[0]\n    newList[0] = newList[l-1]\n    newList[l-1] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    ",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList = [1,2,3,4]\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 55
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    listLen = len(newList) \n    temp = newList[0] \n    newList[0] = newList[listLen-1] \n    newList[listLen-1] = temp \n    return newList \n",
        "num_ids": 59
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n",
        "num_ids": 57
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    \ndef binomial_Coeff_Memo(n,k,m):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    With Memoization\n    '''\n    if (k,n) in m.keys():\n        return m[k,n]\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        m[k,n] = binomial_Coeff_Memo(n-1,k-1,m) + binomial_Coeff_Memo(n-1,k,m)\n        return m[k,n]\n        \n    \ndef binomial_Coeff_Iter(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        t = n-1\n        total = 0\n        for i in range(k,t,-1):\n            total += binomial_Coeff_Iter(t,i)\n        return total\n    \n    \ndef binomial_Coeff_Iter_2(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        for i in range(k,n-1,-1):\n            total = total * i\n        return total\n    \n    \ndef binomial_Coeff_Iter_3(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return n*(n-k)//k\n    \n    \ndef binomial_Coeff_Iter_4(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        for i in range(k,n-1,-1):\n            total *= (n-i)\n        return total\n    \n    \ndef binomial_Coeff_Iter_5(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        total *= math.factorial(n-k)\n        total /= math.factorial(k)\n        total /= math.factorial(n-k-1)\n        return total\n    \n    \ndef binomial_Coeff_Iter_6(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        for i in range(k,n-1,-1):\n            total *= i\n        return total\n    \n    \ndef binomial_Coeff_Iter_7(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        for i in range(k,n-1,-1):\n            total *= (n-i)\n        return total\n    \n    \ndef binomial_Coeff_Iter_8(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        total *= math.factorial(n-k)\n        total /= math.factorial(k)\n        total /= math.factorial(n-k-1)\n        return total\n    \n    \ndef binomial_Coeff_Iter_9(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        for i in range(k,n-1,-1):\n            total *= i\n        return total\n    \n    \ndef binomial_Coeff_Iter_10(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        for i in range(k,n-1,-1):\n            total *= (n-i)\n        return total\n    \n    \ndef binomial_Coeff_Iter_11(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        total *= math.factorial(n-k)\n        total /= math.factorial(k)\n        total /= math.factorial(n-k-1)\n        return total\n    \n    \ndef binomial_Coeff_Iter_12(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        for i in range(k,n-1,-1):\n            total *= i\n        return total\n    \n    \ndef binomial_Coeff_Iter_13(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        for i in range(k,n-1,-1):\n            total *= (n-i)\n        return total\n    \n    \ndef binomial_Coeff_Iter_14(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Iterative using 2 variables\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        total = 1\n        for i in range(k,n-1,-1):\n            total *= (n-i)\n        return total\n    \n    \ndef binomial_Coeff_Iter_15(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    Ite",
        "num_ids": 26
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1,n+1):\n        result = result * ((n-k) + i)/i\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return 1 if (k==0 or k==n) else int(binomial_Coeff(n-1,k-1)) + int(binomial_Coeff(n-1,k))\n",
        "num_ids": 50
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [0]*(k+1)\n    C[0] = 1\n    for i in range(1,n+1):\n        j = min(i,k)\n        while j>0:\n            C[j] = C[j] + C[j-1]\n            j = j - 1\n    return C[k]\n",
        "num_ids": 85
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff_list = [1]\n    for i in range(1,n+1):\n        coeff_list.append(0)\n    for i in range(1,n+1):\n        for j in range(0,i):\n            coeff_list[i]+=coeff_list[j]*(n+1-j)*(i-j)//(j+1)\n    return coeff_list[k]\n",
        "num_ids": 106
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # The first few numbers in the series\n    C = [0, 1]\n    for i in range(2,n+1):\n      # C[i] += C[i-1] + C[i-2] +... + C[i-k]\n      # the first two terms of the series are 1, and 1 and it is equal to C[1] + C[2] + C[3] +....C[k]\n      # The third term is sum of last three terms, which is equal to 1 + 1 + 1 + 1 + 1 = 3 + 2 + 1 = 6\n      # We can see that the third term is equal to C[2] + C[3] + C[4] +.... + C[k]\n      # The fourth term is sum of last four terms, which is equal to 1 + 1 + 1 + 1 + 1 = 5 + 2 + 1 = 7\n      # The fifth term is sum of last five terms, which is equal to 1 + 1 + 1 + 1 + 1 = 5 + 2 + 1 = 6\n      # The sixth term is sum of last six terms, which is equal to 1 + 1 + 1 + 1 + 1 + 1 = 5 + 2 + 1 = 6\n      # The seventh term is sum of last seven terms, which is equal to 1 + 1 + 1 + 1 + 1 + 1 + 1 = 6\n      # This is the summation of all the terms\n      C.append(1)\n      for j in range(1,k):\n          C[i] += C[i-j]\n      # C[n] = (n choose k) = (n! / (k!*(n-k)!))\n    return C[n]\n    \nprint(binomial_Coeff(5,4))\n",
        "num_ids": 403
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 1 \n    for i in range(0,k):\n        s = (n - i) * s // i\n    return s\ndef binomial_Series(n,r,s): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return s * binomial_Coeff(n,r) // (r * binomial_Coeff(n-r,r)) \n",
        "num_ids": 36
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n==k):\n        return 1\n    elif(k>n):\n        return 0\n    elif(k==0):\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n",
        "num_ids": 75
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = []\n    a = 1\n    for i in range(k+1):\n        a = a * (n-i+1) // (i+1)\n        res.append(a)\n    return sum(res)\n",
        "num_ids": 57
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return np.math.factorial(n)//(np.math.factorial(n-k)*np.math.factorial(k))\n    \ndef fib(n): \n    '''\n    Write a Python function to compute the nth Fibonacci number.\n    '''\n    return int(((1+5**0.5)/2)**n/5**0.5) \n    \ndef fibonacci(n): \n    '''\n    Write a Python function to compute the nth Fibonacci number.\n    '''\n    return np.math.factorial(2*n)//(np.math.factorial(n)**2)\n    \ndef prime(n):\n    '''\n    Write a Python function to compute the nth prime number.\n    '''\n    if n<1:\n        return 0\n    if n==1:\n        return 2\n    else:\n        return prime(n-1)+1\n    \ndef totient(n): \n    '''\n    Write a Python function to compute the nth Euler totient function value.\n    '''\n    return sum(int(np.math.factorial(n)/np.math.factorial(n-r)) for r in range(1,n))\n    \ndef gcd(a,b): \n    '''\n    Write a Python function to compute the greatest common divisor (GCD) of two positive integers (a,b).\n    '''\n    if (a==0): \n        return b \n    return gcd(b%a,a)\n    \ndef modinv(a,m): \n    '''\n    Write a Python function to compute the modular inverse of a number.\n    '''\n    a=a%m \n    for x in range(1,m): \n        if ((a*x)%m==1): \n            return x \n    return 1\n    \ndef primorial(n): \n    '''\n    Write a Python function to compute the nth prime number.\n    '''\n    return int(np.math.factorial(n))\n",
        "num_ids": 16
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    if ip[0] == '0':\n        ip[0] = ''\n    if ip[1] == '0':\n        ip[1] = ''\n    if ip[2] == '0':\n        ip[2] = ''\n    if ip[3] == '0':\n        ip[3] = ''\n    ip = '.'.join(ip)\n    return ip\n",
        "num_ids": 103
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^\\d*\\.\\d*\\.\\d*\\.0\\.\", \"\", ip)\n",
        "num_ids": 31
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\.0+)*$', '', ip)\n",
        "num_ids": 22
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.split('.')[0]\n",
        "num_ids": 13
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not ip:\n        return None\n    else:\n        return re.sub('^0+', '', ip)\n",
        "num_ids": 31
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0', '', ip)\n",
        "num_ids": 18
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\.0+', '.', ip)\ndef filter_ip(ip):\n    '''\n    Write a regular expression to match an ip address.\n    '''\n    pattern = re.compile('\\d+\\.\\d+\\.\\d+\\.\\d+')\n    if pattern.match(ip):\n        return True\n    else:\n        return False\ndef parse_ip(ip):\n    '''\n    Write a function to parse an ip address.\n    '''\n    if filter_ip(ip):\n        try:\n            segments = ip.split('.')\n            if len(segments) == 4:\n                for segment in segments:\n                    if int(segment) < 256:\n                        return True\n                    else:\n                        return False\n        except:\n            return False\n    else:\n        return False\ndef ip_in_ip_network(ip,net):\n    '''\n    Write a function to check if an ip address is in an ip network.\n    '''\n    if parse_ip(ip) and parse_ip(net):\n        ip = removezero_ip(ip)\n        net = removezero_ip(net)\n        segments = ip.split('.')\n        segmentsnet = net.split('.')\n        if len(segments) == 4 and len(segmentsnet) == 4:\n            if int(segmentsnet[0]) < int(segments[0]) < int(segmentsnet[1]) < int(segments[1]) < int(segmentsnet[2]) < int(segments[2]) < int(segmentsnet[3]) < int(segments[3]):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef ip_in_ip_subnet(ip,subnet):\n    '''\n    Write a function to check if an ip address is in an ip subnet.\n    '''\n    if parse_ip(ip) and parse_ip(subnet):\n        if ip_in_ip_network(ip,subnet):\n            subnetsegments = subnet.split('.')\n            subnetsegments.pop()\n            if int(subnetsegments[0]) == 0:\n                return True\n            elif int(subnetsegments[0]) < int(segments[0]) < int(subnetsegments[1]) < int(segments[1]) < int(subnetsegments[2]) < int(segments[2]) < int(subnetsegments[3]) < int(segments[3]):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef ip_in_ip_range(ip,range):\n    '''\n    Write a function to check if an ip address is in an ip range.\n    '''\n    if parse_ip(ip) and parse_ip(range):\n        if ip_in_ip_network(ip,range):\n            ipsegments = ip.split('.')\n            ipsegments.pop()\n            range1segments = range.split('.')\n            range1segments.pop()\n            if int(range1segments[0]) < int(ipsegments[0]) < int(range1segments[1]) < int(ipsegments[1]) < int(range1segments[2]) < int(ipsegments[2]) < int(range1segments[3]) < int(ipsegments[3]):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef ip_in_ip_list(ip,iplist):\n    '''\n    Write a function to check if an ip address is in an ip list.\n    '''\n    if parse_ip(ip) and parse_ip(iplist):\n        if ip in iplist:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_private_ip(ip):\n    '''\n    Write a function to check if an ip address is private.\n    '''\n    if parse_ip(ip):\n        segments = ip.split('.')\n        if int(segments[0]) >= 1 and int(segments[0]) <= 127:\n            return True\n        elif int(segments[0]) >= 169 and int(segments[0]) <= 191:\n            return True\n        elif int(segments[0]) >= 10 and int(segments[0]) <= 172 and int(segments[1]) >= 16 and int(segments[1]) <= 31:\n            return True\n        elif int(segments[0]) >= 192 and int(segments[0]) <= 223 and int(segments[1]) >= 0 and int(segments[1]) <= 255 and int(segments[2]) >= 0 and int(segments[2]) <= 255 and int(segments[3]) >= 0 and int(segments[3]) <= 255:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef convert_ip_to_int(ip):\n    '''\n    Write a function to convert an ip address to an integer.\n    '''\n    if parse_ip(ip):\n        segments = ip.split('.')\n        return (int(segments[0])*256**3) + (int(segments[1])*256**2) + (int(segments[2])*256) + (int(segments[3]))\n    else:\n        return False\ndef convert_int_to_ip(num):\n    '''\n    Write a function to convert an integer to an ip address.\n    '''\n    if num:\n        segments = []\n        segments.append(str(num//256**3))\n        segments.append(str(num//256**2%256))\n        segments.append(str(num//256%256))\n        segments.append(str(num%256))\n        return '.'.join(segments)\n    else:\n        return False\ndef is_multicast_ip(ip):\n    '''\n    Write a function to check if an ip address is a multicast ip address.\n    '''\n    if parse_ip(ip):\n        segments = ip.split('.')\n        if int(segments[0]) >= 224 and int(segments[0]) <= 239:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_multicast_ip_range(iprange):\n    '''\n    Write a function to check if a ip range is a multicast ip range.\n    '''\n    if parse_ip(iprange):\n        iprange = removezero_ip(iprange)\n        if is_multicast_ip(iprange.split('-')[0]) and is_multicast_ip(iprange.split('-')[1]):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_reserved_ip(ip):\n    '''\n    Write a function to check if an ip address is a reserved ip address.\n    '''\n    if parse_ip(ip):\n        segments = ip.split('.')\n        if int(segments[0]) == 0:\n            return True\n        elif int(segments[0]) == 127:\n            return True\n        elif int(segments[0]) == 169:\n            return True\n        elif int(segments[0]) == 192:\n            return True\n        elif int(segments[0]) == 224:\n            return True\n        elif int(segments[0]) == 240:\n            return True\n        elif int(segments[0]) == 255 and int(segments[1]) == 255 and int(segments[2]) == 255 and int(segments[3]) == 255:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_local_ip(ip):\n    '''\n    Write a function to check if an ip address is a local ip address.\n    '''\n    if parse_ip(ip):\n        if is_private_ip(ip):\n            return True\n        elif ip[:7] == '127.0.0' or ip[:8] == '0.0.0':\n            return True\n        elif ip[:10] == '169.254':\n            return True\n        elif i",
        "num_ids": 84
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    p=r'\\d+\\.\\d+\\.\\d+\\.\\d+'\n    if re.match(p,ip):\n        newip=ip.replace(\"0.0.0.0\",\"0.0.0.0\")\n        return newip\n    else:\n        return None\n",
        "num_ids": 73
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"\\.0+\\d+$\",\"\",ip)\n",
        "num_ids": 22
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    while ip.count('0') > 0:\n        ip[ip.index('0')] = ''\n        ip = '.'.join(ip)\n        ip = ip.split('.')\n    return ip\n    \ndef is_valid_ip(ip):\n    '''\n    Write a function to check the validity of an ip address.\n    '''\n    ip = ip.split('.')\n    for i in ip:\n        if len(i) < 1:\n            return False\n        if i[0] == '0' and len(i) > 1:\n            return False\n        try:\n            if int(i) < 0 or int(i) > 255:\n                return False\n        except:\n            return False\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_index = [i for i in range(len(list1)) if list1[i] % 2!= 0]\n    even_index = [i for i in range(len(list1)) if list1[i] % 2 == 0]\n    return abs(list1[even_index[0]] - list1[odd_index[0]])\n    \n",
        "num_ids": 88
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1 = [1,3,2,4,6,5,6,7,8,9]\n    list2 = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            list2.append(list1[i])\n    diff = list2[0] - list1[1]\n    print(diff)\n",
        "num_ids": 89
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    else:\n        result = []\n        for num in range(len(list1)):\n            if num % 2 == 0:\n                result.append(list1[num])\n            else:\n                result.append(list1[num])\n        return result\n",
        "num_ids": 78
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    while i < len(list1):\n        if i % 2 == 0:\n            if i == len(list1) - 1:\n                return list1[i] - list1[i-1]\n            elif i == len(list1) - 2:\n                return list1[i] - list1[i+1]\n            else:\n                i += 2\n        else:\n            if i == len(list1) - 1:\n                return list1[i-1] - list1[i]\n            elif i == len(list1) - 2:\n                return list1[i-2] - list1[i]\n            else:\n                i += 2\n",
        "num_ids": 166
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) <= 1:\n        return None\n    else:\n        if list1[0]%2!= 0:\n            return list1[0]\n        else:\n            return list1[1] - list1[0]\n",
        "num_ids": 61
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # variables used to store the first even and odd number\n    even_num = 0\n    odd_num = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_num = list1[i]\n        else:\n            odd_num = list1[i]\n    return even_num - odd_num\n",
        "num_ids": 87
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        odd = list1[0] % 2\n        if odd == 0:\n            return list1[1]-list1[0]\n        else:\n            return list1[0]-list1[1]\n",
        "num_ids": 69
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) > 0:\n        even = list1[0]\n        odd = list1[1]\n        diff = abs(even - odd)\n        if even > odd:\n            return diff\n        else:\n            return -1 * diff\n    else:\n        return -1\n",
        "num_ids": 72
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for x in list1:\n        if (x%2==0):\n            even_list.append(x)\n        else:\n            odd_list.append(x)\n    return abs(even_list[0]-odd_list[0])\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9]))\n",
        "num_ids": 103
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(even)\n    print(odd)\n    print(\"Difference of even and odd is: \",abs(even[0]-odd[0]))\n",
        "num_ids": 85
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    if n1!=n2:\n        return -1\n    \n    # Create 2 diff arrays to store indexes\n    # of 1s and 0s in the input string\n    n = len(str1)\n    arr1 = []\n    arr2 = []\n    \n    for i in range(n):\n        if str1[i] == \"1\":\n            arr1.append(i)\n        if str2[i] == \"1\":\n            arr2.append(i)\n    \n    # traverse for every element in the input array\n    for i in range(n):\n        if arr1[i]!=arr2[i]:\n            # if found, swap the elements\n            temp = arr2[i]\n            arr2[i]=arr1[i]\n            arr1[i]=temp\n            \n    # return the number of swaps\n    return (n-len(set(arr1)))\n    ",
        "num_ids": 237
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            if str1[i] == '0' and str2[i] == '1' :\n                str1 = str1[:i] + '1' + str1[i+1:]\n                count = count + 1\n            elif str1[i] == '1' and str2[i] == '0' :\n                str1 = str1[:i] + '0' + str1[i+1:]\n                count = count + 1\n    return count\n",
        "num_ids": 147
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # we are gonna use the same idea as in Minimum number of insertions and deletion to solve this problem\n    \n    # creating a hash table to store number of occurences of 0 and 1\n    table = {\n        '0' : 0,\n        '1' : 0\n    }\n    \n    # here we will keep track of the number of 0s and 1s in str1\n    count_0 = 0\n    count_1 = 0\n    \n    for c in str1 :\n        table[c] += 1\n        \n        if c == '0' :\n            count_0 += 1\n        else :\n            count_1 += 1\n    \n    # we will create a hash table to store number of occurences of 0 and 1 in str2\n    table_2 = {\n        '0' : 0,\n        '1' : 0\n    }\n    \n    count_0_2 = 0\n    count_1_2 = 0\n    \n    for c in str2 :\n        table_2[c] += 1\n        \n        if c == '0' :\n            count_0_2 += 1\n        else :\n            count_1_2 += 1\n    \n    # we need to initialize a variable to store the number of swaps required\n    # to convert one string to another\n    num_swaps = 0\n    \n    # this will check the number of occurences of 0 in str1 and str2\n    # if the difference is greater than zero, it means we need to convert one of the strings\n    # from 0 to 1\n    if count_0 - count_0_2 > 0 :\n        num_swaps += count_0 - count_0_2\n    \n    if count_1 - count_1_2 > 0 :\n        num_swaps += count_1 - count_1_2\n    \n    # here we will check the occurences of 1 in str1 and str2\n    # if the difference is greater than zero, it means we need to convert one of the strings\n    # from 1 to 0\n    if count_0_2 - count_0 > 0 :\n        num_swaps += count_0_2 - count_0\n    \n    if count_1_2 - count_1 > 0 :\n        num_swaps += count_1_2 - count_1\n    \n    # we will return the number of swaps\n    return num_swaps\n    \n    \n",
        "num_ids": 561
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # code here\n    # return -1 if str1 and str2 are not of same length\n    # return 0 if str1 and str2 are same\n    def convert_to_base(n, base):\n        \"\"\"Change the given number 'n' to the given base 'base'\"\"\"\n        if n < base:\n            return digits[n]\n        else:\n            return convert_to_base(n//base, base) + digits[n%base]\n    def countSwaps(str1, str2) : \n        '''\n        Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n        '''\n        n1 = len(str1)\n        n2 = len(str2)\n        # if str1 and str2 are not of same length\n        if n1!= n2:\n            return -1\n        # if str1 and str2 are same\n        else:\n            return 0\n    # Create a dictionary of digits\n    digits = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}\n    # convert the strings to integer values\n    num1 = int(''.join(str1))\n    num2 = int(''.join(str2))\n    # convert the integers to binary\n    bin1 = convert_to_base(num1,2)\n    bin2 = convert_to_base(num2,2)\n    # count the number of swaps\n    count = countSwaps(bin1,bin2)\n    # return count\n    return count\n",
        "num_ids": 231
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    \n    if(n!=m) : \n        return -1\n    \n    # Create a table to store number of  \n    # changes required by  \n    # different values of j \n    # Initialize all values as 0. \n    # Note that the table is of  \n    # length n+1 to include table[0] \n    table = [0 for _ in range(n+1)] \n    \n    # Fill the entries for 0 value case \n    for j in range(n+1) : \n        table[j] = j \n    \n    # Fill rest of the entries in table  \n    # after initialization \n    for i in range(1, n+1) : \n        \n        # Initialize all value of j as -1 \n        # to check if there is any j  \n        # such that str1[i-1] can be changed \n        # to str2[j] and then we can  \n        # calculate table[i]  \n        j = -1\n        \n        # Check if the two strings are  \n        # of the same length \n        for j in range(n) : \n            if(str1[i-1] == str2[j]) : \n                break\n        \n        # If the characters are not the same \n        if(j!= n-1) : \n            # Find the value of the entry of  \n            # the cell to the above row,  \n            # same column value  \n            # and same diagonal value.  \n            x = table[i-1] + 1\n        \n            # If value is greater than the  \n            # value in table[i], update the  \n            # value of table[i] \n            if(x > table[i]) : \n                table[i] = x\n                \n    # Return the minimum value in table[n] \n    # i.e., the minimum number of swaps  \n    # required \n    return table[n]",
        "num_ids": 479
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    if n1!= n2 :\n        return -1\n    count = 0\n    for i in range(0,n1) : \n        if str1[i]!= str2[i] : \n            if str1[i] == '0' and str2[i] == '1' : \n                count += 1\n            else :\n                count += 2\n    return count\n",
        "num_ids": 115
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1) \n    m = len(str2) \n    count = 0\n    if n!= m: \n        return -1\n    str1 = '0b'+str1 \n    str2 = '0b'+str2 \n    for i in range(2, n+1): \n        if int(str1[i-1]) > int(str2[i-1]): \n            count = count + int(str1[i-1]) - int(str2[i-1]) \n            str2 = str2[:i-1] + str1[i-1] + str2[i:] \n    return count \n",
        "num_ids": 164
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    if n1!= n2:\n        print(\"Length of both the strings should be same\")\n        return -1\n    \n    str1 = ''.join(sorted(str1))\n    str2 = ''.join(sorted(str2))\n    \n    count = 0\n    for i in range(n1) :\n        if str1[i]!= str2[i]:\n            count += 1\n    return count\n",
        "num_ids": 126
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    l1 = len(str1)\n    l2 = len(str2)\n",
        "num_ids": 27
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    def _helper(str1,str2,n,m):\n        if n==0 and m==0:\n            return 0\n        \n        if n>0 and m>0:\n            if str1[n-1] == str2[m-1]:\n                return _helper(str1,str2,n-1,m-1)\n            else:\n                return 1+min(_helper(str1,str2,n-1,m),_helper(str1,str2,n,m-1))\n        else:\n            return -1\n    \n    if str1==str2:\n        return 0\n    return _helper(str1,str2,len(str1),len(str2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2001
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Write your code here\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 23
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list = tuple_list \n    return sizeof(tuple_list)\n",
        "num_ids": 23
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return(sys.getsizeof(tuple_list))\n",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \ndef tuple_hash(tuple_list):\n    '''\n    Write a function to take a list of immutable values (tuples) and return a hash value of the list.\n    '''\n    return hash(tuple_list)\n    \ndef dict_hash(dict_list):\n    '''\n    Write a function to take a list of immutable values (tuples) and return a hash value of the list.\n    '''\n    return hash(dict_list)\n",
        "num_ids": 11
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for element in tuple_list:\n        count = count + sys.getsizeof(element)\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list=tuple(tuple_list)\n    # print(tuple_list)\n    # print(sys.getsizeof(tuple_list))\n    tuple_list=list(tuple_list)\n    # print(tuple_list)\n    # print(sys.getsizeof(tuple_list))\n    tuple_list.append('python')\n    # print(tuple_list)\n    # print(sys.getsizeof(tuple_list))\n    tuple_list=tuple(tuple_list)\n    print(sys.getsizeof(tuple_list))\n    return\n",
        "num_ids": 153
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[-1] < arr2[0]:\n        return arr2[k-1]\n    if arr1[0] > arr2[-1]:\n        return arr1[k-1]\n    if len(arr1) == k:\n        return arr1[k-1]\n    if len(arr2) == k:\n        return arr2[k-1]\n    if k < len(arr1) and k < len(arr2):\n        if arr1[k//2] > arr2[k//2]:\n            return find_kth(arr1, arr2[k//2+1:], k-k//2-1)\n        return find_kth(arr1[k//2+1:], arr2, k-k//2-1)\n    if k < len(arr1):\n        return arr1[k-1]\n    return arr2[k-1]\n",
        "num_ids": 218
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = 0\n    j = 0\n    n = 0\n    while n < k:\n        if i < n1 and j < n2 and arr1[i] < arr2[j]:\n            i += 1\n            n += 1\n        elif j < n2:\n            j += 1\n            n += 1\n        else:\n            i += 1\n    if j < n2:\n        return arr2[j]\n    else:\n        return arr1[i-1]\n",
        "num_ids": 136
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > arr1[-1] + arr2[-1]:\n        return None\n    if k <= arr1[0]:\n        return arr1[0]\n    if k <= arr2[0]:\n        return arr2[0]\n    low = 0\n    high = len(arr1)\n    mid = low + (high - low) // 2\n    mid = arr1[mid]\n    low_second = 0\n    high_second = len(arr2)\n    while low < high:\n        mid = arr1[mid]\n        high = high - 1\n        low = low + 1\n        if k <= mid:\n            high = high_second\n            high_second = high_second - 1\n        else:\n            low = low_second\n            low_second = low_second + 1\n            k = k - mid\n    if low == 0:\n        return arr2[k - 1]\n    else:\n        return arr1[k - 1]\n        \n",
        "num_ids": 231
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def iterate_pair(arr1, arr2, k, a, b):\n        if not arr1:\n            return arr2[k-1]\n        if not arr2:\n            return arr1[k-1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        m1 = min(len(arr1), k//2)\n        m2 = k - m1\n        if arr1[m1 - 1] > arr2[m2 - 1]:\n            return iterate_pair(arr1[:m1], arr2[m2:], k - m2, a, b)\n        else:\n            return iterate_pair(arr1[m1:], arr2[:m2], k - m1, a, b)\n    return iterate_pair(arr1, arr2, k, 0, 0)\n",
        "num_ids": 209
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 and not arr2:\n        return None\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n",
        "num_ids": 51
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k <= len(arr1) and k <= len(arr2):\n        if k <= len(arr1)//2:\n            # if arr1 length is less then arr2\n            # then use arr1[:k] and arr2[k:]\n            return find_kth(arr1[:k], arr2[k:], k)\n        else:\n            # if arr1 length is more then arr2\n            # then use arr1[k:] and arr2[:k]\n            return find_kth(arr1[k:], arr2[:k], k)\n    else:\n        return \"Incorrect input\"\n",
        "num_ids": 181
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # create an array of the two arrays\n    arr = arr1 + arr2\n    # sort the array in place\n    arr.sort()\n    # return the kth element in the sorted array\n    return arr[k-1]\n",
        "num_ids": 56
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < k or len(arr2) < k:\n        return \"Array length must be greater than k.\"\n    while len(arr1) > 0 and len(arr2) > 0:\n        if arr1[0] < arr2[0]:\n            arr1.pop(0)\n        else:\n            arr2.pop(0)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    return arr1[k - 1] if len(arr1) > k else arr2[k - 1]\n",
        "num_ids": 156
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k//2, len(arr1))\n    j = k - i\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1[:i], arr2[j:], i)\n    else:\n        return find_kth(arr1[i:], arr2[:j], j)\n",
        "num_ids": 163
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    sum_ = 0\n    for i in number:\n        sum_ += int(i)**3\n    if sum_ == int(number):\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return True\n    elif number <= 0:\n        return False\n    else:\n        num = str(number)\n        sum = 0\n        power = len(num)\n        for i in num:\n            sum = sum + int(i) ** power\n        if sum == number:\n            return True\n        else:\n            return False\n",
        "num_ids": 88
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    number = str(number)\n    power = len(number)\n    temp = 0\n    for i in number:\n        temp += int(i)**power\n    if temp == int(number):\n        print(number, 'is armstrong number')\n    else:\n        print(number, 'is not armstrong number')\n",
        "num_ids": 80
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_copy = number\n    sum_digits = 0\n    while number_copy > 0:\n        sum_digits += (number_copy % 10) ** 3\n        number_copy = number_copy // 10\n    return sum_digits == number\n",
        "num_ids": 62
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")\n        \ndef palindrome(number):\n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    temp = number\n    reverse = 0\n    while temp > 0:\n        remainder = temp % 10\n        reverse = (reverse * 10) + remainder\n        temp = temp // 10\n    if number == reverse:\n        print(number, \"is a palindrome number\")\n    else:\n        print(number, \"is not a palindrome number\")\n        \ndef fibonacci(number):\n    '''\n    Write a function to generate the Fibonacci series till the nth term.\n    '''\n    a = 0\n    b = 1\n    if number == 1:\n        print(a)\n    elif number == 2:\n        print(a)\n        print(b)\n    else:\n        print(a)\n        print(b)\n        for i in range(2, number):\n            c = a + b\n            a = b\n            b = c\n            print(c)\n            \ndef factorial(number):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1, number+1):\n        fact *= i\n    print(\"The factorial of\", number, \"is\", fact)\n        \ndef even_odd_number(number):\n    '''\n    Write a function to check whether the given number is even or odd.\n    '''\n    if number % 2 == 0:\n        print(number, \"is even\")\n    else:\n        print(number, \"is odd\")\n        \ndef prime_number(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    for i in range(2, number):\n        if number % i == 0:\n            print(number, \"is not a prime number\")\n            break\n    else:\n        print(number, \"is a prime number\")\n        \ndef fibonacci_series(number):\n    '''\n    Write a function to display the fibonacci series upto nth term.\n    '''\n    a = 0\n    b = 1\n    if number == 1:\n        print(a)\n    elif number == 2:\n        print(a)\n        print(b)\n    else:\n        print(a)\n        print(b)\n        for i in range(2, number):\n            c = a + b\n            a = b\n            b = c\n            print(c)\n            \ndef armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")\n        \ndef palindrome(number):\n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    temp = number\n    reverse = 0\n    while temp > 0:\n        remainder = temp % 10\n        reverse = (reverse * 10) + remainder\n        temp = temp // 10\n    if number == reverse:\n        print(number, \"is a palindrome number\")\n    else:\n        print(number, \"is not a palindrome number\")\n        \ndef fibonacci(number):\n    '''\n    Write a function to generate the Fibonacci series till the nth term.\n    '''\n    a = 0\n    b = 1\n    if number == 1:\n        print(a)\n    elif number == 2:\n        print(a)\n        print(b)\n    else:\n        print(a)\n        print(b)\n        for i in range(2, number):\n            c = a + b\n            a = b\n            b = c\n            print(c)\n            \ndef factorial(number):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1, number+1):\n        fact *= i\n    print(\"The factorial of\", number, \"is\", fact)\n        \ndef even_odd_number(number):\n    '''\n    Write a function to check whether the given number is even or odd.\n    '''\n    if number % 2 == 0:\n        print(number, \"is even\")\n    else:\n        print(number, \"is odd\")\n        \ndef prime_number(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    for i in range(2, number):\n        if number % i == 0:\n            print(number, \"is not a prime number\")\n            break\n    else:\n        print(number, \"is a prime number\")\n        \ndef fibonacci_series(number):\n    '''\n    Write a function to display the fibonacci series upto nth term.\n    '''\n    a = 0\n    b = 1\n    if number == 1:\n        print(a)\n    elif number == 2:\n        print(a)\n        print(b)\n    else:\n        print(a)\n        print(b)\n        for i in range(2, number):\n            c = a + b\n            a = b\n            b = c\n            print(c)\n            \ndef armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")\n        \ndef palindrome(number):\n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    temp = number\n    reverse = 0\n    while temp > 0:\n        remainder = temp % 10\n        reverse = (reverse * 10) + remainder\n        temp = temp // 10\n    if number == reverse:\n        print(number, \"is a palindrome number\")\n    else:\n        print(number, \"is not a palindrome number\")\n        \ndef fibonacci(number):\n    '''\n    Write a function to generate the Fibonacci series till the nth term.\n    '''\n    a = 0\n    b = 1\n    if number == 1:\n        print(a)\n    elif number == 2:\n        print(a)\n        print(b)\n    else:\n        print(a)\n        print(b)\n        for i in range(2, number):\n            c = a + b\n            a = b\n            b = c\n            print(c)\n            \ndef factorial(number):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1, number+1):\n        fact *= i\n    print(\"The factorial of\", number, \"is\", fact)\n        \ndef even_odd_number(number):\n    '''\n    Write a function to check whether the given number is even or odd.\n    '''\n    if number % 2 == 0:\n        print(number, \"is even\")\n    else:\n        print(number, \"is odd\")\n        \ndef prime_number(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    for i in range(2, number):\n        if number % i == 0:\n            print(number, \"is not a prime number\")\n            break\n    else:\n        print(number, \"is a prime number\")\n        \ndef fibonacci_series(number):\n    '''\n    Write a function to display the fibonacci series upto nth term.\n    '",
        "num_ids": 22
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if type(number) == int:\n        sum = 0\n        while number:\n            sum += (number % 10) ** 3\n            number //= 10\n        return sum == number\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    digit_string = str(number)\n    for i in digit_string:\n        count += pow(int(i),3)\n    if count == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    order = len(str(number))\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit ** order\n        num //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n        \nprint(armstrong_number(4))\n",
        "num_ids": 80
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    return sum(list(map(lambda x: int(x)**len(str(number)), list(str(number)))) ) == number\n",
        "num_ids": 36
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize the count\n    count = 0\n    temp = number\n    # loop till the number is zero\n    while number!= 0:\n        # get the remainder of the division\n        remainder = number % 10\n        # multiply the current remainder with the power of 10\n        remainder = remainder ** 3\n        # add the current remainder to the count\n        count = count + remainder\n        # get the next number\n        number = number // 10\n    # return true if count equals the original number\n    return count == temp\n",
        "num_ids": 122
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = 0\n    average_list = 0\n    for i in range(1,number+1):\n        sum_list = sum_list + i\n        average_list = sum_list / number\n    return sum_list, average_list\n",
        "num_ids": 61
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum/number\n    return sum, avg\n",
        "num_ids": 39
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n=0\n    avg_n=0\n    for i in range(1,number+1):\n        sum_n=sum_n+i\n    avg_n=sum_n/number\n    print(\"Sum of first\",number,\"natural numbers:\",sum_n)\n    print(\"Average of first\",number,\"natural numbers:\",avg_n)\n",
        "num_ids": 90
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    print(f'Sum is {sum} and Average is {average}')\n",
        "num_ids": 55
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1,number+1)),sum(range(1,number+1))/number\n",
        "num_ids": 27
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    print(f\"sum of first {number} natural numbers is {total}\")\n    print(f\"average of first {number} natural numbers is {total/number}\")\n",
        "num_ids": 65
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    avg=0\n    i=1\n    while i <= number:\n        sum = sum + i\n        avg = sum/i\n        i+=1\n    return sum, avg\n",
        "num_ids": 51
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    print(\"The sum of first %d natural number is %d\"%(number,(number*(number+1)/2)))\n    print(\"The average of first %d natural number is %f\"%(number,((number*(number+1)/2))))\n    \ndef factorial(number):\n    '''\n    Write a program to print the factorial of a given number.\n    '''\n    fact = 1\n    while(number > 0):\n        fact = fact * number\n        number = number-1\n    print(\"The factorial of %d is %d\"%(number,fact))\n    \ndef second_largest(numbers):\n    '''\n    Write a program to find the second largest number in a list.\n    '''\n    if(len(numbers) < 2):\n        return\n    else:\n        max = numbers[0]\n        secondmax = numbers[0]\n        for i in range(1,len(numbers)):\n            if(numbers[i] > max):\n                max = numbers[i]\n        for j in range(1,len(numbers)):\n            if(numbers[j] > secondmax and numbers[j]!= max):\n                secondmax = numbers[j]\n        print(\"The second largest number is %d\"%(secondmax))\n        \ndef prime_numbers(n):\n    '''\n    Write a function to print the n prime numbers.\n    '''\n    prime = [2]\n    count = 2\n    number = 3\n    while(count < n):\n        for i in range(2,number):\n            if(number % i == 0):\n                break\n            else:\n                count = count + 1\n        if(count == number):\n            prime.append(number)\n            count = count + 1\n        number = number + 1\n    print(\"The prime numbers upto %d are %s\"%(n,prime))\n    \ndef perfect_number(n):\n    '''\n    Write a function to check if the given number is a perfect number.\n    '''\n    if(n < 1):\n        return\n    sum = 0\n    for i in range(1,n):\n        if(n % i == 0):\n            sum = sum + i\n    if(sum == n):\n        print(\"The given number %d is perfect\"%(n))\n    else:\n        print(\"The given number %d is not perfect\"%(n))\n        \ndef frequency(numbers):\n    '''\n    Write a function to count frequency of each number in a given list.\n    '''\n    frequency = {}\n    for number in numbers:\n        if(number in frequency):\n            frequency[number] = frequency[number]+1\n        else:\n            frequency[number] = 1\n    print(\"The frequency of each number in a given list is %s\"%(frequency))\n",
        "num_ids": 67
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #Define variables\n    total = 0\n    num = 0\n    #Calculate sum of numbers\n    while num < number:\n        total += num\n        num += 1\n    #Calculate average\n    average = total / number\n    #Return sum and average\n    return total, average",
        "num_ids": 70
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    print(\"Sum of the first %s natural numbers is %s.\" %(number, sum))\n    print(\"Average of the first %s natural numbers is %s.\" %(number, average))\n",
        "num_ids": 72
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0): \n        return True\n    else: \n        return False",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : \n        return True\n    else : \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0",
        "num_ids": 9
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0):\n        return True\n    else :\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str2 = str1.lower()\n    temp = list(str2)\n    for i in range(len(temp)):\n        if temp[i] == temp[i+1]:\n            return temp[i]\n    return None\n",
        "num_ids": 58
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    length = len(str1)\n    dict1 = dict()\n    for i in range(length):\n        if str1[i] in dict1:\n            return str1[i]\n        else:\n            dict1[str1[i]] = 1\n    return \"No repeated character\"\n",
        "num_ids": 71
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    list_of_char = list(str1)\n    count_dict = {}\n    for i in list_of_char:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    for i in count_dict:\n        if count_dict[i] > 1:\n            print(i, count_dict[i])\n            break\n    return i, count_dict[i]\n",
        "num_ids": 113
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    def first_repeated_char_recursion(str1):\n        if len(str1)==1:\n            return str1\n        else:\n            if str1[0]==str1[1]:\n                return str1[0]\n            else:\n                return first_repeated_char_recursion(str1[1:])\n",
        "num_ids": 83
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    from collections import OrderedDict\n    str_dict = OrderedDict()\n    for char in str1:\n        str_dict.setdefault(char, 0)\n        str_dict[char] += 1\n    for key, value in str_dict.items():\n        if value >= 2:\n            return key\n    return 'No Repeated Characters Found'\n",
        "num_ids": 87
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n",
        "num_ids": 45
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        count = 0\n        for j in range(len(str1)):\n            if str1[i] == str1[j]:\n                count += 1\n        if count > 1:\n            return str1[i]\n    return None\n",
        "num_ids": 71
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # new_list = list(set(str1))\n    # for i in new_list:\n    #     if str1.count(i) > 1:\n    #         return i\n    # return \"No repeated character\"\n",
        "num_ids": 56
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = []\n    for char in str1:\n        if str1.count(char) == 1:\n            lst.append(char)\n    if len(lst) == 0:\n        return None\n    else:\n        return lst[0]\n",
        "num_ids": 65
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        for j in range(0, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[j]\n    return -1\n",
        "num_ids": 59
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if i % sum([int(x) for x in str(i)]) == 0:\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 57
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if (i//100)%10 == (i//10)%10:\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 54
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(n):\n        '''\n        Returns True if n is a lucid number\n        '''\n        d = 2\n        while d*d < n:\n            if n % d == 0:\n                return False\n            d += 1\n        return n > 1\n    ludic_list = [n]\n    while True:\n        n += 1\n        if is_ludic(n):\n            ludic_list.append(n)\n        if n >= n**2:\n            break\n    return ludic_list\n",
        "num_ids": 100
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    for i in range(1,n+1):\n        digits = []\n        for digit in str(i):\n            digits.append(int(digit))\n        if len(digits) == len(set(digits)):\n            ludic_nums.append(i)\n    return ludic_nums\n",
        "num_ids": 87
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        return []\n    if n == 0:\n        return [0]\n    num = str(n)\n    ludic = []\n    ludic.append(int(num))\n    for i in range(len(num) - 1):\n        ludic.append(int(num[:i] + num[i + 1:] + num[i]))\n        ludic.append(int(num[:i] + num[i + 1:]))\n        ludic.append(int(num[:i] + num[i + 1:] + num[i]))\n        ludic.append(int(num[:i] + num[i + 1:]))\n    return ludic\n",
        "num_ids": 168
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        j = 1\n        while j <= i:\n            if j ** 2 <= i:\n                if j ** 2 == i:\n                    ludic.append(i)\n                j += 1\n            else:\n                break\n    return ludic\n",
        "num_ids": 75
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if i <= (i & -i):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 44
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    print(n)\n    n_l = n - (n % 3)\n    while n_l <= n:\n        print(n_l)\n        n_l = n_l - (n_l % 3)\n",
        "num_ids": 55
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        ludic.append(i)\n",
        "num_ids": 28
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return''.join(s)\n",
        "num_ids": 28
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string\n    words = s.split(' ')\n    # reverse the list\n    words.reverse()\n    # Join the words\n    reversed_s =''.join(words)\n    return reversed_s\n",
        "num_ids": 55
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split(' ')[::-1])\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = []\n    start = 0\n    for i, c in enumerate(s):\n        if c =='':\n            words.append(s[start:i])\n            start = i + 1\n    words.append(s[start:])\n",
        "num_ids": 61
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(words[::-1])\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # edge case\n    if len(s) <= 1:\n        return s\n",
        "num_ids": 21
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Reverse whole word\n    s = s[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split string into list of words\n    l = s.split()\n    # reverse the list of words\n    l.reverse()\n    # join the words with spaces between them\n    return''.join(l)\n",
        "num_ids": 51
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n",
        "num_ids": 39
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for n in range(2, int(num)):\n        if int(num) % n == 0:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num % 2 == 0 or num < 2:\n        return False\n    else:\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,'is not a prime number')\n                print(i,'times',num//i,'is',num)\n                break\n        else:\n            print(num,'is a prime number')\n",
        "num_ids": 77
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    flag=0\n    if num>1:\n        for i in range(2,num):\n            if(num%i==0):\n                flag=1\n                break\n    if flag==0:\n        print(\"prime\")\n    else:\n        print(\"not a prime\")\n",
        "num_ids": 68
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef primes(n):\n    '''\n    Write a function which returns all prime numbers between 1 and n (inclusive).\n    '''\n    \n    return [num for num in range(1, n + 1) if prime_num(num)]\n",
        "num_ids": 27
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180 * math.pi\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi*degree/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return(degree*math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\ndef distance(x1,x2,y1,y2):\n    '''\n    Write a function to calculate the distance between 2 points (x1,x2) and (y1,y2).\n    '''\n    return math.sqrt((x1-x2)**2 + (y1-y2)**2)\ndef windchill(temperature, wind_speed):\n    '''\n    Write a function to calculate the windchill index.\n    '''\n    return 13.12 + 0.6215 * temperature - 11.37 * math.pow(wind_speed,0.16) + 0.3965 * temperature * math.pow(wind_speed,0.16)\ndef windchill_index(temperature, wind_speed):\n    '''\n    Write a function to calculate the windchill index.\n    '''\n    return (13.12 + (0.6215 * temperature) - (11.37 * math.pow(wind_speed,0.16)) + (0.3965 * temperature * math.pow(wind_speed,0.16)))\ndef windchill_test(temperature, wind_speed):\n    '''\n    Write a function to calculate the windchill index.\n    '''\n    return (13.12 + (0.6215 * temperature) - (11.37 * math.pow(wind_speed,0.16)) + (0.3965 * temperature * math.pow(wind_speed,0.16)))\ndef is_triangle(a,b,c):\n    '''\n    Write a function to determine if the triangle is valid or invalid.\n    '''\n    if (a+b<c or a+c<b or b+c<a):\n        return False\n    return True\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_triangle_test(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef perimeter(a,b,c):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    return a+b+c\ndef perimeter_test(a,b,c):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    return a+b+c\ndef is_convex(a,b,c,d):\n    '''\n    Write a function to determine if a polygon is convex or not.\n    '''\n    if (a==b or a==c or b==c):\n        return True\n    elif (a-b==c-b or a-c==b-c or a-d==c-d or b-c==d-c):\n        return True\n    return False\ndef is_convex_test(a,b,c,d):\n    '''\n    Write a function to determine if a polygon is convex or not.\n    '''\n    if (a==b or a==c or b==c):\n        return True\n    elif (a-b==c-b or a-c==b-c or a-d==c-d or b-c==d-c):\n        return True\n    return False\ndef is_right_triangle(a,b,c):\n    '''\n    Write a function to determine if the triangle is right or not.\n    '''\n    if (a**2+b**2==c**2 or a**2+c**2==b**2 or b**2+c**2==a**2):\n        return True\n    return False\ndef is_right_triangle_test(a,b,c):\n    '''\n    Write a function to determine if the triangle is right or not.\n    '''\n    if (a**2+b**2==c**2 or a**2+c**2==b**2 or b**2+c**2==a**2):\n        return True\n    return False\ndef is_rectangle(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a rectangle or not.\n    '''\n    if (a+b==c+d or a+c==b+d or b+c==a+d or a+d==b+c):\n        return True\n    return False\ndef is_rectangle_test(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a rectangle or not.\n    '''\n    if (a+b==c+d or a+c==b+d or b+c==a+d or a+d==b+c):\n        return True\n    return False\ndef is_square(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a square or not.\n    '''\n    if (is_rectangle(a,b,c,d)):\n        return True\n    return False\ndef is_square_test(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a square or not.\n    '''\n    if (is_rectangle(a,b,c,d)):\n        return True\n    return False\ndef is_rhombus(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a rhombus or not.\n    '''\n    if (is_rectangle(a,b,c,d) and is_rectangle(c,d,a,b)):\n        return True\n    return False\ndef is_rhombus_test(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a rhombus or not.\n    '''\n    if (is_rectangle(a,b,c,d) and is_rectangle(c,d,a,b)):\n        return True\n    return False\ndef is_parallelogram(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a parallelogram or not.\n    '''\n    if (is_rectangle(a,b,c,d) and is_rectangle(c,d,a,b) and a+b==c+d):\n        return True\n    return False\ndef is_parallelogram_test(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a parallelogram or not.\n    '''\n    if (is_rectangle(a,b,c,d) and is_rectangle(c,d,a,b) and a+b==c+d):\n        return True\n    return False\ndef is_trapezium(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a trapezium or not.\n    '''\n    if (is_rectangle(a,b,c,d) and not is_rectangle(c,d,a,b)):\n        return True\n    return False\ndef is_trapezium_test(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a trapezium or not.\n    '''\n    if (is_rectangle(a,b,c,d) and not is_rectangle(c,d,a,b)):\n        return True\n    return False\ndef is_kite(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a kite or not.\n    '''\n    if (not is_rectangle(a,b,c,d) and not is_rectangle(c,d,a,b)):\n        return True\n    return False\ndef is_kite_test(a,b,c,d):\n    '''\n    Write a function to determine if the quadrilateral is a kite or not.\n    '''\n    if (not is_rectangle(a,",
        "num_ids": 13
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    r=degree*math.pi/180\n    return r\n    pass\ndef get_diameter_radius(radius):\n    '''\n    Write a function to get diameter and radius.\n    '''\n    diameter=2*radius\n    return diameter\n    pass\ndef circle_circumference(diameter):\n    '''\n    Write a function to compute the circumference of a circle.\n    '''\n    circumference=diameter*math.pi\n    return circumference\n    pass\ndef circle_area(radius):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    area=math.pow(radius,2)*math.pi\n    return area\n    pass\ndef circle_area_by_diameter(diameter):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    area=math.pow(diameter/2,2)*math.pi\n    return area\n    pass\ndef circle_area_by_radius(radius):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    area=math.pow(radius,2)*math.pi\n    return area\n    pass\ndef circle_area_by_circumference(circumference):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    area=math.pow(circumference/2,2)*math.pi\n    return area\n    pass\ndef circle_area_by_diameter_2(diameter):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    area=math.pow(diameter,2)/4*math.pi\n    return area\n    pass\ndef circle_area_by_radius_2(radius):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    area=math.pow(radius,2)*math.pi\n    return area\n    pass\ndef circle_area_by_circumference_2(circumference):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    area=math.pow(circumference,2)/4*math.pi\n    return area\n    pass\ndef sphere_volume(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    volume=4/3*math.pow(radius,3)*math.pi\n    return volume\n    pass\ndef sphere_volume_by_radius(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    volume=4/3*math.pow(radius,3)*math.pi\n    return volume\n    pass\ndef sphere_volume_by_diameter(diameter):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    volume=4/3*math.pow(diameter/2,3)*math.pi\n    return volume\n    pass\ndef sphere_volume_by_circumference(circumference):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    volume=4/3*math.pow(circumference/2,3)*math.pi\n    return volume\n    pass\ndef sphere_volume_by_diameter_2(diameter):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    volume=4/3*math.pow(diameter,3)/12*math.pi\n    return volume\n    pass\ndef sphere_volume_by_radius_2(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    volume=4/3*math.pow(radius,3)*math.pi\n    return volume\n    pass\ndef sphere_volume_by_circumference_2(circumference):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    volume=4/3*math.pow(circumference,3)/12*math.pi\n    return volume\n    pass\ndef cylinder_volume(radius, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(radius,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_radius(radius, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(radius,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_diameter(diameter, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(diameter/2,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_diameter_2(diameter, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(diameter,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_radius_2(radius, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(radius,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_circumference(circumference, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(circumference,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_circumference_2(circumference, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(circumference,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_radius_3(radius, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(radius,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_diameter_3(diameter, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(diameter/2,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_radius_by_diameter_3(radius, diameter, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(radius,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_diameter_by_radius_3(diameter, radius, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(radius,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_circumference_3(circumference, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(circumference,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_circumference_by_diameter_3(circumference, diameter, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(circumference,2)*height\n    return volume\n    pass\ndef cylinder_volume_by_circumference_by_radius_3(circumference, radius, height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(radius,2)*height\n    return volume\n    pass\ndef cone_volume(radius, height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    volume=math.pi*math.pow(radius,2)*height/3\n    return volume\n    pass\ndef cone_volume_by_radius(radius, height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    volume=math.pi*math.pow(radius,2)",
        "num_ids": 18
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n    \ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = math.degrees(radian)\n    return degree\n",
        "num_ids": 18
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (float(degree) * math.pi) / 180\n",
        "num_ids": 17
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_match = re.finditer(pattern, text)\n    for match in pattern_match:\n        print(match.start())\n        print(match.group())\n        print('-'*10)\n    return [match.group() for match in pattern_match]\n",
        "num_ids": 65
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    print(pattern)\n    start = 0\n    while True:\n        start = text.find(pattern, start)\n        if start == -1:\n            return 'Not found'\n        print(start)\n        start += 1\n        start = start + len(pattern)\n",
        "num_ids": 66
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #start = re.search(pattern, text)\n    #end = re.search(pattern, text[len(text) - 1])\n    #print(start, end)\n    start = text.find(pattern)\n    end = text.rfind(pattern)\n    return start, end\n",
        "num_ids": 71
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = pattern\n    text = text\n    return re.search(regex, text).group()\n",
        "num_ids": 27
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n",
        "num_ids": 14
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    for match in re.finditer(pattern, text):\n        return match.group()\n",
        "num_ids": 23
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = '\\W' + pattern + '\\W'\n    match = re.search(pattern, text)\n    return match.group(0) if match else False\n",
        "num_ids": 42
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match == None:\n        return None\n    else:\n        return match.group()\n",
        "num_ids": 36
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n",
        "num_ids": 14
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match is None:\n        return (None, None, None)\n    start = match.start()\n    end = match.end()\n    return (text[start:end], start, end)\n",
        "num_ids": 61
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1) \n    bell[0] = bell[1] = 1\n    for i in range(2, n+1): \n        bell[i] = bell[i-1] + bell[i-2] \n    return bell[n] \n",
        "num_ids": 72
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for x in range(n+1)] for x in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1] \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n",
        "num_ids": 124
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_number=0\n    bell_number=n*(n+1)/2\n    return bell_number\nn=int(input(\"Enter value of n: \"))\nprint(bell_Number(n)",
        "num_ids": 51
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def b(n): \n        bell=1\n        for i in range(1, n+1): \n            bell = bell * i \n        return bell\n    if n==0: \n        return 1\n    else: \n        return (b(n) - b(n-1)) \n",
        "num_ids": 74
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0,1]\n    for i in range(2,n):\n        bell.append(bell[i-2]+bell[i-1])\n    return bell[n-1]",
        "num_ids": 48
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    bell_list = [0]\n    bell_list.append(1)\n",
        "num_ids": 23
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] \n    for i in range(1,n+1): \n        bell.append(bell[i-1]*i)\n    return bell[n] \ndef GCD(a,b):\n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    # Everything divides 0 \n    if (a == 0): \n        return b \n    if (b == 0): \n        return a \n    while (a!= 0): \n        c = a \n        a = b % a \n        b = c \n    return b \ndef LCM(a,b):\n    '''\n    Write a python function to find the LCM of two numbers.\n    '''\n    return int(a*b/GCD(a,b)) \ndef sumOfDigits(num):\n    '''\n    Write a python function to find the sum of all digits of a number.\n    '''\n    return sum(map(int, str(num))) \ndef factorial(n): \n    '''\n    Write a python function to calculate factorial of a number.\n    '''\n    if (n == 1): \n        return 1\n    else: \n        return n*factorial(n-1) \ndef harmonic(n): \n    '''\n    Write a python function to calculate harmonic number of n.\n    '''\n    return 1.0/n + sumOfDigits(1.0/n) \ndef primeFactors(n): \n    '''\n    Write a python function to print all the prime factors of a given number.\n    '''\n    # Print the number of two's that divide n \n    while n % 2 == 0: \n        print(2) \n        n = n / 2\n    # n must be odd at this point \n    for i in range(3,int(math.sqrt(n))+1,2): \n        # while i divides n, print i ad divide n \n        while n % i== 0: \n            print(i) \n            n = n / i \n    # Condition if n is a prime \n    # number greater than 2 \n    if n > 2: \n        print(n) \nn = int(input(\"enter a number to find its prime factors: \"))\nprimeFactors(n) ",
        "num_ids": 171
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[1]]\n    for i in range(1, n):\n        bell.append([sum(j) for j in zip(*[bell[-1][k:] + [bell[-1][k] + bell[-1][k - 1]] for k in range(i)])])\n    return bell[n-1]\n",
        "num_ids": 80
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] \n    for i in range(1, n): \n        bell.append(bell[i-1]*i) \n    return bell[n-1]\n",
        "num_ids": 47
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] \n    for i in range(1, n + 1): \n        bell.append(bell[i - 1] + bell[i - 1] * i) \n    return bell[n] \n",
        "num_ids": 55
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n        \nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 3))\nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 4))\nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 8))\n",
        "num_ids": 132
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    try:\n        return list1.pop(L)\n    except Exception as e:\n        return f'Error: {e}'\n",
        "num_ids": 34
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print('Original list', list1)\n    new_list = []\n    for i in range(L):\n        new_list.append(list1.pop(0))\n    print('New list', new_list)\n",
        "num_ids": 54
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Initialize a list2\n    list2 = []\n    #Initalize the list\n    for i in range(len(list1)):\n        if i == L:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i])\n",
        "num_ids": 72
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    if (L<n):\n        return list1[:L] + list1[L+1:]\n    else:\n        return []\n",
        "num_ids": 44
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in list1:\n        if i!= L:\n            list2.append(i)\n    return list2\n",
        "num_ids": 38
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    try:\n        L = int(L)\n    except:\n        return \"Enter a valid integer only\"\n    if L > len(list1):\n        return \"The index specified is out of range\"\n    for i in range(L):\n        list1.pop(i)\n    return list1\n",
        "num_ids": 73
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L<0 or L>=len(list1):\n        raise ValueError('Invalid k')\n    return list1[:L]+list1[L+1:]\n",
        "num_ids": 42
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # print(\"list1\", list1)\n    # print(\"L\", L)\n    \n    del list1[L-1]\n    return list1\n",
        "num_ids": 39
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N >= len(test_list[0]):\n        return 'Not a valid input'\n    max_list = []\n    for j in range(len(test_list[0])):\n        max_list.append(max(test_list[i][j] for i in range(len(test_list))))\n    return max_list[N]\n",
        "num_ids": 86
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N-1] for i in range(len(test_list))])\n",
        "num_ids": 29
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0 or N < 0:\n        raise ValueError('list is empty')\n    elif N >= len(test_list[0]):\n        raise ValueError('list of lists is shorter than column index')\n    else:\n        column = []\n        for i in range(len(test_list)):\n            column.append(test_list[i][N])\n        return max(column)\n",
        "num_ids": 102
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    new_list = []\n    # this makes a new list that is only the nth column of the matrix\n    for list in test_list:\n        new_list.append(list[N - 1])\n    return max(new_list)\n",
        "num_ids": 59
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    try:\n        if N >= len(test_list) or N < 0:\n            return \"Please input a positive integer less than the length of the list.\"\n    except:\n        return \"Please input a valid list of lists.\"\n    return max(test_list[i][N] for i in range(len(test_list)))\n",
        "num_ids": 79
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = 0\n    for i in test_list:\n        if N < len(i):\n            result = max(result, i[N])\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = []\n    for row in test_list:\n        result.append(max(row))\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    pass # delete this line\n",
        "num_ids": 9
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # TODO: Implement me!\n    # Use a for loop to iterate through the inner lists of the matrix.\n    # Find the Nth item of each list within the matrix.\n    # Use a max function on the Nth items of the inner lists.\n    # Return the max item.\n    pass\n",
        "num_ids": 72
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        lst_list = []\n        for i in range(0, len(lst)):\n            lst_list.append([lst[i][0], lst[i][1]])\n        return lst_list\n",
        "num_ids": 75
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a = []\n    b = []\n    c = []\n    for i in lst:\n        a.append(i[0])\n        b.append(i[1])\n    c = [a,b]\n    return(c)\n",
        "num_ids": 60
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0][0], lst[1][1]]\n",
        "num_ids": 20
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(x) for x in zip(*lst)]\n",
        "num_ids": 18
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    list = []\n    for i in range(len(lst)):\n        list.append([lst[i][0], lst[i][1]])\n    return list\n",
        "num_ids": 47
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #return [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n    #return [[lst[i][0] for i in range(len(lst))],[lst[i][1] for i in range(len(lst))]]\n    return list(zip(*lst))\n",
        "num_ids": 83
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [[lst[0][0],lst[0][1]]]\n    \n    if len(lst) == 2:\n        return [[lst[0][0],lst[1][0]], [lst[0][1],lst[1][1]]]\n    \n    else:\n        first = lst[0]\n        lst.remove(lst[0])\n        return [merge(lst)] + [[first[0],merge(lst)[0][0]]] + [[merge(lst)[0][1],first[1]]]\n",
        "num_ids": 169
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return lst\n    result = [[lst[0][0],lst[0][1]]]\n    for i in range(1, len(lst)):\n        if result[-1][1] < lst[i][0]:\n            result.append([lst[i][0],lst[i][1]])\n        elif result[-1][1] >= lst[i][0] and result[-1][1] <= lst[i][1]:\n            result[-1][1] = lst[i][1]\n    return result\n    \ndef sort(lst):\n    '''\n    Write a python function which takes a list of integers as a parameter and returns a list of lists, where each sublist has two elements: the first element is the length of the longest sequence of ascending numbers which can be found in the sublist, and the second element is a list of the numbers from the sublist that have this length.\n    '''\n    if not lst:\n        return lst\n    result = []\n    for i in range(0, len(lst)):\n        temp = []\n        if i == 0:\n            temp.append(lst[i])\n            j = 1\n        else:\n            if lst[i] <= lst[i-1]:\n                temp.append(lst[i])\n            else:\n                temp.append(lst[i-1])\n                j = i\n        while j < len(lst):\n            if lst[j] > lst[j-1]:\n                temp.append(lst[j])\n            else:\n                break\n            j += 1\n        if len(temp) > len(result[-1][1]):\n            result.append([len(temp),temp])\n    return result\n",
        "num_ids": 198
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(i) for i in zip(*lst)]\n",
        "num_ids": 18
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    return [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n",
        "num_ids": 33
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum=0\n    for i in test_list:\n        sum+=i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum = cummulative_sum + i\n    return cummulative_sum\n",
        "num_ids": 43
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # If the list is empty, return 0\n    if not test_list:\n        return 0\n",
        "num_ids": 25
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    temp_sum = 0\n    for i in test_list:\n        temp_sum += i\n        cum_sum.append(temp_sum)\n    return cum_sum\n    \n    \ndef convert_to_string(test_list):\n    '''\n    Write a function to convert a given tuple list to a string list\n    '''\n    converted_string_list = []\n    for i in test_list:\n        converted_string_list.append(str(i))\n    return converted_string_list\n    \n    \ndef convert_to_list(test_string):\n    '''\n    Write a function to convert a given string list to a tuple list.\n    '''\n    converted_string_list = []\n    for i in test_string:\n        converted_string_list.append(int(i))\n    return converted_string_list\n    \n    \ndef find_max(test_list):\n    '''\n    Write a function to find the maximum value from a given tuple list.\n    '''\n    max_value = max(test_list)\n    return max_value\n    \n    \ndef find_min(test_list):\n    '''\n    Write a function to find the minimum value from a given tuple list.\n    '''\n    min_value = min(test_list)\n    return min_value\n    \n    \ndef find_max_and_min(test_list):\n    '''\n    Write a function to find the maximum and minimum values from a given tuple list.\n    '''\n    max_value = max(test_list)\n    min_value = min(test_list)\n    return (max_value,min_value)\n    \n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function to remove the duplicates from the given tuple list.\n    '''\n    without_duplicates = []\n    for i in test_list:\n        if i not in without_duplicates:\n            without_duplicates.append(i)\n    return without_duplicates\n    \n    \ndef find_common_values(test_list1,test_list2):\n    '''\n    Write a function to find the common values between two given tuple list.\n    '''\n    return list(set(test_list1) & set(test_list2))\n    \n    \ndef tuple_count(test_list,test_value):\n    '''\n    Write a function to count the number of times a given value is present in a given tuple list.\n    '''\n    count = 0\n    for i in test_list:\n        if test_value == i:\n            count += 1\n    return count\n    \n    \ndef count_odd_and_even(test_list):\n    '''\n    Write a function to count the number of odd and even values in a given tuple list.\n    '''\n    count_odd = 0\n    count_even = 0\n    for i in test_list:\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_odd,count_even\n    \n    \ndef sort_list(test_list):\n    '''\n    Write a function to sort a given tuple list.\n    '''\n    return sorted(test_list)\n    \n    \ndef sort_list_in_decending_order(test_list):\n    '''\n    Write a function to sort a given tuple list in descending order.\n    '''\n    return sorted(test_list,reverse=True)\n    \n    \ndef sort_list_without_duplicates(test_list):\n    '''\n    Write a function to sort a given tuple list without duplicates.\n    '''\n    return sorted(set(test_list))\n    \n    \ndef check_anagrams(test_list1,test_list2):\n    '''\n    Write a function to check if the two given tuples list are anagrams.\n    '''\n    if sorted(test_list1) == sorted(test_list2):\n        return True\n    else:\n        return False\n        \n        \ndef sum_all_negative_numbers_in_list(test_list):\n    '''\n    Write a function to sum all negative values in a given tuple list.\n    '''\n    temp_sum = 0\n    for i in test_list:\n        if i < 0:\n            temp_sum += i\n    return temp_sum\n    \n    \ndef find_nth_index(test_list,test_value,nth_index):\n    '''\n    Write a function to find the nth index of a given value in a given tuple list.\n    '''\n    nth_index_count = 0\n    for i in test_list:\n        if test_value == i:\n            nth_index_count += 1\n        if nth_index_count == nth_index:\n            return test_list.index(i)\n    return -1\n    \n    \ndef return_values_greater_than_second(test_list):\n    '''\n    Write a function to return all values in a given tuple list greater than second value.\n    '''\n    greater_values = []\n    second_value = test_list[1]\n    for i in test_list:\n        if i > second_value:\n            greater_values.append(i)\n    return greater_values\n    \n    \ndef remove_values_greater_than_second(test_list):\n    '''\n    Write a function to remove all values in a given tuple list greater than second value.\n    '''\n    for i in test_list:\n        if i > test_list[1]:\n            test_list.remove(i)\n    return test_list\n    \n    \ndef remove_value_greater_than_second_by_index(test_list):\n    '''\n    Write a function to remove all values in a given tuple list greater than second value by index.\n    '''\n    for i in test_list:\n        if test_list.index(i) > 1:\n            test_list.remove(i)\n    return test_list\n    \n    \ndef sum_all_even_numbers_in_list(test_list):\n    '''\n    Write a function to sum all even values in a given tuple list.\n    '''\n    temp_sum = 0\n    for i in test_list:\n        if i % 2 == 0:\n            temp_sum += i\n    return temp_sum\n    \n    \ndef sum_all_odd_numbers_in_list(test_list):\n    '''\n    Write a function to sum all odd values in a given tuple list.\n    '''\n    temp_sum = 0\n    for i in test_list:\n        if i % 2!= 0:\n            temp_sum += i\n    return temp_sum\n    \n    \ndef multiply_all_values_in_list(test_list):\n    '''\n    Write a function to multiply all values in a given tuple list.\n    '''\n    temp_multiplication = 1\n    for i in test_list:\n        temp_multiplication *= i\n    return temp_multiplication\n    \n    \ndef multiply_all_values_greater_than_second(test_list):\n    '''\n    Write a function to multiply all values in a given tuple list greater than second value.\n    '''\n    temp_multiplication = 1\n    for i in test_list:\n        if i > test_list[1]:\n            temp_multiplication *= i\n    return temp_multiplication\n    \n    \ndef sum_all_values_greater_than_second(test_list):\n    '''\n    Write a function to sum all values in a given tuple list greater than second value.\n    '''\n    temp_sum = 0\n    for i in test_list:\n        if i > test_list[1]:\n            temp_sum += i\n    return temp_sum\n    \n    \ndef find_second_max_value(test_list):\n    '''\n    Write a function to find the second maximum value in a given tuple list.\n    '''\n    first_max = max(test_list)\n    test_list.remove(first_max)\n    second_max = max(test_list)\n    return second_max\n    \n    \ndef find_second_min_value(test_list):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    res = []\n    tot = 0\n    for i in test_list:\n        tot += i\n        res.append(tot)\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(len(test_list)):\n        cum_sum.append(sum(test_list[:i+1]))\n    return cum_sum\n",
        "num_ids": 49
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    tup = tuple(test_list)\n    result = sum(tup)\n    print('The cumulative sum of the list is ',result)\n",
        "num_ids": 36
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = [1,2,3,4,5,6,7,8,9,10]\n    def sum_func(list):\n        return sum(list)\n    print(sum_func(test_list))\n",
        "num_ids": 57
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    s = 0\n    cum_sum = []\n    for i in test_list:\n        s += i\n        cum_sum.append(s)\n    return cum_sum\n",
        "num_ids": 44
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum=0\n    output_list=[]\n    for i in range(len(test_list)):\n        sum += test_list[i]\n        output_list.append(sum)\n    return output_list\n",
        "num_ids": 54
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # return list(map(lambda x : sum(x) / len(x), nums))\n    return list(map(lambda x : sum(x) / len(x), nums))\n",
        "num_ids": 47
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(tup)/len(tup) for tup in nums]\n",
        "num_ids": 23
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(i)/len(i), 2) for i in nums]\n",
        "num_ids": 24
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        result.append(sum(t) / len(t))\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums[i])/len(nums[i]) for i in range(len(nums))]\n",
        "num_ids": 32
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num)/len(num) for num in nums]\n",
        "num_ids": 20
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [average(tup) for tup in nums]\n",
        "num_ids": 18
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for tup in nums:\n        num = 0\n        for n in tup:\n            num += n\n        avg.append(num / len(tup))\n    return avg\nprint(average_tuple([(3,4),(2,5),(4,8)]))\n",
        "num_ids": 77
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg_list.append(sum(num) / len(num))\n    return avg_list\n",
        "num_ids": 42
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in nums]\n    # return [sum(i)/len(i) for i in zip(*nums)]\n",
        "num_ids": 41
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = []\n    for i in range(0, len(test_tup1)):\n        modulo_tup.append(test_tup1[i]%test_tup2[i])\n",
        "num_ids": 56
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n    return result_tup\n",
        "num_ids": 64
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1[:]\n    tup2 = test_tup2[:]\n    for i in range(len(tup1)):\n        tup1[i] = tup1[i] % tup2[i]\n    return tuple(tup1)\n",
        "num_ids": 73
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(test_tup1[i]%test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(test_tup1[i] % test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(tup1 % tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 37
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    #  we are storing the position of d and 0 in an array\n    #  this array is in the form of (d, 0)\n    #  we are now checking if the number of jumps required is more than the number of positions present in the array\n    #  the if condition has been used to avoid the case where the value of d in array is negative\n",
        "num_ids": 84
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if d == 0 or steps == 0:\n        return float('inf')\n    if steps < d:\n        return float('inf')\n    if steps == d:\n        return 0\n    return min_Jumps(steps-1, d-1) + min_Jumps(steps-1, d)\n",
        "num_ids": 75
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_position = 0\n    while current_position!= d:\n        if current_position < d:\n            jumps += 1\n            current_position += steps\n        else:\n            return -1\n    return jumps\n",
        "num_ids": 60
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    jumps = 0\n    while d!= 0:\n        d, step = d - 1, steps + 1\n        if d % 2 == 0:\n            d //= 2\n            steps += 1\n        else:\n            d -= 1\n            steps += 1\n        jumps += 1\n    return jumps\n",
        "num_ids": 84
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d > steps:\n        return -1\n    if d == 0:\n        return 0\n    if d == steps:\n        return 1\n    \n    min_jumps = float(\"inf\")\n    for i in range(1, steps+1):\n        if d < i:\n            break\n        temp = min_Jumps(steps-i, d-i)\n        if temp!= -1:\n            min_jumps = min(temp, min_jumps)\n    if min_jumps == float(\"inf\"):\n        return -1\n    return min_jumps + 1\n",
        "num_ids": 141
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    import math\n    def valid_position(x, y):\n        if x >= 0 and y >= 0 and x <= d and y <= d:\n            return True\n        else:\n            return False\n",
        "num_ids": 48
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    if d == 0 or d == steps:\n        return count\n    else:\n        if d > steps:\n            return -1\n        if d < 0:\n            return -1\n    \n    jumps = 0\n    while True:\n        if d - steps == 0:\n            return jumps + 1\n        elif d < steps:\n            return -1\n        d -= 1\n        jumps += 1\n        \n    \ndef left_side(matrix):\n    '''\n    Write a function to flip the image upside down by reflecting it around the left side.\n    '''\n    if len(matrix) == 0:\n        return []\n    for j in range(len(matrix)):\n        for i in range(len(matrix)):\n            print(matrix[i][j], end=' ')\n        print()\n",
        "num_ids": 62
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # stores number of jumps required to reach (d,0) form origin\n    ans = 0\n    \n    # stores the current position i.e (0, 0)\n    cur = (0, 0)\n    \n    # stores the distance from current position to the destination position (d, 0)\n    dis = abs(d - cur[0])\n    \n    # store the distance travelled in current iteration\n    cur_dis = 0\n    \n    # iterate over the steps given\n    for s in steps:\n        \n        # if current distance is less than required distance, then increment the number of jumps by 1\n        if cur_dis < dis:\n            ans += 1\n            \n        # update the current position as (d, 0)\n        cur = (d, 0)\n        \n        # increment the current distance travelled in current iteration by 1\n        cur_dis += 1\n        \n        # if current distance travelled in current iteration is less than required distance, then update the required distance\n        if cur_dis < dis:\n            dis = cur_dis\n        \n    # return the number of jumps required to reach the destination point\n    return ans\n    \ndef min_Jumps_dynamic(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # stores number of jumps required to reach (d,0) form origin\n    ans = [0] * (d + 1)\n    \n    # stores the current position i.e (0, 0)\n    cur = (0, 0)\n    \n    # stores the distance from current position to the destination position (d, 0)\n    dis = abs(d - cur[0])\n    \n    # store the distance travelled in current iteration\n    cur_dis = 0\n    \n    # iterate over the steps given\n    for s in steps:\n        \n        # if current distance is less than required distance, then increment the number of jumps by 1\n        if cur_dis < dis:\n            ans[cur_dis] += 1\n            \n        # update the current position as (d, 0)\n        cur = (d, 0)\n        \n        # increment the current distance travelled in current iteration by 1\n        cur_dis += 1\n        \n        # if current distance travelled in current iteration is less than required distance, then update the required distance\n        if cur_dis < dis:\n            dis = cur_dis\n    \n    # return the number of jumps required to reach the destination point\n    return ans\n    \ndef min_Jumps_better(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # stores number of jumps required to reach (d,0) form origin\n    ans = 0\n    \n    # stores the current position i.e (0, 0)\n    cur = (0, 0)\n    \n    # stores the distance from current position to the destination position (d, 0)\n    dis = abs(d - cur[0])\n    \n    # store the distance travelled in current iteration\n    cur_dis = 0\n    \n    # iterate over the steps given\n    for s in steps:\n        \n        # if current distance is less than required distance, then increment the number of jumps by 1\n        if cur_dis < dis:\n            ans += 1\n            \n        # update the current position as (d, 0)\n        cur = (d, 0)\n        \n        # increment the current distance travelled in current iteration by 1\n        cur_dis += 1\n        \n        # if current distance travelled in current iteration is less than required distance, then update the required distance\n        if cur_dis < dis:\n            dis = cur_dis\n    \n    # return the number of jumps required to reach the destination point\n    return ans\n    \nif __name__ == \"__main__\":\n    \n    # store the steps given\n    steps = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]\n    \n    print(\"Minimum number of jumps required to reach (d, 0) from origin is\", min_Jumps(steps, 9))\n    \n    print(\"Minimum number of jumps required to reach (d, 0) from origin in dynamic programming is\", min_Jumps_dynamic(steps, 9))\n    \n    print(\"Minimum number of jumps required to reach (d, 0) from origin in better dynamic programming is\", min_Jumps_better(steps, 9))\n    \n    steps = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]\n    \n    print(\"Minimum number of jumps required to reach (d, 0) from origin in dynamic programming is\", min_Jumps_dynamic(steps, 30))\n    \n    print(\"Minimum number of jumps required to reach (d, 0) from origin in better dynamic programming is\", min_Jumps_better(steps, 30))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1342
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps=0\n    while steps>0:\n        if steps >= d:\n            steps-=d\n            jumps+=1\n        else:\n            steps-=abs(steps)\n            jumps+=1\n    return jumps\n",
        "num_ids": 57
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # add the first step in the list\n    stack = [0]\n    n = len(steps)\n    # print(steps)\n    jumps = 0\n",
        "num_ids": 40
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if nums2 == []:\n        return []\n    if nums1 == []:\n        return []\n    if len(nums1) == 1:\n        return [nums1[0]/nums2[0]]\n    return [nums1[0]/nums2[0]]+div_list(nums1[1:],nums2[1:])\n",
        "num_ids": 93
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        assert len(nums1) == len(nums2), 'Different list lengths'\n        return [[nums1[i]/nums2[i]] for i in range(len(nums1))]\n    except AssertionError as error:\n        print(error)\n",
        "num_ids": 72
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print([x/y for x,y in zip(nums1,nums2)])\n",
        "num_ids": 25
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    return [x/y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 26
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # x = [int(x) for x in nums1]\n    # y = [int(y) for y in nums2]\n    # z = []\n    # for i in x:\n    #     for j in y:\n    #         z.append(i/j)\n    # return z\n    return [i / j for i in nums1 for j in nums2]\n",
        "num_ids": 96
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n    \ndef div_list2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x//y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1 / n2 for n1, n2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n    #1\n    # return [nums1[i]/nums2[i] for i in range(len(nums1))]\n    #2\n    # return [nums1[i] / nums2[i] for i in range(len(nums1)) if nums2[i]!=0]\n    #3\n    # return [0 if nums2[i]==0 else nums1[i] / nums2[i] for i in range(len(nums1))]\n    #4\n    # result = []\n    # for i in range(len(nums1)):\n    #     if nums2[i]!= 0:\n    #         result.append(nums1[i] / nums2[i])\n    #     else:\n    #         result.append(0)\n    # return result\n",
        "num_ids": 210
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string and return list of strings\n    temp_list = test_str.split()\n    # initialize empty string\n    final_str = \"\"\n    # check each string in list and add if it is not a number\n    for each_str in temp_list:\n        if not each_str.isnumeric():\n            final_str = final_str + each_str + \" \"\n    # return the string\n    return final_str\n",
        "num_ids": 105
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return \" \".join(re.findall(r'\\w+', test_str)) + \" \" + \" \".join(re.findall(r'\\d+', test_str))\n",
        "num_ids": 47
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    letters = []\n    numbers = []\n    for letter in test_str:\n        if letter.isalpha():\n            letters.append(letter)\n        elif letter.isnumeric():\n            numbers.append(letter)\n    return \"\".join(letters + numbers)\n",
        "num_ids": 68
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    output_str = ''\n    for x in test_str:\n        if x in '0123456789':\n            output_str += x\n    output_str += test_str.lstrip('0123456789')\n    return output_str\n",
        "num_ids": 62
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(i for i in test_str if not i.isdigit()) + ''.join(i for i in test_str if i.isdigit())\n",
        "num_ids": 43
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    li = re.findall('\\d+', test_str)\n    new_str = re.sub('\\d+', '', test_str)\n    new_str += ''.join(li)\n    return new_str\n",
        "num_ids": 57
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if i.isdigit()]) + ''.join([i for i in test_str if not i.isdigit()])\n",
        "num_ids": 45
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = []\n    num = 0\n    for s in test_str:\n        if s in ['0','1','2','3','4','5','6','7','8','9']:\n            num = num * 10 + int(s)\n        else:\n            new_str.append(s)\n    new_str.append(str(num))\n    return ''.join(new_str)\n",
        "num_ids": 99
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_set = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n    s, d = '', ''\n    for c in test_str:\n        if c in num_set:\n            s += c\n        else:\n            d += c\n    return d + s\n",
        "num_ids": 87
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize string\n    s_list = []\n",
        "num_ids": 14
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return subset_counter(sorted(a, reverse=True))\n",
        "num_ids": 18
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return max([len(subset) for subset in powerset(a) if is_subset_divisible(subset)])\n",
        "num_ids": 33
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # a = [1, 2, 4, 8]\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 2\n    # f(2, 4) = 1\n    # f(2, 8) = 1\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 2\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 1\n    # f(2, 2) = 2\n    # f(2, 4) = 1\n    # f(2, 8) = 2\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 2\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 2\n    # f(8, 4) = 2\n    # f(8, 8) = 3\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) ",
        "num_ids": 2007
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def sub_sets(arr):\n        if len(arr) == 1:\n            return [arr]\n",
        "num_ids": 27
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    max_subset = None\n",
        "num_ids": 17
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    return find_largest_subset_helper(a, n)\n",
        "num_ids": 27
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # a = [17,13,12,14,19,5,7,18,6,21,3]\n    # a = [6,17,4,13,12,10,14,19,5,7,16,18,3]\n    # a = [1,2,3,4,5,6,7,8,9,10]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560",
        "num_ids": 2006
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # a = [6, 3, 11, 5, 12, 9]\n    a = [6, 3, 11, 5, 12, 9]\n",
        "num_ids": 37
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    return largest_subset_rec(a, 0, 0)\n",
        "num_ids": 32
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def gcd(a, b):\n        while b:\n            a, b = b, a%b\n        return a\n    \n    def sgcd(a, b):\n        def gcd(a, b):\n            while b:\n                a, b = b, a%b\n            return a\n        def sgcd(a, b):\n            if not b:\n                return 1\n            elif a%b:\n                return gcd(b, a%b)\n            else:\n                return sgcd(b, a//b)\n        return sgcd(a, b)\n    \n    def get_gcd(a, b):\n        if a%b == 0:\n            return b\n        else:\n            return get_gcd(b, a%b)\n    \n    def get_lcm(a, b):\n        return a*b//get_gcd(a, b)\n    \n    a = list(set(a))\n    a.sort()\n    l = len(a)\n    ans = []\n    m = [1]*l\n    for i in range(l):\n        for j in range(i):\n            if gcd(a[i],a[j]) == 1 and gcd(m[i],m[j]) == 1:\n                m[i] = max(m[i], m[j]+1)\n    for i in range(l):\n        if m[i] == l:\n            ans.append(a[i])\n    return ans\n",
        "num_ids": 360
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n",
        "num_ids": 12
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1]))/2\n    return find_median(arr1, arr2, n//2)\n",
        "num_ids": 83
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    #if one list is longer than the other\n    if n<=len(arr1):\n        x = len(arr1)\n        y = n\n    else:\n        x = n\n        y = len(arr2)\n    if x==1 and y==0:\n        return arr1[0]\n    if x==0 and y==1:\n        return arr2[0]\n    if x==1 and y==1:\n        if arr1[0] < arr2[0]:\n            return arr2[0]\n        elif arr1[0] > arr2[0]:\n            return arr1[0]\n        else:\n            return arr1[0]\n    median = 0\n    if n%2 == 0:\n        mid1 = n//2\n        mid2 = mid1 - 1\n        median = (arr1[mid1] + arr1[mid2])/2\n    else:\n        mid1 = n//2\n        median = arr1[mid1]\n    if y%2 == 0:\n        mid3 = y//2\n        mid4 = mid3 - 1\n        median = (median + arr2[mid4] + arr2[mid3])/2\n    else:\n        mid3 = y//2\n        median = (median + arr2[mid3])/2\n    return median\n    \ndef get_mean(arr1, arr2, n):\n    '''\n    Write a function to find the mean of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = 0\n    if n%2 == 0:\n        mid1 = n//2\n        mid2 = mid1 - 1\n        mean = (arr1[mid1] + arr1[mid2])/2\n    else:\n        mid1 = n//2\n        mean = arr1[mid1]\n    if x%2 == 0:\n        mid3 = x//2\n        mid4 = mid3 - 1\n        mean = (mean + arr2[mid4] + arr2[mid3])/2\n    else:\n        mid3 = x//2\n        mean = (mean + arr2[mid3])/2\n    return mean\n    \ndef get_mode(arr1, arr2, n):\n    '''\n    Write a function to find the mode of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    count1 = dict()\n    count2 = dict()\n    #counts for each element in arr1\n    for i in range(len(arr1)):\n        if arr1[i] in count1:\n            count1[arr1[i]] += 1\n        else:\n            count1[arr1[i]] = 1\n    #counts for each element in arr2\n    for i in range(len(arr2)):\n        if arr2[i] in count2:\n            count2[arr2[i]] += 1\n        else:\n            count2[arr2[i]] = 1\n    #count of common elements\n    mode_count = 0\n    mode = 0\n    for i in count1:\n        if i in count2:\n            mode_count += min(count1[i], count2[i])\n    if mode_count > 0:\n        mode = min(arr1[0], arr2[0])\n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i] and count1[i] > mode_count:\n                mode = i\n    if mode_count == 0:\n        mode = None\n    return mode\n    \ndef get_variance(arr1, arr2, n):\n    '''\n    Write a function to find the variance of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = get_mean(arr1, arr2, n)\n    variance = 0\n    #calculate the variance\n    for i in range(len(arr1)):\n        variance += ((arr1[i] - mean)**2)\n    for i in range(len(arr2)):\n        variance += ((arr2[i] - mean)**2)\n    variance = variance/(x-1)\n    return variance\n    \ndef get_std(arr1, arr2, n):\n    '''\n    Write a function to find the standard deviation of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = get_mean(arr1, arr2, n)\n    std = 0\n    #calculate the standard deviation\n    for i in range(len(arr1)):\n        std += ((arr1[i] - mean)**2)\n    for i in range(len(arr2)):\n        std += ((arr2[i] - mean)**2)\n    std = sqrt(std/(x-1))\n    return std\n    \ndef get_median_2arr(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted arrays.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    median = 0\n    if n%2 == 0:\n        mid1 = n//2\n        mid2 = mid1 - 1\n        median = (arr1[mid1] + arr1[mid2])/2\n    else:\n        mid1 = n//2\n        median = arr1[mid1]\n    if x%2 == 0:\n        mid3 = x//2\n        mid4 = mid3 - 1\n        median = (median + arr2[mid4] + arr2[mid3])/2\n    else:\n        mid3 = x//2\n        median = (median + arr2[mid3])/2\n    return median\n    \ndef get_variance_2arr(arr1, arr2, n):\n    '''\n    Write a function to find the variance of two sorted arrays.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = get_mean_2arr(arr1, arr2, n)\n    variance = 0\n    #calculate the variance\n    for i in range(len(arr1)):\n        variance += ((arr1[i] - mean)**2)\n    for i in range(len(arr2)):\n        variance += ((arr2[i] - mean)**2)\n    variance = variance/(x-1)\n    return variance\n    \ndef get_std_2arr(arr1, arr2, n):\n    '''\n    Write a function to find the standard deviation of two sorted arrays.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = get_mean_2arr(arr1, arr2, n)\n    std = 0\n    #calculate the standard deviation\n    for i in range(len(arr1)):\n        std += ((arr1[i] - mean)**2)\n    for i in range(len(arr2)):\n        std += ((arr2[i] - mean)**2)\n    std = sqrt(std/(x-1)",
        "num_ids": 158
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return\n",
        "num_ids": 12
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = (n - 1) // 2\n    if n % 2 == 0:\n        return (arr1[m] + arr2[m]) / 2\n    else:\n        return arr1[m]\n",
        "num_ids": 51
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    result = []\n    i = 0\n    j = 0\n",
        "num_ids": 17
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # if n == 1:\n    #     return (arr1[0] + arr2[0])/2\n    \n    i, j = 0, 0\n    left, right = 0, n-1\n    # while (i <= right and j <= right):\n    while (left <= right):\n        mid1 = (left + right)//2\n        mid2 = n//2\n        \n        if (mid1 == mid2):\n            # print(mid1, mid2)\n            if (arr1[mid1] < arr2[mid2]):\n                left = mid1 + 1\n            else:\n                right = mid1 - 1\n        elif (mid1 < mid2):\n            left = mid1 + 1\n        else:\n            right = mid1 - 1\n    print(mid1, mid2)\n    if (n % 2 == 0):\n        return (arr1[mid1] + arr2[mid2])/2\n    else:\n        return min(arr1[mid1], arr2[mid2])\n    \n",
        "num_ids": 248
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    arr = arr1 + arr2\n    arr.sort()\n    if n % 2 == 0:\n        return (arr[int(n/2)] + arr[int(n/2 - 1)]) / 2\n    return arr[int(n/2)]\n",
        "num_ids": 74
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = 0\n    \n    arr_len = n \n    while (i < arr_len and j < arr_len):\n        if (arr1[i] < arr2[j]):\n            i += 1\n        elif (arr2[j] < arr1[i]):\n            j += 1\n        else:\n            # only two elements are same, so return either of them\n            return max(arr1[i], arr2[j])\n",
        "num_ids": 111
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_list = []\n    for num in nums:\n        power_list.append(num**n)\n    return power_list\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]**=n\n    return nums\n",
        "num_ids": 30
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return nums\n    else:\n        return [i**n for i in nums]\n",
        "num_ids": 31
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef is_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    return string.lower()\n    \ndef is_title(string):\n    '''\n    Write a python function to convert first character of each word of a given string to uppercase and remaining characters to lowercase.\n    '''\n    return string.title()\n    \ndef is_islower(string):\n    '''\n    Write a python function to check whether a given string is a lower case string or not.\n    '''\n    return string.islower()\n    \ndef is_isupper(string):\n    '''\n    Write a python function to check whether a given string is a upper case string or not.\n    '''\n    return string.isupper()\n    \ndef is_isalpha(string):\n    '''\n    Write a python function to check whether a given string contains only alphabets or not.\n    '''\n    return string.isalpha()\n    \ndef is_isspace(string):\n    '''\n    Write a python function to check whether a given string contains only spaces or not.\n    '''\n    return string.isspace()\n    \ndef is_isalnum(string):\n    '''\n    Write a python function to check whether a given string contains only alphanumeric characters or not.\n    '''\n    return string.isalnum()\n    \ndef is_isnumeric(string):\n    '''\n    Write a python function to check whether a given string contains only numbers or not.\n    '''\n    return string.isnumeric()\n    \ndef is_isprintable(string):\n    '''\n    Write a python function to check whether a given string contains only printable characters or not.\n    '''\n    return string.isprintable()\n    \ndef is_isdigit(string):\n    '''\n    Write a python function to check whether a given string contains only digits or not.\n    '''\n    return string.isdigit()\n    \ndef is_isidentifier(string):\n    '''\n    Write a python function to check whether a given string is a valid identifier or not.\n    '''\n    return string.isidentifier()\n    \ndef is_istitle(string):\n    '''\n    Write a python function to check whether a given string is a title or not.\n    '''\n    return string.istitle()\n    \ndef is_isupper(string):\n    '''\n    Write a python function to check whether a given string is a upper case string or not.\n    '''\n    return string.isupper()\n    \ndef is_islower(string):\n    '''\n    Write a python function to check whether a given string is a lower case string or not.\n    '''\n    return string.islower()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string) is not str:\n        raise TypeError(\"Input type must be a string.\")\n    string = string.upper()\n    return string\n",
        "num_ids": 38
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size=len(newList)\n    print('Length of the list is:',size)\n    temp=newList[0]\n    newList[0]=newList[size-1]\n    newList[size-1]=temp\n    print(newList)\n    return newList\n    \n    ",
        "num_ids": 72
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    return newList\n",
        "num_ids": 39
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\ndef remove_List(newList):\n    '''\n    Write a python function to remove the first element of a given list\n    '''\n    newList.pop(0)\n    return newList\n",
        "num_ids": 16
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    listLen = len(newList)\n    firstElement = newList[0]\n    lastElement = newList[listLen-1]\n    newList[0] = lastElement\n    newList[listLen-1] = firstElement\n    return newList\n",
        "num_ids": 63
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)<=1:\n        print(\"List must have atleast 2 elements.\")\n        return \n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"Interchanged list is \", newList)\n",
        "num_ids": 72
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if not newList:\n        return -1\n    length = len(newList)\n    list1 = newList[0:length-1]\n    list2 = newList[length-1:length]\n    return list2+list1\n",
        "num_ids": 59
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)<=1:\n        print(\"Only one element in list cannot swap it with another\")\n        return newList\n    else:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0]=last_elem\n        newList[-1]=first_elem\n        return newList\ndef append_List(newList):\n    '''\n    Write a python function to add a given list to the end of another given list.\n    '''\n    if len(newList)<=1:\n        print(\"List has less than 2 elements\")\n        return newList\n    else:\n        newList.append(newList[-1])\n        newList.append(newList[-2])\n        return newList\ndef del_List(newList):\n    '''\n    Write a python function to remove the first occurrence of an element from a given list.\n    '''\n    if len(newList)<=1:\n        print(\"List has less than 2 elements\")\n        return newList\n    else:\n        newList.pop(0)\n        return newList\ndef insert_List(newList):\n    '''\n    Write a python function to insert an element to a given list at a given index.\n    '''\n    if len(newList)<=1:\n        print(\"List has less than 2 elements\")\n        return newList\n    else:\n        newList.insert(0,newList[1])\n        newList.append(newList[-1])\n        return newList\ndef count_List(newList):\n    '''\n    Write a python function to count the number of elements in a given list.\n    '''\n    print(len(newList))\n    return len(newList)\ndef sum_List(newList):\n    '''\n    Write a python function to sum all the elements in a given list.\n    '''\n    print(sum(newList))\n    return sum(newList)\ndef min_List(newList):\n    '''\n    Write a python function to return the minimum element in a given list.\n    '''\n    if len(newList)<=1:\n        print(\"List has less than 2 elements\")\n        return newList\n    else:\n        print(min(newList))\n        return min(newList)\ndef max_List(newList):\n    '''\n    Write a python function to return the maximum element in a given list.\n    '''\n    if len(newList)<=1:\n        print(\"List has less than 2 elements\")\n        return newList\n    else:\n        print(max(newList))\n        return max(newList)\ndef pop_List(newList):\n    '''\n    Write a python function to remove the last element from a given list.\n    '''\n    if len(newList)<=1:\n        print(\"List has less than 2 elements\")\n        return newList\n    else:\n        newList.pop()\n        return newList\ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    if len(newList)<=1:\n        print(\"List has less than 2 elements\")\n        return newList\n    else:\n        newList = newList[::-1]\n        return newList\ndef sort_List(newList):\n    '''\n    Write a python function to sort a given list.\n    '''\n    if len(newList)<=1:\n        print(\"List has less than 2 elements\")\n        return newList\n    else:\n        newList.sort()\n        return newList\ndef clear_List(newList):\n    '''\n    Write a python function to remove all the elements from a given list.\n    '''\n    newList.clear()\n    return newList\ndef copy_List(newList):\n    '''\n    Write a python function to copy a given list.\n    '''\n    newList.copy()\n    return newList\ndef print_List(newList):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(newList)\n    return newList\ndef list_operations():\n    '''\n    Write a python function to perform all the list operations.\n    '''\n    print(\"1.Swap\")\n    print(\"2.Append\")\n    print(\"3.Delete\")\n    print(\"4.Insert\")\n    print(\"5.Count\")\n    print(\"6.Sum\")\n    print(\"7.Minimum\")\n    print(\"8.Maximum\")\n    print(\"9.Pop\")\n    print(\"10.Reverse\")\n    print(\"11.Sort\")\n    print(\"12.Clear\")\n    print(\"13.Copy\")\n    print(\"14.Print\")\n    print(\"15.Exit\")\n    choice = input(\"Enter a choice (1-15) : \")\n    newList = [1,2,3,4,5,6,7,8,9,10]\n    while choice!=\"15\":\n        if choice==\"1\":\n            swap_List(newList)\n            print(\"New list is \",newList)\n        elif choice==\"2\":\n            append_List(newList)\n            print(\"New list is \",newList)\n        elif choice==\"3\":\n            del_List(newList)\n            print(\"New list is \",newList)\n        elif choice==\"4\":\n            insert_List(newList)\n            print(\"New list is \",newList)\n        elif choice==\"5\":\n            count_List(newList)\n        elif choice==\"6\":\n            sum_List(newList)\n        elif choice==\"7\":\n            min_List(newList)\n        elif choice==\"8\":\n            max_List(newList)\n        elif choice==\"9\":\n            pop_List(newList)\n            print(\"New list is \",newList)\n        elif choice==\"10\":\n            reverse_List(newList)\n            print(\"New list is \",newList)\n        elif choice==\"11\":\n            sort_List(newList)\n            print(\"New list is \",newList)\n        elif choice==\"12\":\n            clear_List(newList)\n            print(\"New list is \",newList)\n        elif choice==\"13\":\n            copy_List(newList)\n            print(\"New list is \",newList)\n        elif choice==\"14\":\n            print_List(newList)\n        else:\n            print(\"Invalid choice.Please select correct choice.\\n\")\n        list_operations()\n        choice = input(\"Enter a choice (1-15) : \")\nlist_operations()",
        "num_ids": 576
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 31
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (3.14*(r**2))/2\n    return(area)\n",
        "num_ids": 28
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (math.pi*r**2)*(3.0-(math.pi/2.0))/(3.0) \n    return area\n    \ndef find_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (math.pi*r**2)*(3.0-(math.pi/2.0))/(3.0) \n    return area\n",
        "num_ids": 38
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.14*(r**2))/2\n",
        "num_ids": 17
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi * r * r * r / (4 * r)\n    print('Area of largest triangle that can be inscribed in a semicircle with a given radius: %.2f' % (area))\n    return area\n",
        "num_ids": 60
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r = float(r)\n    \n    area = (2*math.pi*(r**2))/2\n    return area\ndef circle_area(r) :  \n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given radius.\n    '''\n    r = float(r)\n    \n    area = math.pi*(r**2)\n    return area\ndef ellipse_area(a,b) :  \n    '''\n    Write a python function to find the area of the largest ellipse that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    b = float(b)\n    \n    area = math.pi*(a*b)\n    return area\ndef rectangle_area(a,b) :  \n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    b = float(b)\n    \n    area = a*b\n    return area\ndef trapezoid_area(a,b,h) :  \n    '''\n    Write a python function to find the area of the largest trapezoid that can be inscribed in a rectangle with two given lengths and a given height.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    \n    area = ((a+b)/2)*h\n    return area\ndef kite_area(a,b,h) :  \n    '''\n    Write a python function to find the area of the largest kite that can be inscribed in a rectangle with two given lengths and a given height.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    \n    area = (a*b)*(math.sin(math.radians(30)))\n    return area\ndef cube_area(a) :  \n    '''\n    Write a python function to find the area of the largest cube that can be inscribed in a sphere with a given radius.\n    '''\n    a = float(a)\n    \n    area = 6*(a**2)\n    return area\ndef right_circ_area(r) :  \n    '''\n    Write a python function to find the area of the largest right circular cone that can be inscribed in a sphere with a given radius.\n    '''\n    r = float(r)\n    \n    area = ((math.pi*(r**2))/3)\n    return area\ndef pyramid_area(a,h) :  \n    '''\n    Write a python function to find the area of the largest pyramid that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    h = float(h)\n    \n    area = (a*h)/2\n    return area\ndef parallelogram_area(a,b) :  \n    '''\n    Write a python function to find the area of the largest parallelogram that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    b = float(b)\n    \n    area = a*b\n    return area\ndef hemisphere_area(r) :  \n    '''\n    Write a python function to find the area of the largest hemisphere that can be inscribed in a sphere with a given radius.\n    '''\n    r = float(r)\n    \n    area = (math.pi*(r**2))/4\n    return area\ndef cone_area(a,r) :  \n    '''\n    Write a python function to find the area of the largest right circular cone that can be inscribed in a sphere with a given radius.\n    '''\n    a = float(a)\n    r = float(r)\n    \n    area = (math.pi*(r**2))/3\n    return area\ndef cylinder_area(a,r) :  \n    '''\n    Write a python function to find the area of the largest right circular cylinder that can be inscribed in a sphere with a given radius.\n    '''\n    a = float(a)\n    r = float(r)\n    \n    area = (2*math.pi*(r**2))\n    return area\ndef pyramid_area(a,h) :  \n    '''\n    Write a python function to find the area of the largest pyramid that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    h = float(h)\n    \n    area = (a*h)/2\n    return area\ndef cone_volume(r,h) :  \n    '''\n    Write a python function to find the volume of the largest right circular cone that can be inscribed in a sphere with a given radius and height.\n    '''\n    r = float(r)\n    h = float(h)\n    \n    volume = ((math.pi*(r**3))/3)\n    return volume\ndef cylinder_volume(r,h) :  \n    '''\n    Write a python function to find the volume of the largest right circular cylinder that can be inscribed in a sphere with a given radius and height.\n    '''\n    r = float(r)\n    h = float(h)\n    \n    volume = ((2*math.pi*(r**2))*h)\n    return volume\ndef pyramid_volume(a,h) :  \n    '''\n    Write a python function to find the volume of the largest pyramid that can be inscribed in a rectangle with two given lengths and a given height.\n    '''\n    a = float(a)\n    h = float(h)\n    \n    volume = ((a*h)/3)\n    return volume\ndef cone_volume(r,h) :  \n    '''\n    Write a python function to find the volume of the largest right circular cone that can be inscribed in a sphere with a given radius and height.\n    '''\n    r = float(r)\n    h = float(h)\n    \n    volume = ((math.pi*(r**3))/3)\n    return volume\ndef cylinder_volume(r,h) :  \n    '''\n    Write a python function to find the volume of the largest right circular cylinder that can be inscribed in a sphere with a given radius and height.\n    '''\n    r = float(r)\n    h = float(h)\n    \n    volume = ((2*math.pi*(r**2))*h)\n    return volume\ndef pyramid_volume(a,h) :  \n    '''\n    Write a python function to find the volume of the largest pyramid that can be inscribed in a rectangle with two given lengths and a given height.\n    '''\n    a = float(a)\n    h = float(h)\n    \n    volume = ((a*h)/3)\n    return volume\n",
        "num_ids": 35
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    print('area')\n    #calculate the area of a triangle in a semicircle\n    \n    #calculate the area of the circle\n    circle_area = math.pi * r**2\n",
        "num_ids": 50
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    x = 3.14 * (r**2)\n    y = (r * 2) * (math.sqrt(2))\n    return x * y\n",
        "num_ids": 39
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    x = 2*r*math.cos(math.pi/3)\n    return x\nprint(triangle_area(100))\n",
        "num_ids": 34
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.sqrt(r**2 + (r**2*3)**0.5)\n    print(area)\n    return area\n",
        "num_ids": 41
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r*r*3.14159265359) / 2\n",
        "num_ids": 19
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    i = start\n    while i <= end:\n        if array[i]!= i:\n            return i\n        i += 1\n    return i\n",
        "num_ids": 53
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end < start:\n        return None\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return None\n",
        "num_ids": 62
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1\n",
        "num_ids": 52
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end == None):\n        end = len(array)\n    if(start > end):\n        print(\"Not a valid array\")\n        return None\n    elif(start > len(array)-1):\n        print(\"Not a valid array\")\n        return None\n    if(start > end):\n        print(\"Not a valid array\")\n        return None\n    for i in range(start,end):\n        if(array[i]!= i+1):\n            print(\"Smallest missing number is \",i+1)\n            return None\n    print(\"There is no missing number in the array\")\n    return None\n",
        "num_ids": 146
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #base case\n    if end==None:\n        end = len(array)\n",
        "num_ids": 22
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #we have a list of integers from 0 to n.\n    #we want to return the smallest missing number from the list\n    if end == None:\n        end = len(array)-1\n    #we know the smallest missing number is between the smallest and largest values in the list\n    #so we will start by trying to find it in the middle of the list\n    middle = (start+end)//2\n    #a missing number is always greater than the largest value in the list\n    #and less than the smallest value\n    if middle < end and array[middle+1] == middle+1:\n        return find_First_Missing(array,middle,end)\n    #the middle value is missing\n    elif array[middle]!= middle:\n        return middle\n    #the middle value is the missing number\n    elif array[middle] == middle:\n        #we know there is a missing number after the middle value\n        #so we will try to find the smallest missing number in the subarray after the middle\n        return find_First_Missing(array,middle+1,end)\n",
        "num_ids": 248
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end=len(array)\n    if end > start:\n        mid = (start + end)//2\n        if array[mid] - mid == 1:\n            return find_First_Missing(array,mid,end)\n        else:\n            return find_First_Missing(array,start,mid)\n    else:\n        return start + 1\n",
        "num_ids": 90
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start < end:\n        mid = (start+end)//2\n        if array[mid] - mid - 1 < mid + 1:\n            return mid+1\n        elif array[mid] >= mid + 1:\n            return find_First_Missing(array,start=mid+1,end=end)\n        else:\n            return find_First_Missing(array,start=start,end=mid)\n    return -1\n",
        "num_ids": 119
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end:\n        return start + 1\n",
        "num_ids": 15
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start < end:\n        mid = (start + end) // 2\n        if array[mid] == mid+1:\n            return find_First_Missing(array, mid+1, end)\n        else:\n            return find_First_Missing(array, start, mid)\n    else:\n        return start\n",
        "num_ids": 91
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n",
        "num_ids": 17
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    spaces_count = 0\n    for i in string:\n        if i =='':\n            spaces_count += 1\n    new_string = []\n    for i in range(len(string)):\n        if string[i] =='':\n            new_string.append('%20')\n        else:\n            new_string.append(string[i])\n    return new_string, spaces_count\n",
        "num_ids": 98
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in range(len(string)):\n        if string[i] =='':\n            string = string[:i] + '%20' + string[i+1:]\n    return string\n",
        "num_ids": 49
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    #return string.replace(' ', '%20')\n    return string.replace(' ', '%20')\n",
        "num_ids": 27
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n",
        "num_ids": 17
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return(string.replace(\" \", \"%20\"))\n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_num_list.append(num) \n    return even_num_list \n",
        "num_ids": 52
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    return even_list\n",
        "num_ids": 51
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #returns a list containing only even numbers\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list\n",
        "num_ids": 52
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    even_numbers = []\n    while i < len(list):\n        if list[i] % 2 == 0:\n            even_numbers.append(list[i])\n        i = i + 1\n    return even_numbers\n    \nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
        "num_ids": 90
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for num in list:\n        if (num % 2 == 0):\n            even_num.append(num)\n    print(\"Even numbers from list: \", even_num)\n    return even_num\n    \nSplit([1,2,3,4,5,6,7,8,9,10])\n",
        "num_ids": 81
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for num in list:\n        if num % 2 == 0:\n            even_num.append(num)\n    return even_num\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    Even_list = []\n    Odd_list = []\n    while i < len(list):\n        if list[i] % 2 == 0:\n            Even_list.append(list[i])\n        else:\n            Odd_list.append(list[i])\n        i += 1\n    Even_list.sort()\n    Odd_list.sort()\n    return Even_list,Odd_list\n",
        "num_ids": 105
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # print('sub: ', sub)\n    \n    coord = [x for x in sub]\n    # print(coord)\n    coord.append(ele)\n    \n    if len(coord) == 4:\n        # print('yielding coord: ', coord)\n        # print('\\n')\n        yield tuple(coord)\n        \n    else:\n        # print('expanding coord: ', coord)\n        # print('\\n')\n        for ele in adjac(ele, coord):\n            yield ele\n",
        "num_ids": 123
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for adj in ele:\n        if adj not in sub:\n            sub.append(adj)\n            adjac(map[adj[0]][adj[1]], sub)\n    return sub\n",
        "num_ids": 48
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        for i in range(len(sub)):\n            if abs(ele[0] - sub[i][0]) == 1 and abs(ele[1] - sub[i][1]) == 0:\n                sub.append(ele)\n                adjac(ele, sub)\n            elif abs(ele[0] - sub[i][0]) == 0 and abs(ele[1] - sub[i][1]) == 1:\n                sub.append(ele)\n                adjac(ele, sub)\n    return sub\n",
        "num_ids": 145
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    ret = []\n    if(ele in ret): return []\n    for i in range(len(sub)):\n        ret.append(tuple(map(add, sub[i], ele)))\n        ret.append(tuple(map(add, ele, sub[i])))\n    return ret\n",
        "num_ids": 72
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    coordinates = []\n    coordinates.append((x + 1, y))\n    coordinates.append((x + 1, y + 1))\n    coordinates.append((x, y + 1))\n    coordinates.append((x - 1, y + 1))\n    coordinates.append((x - 1, y))\n    coordinates.append((x - 1, y - 1))\n    coordinates.append((x, y - 1))\n    coordinates.append((x + 1, y - 1))\n",
        "num_ids": 136
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    print(sub)\n    if sub.count(ele) == 2:\n        for i in range(len(sub)):\n            if sub[i]!= ele:\n                return sub[:i]\n    elif sub.count(ele) > 2:\n        return sub[:sub.index(ele)+1]\n    else:\n        return sub\n",
        "num_ids": 94
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    lst = []\n    for a in range(-1, 2):\n        for b in range(-1, 2):\n            for c in range(-1, 2):\n                for d in range(-1, 2):\n                    if a + b + c + d!= 0:\n                        sub_list = [a, b, c, d]\n                        sub_list.remove(0)\n                        sub_tuple = tuple(sub_list)\n                        lst.append(sub_tuple)\n    if sub!= []:\n        lst.remove(sub)\n    return lst\n",
        "num_ids": 138
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        return [ (sub[0]-1, sub[1]-1), (sub[0]-1, sub[1]), (sub[0]-1, sub[1]+1), (sub[0], sub[1]-1), (sub[0], sub[1]+1), (sub[0]+1, sub[1]-1), (sub[0]+1, sub[1]), (sub[0]+1, sub[1]+1) ]\n    else:\n        if (sub[0]-1, sub[1]) in ele.keys():\n            if ele[(sub[0]-1, sub[1])] == 1:\n                return adjac(ele, [ sub[0]-1, sub[1] ])\n        if (sub[0], sub[1]-1) in ele.keys():\n            if ele[(sub[0], sub[1]-1)] == 1:\n                return adjac(ele, [ sub[0], sub[1]-1 ])\n        if (sub[0]+1, sub[1]) in ele.keys():\n            if ele[(sub[0]+1, sub[1])] == 1:\n                return adjac(ele, [ sub[0]+1, sub[1] ])\n        if (sub[0], sub[1]+1) in ele.keys():\n            if ele[(sub[0], sub[1]+1)] == 1:\n                return adjac(ele, [ sub[0], sub[1]+1 ])\n        if (sub[0]+1, sub[1]+1) in ele.keys():\n            if ele[(sub[0]+1, sub[1]+1)] == 1:\n                return adjac(ele, [ sub[0]+1, sub[1]+1 ])\n        if (sub[0]-1, sub[1]+1) in ele.keys():\n            if ele[(sub[0]-1, sub[1]+1)] == 1:\n                return adjac(ele, [ sub[0]-1, sub[1]+1 ])\n        if (sub[0]-1, sub[1]-1) in ele.keys():\n            if ele[(sub[0]-1, sub[1]-1)] == 1:\n                return adjac(ele, [ sub[0]-1, sub[1]-1 ])\n        if (sub[0], sub[1]-1) in ele.keys():\n            if ele[(sub[0], sub[1]-1)] == 1:\n                return adjac(ele, [ sub[0], sub[1]-1 ])\n        return adjac(ele, sub)\n",
        "num_ids": 602
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []: \n        sub = ele\n    else: \n        sub.append(ele)\n    \n    return sub \n",
        "num_ids": 35
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        sub = list(ele)\n",
        "num_ids": 17
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for i in text:\n        if i =='':\n            result += '_'\n        else:\n            result += i\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n    \ndef translate(phrase):\n    '''\n    Write a function translate() that will translate a text into \"r\u00f6varspr\u00e5ket\" (Swedish for \"robber's language\"). \n    That is, double every consonant and place an occurrence of \"o\" in between. \n    Take Input from User\n    '''\n    swedish = {\n  'a': '\u00e5', 'o': '\u00f6', 'u': 'u', 'i': 'ee', 'e': '\u00e9','s':'s', 'n': 'en', 't': 't'\n}\n    \n    text = replace_spaces(phrase)\n    words = text.split(' ')\n    \n    translated_text = ''\n    \n    for word in words:\n        for letter in word:\n            if letter in swedish.keys():\n                translated_text += swedish[letter] +''\n            else:\n                translated_text += letter +''\n        translated_text +=''\n    \n    return translated_text[:-1]\n    \n    \n    \ndef unique_in_order(iterable):\n    '''\n    Write a function unique_in_order() that takes a sequence and returns a list of items \n    without any elements with the same value next to each other and preserving the original order of elements.\n    '''\n    result = []\n    prev = None\n    \n    for val in iterable:\n        if val!= prev:\n            result.append(val)\n            prev = val\n            \n    return result\n",
        "num_ids": 49
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == \"\":\n        return text\n    else:\n        if text.isspace():\n            return \"_\"\n        else:\n            return text.replace(\"_\", \" \")\n",
        "num_ids": 46
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return text.replace(' ', '_')\n",
        "num_ids": 15
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text\n",
        "num_ids": 78
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n    \n    \ndef find_next_palindrome(num):\n    '''\n    Write a function to return the next palindrome after a given number.\n    '''\n    return num+1 if str(num)[::-1]==str(num) else num+2 if str(num)[::-1]==str(num)[1:] else num+1 if str(num)[::-1]==str(num)[:-1] else num+2\n    \n    \ndef find_factors(num):\n    '''\n    Write a function to return the list of factors of a given number.\n    '''\n    return [i for i in range(1,num+1) if num%i==0]\n    \n    \ndef find_next_prime(num):\n    '''\n    Write a function to return the next prime number after the given number.\n    '''\n    i=num+1\n    while True:\n        for j in range(2,i):\n            if i%j!=0:\n                pass\n            else:\n                i+=1\n                break\n        else:\n            return i\n            \n            \ndef find_strong_numbers(num_list):\n    '''\n    Write a function to find out the list of strong numbers from a given list.\n    '''\n    return [i for i in num_list if sum(find_factors(i))*10>=i]\n    \n    \ndef find_largest_prime_factor(num):\n    '''\n    Write a function to return the largest prime factor of a given number.\n    '''\n    i=2\n    while num%i!=0:\n        i+=1\n    return i\n    \n    \ndef find_fibonacci_sequence_up_to(num):\n    '''\n    Write a function to return the fibonacci sequence up to the number passed into the function.\n    '''\n    a=0\n    b=1\n    while a<num:\n        a,b=b,a+b\n    return a\n    \n    \ndef find_armstrong_numbers(num_list):\n    '''\n    Write a function to find out the list of Armstrong numbers from a given list.\n    '''\n    return [i for i in num_list if sum(find_factors(i))==i]\n    \n    \ndef find_perfect_squares(num):\n    '''\n    Write a function to return the list of perfect squares up to a given number.\n    '''\n    return [i**2 for i in range(1,num+1) if i**2<=num]\n    \n    \ndef check_palindrome(text):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    return text==text[::-1]\n    \n    \ndef check_pangram(text):\n    '''\n    Write a function to check whether the given string is a pangram or not.\n    '''\n    return set(text.lower())==set(string.ascii_lowercase)\n    \n    \ndef number_of_factors(num):\n    '''\n    Write a function to return the number of factors of a given number.\n    '''\n    return len(find_factors(num))\n    \n    \ndef sum_of_digits(num):\n    '''\n    Write a function to return the sum of digits of a given number.\n    '''\n    return sum(list(map(int,str(num))))\n    \n    \ndef is_prime(num):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    return num>1 and all(num%i for i in range(2,int(num**0.5)+1))\n    \n    \ndef find_gcd(num_1,num_2):\n    '''\n    Write a function to find the greatest common divisor (gcd) of two given numbers.\n    '''\n    return gcd(num_1,num_2)\n    \n    \ndef is_pythagoras_triple(num_1,num_2,num_3):\n    '''\n    Write a function to check whether three given numbers can form a Pythagoras triple.\n    '''\n    return num_1**2+num_2**2==num_3**2 or num_1**2+num_3**2==num_2**2 or num_2**2+num_3**2==num_1**2\n    \n    \ndef find_hcf(num_1,num_2):\n    '''\n    Write a function to find the highest common factor (hcf) of two given numbers.\n    '''\n    return hcf(num_1,num_2)\n    \n    \ndef find_lcm(num_1,num_2):\n    '''\n    Write a function to find the lowest common multiple (lcm) of two given numbers.\n    '''\n    return lcm(num_1,num_2)\n    \n    \ndef convert_base_10(num,base):\n    '''\n    Write a function to convert a given number to another base (2-16) using a given base (2-10).\n    '''\n    if base<2 or base>16:\n        return \"Enter a valid base (2-16)\"\n    result=\"\"\n    while num>0:\n        remainder=num%base\n        if remainder>9:\n            remainder=chr(remainder+87)\n        result+=str(remainder)\n        num//=base\n    return result[::-1]\n    \n    \ndef find_substrings(text):\n    '''\n    Write a function to find all the substrings of a given string.\n    '''\n    return [text[i:j+1] for i in range(len(text)) for j in range(i,len(text))]\n    \n    \ndef find_letter_case_string_permutations(text):\n    '''\n    Write a function to find all the permutations of a given string.\n    '''\n    return [text.lower()+text[::-1].lower(),text.upper()+text[::-1].upper()]\n    \n    \ndef remove_duplicates(text):\n    '''\n    Write a function to remove all the duplicate characters in a given string.\n    '''\n    return \"\".join(dict.fromkeys(text))\n    \n    \ndef find_next_square(num):\n    '''\n    Write a function to return the next square number after the given number.\n    '''\n    return (num+1)**2 if num**0.5==int(num**0.5) else -1\n    \n    \ndef is_pangram_with_set(text):\n    '''\n    Write a function to check whether a given string is a pangram or not using set().\n    '''\n    return set(text)==set(string.ascii_lowercase)\n    \n    \ndef find_missing_letter(text):\n    '''\n    Write a function to return the missing letter in a given string.\n    '''\n    return \"\".join(sorted(set(\"abcdefghijklmnopqrstuvwxyz\")))\n    \n    \ndef find_missing_letter_v2(text):\n    '''\n    Write a function to return the missing letter in a given string.\n    '''\n    missing=[]\n    for i in range(len(string.ascii_lowercase)):\n        if string.ascii_lowercase[i] not in text.lower():\n            missing.append(string.ascii_lowercase[i])\n    return \"\".join(missing)\n    \n    \ndef find_missing_letter_v3(text):\n    '''\n    Write a function to return the missing letter in a given string.\n    '''\n    missing=[i for i in string.ascii_lowercase if i not in text.lower()]\n    return \"\".join(missing)\n    \n    \ndef find_missing_letter_v4(text):\n    '''\n    Write a function to return the missing letter in a given string.\n    '''\n    return \"\".join(sorted(set(string.ascii_lowercase)-set(text.lower())))\n    \n    \ndef string_transformer(text):\n    ''",
        "num_ids": 45
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text:\n        return text.replace('_','').replace(' ', '_').replace('  ', '_').replace(' ', '_').replace('  ', '_')\n    else:\n        return text\n",
        "num_ids": 52
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #return num_list.sort(key=lambda x: (x==0, x))\n    #return [x for x in num_list if x!=0] + [x for x in num_list if x==0]\n    #return sorted(num_list, key=lambda x: (x==0, x))\n    num_list[:] = [x for x in num_list if x!=0] + [0 for i in range(num_list.count(0))]\n",
        "num_ids": 117
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list\n",
        "num_ids": 65
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    num_list = new_list\n    print(\"Number list after moving all zeroes:\")\n    print(num_list)\n    print()\n",
        "num_ids": 71
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = num_list[:]\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            new_list.append(0)\n            new_list.remove(0)\n    return new_list\n",
        "num_ids": 65
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    length = len(num_list)\n    cnt = 0\n    for num in num_list:\n        if num == 0:\n            cnt += 1\n    if cnt > 0:\n        for i in range(length - cnt):\n            num_list[i] = num_list[i + cnt]\n        for i in range(length - cnt, length):\n            num_list[i] = 0\n",
        "num_ids": 102
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index in range(num_list.count(0)):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 44
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for x in num_list:\n        if x == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 44
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # define the function to move zeroes\n    def move_zero_helper(num_list):\n        if not num_list:\n            return\n        i = 0\n        j = 0\n        while i < len(num_list):\n            if num_list[i]!= 0:\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                j += 1\n            i += 1\n        return num_list\n",
        "num_ids": 115
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    j=0\n    for i in range(len(num_list)):\n        if num_list[i]!=0:\n            num_list[j]=num_list[i]\n            j+=1\n    while(j<len(num_list)):\n        num_list[j]=0\n        j+=1\n    return num_list\n",
        "num_ids": 86
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = list(num_list)\n    while 0 in num_list:\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 49
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum^arr[i]^arr[j]\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    def xor_nums(a,b):\n        return a^b\n",
        "num_ids": 26
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    i = 0\n    j = n-1\n    arr_sum = 0\n    while(i < n and j > 0):\n        arr_sum = arr_sum^arr[i]^arr[j]\n        i+=1\n        j-=1\n    return arr_sum\n",
        "num_ids": 69
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0 \n    for i in range(0,n): \n        for j in range(i+1,n): \n            res = res ^ (arr[i] ^ arr[j]) \n",
        "num_ids": 51
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum+=arr[i]^arr[j]\n    return xor_sum\n",
        "num_ids": 55
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n) : \n        xor = xor ^ arr[i]\n    print(xor)\n    ",
        "num_ids": 39
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n    \ndef sum_xor_pairs(arr,n) :\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    The given list can be changed and can contain more than two numbers.\n    '''\n    sum = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            total += arr[i] ^ arr[j]\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            sum_xor = sum_xor + (arr[i] ^ arr[j]) \n",
        "num_ids": 61
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            s = arr[i] ^ arr[j]\n            print(s)\n    print(\"\\n\")\n",
        "num_ids": 57
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)==0:\n        return []\n    if len(iterable)==1:\n        return [iterable[0]]\n    l=[]\n    heapq.heappush(l,iterable[0])\n    heapq.heappush(l,iterable[1])\n    for i in range(2,len(iterable)):\n        heapq.heappush(l,iterable[i])\n    sorted_list=[]\n    while l:\n        sorted_list.append(heapq.heappop(l))\n    return sorted_list\n",
        "num_ids": 146
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Make a list of elements to sort\n    # If the input is a tuple, make a list of the tuple\n    input_list = []\n    if type(iterable[0]) == tuple:\n        for i in range(len(iterable)):\n            input_list.append(iterable[i])\n    else:\n        input_list = list(iterable)\n    input_list.sort()\n    # Make the heap\n    heap = []\n    for i in input_list:\n        hq.heappush(heap, i)\n    # Extract elements from the heap in sorted order\n    sorted_list = []\n    for i in range(len(input_list)):\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n",
        "num_ids": 190
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while len(iterable)>0:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n",
        "num_ids": 58
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    sorted_list = []\n    for value in iterable:\n        hq.heappush(h, value)\n    for i in range(len(iterable)):\n        sorted_list.append(hq.heappop(h))\n    return sorted_list\n",
        "num_ids": 73
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n",
        "num_ids": 12
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    data = list(iterable)\n    hq.heapify(data)\n    return [hq.heappop(data) for _ in range(len(data))]\n",
        "num_ids": 45
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a heap\n    heap = []\n    for item in iterable:\n        hq.heappush(heap,item)\n    # the heap already has the smallest items at the top.\n    # to return it, we pop off items until the heap is empty\n    for _ in range(len(heap)):\n        print(hq.heappop(heap))\n",
        "num_ids": 93
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\ndef percentage_profit(actual_cost,sale_amount):\n    '''\n    Write a function to calculate the percentage profit of the given amount\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\ndef percentage_loss(actual_cost,sale_amount):\n    '''\n    Write a function to calculate the percentage loss of the given amount\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\ndef print_report(company_name,sale_amount,actual_cost,is_profit,is_loss,percentage_profit,percentage_loss):\n    '''\n    Write a function to print the report\n    '''\n    print(company_name + \" sold \" + str(sale_amount) + \" at $\" + str(actual_cost) + \" and the following report:\")\n    if is_profit:\n        print(\"The sale has resulted in a profit of $\" + str(sale_amount - actual_cost))\n    elif is_loss:\n        print(\"The sale has resulted in a loss of $\" + str(actual_cost - sale_amount))\n    else:\n        print(\"The sale has not resulted in any profit and no loss.\")\n    if percentage_profit:\n        print(\"The profit percentage is \" + str(percentage_profit))\n    elif percentage_loss:\n        print(\"The loss percentage is \" + str(percentage_loss))\n    else:\n        print(\"The profit percentage is \" + str(0))\n        print(\"The loss percentage is \" + str(0))\n",
        "num_ids": 206
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        print(sale_amount)\n        print(actual_cost)\n        print('noprofit_noloss : True')\n        print('function has passed')\n        return True\n    else:\n        print(sale_amount)\n        print(actual_cost)\n        print('noprofit_noloss : False')\n        print('function has failed')\n        return False\n",
        "num_ids": 103
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount \n",
        "num_ids": 13
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        print(\"The amount has no profit and no loss\")\n    else:\n        print(\"The amount has no profit and a loss\")\n    return\nnoprofit_noloss(100,110)\n",
        "num_ids": 60
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return sale_amount >= actual_cost\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    \n    #for profit amount\n    profit_amount = sale_amount - actual_cost\n    #print(f\"Profit amount: {profit_amount}\")\n    \n    #if profit_amount > 0:\n    #    return \"profit\"\n    #elif profit_amount == 0:\n    #    return \"no profit no loss\"\n    #else:\n    #    return \"loss\"\n    \n    \n    if profit_amount < 0:\n        return \"loss\"\n    else:\n        return \"no profit no loss\"\n    \n    \n    \n",
        "num_ids": 135
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if (profit == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = int(actual_cost)\n    sale_amount = int(sale_amount)\n    if actual_cost >= sale_amount:\n        print(\"True\")\n    elif actual_cost < sale_amount:\n        print(\"False\")\n    else:\n        print(\"No loss and no profit\")\n",
        "num_ids": 75
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # v=float(input('Enter wind speed km/h:'))\n    # t=float(input('Enter temperature in Celsius:'))\n    v=float(v)\n    t=float(t)\n    # print(v,t)\n    if v<=0 or t<=-45:\n        return 'Velocity and temperature should be above 0 and above -45'\n    else:\n        vknots=v/3.6\n        v=vknots\n        c=math.pow(v,0.16)\n        a=35.74+0.6215*t+0.3965*t*t-0.09563*t*t*t+0.01279*t*t*t*t\n        # print(a)\n        chill=c*a\n        # print(chill)\n        chill_int=round(chill)\n        return chill_int\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=10)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=20)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=30)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=40)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=50)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=60)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=70)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=80)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=90)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=100)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=110)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=120)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=130)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=140)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=150)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=160)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=170)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=180)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=190)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=200)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=210)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=220)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=230)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=240)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=250)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=260)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=270)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=280)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=290)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=300)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=310)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=320)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=330)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=340)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=350)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=360)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=370)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=380)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=390)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=400)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=410)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=420)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=430)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=440)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=450)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=460)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=470)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=480)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=490)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=500)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=510)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=520)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=530)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=540)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=550)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=560)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=570)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=580)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwind_chill(v=5,t=590)\nprint('\\n')\nprint('Wind chill formula: \\n')\nwin",
        "num_ids": 1997
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=v*5/18\n    windchill=(13.12 + (0.6215*t) - (11.37*math.pow(t,0.16)) + (0.3965*t*math.pow(t,0.16)))\n    return int(windchill)\n",
        "num_ids": 75
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #temperature in celsius\n    t_c = t\n    #temperature in fahrenheit\n    t_f = t*(9/5)+32\n    #wind speed in km/h\n    v_km = v\n    #wind speed in mph\n    v_mph = v*0.621371\n    #wind speed in m/s\n    v_m = v*0.621\n    #wind chill index\n    wci = 13.12 + (0.6215*t_f) - (11.37*math.pow(v_mph,0.16)) + (0.3965*t_c) + (0.16*t_f*math.pow(v_m,0.16))\n    return round(wci)\n",
        "num_ids": 183
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = round(v)\n    t = round(t,1)\n    if v >=3 and v < 120:\n        wci = 13.12 + (0.6215*t) - (11.37*math.pow(t,0.16)) + (0.3965*t*math.pow(t,0.16))\n        wci = round(wci)\n        return(wci)\n    else:\n        return('Wind speed must be greater than 0 km/h and less than 120 km/h.')\n",
        "num_ids": 129
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    result = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n    result = round(result)\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(13.12 + (0.6215 * t) - (11.37 * pow(v,0.16)) + (0.3965 * t * pow(v,0.16)))\n",
        "num_ids": 50
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = 35.74 + (0.6215*v) - (35.75*(t/5)) + (0.4275*t*(v**0.16))\n    return round(wind_chill)\n    \ndef similarity(str1,str2):\n    '''\n    Write a function that returns the number of characters that are the same between two strings.\n    '''\n    return len([i for i in range(len(str1)) if str1[i] == str2[i]])\n",
        "num_ids": 31
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * math.pow(v,0.16)) + (0.3965 * t * math.pow(v,0.16))\n    return int(wci)",
        "num_ids": 63
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    print('This function will calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.')\n    v=float(input('Please enter the wind velocity in km/h: '))\n    t=float(input('Please enter the temperature in celsius: '))\n    \n    #Check if velocity is valid\n    if v<=0:\n        print('Invalid input, try again!')\n        v=float(input('Please enter the wind velocity in km/h: '))\n    #Check if temperature is valid\n    if t<=-50 or t>=50:\n        print('Invalid input, try again!')\n        t=float(input('Please enter the temperature in celsius: '))\n    #Check if wind speed is greater than 30mph, otherwise it is too slow for the formula to be valid\n    if v>=30:\n        print('Wind speed is too slow for formula to be valid, try again!')\n        v=float(input('Please enter the wind velocity in km/h: '))\n        if v<=0:\n            print('Invalid input, try again!')\n            v=float(input('Please enter the wind velocity in km/h: '))\n            \n    #Calculate the wind chill\n    wci=13.12+(0.6215*t)-(11.37*math.pow(v,0.16))+(0.3965*t*math.pow(v,0.16))\n    #Round to the nearest integer\n    wci=round(wci)\n    #Display result\n    print('The wind chill index rounded to the nearest integer is',wci)\n    return None\n",
        "num_ids": 389
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if type(v) is not int or type(t) is not float:\n        raise TypeError(\"Invalid input\")\n    elif t<-58 or t>41 or v<0:\n        raise ValueError(\"Invalid input\")\n    elif t<13 and v>=1.5:\n        raise ValueError(\"Invalid input\")\n    elif t<=0:\n        raise ValueError(\"Invalid input\")\n    else:\n        wind_chill=13.12+0.6215*t+0.3965*t*t-0.1667*t*t*t+0.0573*t*t*t*t-0.0035*t*t*t*t*t+0.0078*t*t*t*t*t*t\n        wind_chill=round(wind_chill)\n    return(wind_chill)\n",
        "num_ids": 207
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_lowercase = [s for s in sample_names if s[0].islower()]\n    return len(sample_names_lowercase)\n",
        "num_ids": 40
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = sample_names.split(',')\n    lowercase = []\n    for i in names:\n        if i[0].islower():\n            lowercase.append(i)\n    names = [j for j in names if j not in lowercase]\n    sum_ = 0\n    for i in names:\n        sum_ += len(i)\n    return sum_\n",
        "num_ids": 90
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(sample_names[i]) for i in range(0, len(sample_names)) if sample_names[i][0].isupper()])\n",
        "num_ids": 41
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def filter_names(names, function):\n        '''\n        Write a function to filter the names in a list according to a condition.\n        '''\n        return list(filter(function, names))\n    return len(''.join(filter_names(sample_names, lambda x: not x[0].islower())))\n",
        "num_ids": 41
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name.startswith(tuple('abcdefghijklmnopqrstuvwxyz')):\n            filtered_names.append(name)\n    return len(filtered_names)\n",
        "num_ids": 68
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sum_names(sample_names):\n        return sum(\n            [\n                len(x)\n                for x in sample_names\n                if x[0].islower()\n            ]\n        )\n",
        "num_ids": 51
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    list_sample_names=list(sample_names)\n    \n    for i in list_sample_names:\n        if i[0].islower():\n            list_sample_names.remove(i)\n    \n    print(list_sample_names)\n    \n    sum_nam=sum(len(i) for i in list_sample_names)\n    \n    return sum_nam\n    \nsample_names=['Abc','xyz','ABC','XYZ']\n",
        "num_ids": 113
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    x = []\n    for name in sample_names:\n        if not name[0].islower():\n            x.append(name)\n    return x\n",
        "num_ids": 39
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    res = 0\n    sample_names.sort()\n    for i in range(len(sample_names)):\n        if sample_names[i].islower() == False:\n            res += len(sample_names[i])\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names.sort()\n    total_len = 0\n    for i in range(len(sample_names)):\n        if sample_names[i][0].isupper():\n            total_len += len(sample_names[i])\n        else:\n            sample_names[i] = None\n    sample_names = [s for s in sample_names if s is not None]\n    return total_len, sample_names\n",
        "num_ids": 103
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    return items\ndef convert_to_int(items):\n    '''\n    Write a function to convert a string to an integer without using the eval() function.\n    '''\n    return int(items)\ndef get_items(items):\n    '''\n    Write a function that returns the items in a list as a concatenated string.\n    '''\n    return \",\".join(items)\ndef get_tokens(items):\n    '''\n    Write a function to return the tokens in a string, either a space or a comma.\n    '''\n    tokens = []\n    current_token = \"\"\n    for char in items:\n        if char == \" \":\n            if current_token:\n                tokens.append(current_token)\n            current_token = \"\"\n        else:\n            current_token += char\n    if current_token:\n        tokens.append(current_token)\n    return tokens\ndef get_delimiter(items):\n    '''\n    Write a function that returns the delimiter in a string.\n    '''\n    delimiter = \"\"\n    for char in items:\n        if char == \",\":\n            delimiter = char\n            break\n    return delimiter\ndef is_vowel(items):\n    '''\n    Write a function to determine whether a string is a vowel or not.\n    '''\n    return items in \"aeiouAEIOU\"\ndef is_consonant(items):\n    '''\n    Write a function to determine whether a string is a consonant or not.\n    '''\n    return items not in \"aeiouAEIOU\"\ndef get_count(items):\n    '''\n    Write a function to return the count of each vowel and consonant in a string.\n    '''\n    count_vowel = 0\n    count_consonant = 0\n    vowel_count = 0\n    consonant_count = 0\n    for char in items:\n        if is_vowel(char):\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return vowel_count, consonant_count\ndef get_letters(items):\n    '''\n    Write a function to return the characters in a string.\n    '''\n    letters = []\n    for char in items:\n        letters.append(char)\n    return letters\ndef is_uppercase(items):\n    '''\n    Write a function to determine whether a string is uppercase or not.\n    '''\n    return items.isupper()\ndef is_lowercase(items):\n    '''\n    Write a function to determine whether a string is lowercase or not.\n    '''\n    return items.islower()\ndef is_title(items):\n    '''\n    Write a function to determine whether a string is titlecase or not.\n    '''\n    return items.istitle()\ndef is_number(items):\n    '''\n    Write a function to determine whether a string is a number or not.\n    '''\n    return items.isdigit()\ndef get_sum(items):\n    '''\n    Write a function to return the sum of all the items in a list.\n    '''\n    return sum(items)\ndef get_average(items):\n    '''\n    Write a function to return the average of all the items in a list.\n    '''\n    return sum(items) / len(items)\ndef get_magnitude(items):\n    '''\n    Write a function to return the largest number in a list.\n    '''\n    return max(items)\ndef get_minimum(items):\n    '''\n    Write a function to return the minimum number in a list.\n    '''\n    return min(items)\ndef get_longest_word(items):\n    '''\n    Write a function to return the longest word in a list.\n    '''\n    longest_word = \"\"\n    for word in items:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\ndef get_shortest_word(items):\n    '''\n    Write a function to return the shortest word in a list.\n    '''\n    shortest_word = items[0]\n    for word in items:\n        if len(word) < len(shortest_word):\n            shortest_word = word\n    return shortest_word\ndef get_words(items):\n    '''\n    Write a function to return the words in a string.\n    '''\n    return items.split(\" \")\ndef get_words_without_punctuation(items):\n    '''\n    Write a function to return the words in a string without punctuation.\n    '''\n    punctuation = \"\"\",;:()[]{}'\"`<>?+=-_/\\\\\"\"\"\n    words = items.split(\" \")\n    words_without_punctuation = []\n    for word in words:\n        for char in word:\n            if char not in punctuation:\n                words_without_punctuation.append(word)\n                break\n    return words_without_punctuation\ndef get_sentences(items):\n    '''\n    Write a function to return the sentences in a string.\n    '''\n    return items.split(\".\")\ndef get_sentences_without_punctuation(items):\n    '''\n    Write a function to return the sentences in a string without punctuation.\n    '''\n    punctuation = \"\"\",;:()[]{}'\"`<>?+=-_/\\\\\"\"\"\n    sentences = items.split(\".\")\n    sentences_without_punctuation = []\n    for sentence in sentences:\n        for char in sentence:\n            if char not in punctuation:\n                sentences_without_punctuation.append(sentence)\n                break\n    return sentences_without_punctuation\ndef reverse(items):\n    '''\n    Write a function to return the reverse of a string.\n    '''\n    items = items[::-1]\n    return items\ndef get_unique_characters(items):\n    '''\n    Write a function to return the unique characters in a string.\n    '''\n    unique_characters = []\n    for char in items:\n        if char not in unique_characters:\n            unique_characters.append(char)\n    return unique_characters\ndef get_unique_words(items):\n    '''\n    Write a function to return the unique words in a string.\n    '''\n    unique_words = []\n    words = items.split(\" \")\n    for word in words:\n        if word not in unique_words:\n            unique_words.append(word)\n    return unique_words\ndef get_unique_words_starts_with_capital_letter(items):\n    '''\n    Write a function to return the unique words in a string that start with a capital letter.\n    '''\n    capital_letters = []\n    for word in items.split(\" \"):\n        if word.istitle():\n            capital_letters.append(word)\n    return capital_letters\ndef get_unique_words_with_digit(items):\n    '''\n    Write a function to return the unique words in a string that contain a digit.\n    '''\n    digits = []\n    for word in items.split(\" \"):\n        if any(char.isdigit() for char in word):\n            digits.append(word)\n    return digits\ndef get_chars(items):\n    '''\n    Write a function to return the unique characters in a string.\n    '''\n    chars = []\n    for char in items:\n        if char not in chars:\n            chars.append(char)\n    return chars\ndef get_consonants(items):\n    '''\n    Write a function to return the consonants in a string.\n    '''\n    consonants = []\n    for char in items:\n        if not is_vowel(char):\n            consonants.append(char)\n    return consonants\ndef get_vowels(items):\n    '''\n    Write a function to return the vowels in a string.\n    '''\n    vowels = []\n    for char in items:\n        if is_vowel(char):\n            vowels.append(char)\n    return vowels\ndef get_uppercase_alp",
        "num_ids": 51
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    return items\n",
        "num_ids": 30
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items_without_parens = []\n    for item in items:\n        item = re.sub(r'[\\(\\[].*?[\\)\\]]', '', item)\n        items_without_parens.append(item)\n",
        "num_ids": 58
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 0:\n        return items\n    items = items.replace('(','')\n    items = items.replace(')','')\n    items = items.replace(' ','')\n    return items\n",
        "num_ids": 55
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        item = re.sub(r'\\([^)]*\\)', '', item)\n    return items\n",
        "num_ids": 34
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove parenthesis from string\n    output = items\n    output = re.sub(r'\\([^()]*\\)', '', output)\n    # print(output)\n",
        "num_ids": 44
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == '(':\n            result = result + ','\n        else:\n            result = result + item\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r'\\([^\\(]*\\)'\n    result = re.sub(regex, '', items)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = str(items)\n    items = items.replace('(','')\n    items = items.replace(')','')\n    items = items.replace('{','')\n    items = items.replace('}','')\n    items = items.replace('[','')\n    items = items.replace(']','')\n    return items\n",
        "num_ids": 86
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\(.*\\)', '', items)\n    return items\n",
        "num_ids": 25
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1) / 2) + 1\n",
        "num_ids": 18
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n < 1):\n        return 0\n    else:\n        return (n*(n+1))//2\n",
        "num_ids": 31
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    if n == 4:\n        return 10\n    if n == 5:\n        return 15\n    if n == 6:\n        return 21\n    if n == 7:\n        return 28\n    if n == 8:\n        return 36\n    if n == 9:\n        return 45\n    if n == 10:\n        return 55\n    if n == 11:\n        return 66\n    if n == 12:\n        return 78\n    if n == 13:\n        return 91\n    if n == 14:\n        return 104\n    if n == 15:\n        return 120\n    if n == 16:\n        return 135\n    if n == 17:\n        return 153\n    if n == 18:\n        return 171\n    if n == 19:\n        return 189\n    if n == 20:\n        return 210\n    if n == 21:\n        return 231\n    if n == 22:\n        return 273\n    if n == 23:\n        return 306\n    if n == 24:\n        return 357\n    if n == 25:\n        return 396\n    if n == 26:\n        return 441\n    if n == 27:\n        return 483\n    if n == 28:\n        return 528\n    if n == 29:\n        return 576\n    if n == 30:\n        return 624\n    if n == 31:\n        return 675\n    if n == 32:\n        return 729\n    if n == 33:\n        return 784\n    if n == 34:\n        return 840\n    if n == 35:\n        return 903\n    if n == 36:\n        return 957\n    if n == 37:\n        return 1008\n    if n == 38:\n        return 1060\n    if n == 39:\n        return 1118\n    if n == 40:\n        return 1170\n    if n == 41:\n        return 1223\n    if n == 42:\n        return 1275\n    if n == 43:\n        return 1330\n    if n == 44:\n        return 1384\n    if n == 45:\n        return 1447\n    if n == 46:\n        return 1498\n    if n == 47:\n        return 1551\n    if n == 48:\n        return 1603\n    if n == 49:\n        return 1654\n    if n == 50:\n        return 1710\n    if n == 51:\n        return 1765\n    if n == 52:\n        return 1819\n    if n == 53:\n        return 1872\n    if n == 54:\n        return 1925\n    if n == 55:\n        return 1978\n    if n == 56:\n        return 2035\n    if n == 57:\n        return 2088\n    if n == 58:\n        return 2142\n    if n == 59:\n        return 2196\n    if n == 60:\n        return 2247\n    if n == 61:\n        return 2305\n    if n == 62:\n        return 2353\n    if n == 63:\n        return 2406\n    if n == 64:\n        return 2450\n    if n == 65:\n        return 2505\n    if n == 66:\n        return 2561\n    if n == 67:\n        return 2617\n    if n == 68:\n        return 2670\n    if n == 69:\n        return 2724\n    if n == 70:\n        return 2781\n    if n == 71:\n        return 2836\n    if n == 72:\n        return 2890\n    if n == 73:\n        return 2944\n    if n == 74:\n        return 3000\n    if n == 75:\n        return 3045\n    if n == 76:\n        return 3098\n    if n == 77:\n        return 3151\n    if n == 78:\n        return 3213\n    if n == 79:\n        return 3265\n    if n == 80:\n        return 3319\n    if n == 81:\n        return 3370\n    if n == 82:\n        return 3423\n    if n == 83:\n        return 3476\n    if n == 84:\n        return 3531\n    if n == 85:\n        return 3585\n    if n == 86:\n        return 3641\n    if n == 87:\n        return 3695\n    if n == 88:\n        return 3748\n    if n == 89:\n        return 3811\n    if n == 90:\n        return 3864\n    if n == 91:\n        return 3917\n    if n == 92:\n        return 3970\n    if n == 93:\n        return 4024\n    if n == 94:\n        return 4077\n    if n == 95:\n        return 4131\n    if n == 96:\n        return 4185\n    if n == 97:\n        return 4239\n    if n == 98:\n        return 4292\n    if n == 99:\n        return 4343\n    if n == 100:\n        return 4399\n    if n == 101:\n        return 4452\n    if n == 102:\n        return 4506\n    if n == 103:\n        return 4560\n    if n == 104:\n        return 4614\n    if n == 105:\n        return 4664\n    if n == 106:\n        return 4719\n    if n == 107:\n        return 4772\n    if n == 108:\n        return 4826\n    if n == 109:\n        return 4880\n    if n == 110:\n        return 4934\n    if n == 111:\n        return 4986\n    if n == 112:\n        return 5039\n    if n == 113:\n        return 5092\n    if n == 114:\n        return 5146\n    if n == 115:\n        return 5200\n    if n == 116:\n        return 5253\n    if n == 117:\n        return 5306\n    if n == 118:\n        return 5359\n    if n == 119:\n        return 5412\n    if n == 120:\n        return 5463\n    if n == 121:\n        return 5517\n    if n == 122:\n        return 5570\n    if n == 123:\n        return 5624\n    if n == 124:\n        return 5676\n    if n == 125:\n        return 5730\n    if n == 126:\n        return 5784\n    if n == 127:\n        return 5837\n    if n == 128:\n        return 5890\n    if n == 129:\n        return 5943\n    if n == 130:\n        return 6000\n    if n == 131:\n        return 6045\n    if n == 132:\n        return 6098\n    if n == 133:\n        return 6151\n    if n == 134:\n        return 6214\n    if n == 135:\n        return 6268\n    if n == 136:\n        return 6322\n    if n == 137:\n        return 6374\n    if n == 138:\n        return 6428\n    if n == 139:\n        return 6481\n    if n == 140:\n        return 6535\n    if n == 141:\n        return 6589\n    if n == 142:\n        return 6632\n    if n == 143:\n        return 6685\n    if n == 144:\n        return 6738\n    if n == 145:\n        return 6791\n    if n == 146:\n        return 6844\n    if n == 147:\n        return 6897\n    if n == 148:\n        return 6950\n    if n == 149:\n        return 7003\n    if n == 150:\n        return 7056\n    if n == 151:\n        return 7109\n    if n == 152:\n        return 7162\n    if n == 153:\n        return 7125\n    if n == 154:\n        return 7178\n    if n == 155:\n        return 7233\n    if n == 156:\n        return 7286\n    if n == 157:\n        return 7339\n    if n == 158:\n        return 7392\n    if n == 159:\n        return 7447\n    if n == 160:\n        return 7510\n    if n == 161:\n        return 7563\n    if n == 162:\n        return 7616\n    if n == 163:\n        return 7669\n    if n == 164:\n        return 7722\n    if n == 165:\n        return 7774\n    if n == 166:\n        return 7826\n    if n == 167:\n        return 7889\n    if n == 168:\n        return 7942\n    if n == 169:\n        return 8000\n    if n == 170:\n        return 8044\n    if ",
        "num_ids": 2018
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def get_num(k):\n        return sum(range(k+1))\n",
        "num_ids": 22
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = 0\n    # number = 0\n    if (n % 2!= 0): \n        while (n!= 0): \n            nonagonal += n + 1\n            n = n // 2\n    else: \n        while (n!= 0): \n            nonagonal -= n + 1\n            n = n // 2\n    return nonagonal\n",
        "num_ids": 86
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n**2 + n\n",
        "num_ids": 10
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*n + n\n",
        "num_ids": 10
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += (i - 1)*i\n    return num\n",
        "num_ids": 34
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 1:\n        return (n*(n+1))/2\n    else: \n        return n*(n-1)/2\n",
        "num_ids": 40
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    lst = []\n    if text.find('z')!= -1:\n        if text[:text.find('z')]!= '':\n            lst.append(text[:text.find('z')])\n        if text[text.rfind('z'):]!= '':\n            lst.append(text[text.rfind('z'):])\n        return lst\n    else:\n        return text\n    # lst = []\n    # if text.find('z')!= -1:\n    #     if text[:text.find('z')]!= '':\n    #         lst.append(text[:text.find('z')])\n    #     if text[text.rfind('z'):]!= '':\n    #         lst.append(text[text.rfind('z'):])\n    #     return lst\n    # else:\n    #     return text\n",
        "num_ids": 223
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.findall(r'[^z]+z[^z]', text)\n    return len(match) == 0\n",
        "num_ids": 34
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    print(re.match(r'^[^z]+z[^z]+$', text))\n    #re.match() \u044d\u0442\u043e \u043f\u043e\u0438\u0441\u043a \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u043a\u0441\u0442\u0430.\n    #^ \u044d\u0442\u043e \u043d\u0430\u0447\u0430\u043b\u043e \u0442\u0435\u043a\u0441\u0442\u0430\n    #[^z]+ \u0438\u0437 \u0432\u0441\u0435\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432\u043e, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u0443\u043a\u0432\u0430 z \u0432 \u0441\u043b\u043e\u0432\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c\u0441\u044f.\n    #+ \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e *, \u043d\u043e \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0440\u0430\u0437\u0443, \u0430 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e.\n    #\u041d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0440\u0430\u0437\u0443, \u0430 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e.\n    #\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0431\u0443\u043a\u0432\u0430 z.\n    #\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, text = 'zzzasdfezsdfdsfz'\n    #\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c True, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0431\u0443\u043a\u0432\u044b \u0441\u043b\u043e\u0432\u0430 \u043d\u0435 \u0440\u0430\u0432\u043d\u044b z.\n    #\u0410 \u0432\u0442\u043e\u0440\u044b\u0435 \u0434\u0432\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u043c\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043b\u0443\u0447\u0438\u043c text = 'zaza' \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0435\u0440\u043d\u0435\u0442 True.\n    #\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c:\n    #print(re.match(r'^[^z]+z[^z]+[^z]+z[^z]+$', text))\n    #\u042d\u0442\u043e \u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0449\u0435\u0442 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b z, \u043e\u0442\u043a\u0443\u0434\u0430 \u043e\u043d\u0438 \u0432\u044b\u0442\u0430\u0449\u0435\u043d\u044b\n    #\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u043c:\n    #^ \u044d\u0442\u043e \u043d\u0430\u0447\u0430\u043b\u043e \u0442\u0435\u043a\u0441\u0442\u0430\n    #[^z]+ \u0438\u0437 \u0432\u0441\u0435\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u043e, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u0443\u043a\u0432\u0430 z \u0432 \u0441\u043b\u043e\u0432\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c\u0441\u044f.\n    #+ \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e *, \u043d\u043e \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0440\u0430\u0437\u0443, \u0430 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e.\n    #\u041d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0440\u0430\u0437\u0443, \u0430 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e.\n    #\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0431\u0443\u043a\u0432\u0430 z.\n    #\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c True, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0431\u0443\u043a\u0432\u044b \u0441\u043b\u043e\u0432\u0430 \u043d\u0435 \u0440\u0430\u0432\u043d\u044b z.\n    #\u0410 \u0432\u0442\u043e\u0440\u044b\u0435 \u0434\u0432\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u043c\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043b\u0443\u0447\u0438\u043c text = 'zaza' \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0435\u0440\u043d\u0435\u0442 True.\n    #\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c:\n    #print(re.match(r'^[^z]+z[^z]+[^z]+z[^z]+[^z]+$', text))\n    #\u042d\u0442\u043e \u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0449\u0435\u0442 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b z, \u043e\u0442\u043a\u0443\u0434\u0430 \u043e\u043d\u0438 \u0432\u044b\u0442\u0430\u0449\u0435\u043d\u044b\n    #\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u043c:\n    #^ \u044d\u0442\u043e \u043d\u0430\u0447\u0430\u043b\u043e \u0442\u0435\u043a\u0441\u0442\u0430\n    #[^z]+ \u0438\u0437 \u0432\u0441\u0435\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u043e, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u0443\u043a\u0432\u0430 z \u0432 \u0441\u043b\u043e\u0432\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c\u0441\u044f.\n    #+ \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e *, \u043d\u043e \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0440\u0430\u0437\u0443, \u0430 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e.\n    #\u041d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0440\u0430\u0437\u0443, \u0430 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e.\n    #\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0431\u0443\u043a\u0432\u0430 z.\n    ",
        "num_ids": 2001
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # print(text.split())\n    # return re.search(r'z\\w+z', text)\n    # return re.search(r'z\\w+z', 'hello zello zzello')\n    return re.search(r'(?<!z)\\w+z(?!z)', text)\n    \n    \ndef text_match_word_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    return re.search(r'^\\w+(?!z)$', text)\n    \ndef text_match_word_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    return re.search(r'\\w+(?<!z)$', text)\n    \ndef text_match_word_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', anywhere in the word.\n    '''\n    return re.search(r'\\w*z\\w*', text)\n    \ndef text_match_word_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start and end of the word.\n    '''\n    return re.search(r'\\w+(z\\w+\\w+)', text)\n    \ndef text_match_word_start_end_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, end, or anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_end_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the end, anywhere in the word.\n    '''\n    return re.search(r'(?<=z)\\w+\\w*', text)\n    \ndef text_match_word_start_end_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, end, or anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_end_start_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the end, start, or anywhere in the word.\n    '''\n    return re.search(r'\\w*z(\\w+)(\\w+)', text)\n    \ndef text_match_word_start_end_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, end, or anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_start_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', in the middle of the word.\n    '''\n    return re.search(r'\\w+z\\w+', text)\n    \ndef text_match_word_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', in the middle of the word.\n    '''\n    return re.search(r'\\w+z\\w+$', text)\n    \ndef text_match_word_start_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', in the middle of the word.\n    '''\n    return re.search(r'\\w+z\\w+$', text)\n    \ndef text_match_word_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', in the middle of the word.\n    '''\n    return re.search(r'\\w+z\\w+', text)\n    \ndef text_match_word_middle_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', in the middle of the word.\n    '''\n    return re.search(r'\\w+z\\w+', text)\n    \ndef text_match_word_end_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', in the middle of the word.\n    '''\n    return re.search(r'\\w+z\\w+', text)\n    \ndef text_match_word_middle_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', in the middle of the word.\n    '''\n    return re.search(r'\\w+z\\w+', text)\n    \ndef text_match_word_start_middle_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', in the middle of the word.\n    '''\n    return re.search(r'\\w+z\\w+', text)\n    \ndef text_match_word_end_middle_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', in the middle of the word.\n    '''\n    return re.search(r'\\w+z\\w+', text)\n    \ndef text_match_word_start_end_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, end, or anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_start_end_middle_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, end, or anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_end_middle_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the end, anywhere in the word.\n    '''\n    return re.search(r'(?<=z)\\w+\\w*', text)\n    \ndef text_match_word_start_end_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, end, or anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_start_end_middle_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, end, or anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_start_middle_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_end_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', anywhere in the word.\n    '''\n    return re.search(r'\\w+\\w*z', text)\n    \ndef text_match_word_start_end_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, end, or anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_start_end_middle_anywhere(text):\n    '''\n    Write a function that checks if a strings contains 'z', at the start, end, or anywhere in the word.\n    '''\n    return re.search(r'\\w+(z)(\\w+)(\\w+)', text)\n    \ndef text_match_word_start_anywhere(text):\n",
        "num_ids": 43
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    elif 'z' in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz = re.findall(r'[\\bz\\B]', text)\n    return bool(wordz)\n",
        "num_ids": 32
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]','', text)\n    text = re.sub(r'[0-9]','', text)\n    text_arr = text.split(' ')\n    text_arr_middle = []\n    for word in text_arr:\n        if len(word) > 1:\n            if word[0] == 'z':\n                word = word.replace('z','')\n                text_arr_middle.append('z' + word + 'z')\n            elif word[-1] == 'z':\n                word = word.replace('z','')\n                text_arr_middle.append(word + 'z')\n            else:\n                text_arr_middle.append(word)\n        else:\n            text_arr_middle.append(word)\n    \n    text_arr = text_arr_middle\n    text_arr_middle = []\n    for word in text_arr:\n        if len(word) > 1:\n            if word[0]!= 'z' and word[-1]!= 'z':\n                text_arr_middle.append(word)\n        else:\n            text_arr_middle.append(word)\n    text_arr = text_arr_middle\n    text_arr_middle = []\n    for word in text_arr:\n        if len(word) > 1:\n            if word[0] == 'z' and word[-1] == 'z':\n                word = word.replace('z','')\n                text_arr_middle.append('z' + word + 'z')\n        text_arr_middle.append(word)\n    return len(text_arr_middle)\n",
        "num_ids": 408
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.findall(\"z[^a-z]*[a-z]z\", text)\n    return match\n",
        "num_ids": 32
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    print(re.match('[^z]z$|^[^z]z', text))\n    return bool(re.match('[^z]z$|^[^z]z', text))\n",
        "num_ids": 51
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search(r'[^z]z([a-z]|[A-Z]|[0-9])[a-z|A-Z]',text)\n    if result:\n        return result.group(0)\n    else:\n        return 'not match'\n",
        "num_ids": 71
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, k):\n        input[i], input[n - i - 1] = input[n - i - 1], input[i]\n    return input\n",
        "num_ids": 52
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array(input, start, end):\n        while (start < end):\n            temp = input[start]\n            input[start] = input[end]\n            input[end] = temp\n            start += 1\n            end = end - 1\n    reverse_Array(input, 0, k-1)\n    reverse_Array(input, k, len(input)-1)\n    reverse_Array(input, 0, len(input)-1)\n    return input\n",
        "num_ids": 112
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if(k == 1):\n        return input[::-1]\n    else:\n        return reverse_Array_Upto_K(input[0:k], k-1) + input[k-1:len(input)]\n",
        "num_ids": 57
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # code goes here\n    input[:k] = input[:k][::-1]\n    input[k:] = input[k:][::-1]\n    return input\n",
        "num_ids": 45
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    start = 0\n    end = k - 1\n    while (start < end):\n        input[start], input[end] = input[end], input[start]\n        start = start + 1\n        end = end - 1\n    return input\n",
        "num_ids": 67
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #print(\"length\",len(input))\n    if(k >= len(input)):\n        return input\n    else:\n        input[:k] = input[:k][::-1]\n        input[k:] = input[k:][::-1]\n        return input\n",
        "num_ids": 69
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array_Upto_K_helper(input, k, output):\n        if k < len(input):\n            output.append(input[k])\n            reverse_Array_Upto_K_helper(input, k+1, output)\n        elif k == len(input):\n            output.extend(input)\n            return output\n",
        "num_ids": 89
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #return input[:k][::-1] + input[k:][::-1]\n    #return list(input[:k][::-1] + input[k:][::-1])\n    return list(input[:k][::-1]) + list(input[k:])\n",
        "num_ids": 72
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input)-1, k, -1):\n        output.append(input[i])\n    print(output)\n",
        "num_ids": 41
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    i = 0\n    input.reverse()\n    while i < k:\n        print(input[i], end=\" \")\n        i+=1\n    print(\"\\n\")\n    i = 0\n    while i < n - k:\n        print(input[k+i], end=\" \")\n        i+=1\n    return\ndef main():\n    '''\n    DRIVER CODE\n    '''\n    input = [1,2,3,4,5,6,7,8,9,10]\n    k = 5\n    reverse_Array_Upto_K(input, k)\n    input = [1,2,3,4,5,6,7,8,9,10]\n    k = 6\n    reverse_Array_Upto_K(input, k)\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 110
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    return test_tup + (test_dict,)\n",
        "num_ids": 36
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + (test_dict, )\n",
        "num_ids": 19
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_dict)\n",
        "num_ids": 24
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "num_ids": 18
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup+tuple(test_dict.values())\n",
        "num_ids": 19
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (*test_tup, test_dict)\n",
        "num_ids": 15
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost)==1:\n        return cost[0][0]\n    dp=[[0]*len(cost[0]) for i in range(len(cost))]\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i==0 and j==0:\n                dp[i][j]=cost[0][0]\n            elif i==0:\n                dp[i][j]=dp[i][j-1]+cost[i][j]\n            elif j==0:\n                dp[i][j]=dp[i-1][j]+cost[i][j]\n            else:\n                dp[i][j]=min(dp[i-1][j]+cost[i][j],dp[i][j-1]+cost[i][j])\n    max_avg=dp[-1][-1]/(len(cost)*len(cost[0]))\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i==0 and j==0:\n                continue\n            if i==0:\n                max_avg=max(dp[i][j-1],max_avg)\n            elif j==0:\n                max_avg=max(dp[i-1][j],max_avg)\n            else:\n                max_avg=max(dp[i-1][j],dp[i][j-1],max_avg)\n    return max_avg\n",
        "num_ids": 365
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    \n    # 1. Initialize result as 0.\n    # 2. Initialize dp array as 0 for each element in the matrix.\n    dp = [[0 for i in range(n)] for j in range(m)]\n    res = 0\n    \n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n    \n    for i in range(m):\n        for j in range(n):\n            if i + j == m - 1:\n                res = max(res, dp[i][j])\n    \n    return res / (m*n)\n    ",
        "num_ids": 287
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    for i in range(len(cost)):\n        cost[i][0] = cost[i][0] + cost[i-1][0]\n",
        "num_ids": 38
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    if len(cost) == 0:\n        return 0\n    if len(cost) == 1 and len(cost[0]) == 1:\n        return cost[0][0]\n    \n    n = len(cost)\n    solution = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                solution[i][j] = cost[i][j]\n            elif i == 0 and j!= 0:\n                solution[i][j] = cost[i][j] + max(solution[i][j - 1], solution[i][j])\n            elif i!= 0 and j == 0:\n                solution[i][j] = cost[i][j] + max(solution[i - 1][j], solution[i][j])\n            else:\n                solution[i][j] = cost[i][j] + max(solution[i][j - 1], solution[i - 1][j], solution[i][j])\n    \n    # Find the maximum average\n    max_avg = 0\n    for row in range(n):\n        for col in range(n):\n            if row == 0 and col == 0:\n                max_avg = solution[row][col]\n            elif row == 0 and col!= 0:\n                max_avg = solution[row][col] - cost[row][col]\n            elif row!= 0 and col == 0:\n                max_avg = solution[row][col] - cost[row][col]\n            else:\n                max_avg = solution[row][col] - cost[row][col]\n                \n    return max_avg\n    \ncost = [[7, 2, 8], [3, 8, 1], [8, 1, 3]]\nprint(maxAverageOfPath(cost))",
        "num_ids": 457
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #Handle Invalid Inputs\n    if cost is None or len(cost) == 0 or len(cost[0]) == 0:\n        return None\n    #Base Case\n    if len(cost) == 1 and len(cost[0]) == 1:\n        return cost[0][0]\n    #Check and Handle Paths starting from the first element\n    first_element = cost[0][0]\n    if len(cost[0]) == 1:\n        cost[0][0] = first_element\n    else:\n        cost[0][0] = first_element + cost[0][1]\n    #Check and Handle Paths ending at the last element\n    last_element = cost[len(cost)-1][len(cost[0])-1]\n    if len(cost[0]) == 1:\n        cost[len(cost)-1][len(cost[0])-1] = last_element\n    else:\n        cost[len(cost)-1][len(cost[0])-1] = last_element + cost[len(cost)-1][len(cost[0])-2]\n    for i in range(1, len(cost[0])-1):\n        cost[0][i] = cost[0][i-1] + cost[0][i]\n    for i in range(1, len(cost)):\n        cost[i][len(cost[0])-1] = cost[i][len(cost[0])-2] + cost[i][len(cost[0])-1]\n    for i in range(1, len(cost)-1):\n        cost[i][0] = cost[i-1][0] + cost[i][0]\n    for i in range(1, len(cost)):\n        cost[i][1] = cost[i][0] + cost[i][1]\n    return maxAverageOfPathHelper(cost, 0, 0, 0, 0)\n",
        "num_ids": 450
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Define variables for N\n    n = len(cost)\n",
        "num_ids": 18
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def findMaxPath(mat, i, j, n, total, visited):\n        if i >= n or i < 0 or j >= n or j < 0:\n            return total, visited\n        if i == n - 1 and j == n - 1:\n            total += mat[i][j]\n            visited.append([i, j])\n            return total, visited\n        total += mat[i][j]\n        visited.append([i, j])\n        maxPath, maxVisited = findMaxPath(mat, i + 1, j, n, total, visited)\n        maxPath, maxVisited = findMaxPath(mat, i, j + 1, n, maxPath, maxVisited)\n        return total, visited\n    \n    n = len(cost)\n    maxPath, maxVisited = findMaxPath(cost, 0, 0, n, 0, [])\n    return maxPath / len(maxVisited)\n",
        "num_ids": 219
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    import math\n    def bfs(arr, visited, x, y, m, n):\n        if x<0 or x>=m or y<0 or y>=n:\n            return False\n        if visited[x][y]==True:\n            return False\n        visited[x][y] = True\n        # visit neighbours and mark as visited\n        if arr[x][y] == 'x':\n            return False\n        if x+1 < m:\n            if arr[x+1][y] == 'x':\n                return False\n            if visited[x+1][y] == False:\n                bfs(arr, visited, x+1, y, m, n)\n        if y+1 < n:\n            if arr[x][y+1] == 'x':\n                return False\n            if visited[x][y+1] == False:\n                bfs(arr, visited, x, y+1, m, n)\n        # if you reach the end return true\n        return True\n",
        "num_ids": 238
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # init empty dp table\n    dp = [[0 for _ in range(len(cost[0]))] for _ in range(len(cost))]\n    # init row, col and starting point\n    row, col = 0, 0\n    for r in range(len(cost)):\n        for c in range(len(cost[0])):\n            if r == 0 and c == 0:\n                dp[r][c] = cost[r][c]\n            elif r == 0 and c!= 0:\n                dp[r][c] = dp[r][c - 1] + cost[r][c]\n            elif r!= 0 and c == 0:\n                dp[r][c] = dp[r - 1][c] + cost[r][c]\n            else:\n                dp[r][c] = max(dp[r - 1][c], dp[r][c - 1]) + cost[r][c]\n    # compute max average\n    total = 0\n    for r in range(len(cost)):\n        for c in range(len(cost[0])):\n            total += dp[r][c]\n    return total / (len(cost) * len(cost[0]))\n",
        "num_ids": 291
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {key: value for (key, value) in students.items() if value[0] >= h and value[1] >= w}\n    return filtered_students\n",
        "num_ids": 47
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key, value in students.items():\n        if value[0]>h and value[1]>w:\n            result[key]=value\n    return result\nstudents = {\n    'Peter': (180, 80),\n    'Joe': (160, 70),\n    'Harry': (170, 70),\n    'Akram': (170, 73),\n    'Jaqluine': (180, 90),\n}\nprint(filter_data(students,170,73)",
        "num_ids": 120
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = []\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            res.append(student)\n    return res\n",
        "num_ids": 47
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key,value in students.items():\n        if(value[0]>=h and value[1]>=w):\n            result[key]=value\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_list=[]\n    for student,data in students.items():\n        if data[0]>h and data[1]>w:\n            filtered_list.append(student)\n    return filtered_list\n",
        "num_ids": 55
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    \n    \n    \n    def filt(students):\n        out = dict()\n        for key,value in students.items():\n            if value[0]>=h and value[1]>=w:\n                out[key]=value\n        return out\n",
        "num_ids": 66
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key in students:\n        if students[key][0] >= h and students[key][1] >= w:\n            filtered_students[key] = students[key]\n    return filtered_students\n",
        "num_ids": 61
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for key in students:\n        if students[key][0] >= h and students[key][1] >= w:\n            filtered_data[key] = students[key]\n    return filtered_data\n",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student in students.items():\n        if student[1][0] >= h and student[1][1] >= w:\n            result[student[0]] = student[1]\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data_filtered = dict()\n    for student, (height,weight) in students.items():\n        if height > h and weight > w:\n            data_filtered[student] = (height,weight)\n    return data_filtered\n",
        "num_ids": 59
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2), 'The input lists must be the same length'\n    return sum(map(eq, nums1, nums2))\n",
        "num_ids": 45
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    total = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            total += 1\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        raise Exception(\"The length of two lists should be the same!\")\n",
        "num_ids": 39
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"The lists don't have the same length.\"\n",
        "num_ids": 31
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i, v1 in enumerate(nums1):\n        for j, v2 in enumerate(nums2):\n            if i!= j and eq(v1, v2):\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    list1 = []\n    list2 = []\n    count = 0\n    for num in nums1:\n        list1.append(num)\n    for num in nums2:\n        list2.append(num)\n    for i in range(len(list1)):\n        if(list1[i] == list2[i]):\n            count += 1\n    return count\n",
        "num_ids": 93
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    list_1 = [1, 2, 3, 4, 5, 5]\n    list_2 = [1, 2, 3, 4, 5, 6]\n    \n    counter = 0\n    for index, element in enumerate(list_1):\n        if eq(list_1[index], list_2[index]):\n            counter += 1\n    return counter\n",
        "num_ids": 88
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_count += 1\n    return same_count\n",
        "num_ids": 52
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(0,power+1):\n        result += base**i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # number = int(base)**power\n    # sum_ = 0\n    # while number > 0:\n    #     sum_ += number % 10\n    #     number //= 10\n    # return sum_\n",
        "num_ids": 52
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n",
        "num_ids": 13
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    else:\n        base_len = len(str(base))\n        return base_len * power_base_sum(base, power-1) + base\n",
        "num_ids": 61
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i) ** power for i in str(base))\n",
        "num_ids": 20
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(1, power + 1):\n        total += base ** i\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base ** power)])\n",
        "num_ids": 21
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    if power == 1:\n        return base\n    if power < 0:\n        base = 1 / base\n        power *= -1\n    return base_sum(base, power)\n",
        "num_ids": 56
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    base_str = str(base)\n    for num in base_str:\n        total += int(num)**power\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = str(base)\n    power = str(power)\n    sum = 0\n    for i in num:\n        sum += int(i)**int(power)\n    return sum\n    \nprint(power_base_sum(2, 100))\nprint(power_base_sum(2, 100))\nprint(power_base_sum(2, 100))\n",
        "num_ids": 88
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"(.*?)\"', text1)\n",
        "num_ids": 20
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    print(matches)\n",
        "num_ids": 31
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"(.*)\"', text1)\n",
        "num_ids": 19
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print('\\n--- Task 5 ---')\n    text = '\"a\",\"b\",\"c\",\"d\"\\n\"x\",\"y\",\"z\"\\n\"a\",\"b\",\"c\"\\n\"d\",\"e\",\"f\"'\n    print('Original text:'+ text)\n    # write your code here\n    # split each row with '\\n'\n    text_list = re.split('\\n', text)\n    # remove '' from the list\n    text_list = [i for i in text_list if i!= '']\n    print(text_list)\n",
        "num_ids": 133
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 == '':\n        return None\n    result = re.search(r'\"(.*?)\"', text1).group(0)\n    return result\n    \ndef extract_first_class_symbols(text1):\n    '''\n    Write a function to extract the first class symbols in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\(.*?\\)', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_parentheses(text1):\n    '''\n    Write a function to extract the parentheses in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\(.*?\\)', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_brackets(text1):\n    '''\n    Write a function to extract the brackets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\[.*?\\]', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_square_brackets(text1):\n    '''\n    Write a function to extract the square brackets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\[.*?\\]', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_braces(text1):\n    '''\n    Write a function to extract the braces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\{.*?\\}', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_curly_braces(text1):\n    '''\n    Write a function to extract the curly braces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\{.*?\\}', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_all_symbols(text1):\n    '''\n    Write a function to extract all symbols in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^\\s].*?[^\\s]', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_alphabets(text1):\n    '''\n    Write a function to extract only alphabets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-zA-Z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_alphabets_uppercase(text1):\n    '''\n    Write a function to extract only uppercase alphabets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[A-Z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_alphabets_lowercase(text1):\n    '''\n    Write a function to extract only lowercase alphabets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_numbers(text1):\n    '''\n    Write a function to extract only numbers in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[0-9]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_symbols(text1):\n    '''\n    Write a function to extract only symbols in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^a-zA-Z0-9]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_symbols_with_spaces(text1):\n    '''\n    Write a function to extract only symbols with spaces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^a-zA-Z0-9\\s]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_symbols_with_numbers(text1):\n    '''\n    Write a function to extract only symbols with numbers in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[0-9][^a-zA-Z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_strings(text1):\n    '''\n    Write a function to extract only strings in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\".*?\"', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_without_spaces(text1):\n    '''\n    Write a function to extract words without spaces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-zA-Z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_numbers(text1):\n    '''\n    Write a function to extract words with numbers in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-zA-Z0-9]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_special_chars(text1):\n    '''\n    Write a function to extract words with special characters in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^\\w]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_spaces(text1):\n    '''\n    Write a function to extract words with spaces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-zA-Z\\s]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_spaces_and_special_chars(text1):\n    '''\n    Write a function to extract words with spaces and special characters in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^\\w\\s]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_numbers_and_spaces(text1):\n    '''\n    Write a function to extract words with numbers and spaces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[0-9a-zA-Z\\s]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_numbers_and_special_chars(text1):\n",
        "num_ids": 84
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\"\\\"\") and i.endswith(\"\\\"\"):\n            lst.append(i)\n    return lst\ndef extract_lines(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_of_code(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_without_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_quotation_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\"\\\"\") and i.endswith(\"\\\"\"):\n            lst.append(i)\n    return lst\ndef extract_lines_without_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_without_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_quotation_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\"\\\"\") and i.endswith(\"\\\"\"):\n            lst.append(i)\n    return lst\ndef extract_lines_without_values_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_quotation_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\"\\\"\") and i.endswith(\"\\\"\"):\n            lst.append(i)\n    return lst\ndef extract_quotation_with_values_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\"\\\"\") and i.endswith(\"\\\"\"):\n            lst.append(i)\n    return lst\ndef extract_quotation_with_values_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\"\\\"\") and i.endswith(\"\\\"\"):\n            lst.append(i)\n    return lst\ndef extract_lines_with_values_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_with_values_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_with_values_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = []\n    for i in text1:\n        if i.startswith(\" \") and i.endswith(\" \"):\n            lst.append(i)\n    return lst\ndef extract_lines_with_values_with_values_with_values(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    lst = [",
        "num_ids": 20
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x = re.findall(r'\\\"(.*)\\\"', text1)\n    print(x)\n",
        "num_ids": 28
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # while True:\n    #     text = input('Please enter your text: ')\n    #     text = text.replace('\"', '')\n    #     if re.search('[a-z]', text):\n    #         continue\n    #     elif re.search('[0-9]', text):\n    #         continue\n    #     else:\n    #         break\n    pattern = re.compile(r'\\\"(.+?)\\\"')\n    result = pattern.findall(text1)\n    return result\n",
        "num_ids": 127
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.findall(r'\\\"(.+?)\\\"', text1)\n    return text1\n",
        "num_ids": 29
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    my_regex = re.compile('\"(.*)\"')\n    print(my_regex.findall(text1))\n",
        "num_ids": 33
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[0] * test_tup[4], test_tup[0] * test_tup[5]\n",
        "num_ids": 80
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = ()\n    for index in range(len(test_tup) - 1):\n        output += (test_tup[index] * test_tup[index + 1],)\n    return output\n",
        "num_ids": 51
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i * t_i+1 for t_i in test_tup)\n",
        "num_ids": 26
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup) - 1):\n        res_tup = res_tup + (test_tup[i] * test_tup[i + 1],)\n    return res_tup\n",
        "num_ids": 65
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    for i in range(0,len(test_tup)-1):\n        test_tup[i] = test_tup[i]*test_tup[i+1]\n    return test_tup\n",
        "num_ids": 54
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res_tup = ()\n    for index, item in enumerate(test_tup):\n        if index+1 < len(test_tup):\n            res_tup = res_tup + (item * test_tup[index+1],)\n    return res_tup\n",
        "num_ids": 71
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    my_new_tup = ()\n    for i in range(len(test_tup)-1):\n        my_new_tup += (test_tup[i]*test_tup[i+1],)\n    return my_new_tup\n",
        "num_ids": 65
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_list = list(test_tup)\n    return tuple(i*j for i,j in zip(t_list,t_list[1:]+t_list[:1]))\n",
        "num_ids": 49
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    def multiply_elements_helper(test_tup, i):\n        if i == len(test_tup) - 1:\n            return test_tup[i]\n        else:\n            return test_tup[i] * multiply_elements_helper(test_tup, i + 1)\n    \n    return tuple([multiply_elements_helper(test_tup, i) for i in range(len(test_tup))])\n",
        "num_ids": 116
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2)\n    return [x + y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 40
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    for i in range(0,len(lst1)):\n        sum_list.append(lst1[i] + lst2[i])\n    return sum_list\n",
        "num_ids": 52
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Your code here\n    # Your code here\n    list3 = []\n    for i in range(0,len(lst1)):\n        list3.append(lst1[i]+lst2[i])\n    return list3\n",
        "num_ids": 60
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 30
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(i) for i in zip(lst1,lst2)]\n",
        "num_ids": 23
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"List Length not equal\")\n        return None\n    else:\n        sum_list = []\n        for i in range(len(lst1)):\n            sum_list.append(lst1[i] + lst2[i])\n    return sum_list",
        "num_ids": 82
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    i = 0\n    while i < len(lst1):\n        new_lst.append(lst1[i] + lst2[i])\n        i += 1\n    return new_lst\n",
        "num_ids": 60
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return None\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 44
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_ans = []\n    for i in range(len(lst1)):\n        lst_ans.append(lst1[i]+lst2[i])\n    return lst_ans\n",
        "num_ids": 52
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(list(set(nums)))\n    if nums == []:\n        return []\n    elif len(nums) == 1:\n        return [nums]\n    else:\n        groups = []\n        prev = nums[0]\n        for key, group in groupby(nums, lambda x: x == prev):\n            if key == True:\n                groups.append(list(group))\n                prev = group[0]\n            else:\n                prev = group[0]\n        return groups\n",
        "num_ids": 126
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n",
        "num_ids": 59
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set(nums)\n    return(list(nums_set))\n",
        "num_ids": 25
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    new_nums = []\n    for i, x in enumerate(nums):\n        if i == 0:\n            new_nums.append(x)\n        elif i == len(nums) - 1:\n            new_nums.append(x)\n        elif nums[i - 1]!= nums[i]:\n            new_nums.append(x)\n        elif nums[i - 1] == nums[i]:\n            pass\n    return new_nums\n",
        "num_ids": 129
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            del nums[i]\n        else:\n            i += 1\n    return nums\n",
        "num_ids": 64
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    else:\n        previous = nums[0]\n        nums_with_duplicates = [previous]\n        for i in range(1, len(nums)):\n            if nums[i]!= previous:\n                nums_with_duplicates.append(nums[i])\n                previous = nums[i]\n        return nums_with_duplicates\n",
        "num_ids": 112
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = [k for k, g in groupby(nums)]\n    return nums\n",
        "num_ids": 25
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(nums)]\n",
        "num_ids": 21
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2 + math.pi*r*h\n    \ndef lateralsurface_triangle(base,height):\n    '''\n    Write a function to find the lateral surface area of a triangle given its base and height.\n    '''\n    return base*height/2\n    \ndef lateral_area_rectangle(length,width):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    return length*width\n    \ndef lateral_area_triangle(base,height):\n    '''\n    Write a function to find the lateral surface area of a triangle given its base and height.\n    '''\n    return base*height/2\n",
        "num_ids": 10
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    #Solve the following equation\n    #V = pi*r^2*h/3\n    #V = pi*r^2*(r+h)\n    \n    #Taking pi to be 3.14159265359\n    \n    V = 3.14159265359*(r**2)*(r+h)\n    \n    return V\n",
        "num_ids": 86
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"surface_area_cone(\",r,\",\",h,\") = \")\n    surface_area_cone(r,h)\n    print(\"\\n\")\n    \ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    surface_area_cone(r,h)\n    surface_area_cone = (math.pi*r**2 + math.pi*r*(h**2))/3\n    print(surface_area_cone)\n    print(\"\\n\")\n    \ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    import math\n    surface_area_cylinder(r,h)\n    surface_area_cylinder = 2*math.pi*r*(r+h)\n    print(surface_area_cylinder)\n    print(\"\\n\")\n    \ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    import math\n    surface_area_cylinder(r,h)\n    surface_area_cylinder = 2*math.pi*r*(r+h)\n    print(surface_area_cylinder)\n    print(\"\\n\")\n",
        "num_ids": 59
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = r * 2 * math.pi * h + (r * r * math.pi * math.tan(math.pi / 2)) / 2\n    return lateral_surface_area\n",
        "num_ids": 50
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2) + (math.pi * r * h)\n",
        "num_ids": 24
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface=3.14*r*r+3.14*r*h\n    return surface\n    \ndef lateral_surface_box(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular box given the length l, width w, and height h.\n    '''\n    surface=2*(l*w+w*h+l*h)\n    return surface\n    \ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    surface=3.14*r*r*h\n    return surface\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    surface=4*3.14*r*r\n    return surface\n    \ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram given base b and height h.\n    '''\n    surface=b*h\n    return surface\n    \ndef area_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the surface area of a trapezoid given base b1 and base b2, and the height h.\n    '''\n    surface=b1+b2+h\n    return surface\n    \ndef area_circle(r):\n    '''\n    Write a function to find the surface area of a circle given radius r.\n    '''\n    surface=math.pi*r*r\n    return surface\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    volume=1/3*3.14*r*r*h\n    return volume\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    volume=3.14*r*r*h\n    return volume\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given side l.\n    '''\n    volume=l*l*l\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    volume=4/3*3.14*r*r*r\n    return volume\n    \ndef volume_parallelogram(b,h):\n    '''\n    Write a function to find the volume of a parallelogram given base b and height h.\n    '''\n    volume=b*h\n    return volume\n    \ndef volume_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the volume of a trapezoid given base b1 and base b2, and the height h.\n    '''\n    volume=1/2*(b1+b2)*h\n    return volume\n    \ndef volume_rectangular_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism given length l, width w, and height h.\n    '''\n    volume=l*w*h\n    return volume\n    \ndef volume_triangular_prism(l,w,h):\n    '''\n    Write a function to find the volume of a triangular prism given length l, width w, and height h.\n    '''\n    volume=1/2*l*w*h\n    return volume\n    \ndef volume_rhombic_prism(b,h):\n    '''\n    Write a function to find the volume of a rhombic prism given base b and height h.\n    '''\n    volume=1/3*b*b*h\n    return volume\n    \ndef volume_hexagonal_prism(h,w):\n    '''\n    Write a function to find the volume of a hexagonal prism given height h and width w.\n    '''\n    volume=1/2*h*w*w\n    return volume\n    \ndef lateral_surface_cylinder_to_cylinder(r1,r2,h):\n    '''\n    Write a function to find the lateral surface area of two cylinders with radii r1 and r2, and height h.\n    '''\n    surface=2*3.14*r1*r1*h+2*3.14*r2*r2*h\n    return surface\n    \ndef lateral_surface_cylinder_to_cube(r1,r2,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder to a cube with radii r1 and r2, and height h.\n    '''\n    surface=6*3.14*r1*r1+6*3.14*r2*r2\n    return surface\n    \ndef lateral_surface_cube_to_cube(l1,l2,w1,w2,h1,h2):\n    '''\n    Write a function to find the lateral surface area of two cubes with sides l1, l2, w1, w2, and height h1 and h2.\n    '''\n    surface=6*l1*l1+6*l2*l2+2*w1*w1+2*w2*w2\n    return surface\n    \ndef lateral_surface_cube_to_cylinder(l1,l2,w1,w2,h1,h2):\n    '''\n    Write a function to find the lateral surface area of a cube to a cylinder with sides l1, l2, w1, w2, and height h1 and h2.\n    '''\n    surface=2*l1*w1+2*l2*w2+2*l1*l1+2*l2*l2\n    return surface\n    \ndef lateral_surface_cylinder_to_cylinder(r1,r2,h1,h2):\n    '''\n    Write a function to find the lateral surface area of two cylinders with radii r1 and r2, and height h1 and h2.\n    '''\n    surface=2*3.14*r1*r1+2*3.14*r2*r2+2*h1*h1+2*h2*h2\n    return surface\n    \ndef lateral_surface_cylinder_to_parallelogram(r1,r2,h1,h2):\n    '''\n    Write a function to find the lateral surface area of a cylinder to a parallelogram with radii r1 and r2, and height h1 and h2.\n    '''\n    surface=4*3.14*r1*r1+4*3.14*r2*r2+2*h1*h1+2*h2*h2\n    return surface\n    \ndef lateral_surface_parallelogram_to_parallelogram(l1,l2,w1,w2,h1,h2):\n    '''\n    Write a function to find the lateral surface area of two parallelograms with sides l1, l2, w1, w2, and height h1 and h2.\n    '''\n    surface=2*l1*w1+2*l2*w2+2*h1*h1+2*h2*h2\n    return surface\n    \ndef lateral_surface_parallelogram_to_cylinder(l1,l2,w1,w2,h1,h2):\n    '''\n    Write a function to find the lateral surface area of a parallelogram to a cylinder with sides l1, l2, w1, w2, and height h1 and h2.\n    '''\n    surface=2*l1*w1+2*l2*w2+2*l1*l1+2*l2*l2\n    return surface\n    \ndef lateral_surface_cube_to_sphere(l1,l2,w1,w2,h1,h2):\n    '''\n    Write a function to find the lateral surface area of a cube to a sphere with sides l1, l2, w1, w2, and height h1 and h2.\n    '''\n    surface=2*3.14*l1*l1+2*3.14*l2*l2+2*h1*",
        "num_ids": 34
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2+r*h+math.sqrt((r**2+r*h)**2+h**2))\n",
        "num_ids": 38
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    theta = 2*math.pi*r/h\n    return math.pi*r**2 + r*math.pi*(1+math.cos(theta))\n    \nprint(lateralsurface_cone(4,4))\nprint(lateralsurface_cone(3,6))\nprint(lateralsurface_cone(7,5))\nprint(lateralsurface_cone(2,3))\nprint(lateralsurface_cone(1,2))\nprint(lateralsurface_cone(0,1))\nprint(lateralsurface_cone(2,0))\nprint(lateralsurface_cone(2,3))\nprint(lateralsurface_cone(0.5,0.5))\nprint(lateralsurface_cone(0.1,0.2))\nprint(lateralsurface_cone(0.1,0.1))\nprint(lateralsurface_cone(0.1,0.01))\nprint(lateralsurface_cone(0.1,0.001))\nprint(lateralsurface_cone(0.01,0.1))\nprint(lateralsurface_cone(0.01,0.01))\nprint(lateralsurface_cone(0.01,0.001))\nprint(lateralsurface_cone(0.01,0.0001))\nprint(lateralsurface_cone(0.001,0.01))\nprint(lateralsurface_cone(0.001,0.001))\nprint(lateralsurface_cone(0.001,0.0001))\nprint(lateralsurface_cone(0.0001,0.001))\nprint(lateralsurface_cone(0.0001,0.01))\nprint(lateralsurface_cone(0.0001,0.001))\nprint(lateralsurface_cone(0.0001,0.0001))\nprint(lateralsurface_cone(0.001,0.0001))\nprint(lateralsurface_cone(0.01,0.0001))\nprint(lateralsurface_cone(0.1,0.0001))\nprint(lateralsurface_cone(1,0.0001))\nprint(lateralsurface_cone(2,0.0001))\nprint(lateralsurface_cone(3,0.0001))\nprint(lateralsurface_cone(4,0.0001))\nprint(lateralsurface_cone(5,0.0001))\nprint(lateralsurface_cone(6,0.0001))\nprint(lateralsurface_cone(7,0.0001))\nprint(lateralsurface_cone(8,0.0001))\nprint(lateralsurface_cone(9,0.0001))\nprint(lateralsurface_cone(10,0.0001))\nprint(lateralsurface_cone(11,0.0001))\nprint(lateralsurface_cone(12,0.0001))\nprint(lateralsurface_cone(13,0.0001))\nprint(lateralsurface_cone(14,0.0001))\nprint(lateralsurface_cone(15,0.0001))\nprint(lateralsurface_cone(16,0.0001))\nprint(lateralsurface_cone(17,0.0001))\nprint(lateralsurface_cone(18,0.0001))\nprint(lateralsurface_cone(19,0.0001))\nprint(lateralsurface_cone(20,0.0001))\nprint(lateralsurface_cone(21,0.0001))\nprint(lateralsurface_cone(22,0.0001))\nprint(lateralsurface_cone(23,0.0001))\nprint(lateralsurface_cone(24,0.0001))\nprint(lateralsurface_cone(25,0.0001))\nprint(lateralsurface_cone(26,0.0001))\nprint(lateralsurface_cone(27,0.0001))\nprint(lateralsurface_cone(28,0.0001))\nprint(lateralsurface_cone(29,0.0001))\nprint(lateralsurface_cone(30,0.0001))\nprint(lateralsurface_cone(31,0.0001))\nprint(lateralsurface_cone(32,0.0001))\nprint(lateralsurface_cone(33,0.0001))\nprint(lateralsurface_cone(34,0.0001))\nprint(lateralsurface_cone(35,0.0001))\nprint(lateralsurface_cone(36,0.0001))\nprint(lateralsurface_cone(37,0.0001))\nprint(lateralsurface_cone(38,0.0001))\nprint(lateralsurface_cone(39,0.0001))\nprint(lateralsurface_cone(40,0.0001))\nprint(lateralsurface_cone(41,0.0001))\nprint(lateralsurface_cone(42,0.0001))\nprint(lateralsurface_cone(43,0.0001))\nprint(lateralsurface_cone(44,0.0001))\nprint(lateralsurface_cone(45,0.0001))\nprint(lateralsurface_cone(46,0.0001))\nprint(lateralsurface_cone(47,0.0001))\nprint(lateralsurface_cone(48,0.0001))\nprint(lateralsurface_cone(49,0.0001))\nprint(lateralsurface_cone(50,0.0001))\nprint(lateralsurface_cone(51,0.0001))\nprint(lateralsurface_cone(52,0.0001))\nprint(lateralsurface_cone(53,0.0001))\nprint(lateralsurface_cone(54,0.0001))\nprint(lateralsurface_cone(55,0.0001))\nprint(lateralsurface_cone(56,0.0001))\nprint(lateralsurface_cone(57,0.0001))\nprint(lateralsurface_cone(58,0.0001))\nprint(lateralsurface_cone(59,0.0001))\nprint(lateralsurface_cone(60,0.0001))\nprint(lateralsurface_cone(61,0.0001))\nprint(lateralsurface_cone(62,0.0001))\nprint(lateralsurface_cone(63,0.0001))\nprint(lateralsurface_cone(64,0.0001))\nprint(lateralsurface_cone(65,0.0001))\nprint(lateralsurface_cone(66,0.0001))\nprint(lateralsurface_cone(67,0.0001))\nprint(lateralsurface_cone(68,0.0001))\nprint(lateralsurface_cone(69,0.0001))\nprint(lateralsurface_cone(70,0.0001))\nprint(lateralsurface_cone(71,0.0001))\nprint(lateralsurface_cone(72,0.0001))\nprint(lateralsurface_cone(73,0.0001))\nprint(lateralsurface_cone(74,0.0001))\nprint(lateralsurface_cone(75,0.0001))\nprint(lateralsurface_cone(76,0.0001))\nprint(lateralsurface_cone(77,0.0001))\nprint(lateralsurface_cone(78,0.0001))\nprint(lateralsurface_cone(79,0.0001))\nprint(lateralsurface_cone(80,0.0001))\nprint(lateralsurface_cone(81,0.0001))\nprint(lateralsurface_cone(82,0.0001))\nprint(lateralsurface_cone(83,0.0001))\nprint(lateralsurface_cone(84,0.0001))\nprint(lateralsurface_cone(85,0.0001))\nprint(lateralsurface_cone(86,0.0001))\nprint(lateralsurface_cone(87,0.0001))\nprint(lateralsurface_cone(88,0.0001))\nprint(lateralsurface_cone(89,0.0001))\nprint(lateralsurface_cone(90,0.0001))\nprint(lateralsurface_cone(91,0.0001))\nprint(lateralsurface_cone(92,0.0001))\nprint(lateralsurface_cone(93,0.0001))\nprint(lateralsurface_cone(94,0.0001))\nprin",
        "num_ids": 2005
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    def lateral_surface_cone(r,h):\n        #formula: https://math.stackexchange.com/questions/479840/surface-area-of-a-cone\n        return math.pi * (r**2 + r * h)\n    return lateral_surface_cone(r,h)\n",
        "num_ids": 82
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\",\", \":\").replace(\" \", \":\").replace(\".\", \":\")\n",
        "num_ids": 26
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[., ]', ':', text)\n",
        "num_ids": 20
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace(',','\uff0c').replace('.',':')\n",
        "num_ids": 27
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(' ',':')\n    text=text.replace(',','::')\n    text=text.replace('.','::')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace(',',':').replace('.',':')\n",
        "num_ids": 25
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace('.',':')\n    text=text.replace(' ',':')\n    text=text.replace(',',':')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(' ',':')\n    text=text.replace(',','::')\n    text=text.replace('.','::')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(',', ':').replace('.', ':').replace(' ', ':')\n",
        "num_ids": 27
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    if x > A[high] or x < A[low]:\n        return -1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "num_ids": 129
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x > A[mid]:\n            low = mid + 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            if mid - 1 < 0:\n                return mid\n            if A[mid - 1]!= x:\n                return mid\n            high = mid - 1\n    return -1\n",
        "num_ids": 113
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n    while left < right:\n        mid = (left + right)//2\n        if A[mid] == x:\n            if mid == 0 or x > A[mid-1]:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n",
        "num_ids": 107
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    else:\n        return A.index(x)\n",
        "num_ids": 28
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            if x == A[left]:\n                left += 1\n            else:\n                return mid\n        elif x > A[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "num_ids": 98
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start, end = 0, len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] < x:\n            start = mid + 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= A[mid]:\n                return mid\n            end = mid - 1\n    return -1\n",
        "num_ids": 110
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            end = mid - 1\n        elif x > A[mid]:\n            start = mid + 1\n    return -1\n",
        "num_ids": 87
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if x > A[mid]:\n            l = mid + 1\n        elif x < A[mid]:\n            r = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                r = mid - 1\n    return -1\n",
        "num_ids": 110
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x == A[mid]:\n            if mid - 1 >= 0 and A[mid-1] == A[mid]:\n                start = mid + 1\n            else:\n                return mid\n        elif x > A[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n",
        "num_ids": 107
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # table[i] will be storing the product of all subarrays\n    # starting with arr[0] and ending with arr[i].\n    # Initialize all entries in table as 1\n    table = [1 for _ in range(n)]\n    # In the loop, j goes from 0 to n-1.\n    for i in range(1, n):\n        # Initialize product to 1\n        prod = 1\n        # Compute product of all elements\n        for j in range(i):\n            # This will compute (arr[i] * arr[j] * table[j])\n            # and update prod\n            prod = prod * arr[j] * table[j]\n        table[i] = prod\n    # Print the computed table\n    print(table)\n    return table\n",
        "num_ids": 194
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    length = len(arr)\n    all_prod = []\n    all_prod.append(1)\n    for i in range(length):\n        all_prod.append(all_prod[i] * arr[i])\n    return sum(all_prod)\n    \n",
        "num_ids": 71
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    sop=0\n    for i in range(len(arr)):\n        sop+=sum_Of_Subarray_Prod_helper(arr,i)\n    return sop\n",
        "num_ids": 57
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    \n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += prod // arr[j]\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    p = []\n    for i in range(len(arr)):\n        a = 1\n        for j in range(i,len(arr)):\n            a = a * arr[j]\n            p.append(a)\n    return sum(p)\n",
        "num_ids": 63
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # lst = [1, 2, 3, 4]\n    lst = [1, 2, -1, 0]\n    # lst = [-1, 2, 1, 0]\n",
        "num_ids": 47
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)<=1:\n        return 0\n    return sum([x*y for x,y in itertools.product(arr,arr[1:])]) + sum_Of_Subarray_Prod(arr[1:])\n",
        "num_ids": 60
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # initializing list for storing results\n    arr_sum = []\n    # iterating for each element of list\n    for i in range(len(arr)):\n        # initializing sum to zero\n        sum = 0\n        # iterating for each sublist from i to j\n        for j in range(i, len(arr)):\n            # using list comprehension to multiply all sublists\n            sum += (reduce(lambda a, b: a * b, arr[i:j + 1]))\n        arr_sum.append(sum)\n    return arr_sum\n",
        "num_ids": 133
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subarray = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i < j):\n                subarray.append(arr[i:j])\n    print(subarray)\n    sum_of_subarray = []\n    for sublist in subarray:\n        if len(sublist) > 1:\n            sum_of_subarray.append(prod(sublist))\n    return sum(sum_of_subarray)\n",
        "num_ids": 119
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n",
        "num_ids": 15
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n < 0:  \n        n = n & 0xFFFFFFFF  \n    return ((n >> 1) | (1<<(len(bin(n)) - 2))) & 0xFFFFFFFF\n",
        "num_ids": 48
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # change this value for a different result\n    n = 13\n    def toggle(n):\n        n = (n ^ (n >> 1))\n        return n\n    # Driver program to test above function\n    print(toggle(n))\n",
        "num_ids": 57
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if (n == 0):\n        return n\n    else:\n        return (n & ~(-n))\n",
        "num_ids": 28
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & ~(0b111111 << 1)) | ((n & (~0b111111)) << 1))\n",
        "num_ids": 30
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n ^ (n >> 1)\n    x = x ^ (x >> 2)\n    return x ^ (x >> 4)\n",
        "num_ids": 34
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n >> 1)\n",
        "num_ids": 12
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    for i in range(2, 7):\n        n = n ^ (1 << i)\n    return n\n",
        "num_ids": 28
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #return ~(n<<1) & n\n    return n ^ ((n<<1) & 0xaaaaaaaa)\n    \nif __name__ == \"__main__\":\n    n = 10\n    print(\"binary of number: {} is {}\".format(n, bin(n)))\n    print(\"Toggled bits of number: {} is {}\".format(n, bin(set_middle_bits(n))))\n",
        "num_ids": 97
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = ((n & ~(2**(len(bin(n))-1)-1)) | ((n & (2**(len(bin(n))-1)-1)) >> 1))\n    return n\n",
        "num_ids": 51
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_mask = 1 << 15  # 1111\n    return n ^ bit_mask\n",
        "num_ids": 23
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n",
        "num_ids": 35
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        return bisect.bisect_left(a, x)\n",
        "num_ids": 35
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left_index = bisect.bisect_left(a, x)\n    if left_index == len(a):\n        return len(a)-1\n    return left_index-1\n",
        "num_ids": 47
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n",
        "num_ids": 49
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = (lo + hi)//2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n",
        "num_ids": 61
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return None\n",
        "num_ids": 48
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 0\n    i = bisect.bisect_left(a, x)\n    if i:\n        if a[i-1] == x:\n            return i - 1\n    return i\n",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0 or a[len(a)-1] < x:\n        return len(a)\n    else:\n        return left_insertion(a[:len(a)-1], x)\n",
        "num_ids": 53
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)): \n        return \"String starts with vowel\"\n    else: \n        return \"String doesn't starts with vowel\"\n",
        "num_ids": 42
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return f\"The string {string} starts with a vowel\"\n    else:\n        return f\"The string {string} starts with a consonant\"\n    # return True if re.match(regex,string) else False\nprint(check_str(\"I\"))\nprint(check_str(\"A\"))\nprint(check_str(\"E\"))\nprint(check_str(\"AEIOU\"))\nprint(check_str(\"A123\"))\nprint(check_str(\"Aa\"))\nprint(check_str(\"A1230\"))\nprint(check_str(\"ViolaJones\"))\nprint(check_str(\"Zebra2\"))\n",
        "num_ids": 158
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)): \n        print(\"String is starting with vowels:\", string) \n    else: \n        print(\"String is not starting with vowels:\", string) \n",
        "num_ids": 53
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)): \n        return True\n    else: \n        return False\n",
        "num_ids": 30
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)): \n        return True \n    else: \n        return False\n",
        "num_ids": 31
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string)\n    \nif __name__ == \"__main__\": \n    \n    # Initialize the test cases \n    test_str = \"Hey There!!\"\n    test_str1 = \"Python!!\"\n    test_str2 = \"Hello\"\n    test_str3 = \"yeh\"\n    test_str4 = \"pythoon\"\n",
        "num_ids": 92
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = input(\"Enter a string: \")\n    if(re.search(regex, string)): \n        print(\"Given string is starting with a vowel\") \n    else: \n        print(\"Given string is not starting with a vowel\") \ncheck_str(\"I am a very good boy\")\n",
        "num_ids": 73
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string)) \nprint(check_str(\"Helloworld\"))\nprint(check_str(\"Helloworld, where are you?\"))\nprint(check_str(\"Python\"))\nprint(check_str(\"__PYTHON__\"))\nprint(check_str(\"!python?\"))\nprint(check_str(\"Pyth0n0n\"))\nprint(check_str(\"Pyth0n0n?\"))\nprint(check_str(\"Python!\"))\nprint(check_str(\"Pyth0n0n?\"))\nprint(check_str(\"pyth0n0n\"))\nprint(check_str(\"python!\"))\n",
        "num_ids": 156
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n - 1) * n\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n + geometric_sum(n - 1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # if n == 0:\n    #     return 0\n    # else:\n    #     return 2*(1 - pow(3,n-1))\n    # return (1 - pow(3,n-1))\n    return 1 - pow(3,n-1)\n",
        "num_ids": 67
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*(1-1/(2**(n-1)))\n",
        "num_ids": 34
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return n + geometric_sum(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return int(n * (1 - n) ** (0.5))\n",
        "num_ids": 20
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 2 * geometric_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (1+n) * (1+n+n*(n-1)/(n+1))/(n+2)\n",
        "num_ids": 35
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 * geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_index = int((math.pow(10,n)-1)/(math.pow(10,n-1)-1))\n    print(max_index)\n    return max_index \n",
        "num_ids": 50
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # n = int(input(\"Input n: \"))\n    count = 0\n    while (count < n): \n        i = 1\n        num = 0\n        while (True):\n            if (num < 10):\n                # print(num, end = \" \")\n                count += 1\n                if (count == n):\n                    return num\n            num = num + 1\n            i = i + 1\n            if (i > 100):\n                break\n    # print(count)\n    # print(num)\n    return None\n",
        "num_ids": 126
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.sqrt(n*n + n) - n/2)\ndef find_Triangular_Number(n): \n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/how-to-find-nth-triangular-number/\n    '''\n    return n*(n+1)//2\ndef find_Fibonacci_Number(n): \n    '''\n    Write a python function to find the nth Fibonacci number. https://www.geeksforgeeks.org/find-the-nth-fibonacci-number/\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return find_Fibonacci_Number(n-1) + find_Fibonacci_Number(n-2)\ndef find_Nth_Fibonacci_Number(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Initialize first two Fibonacci Numbers as 0 and 1\n    a = 0\n    b = 1\n    # Start with a check value of 0 or 1\n    i = 2\n    while i<=n:\n        c = a + b\n        a = b\n        b = c\n        i += 1\n    return c\ndef find_Nth_Fibonacci_Number_Optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci_Number_Linear(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci_Number_Linear_Optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci_Number_Linear_Optimized_Optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci_Number_Linear_Optimized_Optimized_Optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci_Number_Linear_Optimized_Optimized_Optimized_Optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci_Number_Linear_Optimized_Optimized_Optimized_Optimized_Optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci_Number_Linear_Optimized_Optimized_Optimized_Optimized_Optimized_Optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci_Number_Linear_Optimized_Optimized_Optimized_Optimized_Optimized_Optimized_Optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci_Number_Linear_Optimized_Optimized_Optimized_Optimized_Optimized_Optimized_Optimized_Optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number using numpy. https://www.geeksforgeeks.org/find-nth-fibonacci-number-using-numpy/\n    '''\n    # Calculate the golden ratio value\n    phi = (1+math.sqrt(5))/2\n    # Calculate the result using the golden ratio value\n    return round((math.pow(phi,n+1) - math.pow(phi,n))/math.sqrt(5))\ndef find_Nth_Fibonacci",
        "num_ids": 83
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while(1):\n        i += 1\n        n = int(math.pow(i * (i + 1), 0.5))\n        if n == n * n:\n            break\n    return i - 1\ndef find_Triangular_Number(n):\n    i = 1\n    while(1):\n        i += 1\n        n = int(math.pow(i * (i + 1), 0.5))\n        if n == n * n:\n            break\n    return n\n",
        "num_ids": 123
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize starting number \n    start = 1\n    # Initialize result \n    res = 0\n    # loop untill we get result \n    while (res <= n): \n        # Calculate next starting number and \n        # increment result \n        start += 1\n        res = 0\n        i = 1\n        while(i <= math.floor(math.sqrt(start))): \n            if (start % i == 0): \n                if (i == math.floor(math.sqrt(start))): \n                    res += 1\n                else: \n                    res += 2\n            i += 1\n    return start \n",
        "num_ids": 151
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest_number = 1\n    for i in range(1, n): \n        smallest_number *= (i + 1) \n    return int(smallest_number) \n",
        "num_ids": 47
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (pow(10,i) <= n): \n        i += 1\n    \n    return i\n",
        "num_ids": 33
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 0\n    for i in range(1, n):\n        triangular_number += i\n    return len(str(triangular_number))\n",
        "num_ids": 41
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = 0; m = 1\n    while True:\n        k += 1\n        m = m * 10\n        if m >= n:\n            break\n    return int(k - (m/10-n) + 1)\ndef is_Prime(n):\n    '''\n    Write a Python function to check whether a number is prime or not. \n    https://www.geeksforgeeks.org/python-program-to-check-whether-a-number-is-prime-or-not/\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef find_Min(n):\n    '''\n    Write a python function that finds the minimum number of coins required to make a value n using 1,5, and 10 Indian Rupees. https://www.geeksforgeeks.org/minimum-number-of-coins-required-to-make-a-change/\n    '''\n    if n == 0:\n        return 0\n    coins = [0]*(n+1)\n    coins[0] = 0\n    coins[1] = 0\n    coins[2] = 0\n    coins[3] = 1\n    coins[4] = 1\n    coins[5] = 2\n    coins[6] = 2\n    coins[7] = 3\n    coins[8] = 3\n    coins[9] = 4\n    for i in range(10,n+1):\n        coins[i] = coins[i-1] + 1\n        if i - 5 >= 0:\n            coins[i] = min(coins[i],coins[i-5] + 1)\n        if i - 10 >= 0:\n            coins[i] = min(coins[i],coins[i-10] + 1)\n    return coins[n]\ndef find_Least_Factors(n):\n    '''\n    Write a python function to find the smallest number which is evenly divisible by all the numbers from 1 to n. https://www.geeksforgeeks.org/find-smallest-number-that-is-divisible-by-all-numbers-from-1-to-n/\n    '''\n    if n <= 1:\n        return n\n    factors = [0]*(n+1)\n    factors[0] = 1\n    factors[1] = 1\n    for i in range(2,n+1):\n        if (i % 2 == 0):\n            factors[i] = 2\n        else:\n            factors[i] = 1\n    for i in range(3,n+1,2):\n        if i % 3 == 0:\n            factors[i] = 3\n        else:\n            factors[i] = 1\n    for i in range(5,n+1,2):\n        if i % 5 == 0:\n            factors[i] = 5\n        else:\n            factors[i] = 1\n    for i in range(7,n+1,2):\n        if i % 7 == 0:\n            factors[i] = 7\n        else:\n            factors[i] = 1\n    for i in range(11,n+1,2):\n        if i % 11 == 0:\n            factors[i] = 11\n        else:\n            factors[i] = 1\n    for i in range(13,n+1,2):\n        if i % 13 == 0:\n            factors[i] = 13\n        else:\n            factors[i] = 1\n    for i in range(17,n+1,2):\n        if i % 17 == 0:\n            factors[i] = 17\n        else:\n            factors[i] = 1\n    for i in range(19,n+1,2):\n        if i % 19 == 0:\n            factors[i] = 19\n        else:\n            factors[i] = 1\n    for i in range(23,n+1,2):\n        if i % 23 == 0:\n            factors[i] = 23\n        else:\n            factors[i] = 1\n    for i in range(29,n+1,2):\n        if i % 29 == 0:\n            factors[i] = 29\n        else:\n            factors[i] = 1\n    for i in range(31,n+1,2):\n        if i % 31 == 0:\n            factors[i] = 31\n        else:\n            factors[i] = 1\n    for i in range(37,n+1,2):\n        if i % 37 == 0:\n            factors[i] = 37\n        else:\n            factors[i] = 1\n    for i in range(41,n+1,2):\n        if i % 41 == 0:\n            factors[i] = 41\n        else:\n            factors[i] = 1\n    for i in range(43,n+1,2):\n        if i % 43 == 0:\n            factors[i] = 43\n        else:\n            factors[i] = 1\n    for i in range(47,n+1,2):\n        if i % 47 == 0:\n            factors[i] = 47\n        else:\n            factors[i] = 1\n    for i in range(53,n+1,2):\n        if i % 53 == 0:\n            factors[i] = 53\n        else:\n            factors[i] = 1\n    for i in range(59,n+1,2):\n        if i % 59 == 0:\n            factors[i] = 59\n        else:\n            factors[i] = 1\n    for i in range(61,n+1,2):\n        if i % 61 == 0:\n            factors[i] = 61\n        else:\n            factors[i] = 1\n    for i in range(67,n+1,2):\n        if i % 67 == 0:\n            factors[i] = 67\n        else:\n            factors[i] = 1\n    for i in range(71,n+1,2):\n        if i % 71 == 0:\n            factors[i] = 71\n        else:\n            factors[i] = 1\n    for i in range(73,n+1,2):\n        if i % 73 == 0:\n            factors[i] = 73\n        else:\n            factors[i] = 1\n    for i in range(79,n+1,2):\n        if i % 79 == 0:\n            factors[i] = 79\n        else:\n            factors[i] = 1\n    for i in range(83,n+1,2):\n        if i % 83 == 0:\n            factors[i] = 83\n        else:\n            factors[i] = 1\n    for i in range(89,n+1,2):\n        if i % 89 == 0:\n            factors[i] = 89\n        else:\n            factors[i] = 1\n    for i in range(97,n+1,2):\n        if i % 97 == 0:\n            factors[i] = 97\n        else:\n            factors[i] = 1\n    for i in range(101,n+1,2):\n        if i % 101 == 0:\n            factors[i] = 101\n        else:\n            factors[i] = 1\n    for i in range(103,n+1,2):\n        if i % 103 == 0:\n            factors[i] = 103\n        else:\n            factors[i] = 1\n    for i in range(107,n+1,2):\n        if i % 107 == 0:\n            factors[i] = 107\n        else:\n            factors[i] = 1\n    for i in range(109,n+1,2):\n        if i % 109 == 0:\n            factors[i] = 109\n        else:\n            factors[i] = 1\n    for i in range(113,n+1,2):\n        if i % 113 == 0:\n            factors[i] = 11",
        "num_ids": 1410
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    sum=0\n    num=1\n    i=0\n    while(num<n):\n        i+=1\n        num+=i\n    return i-1\n",
        "num_ids": 41
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res_dict = {}\n    for i in range(0, len(test_tup), 2):\n        res_dict[test_tup[i]] = test_tup[i+1]\n",
        "num_ids": 50
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup)):\n        result[i] = test_tup[i]\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0,len(test_tup)-1,2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict\n",
        "num_ids": 58
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict1 = {}\n    for i,j in enumerate(test_tup):\n        dict1[i] = j\n    print(dict1)\n",
        "num_ids": 39
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            test_dict[test_tup[i]] = test_tup[i + 1]\n    return test_dict\n",
        "num_ids": 62
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n",
        "num_ids": 54
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup = (1, 'a', 2, 'b', 3, 'c')\n    print(dict(test_tup))\n    # convert to dictionary\n    dict(test_tup)\n",
        "num_ids": 51
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i: test_tup[i] for i in range(0, len(test_tup), 2)}\n",
        "num_ids": 31
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\ndef all_Characters_Same_Method2(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\ndef all_Characters_Same_Method3(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\ndef all_Characters_Same_Method4(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Code Here\n    char=s[0]\n    if len(s)==1:\n        return True\n    for i in range(1,len(s)):\n        if char!=s[i]:\n            return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if(s[i]!=s[i+1]) :\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    if len(set(s)) == 1:\n        return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in range(1, len(s)) :\n        if char!= s[i] :\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    if len(s) > 0 :\n        for i in range(len(s)-1) :\n            if s[i] == s[i+1] :\n                count += 1\n            else :\n                return False\n        if count == len(s)-1 :\n            return True\n        else :\n            return False\n    else :\n        return False\n",
        "num_ids": 90
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(ch == s[0] for ch in s)\n",
        "num_ids": 18
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i == s[0] :\n            return True\n        else :\n            return False\n",
        "num_ids": 31
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) * math.sqrt(3.0) / 4.0\n    return s\ndef perimeter_tetrahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a tetrahedron.\n    '''\n    s = (side * 6)\n    return s\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    s = 6 * (side ** 2)\n    return s\ndef perimeter_cube(side):\n    '''\n    Write a function to caluclate the perimeter of a cube.\n    '''\n    s = 12 * side\n    return s\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    s = math.sqrt(8) * (side ** 2)\n    return s\ndef perimeter_octahedron(side):\n    '''\n    Write a function to caluclate the perimeter of an octahedron.\n    '''\n    s = 8 * side\n    return s\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    s = math.sqrt(5) * (side ** 2)\n    return s\ndef perimeter_icosahedron(side):\n    '''\n    Write a function to caluclate the perimeter of an icosahedron.\n    '''\n    s = 12 * side\n    return s\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    s = math.sqrt(5) * (side ** 2)\n    return s\ndef perimeter_dodecahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a dodecahedron.\n    '''\n    s = 12 * side\n    return s\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    s = math.sqrt(5) * (side ** 2)\n    return s\ndef perimeter_icosahedron(side):\n    '''\n    Write a function to caluclate the perimeter of an icosahedron.\n    '''\n    s = 12 * side\n    return s\ndef area_truncated_octahedron(side):\n    '''\n    Write a function to caluclate the area of a truncated octahedron.\n    '''\n    s = math.sqrt(2) * (side ** 2)\n    return s\ndef perimeter_truncated_octahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a truncated octahedron.\n    '''\n    s = 8 * side\n    return s\ndef area_truncated_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a truncated icosahedron.\n    '''\n    s = math.sqrt(3) * (side ** 2)\n    return s\ndef perimeter_truncated_icosahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a truncated icosahedron.\n    '''\n    s = 12 * side\n    return s\ndef area_truncated_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a truncated dodecahedron.\n    '''\n    s = math.sqrt(3) * (side ** 2)\n    return s\ndef perimeter_truncated_dodecahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a truncated dodecahedron.\n    '''\n    s = 12 * side\n    return s\ndef area_hemisphere(side):\n    '''\n    Write a function to caluclate the area of a hemisphere.\n    '''\n    s = math.sqrt(3) / 2 * (side ** 2)\n    return s\ndef perimeter_hemisphere(side):\n    '''\n    Write a function to caluclate the perimeter of a hemisphere.\n    '''\n    s = 12 * side\n    return s\ndef area_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    s = 2 * math.pi * radius * (radius + height)\n    return s\ndef perimeter_cylinder(radius, height):\n    '''\n    Write a function to caluclate the perimeter of a cylinder.\n    '''\n    s = 2 * math.pi * radius * (radius + height)\n    return s\ndef area_cone(radius, height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    s = math.pi * radius * (radius + height)\n    return s\ndef perimeter_cone(radius, height):\n    '''\n    Write a function to caluclate the perimeter of a cone.\n    '''\n    s = 2 * math.pi * radius * (radius + height)\n    return s\ndef area_prism(base, height):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    s = base * height\n    return s\ndef perimeter_prism(base, height):\n    '''\n    Write a function to caluclate the perimeter of a prism.\n    '''\n    s = 2 * base * height\n    return s\ndef area_pyramid(base, height):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    s = 0.5 * base * height\n    return s\ndef perimeter_pyramid(base, height):\n    '''\n    Write a function to caluclate the perimeter of a pyramid.\n    '''\n    s = 2 * math.sqrt(base * height)\n    return s\ndef area_prism_parallel(base, height, angle):\n    '''\n    Write a function to caluclate the area of a prism that is parallel to a plane.\n    '''\n    s = math.sin(angle) * base * height\n    return s\ndef perimeter_prism_parallel(base, height, angle):\n    '''\n    Write a function to caluclate the perimeter of a prism that is parallel to a plane.\n    '''\n    s = math.sin(angle) * 2 * base * height\n    return s\ndef area_right_circular_cone(radius):\n    '''\n    Write a function to caluclate the area of a right circular cone.\n    '''\n    s = math.pi * radius ** 2\n    return s\ndef perimeter_right_circular_cone(radius):\n    '''\n    Write a function to caluclate the perimeter of a right circular cone.\n    '''\n    s = math.pi * radius * 2\n    return s\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    s = 0.5 * (base1 + base2) * height\n    return s\ndef perimeter_trapezoid(base1, base2, height):\n    '''\n    Write a function to caluclate the perimeter of a trapezoid.\n    '''\n    s = 2 * (base1 + base2)\n    return s\ndef area_parallelogram(base, height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    s = base * height\n    return s\ndef perimeter_parallelogram(base, height):\n    '''\n    Write a function to caluclate the perimeter of a parallelogram.\n    '''\n    s = 2 * base * height\n    return s\ndef area_parallelogram_parallel(base, height, angle):\n    '''\n    Write a function to caluclate the area of a parallelogram that is parallel to a plane.\n    '''\n    s = math.sin(angle) * base * height\n    return s\ndef perimeter_parallelogram_parallel(base, height, angle):\n    '''\n    Write a function to caluclate the perimeter of ",
        "num_ids": 14
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #side = float(input('Enter the side of the tetrahedron: '))\n    import math\n    s = float(side)\n    area = (3 * math.sqrt(3)) / 4 * (s ** 2)\n    return area\n",
        "num_ids": 61
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * math.sqrt(2) * math.sqrt(side ** 2 * 6) / 6\n",
        "num_ids": 28
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**3) * (math.sqrt(2) / 4)\n",
        "num_ids": 22
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / (math.sqrt(2))\n    return(s)\n",
        "num_ids": 26
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Write your code here\n    print((math.sqrt(3)*side*side)/4)\n",
        "num_ids": 26
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    pass\ndef area_triangle(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    pass\ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    pass\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    pass\ndef volume_prism(side_1, side_2, side_3, side_4):\n    '''\n    Write a function to calculate the volume of a prism.\n    '''\n    pass\ndef area_circular_sector(radius, angle):\n    '''\n    Write a function to calculate the area of a circular sector.\n    '''\n    pass\ndef area_trapezium(side_1, side_2, side_3, side_4):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    pass\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    pass\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    pass\ndef volume_cone_base(radius, height):\n    '''\n    Write a function to calculate the volume of a cone base.\n    '''\n    pass\ndef volume_pyramid(base, height):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    pass\ndef area_rectangular_prism(side_1, side_2, side_3, side_4):\n    '''\n    Write a function to calculate the area of a rectangular prism.\n    '''\n    pass\ndef volume_ellipsoid(radius_1, radius_2, radius_3):\n    '''\n    Write a function to calculate the volume of an ellipsoid.\n    '''\n    pass\ndef volume_cone_slant(radius, height, slant_height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    pass\ndef volume_cone_cap(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    pass\ndef volume_parallelipiped(length_1, length_2, length_3):\n    '''\n    Write a function to calculate the volume of a parallelipiped.\n    '''\n    pass\ndef volume_square_pyramid(side):\n    '''\n    Write a function to calculate the volume of a square pyramid.\n    '''\n    pass\ndef volume_hexagonal_prism(side):\n    '''\n    Write a function to calculate the volume of a hexagonal prism.\n    '''\n    pass\ndef area_cuboid(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a cuboid.\n    '''\n    pass\ndef volume_wedge(radius, height):\n    '''\n    Write a function to calculate the volume of a wedge.\n    '''\n    pass\ndef volume_kite(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the volume of a kite.\n    '''\n    pass\ndef area_triangular_prism(base, height):\n    '''\n    Write a function to calculate the area of a triangular prism.\n    '''\n    pass\ndef area_rectangular_pyramid(base, height):\n    '''\n    Write a function to calculate the area of a rectangular pyramid.\n    '''\n    pass\ndef area_cone(radius, height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    pass\ndef volume_sphere_base(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    pass\ndef volume_cylinder_base(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    pass\ndef volume_cone_slant(radius, height, slant_height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    pass\ndef volume_cube_base(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    pass\ndef area_rectangular_pyramid_base(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a rectangular pyramid.\n    '''\n    pass\ndef volume_sphere_side(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    pass\ndef volume_cylinder_side(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    pass\ndef volume_cone_base_side(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    pass\ndef volume_cone_cap_side(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    pass\ndef area_triangular_prism_base(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a triangular prism.\n    '''\n    pass\ndef area_triangular_prism_side(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a triangular prism.\n    '''\n    pass\ndef volume_square_pyramid_base(side):\n    '''\n    Write a function to calculate the volume of a square pyramid.\n    '''\n    pass\ndef area_cube_base(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    pass\ndef volume_parallelipiped_side(length_1, length_2, length_3):\n    '''\n    Write a function to calculate the volume of a parallelipiped.\n    '''\n    pass\ndef area_rectangular_prism_side(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a rectangular prism.\n    '''\n    pass\ndef area_square_pyramid_side(side):\n    '''\n    Write a function to calculate the area of a square pyramid.\n    '''\n    pass\ndef volume_kite_side(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the volume of a kite.\n    '''\n    pass\ndef area_trapezium_base(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    pass\ndef volume_trapezium_side(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the volume of a trapezium.\n    '''\n    pass\ndef volume_wedge_side(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the volume of a wedge.\n    '''\n    pass\ndef area_ellipsoid_base(radius_1, radius_2, radius_3):\n    '''\n    Write a function to calculate the area of an ellipsoid.\n    '''\n    pass\ndef volume_cylinder_cap(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    pass\ndef volume_cube_side(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    pass\ndef volume_cone_base_cap(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    pass\ndef area_rectangular_pyramid_side(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a rectangular pyramid.\n    '''\n    pass\ndef volume_square_pyramid_side(side):\n    '''\n    Write a function to calculate the volume of a square pyramid.\n    '''\n    pass\ndef volum",
        "num_ids": 8
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 3)/(6 * math.sqrt(2))\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((3*side)**2)/(12)\n",
        "num_ids": 16
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((4*side**2)/(math.sqrt(2)))/12\n",
        "num_ids": 22
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    right_list = [0]*len(list)\n    for i in range(0, len(list)):\n        right_list[(i + m)%len(list)] = list[i]\n    return right_list\n",
        "num_ids": 57
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_size = len(list)\n    list_mid = list_size // 2\n",
        "num_ids": 23
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    count = 0\n    i = 0\n    while count < m:\n        j = 0\n        while j < len(list) - 1:\n            if j == len(list) - count - 1:\n                list[j] = list[j + 1]\n            else:\n                list[j] = list[j + 1]\n            j = j + 1\n        i = i + 1\n        count = count + 1\n    return list\n",
        "num_ids": 105
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    for i in range(m):\n        last_element = list.pop(length - 1)\n        list.insert(0, last_element)\n",
        "num_ids": 45
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    output = []\n    for i in range(0, m):\n        output.append(list[(m-i)-1])\n    print(output)\n",
        "num_ids": 39
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(\"List: \" + str(list))\n    print(\"Rotating right by: \" + str(m) + \"\\n\")\n    list_len = len(list)\n    i = list_len - m\n    temp = list[i]\n    while i < list_len - 1:\n        list[i] = list[i+1]\n        i += 1\n    list[list_len-1] = temp\n    print(list)\n    return\n",
        "num_ids": 110
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m%len(list)\n    return list[m:] + list[:m]\n",
        "num_ids": 25
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    m %= length\n    return list[length-m: ] + list[:length-m]\n",
        "num_ids": 34
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    rlist = []\n    i = 0\n    while i < m:\n        rlist.append(list[len(list)-m+i])\n        i+=1\n    while i < len(list):\n        rlist.append(list[i])\n        i+=1\n    return rlist\n",
        "num_ids": 72
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    m = m % l\n    for i in range(m):\n        lst = list.pop()\n        list.insert(0, lst)\n    return list\n",
        "num_ids": 50
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    result = False\n    for i in test_tup:\n        if i is None:\n            return False\n    result = True\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n",
        "num_ids": 11
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    print('\\n----> check_none()')\n    if any(test_tup):\n        return False\n    else:\n        return True\n    #pass\n",
        "num_ids": 41
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        print(\"There is no none value in tuple.\")\n    else:\n        print(\"There are some none value in tuple.\")\n",
        "num_ids": 40
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits_helper(num):\n        digits = [int(digit) for digit in str(num)]\n        if all([num % digit == 0 for digit in digits]):\n            return True\n        else:\n            return False\n    return [num for num in range(startnum, endnum + 1) if divisible_by_digits_helper(num)]\n",
        "num_ids": 95
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: num == num%10 for num in range(startnum, endnum)))\n",
        "num_ids": 28
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    x = lambda startnum, endnum: [num for num in range(startnum, endnum+1) if num % int(str(num)[0]) == 0 and num % int(str(num)[1]) == 0 and num % int(str(num)[2]) == 0 and num % int(str(num)[3]) == 0]\n    print(x(startnum, endnum))\n",
        "num_ids": 93
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum + 1) if x % sum([int(digit) for digit in str(x)]) == 0]\n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = range(startnum,endnum+1)\n    divisors = lambda num: [x for x in range(2,int(num**0.5)+1) if num%x == 0]\n    check_divisors = lambda num: divisors(num) == sorted(divisors(num))\n    return [x for x in numbers if check_divisors(x)]\n",
        "num_ids": 96
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(i%int(digit)==0 for i in str(x)) for x in range(startnum, endnum+1))\n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum,endnum+1) if all(x%y==0 for y in map(int,str(x))) ]\n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum + 1) if all([i % int(j) == 0 for j in str(i)])]\n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for number in range(startnum, endnum+1):\n        if all([number % int(digit) == 0 for digit in str(number)]):\n            result.append(number)\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum):\n        for n in str(i):\n            if int(n)!= 0 and i % int(n)!= 0:\n                break\n        else:\n            print(i)\n",
        "num_ids": 56
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2)*(a/360)\n",
        "num_ids": 30
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    s=2*math.pi*r*a\n    if s>360:\n        return None\n    else:\n        return s\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle. The function should take the radius as its input. Function should return None if the radius is not positive.\n    '''\n    a=math.pi*r*r\n    if a>0:\n        return a\n    else:\n        return None\n    \ndef area_fun(r,a):\n    '''\n    Write a function that finds the area of a shape when the radius and the angle are given. The function should return None if the radius or the angle is not positive.\n    '''\n    s=2*math.pi*r*a\n    c=math.pi*r*r\n    if r>0 and a>0:\n        return s\n    elif r==0 or a==0:\n        return None\n    else:\n        return None\n    \ndef circle_area_v2(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    a=math.pi*r*r\n    if a>0:\n        return a\n    else:\n        return None\n    \ndef circle_area_v3(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    if r>0:\n        return math.pi*r*r\n    else:\n        return None\n    \ndef circle_area_v4(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    if r>0:\n        return math.pi*r**2\n    else:\n        return None\n    \ndef circle_area_v5(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    a=math.pi*r*r\n    if a>0:\n        return a\n    else:\n        return None\n    \ndef circle_area_v6(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    if r>0:\n        return math.pi*r**2\n    else:\n        return None\n    \ndef circle_area_v7(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v8(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    if r>0:\n        return math.pi*r**2\n    else:\n        return None\n    \ndef circle_area_v9(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v10(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v11(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v12(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    if r>0:\n        return math.pi*r**2\n    else:\n        return None\n    \ndef circle_area_v13(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    if r>0:\n        return math.pi*r**2\n    else:\n        return None\n    \ndef circle_area_v14(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v15(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    if r>0:\n        return math.pi*r**2\n    else:\n        return None\n    \ndef circle_area_v16(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v17(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v18(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v19(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v20(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v21(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v22(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v23(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v24(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v25(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive.\n    '''\n    return math.pi*r**2 if r>0 else None\n    \ndef circle_area_v26(r)",
        "num_ids": 30
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360\n",
        "num_ids": 32
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return a*math.pi*r**2/360\n    \ndef test_sector_area():\n    assert sector_area(2,180)==12.566368\n    assert sector_area(2,90)==4.1887902047863905\n    assert sector_area(1,360)==None\n    assert sector_area(1,400)==None\n    assert sector_area(1.5,200)==None\n    \ntest_sector_area()\nprint(\"Sector area test passed\")\n",
        "num_ids": 134
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #return None if the angle is larger than 360 degrees\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r ** 2) * (a/360)\nprint(sector_area(2,2))\nprint(sector_area(2,1))\n",
        "num_ids": 70
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = a%360\n    if a<=360:\n        return a*r*r\n    else:\n        return None\n    pass\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points (x1, y1) and (x2, y2).\n    '''\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\n    pass\ndef slope(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the slope of a line. The function will return the slope of the line between the given two points.\n    '''\n    return (y2-y1)/(x2-x1)\n    pass\ndef y_intercept(x1,y1,slope):\n    '''\n    Write a function to calculate the y-intercept of a line. The function will return the y-intercept of the line when the slope and the x-intercept are input.\n    '''\n    return y1-slope*x1\n    pass\ndef is_divisible(n,m):\n    '''\n    Write a function to check if the input number is divisible by the second number.\n    '''\n    return n%m==0\n    pass\ndef find_min(numbers):\n    '''\n    Write a function to find the minimum number in the input list. If the input list is empty, the function should return None.\n    '''\n    if len(numbers)==0:\n        return None\n    else:\n        minimum=numbers[0]\n        for i in numbers:\n            if i<minimum:\n                minimum=i\n        return minimum\n    pass\ndef get_powerset(s):\n    '''\n    Write a function to find all the subsets of the input set. The function should return a list of lists where each list represents a subset.\n    '''\n    if len(s)==0:\n        return [[]]\n    else:\n        subsets=[]\n        for i in s:\n            subsets.append([i])\n        for i in s:\n            for j in get_powerset(s-{i}):\n                subsets.append([i]+j)\n    return subsets\n    pass\ndef is_subset(s1,s2):\n    '''\n    Write a function to check if the input set s1 is a subset of s2. The function should return True if s1 is a subset of s2 and False otherwise.\n    '''\n    for i in s1:\n        if i not in s2:\n            return False\n    return True\n    pass\ndef is_superset(s1,s2):\n    '''\n    Write a function to check if the input set s1 is a superset of s2. The function should return True if s1 is a superset of s2 and False otherwise.\n    '''\n    for i in s2:\n        if i not in s1:\n            return False\n    return True\n    pass\ndef intersect(s1,s2):\n    '''\n    Write a function to find the intersection of two sets. The function should return a set that contains items that are members of both sets.\n    '''\n    return s1.intersection(s2)\n    pass\ndef union(s1,s2):\n    '''\n    Write a function to find the union of two sets. The function should return a set that contains items that are members of either sets.\n    '''\n    return s1.union(s2)\n    pass\ndef set_difference(s1,s2):\n    '''\n    Write a function to find the set difference of two sets. The function should return a set that contains the difference between the two sets.\n    '''\n    return s1.difference(s2)\n    pass\ndef set_symmetric_difference(s1,s2):\n    '''\n    Write a function to find the symmetric difference of two sets. The function should return a set that contains items that are not common to both sets.\n    '''\n    return s1.symmetric_difference(s2)\n    pass\ndef dot_product(v1,v2):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    sum=0\n    for i in range(len(v1)):\n        sum+=v1[i]*v2[i]\n    return sum\n    pass\ndef cross_product(v1,v2):\n    '''\n    Write a function to compute the cross product of two vectors.\n    '''\n    sum=v1[1]*v2[2]-v1[2]*v2[1]\n    return sum\n    pass\ndef triangle_area(v1,v2,v3):\n    '''\n    Write a function to compute the area of a triangle. The function should take three points that represent the three vertices of the triangle. The function should return None if the input points do not represent a triangle.\n    '''\n    side1=distance(v1[0],v1[1],v2[0],v2[1])\n    side2=distance(v2[0],v2[1],v3[0],v3[1])\n    side3=distance(v3[0],v3[1],v1[0],v1[1])\n    p=(side1+side2+side3)/2\n    return math.sqrt(p*(p-side1)*(p-side2)*(p-side3))\n    pass\ndef check_orthogonality(v1,v2):\n    '''\n    Write a function to check if two vectors are orthogonal. The function should return True if the vectors are orthogonal and False otherwise.\n    '''\n    return cross_product(v1,v2)==0\n    pass\ndef get_determinant(m):\n    '''\n    Write a function to compute the determinant of a matrix.\n    '''\n    if len(m)==2:\n        return m[0][0]*m[1][1]-m[0][1]*m[1][0]\n    else:\n        sum=0\n        for i in range(len(m)):\n            sum+=m[0][i]*(get_determinant(minor(m,0,i)))*((-1)**(0+i))\n        return sum\n    pass\ndef get_inverse(m):\n    '''\n    Write a function to compute the inverse of a matrix.\n    '''\n    d=get_determinant(m)\n    if d==0:\n        return None\n    inv=[]\n    for i in range(len(m)):\n        temp=[]\n        for j in range(len(m)):\n            temp.append(get_determinant(minor(m,j,i))*((-1)**(i+j)))\n        inv.append(temp)\n    inv=transpose(inv)\n    for i in range(len(inv)):\n        for j in range(len(inv)):\n            inv[i][j]=inv[i][j]/d\n    return inv\n    pass\ndef is_invertible(m):\n    '''\n    Write a function to check if a matrix is invertible. The function should return True if the matrix is invertible and False otherwise.\n    '''\n    return get_determinant(m)!=0\n    pass\ndef minor(m,i,j):\n    '''\n    Write a function to get the minor matrix of a matrix.\n    '''\n    return [row[:j] + row[j+1:] for row in (m[:i]+m[i+1:])]\n    pass\ndef transpose(m):\n    '''\n    Write a function to compute the transpose of a matrix.\n    '''\n    t=[]\n    for i in range(len(m)):\n        temp=[]\n        for j in range(len(m)):\n            temp.append(m[j][i])\n        t.append(temp)\n    return t\n    pass\ndef gaussian_elimination(m,b):\n    '''\n    Write a function to solve a system of linear equations. The function should return the solution of the system. The function should return None if the system is inconsistent.\n    '''\n    if len",
        "num_ids": 5
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    else:\n        print(r*r*math.acos(1-a/360))\n",
        "num_ids": 37
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return r**2 * math.sin(math.radians(a))\n",
        "num_ids": 31
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return r*r*math.pi/360\n",
        "num_ids": 25
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # TODO: Write code here\n    if a>360:\n        return None\n    else:\n        return (3.14*r*r*a/360)\n    pass\ndef get_greatest(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns the greatest number in the list. If the list is empty, have the function return False.\n    '''\n    # TODO: Write code here\n    if len(number_list)==0:\n        return False\n    else:\n        return max(number_list)\n    pass\ndef get_smallest(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns the smallest number in the list. If the list is empty, have the function return False.\n    '''\n    # TODO: Write code here\n    if len(number_list)==0:\n        return False\n    else:\n        return min(number_list)\n    pass\ndef is_list_empty(list):\n    '''\n    Write a function that accepts a list and returns True if the list is empty and False if it is not.\n    '''\n    # TODO: Write code here\n    if len(list)==0:\n        return True\n    else:\n        return False\n    pass\ndef smallest_numbers(list_of_numbers):\n    '''\n    Write a function that accepts a list of numbers and returns the smallest number in the list. If the list is empty, have the function return False.\n    '''\n    # TODO: Write code here\n    if len(list_of_numbers)==0:\n        return False\n    else:\n        return min(list_of_numbers)\n    pass\ndef largest_numbers(list_of_numbers):\n    '''\n    Write a function that accepts a list of numbers and returns the largest number in the list. If the list is empty, have the function return False.\n    '''\n    # TODO: Write code here\n    if len(list_of_numbers)==0:\n        return False\n    else:\n        return max(list_of_numbers)\n    pass\ndef is_number_list_increasing(list_of_numbers):\n    '''\n    Write a function that accepts a list of numbers and returns True if the numbers are increasing and False if they are not.\n    '''\n    # TODO: Write code here\n    if len(list_of_numbers)==0:\n        return False\n    else:\n        if list_of_numbers[1]>list_of_numbers[0]:\n            return True\n        else:\n            return False\n    pass\ndef is_number_list_decreasing(list_of_numbers):\n    '''\n    Write a function that accepts a list of numbers and returns True if the numbers are decreasing and False if they are not.\n    '''\n    # TODO: Write code here\n    if len(list_of_numbers)==0:\n        return False\n    else:\n        if list_of_numbers[1]<list_of_numbers[0]:\n            return True\n        else:\n            return False\n    pass\ndef average_numbers(list_of_numbers):\n    '''\n    Write a function that accepts a list of numbers and returns the average of the list.\n    '''\n    # TODO: Write code here\n    total=0\n    for i in list_of_numbers:\n        total+=i\n    return total/len(list_of_numbers)\n    pass\ndef list_of_multiplied_numbers(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns the product of the numbers in the list.\n    '''\n    # TODO: Write code here\n    product=1\n    for i in number_list:\n        product*=i\n    return product\n    pass\ndef list_of_doubled_numbers(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns the doubled numbers in a new list.\n    '''\n    # TODO: Write code here\n    doubled_numbers=[]\n    for i in number_list:\n        doubled_numbers.append(i*2)\n    return doubled_numbers\n    pass\ndef list_of_cubed_numbers(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns the cubed numbers in a new list.\n    '''\n    # TODO: Write code here\n    cubed_numbers=[]\n    for i in number_list:\n        cubed_numbers.append(i**3)\n    return cubed_numbers\n    pass\ndef find_smallest_number_index(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns the index of the smallest number in the list. If the list is empty, have the function return None.\n    '''\n    # TODO: Write code here\n    if len(number_list)==0:\n        return None\n    else:\n        return number_list.index(min(number_list))\n    pass\ndef find_greatest_number_index(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns the index of the greatest number in the list. If the list is empty, have the function return None.\n    '''\n    # TODO: Write code here\n    if len(number_list)==0:\n        return None\n    else:\n        return number_list.index(max(number_list))\n    pass\ndef find_greatest_number_index_three(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns the indexes of the three greatest numbers in the list.\n    '''\n    # TODO: Write code here\n    if len(number_list)==0:\n        return None\n    else:\n        number_list.sort()\n        return number_list[-3:].index(max(number_list[-3:]))\n    pass\ndef is_factor_of_any_number(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns True if any number in the list is a factor of any other number in the list. If the list is empty, have the function return False.\n    '''\n    # TODO: Write code here\n    if len(number_list)==0:\n        return False\n    else:\n        for i in number_list:\n            for j in number_list:\n                if i%j==0:\n                    return True\n                else:\n                    continue\n        return False\n    pass\ndef sum_of_positive_numbers(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of all positive numbers in the list. If the list is empty, have the function return 0.\n    '''\n    # TODO: Write code here\n    if len(number_list)==0:\n        return 0\n    else:\n        total=0\n        for i in number_list:\n            if i>0:\n                total+=i\n            else:\n                continue\n        return total\n    pass\ndef list_of_prime_numbers(number_list):\n    '''\n    Write a function that accepts a list of numbers and returns a new list with only the prime numbers in the list. If the list is empty, return an empty list.\n    '''\n    # TODO: Write code here\n    if len(number_list)==0:\n        return []\n    else:\n        prime_numbers=[]\n        for i in number_list:\n            if i>1:\n                for j in range(2,i):\n                    if i%j==0:\n                        break\n                else:\n                    prime_numbers.append(i)\n            else:\n                continue\n        return prime_numbers\n    pass\ndef divisor_count(number):\n    '''\n    Write a function that accepts a number and returns a list with the number of divisors the number has.\n    '''\n    # TODO: Write code here\n    divisor_count=[]\n    for i in range(1,number+1):\n        if number%i==0:\n            divisor_count.append(i)\n        else:\n            continue\n    return divisor_count\n    pass\ndef list_of",
        "num_ids": 76
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n    LCS = [[[0 for k in range(l+1)] for j in range(m+1)] for i in range(n+1)] \n    # for i in range(n+1): \n    #     for j in range(m+1): \n    #         for k in range(l+1): \n    #             LCS[i][j][k] = 0\n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            for k in range(1, l+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else: \n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1]) \n    print(LCS)\n    # return LCS[n][m][l] \n    return LCS\n",
        "num_ids": 281
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs_helper(X, Y, Z, 0, 0, 0, {})\n",
        "num_ids": 25
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the first string \n    m = len(X) \n    # find the length of the second string \n    n = len(Y) \n    # find the length of the third string \n    o = len(Z) \n",
        "num_ids": 62
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None for i in range(l + 1)] for j in range(n + 1)] for k in range(m + 1)] \n",
        "num_ids": 64
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # create a table to store results of subproblems \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "num_ids": 43
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z)\n    L = [[[0 for k in range(l + 1)] for j in range(n + 1)] for i in range(m + 1)] \n    b = set()\n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n                if L[i][j][k] == m:\n                    b.add(\"\".join([X[i - 1], Y[j - 1], Z[k - 1]]))\n    print(L)\n    return L, list(b)\n",
        "num_ids": 301
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs_recursive(X, Y, Z, 0, 0, 0)\n",
        "num_ids": 23
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    reg = re.compile('[A-Z][a-z]*')\n    match = reg.findall(str1)\n    print(match)\n    for i in range(0,len(match)):\n        str1 = str1.replace(match[i], match[i]+' ')\n    print(str1)\n    return(str1)\n",
        "num_ids": 89
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[A-Z])[A-Z]',r' ',str1)\n",
        "num_ids": 31
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=\\w)([A-Z])',r' \\1',str1)\n",
        "num_ids": 32
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result=re.split('(\\W+)',str1)\n    result1=''\n    for i in result:\n        if i.istitle():\n            result1=result1+' '+i\n        else:\n            result1=result1+i\n    return result1\n",
        "num_ids": 68
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = str1.replace(\"\u2018\",\"'\").replace(\"\u2019\",\"'\").replace(\"\\\"\",\"'\").replace(\"\u201c\",\"'\").replace(\"\u201d\",\"'\").replace(\"\\t\",\" \")\n    str1 = str1.replace(\"\u2018\",\"'\").replace(\"\u2019\",\"'\").replace(\"\\\"\",\"'\").replace(\"\u201c\",\"'\").replace(\"\u201d\",\"'\").replace(\"\\t\",\" \")\n    words_list = str1.split()\n    regex = r\"\\b[A-Z]\\w+\\b\"\n    for i in range(len(words_list)):\n        if re.match(regex, words_list[i]):\n            words_list[i] = words_list[i].capitalize()\n    str2 = \" \".join(words_list)\n    return str2\n",
        "num_ids": 199
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def capital_words_spaces_helper(str1):\n        if len(str1) == 0:\n            return str1\n        if str1[0].isupper():\n            str1 = str1[0].lower() + str1[1:]\n        return str1[0].upper() + str1[1:]\n    return capital_words_spaces_helper(str1)\n",
        "num_ids": 95
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.capitalize()\n    return str1\n",
        "num_ids": 18
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.split()\n    str3 = []\n    for i in str2:\n        if i.isupper():\n            str3.append(\" \" + i)\n        else:\n            str3.append(i)\n    str4 = \"\".join(str3)\n    print(\"Original String: {}\\nChanged String: {}\".format(str1, str4))\n    return str4\n",
        "num_ids": 98
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split(' ')\n    new_str=''\n    for word in str1:\n        if word.istitle():\n            word=word[0].upper()+word[1:]\n        new_str+=word+' '\n    return new_str[:-1]\n",
        "num_ids": 72
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)', r' \\1', str1)\n",
        "num_ids": 30
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda nums: [int(s) if s.isdigit() else s for s in nums])\n",
        "num_ids": 38
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda s: int(s.split('_')[0]))\n",
        "num_ids": 28
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(i) if i.isdigit() else i for i in re.split('(\\d+)', x)])\n",
        "num_ids": 45
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def is_digit(string):\n        if string.isdigit():\n            return True\n        else:\n            try:\n                float(string)\n                return True\n            except ValueError:\n                return False\n    nums = []\n    for num in nums_str:\n        if is_digit(num):\n            nums.append(int(num))\n        else:\n            nums.append(num)\n    nums.sort()\n    return nums\n",
        "num_ids": 113
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        num = int(num)\n        nums.append(num)\n    print(nums)\n    nums.sort()\n    print(nums)\n",
        "num_ids": 56
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Create a dict of words from the list\n    # Of course this is only done for the purpose of the example\n    # Your solution should be efficient and without using any external libraries\n    word_dict = {word: len(word) for word in nums_str}\n",
        "num_ids": 63
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    return sorted(nums)\n",
        "num_ids": 41
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(i) if i.isdigit() else i for i in re.split('(\\d+)', x)])\n    return nums_str\n",
        "num_ids": 51
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_strings = []\n    for num in nums_str:\n        num_strings.append(int(num))\n    num_strings.sort()\n    return num_strings\n",
        "num_ids": 45
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: int(x.replace('-','')))\n    return nums_str\n",
        "num_ids": 33
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n",
        "num_ids": 19
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n",
        "num_ids": 18
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print(test_list + test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == 1:\n        return True if arr[0] >= arr[1] else False\n    if arr[i] >= arr[(i-1)//2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "num_ids": 110
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return\n    left = 2 * i + 1\n    right = 2 * i + 2\n    # if left child exists and value of left child is greater than the root, return False\n    if left < n and arr[left] < arr[i]:\n        return False\n    # if right child exists and value of right child is greater than the root, return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    # if it is not violating the heap property return True\n    return True\n",
        "num_ids": 135
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n",
        "num_ids": 130
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    if arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2]:\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n    else:\n        return False\n",
        "num_ids": 99
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #base case - array is empty\n    if i >= len(arr):\n        return True\n    # if there is only one element, check whether it is a min heap or not\n    if len(arr) == 1:\n        return arr[0] >= arr[1]\n    # if the root is greater than the left child, return False\n    if arr[0] > arr[i]:\n        return False\n    # check left child\n    return check_min_heap_helper(arr, i*2 + 1)\n",
        "num_ids": 123
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for j in range(i):\n        if arr[j] > arr[(j + 1) // 2]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # TODO: Check if it is a valid min heap.\n    pass\n",
        "num_ids": 20
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    n = len(arr)\n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a = 0\n    b = 1\n    c = 0\n    for i in range(n-1):\n        a = b\n        b = c\n        c = a + b\n    return c\n",
        "num_ids": 71
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 2:\n        return n\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2)) % n\n",
        "num_ids": 47
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n<=0:\n        return 0\n    else:\n        return (jacobsthal_num(n-1)+jacobsthal_num(n-2))\n",
        "num_ids": 44
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    return (jacobsthal_num(n - 1) + jacobsthal_num(n - 2))\n",
        "num_ids": 55
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = [0, 1, 1]\n    if n < 3:\n        return a[n]\n    \n    for i in range(3, n+1):\n        a.append(a[i-1] + a[i-2])\n    \n    return a[n]\n",
        "num_ids": 70
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_num_list = []\n    for i in range(1,n+1):\n        j = i*(3*i-1)/2\n        jacobsthal_num_list.append(j)\n    return(jacobsthal_num_list)\n",
        "num_ids": 69
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n<=1:\n        return 1\n    elif n%2==0:\n        return (jacobsthal_num(n/2)**2)\n    else:\n        return (jacobsthal_num((n+1)/2)**2)\n",
        "num_ids": 66
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j, m = 0, 1\n    while n > j: \n        j += m\n        m += j\n    return j\n",
        "num_ids": 33
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 52
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sorted_list = sorted(test_list, key=lambda x: x[1])\n    # for i in range(K):\n    #     print(sorted_list[i][0])\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n    # return sorted_list[0]\n",
        "num_ids": 91
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq\n    l = []\n    for i in test_list:\n        heapq.heappush(l, (i[0], i[1]))\n        if len(l) > K:\n            heapq.heappop(l)\n    l.sort(key=lambda x: x[0])\n    return [x[1] for x in l]\n",
        "num_ids": 93
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_tuples = []\n    for t in test_list:\n        if len(min_k_tuples) < K:\n            min_k_tuples.append(t)\n        else:\n            # sort on the basis of tuple value \n            min_k_tuples = sorted(min_k_tuples, key = lambda x: x[2])\n            if t[2] < min_k_tuples[-1][2]:\n                min_k_tuples[-1] = t\n    \n    #return min_k_tuples\n    print(min_k_tuples)\n",
        "num_ids": 148
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list)<K:\n        print('Too many records to find')\n        return\n    else:\n        return min(test_list,key=lambda t:t[1])[0]\n",
        "num_ids": 52
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    list_of_tuples = test_list\n    # Store the minimum value to be searched\n    min_value = min(list_of_tuples, key=lambda x: x[1])[1]\n    min_records = []\n    for record in list_of_tuples:\n        if record[1] == min_value:\n            min_records.append(record)\n    if len(min_records) <= K:\n        return min_records\n    else:\n        return sorted(min_records, key=lambda x: x[0])[:K]\n",
        "num_ids": 141
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize the minimum number of records \n    # to the number of records in the \n    # list \n    minimum = len(test_list)\n    # initialize the minimum_list to an \n    # empty list \n    minimum_list = list()\n    # initialize a tuple list for storing \n    # the sorted data \n    sorted_list = list()\n    # sort the test list with respect to the \n    # second element of sublist in each list \n    sorted_list = sorted(test_list, key = lambda x: x[1]) \n    # traverse the sorted list and store \n    # the records in minimum_list \n    for i in range(0, len(sorted_list)): \n        if(i < K): \n            minimum_list.append(sorted_list[i]) \n        else: \n            break\n    # return the minimum_list \n    return minimum_list\n",
        "num_ids": 222
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    records = [ ( 1, 5, 15), ( 2, 7, 30), ( 3, 9, 45), ( 4, 2, 25) ]\n    k = 3\n    result = min_k(records, k)\n    if result == None:\n        print \"None\"\n    else:\n        print result\n",
        "num_ids": 76
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    from collections import defaultdict\n    d = defaultdict(list)\n    for item in test_list:\n        d[item[1]].append(item)\n    arr = list(d.items())\n    arr.sort(key=lambda x: x[0])\n    return arr[:K]\n",
        "num_ids": 73
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n",
        "num_ids": 34
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    def merge_lists(l1, l2, l3):\n        return list(set(l1).intersection(set(l2), set(l3)))\n    \n    def merge_lists_index(l1, l2, l3):\n        return [i for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n    \n    return merge_lists_index(l1, l2, l3)\n    \n    \n    \n    \ndef make_dict(l1, l2):\n    '''\n    Write a function that takes two lists as arguments and returns a dictionary that maps the first list to the second. \n    The key is the element in the first list, and the corresponding value is the element in the second list.\n    '''\n    return dict(zip(l1,l2))\n",
        "num_ids": 15
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(0,len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    ans = []\n    for i, j, k in zip(l1, l2, l3):\n        if i == j == k:\n            ans.append(i)\n    \n    return ans\n",
        "num_ids": 52
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    my_list = []\n    for index, num in enumerate(l1):\n        if num == l2[index] and num == l3[index]:\n            my_list.append(num)\n    return my_list\n",
        "num_ids": 56
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = set(numbers)\n    if len(numbers) == 1:\n        return None\n    else:\n        min_value = min(numbers)\n        numbers.remove(min_value)\n        return min(numbers)\n",
        "num_ids": 61
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]\n",
        "num_ids": 19
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min_num = numbers[0]\n    sec_min_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            sec_min_num = min_num\n            min_num = num\n        elif num < sec_min_num:\n            sec_min_num = num\n    return sec_min_num\n",
        "num_ids": 87
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_list = sorted(numbers)\n    print('Sorted list = ', sorted_list)\n    return sorted_list[1]\n",
        "num_ids": 36
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 18
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    print(numbers[1])\n",
        "num_ids": 18
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) > 2:\n        pass\n    elif len(numbers) == 1:\n        print(\"Can't find the second smallest number if there's only one in the list.\")\n        return None\n    else:\n        pass\n    current = numbers[0]\n    print(current)\n    while current in numbers:\n        numbers.remove(current)\n        #print(numbers)\n        if len(numbers) == 1:\n            break\n        current = numbers[0]\n        print(current)\n    if len(numbers) < 2:\n        print(\"There's only one number left in the list.\")\n    else:\n        print(\"The second smallest number is\", numbers[0])\n        \n",
        "num_ids": 170
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(list(set(numbers)))[1]\n    \ndef sort_list_by_length(words):\n    '''\n    Given a list of words, sort them in ascending order by length.\n    '''\n    return sorted(words, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"ab+\"\n    if re.search(pattern, text):\n        return \"Match Found\"\n    else:\n        return \"No Match Found\"\n",
        "num_ids": 40
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_one_or_more(text):\n    '''\n    Write a Python program to check if a string contains any special character.\n    '''\n    pattern = re.compile(r'[@_!#$%^&*()<>?/\\|}{~:]')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_start(text):\n    '''\n    Write a Python program to check if a string starts with 'hello'.\n    '''\n    pattern = re.compile(r'hello')\n    if pattern.match(text):\n        return True\n    return False\ndef text_match_end(text):\n    '''\n    Write a Python program to check if a string ends with 'world'.\n    '''\n    pattern = re.compile(r'world')\n    if pattern.match(text):\n        return True\n    return False\ndef text_match_word(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_word_condition(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_all_condition(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_either_condition(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_either_condition2(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]')\n    return pattern.search(text)\ndef text_match_character(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'[a-z]')\n    return pattern.search(text)\ndef text_match_character_or_number(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]')\n    return pattern.search(text)\ndef text_match_character_or_number_or_period(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|.')\n    return pattern.search(text)\ndef text_match_word_or_character(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|\\.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol_or_space(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|\\.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol_or_space_or_comma(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|\\.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol_or_space_or_comma_or_dash(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|\\.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol_or_space_or_comma_or_dash_or_equal(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|\\.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol_or_space_or_comma_or_dash_or_equal_or_question(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|\\.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol_or_space_or_comma_or_dash_or_equal_or_question_or_exclamation(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|\\.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol_or_space_or_comma_or_dash_or_equal_or_question_or_exclamation_or_hash(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|\\.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol_or_space_or_comma_or_dash_or_equal_or_question_or_exclamation_or_hash_or_dollar(text):\n    '''\n    Write a Python program to check if a string contains any digits.\n    '''\n    pattern = re.compile(r'\\d+|[a-z]|\\d|\\.')\n    return pattern.search(text)\ndef text_match_word_or_character_or_number_or_period_or_symbol_or_space_or_comma_or_dash_or_equal_or_questio",
        "num_ids": 83
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile(r'\\ba.+b\\b')\n    if regex.search(text):\n        return \"Match Found\"\n    else:\n        return \"No Match Found\"\n",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r\"^a[bB]*$\", text)\n",
        "num_ids": 22
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a(b*)a\"\n    result = re.search(pattern, text)\n    return result!= None\n",
        "num_ids": 33
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab*\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab+\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab+\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_exact(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab{2}\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_exact(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab{2}\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_at_the_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\".*ab\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_at_the_beginning(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab.*\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_beginning(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"^.*\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_ending(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab.*$\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_one_of_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab[rb]*\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab[a-z]*\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab[a-z]?\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_0_or_1_occurence(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab?\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_multiple_occurence(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab{2,4}?\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_between_two_symbols(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab\\w\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_exact(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab\\d\", text)\n    if matches:\n        print(\"Match Found: \", matches.group())\n    else:\n        print(\"Match Not Found\")\n        \ndef text_match_exact(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.search(r\"ab\\d\", text)\n    if matches:\n        print(\"Match Foun",
        "num_ids": 30
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.match(r\"a(b*)\", text):\n        print(\"yes\")\n    else:\n        print(\"no\")\n",
        "num_ids": 34
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"ab*\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return(\"Not matched!\")\n",
        "num_ids": 41
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'\\ba\\b+')\n    # if pattern.search(text):\n    #     print(\"Match\")\n    # else:\n    #     print(\"Not Match\")\n",
        "num_ids": 52
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text:\n        return re.search(\"a.+b\", text)\n    else:\n        return None\n",
        "num_ids": 29
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    s = []\n    for i in test_list:\n        s.append(i[::-1])\n    print(list(zip(test_list,s)))\n    count = 0\n    for i in s:\n        if i in test_list:\n            count+=1\n    print(count)\n",
        "num_ids": 74
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                counter += 1\n    return counter\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    print(\"Number of reverse pairs: {}\".format(count))\n",
        "num_ids": 81
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_reverse_pairs = 0\n    for element in test_list:\n        total_reverse_pairs += count_reverse_pairs_recursive(element)\n    return total_reverse_pairs\n",
        "num_ids": 51
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Counter() to count the number of occurrences of each element in the given list.\n    counter = Counter(test_list)\n",
        "num_ids": 31
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                result += 1\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_string_list = []\n    for string in test_list:\n        rev_string = string[::-1]\n        rev_string_list.append(rev_string)\n    count_pairs = 0\n    for item in rev_string_list:\n        for index in range(len(rev_string_list)):\n            if item == rev_string_list[index]:\n                count_pairs += 1\n                break\n    return count_pairs\n",
        "num_ids": 112
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    print(\"\\n\")\n    # Initilization\n    pair_dict = {}\n    test_list_length = len(test_list)\n    for x in range(test_list_length):\n        # print(x)\n        for y in range(test_list_length):\n            # print(y)\n            if x!= y:\n                # print(test_list[x] + test_list[y])\n                reverse_string = test_list[x] + test_list[y]\n                # print(reverse_string)\n                if reverse_string not in pair_dict:\n                    pair_dict[reverse_string] = 1\n                else:\n                    pair_dict[reverse_string] += 1\n    print(pair_dict)\n    print(\"\\n\")\n    return pair_dict\n",
        "num_ids": 191
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if not test_list:\n        return 0\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for list_ in list1:\n        tuple_ = tuple(list_)\n        if tuple_ in dic:\n            dic[tuple_] += 1\n        else:\n            dic[tuple_] = 1\n    return dic\n",
        "num_ids": 68
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Expected output:\n    # {'A': 2, 'B': 2, 'C': 2}\n",
        "num_ids": 28
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = [1,2,3,4,2,2,3,4,5,4,5,6,7,8,8,9,4,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4",
        "num_ids": 1986
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = [1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8]\n    list1 = list(set(list1))\n    mydict = {}\n    for i in list1:\n        mydict[i] = list1.count(i)\n    print(mydict)\n",
        "num_ids": 104
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == list:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res = {}\n    for i in list1:\n        if tuple(i) in res:\n            res[tuple(i)] += 1\n        else:\n            res[tuple(i)] = 1\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return [tuple(lst) for lst in list1]\n",
        "num_ids": 19
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return({tuple(l):list1.count(l) for l in list1})\n    \n    \n    \ndef count_sublists(list1, list2):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for i in list1:\n        if type(i) == type([]):\n            tup = tuple(i)\n            if tup in dictionary.keys():\n                dictionary[tup] += 1\n            else:\n                dictionary[tup] = 1\n    for i in list2:\n        if type(i) == type([]):\n            tup = tuple(i)\n            if tup in dictionary.keys():\n                dictionary[tup] += 1\n            else:\n                dictionary[tup] = 1\n    return dictionary\n    \n    \ndef unique_sublists_v2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return({tuple(l):list1.count(l) for l in set(list1)})\n    \n    \ndef count_sublists_v2(list1, list2):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for i in list1:\n        if type(i) == type([]):\n            tup = tuple(i)\n            if tup in dictionary.keys():\n                dictionary[tup] += 1\n            else:\n                dictionary[tup] = 1\n    for i in list2:\n        if type(i) == type([]):\n            tup = tuple(i)\n            if tup in dictionary.keys():\n                dictionary[tup] += 1\n            else:\n                dictionary[tup] = 1\n    return dictionary\n    \n    \nprint(unique_sublists([[1, [1, 2]], [1, 2], [1, 2], [3, 4], [1]]))\nprint(unique_sublists_v2([[1, [1, 2]], [1, 2], [1, 2], [3, 4], [1]]))\nprint(count_sublists([[1, [1, 2]], [1, 2], [1, 2], [3, 4], [1]], [[1, 2], [1, 2]]))\nprint(count_sublists_v2([[1, [1, 2]], [1, 2], [1, 2], [3, 4], [1]], [[1, 2], [1, 2]]))\n",
        "num_ids": 314
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = 0\n    unique_list = []\n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n        else:\n            count += 1\n    return dict(zip(unique_list, [count]*len(unique_list)))\n    \ndef no_dublicates(list1):\n    '''\n    Write a function to remove duplicate values from a list.\n    '''\n    list1.sort()\n    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n    \ndef list_of_lists(list1):\n    '''\n    Write a function that compresses the list, taking out the duplicates.\n    '''\n    no_dublicates(list1)\n    if list1 == []:\n        return []\n    elif len(list1) == 1:\n        return list1\n    else:\n        list1.sort()\n        new_list = []\n        for i in list1:\n            if i not in new_list:\n                new_list.append(i)\n        return new_list\n    \ndef replace_list_elements(list1, elem1, elem2):\n    '''\n    Write a function to replace all the elements of a list with a single element.\n    '''\n    new_list = []\n    for i in list1:\n        if i!= elem1:\n            new_list.append(i)\n        else:\n            new_list.append(elem2)\n    return new_list\n",
        "num_ids": 59
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result_dict = {}\n    for each in list1:\n        if type(each) is list:\n            each = tuple(each)\n            result_dict[each] = result_dict.get(each, 0) + 1\n    return result_dict\n",
        "num_ids": 62
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    import decimal\n    return bool(re.match(r'^(\\-?\\d+\\.\\d{1,2})$', num))\n",
        "num_ids": 40
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return False\n",
        "num_ids": 6
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimals = \"0123456789.\"\n    for char in num:\n        if char not in decimals:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Your code here\n    if num[0] == '-' and len(num) == 3 or num[0] == '-' and len(num) == 2:\n        for i in num[1:]:\n            if not (i >= '0' and i <= '9'):\n                return False\n        return True\n    else:\n        for i in num:\n            if not (i >= '0' and i <= '9'):\n                return False\n        return True\n",
        "num_ids": 112
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True\n",
        "num_ids": 6
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.lstrip('0')\n    num = num.rstrip('0')\n    num = num.rstrip('.')\n    num = num.replace('.', '')\n    if not num:\n        return False\n    if int(num)!= float(num):\n        return False\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if '.' in num:\n            if len(num) == 1:\n                return False\n            num = num.split('.')\n            if len(num[0]) == 0 and len(num[1]) == 0:\n                return False\n            elif num[0] == '0':\n                return False\n            return True\n        return False\n    except TypeError:\n        print(\"Incorrect input, provide a string type\")\n",
        "num_ids": 106
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.strip()\n    if num.endswith('.'):\n        num = num[:-1]\n    return num.replace('.', '').isdigit()\n",
        "num_ids": 45
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    def check_decimal(num):\n        for i in range(1, len(num)):\n            if num[i]!= '0':\n                return False\n        return True\n    if len(num) <= 1:\n        return False\n    elif num[0]!= '0' or num[0] == '.':\n        return False\n    else:\n        return check_decimal(num[1:])\n",
        "num_ids": 103
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1\n",
        "num_ids": 13
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    res = 0\n    arr = sorted(arr)\n    for i in range(0, len(arr)-1):\n        if arr[i] == arr[i+1]:\n            res = res + 1\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    # print(arr)\n    if len(arr) == 1:\n        return True\n    elif arr[0]!= arr[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # first solution\n    # return len(set(arr)) == 1\n    \n    # second solution\n    unique = False\n    for item in arr:\n        if arr.count(item) == 1:\n            unique = True\n            break\n    return unique\n",
        "num_ids": 62
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr=list(set(arr))\n    if len(arr)==1:\n        return arr[0]\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    #Get the element count in the list\n    n=len(arr)\n    \n    #Create a set from the list\n    set_arr=set(arr)\n    \n    #Get the count of the unique element in the list\n    count_of_unique_element=len(set_arr)\n    \n    #Check whether the count is 1 or not\n    if(count_of_unique_element==1):\n        return True\n    else:\n        return False\n    \n    ",
        "num_ids": 116
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in range(1, 3):\n        return False\n    elif monthnum3 in range(4, 6):\n        return True\n    elif monthnum3 in range(7, 9):\n        return False\n    elif monthnum3 in range(10, 12):\n        return True\n",
        "num_ids": 87
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12):\n        return (30)\n    elif (monthnum3 == 2):\n        return(28)\n    else:\n        return(31)\n",
        "num_ids": 57
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return (monthnum3 in [1, 3, 5, 7, 8, 10, 12])\n",
        "num_ids": 25
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"Yes, given month has 30 days.\")\n    else:\n        print(\"No, given month has 31 days.\")\n",
        "num_ids": 75
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%2==0:\n        print(\"The given month number contains 30 days.\")\n    else:\n        print(\"The given month number contains 31 days.\")\n    print(\"\\n\")\n",
        "num_ids": 48
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    if monthnum3 in range(1,13):\n        print(month_days[monthnum3-1])\n    else:\n        print('the given month number is out of range')\ncheck_monthnumber_number(3)\ncheck_monthnumber_number(10)\ncheck_monthnumber_number(12)\ncheck_monthnumber_number(13)\n",
        "num_ids": 117
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return \"29\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"30\"\n    else:\n        return \"31\"\n",
        "num_ids": 61
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in month_30_days:\n        return True\n    else:\n        return False\n    \ndef check_monthnumber_string(monthnum4):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum4 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_list(monthnum5):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum5 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_tuple(monthnum6):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum6 in month_30_days:\n        return True\n    else:\n        return False\n    \ndef check_monthnumber_dictionary(monthnum7):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum7 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_range(monthnum8):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum8 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_set(monthnum9):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum9 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_frozenset(monthnum10):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum10 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_range_tuple(monthnum11):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum11 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_range_list(monthnum12):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum12 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_range_string(monthnum13):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum13 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_range_dictionary(monthnum14):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum14 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_range_set(monthnum15):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum15 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_range_frozenset(monthnum16):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum16 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_set_tuple(monthnum17):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum17 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_set_list(monthnum18):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum18 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_set_string(monthnum19):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum19 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_set_dictionary(monthnum20):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum20 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_set_range(monthnum21):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum21 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_set_frozenset(monthnum22):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum22 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_frozenset_tuple(monthnum23):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum23 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_frozenset_list(monthnum24):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum24 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_frozenset_string(monthnum25):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum25 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_frozenset_dictionary(monthnum26):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum26 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_frozenset_range(monthnum27):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum27 in month_30_days:\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_frozenset_set(monthnum28):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum28 in month_30_days:\n        return True\n    else:\n        return False\n        \nprin",
        "num_ids": 31
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(f\"The number of days in {monthnum3} month is 30\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(f\"The number of days in {monthnum3} month is 31\")\n    else:\n        print(f\"The number of days in {monthnum3} month is 28\")\n",
        "num_ids": 139
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 30\n    elif monthnum3 == 2:\n        return 28\n    else:\n        return -1\n",
        "num_ids": 74
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    print(f'Min diff is {arr[n-1] - arr[0]}')\n",
        "num_ids": 24
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array \n    arr.sort() \n    # initialize difference as infinite \n    diff = 10**20\n    # traverse the array for all pairs \n    for i in range(0, n-1): \n        # Find the difference between current pair \n        # and previous pair. \n        diff = min(diff, arr[i+1]-arr[i]) \n    return diff \n",
        "num_ids": 97
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = []\n    for i in range(0,n-1): \n        for j in range(i+1,n): \n            diff.append(arr[j] - arr[i]) \n    return min(diff)\n",
        "num_ids": 58
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sorting the array would be trivial in this case\n    # but not in general\n",
        "num_ids": 21
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort()\n",
        "num_ids": 14
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # If array is sorted, then every pair will be (arr[1] - arr[0]), (arr[2] - arr[1]) and so on.\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    return min_diff\n",
        "num_ids": 113
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1] - arr[0]\n    for i in range(0, n):\n        for j in range(i + 1, n): \n            if (arr[j] - arr[i]) < min_diff: \n                min_diff = arr[j] - arr[i] \n    return min_diff \n",
        "num_ids": 84
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr[i] - arr[j] for i in range(n) for j in range(i+1, n))\n",
        "num_ids": 34
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort() \n      \n    # initialize difference as infinite \n    min_diff = 10**15\n      \n    # fix the first element \n    for i in range(1, n): \n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1])) \n      \n    return min_diff \n  ",
        "num_ids": 93
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #sort the array\n    #traverse the array and find the difference between adjacent elements\n    #return the minimum difference\n    \n    arr.sort()\n    min_diff=arr[n-1]-arr[0]\n    \n    for i in range(n):\n        diff=arr[i]-arr[i+1]\n        if diff<min_diff:\n            min_diff=diff\n    \n    return min_diff\n    \n    \ndef find_max_sum(arr,n):\n    '''\n    Write a python function to find the maximum subarray sum. https://www.geeksforgeeks.org/maximum-subarray-sum/\n    '''\n    #initialize current and max sum to 0\n    #traverse the array\n    #check if the current sum is more than the max sum\n    #if yes then update the max sum\n    #return the max sum\n    \n    cur_sum=0\n    max_sum=0\n    \n    for i in range(n):\n        cur_sum=cur_sum+arr[i]\n        if cur_sum>max_sum:\n            max_sum=cur_sum\n    \n    return max_sum\n    \n    \ndef find_max_sum_subarray(arr,n):\n    '''\n    Write a python function to find the maximum subarray sum. https://www.geeksforgeeks.org/maximum-subarray-sum/\n    '''\n    #initialize current and max sum to 0\n    #traverse the array\n    #check if the current sum is more than the max sum\n    #if yes then update the max sum\n    #return the max sum\n    \n    cur_sum=0\n    max_sum=0\n    \n    for i in range(n):\n        cur_sum=cur_sum+arr[i]\n        if cur_sum>max_sum:\n            max_sum=cur_sum\n        if cur_sum<0:\n            cur_sum=0\n    \n    return max_sum\n    \n    \ndef find_min_max_diff_sum(arr,n):\n    '''\n    Write a python function to find the minimum and maximum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-maximum-difference-between-any-two-elements/\n    '''\n    #initialize min and max to be infinity\n    #traverse the array\n    #check if the current sum is less than the max sum\n    #if yes then update the min sum\n    #return the min and max\n    \n    min_diff=float('inf')\n    max_diff=float('-inf')\n    \n    for i in range(n):\n        if arr[i]<arr[i+1]:\n            diff=arr[i+1]-arr[i]\n            if diff>max_diff:\n                max_diff=diff\n            if diff<min_diff:\n                min_diff=diff\n                \n    return min_diff,max_diff\n    \n    \ndef count_bits(num):\n    '''\n    Write a python function to count the number of bits needed to store any positive integer.\n    '''\n    #count the number of bits needed to store any positive integer using the following function\n    #return the number of bits\n    \n    count=0\n    while num!=0:\n        count+=1\n        num=num//2\n    \n    return count\n    \n    \ndef count_subarrays_with_given_sum(arr,n,s):\n    '''\n    Write a python function to count the number of subarrays with the given sum. https://www.geeksforgeeks.org/count-subarray-with-given-sum/\n    '''\n    #initialize the count to zero\n    #traverse the array\n    #check if the current sum is equal to the given sum\n    #if yes then add 1 to the count\n    #return the count\n    \n    count=0\n    curr_sum=0\n    \n    for i in range(n):\n        curr_sum=curr_sum+arr[i]\n        if curr_sum==s:\n            count+=1\n    \n    return count\n    \n    \ndef count_subarrays_with_given_sum_greedy(arr,n,s):\n    '''\n    Write a python function to count the number of subarrays with the given sum. https://www.geeksforgeeks.org/count-subarray-with-given-sum/\n    '''\n    #initialize the count to zero\n    #traverse the array\n    #check if the current sum is equal to the given sum\n    #if yes then add 1 to the count\n    #return the count\n    \n    count=0\n    curr_sum=0\n    \n    for i in range(n):\n        curr_sum=curr_sum+arr[i]\n        if curr_sum==s:\n            count+=1\n        if curr_sum<s:\n            count+=1\n    \n    return count\n    \n    \ndef count_subarrays_with_given_sum_without_adjacent_elements(arr,n,s):\n    '''\n    Write a python function to count the number of subarrays with the given sum. https://www.geeksforgeeks.org/count-subarray-with-given-sum/\n    '''\n    #initialize the count to zero\n    #traverse the array\n    #check if the current sum is equal to the given sum\n    #if yes then add 1 to the count\n    #return the count\n    \n    count=0\n    curr_sum=0\n    \n    for i in range(n):\n        if curr_sum==s:\n            count+=1\n        if i==0 or arr[i-1]!=arr[i]:\n            curr_sum=curr_sum+arr[i]\n            \n    return count\n    \n    \ndef count_subarrays_with_given_sum_dp(arr,n,s):\n    '''\n    Write a python function to count the number of subarrays with the given sum. https://www.geeksforgeeks.org/count-subarray-with-given-sum/\n    '''\n    #initialize the count to zero\n    #traverse the array\n    #check if the current sum is equal to the given sum\n    #if yes then add 1 to the count\n    #return the count\n    \n    count=0\n    curr_sum=0\n    \n    for i in range(n):\n        curr_sum=curr_sum+arr[i]\n        if curr_sum==s:\n            count+=1\n        elif curr_sum>s:\n            while curr_sum>s:\n                curr_sum=curr_sum-arr[i-1]\n                if curr_sum==s:\n                    count+=1\n                    \n    return count\n    \n    \ndef count_subarrays_with_given_sum_without_adjacent_elements_dp(arr,n,s):\n    '''\n    Write a python function to count the number of subarrays with the given sum. https://www.geeksforgeeks.org/count-subarray-with-given-sum/\n    '''\n    #initialize the count to zero\n    #traverse the array\n    #check if the current sum is equal to the given sum\n    #if yes then add 1 to the count\n    #return the count\n    \n    count=0\n    curr_sum=0\n    \n    for i in range(n):\n        if curr_sum==s:\n            count+=1\n        if i==0 or arr[i-1]!=arr[i]:\n            curr_sum=curr_sum+arr[i]\n            \n    return count\n    \n    \ndef count_subarrays_with_given_sum_using_prefix_sum(arr,n,s):\n    '''\n    Write a python function to count the number of subarrays with the given sum. https://www.geeksforgeeks.org/count-subarray-with-given-sum/\n    '''\n    #initialize the count to zero\n    #traverse the array\n    #check if the current sum is equal to the given sum\n    #if yes then add 1 to the count\n    #return the count\n    \n    count=0\n    curr_sum=0\n",
        "num_ids": 64
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits=[]\n    for i in str:\n        if i.isdigit():\n            digits.append(i)\n    return len(digits)\n",
        "num_ids": 41
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if str == \"\":\n        return 0\n    else:\n        return len(str)\n",
        "num_ids": 24
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt=0\n    for i in str:\n        if i.isdigit():\n            cnt+=1\n    return cnt\n",
        "num_ids": 35
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n <= 1): \n        return False\n    else: \n        return is_polite(n-1) if(not is_polite(n-1)) else is_polite(n-2)\ndef print_matrix(matrix,n,m):\n    for i in range(n):\n        for j in range(m):\n            print(matrix[i][j],end=\" \")\n        print()\ndef is_prime(n):\n    if(n == 1):\n        return False\n    if(n == 2):\n        return True\n    if(n>2):\n        for i in range(2,n):\n            if(n%i == 0):\n                return False\n        return True\ndef is_prime_fast(n):\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n%i == 0):\n            return False\n    return True\ndef is_prime_fastest(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=1\n    return True\ndef is_prime_fastest_v2(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=1\n    return True\ndef is_prime_fastest_v3(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v4(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v5(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v6(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v7(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v8(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v9(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v10(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v11(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v12(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v13(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v14(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v15(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v16(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v17(n):\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n > 2 and n%2 == 0):\n        return False\n    max = math.sqrt(n)\n    i = 3\n    while(i <= max):\n        if(n%i == 0):\n            return False\n        i+=2\n    return True\ndef is_prime_fastest_v18(n):\n    if(n < 2):\n        return False\n    if",
        "num_ids": 1999
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #base case\n    if(n == 1): \n        return 1\n    if(n == 2):\n        return 2\n    if(n > 2):\n        return n * (n - 1)\n",
        "num_ids": 50
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1: \n        return False\n    if n == 1: \n        return True\n    if n == 2: \n        return False\n    if n == 3: \n        return True\n    if n == 4: \n        return False\n    if n == 5: \n        return True\n    if n == 6: \n        return False\n    if n == 7: \n        return True\n    if n == 8: \n        return False\n    if n == 9: \n        return True\n    if n == 10: \n        return False\n    if n == 11: \n        return True\n    if n == 12: \n        return False\n    if n == 13: \n        return True\n    if n == 14: \n        return False\n    if n == 15: \n        return True\n    if n == 16: \n        return False\n    if n == 17: \n        return True\n    if n == 18: \n        return False\n    if n == 19: \n        return True\n    if n == 20: \n        return False\n    if n == 21: \n        return True\n    if n == 22: \n        return False\n    if n == 23: \n        return True\n    if n == 24: \n        return False\n    if n == 25: \n        return True\n    if n == 26: \n        return False\n    if n == 27: \n        return True\n    if n == 28: \n        return False\n    if n == 29: \n        return True\n    if n == 30: \n        return False\n    if n == 31: \n        return True\n    if n == 32: \n        return False\n    if n == 33: \n        return True\n    if n == 34: \n        return False\n    if n == 35: \n        return True\n    if n == 36: \n        return False\n    if n == 37: \n        return True\n    if n == 38: \n        return False\n    if n == 39: \n        return True\n    if n == 40: \n        return False\n    if n == 41: \n        return True\n    if n == 42: \n        return False\n    if n == 43: \n        return True\n    if n == 44: \n        return False\n    if n == 45: \n        return True\n    if n == 46: \n        return False\n    if n == 47: \n        return True\n    if n == 48: \n        return False\n    if n == 49: \n        return True\n    if n == 50: \n        return False\n    if n == 51: \n        return True\n    if n == 52: \n        return False\n    if n == 53: \n        return True\n    if n == 54: \n        return False\n    if n == 55: \n        return True\n    if n == 56: \n        return False\n    if n == 57: \n        return True\n    if n == 58: \n        return False\n    if n == 59: \n        return True\n    if n == 60: \n        return False\n    if n == 61: \n        return True\n    if n == 62: \n        return False\n    if n == 63: \n        return True\n    if n == 64: \n        return False\n    if n == 65: \n        return True\n    if n == 66: \n        return False\n    if n == 67: \n        return True\n    if n == 68: \n        return False\n    if n == 69: \n        return True\n    if n == 70: \n        return False\n    if n == 71: \n        return True\n    if n == 72: \n        return False\n    if n == 73: \n        return True\n    if n == 74: \n        return False\n    if n == 75: \n        return True\n    if n == 76: \n        return False\n    if n == 77: \n        return True\n    if n == 78: \n        return False\n    if n == 79: \n        return True\n    if n == 80: \n        return False\n    if n == 81: \n        return True\n    if n == 82: \n        return False\n    if n == 83: \n        return True\n    if n == 84: \n        return False\n    if n == 85: \n        return True\n    if n == 86: \n        return False\n    if n == 87: \n        return True\n    if n == 88: \n        return False\n    if n == 89: \n        return True\n    if n == 90: \n        return False\n    if n == 91: \n        return True\n    if n == 92: \n        return False\n    if n == 93: \n        return True\n    if n == 94: \n        return False\n    if n == 95: \n        return True\n    if n == 96: \n        return False\n    if n == 97: \n        return True\n    if n == 98: \n        return False\n    if n == 99: \n        return True\n    if n == 100: \n        return False\n    if n == 101: \n        return True\n    if n == 102: \n        return False\n    if n == 103: \n        return True\n    if n == 104: \n        return False\n    if n == 105: \n        return True\n    if n == 106: \n        return False\n    if n == 107: \n        return True\n    if n == 108: \n        return False\n    if n == 109: \n        return True\n    if n == 110: \n        return False\n    if n == 111: \n        return True\n    if n == 112: \n        return False\n    if n == 113: \n        return True\n    if n == 114: \n        return False\n    if n == 115: \n        return True\n    if n == 116: \n        return False\n    if n == 117: \n        return True\n    if n == 118: \n        return False\n    if n == 119: \n        return True\n    if n == 120: \n        return False\n    if n == 121: \n        return True\n    if n == 122: \n        return False\n    if n == 123: \n        return True\n    if n == 124: \n        return False\n    if n == 125: \n        return True\n    if n == 126: \n        return False\n    if n == 127: \n        return True\n    if n == 128: \n        return False\n    if n == 129: \n        return True\n    if n == 130: \n        return False\n    if n == 131: \n        return True\n    if n == 132: \n        return False\n    if n == 133: \n        return True\n    if n == 134: \n        return False\n    if n == 135: \n        return True\n    if n == 136: \n        return False\n    if n == 137: \n        return True\n    if n == 138: \n        return False\n    if n == 139: \n        return True\n    if n == 140: \n        return False\n    if n == 141: \n        return True\n    if n == 142: \n        return False\n    if n == 143: \n        return True\n    if n == 144: \n        return False\n    if n == 145: \n        return True\n    if n == 146: \n        return False\n    if n == 147: \n        return True\n    if n == 148: \n        return False\n    if n == 149: \n        return True\n    if n == 150: \n        return False\n    if n == 151: \n        return True\n    if n == 152: \n        return False\n    if n == 153: \n        return True\n    if n == 154: \n        return False\n    if n == 155: \n        return True\n    if n == 156: \n        return False\n    if n == 157: \n        return True\n    if n == 158: \n        return False\n    if n == 159: \n        return True\n    if n == 160: \n        return False\n    if n == 161: \n        return True\n    if n == 162: \n        return False\n    if n == 163: \n        return True\n    if n == 164: \n        return False\n    if n == 165: \n        return True\n    if n == 166",
        "num_ids": 1999
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #n = int(input(\"Enter the number : \"))\n    polite = 0\n    i = 1\n    while polite < n:\n        polite += math.factorial(i-1)\n        i+=1\n    return polite - n + 1\n",
        "num_ids": 62
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    t=int(math.log(n,2))\n    sum = 0\n    count = 0\n    for i in range(1,n+1):\n        sum+=i\n        if(sum<=n):\n            count+=1\n        else:\n            break\n    return count+1\n    \n    \ndef get_polite(n):\n    t = int(math.log(n,2))\n    sum = 0\n    count = 0\n    for i in range(1,n+1):\n        sum+=i\n        if(sum<=n):\n            count+=1\n        else:\n            break\n    return count+1\n    ",
        "num_ids": 154
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n<1): \n        return 0\n    else: \n        if n==1: \n            return 1\n        else: \n            if n%2==0: \n                return (2*n)+1\n            else: \n                return n*2\n",
        "num_ids": 67
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return \"The {}st polite number is 3\".format(n)\n    elif n == 2: \n        return \"The {}nd polite number is 5\".format(n)\n    elif n == 3: \n        return \"The {}rd polite number is 7\".format(n)\n    else: \n        return \"The {}th polite number is 11\".format(n)\n",
        "num_ids": 97
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n <= 1):\n        return False\n    if(n <= 3):\n        return True\n    def is_polite_helper(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        return is_polite_helper(n-1) + is_polite_helper(n-2) + is_polite_helper(n-3)\n    return is_polite_helper(n)\n",
        "num_ids": 115
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i=0\n    while True:\n        if (isPolite(i)):\n            if (i==n-1):\n                return i\n            else:\n                i+=1\n        else:\n            i+=1\ndef isPolite(num):\n    return num%(2**(int(math.log2(num))+1))==0\ndef upper_bound_polite(n):\n    '''\n    Write a function to find upper bound of the polite number, that is the last number that is polite. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n-upper_bound_nonpolite(n)+1\ndef upper_bound_nonpolite(n):\n    return 2**(int(math.log2(n))+1)-1\ndef is_polite_naive(n):\n    return n%2==0\ndef upper_bound_naive(n):\n    if n<=2:\n        return n\n    else:\n        return 2**(int(math.log2(n))+1)-1\ndef is_polite(n):\n    if n%2==0:\n        return True\n    return False\ndef upper_bound_polite_naive(n):\n    '''\n    Write a function to find upper bound of the polite number, that is the last number that is polite. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n-upper_bound_nonpolite_naive(n)+1\ndef upper_bound_nonpolite_naive(n):\n    if n==1:\n        return 1\n    return 2**(int(math.log2(n))+1)-1\ndef is_polite_linear(n):\n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i,l=1,1\n    while True:\n        if isPolite(i):\n            l+=1\n            if l==n:\n                return i\n        else:\n            i+=1\n            l=1\ndef is_polite_linear_improved(n):\n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return 2**(int(math.log2(n))+1)-n+1\ndef upper_bound_polite_linear(n):\n    '''\n    Write a function to find upper bound of the polite number, that is the last number that is polite. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n-upper_bound_nonpolite_linear(n)+1\ndef upper_bound_nonpolite_linear(n):\n    return 2**(int(math.log2(n))+1)-1\ndef is_polite_linear_naive(n):\n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i,l=1,1\n    while True:\n        if isPolite_naive(i):\n            l+=1\n            if l==n:\n                return i\n        else:\n            i+=1\n            l=1\ndef is_polite_linear_improved_naive(n):\n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return 2**(int(math.log2(n))+1)-n+1\ndef upper_bound_polite_linear_naive(n):\n    '''\n    Write a function to find upper bound of the polite number, that is the last number that is polite. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n-upper_bound_nonpolite_linear_naive(n)+1\ndef upper_bound_nonpolite_linear_naive(n):\n    return 2**(int(math.log2(n))+1)-1\ndef is_polite_dp(n):\n    dp=[0 for i in range(n+1)]\n    dp[1]=1\n    for i in range(2,n+1):\n        dp[i]=dp[i-1]\n        if i%2==0:\n            dp[i]=dp[i] or dp[i//2]\n    return dp[n]\ndef upper_bound_polite_dp(n):\n    '''\n    Write a function to find upper bound of the polite number, that is the last number that is polite. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n-upper_bound_nonpolite_dp(n)+1\ndef upper_bound_nonpolite_dp(n):\n    return 2**(int(math.log2(n))+1)-1\ndef is_polite_dp_naive(n):\n    dp=[0 for i in range(n+1)]\n    dp[1]=1\n    for i in range(2,n+1):\n        dp[i]=dp[i-1]\n        if i%2==0:\n            dp[i]=dp[i] or dp[i//2]\n    return dp[n]\ndef is_polite_dp_improved(n):\n    dp=[0 for i in range(n+1)]\n    dp[1]=1\n    for i in range(2,n+1):\n        dp[i]=dp[i-1]\n        if i%2==0 and dp[i//2]:\n            dp[i]=1\n    return dp[n]\ndef upper_bound_polite_dp_naive(n):\n    '''\n    Write a function to find upper bound of the polite number, that is the last number that is polite. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n-upper_bound_nonpolite_dp_naive(n)+1\ndef upper_bound_nonpolite_dp_naive(n):\n    return 2**(int(math.log2(n))+1)-1\ndef is_polite_dp_improved_naive(n):\n    dp=[0 for i in range(n+1)]\n    dp[1]=1\n    for i in range(2,n+1):\n        dp[i]=dp[i-1]\n        if i%2==0 and dp[i//2]:\n            dp[i]=1\n    return dp[n]\ndef is_polite_dp_improved(n):\n    dp=[0 for i in range(n+1)]\n    dp[1]=1\n    for i in range(2,n+1):\n        dp[i]=dp[i-1]\n        if i%2==0 and dp[i//2]:\n            dp[i]=1\n    return dp[n]\ndef upper_bound_polite_dp_improved(n):\n    '''\n    Write a function to find upper bound of the polite number, that is the last number that is polite. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n-upper_bound_nonpolite_dp_improved(n)+1\ndef upper_bound_nonpolite_dp_improved(n):\n    return 2**(int(math.log2(n))+1)-1\ndef is_polite_dp_improved_naive(n):\n    dp=[0 for i in range(n+1)]\n    dp[1]=1\n    for i in range(2,n+1):\n        dp[i]=dp[i-1]\n        if i%2==0 and dp[i//2]:\n            dp[i]=1\n    return dp[n]\ndef is_polite_dp_improved_naive(n):\n    dp=[0 for i in range(n+1)]\n    dp[1]=1\n    for i in range(2,n+1):\n        dp[i]=dp[i-1]\n        if i%2==0 and dp[i//2]:\n            dp[i]=1\n    return dp[n]\ndef upper_boun",
        "num_ids": 252
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    i = 0\n    while i < len(l1):\n        pairs.append([l1[i],l1[i+1]])\n        i = i + 2\n    return pairs\n",
        "num_ids": 54
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list=[]\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i],l1[i+1]))\n    return pair_list\n",
        "num_ids": 50
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1[:-1], l1[1:])\n",
        "num_ids": 19
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1[:-1],l1[1:]))\n",
        "num_ids": 21
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return None\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n",
        "num_ids": 50
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(0, len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [tuple(l1[i:i+2]) for i in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [i + j for i in l1 for j in l1[1:]]\n",
        "num_ids": 23
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    size = len(arr)\n    count = 0\n    for i in range(size):\n        for j in range(i+1, size):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 69
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    length = len(arr)\n    count = 0\n    arr.sort()\n    for i in range(length-1):\n        left = i + 1\n        right = length - 1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif arr[i] + arr[left] + arr[right] > sum:\n                right -= 1\n            else:\n                left += 1\n    return count\n",
        "num_ids": 127
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    l = len(arr)\n    for i in range(l):\n        for j in range(i+1, l):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    # looping through each element of the list\n    for i in range(len(arr)):\n        # checking for each element with every other element\n        for j in range(i + 1, len(arr)):\n            # checking for sum\n            if arr[i] + arr[j] == sum:\n                count += 1\n",
        "num_ids": 83
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    pair_count = 0\n    n = len(arr)\n    i, j = 0, n-1\n    while i<j:\n        curr_sum = arr[i] + arr[j]\n        if curr_sum == sum:\n            pair_count += 1\n            i += 1\n            j -= 1\n        elif curr_sum < sum:\n            i += 1\n        else:\n            j -= 1\n    return pair_count\n",
        "num_ids": 115
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 64
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif \n",
        "num_ids": 41
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\ndef Remove(li,index):\n    '''\n    Write a python function to remove an item from a list by index\n    '''\n    li.pop(index)\n    return li\ndef Add(li1,li2):\n    '''\n    Write a python function to add two list into one.\n    '''\n    li = li1 + li2\n    return li\ndef Reverse(li):\n    '''\n    Write a python function to reverse a list.\n    '''\n    li.reverse()\n    return li\ndef sort(li):\n    '''\n    Write a python function to sort a list.\n    '''\n    li.sort()\n    return li\ndef Remove_duplicates(li):\n    '''\n    Write a python function to remove duplicate items from a list.\n    '''\n    li = list(dict.fromkeys(li))\n    return li\ndef main():\n    '''\n    Write a python function that will perform all the above functions in the following order\n    '''\n    li1 = [1,2,3,4,5]\n    li2 = [5,6,7,8,9]\n    print(Diff(li1,li2))\n    print(Remove(li1,2))\n    print(Add(li1,li2))\n    print(Reverse(li1))\n    print(sort(li1))\n    print(Remove_duplicates(li2))\n",
        "num_ids": 102
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n    \ndef Sum(li1,li2):\n    '''\n    Write a python function to get the sum of two lists.\n    '''\n    li_sum = li1 + li2\n    return li_sum\n    \ndef Concat(li1,li2):\n    '''\n    Write a python function to concat two lists.\n    '''\n    li_concat = li1 + li2\n    return li_concat\n    \ndef Repeat(li,n):\n    '''\n    Write a python function to repeat a list n times.\n    '''\n    li_concat = li * n\n    return li_concat\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n    \ndef Union(li1,li2):\n    '''\n    Write a python function to get the union of two lists.\n    '''\n    return (list(set(li1 + li2)))\n",
        "num_ids": 16
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(4*i*(i+1) for i in range(1, n) if i%2!=0)\n",
        "num_ids": 33
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # sum of first n odd natural numbers\n    total_sum = n * (2*n + 1) * (2*n + 3) // 6\n    return total_sum \n",
        "num_ids": 44
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1 : \n        print (\"Enter n greater than 1\")\n    else :\n        total = 0\n        for i in range(1, n+1) : \n            if (i % 2) : \n                total += (i ** 4) \n            else : \n                continue\n    return total\n    \nprint (odd_num_sum(9))\nprint (odd_num_sum(10))\nprint (odd_num_sum(5)",
        "num_ids": 110
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        if i % 2 == 1 : \n            sum = sum + (i**4)\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if (i % 2!= 0) : \n            sum = sum + i*i*i*i\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    x = 0\n    for i in range(1, n + 1) : \n        if i % 2!= 0 : \n            x += i * i * i * i \n    return x \n",
        "num_ids": 50
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2) : \n        sum += (i ** 4)\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    a = []\n    for i in range(1,n+1) : \n        if i%2!= 0 : \n            a.append(i**4)\n    return sum(a)\n",
        "num_ids": 50
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1, 2) :\n        result += (i**4)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if (char == ')' and stack[-1]!= '(') or (char == '}' and stack[-1]!= '{') or (char == ']' and stack[-1]!= '['):\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\n",
        "num_ids": 149
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if char!= ')':\n                    return False\n            if current_char == '{':\n                if char!= '}':\n                    return False\n            if current_char == '[':\n                if char!= ']':\n                    return False\n    if stack:\n        return False\n    return True\n",
        "num_ids": 138
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch=='(':\n            stack.append(ch)\n        if ch==')':\n            if not stack or stack[-1]!='(':\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp.count('(')!= exp.count(')'):\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def check_balance(exp):\n        st = deque()\n        lefty = \"({[\"\n        righty = \")}]\"\n        for char in exp:\n            if char in lefty:\n                st.append(char)\n            elif char in righty:\n                if not st:\n                    return False\n                lefty = lefty.replace(st.pop(), \"\")\n        return not st\n    def check_balance_alt(exp):\n        lefty = \"({[\"\n        righty = \")}]\"\n        for char in exp:\n            if char in lefty:\n                lefty = lefty.replace(char, \"\")\n            elif char in righty:\n                lefty += char\n        return not lefty\n    return check_balance(exp)\ndef check_expression_alt(exp):\n    stack = []\n    for char in exp:\n        if char in \"({[\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return False\n        elif char == \"}\":\n            if not stack or stack.pop()!= \"{\":\n                return False\n        elif char == \"]\":\n            if not stack or stack.pop()!= \"[\":\n                return False\n    return not stack\ndef reverse_string(string):\n    '''\n    Write a function that reverses a string. The input string is given as an array of characters char[].\n    '''\n    s = \"\"\n    for i in range(len(string)-1, -1, -1):\n        s += string[i]\n    return s\ndef reverse_string_alt(string):\n    return \"\".join(string[i] for i in range(len(string)-1, -1, -1))\ndef reverse_string_alt(string):\n    return string[::-1]\ndef string_compression(string):\n    '''\n    Write a method to perform basic string compression using the counts of repeated characters. For example, the string aabcccccaaa would become a2blc5a3. If the compressed string would not become smaller than the original string, your method should return the original string. You can assume the string has only uppercase and lowercase letters (a - z).\n    '''\n    #Store the count in a dictionary\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    #Store the result in a string\n    result = \"\"\n    for char, times in count.items():\n        result += char + str(times)\n    #Compare length\n    if len(result) < len(string):\n        return result\n    return string\ndef string_compression_alt(string):\n    result = \"\"\n    count = 0\n    for char in string:\n        if char!= result[-1]:\n            result += char + str(count)\n            count = 0\n        count += 1\n    result += str(count)\n    return result if len(result) < len(string) else string\ndef check_permutation(string1, string2):\n    '''\n    Given two strings, write a method to decide if one is a permutation of the other.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    #Hashing\n    hash_s1 = {}\n    hash_s2 = {}\n    for char in string1:\n        if char in hash_s1:\n            hash_s1[char] += 1\n        else:\n            hash_s1[char] = 1\n    for char in string2:\n        if char in hash_s2:\n            hash_s2[char] += 1\n        else:\n            hash_s2[char] = 1\n    return hash_s1 == hash_s2\ndef check_permutation_alt(string1, string2):\n    return sorted(string1) == sorted(string2)\ndef compute_hash(string):\n    '''\n    Write a method to compute the hash of a string.\n    '''\n    hash = 0\n    for char in string:\n        hash += ord(char)\n    return hash\ndef compute_hash_alt(string):\n    hash = 0\n    for i in range(len(string)):\n        hash += ord(string[i]) * (10**i)\n    return hash\ndef array_rotate(nums, k):\n    '''\n    Given an array of numbers, rotate the array to the right by k steps, where k is non-negative.\n    '''\n    #Rotate the array\n    for i in range(k):\n        nums.insert(0, nums.pop())\n    return nums\ndef array_rotate_alt(nums, k):\n    return nums[-k:] + nums[:-k]\ndef array_rotate_alt_new(nums, k):\n    l = len(nums)\n    nums.extend(nums[:l-k])\n    nums = nums[l-k:]\n    return nums\ndef array_rotate_alt_new(nums, k):\n    l = len(nums)\n    nums.extend(nums[:l-k])\n    nums = nums[l-k:]\n    return nums\ndef array_rotate_alt_new(nums, k):\n    l = len(nums)\n    nums.extend(nums[:l-k])\n    nums = nums[l-k:]\n    return nums\ndef string_rotation(s1, s2):\n    '''\n    Given two strings, write a method to decide if one is a rotation of the other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s2_2 = s2 + s2\n    return s1 in s2_2\ndef string_rotation_alt(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    return s2 in (s1 + s1)\ndef string_rotation_alt_new(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    s2_2 = s2 + s2\n    return s1 in s2_2\ndef string_rotation_alt_new_2(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    s1_2 = s1 + s1\n    return s2 in s1_2\ndef string_rotation_alt_new_3(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    s1_2 = s1 + s1\n    s2_2 = s2 + s2\n    return s1_2 in s2_2\ndef string_rotation_alt_new_4(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    return s1 in s2 + s2\ndef find_peak_element(nums):\n    '''\n    Write a method to find a peak element.\n    '''\n    l = len(nums)\n    for i in range(l):\n        if i == 0:\n            if nums[i+1] > nums[i]:\n                return nums[i+1]\n        elif i == l-1:\n            if nums[i-1] > nums[i]:\n                return nums[i]\n        elif nums[i+1] > nums[i]:\n            return nums[i+1]\n        elif nums[i-1] > nums[i]:\n            return nums[i]\n    return None\ndef find_peak_element_alt(nums):\n    '''\n    Write a method to find a peak element.\n    '''\n    l = len(nums)\n    if l == 1:\n        return nums[0]\n    if nums[0] > nums[1]:\n        return nums[0]\n    if nums[l-1] > nums[l-2]:\n        return nums[l-1]\n    for i in range(1, l-1):\n        if nums[i] > nums[i-1",
        "num_ids": 103
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in \"({[\":\n            stack.append(i)\n        elif i in \")}]\":\n            if len(stack) == 0:\n                return False\n            if stack[-1] == \"(\" and i == \")\":\n                stack.pop()\n            elif stack[-1] == \"{\" and i == \"}\":\n                stack.pop()\n            elif stack[-1] == \"[\" and i == \"]\":\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 156
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        if char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for bracket in exp:\n        if bracket in '({[':\n            stack.append(bracket)\n        elif bracket in ')}]':\n            if len(stack) == 0:\n                return False\n            opened_bracket = stack.pop()\n            if (bracket == ')' and opened_bracket!= '(') or (bracket == '}' and opened_bracket!= '{') or (bracket == ']' and opened_bracket!= '['):\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 149
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            try:\n                stack.pop()\n            except:\n                return False\n    return True if not stack else False\n",
        "num_ids": 67
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n",
        "num_ids": 155
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join([i for i in test_str.split() if len(i)!= K])\n",
        "num_ids": 27
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(\"Hello\")\n    words_list = test_str.split()\n    for i in range(len(words_list)):\n        if len(words_list[i]) == K:\n            words_list[i] = ''\n    return''.join(words_list)\n",
        "num_ids": 68
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = test_str.split(' ')\n    count = 0\n    for x in new_str:\n        if len(x) == K:\n            new_str.remove(x)\n            count += 1\n    return f'The new string is { \" \".join(new_str)} with {count} words removed. '\n",
        "num_ids": 81
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string by space\n    test_arr = test_str.split(' ')\n    # iterate the array\n    for i in range(len(test_arr)):\n        # check if the length of the word is K, if it is, remove it\n        if len(test_arr[i]) == K:\n            test_arr[i] = ''\n    # join the array into a string\n    return''.join(test_arr)\n",
        "num_ids": 107
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    count = 0\n    new_string = ''\n    for i in test_str:\n        if len(i) == K:\n            count += 1\n    if count == 0:\n        return new_string\n    for j in test_str:\n        if len(j) == K:\n            continue\n        else:\n            new_string += j +''\n    return new_string\n",
        "num_ids": 106
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # start writing your code here\n    res = []\n    for word in test_str.split(\" \"):\n        if len(word)!= K:\n            res.append(word)\n    print(\" \".join(res))\n",
        "num_ids": 55
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(\" \")\n    final = \"\"\n    for word in words:\n        if len(word)!= K:\n            final += \" \" + word\n    return final\n",
        "num_ids": 48
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    s = set()\n    for i in test_str:\n        if len(i) == K:\n            s.add(i)\n    for i in s:\n        test_str.remove(i)\n    return''.join(test_str)\n",
        "num_ids": 74
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split()\n    \n    new_str = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == K:\n            continue\n        else:\n            new_str.append(str_list[i])\n    \n    result =''.join(new_str)\n    \n    return result\n",
        "num_ids": 91
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not K:\n        return test_str\n    else:\n        word_list = test_str.split(' ')\n        print(word_list)\n        for word in word_list[:]:\n            if len(word) == K:\n                word_list.remove(word)\n        return''.join(word_list)\n",
        "num_ids": 81
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    string = text\n    pattern = pattern\n    string = re.sub(pattern,\"****\",string)\n    print(string)\n",
        "num_ids": 32
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    search_string=text\n    substring=pattern\n    occurance=[]\n    positions=[]\n    length=len(substring)\n    if substring in search_string:\n        for match in re.finditer(substring,search_string):\n            occurance.append(match.group())\n            positions.append(match.span())\n    else:\n        occurance=None\n        positions=None\n    return occurance,positions\n",
        "num_ids": 109
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #text = \"This is an example of a sentence example.... python\"\n    #pattern = \"exam\"\n    match = re.findall(pattern,text)\n    if len(match) > 0:\n        print('Match found:', match)\n        print(f'Pattern found at index {match.start()} to {match.end()}')\n    else:\n        print('No match')\n        \n    print(text.find(pattern))\n",
        "num_ids": 108
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #k = text.find(pattern)\n    k = re.findall(pattern,text)\n    if(len(k)):\n        print(\"Pattern found at index \", k)\n    else:\n        print(\"Pattern not found.\")\n    print(k)\n",
        "num_ids": 64
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if len(result)==0:\n        return None\n    else:\n        occurance = {}\n        for i in result:\n            if i not in occurance:\n                occurance[i] = text.count(i)\n        return occurance\n",
        "num_ids": 74
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # pattern = re.compile(r'\\b\\w*\\b')\n    # pattern = re.compile(r'[^a-zA-Z0-9]')\n    # pattern = re.compile(r'\\b[a-zA-Z0-9]{3}\\b')\n    match = pattern.finditer(text)\n    if match:\n        return [match.start(), match.end()]\n    else:\n        return None\n    \ndef find_index(text,pattern):\n    '''\n    Write a function to find the index of the substrings within a string. Return None if there is no match.\n    '''\n    # pattern = re.compile(r'\\b\\w*\\b')\n    # pattern = re.compile(r'[^a-zA-Z0-9]')\n    # pattern = re.compile(r'\\b[a-zA-Z0-9]{3}\\b')\n    match = pattern.search(text)\n    if match:\n        return match.start()\n    else:\n        return None\n",
        "num_ids": 107
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if len(matches) == 0:\n        return None\n    result = []\n    for match in matches:\n        result.append(list(match))\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=[]\n    for match in re.finditer(pattern,text):\n        start=match.start()\n        end=match.end()\n        result.append((start,end))\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #return re.findall(pattern,text)\n    count=0\n    for i in re.finditer(pattern,text):\n        print(i)\n        count+=1\n    return count\ndef main():\n    text=input()\n    pattern=input()\n    print(occurance_substring(text,pattern))\nif __name__ == '__main__':\n    main(",
        "num_ids": 93
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_list=re.findall(pattern,text)\n    if len(pattern_list)>0:\n        print(pattern_list)\n    else:\n        print(None)\n",
        "num_ids": 47
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([nums[i]%2 == 1 for i in range(1, len(nums), 2)])\n",
        "num_ids": 31
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if (i%2==0 and nums[i]%2==0) or (i%2!=0 and nums[i]%2!=0):\n            return False\n    return True\nprint(odd_position([2,1,2,3,4]))\nprint(odd_position([2,2,2,3,4]))\nprint(odd_position([1,1,2,2,3,4]))\nprint(odd_position([1,1,2,2,3,3]))\n",
        "num_ids": 142
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums)%2==0:\n        return False\n    for i in range(0,len(nums)-1,2):\n        if nums[i]%2!=0:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = [num for num in nums if num % 2 == 1]\n    return True if len(odd) == len(nums) else False\n",
        "num_ids": 37
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(1, len(nums)+1):\n        if i % 2!= 0:\n            if nums[i-1] % 2 == 0:\n                return False\n    return True\n    \nprint(odd_position([1,2,3,4,5,6]))\nprint(odd_position([1,2,3,4,5,6,7]))\nprint(odd_position([1,2,3,4,5,6,7,8,9]))\n",
        "num_ids": 123
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(0, len(nums)):\n        if index % 2!= 0 and nums[index] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index_numbers = []\n    for i in range(len(nums)):\n        if i%2==0:\n            if nums[i]%2==1:\n                odd_index_numbers.append(nums[i])\n    if len(odd_index_numbers)==len(nums):\n        return True\n    else:\n        return False\n",
        "num_ids": 93
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    print(\"\\n\")\n    for i in range(0,len(nums)):\n        if i%2!=0 and nums[i]%2==0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    if len(test_str) >= 2:\n        for i in range(len(test_str)-1):\n            if test_str[i] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if ((test_str[i-1] == 'a' or test_str[i-1] == 'A') and (test_str[i] == 'a' or test_str[i] == 'A')):\n            count += 1\n        elif ((test_str[i-1] == 'e' or test_str[i-1] == 'E') and (test_str[i] == 'e' or test_str[i] == 'E')):\n            count += 1\n        elif ((test_str[i-1] == 'i' or test_str[i-1] == 'I') and (test_str[i] == 'i' or test_str[i] == 'I')):\n            count += 1\n        elif ((test_str[i-1] == 'o' or test_str[i-1] == 'O') and (test_str[i] == 'o' or test_str[i] == 'O')):\n            count += 1\n        elif ((test_str[i-1] == 'u' or test_str[i-1] == 'U') and (test_str[i] == 'u' or test_str[i] == 'U')):\n            count += 1\n        else:\n            continue\n    return count\n",
        "num_ids": 326
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum([ 1 if ch in 'aeiou' else 0 for ch in test_str ])\n",
        "num_ids": 25
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    total = 0\n    for char in test_str:\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' or char == 'A' or char == 'E' or char == 'I' or char == 'O' or char == 'U':\n            if test_str[test_str.find(char)+1] == 'a' or test_str[test_str.find(char)+1] == 'e' or test_str[test_str.find(char)+1] == 'i' or test_str[test_str.find(char)+1] == 'o' or test_str[test_str.find(char)+1] == 'u' or test_str[test_str.find(char)+1] == 'A' or test_str[test_str.find(char)+1] == 'E' or test_str[test_str.find(char)+1] == 'I' or test_str[test_str.find(char)+1] == 'O' or test_str[test_str.find(char)+1] == 'U':\n                total += 1\n    return total\n",
        "num_ids": 279
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            count += 1\n    return count\n    \n    \ndef count_consonants(test_str):\n    '''\n    Write a function to count those characters which have consonants as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for letter in test_str:\n        if letter not in vowels:\n            count += 1\n    return count\n    \n    \ndef count_letters(test_str, test_char):\n    '''\n    Write a function to count those characters which have the given test character as their neighbor in the given string.\n    '''\n    count = 0\n    for letter in test_str:\n        if letter == test_char:\n            count += 1\n    return count\n    \n    \ndef check_double(test_str):\n    '''\n    Write a function to check if a string has any double, i.e. if there are any characters which appear twice in the string.\n    '''\n    count = 0\n    for letter in test_str:\n        if test_str.count(letter) == 2:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n        \n        \ndef get_double_char(test_str):\n    '''\n    Write a function to check if a string has any double, i.e. if there are any characters which appear twice in the string.\n    If it does, return the first letter that appears twice. If no double is found, return None.\n    '''\n    count = 0\n    for letter in test_str:\n        if test_str.count(letter) == 2:\n            return letter\n    return None\n    \n    \ndef replace_even(test_str, test_char):\n    '''\n    Write a function to replace all the characters that have even index in the string with the given character.\n    '''\n    new_str = ''\n    for i in range(len(test_str)):\n        if i % 2 == 0:\n            new_str += test_char\n        else:\n            new_str += test_str[i]\n    return new_str\n    \n    \ndef replace_odd(test_str, test_char):\n    '''\n    Write a function to replace all the characters that have odd index in the string with the given character.\n    '''\n    new_str = ''\n    for i in range(len(test_str)):\n        if i % 2 == 0:\n            new_str += test_str[i]\n        else:\n            new_str += test_char\n    return new_str\n    \n    \ndef replace_char_index(test_str, index, test_char):\n    '''\n    Write a function to replace the character at the given index with the given character.\n    '''\n    new_str = ''\n    for i in range(len(test_str)):\n        if i == index:\n            new_str += test_char\n        else:\n            new_str += test_str[i]\n    return new_str\n    \n    \ndef get_slice(test_str, start_index, end_index):\n    '''\n    Write a function to return the string starting from the given start index and ending before the given end index.\n    '''\n    return test_str[start_index:end_index]\n    \n    \ndef reverse_string(test_str):\n    '''\n    Write a function to reverse the given string.\n    '''\n    new_str = ''\n    for i in range(len(test_str)):\n        new_str += test_str[len(test_str) - 1 - i]\n    return new_str\n    \n    \ndef get_list_elements(test_list):\n    '''\n    Write a function to return a list of only those elements that are less than 5.\n    '''\n    return [element for element in test_list if element < 5]\n    \n    \ndef get_greater_than_3_index(test_list):\n    '''\n    Write a function to return the index of the element that is greater than 3 from the given list.\n    If there are no elements greater than 3, return -1.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] > 3:\n            return i\n    return -1\n    \n    \ndef create_dict(key_value_pairs):\n    '''\n    Write a function to create a dictionary from the given key value pairs.\n    '''\n    dict_ = {}\n    for key, value in key_value_pairs:\n        dict_[key] = value\n    return dict_\n    \n    \ndef get_value(dict_, key):\n    '''\n    Write a function to return the value associated with the given key in the given dictionary.\n    '''\n    return dict_.get(key)\n    \n    \ndef get_unique_list(test_list):\n    '''\n    Write a function to return a list of unique elements from the given list.\n    '''\n    return list(set(test_list))\n    \n    \ndef get_letter_count(test_str):\n    '''\n    Write a function to count the number of upper case letters, lower case letters and digits in the given string.\n    '''\n    upper_count = 0\n    lower_count = 0\n    digit_count = 0\n    for letter in test_str:\n        if letter.isupper():\n            upper_count += 1\n        elif letter.islower():\n            lower_count += 1\n        elif letter.isdigit():\n            digit_count += 1\n    return upper_count, lower_count, digit_count\n    \n    \ndef get_middle_char(test_str):\n    '''\n    Write a function to return the middle character of the given string. If the string has an odd number of characters, return the middle character. If it has even number of characters, return the middle 2 characters.\n    '''\n    middle_index = int(len(test_str) / 2)\n    if len(test_str) % 2 == 0:\n        return test_str[middle_index - 1] + test_str[middle_index]\n    else:\n        return test_str[middle_index]\n    \n    \ndef is_palindrome(test_str):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    if test_str == test_str[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef get_duplicate_char(test_str):\n    '''\n    Write a function to check if the given string contains any duplicates and if so, return it.\n    '''\n    for letter in test_str:\n        if test_str.count(letter) > 1:\n            return letter\n    return None\n    \n    \ndef remove_duplicate_chars(test_str):\n    '''\n    Write a function to remove all the duplicate characters in the given string.\n    '''\n    new_str = ''\n    for letter in test_str:\n        if letter not in new_str:\n            new_str += letter\n    return new_str\n    \n    \ndef count_substrings(test_str):\n    '''\n    Write a function to count the number of substrings that end with a particular character.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i, len(test_str)):\n            if test_str[j] == test_str[i]:\n                count += 1\n    return count\n    \n    \ndef get_letter_count_from_char(test_str, test_char):\n    '''\n    Write a function to count the number of times the given character appears in the given string.\n    '''\n    count = 0\n    for letter in test_str:\n        if letter == test_char:\n            count += 1\n    return count\n    \n    \ndef get_sum_square_difference(test_int1, test_int2):",
        "num_ids": 58
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiou' and (i == 0 or test_str[i-1] in 'aeiou' or i == len(test_str) - 1):\n            result += 1\n        if test_str[i] in 'aeiou' and (i == len(test_str) - 1 or test_str[i+1] in 'aeiou'):\n            result += 1\n    return result\n",
        "num_ids": 125
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str is None or len(test_str)==0:\n        return None\n    count=0\n    for i in range(len(test_str)):\n        if test_str[i]=='a' or test_str[i]=='e' or test_str[i]=='i' or test_str[i]=='o' or test_str[i]=='u' or test_str[i]=='A' or test_str[i]=='E' or test_str[i]=='I' or test_str[i]=='O' or test_str[i]=='U':\n            if i==0:\n                if test_str[i+1]=='a' or test_str[i+1]=='e' or test_str[i+1]=='i' or test_str[i+1]=='o' or test_str[i+1]=='u' or test_str[i+1]=='A' or test_str[i+1]=='E' or test_str[i+1]=='I' or test_str[i+1]=='O' or test_str[i+1]=='U':\n                    count+=1\n            elif i==len(test_str)-1:\n                if test_str[i-1]=='a' or test_str[i-1]=='e' or test_str[i-1]=='i' or test_str[i-1]=='o' or test_str[i-1]=='u' or test_str[i-1]=='A' or test_str[i-1]=='E' or test_str[i-1]=='I' or test_str[i-1]=='O' or test_str[i-1]=='U':\n                    count+=1\n            else:\n                if test_str[i+1]=='a' or test_str[i+1]=='e' or test_str[i+1]=='i' or test_str[i+1]=='o' or test_str[i+1]=='u' or test_str[i+1]=='A' or test_str[i+1]=='E' or test_str[i+1]=='I' or test_str[i+1]=='O' or test_str[i+1]=='U':\n                    if test_str[i-1]=='a' or test_str[i-1]=='e' or test_str[i-1]=='i' or test_str[i-1]=='o' or test_str[i-1]=='u' or test_str[i-1]=='A' or test_str[i-1]=='E' or test_str[i-1]=='I' or test_str[i-1]=='O' or test_str[i-1]=='U':\n                        count+=1\n    return count\n",
        "num_ids": 727
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_dict = {}\n    vowels = 'aeiou'\n    if len(test_str) > 0:\n        test_str = test_str.lower()\n        for index, char in enumerate(test_str):\n            if index == 0:\n                if char in vowels:\n                    vowel_dict[index] = [1]\n                else:\n                    vowel_dict[index] = [0]\n            else:\n                if char in vowels:\n                    try:\n                        vowel_dict[index].append(1)\n                    except:\n                        vowel_dict[index] = [1]\n                else:\n                    try:\n                        vowel_dict[index].append(0)\n                    except:\n                        vowel_dict[index] = [0]\n            if index + 1 < len(test_str):\n                if test_str[index + 1] in vowels:\n                    try:\n                        vowel_dict[index + 1].append(1)\n                    except:\n                        vowel_dict[index + 1] = [1]\n                else:\n                    try:\n                        vowel_dict[index + 1].append(0)\n                    except:\n                        vowel_dict[index + 1] = [0]\n            if index - 1 > -1:\n                if test_str[index - 1] in vowels:\n                    try:\n                        vowel_dict[index - 1].append(1)\n                    except:\n                        vowel_dict[index - 1] = [1]\n                else:\n                    try:\n                        vowel_dict[index - 1].append(0)\n                    except:\n                        vowel_dict[index - 1] = [0]\n    return vowel_dict\n",
        "num_ids": 422
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    neighbors = []\n    num_vowels = 0\n    for char in test_str:\n        if char in vowels:\n            neighbors.append(char)\n    for char in neighbors:\n        if neighbors.count(char) > 1:\n            num_vowels += 1\n    print(num_vowels)\n",
        "num_ids": 94
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    print(sum)\n    \nif __name__ == '__main__': \n    find_sum([1, 2, 3, 4, 5, 6, 6, 7, 8]) \n    find_sum([1, 2, 3, 4, 5]) \n    find_sum([1, 2, 2, 3, 4, 5]) \n    find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 137
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            x = x + i\n    return x\n",
        "num_ids": 37
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    # Write your logic here\n    for i in arr:\n        if arr.count(i) == 1:\n            sum = sum + i\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr: \n        if arr.count(i) == 1:\n            sum+=i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # return sum(set(arr)) # using the set() method\n    # without using the set() method\n    \n    # create an empty dictionary\n    sum_dic = {}\n    \n    # iterate the elements of list and check if the current value is in the dictionary\n    for elem in arr:\n        if elem in sum_dic:\n            sum_dic[elem] += 1\n        else:\n            sum_dic[elem] = 1\n            \n    # get the sum\n    sum_final = sum(elem for elem in sum_dic.values())\n    \n    return sum_final\n    \n    \ndef find_sum2(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # create an empty dictionary\n    sum_dic = {}\n    \n    # iterate the elements of list and check if the current value is in the dictionary\n    for elem in arr:\n        if elem in sum_dic:\n            sum_dic[elem] += 1\n        else:\n            sum_dic[elem] = 1\n            \n    # get the sum\n    sum_final = sum(elem for elem in sum_dic.values())\n    \n    return sum_final\n    \n    \ndef find_sum3(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    return sum(set(arr)) # using the set() method\n    \n    \ndef find_sum4(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # create an empty dictionary\n    sum_dic = {}\n    \n    # iterate the elements of list and check if the current value is in the dictionary\n    for elem in arr:\n        if elem in sum_dic:\n            sum_dic[elem] += 1\n        else:\n            sum_dic[elem] = 1\n            \n    # get the sum\n    sum_final = sum(elem for elem in sum_dic.values())\n    \n    return sum_final\n    \n    ",
        "num_ids": 127
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # split the list into two part\n    sum_list_1 = [i for i in arr if arr.count(i)==1]\n    sum_list_2 = [j for j in arr if arr.count(j)>1]\n",
        "num_ids": 59
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if arr.count(i)>1:\n            sum+=i\n        else:\n            pass\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # initialize a set\n    my_set = set() \n    # traverse the list\n    for i in arr:\n    # check if i is already in set\n        if i in my_set:\n            continue\n        else:\n        # add i to the set\n            my_set.add(i) \n",
        "num_ids": 75
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Use of set() to remove duplicates \n    # and then iterate through the list \n    # to find sum of the non-repeated \n    # elements.\n    return sum(set(arr))\n",
        "num_ids": 52
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n    # list1 = list(list1)\n    # i = 0\n    # while i < len(list1):\n    #     if i < len(list1)-1 and list1[i] == list1[i+1]:\n    #         list1.pop(i)\n    #     else:\n    #         i += 1\n    # return list1\n",
        "num_ids": 106
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    res = [[key] + list(group) for key, group in groups]\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    n = len(list1)\n    i = 0\n    while i < n:\n        if i+1 < n and list1[i] == list1[i+1]:\n            # to avoid the case like [2,2,2,2,3]\n            list1[i:i+2] = [list1[i]+1]\n            i += 1\n        i += 1\n    return list1\n",
        "num_ids": 106
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packed_list = []\n    for key, group in groupby(list1, key = lambda x: x):\n        packed_list.append(list(group))\n",
        "num_ids": 41
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_with_consecutive_duplicates = []\n    for key, value in groupby(list1):\n        list_with_consecutive_duplicates.append(list(value))\n    return list_with_consecutive_duplicates\n",
        "num_ids": 64
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = list1.copy()\n    list1.sort()\n    list1 = list(groupby(list1))\n    list1 = list(zip(*[(i,sum(1 for _ in g)) for i, g in list1]))[0]\n    return list1\n",
        "num_ids": 70
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(list1):\n        print(list(g))\n",
        "num_ids": 23
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    final = []\n    prev = None\n    for k, g in groupby(list1):\n        if prev is None:\n            prev = k\n            final.append(list(g))\n        elif k-prev == 1:\n            final[-1].append(k)\n            prev = k\n        else:\n            final.append([k])\n            prev = k\n    return final\n",
        "num_ids": 101
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[key, len(list(group))] for key, group in groupby(list1)]\n",
        "num_ids": 26
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    unique_list_dict = {}\n    for item in list1:\n        if item in unique_list:\n            continue\n        else:\n            unique_list.append(item)\n    for item in unique_list:\n        unique_list_dict[item] = list1.count(item)\n    return unique_list_dict\n",
        "num_ids": 87
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    temp_list = list1.copy()\n    new_list = list()\n    for i in range(len(temp_list)):\n        list_copy = list(temp_list[i])\n        list_copy.sort()\n        new_list.append(list_copy)\n    new_list = tuple(new_list)\n    new_list = list(new_list)\n    new_list.sort()\n    count_list = list()\n    for i in range(len(new_list)):\n        if new_list[i] not in count_list:\n            count_list.append(new_list[i])\n    count_list = tuple(count_list)\n    count_list = list(count_list)\n    counter = dict()\n    for i in range(len(count_list)):\n        counter[count_list[i]] = 0\n    for i in range(len(new_list)):\n        for j in range(len(count_list)):\n            if new_list[i] == count_list[j]:\n                counter[count_list[j]] += 1\n    return counter\n",
        "num_ids": 268
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def create_tuple(list1):\n        list_tup = []\n        for i in list1:\n            list_tup.append(tuple(i))\n        return list_tup\n    unique_tup = create_tuple(list1)\n    unique_tup = set(unique_tup)\n    unique_tup = list(unique_tup)\n    output_dict = {}\n    for i in unique_tup:\n        output_dict[i] = list1.count(i)\n    return output_dict\n",
        "num_ids": 132
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for item in list1:\n        dict[tuple(item)] = list1.count(item)\n    return dict\n    \n    \ndef is_anagram(word1, word2):\n    '''\n    Write a function to determine if two words are anagrams. An anagram is a word that can be formed by rearranging the letters of another word. The rearrangement must be done in such a way that the same letters are used in the same order.\n    '''\n    return sorted(word1) == sorted(word2)\n    \n    \ndef key_frequency(string):\n    '''\n    Write a function that takes a string as an argument and returns a dictionary with the keys being the letters of the string, and the values being how many times each letter appears in the string.\n    '''\n    dict = {}\n    for char in string:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    return dict\n",
        "num_ids": 45
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return len(set([tuple(item) for item in list1]))\n",
        "num_ids": 21
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # your code here\n    d = {}\n    for item in list1:\n        if type(item) == list:\n            item = tuple(item)\n            if item not in d:\n                d[item] = 0\n            d[item] += 1\n    return d\n",
        "num_ids": 67
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for sublist in list1:\n        if sublist not in unique_list:\n            unique_list.append(sublist)\n    for sublist in unique_list:\n        unique_list.append(tuple(sublist))\n    dictionary = {}\n    for item in unique_list:\n        dictionary[item] = list1.count(item)\n    return dictionary\nprint(unique_sublists([[1, 2, 3], [4, 5, 6], [4, 7, 8], [9]]))\n",
        "num_ids": 131
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for sub_list in list1:\n        tuple_sub_list = tuple(sub_list)\n        if tuple_sub_list not in list_dict:\n            list_dict[tuple_sub_list] = 1\n        else:\n            list_dict[tuple_sub_list] = list_dict[tuple_sub_list] + 1\n    return list_dict\n",
        "num_ids": 100
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #new = []\n    #for i in list1:\n    #    if i not in new:\n    #        new.append(i)\n    #return len(new)\n    return len(set(tuple(x) for x in list1))\n",
        "num_ids": 63
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = list1[:]\n    unique_list = []\n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n    unique_list = tuple(unique_list)\n    dic = {}\n    for i in unique_list:\n        dic[i] = list1.count(i)\n    return dic\n",
        "num_ids": 93
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = combinations(test_list, 2)\n    comb_sums = [x for x in combs]\n    return comb_sums\ndef find_invalid_number(numbers, preamble_length):\n    '''\n    Write a function to find the invalid number in the list of numbers. https://www.geeksforgeeks.org/find-the-invalid-number/\n    '''\n    for i in range(len(numbers)):\n        if i <= preamble_length:\n            continue\n        else:\n            # print(numbers[i])\n            preamble = numbers[i-preamble_length:i]\n            # print(preamble)\n            combs = find_combinations(preamble)\n            for comb in combs:\n                # print(comb)\n                if comb[0] + comb[1] == numbers[i]:\n                    # print(f'{numbers[i]} is equal to {comb[0]} + {comb[1]}')\n                    pass\n                else:\n                    # print(f'{numbers[i]} is not equal to {comb[0]} + {comb[1]}')\n                    return numbers[i]\n",
        "num_ids": 187
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = [i for i in test_list if type(i) is tuple]\n    sum_list = [sum(i) for i in sum_list]\n    sum_list = set(sum_list)\n    sum_list = list(sum_list)\n    sum_list.sort()\n    # sum_list = list(set([sum(i) for i in test_list]))\n    # print(sum_list)\n    comb_list = []\n    for i in sum_list:\n        combs = combinations(sum_list, i)\n        for j in combs:\n            if sum(j) == i:\n                combs = set(combs)\n                combs = list(combs)\n                # print(combs)\n                if combs not in comb_list:\n                    comb_list.append(combs)\n    print(comb_list)\n",
        "num_ids": 211
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print(combinations(test_list, 3))\n",
        "num_ids": 15
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = [tuple(test_list)]\n    combinations = [sum(c) for c in combinations(test_list,2)]\n    return combinations\n",
        "num_ids": 41
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize an empty list\n    result = []\n    # find all combinations of sum using\n    # combinations in itertools and append\n    # that sum to result\n    # Slicing with tuple\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list, i):\n            result.append(j)\n    # printing result\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in test_list:\n        print(i)\n    # list_com = []\n    # for i in test_list:\n    #     list_com.extend(combinations(i, 2))\n    # return list_com\n",
        "num_ids": 60
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = combinations(test_list, 2) \n    print(\"The list of combinations are:\") \n    for x in list(comb): \n        print(x) \n    print(\"\\n\") \n    #for i in range(len(test_list)):\n    #    com = combinations(test_list, i + 1) \n    #    for x in list(com): \n    #        print(x) \n    #print(\"\\n\") \n    #for i in range(len(test_list)):\n    #    comb = combinations(test_list, i + 1) \n    #    for x in list(comb): \n    #        print(x) \n    #print(\"\\n\") \n    #for i in range(len(test_list)):\n    #    com = combinations(test_list, i + 1) \n    #    for x in list(com): \n    #        print(x) \n",
        "num_ids": 229
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of tuples\n    # test_list = [(4, 7, 2), (4, 10, 8), (5, 6, 7), (7, 6, 6), (7, 7, 5)]\n    tuples_set = set()\n    for tuple_ in test_list:\n        tuples_set.add(tuple_)\n    \n    # # convert the set to list\n    # tuples_list = list(tuples_set)\n    \n    # # define a function to get all combinations of sum of tuples\n    # def get_combinations(data, target):\n    #     result = []\n    #     for i in range(len(data)):\n    #         if data[i][0] + data[i][1] == target:\n    #             result.append(data[i])\n    #     return result\n    \n    # # find the sum of all combinations\n    # # for example, if we have three tuples (4, 7, 2), (4, 10, 8), (5, 6, 7)\n    # # then our combinations will be [(4, 7, 2), (4, 10, 8), (5, 6, 7)]\n    # # and we need to find the tuple (4, 7, 2)\n    # for target in range(1, 11):\n    #     result = get_combinations(tuples_list, target)\n    #     if result:\n    #         print(result)\n        \n    '''\n    Write a function to find the combinations of sums of two tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of tuples\n    # test_list = [(4, 7, 2), (4, 10, 8), (5, 6, 7), (7, 6, 6), (7, 7, 5)]\n    tuples_set = set()\n    for tuple_ in test_list:\n        tuples_set.add(tuple_)\n    \n    # # convert the set to list\n    # tuples_list = list(tuples_set)\n    \n    # # define a function to get all combinations of sum of tuples\n    # def get_combinations(data, target):\n    #     result = []\n    #     for i in range(len(data)):\n    #         if data[i][0] + data[i][1] == target:\n    #             result.append(data[i])\n    #     return result\n    \n    # # find the sum of all combinations\n    # # for example, if we have three tuples (4, 7, 2), (4, 10, 8), (5, 6, 7)\n    # # then our combinations will be [(4, 7, 2), (4, 10, 8), (5, 6, 7)]\n    # # and we need to find the tuple (4, 7, 2)\n    # for target in range(1, 11):\n    #     result = get_combinations(tuples_list, target)\n    #     if result:\n    #         print(result)\n",
        "num_ids": 341
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print('find_combinations: ',test_list)\n    #print(test_list)\n    list = list(combinations(test_list,2))\n    print(list)\n    return list\n",
        "num_ids": 50
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #Return all combinations of sum using tuples from the given list\n    comb_list = list(combinations(test_list, 3))\n    return comb_list\n",
        "num_ids": 40
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n < 1): \n        return 0\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                count = count + 1\n            else: \n                count = count + 2\n    if (count % 2 == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 108
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count+=1\n    if count % 2 == 0:\n        return True\n    else :\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1,n+1): \n        if n % i == 0 : \n            count = count + 1 \n    if count % 2 == 0 : \n        return True \n    else : \n        return False \n",
        "num_ids": 65
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1) : \n        if (n % i == 0) : \n            divisors += 1\n    if divisors % 2 == 0 : \n        print('Even')\n    else : \n        print('Odd')\n",
        "num_ids": 73
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 0\n    for i in range(1,int(math.sqrt(n))+1): \n        if (n % i == 0) : \n            if (n / i == i) : \n                c+= 1\n            else : \n                c+= 2\n    return c \ndef first_10_primes(): \n    '''\n    Print the first 10 prime numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-14.php\n    '''\n    n = 2\n    while(n < 10): \n        if (count_divisors(n) > 1): \n            print(n, end = \" \") \n        n += 1\ndef factorial(n): \n    '''\n    Write a python function to print the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-15.php\n    '''\n    f = 1\n    for i in range(1, n + 1): \n        f = f * i \n    return f \ndef is_leap_year(year): \n    '''\n    Write a python function to check whether a year is leap year or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-16.php\n    '''\n    if(year%4==0 and year%100!=0 or year%400==0): \n        return True\n    return False\ndef triangle_number(n): \n    '''\n    Write a python function to print the sum of first n natural numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-17.php\n    '''\n    t = 0\n    for i in range(1, n + 1): \n        t = t + i \n    return t \ndef prime_factors(n): \n    '''\n    Write a python function to print the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-18.php\n    '''\n    c = 0\n    while(n % 2 == 0): \n        print(2, end = \" \") \n        c += 1\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while(n % i == 0): \n            print(i, end = \" \") \n            c += 1\n            n = n / i \n    if(n > 2): \n        print(n, end = \" \") \n        c += 1\n    return c \ndef fibonacci(n): \n    '''\n    Write a python function to print the fibonacci series upto n terms. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-19.php\n    '''\n    a = 0\n    b = 1\n    if(n < 0): \n        return False\n    elif(n == 0): \n        return a\n    elif(n == 1): \n        return b\n    else: \n        for i in range(2, n): \n            c = a + b \n            a = b \n            b = c \n        return b \ndef print_triangular_numbers(n): \n    '''\n    Write a python function to print the first n triangular numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-20.php\n    '''\n    t = 0\n    for i in range(1, n + 1): \n        t = t + i \n        print(t, end = \" \") \ndef print_fibonacci_series(n): \n    '''\n    Write a python function to print the first n fibonacci numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    a = 0\n    b = 1\n    if(n < 0): \n        return False\n    elif(n == 0): \n        return a\n    elif(n == 1): \n        return b\n    else: \n        for i in range(2, n): \n            c = a + b \n            a = b \n            b = c \n        return c \ndef reverse_string(s): \n    '''\n    Write a python function to print a string in reverse order. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-22.php\n    '''\n    print(s[::-1], end = \" \") \ndef change_case(s): \n    '''\n    Write a python function to print the string with first character of each word capitalized. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    print(s.title()) \ndef check_pangram(s): \n    '''\n    Write a python function to print whether a string is a pangram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 0\n    for i in range(97, 123): \n        if chr(i) in s: \n            c = c + 1\n    if c == 26: \n        return True\n    return False \ndef palindrome(s): \n    '''\n    Write a python function to print whether a string is a palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    s1 = \"\" \n    s2 = \"\" \n    for i in range(len(s)): \n        if (s[i]!= \" \"): \n            s1 = s1 + s[i] \n    for j in range(len(s) - 1, -1, -1): \n        if (s[j]!= \" \"): \n            s2 = s2 + s[j] \n    if (s1 == s2): \n        return True\n    return False \ndef palindrome_number(n): \n    '''\n    Write a python function to check whether the number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if (n < 0): \n        return False\n    else: \n        r = 0\n        temp = n \n        while(n > 0): \n            rem = n % 10\n            r = (r * 10) + rem \n            n = n // 10\n        if (temp == r): \n            return True\n        return False\ndef is_perfect_number(n): \n    '''\n    Write a python function to print whether a number is a perfect number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum = 0\n    for i in range(1, n): \n        if (n % i == 0): \n            sum += i \n    return sum == n \ndef print_multiplication_table(n): \n    '''\n    Write a python function to print multiplication table of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    for i in range(1, n + 1): \n        for j in range(1, i + 1): \n            print(str(j * i) + \" \", end = \" \") \n        print() \ndef print_multiplication_table_2(n): \n    '''\n    Write a python function to print multiplication table of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''",
        "num_ids": 1
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            sum += 1\n    return sum\ndef sum_divisors(n) : \n    '''\n    Write a python function to sum of divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            sum += i\n    return sum\ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if count_divisors(n) > 2 : \n        return False\n    else : \n        return True\ndef is_square(n) : \n    '''\n    Write a python function to check whether a number is a square number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if math.sqrt(n).is_integer() : \n        return True\n    else : \n        return False\ndef is_power(a,b) : \n    '''\n    Write a python function to check whether a number is a power of another number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if a == b : \n        return False\n    elif a == 1 or b == 1 : \n        return False\n    elif a == b or a % b == 0 : \n        return True\n    elif a < b : \n        return False\n    else : \n        while a >= b : \n            if a % b == 0 : \n                return True\n            else : \n                a = int(a / b)\n    return False\ndef is_power_of_2(n) : \n    '''\n    Write a python function to check whether a number is a power of 2. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n!= 0 and (n & (n - 1) == 0)\ndef prime_factors(n) : \n    '''\n    Write a python function to find the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    factors = []\n    for i in range(2,n+1) : \n        if n % i == 0 : \n            if is_prime(i) == True : \n                factors.append(i)\n    return factors\ndef palindrome_prime(n) : \n    '''\n    Write a python function to check whether a number is a palindrome prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == int(str(n)[::-1]) : \n        if is_prime(n) : \n            return True\n    return False\ndef sum_prime_factors(n) : \n    '''\n    Write a python function to sum of prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    prime_factors = prime_factors(n)\n    for i in prime_factors : \n        sum += i\n    return sum\ndef max_prime_factor(n) : \n    '''\n    Write a python function to get the max prime factor of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    max = 0\n    prime_factors = prime_factors(n)\n    for i in prime_factors : \n        if i > max : \n            max = i\n    return max\ndef print_primes(n) : \n    '''\n    Write a python function to print all the prime numbers in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(2,n+1) : \n        if is_prime(i) == True : \n            print(i)\ndef print_prime_factors(n) : \n    '''\n    Write a python function to print all the prime factors in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    prime_factors = prime_factors(n)\n    for i in range(len(prime_factors)) : \n        print(prime_factors[i])\ndef print_sum_prime_factors(n) : \n    '''\n    Write a python function to print the sum of prime factors in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    prime_factors = prime_factors(n)\n    sum = 0\n    for i in range(len(prime_factors)) : \n        sum += prime_factors[i]\n    print(sum)\ndef print_max_prime_factor(n) : \n    '''\n    Write a python function to print the max prime factor in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    prime_factors = prime_factors(n)\n    max = 0\n    for i in range(len(prime_factors)) : \n        if prime_factors[i] > max : \n            max = prime_factors[i]\n    print(max)\ndef print_palindrome_primes(n) : \n    '''\n    Write a python function to print all palindrome primes in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(2,n+1) : \n        if palindrome_prime(i) == True : \n            print(i)\ndef print_palindrome_prime_factors(n) : \n    '''\n    Write a python function to print all palindrome prime factors in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(2,n+1) : \n        prime_factors = prime_factors(i)\n        if palindrome_prime(i) == True : \n            for j in range(len(prime_factors)) : \n                if palindrome_prime(prime_factors[j]) == True : \n                    print(prime_factors[j])\ndef print_sum_palindrome_prime_factors(n) : \n    '''\n    Write a python function to print the sum of palindrome prime factors in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(2,n+1) : \n        prime_factors = prime_factors(i)\n        if palindrome_prime(i) == True : \n            for j in range(len(prime_factors)) : \n                if palindrome_prime(prime_factors[j]) == True : \n                    print(prime_factors[j])\ndef print_sum_palindrome_prime_factors_2(n) : \n    '''\n    Write a python function to print the su",
        "num_ids": 11
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            count = count + 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 62
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            count += 1\n    if count % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) : \n        return 1\n    count = 1\n    sq = int(math.sqrt(n))\n    for i in range(2, sq + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count += 1\n            else : \n                count += 2\n    return count \n",
        "num_ids": 93
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if (n % i == 0) :\n            count += 1\n    return count\ndef sieve_of_eratosthenes(n):\n    '''\n    Write a python function to find prime numbers till n, where n is a user input. https://www.w3resource.com/python-exercises/math/python-math-exercise-4.php\n    '''\n    primes = [True] * (n+1) \n    primes[0] = False \n    primes[1] = False\n    for i in range(2,int(math.sqrt(n))+1): \n        for j in range(i * 2, n+1, i): \n            primes[j] = False\n    return primes\ndef smallest_multiple(n):\n    '''\n    Write a python function to find the smallest multiple of the numbers 1-n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    prime = sieve_of_eratosthenes(n)\n    sm = 1\n    for i in range(1,n+1):\n        if prime[i] == True:\n            sm = sm * i \n    return sm \ndef greatest_common_divisor(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers. https://www.w3resource.com/python-exercises/math/python-math-exercise-16.php\n    '''\n    while b!= 0: \n        temp = a \n        a = b \n        b = temp % b\n    return a \ndef print_digits(n):\n    '''\n    Write a python function to print all the digits of a number. https://www.w3resource.com/python-exercises/math/python-math-exercise-19.php\n    '''\n    for i in range(0,n+1):\n        print(i)\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/math/python-math-exercise-6.php\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i \n    if sum == n:\n        return True\n    return False\ndef is_permutation(a,b):\n    '''\n    Write a python function to check whether two numbers are permutations of each other or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if len(a)!= len(b):\n        return False\n    a = list(a)\n    b = list(b)\n    a.sort()\n    b.sort()\n    if a == b:\n        return True\n    return False\ndef leap_year(year):\n    '''\n    Write a python function to check whether a given year is leap year or not. https://www.w3resource.com/python-exercises/math/python-math-exercise-28.php\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef fizz_buzz(n):\n    '''\n    Write a python function to print numbers from 1 to n. https://www.w3resource.com/python-exercises/math/python-math-exercise-34.php\n    '''\n    for i in range(1,n+1):\n        if i % 15 == 0:\n            print('fizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)\ndef palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not. https://www.w3resource.com/python-exercises/math/python-math-exercise-33.php\n    '''\n    n = str(n)\n    return n == n[::-1]\ndef nth_fibonacci(n):\n    '''\n    Write a python function to find the nth term of fibonacci sequence. https://www.w3resource.com/python-exercises/math/python-math-exercise-2.php\n    '''\n    return int(((((1+5**0.5)/2)**n)-(((1-5**0.5)/2)**n))/5**0.5)\ndef print_words(s):\n    '''\n    Write a python function to print words of a given string starting from the second word. https://www.w3resource.com/python-exercises/strings/python-data-type-string-exercise-10.php\n    '''\n    s = s.split(\" \")\n    print(s[1:])\ndef reverse_string(s):\n    '''\n    Write a python function to reverse the words of a given string. https://www.w3resource.com/python-exercises/strings/python-data-type-string-exercise-14.php\n    '''\n    s = s.split(\" \")\n    new_str = ''\n    for i in s:\n        new_str = new_str +'' + i\n    return new_str.strip()\ndef check_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not. https://www.w3resource.com/python-exercises/math/python-math-exercise-6.php\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef frequency(s):\n    '''\n    Write a python function to find the frequency of each character of a string. https://www.w3resource.com/python-exercises/strings/python-string-exercise-4.php\n    '''\n    s = list(s)\n    dic = {}\n    for i in s:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\ndef phone_number(s):\n    '''\n    Write a python function to check whether a string is a valid phone number or not. https://www.w3resource.com/python-exercises/regex/python-regex-exercise-10.php\n    '''\n    if len(s)!= 12:\n        return False\n    if s[0]!= '+':\n        return False\n    if s[1]!= '7':\n        return False\n    for i in s[2:]:\n        if not i.isdigit():\n            return False\n    return True\ndef number_pattern(n):\n    '''\n    Write a python function to print the patterns for a given number. https://www.w3resource.com/python-exercises/string/python-string-exercise-10.php\n    '''\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '11'\n    s = ''\n    for i in range(n):\n        s = s + str(n)\n    return s\ndef check_pangram(s):\n    '''\n    Write a python function to check whether a string is a pangram or no",
        "num_ids": 19
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            sum += arr[j]\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            length_sum += arr[j]\n    return length_sum\n",
        "num_ids": 51
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # split array into chunks of odd length\n    # split array into chunks of even length\n",
        "num_ids": 22
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr = sorted(arr)\n    sum = 0\n    for i in range(0, len(arr)):\n        if i%2 == 0:\n            sum = sum + arr[i]\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)%2!= 0:\n        return sum(arr[len(arr)//2:])\n    else:\n        return sum(arr[len(arr)//2 - 1:len(arr)//2 + 1])\n",
        "num_ids": 59
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 34
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if len(arr[i:j+1]) % 2!= 0:\n                sum_of_odd += sum(arr[i:j+1])\n    return sum_of_odd\n",
        "num_ids": 82
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([arr[i] for i in range(len(arr)) if i % 2 == 0])\n",
        "num_ids": 27
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    diff = max_val - min_val\n",
        "num_ids": 66
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    diff = max_val - min_val\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b)/diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r)/diff) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g)/diff) + 240) % 360\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff/max_val)*100\n    v = max_val*100\n    return h, s, v\n",
        "num_ids": 216
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 196
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = int(h)\n    s = int(s)\n    v = int(v)\n    return h, s, v\n",
        "num_ids": 224
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    min_color = min(r, g, b)\n    max_color = max(r, g, b)\n    delta = max_color - min_color\n    \n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = (60 * ((g-b)/delta) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b-r)/delta) + 120) % 360\n    elif max_color == b:\n        h = (60 * ((r-g)/delta) + 240) % 360\n    else:\n        pass\n    \n    v = max_color\n    s = 0 if max_color == 0 else delta/max_color\n    return (h, s, v)\n",
        "num_ids": 214
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 196
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    prod_even_odd = 1\n    for i in even_list:\n        prod_even_odd = prod_even_odd*i\n    for i in odd_list:\n        prod_even_odd = prod_even_odd*i\n    return prod_even_odd\n",
        "num_ids": 125
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    prod = 1\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if even:\n        for i in even:\n            prod *= i\n    if odd:\n        for i in odd:\n            prod *= i\n    return prod\n",
        "num_ids": 97
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1 = [x for x in list1 if x % 2!= 0]\n    list2 = [x for x in list1 if x % 2 == 0]\n    product = 1\n    for i in list2:\n        product *= i\n    for i in list1:\n        product *= i\n    print(product)\n",
        "num_ids": 80
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for num in list1:\n        if num % 2 == 0:\n            prod *= num\n        else:\n            prod *= num\n    return prod\n",
        "num_ids": 47
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list2=[]\n    for i in list1:\n        if i%2==0:\n            list2.append(i)\n    print(list2)\n    if len(list2)>=2:\n        return list2[0]*list2[1]\n    else:\n        return 0\n",
        "num_ids": 75
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i % 2 == 0:\n            result *= i\n    print(result)\n",
        "num_ids": 36
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    product = 1\n    for i in range(len(even_list)):\n        product = product * even_list[i]\n    for i in range(len(odd_list)):\n        product = product * odd_list[i]\n    return product\n",
        "num_ids": 133
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in range(len(list1)):\n        if i%2==0:\n            prod*=list1[i]\n        else:\n            prod*=list1[i]\n    return prod\n",
        "num_ids": 60
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    product = 1\n    for j in even_list:\n        product = product * j\n    for k in odd_list:\n        product = product * k\n    return product\n",
        "num_ids": 98
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 1\n    else:\n        product = 1\n        for num in list1:\n            if num % 2 == 0:\n                product *= num\n            else:\n                product *= num\n    return product\n",
        "num_ids": 63
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(', '))\n",
        "num_ids": 23
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.replace('(','').replace(')','').split(', '))\n",
        "num_ids": 35
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = list(test_str)\n    try:\n        test_str = list(map(int, test_str))\n        print(tuple(test_str))\n    except:\n        print(\"test_str = \", test_str)\n",
        "num_ids": 62
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str_int = [int(i) for i in test_str.split(',')]\n    return tuple_str_int\n",
        "num_ids": 36
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int,test_str.split(\",\")))\n    except ValueError:\n        print(\"String cannot be converted to integer tuple!\")\n",
        "num_ids": 42
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(',')\n    test_list = [int(i) for i in test_list]\n    return tuple(test_list)\n    \ndef format_str(test_str):\n    '''\n    Write a function to format a string to title case.\n    '''\n    return test_str.title()\n",
        "num_ids": 11
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(','')\n    test_str = test_str.replace(')','')\n    test_str = test_str.replace(',','')\n    return tuple(test_str)\n",
        "num_ids": 59
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(e) for e in test_str[1:-1].split(','))\n",
        "num_ids": 26
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low, high = 0, len(a)\n    while low < high:\n        mid = low + (high - low)//2\n        if x < a[mid]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n",
        "num_ids": 63
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    b = bisect.bisect(a, x)\n    if b == len(a):\n        return b\n    else:\n        return b + 1\n",
        "num_ids": 39
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] > x:\n            return i\n    return n\n",
        "num_ids": 37
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if a[i] < x:\n            return i\n    return len(a)\n",
        "num_ids": 35
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]: return 0\n    if x > a[-1]: return len(a)\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 48
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    l, r = 0, len(a) - 1\n    while r - l > 1:\n        m = (l + r) // 2\n        if a[m] < x:\n            l = m\n        else:\n            r = m\n    if a[l] < x:\n        return l + 1\n    if a[r] < x:\n        return r + 1\n    return r\n",
        "num_ids": 106
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0 or x < a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    else:\n        index = bisect.bisect(a, x)\n        return index\n",
        "num_ids": 61
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}', text)\n",
        "num_ids": 18
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    matches = pattern.findall(text)\n    return \"Matches: {}\".format(len(matches))\n",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('ab{3}')\n    matches = pattern.findall(text)\n    return matches\n",
        "num_ids": 32
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search('ab{3}', text)\n    return result!= None\n",
        "num_ids": 24
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}', text) is not None\n",
        "num_ids": 21
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    patterns = ['a+b{3}']\n    if re.search(patterns[0], text):\n        return 'Matched!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 48
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 35
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.findall(r'ab{3}', text)\n    return pattern\n",
        "num_ids": 24
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r\"ab{3}\", text)\n    if match:\n        return match.group()\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return bool(re.search(r'ab{3}', text))\n",
        "num_ids": 20
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = ()\n    for i in test_list:\n        test_tuple = test_tuple + (i,)\n    return test_tuple + (test_str,)\n",
        "num_ids": 47
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if not test_list:\n        if test_str.startswith('(') and test_str.endswith(')'):\n            return tuple(test_str[1:-1].split(','))\n        return ()\n    return new_tuple(test_list[1:], test_str) + (new_tuple(test_list[1:], test_str),)\n",
        "num_ids": 93
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = tuple(test_list)\n    tup = tup + (test_str,)\n    return tup\n    \n    \ndef new_list(tup):\n    '''\n    Write a function to create a new list from the given tuple.\n    '''\n    return list(tup)\n",
        "num_ids": 10
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str.split(' ')), test_list\n",
        "num_ids": 18
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # code goes here\n",
        "num_ids": 8
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_str = test_str.split(\",\")\n    for i in range(len(new_str)):\n        new_str[i] = int(new_str[i])\n    new_tuple = tuple(new_str)\n    return new_tuple\n",
        "num_ids": 67
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)\n",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print(tuple(test_str))\n    print(tuple(test_list))\n",
        "num_ids": 24
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    my_tuple = ()\n    return my_tuple\n",
        "num_ids": 17
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([i%2==0 for i,v in enumerate(nums)])\n",
        "num_ids": 24
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    count = 0\n    for index in range(len(nums)):\n        if index % 2 == 0 and nums[index] % 2 == 0:\n            count += 1\n    if count == len(nums):\n        print(\"The given list contains even numbers\")\n    else:\n        print(\"The given list does not contains even numbers\")\n",
        "num_ids": 114
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\nprint(even_position([1, 2, 3, 4, 5, 6, 7]))\nprint(even_position([0, 2, 4, 6, 8, 10]))\n",
        "num_ids": 88
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_check = all(nums[i]%2==0 for i in range(0, len(nums), 2))\n    if even_check:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flatten_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            flatten_tup.extend(i)\n        else:\n            flatten_tup.append(i)\n    return tuple(flatten_tup)\n",
        "num_ids": 71
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    import copy\n    final_list = []\n    for i in test_tup:\n        if type(i) == tuple:\n            pass\n        else:\n            final_list.append(i)\n    return tuple(final_list)\n",
        "num_ids": 59
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = []\n    for i in test_tup:\n        if type(i) == tuple:\n            test_list.append(i[0])\n        else:\n            test_list.append(i)\n    return tuple(test_list)\n",
        "num_ids": 64
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [t for t in test_tup if isinstance(t, tuple)]\n",
        "num_ids": 22
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (test_tup)\n    \n    ",
        "num_ids": 14
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = []\n    for tup in test_tup:\n        if tup not in test_list:\n            test_list.append(tup)\n    return tuple(test_list)\n",
        "num_ids": 51
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # tup=[]\n    # for i in test_tup:\n    #     if type(i)==type(test_tup):\n    #         tup.extend(i)\n    #     else:\n    #         tup.append(i)\n    # return tup\n",
        "num_ids": 72
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for tup in test_tup:\n        if type(tup) == tuple:\n            continue\n        else:\n            new_tup += (tup,)\n    return new_tup\n",
        "num_ids": 57
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            new_tup = new_tup + (tup,)\n        else:\n            new_tup = new_tup + remove_nested(tup)\n    return new_tup\n",
        "num_ids": 79
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = [test_tup]\n    final_list = [i for i in test_list if not isinstance(i, tuple)]\n    return tuple(final_list)\n",
        "num_ids": 46
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) == type([]):\n            counter += 1\n    return counter\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for i in input_list: \n        if isinstance(i, list): \n            result += 1\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list) \n",
        "num_ids": 12
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n    \ndef string_rotation(s1, s2):\n    '''\n    Given 2 strings, write a Python function to decide if 2 strings are rotations of each other or not.\n    Examples:\n    Input    : s1 = \"ATAT\", s2 = \"TATA\"\n    Output    : True\n    Input    : s1 = \"ATAT\", s2 = \"TAAG\"\n    Output    : False\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    temp = s1 + s1\n    return temp.count(s2) > 0\n    \ndef sum_of_all_numbers(input_list):\n    '''\n    Write a python function that accepts a list of integers and returns the sum of all the integers in the list.\n    '''\n    result = 0\n    for i in input_list:\n        result += i\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    print(\"Total number of lists:\",len(input_list))\n",
        "num_ids": 18
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) == list:\n            counter += 1\n    return counter\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if isinstance(i,list):\n            counter += 1\n    return counter\n",
        "num_ids": 35
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = (start+end)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                start = mid+1\n        elif arr[mid]>x:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\nprint(last([1,2,3,3,3,3,4,5],3))\n",
        "num_ids": 138
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # arr = [5,10,15,20,25,30,35,40]\n    # x = 25\n    for i in range(len(arr)):\n        if arr[i]==x:\n            return i\n    else:\n        return -1\narr = [5,10,15,20,25,30,35,40]\nx = 25\n",
        "num_ids": 89
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def leftmost_index(arr,target):\n        left,right = 0, len(arr) - 1\n        while left <= right:\n            mid = left + (right-left)//2\n            if target > arr[mid]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n    \n    index = leftmost_index(arr,x)\n    if index == 0:\n        print(-1)\n    else:\n        print(index-1)\n",
        "num_ids": 119
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    try:\n        start = 0\n        end = len(arr)-1\n        while(start<=end):\n            mid = (start+end)//2\n            if arr[mid] == x:\n                if mid == len(arr)-1 or arr[mid+1]!= x:\n                    return mid\n                start = mid+1\n            elif arr[mid] > x:\n                end = mid-1\n            else:\n                start = mid+1\n        return -1\n    except Exception as e:\n        print(\"Error in method last : \", e)\n        return -1\n",
        "num_ids": 140
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    l=0\n    r=n-1\n    while l<=r:\n        mid=(l+r)//2\n        if arr[mid]>x:\n            r=mid-1\n        elif arr[mid]<x:\n            l=mid+1\n        else:\n            if mid==n-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                l=mid+1\n    return -1\n",
        "num_ids": 118
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if x not in arr:\n        return -1\n    left = 0\n    right = n-1\n    while right>=left:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            if mid == n-1 or arr[mid+1]!= x:\n                return mid\n            left = mid+1\n        elif arr[mid] > x:\n            right = mid-1\n        else:\n            left = mid+1\n",
        "num_ids": 123
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==x:\n            if arr[mid]==arr[high]:\n                high=high-1\n            else:\n                return mid\n        elif x>arr[mid]:\n            low=mid+1\n        else:\n            high=mid-1\n    return None\n",
        "num_ids": 103
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] > x:\n            end = mid - 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                start = mid + 1\n    return -1\n",
        "num_ids": 116
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]==x:\n            return i\n    return None\n",
        "num_ids": 32
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    first = firstOccurence(arr,x)\n    last = n - lastOccurence(arr,x)\n    return last\n",
        "num_ids": 42
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pat = r'.*a.*b'\n    print(re.findall(pat,text))\n    \n    # Write a Python function, is_palindrome(s), that takes a string as input and checks\n    # whether the string is a palindrome (a string that is the same forwards and backwards).\n    # The function should return True if the input string is a palindrome and return False if it is not.\n    \n    def is_palindrome(s):\n        s = s.replace(' ','')\n        s = s.lower()\n        return s == s[::-1]\n    \n    print(is_palindrome('radar'))\n    \n    # Write a Python function to check whether a string is a pangram or not.\n    # Note : Pangrams are words or sentences containing every letter of the alphabet at least once.\n    # For example : \"The quick brown fox jumps over the lazy dog\"\n    \n    import string\n    \n    def is_pangram(s, alphabet=string.ascii_lowercase):\n        s = s.lower()\n        s = re.sub('[^a-zA-Z]','',s)\n        return s == alphabet\n    \n    print(is_pangram(\"The quick brown fox jumps over the lazy dog\"))\n    \n    # Write a Python function to check whether a string is pangram or not. Note : Pangrams are words or sentences containing every letter of the alphabet at least once.\n    # For example : \"The quick brown fox jumps over the lazy dog\"\n    \n    import string\n    \n    def is_pangram_2(s):\n        s = s.lower()\n        s = re.sub('[^a-zA-Z]','',s)\n        if len(s) == 26:\n            return True\n        return False\n    \n    print(is_pangram_2(\"The quick brown fox jumps over the lazy dog\"))\n    \n    # Write a Python function to get a string made of its first three characters of a specified string. If the length of the string is less than 3 then return the original string.\n    \n    def first_three_chars(s):\n        if len(s) < 3:\n            return s\n        return s[:3]\n    \n    print(first_three_chars('Python'))\n    print(first_three_chars('Monty'))\n    \n    # Write a Python function to get a string made of its last three characters of a specified string. If the length of the string is less than 3 then return the original string.\n    \n    def last_three_chars(s):\n        if len(s) < 3:\n            return s\n        return s[-3:]\n    \n    print(last_three_chars('Python'))\n    print(last_three_chars('Monty'))\n    \n    # Write a Python function to reverses a string if it's length is a multiple of 4.\n    \n    def reverse_string(s):\n        if len(s) % 4 == 0:\n            return s[::-1]\n        return s\n    \n    print(reverse_string('Hello World!'))\n    print(reverse_string('Python'))\n    \n    # Write a Python function to reverses a string if it's length is a multiple of 4.\n    \n    def reverse_string_2(s):\n        return s[::-1] if len(s) % 4 == 0 else s\n    \n    print(reverse_string_2('Hello World!'))\n    print(reverse_string_2('Python'))\n    \n    # Write a Python function that takes a list and returns a new list with unique elements of the first list.\n    \n    def unique_list(l):\n        return list(set(l))\n    \n    print(unique_list([1,1,1,1,2,2,3,3,3,3,4,5]))\n    \n    # Write a Python program to print out a set containing all the colors from color_list_1 which are not present in color_list_2.\n    \n    color_list_1 = set([\"White\", \"Black\", \"Red\"])\n    color_list_2 = set([\"Red\", \"Green\"])\n    print(color_list_1 - color_list_2)\n    \n    # Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn.\n    \n    def int_to_str(n):\n        return str(n)+str(n)+str(n)\n    \n    print(int_to_str(3))\n    \n    # Write a Python program to print the even numbers from a given list.\n    \n    def print_even_numbers(l):\n        for n in l:\n            if n % 2 == 0:\n                print(n)\n    print_even_numbers([1,2,3,4,5,6,7,8,9])\n    \n    # Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically.\n    \n    def sort_words_hyphen(s):\n        return '-'.join(sorted(s.split('-')))\n    \n    print(sort_words_hyphen(\"Codewars-is-better-than-coding\"))\n    \n    # Write a Python program to print the square and cube symbol in the area of a rectangle and volume of a cylinder.\n    \n    def print_symbol(n):\n        print('\\u00b2') if n**2 == 2 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 4 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 6 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 8 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 10 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 12 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 14 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 16 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 18 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 20 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 22 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 24 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 26 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 28 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 30 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 32 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 34 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 36 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 38 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 40 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 42 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 44 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 46 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 48 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 50 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 52 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 54 else print('\\u00b3')\n        print('\\u00b2') if n**2 == 56 else print('\\u00b3')",
        "num_ids": 2002
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_start = re.compile(r'a.*?b')\n    a_start_matches = a_start.findall(text)\n    if a_start_matches:\n        return a_start_matches\n    return 'No matches found'\n",
        "num_ids": 65
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a\\S*b')\n    print(pattern.search(text))\n",
        "num_ids": 29
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.compile('a.b')\n    print(x.search(text))\n",
        "num_ids": 25
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    m = re.search('a.+b', text)\n    return m.group(0)\n",
        "num_ids": 26
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile(r'.*ab$')\n    m = p.search(text)\n    if not m:\n        print('m',m)\n        return False\n    else:\n        print('m',m)\n        return True\n",
        "num_ids": 61
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(\"^.*a.+b$\")\n    if pattern.search(text):\n        return \"Matched\"\n    else:\n        return \"Not Matched\"\n",
        "num_ids": 47
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    patt = re.compile(r'a.b$')\n    result = patt.search(text)\n    return result!= None\n",
        "num_ids": 37
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall('a.*b', text)\n    return x\n    \ndef text_start_end_any(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b' or 'e'.\n    '''\n    x = re.findall('a.*?[b|e]', text)\n    return x\n    \ndef text_start_end_specific(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b' or 'e'.\n    '''\n    x = re.findall('a.*[b|e]', text)\n    return x\n",
        "num_ids": 25
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'.*a.b$')\n    mo = regex.search(text)\n    if mo is not None:\n        print(mo.group())\n    return mo.group()\n",
        "num_ids": 53
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n    \ndef return_greatest_key(dictionary):\n    '''\n    Write function to find the key in a given dictionary with the highest value.\n    '''\n    greatest_key = None\n    greatest_value = 0\n    for key in dictionary:\n        if greatest_value < dictionary[key]:\n            greatest_value = dictionary[key]\n            greatest_key = key\n    return greatest_key\n    \ndef return_greatest_key_in_list(dictionary):\n    '''\n    Write function to return the key in a given dictionary with the highest value.\n    However, if there are multiple keys with the same highest value, return the\n    key with the smallest numerical value.\n    '''\n    greatest_value = 0\n    greatest_key = None\n    for key in dictionary:\n        if dictionary[key] > greatest_value:\n            greatest_value = dictionary[key]\n            greatest_key = key\n        elif dictionary[key] == greatest_value and key < greatest_key:\n            greatest_key = key\n    return greatest_key\n        \ndef list_of_dictionaries(list_of_lists, key):\n    '''\n    Write function to return a list of dictionaries that have the key set to\n    each element in the inner list.\n    '''\n    list_of_dicts = []\n    for row in list_of_lists:\n        row_dict = {}\n        for index in range(0, len(row)):\n            row_dict[row[index]] = row[0]\n        list_of_dicts.append(row_dict)\n    return list_of_dicts\n",
        "num_ids": 83
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict.values():\n        sum += x\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s=0\n    for k,v in dict.items():\n        s=s+v\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\nprint(return_sum({1:5, 2:3, 3:2}))\n",
        "num_ids": 45
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total = total + value\n    return total\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    summation = 0\n    for x in range(n+1):\n        if x % 2 == 1:\n            summation += x\n    return summation\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input().split())\n    if l % 2!= 0: l = l + 1\n    if r % 2!= 0: r = r - 1\n    return sum([i for i in range(l, r+1) if i % 2!= 0])\n",
        "num_ids": 71
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n) if i % 2)\n",
        "num_ids": 20
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return int((n+1)*n/2)\n",
        "num_ids": 15
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n == 0:\n        return 0\n    else:\n        for i in range(1, n+1):\n            if i%2!= 0:\n                sum += i\n        return sum\n",
        "num_ids": 54
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    if n < 1: \n        return 0\n    \n    sum = 0\n    \n    for i in range(n + 1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1)[1::2])\n",
        "num_ids": 17
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1):\n        if i%2!= 0:\n            sum += i\n    print(sum)\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2==1):\n            sum += i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in arr:\n        sum=sum+i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #start writing your code here\n    return sum(arr)\n    \ndef _count_down_from(start_number, end_number):\n    '''\n    Write a python function to count down from x to 0.\n    '''\n    #start writing your code here\n    for i in range(start_number, end_number - 1, -1):\n        print(i)\n        \ndef _count_down_by(start_number, step_number):\n    '''\n    Write a python function to count down by n.\n    '''\n    #start writing your code here\n    for i in range(start_number, -1, -step_number):\n        print(i)\n        \ndef _multiply(arr):\n    '''\n    Write a python function to multiply all numbers in an array.\n    '''\n    #start writing your code here\n    product = 1\n    for i in arr:\n        product *= i\n    return product\n    \ndef _is_member(arr, item):\n    '''\n    Write a python function to check whether an item is present in an array or not.\n    '''\n    #start writing your code here\n    return item in arr\n    \ndef _is_member_by(arr, item, index):\n    '''\n    Write a python function to check whether an item is present in an array at a given index or not.\n    '''\n    #start writing your code here\n    return item in arr[index]\n    \ndef _max(arr):\n    '''\n    Write a python function to find the maximum value in an array.\n    '''\n    #start writing your code here\n    return max(arr)\n    \ndef _min(arr):\n    '''\n    Write a python function to find the minimum value in an array.\n    '''\n    #start writing your code here\n    return min(arr)\n    \ndef _sort(arr):\n    '''\n    Write a python function to sort an array in ascending order.\n    '''\n    #start writing your code here\n    arr.sort()\n    \ndef _append(arr, item):\n    '''\n    Write a python function to append an item to the end of an array.\n    '''\n    #start writing your code here\n    arr.append(item)\n    \ndef _reverse(arr):\n    '''\n    Write a python function to reverse an array.\n    '''\n    #start writing your code here\n    arr.reverse()\n    \ndef _pop(arr):\n    '''\n    Write a python function to remove and return the last item of an array.\n    '''\n    #start writing your code here\n    return arr.pop()\n    \ndef _remove_last(arr):\n    '''\n    Write a python function to remove the last item of an array.\n    '''\n    #start writing your code here\n    return arr.pop()\n    \ndef _insert(arr, item, index):\n    '''\n    Write a python function to insert an item at a given index in an array.\n    '''\n    #start writing your code here\n    arr.insert(index, item)\n    \ndef _remove(arr, item):\n    '''\n    Write a python function to remove an item from an array.\n    '''\n    #start writing your code here\n    arr.remove(item)\n    \ndef _is_empty(arr):\n    '''\n    Write a python function to check whether an array is empty or not.\n    '''\n    #start writing your code here\n    return len(arr) == 0\n    \ndef _is_empty_by(arr, index):\n    '''\n    Write a python function to check whether an array is empty or not at a given index.\n    '''\n    #start writing your code here\n    return len(arr[index]) == 0\n    \ndef _get_index(arr, item):\n    '''\n    Write a python function to get the index of an item in an array.\n    '''\n    #start writing your code here\n    return arr.index(item)\n    \ndef _get_index_by(arr, item, index):\n    '''\n    Write a python function to get the index of an item in an array at a given index.\n    '''\n    #start writing your code here\n    return arr[index].index(item)\n    \ndef _merge(arr1, arr2):\n    '''\n    Write a python function to merge two arrays.\n    '''\n    #start writing your code here\n    arr1.extend(arr2)\n    return arr1\n    \ndef _get_last_index(arr, item):\n    '''\n    Write a python function to get the last index of an item in an array.\n    '''\n    #start writing your code here\n    return arr.index(item)\n    \ndef _get_last_index_by(arr, item, index):\n    '''\n    Write a python function to get the last index of an item in an array at a given index.\n    '''\n    #start writing your code here\n    return arr[index].index(item)\n    \ndef _create_array(n):\n    '''\n    Write a python function to create an array of n items.\n    '''\n    #start writing your code here\n    return []\n    \ndef _create_array_by(n):\n    '''\n    Write a python function to create an array of n items with values ranging from 1 to n.\n    '''\n    #start writing your code here\n    return [i for i in range(1, n + 1)]\n    \ndef _get_array_string(arr):\n    '''\n    Write a python function to get the string representation of an array.\n    '''\n    #start writing your code here\n    return str(arr)\n    \ndef _get_array_string_by(arr):\n    '''\n    Write a python function to get the string representation of an array at a given index.\n    '''\n    #start writing your code here\n    return str(arr[index])\n    \ndef _get_array_item(arr, index):\n    '''\n    Write a python function to get the specified index item of an array.\n    '''\n    #start writing your code here\n    return arr[index]\n    \ndef _get_array_item_by(arr, index):\n    '''\n    Write a python function to get the specified index item of an array at a given index.\n    '''\n    #start writing your code here\n    return arr[index][index2]\n    \ndef _get_item(arr, index):\n    '''\n    Write a python function to get the item in an array at a given index.\n    '''\n    #start writing your code here\n    return arr[index]\n    \ndef _get_item_by(arr, index):\n    '''\n    Write a python function to get the item in an array at a given index.\n    '''\n    #start writing your code here\n    return arr[index][index2]\n    \ndef _set_item(arr, index, item):\n    '''\n    Write a python function to set the item in an array at a given index.\n    '''\n    #start writing your code here\n    arr[index] = item\n    \ndef _set_item_by(arr, index, index2, item):\n    '''\n    Write a python function to set the item in an array at a given index.\n    '''\n    #start writing your code here\n    arr[index][index2] = item\n    \ndef _create_array_of_arrays(size):\n    '''\n    Write a python function to create an array of arrays of n items.\n    '''\n    #start writing your code here\n    return [[0] for i in range(size)]\n    \ndef _get_array_of_arrays_string(arr):\n    '''\n    Write a python function to get the string representation of an array of arrays.\n    '''\n    #start writing your code here\n    return str(arr)\n    \ndef _get_array_of_arrays_string_by(arr, index):\n    '''\n    Write a python function to get the string representation of an array of arrays at a given index.\n    '''\n    #start writing your code here\n    return str(arr[index])\n    \ndef _get_array_of_arrays_item(arr, index):\n    '''\n    Write a python function to get the specified index item of an array of arrays.\n    '''\n    #start writing your code here\n    return arr[index",
        "num_ids": 15
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n",
        "num_ids": 36
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n >> d == 0:\n        return n\n    else:\n        return (n << d) | (n >> (32 - d))\n",
        "num_ids": 36
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d|n>>(32-d)\n",
        "num_ids": 16
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32 - d))) & 0xffffffff\n",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n    return (n << d)|(n >> (32 - d))\n",
        "num_ids": 29
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask\n",
        "num_ids": 32
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #generate a mask with 2**d\n    mask = (1<<d)-1\n    #mask_inverse = ~mask\n    #masked_number = number & mask\n    #masked_number_inverse = number & mask_inverse\n",
        "num_ids": 61
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = ((1 << d) -1) << (32 - d)\n    return (n << d)|(n >> (32 - d)) & mask\n",
        "num_ids": 38
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary representation\n    binary = bin(n)[2:]\n    # Reverse the binary representation\n    reversed_binary = binary[::-1]\n    # Find the number of bits to rotate\n    k = len(reversed_binary) - d\n    # Replace the first k bits in the reversed binary representation with zeros\n    reversed_binary = '0'*k + reversed_binary[k:]\n    # Convert the binary representation to decimal and return the result\n    return int(reversed_binary[::-1], 2)\n",
        "num_ids": 132
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32 - d)))&0xffffffff\n",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Compute mask for rotation\n    mask = (1 << d) - 1\n    # Get the bits that need to be moved up and the bits that need to be moved down\n    up_mask = (mask << 32) - 1\n    down_mask = mask\n    # Rotate\n    return ((n & up_mask) >> d) | (n << 32 - d)\n",
        "num_ids": 88
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'[\\s]+', '', text)\n",
        "num_ids": 20
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # We use the regular expression to substitute all whitespaces\n    # with an empty string.\n    pattern = re.compile('\\s+')\n    text = re.sub(pattern, '', text)\n    return text\n",
        "num_ids": 54
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = \"\".join(text.split())\n    return text\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef remove_all_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return \"\".join([i for i in text if not i.isdigit()])\ndef to_lowercase(text):\n    '''\n    Write a function to convert text to lowercase.\n    '''\n    return text.lower()\ndef remove_all_except_alphabets(text):\n    '''\n    Write a function to remove all characters which are not alphabets from a string.\n    '''\n    return re.sub('[^a-zA-Z]', '', text)\ndef get_alphabets(text):\n    '''\n    Write a function to extract all alphabets from a string.\n    '''\n    return \"\".join([i for i in text if i.isalpha()])\ndef to_uppercase(text):\n    '''\n    Write a function to convert text to uppercase.\n    '''\n    return text.upper()\ndef replace_all_whitespaces(text):\n    '''\n    Write a function to replace all whitespaces in a string with '%20'.\n    '''\n    return text.replace(\" \", \"%20\")\ndef remove_first_occurence_of_substring(text, substring):\n    '''\n    Write a function to remove the first occurence of a substring from a string.\n    '''\n    return text.replace(substring, \"\")\ndef left_trim(text):\n    '''\n    Write a function to trim the spaces from left of a string.\n    '''\n    return text.lstrip()\ndef right_trim(text):\n    '''\n    Write a function to trim the spaces from right of a string.\n    '''\n    return text.rstrip()\ndef get_number_of_words(text):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(text.split(\" \"))\ndef reverse_string(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    return text[::-1]\ndef swap_cases(text):\n    '''\n    Write a function to swap cases of all alphabets in a string.\n    '''\n    return \"\".join([i.swapcase() if i.isalpha() else i for i in text])\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove multiple spaces in a string.\n    '''\n    return re.sub(' +','', text)\ndef convert_to_pascal_case(text):\n    '''\n    Write a function to convert a string to pascal case.\n    '''\n    return text.title()\ndef get_middle_chars(text, number_of_chars):\n    '''\n    Write a function to get the middle characters from a string.\n    '''\n    return text[(len(text)-number_of_chars)//2:len(text)//2+(len(text)-number_of_chars)//2]\ndef remove_char(text, number):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    return text[0:number] + text[number+1:len(text)]\ndef get_char_at_specific_index(text, number):\n    '''\n    Write a function to get a character from a string at a specific index.\n    '''\n    return text[number]\ndef replace_char_at_index(text, number, char):\n    '''\n    Write a function to replace a character from a string at a specific index.\n    '''\n    return text[0:number] + char + text[number+1:len(text)]\ndef get_last_n_chars(text, n):\n    '''\n    Write a function to get last n characters from a string.\n    '''\n    return text[len(text)-n:len(text)]\ndef remove_last_n_chars(text, n):\n    '''\n    Write a function to remove last n characters from a string.\n    '''\n    return text[0:len(text)-n]\ndef replace_last_n_chars(text, n, char):\n    '''\n    Write a function to replace last n characters of a string with another string.\n    '''\n    return text[0:len(text)-n] + char\ndef find_index_of_substring(text, substring):\n    '''\n    Write a function to find the index of a substring.\n    '''\n    return text.find(substring)\ndef find_all_occurences_of_substring(text, substring):\n    '''\n    Write a function to find all the occurences of a substring in a string.\n    '''\n    return text.count(substring)\ndef get_char_count_of_substring(text, substring):\n    '''\n    Write a function to get the count of a substring.\n    '''\n    return text.count(substring)\ndef remove_all_occurences_of_substring(text, substring):\n    '''\n    Write a function to remove all occurences of a substring from a string.\n    '''\n    return text.replace(substring, \"\")\ndef remove_char_occurence_at_index(text, number):\n    '''\n    Write a function to remove a character at a index.\n    '''\n    return text[0:number] + text[number+1:len(text)]\ndef get_line_number_of_char(text, char):\n    '''\n    Write a function to get the line number of a character.\n    '''\n    return text.count(char, 0, len(text))\ndef get_line_number_of_string(text, substring):\n    '''\n    Write a function to get the line number of a substring.\n    '''\n    return text.count(substring, 0, len(text))\ndef is_all_uppercase(text):\n    '''\n    Write a function to check if all characters in a string are in upper case.\n    '''\n    for i in text:\n        if i.islower():\n            return False\n    return True\ndef is_all_lowercase(text):\n    '''\n    Write a function to check if all characters in a string are in lower case.\n    '''\n    for i in text:\n        if i.isupper():\n            return False\n    return True\ndef is_all_alphabets(text):\n    '''\n    Write a function to check if all characters in a string are alphabets.\n    '''\n    for i in text:\n        if not i.isalpha():\n            return False\n    return True\ndef is_all_digits(text):\n    '''\n    Write a function to check if all characters in a string are digits.\n    '''\n    for i in text:\n        if not i.isdigit():\n            return False\n    return True\ndef string_to_number(text):\n    '''\n    Write a function to convert a string to a number.\n    '''\n    return int(\"\".join([i for i in text if i.isdigit()]))\ndef string_to_number_with_floating_point(text):\n    '''\n    Write a function to convert a string to a number with floating point.\n    '''\n    return float(\"\".join([i for i in text if i.isdigit() or i==\".\"]))\ndef string_to_number_with_floating_point_and_prefix(text):\n    '''\n    Write a function to convert a string to a number with floating point and prefix.\n    '''\n    return float(\"\".join([i for i in text if i.isdigit() or i==\".\" or i.isalpha()]))\ndef is_palindrome(text):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    return text==text[::-1]\ndef is_pangram(text):\n    '''\n    Write a function to check if a string is pangram.\n    '''\n    alphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"",
        "num_ids": 37
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\n    #return re.sub(\"\\s\", \"\", text)\n",
        "num_ids": 28
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y:\n        if x == z:\n            return 3\n        else:\n            return 2\n    else:\n        return 0\n",
        "num_ids": 36
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 45
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                if x[i] == y[j] == z[k]:\n                    result += 1\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print(f'The number of equal numbers is: {x}')\n    elif x == y!= z:\n        print(f'The number of equal numbers is: {x+z}')\n    elif y == z!= x:\n        print(f'The number of equal numbers is: {y+x}')\n    elif z == x!= y:\n        print(f'The number of equal numbers is: {z+y}')\n",
        "num_ids": 118
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        print(\"All the three numbers are equal.\")\n    else:\n        print(\"All the three numbers are not equal.\")\n",
        "num_ids": 38
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    if x == y or x == z or y == z:\n        result += 1\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print(\"All numbers are equal\")\n    elif x == y or x == z or y == z:\n        print(\"2 of the 3 numbers are equal\")\n    else:\n        print(\"All numbers are not equal\")\n",
        "num_ids": 62
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    sum1 = 0\n    if(x == y) and (x == z):\n        sum1 = 3\n    elif(x == y) or (x == z) or (y == z):\n        sum1 = 2\n    else:\n        sum1 = 0\n    print('The number of equal numbers in three given integers is:'+ str(sum1))\ntest_three_equal(1,1,1)\ntest_three_equal(2,1,1)\ntest_three_equal(1,2,1)\ntest_three_equal(2,2,2",
        "num_ids": 136
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y and x!=z:\n        return 2\n    elif x==z and x!=y:\n        return 2\n    elif y==z and y!=x:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 74
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n",
        "num_ids": 8
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start = 0\n    end = n - 1\n",
        "num_ids": 22
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    total_rotations = 0\n    for i in range(n - 1):\n        if arr[i + 1] < arr[i]:\n            total_rotations += 1\n    return total_rotations\n",
        "num_ids": 58
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if arr == sorted(arr) or arr == sorted(arr, reverse=True):\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def left_bound_index(arr, left, right, elem):\n        '''\n        This function returns the index of the left bound of the array, which is equal to the first index of an element less than elem.\n        '''\n        while(left<=right):\n            mid = (left+right)//2\n            if arr[mid]<elem:\n                left = mid+1\n            else:\n                right = mid-1\n        return left\n",
        "num_ids": 55
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low = 0\n    high = len(arr)-1\n    while(low<high):\n        mid = low+(high-low)//2\n        if arr[mid]<arr[high]:\n            high = mid\n        else:\n            low = mid+1\n    return high\n",
        "num_ids": 68
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    left = 0\n    right = len(arr) - 1\n    while(left < right):\n        mid = (left + right)//2\n        if(arr[mid] > arr[mid + 1]):\n            return mid+1\n        elif(arr[mid] < arr[left]):\n            right = mid - 1\n        else:\n            left = mid + 1\n",
        "num_ids": 91
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # arr = [5, 4, 3, 2, 1]\n    n = len(arr)\n    low = 0\n    high = n - 1\n    mid = 0\n",
        "num_ids": 43
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            rotations += 1\n    return rotations\n",
        "num_ids": 50
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (math.sqrt(n) + 0.5) ** 2 == n\n",
        "num_ids": 22
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return sqrt == int(sqrt)\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    x = n//2\n    while x * x > n:\n        x = x - 1\n    return x * x == n\n",
        "num_ids": 44
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # floor operator is used to find largest number less than or equal to the given number \n    x = sqrt(n)\n    if (int(x + 1) * (int(x + 1))) == n : \n        return True\n    else : \n        return False\n",
        "num_ids": 66
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    # Find the floor value of square root\n    s = int(math.sqrt(n))\n    \n    # Initialize result\n    isSquare = False\n    \n    # Check if floor value is\n    # equal to sqrt.\n    if (s * s == n) :\n        isSquare = True\n    \n    # If both the above\n    # conditions fail.\n    return isSquare\n",
        "num_ids": 99
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n >= 0 and (math.sqrt(n) - int(math.sqrt(n))) == 0\n",
        "num_ids": 29
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 2):\n        return False;\n",
        "num_ids": 15
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    # Check if x is power of 2\n    if (x & (x - 1) == 0) :\n        return True\n",
        "num_ids": 36
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n<0):\n        return False\n    if(n==0):\n        return True\n    sqrt = int(math.sqrt(n))\n    if(sqrt**2==n):\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2: \n        return False\n    x = int(math.sqrt(n))\n    return x * x == n\n",
        "num_ids": 35
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr is None: return False\n    if len(arr) < 2: return False\n    product = 1\n    for item in arr:\n        product *= item\n    return product % 2 == 0",
        "num_ids": 48
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Initialize a variable to store the product of numbers in the list.\n    product = 1\n    # Initialize a variable to store the boolean value.\n    product_even = True\n",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for num in arr: \n        prod *= num\n    return prod % 2 == 0\n",
        "num_ids": 31
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(arr) and (prod(arr) % 2 == 0)\n  \ndef is_product_odd(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    return all(arr) and (prod(arr) % 2!= 0)\n",
        "num_ids": 22
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for num in arr:\n        prod = prod * num\n    if prod % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    mul = 1\n    for i in arr:\n        mul = mul * i\n    if mul % 2 == 0:\n        return True\n    return False\n    \ndef get_even_products(arr):\n    '''\n    Write a function that takes in a list of numbers and returns all even\n    numbers that are product of other elements in the list.\n    '''\n    result = []\n    for i in arr:\n        if is_product_even(arr):\n            result.append(i)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    if prod % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = 0\n    for i in lists:\n        if sum(i) > highest_sum:\n            highest_sum = sum(i)\n            highest_list = i\n    return highest_list\n",
        "num_ids": 51
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result_list = []\n    for i in range(len(lists)):\n        suma = 0\n        for j in range(len(lists[i])):\n            suma += lists[i][j]\n        if suma > max_sum:\n            max_sum = suma\n            result_list = lists[i]\n    return result_list\n",
        "num_ids": 93
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = 0\n    max_list = []\n    for i in lists:\n        sum = 0\n        for j in i:\n            sum += j\n        if sum > max:\n            max = sum\n            max_list = i\n    return max_list\n",
        "num_ids": 63
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # sum_list = []\n    # for l in lists:\n    #     sum_list.append(sum(l))\n    # return lists[sum_list.index(max(sum_list))]\n    return [l for l in lists if sum(l) == max([sum(l) for l in lists])][0]\n",
        "num_ids": 80
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_sums = [sum(l) for l in lists]\n    max_sum = max(list_sums)\n    return [l for l, sum in zip(lists, list_sums) if sum == max_sum]\n",
        "num_ids": 58
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #return [max([sum(i) for i in lists])]\n    return [max(lists, key = sum)]\n",
        "num_ids": 31
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = 0\n    result = None\n    for i in lists:\n        sum_i = sum(i)\n        if sum_i > highest_sum:\n            highest_sum = sum_i\n            result = i\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return list(max(lists, key=sum))\n",
        "num_ids": 15
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n    else:\n        max_sum = lists[0]\n        for i in range(1, len(lists)):\n            if sum(lists[i]) > sum(max_sum):\n                max_sum = lists[i]\n        return max_sum\n        \nprint(max_sum_list([[1,2],[3,4],[5,6],[7,8],[9,10]]))\n",
        "num_ids": 105
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    else:\n        max_sum_list = [sum(x) for x in lists]\n        max_sum_list.sort(reverse=True)\n        index = max_sum_list.index(max_sum_list[0])\n        return lists[index]\n        \n    \ndef fizz_buzz(start_num, end_num):\n    '''\n    Write a function that takes a start number and an end number and returns a list of numbers between them, where:\n    \u2022    If the number is divisible by 3, it should return \"Fizz\"\n    \u2022    If it is divisible by 5, it should return \"Buzz\"\n    \u2022    If it is divisible by both 3 and 5, it should return \"FizzBuzz\"\n    '''\n    if start_num == end_num:\n        return []\n    elif start_num > end_num:\n        return []\n    elif start_num % 5 == 0 and start_num % 3 == 0:\n        return [\"FizzBuzz\"]\n    elif start_num % 3 == 0:\n        return [\"Fizz\"]\n    elif start_num % 5 == 0:\n        return [\"Buzz\"]\n    else:\n        return [start_num] + fizz_buzz(start_num+1, end_num)\n        \ndef sum_list(lists):\n    '''\n    Write a function that returns the sum of the elements in a list of lists.\n    '''\n    if len(lists) == 0:\n        return 0\n    else:\n        return sum_list([sum(x) for x in lists]) + sum_list(lists[1:])\n        \n    \ndef remove_dups(lists):\n    '''\n    Write a function that returns a list that contains no duplicates.\n    '''\n    if len(lists) == 0:\n        return []\n    else:\n        return [lists[0]] + remove_dups(lists[1:])\n",
        "num_ids": 39
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == \"\":\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        run = 0\n        for j in range(i, len(test_str)):\n            if test_str[j].isupper():\n                run += 1\n            else:\n                break\n        if run > max_run:\n            max_run = run\n    return max_run\n    \n",
        "num_ids": 92
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_upper = 0\n    run_upper = 0\n    for ch in test_str:\n        if ch.isupper():\n            run_upper += 1\n        else:\n            if run_upper > max_run_upper:\n                max_run_upper = run_upper\n            run_upper = 0\n    if run_upper > max_run_upper:\n        max_run_upper = run_upper\n    return max_run_upper\n    \n    \ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    max_run_lower = 0\n    run_lower = 0\n    for ch in test_str:\n        if ch.islower():\n            run_lower += 1\n        else:\n            if run_lower > max_run_lower:\n                max_run_lower = run_lower\n            run_lower = 0\n    if run_lower > max_run_lower:\n        max_run_lower = run_lower\n    return max_run_lower\n    \n    \ndef max_run_digits(test_str):\n    '''\n    Write a function to find maximum run of digits in the given string.\n    '''\n    max_run_digit = 0\n    run_digit = 0\n    for ch in test_str:\n        if ch.isdigit():\n            run_digit += 1\n        else:\n            if run_digit > max_run_digit:\n                max_run_digit = run_digit\n            run_digit = 0\n    if run_digit > max_run_digit:\n        max_run_digit = run_digit\n    return max_run_digit\n    \n    \ndef max_run_special(test_str):\n    '''\n    Write a function to find maximum run of special characters in the given string.\n    '''\n    max_run_special = 0\n    run_special = 0\n    for ch in test_str:\n        if not ch.isalnum():\n            run_special += 1\n        else:\n            if run_special > max_run_special:\n                max_run_special = run_special\n            run_special = 0\n    if run_special > max_run_special:\n        max_run_special = run_special\n    return max_run_special\n    \n    \ndef max_run_letters(test_str):\n    '''\n    Write a function to find maximum run of letters in the given string.\n    '''\n    max_run_letters = 0\n    run_letters = 0\n    for ch in test_str:\n        if ch.isalpha():\n            run_letters += 1\n        else:\n            if run_letters > max_run_letters:\n                max_run_letters = run_letters\n            run_letters = 0\n    if run_letters > max_run_letters:\n        max_run_letters = run_letters\n    return max_run_letters\n    \n    \ndef remove_nth_occurences(test_str, n):\n    '''\n    Write a function that takes a string and an integer and removes the Nth occurrence of a letter from the string.\n    '''\n    str_list = list(test_str)\n    length = len(test_str)\n    for i in range(length):\n        if str_list[i] == n:\n            del str_list[i]\n            length -= 1\n            break\n    return ''.join(str_list)\n    \n    \ndef remove_nth_occurences_r(test_str, n):\n    '''\n    Write a function that takes a string and an integer and removes the Nth occurrence of a letter from the string in the reverse order.\n    '''\n    str_list = list(test_str)\n    length = len(test_str)\n    for i in range(length):\n        if str_list[i] == n:\n            del str_list[-i]\n            length -= 1\n            break\n    return ''.join(str_list)\n    \n    \ndef remove_nth_occurences_comp(test_str, n):\n    '''\n    Write a function that takes a string and an integer and removes the Nth occurrence of a letter from the string using comprehension.\n    '''\n    str_list = [ch for ch in test_str if ch!= n]\n    return ''.join(str_list)\n    \n    \ndef remove_nth_occurences_comp_r(test_str, n):\n    '''\n    Write a function that takes a string and an integer and removes the Nth occurrence of a letter from the string in the reverse order using comprehension.\n    '''\n    str_list = [ch for ch in test_str[::-1] if ch!= n]\n    return ''.join(str_list[::-1])\n    \n    \ndef rotate_word(test_str, n):\n    '''\n    Write a function that takes a string and an integer and returns a new string with all characters shifted by N positions in the alphabet.\n    '''\n    str_list = list(test_str)\n    temp_list = []\n    for ch in test_str:\n        if ord(ch) <= ord('z'):\n            ch = chr(ord(ch) + n)\n            if ord(ch) > ord('z'):\n                ch = chr(ord(ch) - 26)\n            temp_list.append(ch)\n        else:\n            temp_list.append(ch)\n    return ''.join(temp_list)\n    \n    \ndef rotate_word_comp(test_str, n):\n    '''\n    Write a function that takes a string and an integer and returns a new string with all characters shifted by N positions in the alphabet.\n    '''\n    temp_list = [chr((ord(ch) - ord('a') + n) % 26 + ord('a')) for ch in test_str]\n    return ''.join(temp_list)\n    \n    \ndef reverse_string(test_str):\n    '''\n    Write a function that takes a string and returns a new string with all characters reversed.\n    '''\n    return test_str[::-1]\n    \n    \ndef reverse_string_comp(test_str):\n    '''\n    Write a function that takes a string and returns a new string with all characters reversed using comprehension.\n    '''\n    return ''.join([ch for ch in test_str[::-1]])\n    \n    \ndef reverse_string_loop(test_str):\n    '''\n    Write a function that takes a string and returns a new string with all characters reversed using loops.\n    '''\n    str_list = list(test_str)\n    length = len(test_str)\n    for i in range(length//2):\n        temp = str_list[i]\n        str_list[i] = str_list[length - i - 1]\n        str_list[length - i - 1] = temp\n    return ''.join(str_list)\n    \n    \ndef rotate_sentence(test_str, n):\n    '''\n    Write a function that takes a sentence and an integer and returns a new sentence with all words shifted by N positions in the alphabet.\n    '''\n    sentence_list = test_str.split(' ')\n    temp_list = []\n    for word in sentence_list:\n        temp_list.append(rotate_word(word, n))\n    return''.join(temp_list)\n    \n    \ndef rotate_sentence_comp(test_str, n):\n    '''\n    Write a function that takes a sentence and an integer and returns a new sentence with all words shifted by N positions in the alphabet.\n    '''\n    return''.join([rotate_word(word, n) for word in test_str.split(' ')])\n    \n    \ndef rotate_sentence_loop(test_str, n):\n    '''\n    Write a function that takes a sentence and an integer and returns a new sentence with all words shifted by N positions in the alphabet.\n    '''\n    sentence_list = test_str.split(' ')\n    temp_list = []\n    for word in sentence_list:\n        temp_list.append(rotate_word(word, n))\n    return''.join(temp_list)\n    \n    \ndef rotate_sentence_comp_r(test_str, n):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    run_size = 0\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            run_size += 1\n        else:\n            max_run = max(run_size, max_run)\n            run_size = 0\n    return max(run_size, max_run)\n    \ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    run_size = 0\n    max_run = 0\n    for char in test_str:\n        if char.islower():\n            run_size += 1\n        else:\n            max_run = max(run_size, max_run)\n            run_size = 0\n    return max(run_size, max_run)\n    \ndef min_run_uppercase(test_str):\n    '''\n    Write a function to find minimum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    run_size = 0\n    min_run = sys.maxsize\n    for char in test_str:\n        if char.isupper():\n            run_size += 1\n        else:\n            min_run = min(run_size, min_run)\n            run_size = 0\n    return min(run_size, min_run)\n    \ndef min_run_lowercase(test_str):\n    '''\n    Write a function to find minimum run of lowercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    run_size = 0\n    min_run = sys.maxsize\n    for char in test_str:\n        if char.islower():\n            run_size += 1\n        else:\n            min_run = min(run_size, min_run)\n            run_size = 0\n    return min(run_size, min_run)\n    \ndef main():\n    test_str = 'Hello'\n    print('The length of string %s is %d' % (test_str, len(test_str)))\n    print('The max run of uppercase characters in string %s is %d' % (test_str, max_run_uppercase(test_str)))\n    print('The max run of lowercase characters in string %s is %d' % (test_str, max_run_lowercase(test_str)))\n    test_str = 'hello'\n    print('The length of string %s is %d' % (test_str, len(test_str)))\n    print('The max run of uppercase characters in string %s is %d' % (test_str, max_run_uppercase(test_str)))\n    print('The max run of lowercase characters in string %s is %d' % (test_str, max_run_lowercase(test_str)))\n    test_str = 'HELLO'\n    print('The length of string %s is %d' % (test_str, len(test_str)))\n    print('The max run of uppercase characters in string %s is %d' % (test_str, max_run_uppercase(test_str)))\n    print('The max run of lowercase characters in string %s is %d' % (test_str, max_run_lowercase(test_str)))\n    test_str = 'hELLO'\n    print('The length of string %s is %d' % (test_str, len(test_str)))\n    print('The max run of uppercase characters in string %s is %d' % (test_str, max_run_uppercase(test_str)))\n    print('The max run of lowercase characters in string %s is %d' % (test_str, max_run_lowercase(test_str)))\n    test_str = 'HELLO WORLD'\n    print('The length of string %s is %d' % (test_str, len(test_str)))\n    print('The max run of uppercase characters in string %s is %d' % (test_str, max_run_uppercase(test_str)))\n    print('The max run of lowercase characters in string %s is %d' % (test_str, max_run_lowercase(test_str)))\n    test_str = 'HELLO WORLD HELLO WORLD'\n    print('The length of string %s is %d' % (test_str, len(test_str)))\n    print('The max run of uppercase characters in string %s is %d' % (test_str, max_run_uppercase(test_str)))\n    print('The max run of lowercase characters in string %s is %d' % (test_str, max_run_lowercase(test_str)))\n    test_str
        "num_ids": 1610
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    max_count = 0\n    cur_count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            cur_count += 1\n            if test_str[i].isupper():\n                max_count = max(max_count, cur_count)\n        else:\n            cur_count = 1\n    return max_count\n",
        "num_ids": 114
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str=test_str.lower()\n    max_length = 0\n    current_length = 0\n    for i in range(len(test_str)):\n        if(test_str[i]>='a' and test_str[i]<='z'):\n            current_length+=1\n            if(current_length>max_length):\n                max_length = current_length\n        else:\n            current_length = 0\n    return max_length\n",
        "num_ids": 113
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    temp = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            temp += 1\n        else:\n            temp = 0\n        if temp > max_count:\n            max_count = temp\n    return max_count\n",
        "num_ids": 76
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    cur_count = 0\n    for i in test_str:\n        if i.isupper():\n            cur_count += 1\n        else:\n            cur_count = 0\n        max_count = max(max_count,cur_count)\n    return max_count\n",
        "num_ids": 73
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_length = 0\n    test_str = test_str.lower()\n    for i in test_str:\n        if i.isupper():\n            max_length += 1\n        else:\n            max_length = 0\n    return max_length\n",
        "num_ids": 62
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(list(map(len, test_str.split(' '))), key=lambda x: sum(1 for char in x if char.isupper()))\n",
        "num_ids": 41
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums:\n        if nums[0]%2 == 1:\n            return nums[0]\n        else:\n            return first_odd(nums[1:])\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return \"List is empty\"\n    for i in nums:\n        if i%2!=0:\n            return i\n        elif i%2==0 and i==len(nums)-1:\n            return \"No odd numbers\"\n",
        "num_ids": 66
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n            break\n    else:\n        return \"There is no odd number in the list.\"\n",
        "num_ids": 43
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num % 2!= 0:\n            count += 1\n        if count == 1:\n            return num\n    return \"No odd number found!\"\n    \nprint(first_odd([5,8,2,4,3,1,8,8,5,3]))\n",
        "num_ids": 80
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2 == 1:\n            return num\n",
        "num_ids": 23
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return -1\n",
        "num_ids": 29
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    n = 0\n    while n < len(nums):\n        if nums[n] % 2!= 0:\n            return nums[n]\n        n += 1\n    return None\n",
        "num_ids": 48
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if test_tup[i]!= None:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    elif test_tup[1] == K:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if test_tup[i] == '_':\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for x in test_tup:\n        if len(x) == k:\n            return 1\n    return 0\n",
        "num_ids": 30
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_tuple = K\n    if k_tuple in test_tup:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 39
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # print('Input:', K, ':', test_tup)\n",
        "num_ids": 20
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if len(i) == K:\n            return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if (len(test_tup) == len(K)) and set(test_tup) == set(K) else False\n",
        "num_ids": 35
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n",
        "num_ids": 27
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2] and test_tup1[3] < test_tup2[3]:\n        return True\n    else:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x in range(len(test_tup2)):\n        if test_tup1[x] > test_tup2[x]:\n            return True\n    return False\n    \n    \ndef sum_tuples(tup1, tup2):\n    '''\n    Write a function that takes two tuples of numbers of equal length and returns a tuple of their sums.\n    '''\n    new_tup = []\n    for x in range(len(tup1)):\n        new_tup.append(tup1[x]+tup2[x])\n    return tuple(new_tup)\n    \n    \ndef map_tuples(tup1, func):\n    '''\n    Write a function that takes a tuple as a parameter and applies the function to each element.\n    '''\n    new_tup = []\n    for x in range(len(tup1)):\n        new_tup.append(func(tup1[x]))\n    return tuple(new_tup)\n    \n    \ndef is_equal(tup1, tup2):\n    '''\n    Write a function that returns True if each element of the first tuple is equal to its corresponding element in the second tuple. Otherwise, return False.\n    '''\n    for x in range(len(tup1)):\n        if tup1[x]!= tup2[x]:\n            return False\n    return True\n    \n    \ndef is_rotation(tup1, tup2):\n    '''\n    Write a function that takes two tuples and returns True if the second tuple is a rotation of the first tuple. Otherwise, it returns False.\n    '''\n    if len(tup1)!= len(tup2):\n        return False\n    if tup1 == tup2:\n        return True\n    for x in range(len(tup1)):\n        if tup1[x:]+tup1[:x] == tup2:\n            return True\n    return False\n    \n    \ndef reverse(tup):\n    '''\n    Write a function that takes a tuple and returns a tuple that is the reverse of the original tuple.\n    '''\n    new_tup = tup[::-1]\n    return tuple(new_tup)\n    \n    \ndef remove_tup(tup, el):\n    '''\n    Write a function that takes a tuple and an integer and returns a tuple with all occurrences of that integer removed.\n    '''\n    new_tup = []\n    for x in range(len(tup)):\n        if tup[x] == el:\n            continue\n        new_tup.append(tup[x])\n    return tuple(new_tup)\n    \n    \ndef count_tuples(tup, el):\n    '''\n    Write a function that takes a tuple and an integer and returns the number of occurrences of that integer in the tuple.\n    '''\n    count = 0\n    for x in range(len(tup)):\n        if tup[x] == el:\n            count += 1\n    return count\n    \n    \ndef max_of_tup(tup):\n    '''\n    Write a function that takes a tuple and returns the maximum element of the tuple.\n    '''\n    new_tup = []\n    for x in range(len(tup)):\n        if len(new_tup) == 0:\n            new_tup.append(tup[x])\n        else:\n            if check_smaller(new_tup[x], tup[x]):\n                new_tup.append(tup[x])\n            else:\n                continue\n    return new_tup[len(new_tup)-1]\n    \n    \ndef min_of_tup(tup):\n    '''\n    Write a function that takes a tuple and returns the minimum element of the tuple.\n    '''\n    new_tup = []\n    for x in range(len(tup)):\n        if len(new_tup) == 0:\n            new_tup.append(tup[x])\n        else:\n            if check_smaller(tup[x], new_tup[x]):\n                new_tup.append(tup[x])\n            else:\n                continue\n    return new_tup[0]\n    \n    \ndef sum_of_tup(tup):\n    '''\n    Write a function that takes a tuple and returns the sum of its elements.\n    '''\n    sum = 0\n    for x in range(len(tup)):\n        sum += tup[x]\n    return sum\n    \n    \ndef mean_of_tup(tup):\n    '''\n    Write a function that takes a tuple and returns the mean of its elements.\n    '''\n    return sum_of_tup(tup)/len(tup)\n    \n    \ndef occurance_tup(tup, el):\n    '''\n    Write a function that takes a tuple and an element and returns how many times the element occurs in the tuple.\n    '''\n    count = 0\n    for x in range(len(tup)):\n        if tup[x] == el:\n            count += 1\n    return count\n    \n    \ndef uniq(tup):\n    '''\n    Write a function that takes a tuple and returns a tuple that contains only the unique elements of the original tuple.\n    '''\n    new_tup = []\n    for x in range(len(tup)):\n        if tup[x] not in new_tup:\n            new_tup.append(tup[x])\n    return tuple(new_tup)\n    \n    \ndef is_subset(tup1, tup2):\n    '''\n    Write a function that returns True if all elements of the first tuple are in the second tuple and False otherwise.\n    '''\n    if len(tup1) > len(tup2):\n        return False\n    for x in range(len(tup1)):\n        if tup1[x] not in tup2:\n            return False\n    return True\n    \n    \ndef check_subset(tup1, tup2):\n    '''\n    Write a function that takes two tuples and returns True if the second tuple is a subset of the first tuple and False otherwise.\n    '''\n    if len(tup2) > len(tup1):\n        return False\n    for x in range(len(tup2)):\n        if tup2[x] not in tup1:\n            return False\n    return True\n    \n    \ndef reverse_tup(tup):\n    '''\n    Write a function that takes a tuple and returns a tuple that is the reverse of the original tuple.\n    '''\n    new_tup = []\n    for x in range(len(tup)):\n        new_tup.append(tup[x])\n    new_tup.reverse()\n    return tuple(new_tup)\n    \n    \ndef intersection_of_tuples(tup1, tup2):\n    '''\n    Write a function that takes two tuples and returns a tuple that contains only the elements that are in both tuples.\n    '''\n    new_tup = []\n    for x in range(len(tup1)):\n        if tup1[x] in tup2:\n            new_tup.append(tup1[x])\n    return tuple(new_tup)\n    \n    \ndef concatenate_tuples(tup1, tup2):\n    '''\n    Write a function that takes two tuples and returns a tuple that is the result of concatenating the two tuples.\n    '''\n    new_tup = []\n    for x in range(len(tup1)):\n        new_tup.append(tup1[x])\n    for x in range(len(tup2)):\n        new_tup.append(tup2[x])\n    return tuple(new_tup)\n    \n    \ndef is_unique(tup):\n    '''\n    Write a function that takes a tuple and returns True if the tuple contains unique elements and False otherwise.\n    '''\n    new_tup = []\n    for x in range(len(tup)):\n        if tup[x] not in new_tu",
        "num_ids": 35
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for item1, item2 in zip(test_tup1, test_tup2):\n        if item1 > item2:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[1] > test_tup2[1]:\n        return False\n    elif test_tup1[1] < test_tup2[1]:\n        return True\n    elif test_tup1[2] > test_tup2[2]:\n        return False\n    elif test_tup1[2] < test_tup2[2]:\n        return True\n    elif test_tup1[3] > test_tup2[3]:\n        return False\n    elif test_tup1[3] < test_tup2[3]:\n        return True\n    elif test_tup1[4] > test_tup2[4]:\n        return False\n    elif test_tup1[4] < test_tup2[4]:\n        return True\n    elif test_tup1[5] > test_tup2[5]:\n        return False\n    elif test_tup1[5] < test_tup2[5]:\n        return True\n    elif test_tup1[6] > test_tup2[6]:\n        return False\n    elif test_tup1[6] < test_tup2[6]:\n        return True\n    elif test_tup1[7] > test_tup2[7]:\n        return False\n    elif test_tup1[7] < test_tup2[7]:\n        return True\n    elif test_tup1[8] > test_tup2[8]:\n        return False\n    elif test_tup1[8] < test_tup2[8]:\n        return True\n    elif test_tup1[9] > test_tup2[9]:\n        return False\n    elif test_tup1[9] < test_tup2[9]:\n        return True\n    elif test_tup1[10] > test_tup2[10]:\n        return False\n    elif test_tup1[10] < test_tup2[10]:\n        return True\n    elif test_tup1[11] > test_tup2[11]:\n        return False\n    elif test_tup1[11] < test_tup2[11]:\n        return True\n    elif test_tup1[12] > test_tup2[12]:\n        return False\n    elif test_tup1[12] < test_tup2[12]:\n        return True\n    elif test_tup1[13] > test_tup2[13]:\n        return False\n    elif test_tup1[13] < test_tup2[13]:\n        return True\n    elif test_tup1[14] > test_tup2[14]:\n        return False\n    elif test_tup1[14] < test_tup2[14]:\n        return True\n    elif test_tup1[15] > test_tup2[15]:\n        return False\n    elif test_tup1[15] < test_tup2[15]:\n        return True\n    elif test_tup1[16] > test_tup2[16]:\n        return False\n    elif test_tup1[16] < test_tup2[16]:\n        return True\n    elif test_tup1[17] > test_tup2[17]:\n        return False\n    elif test_tup1[17] < test_tup2[17]:\n        return True\n    elif test_tup1[18] > test_tup2[18]:\n        return False\n    elif test_tup1[18] < test_tup2[18]:\n        return True\n    elif test_tup1[19] > test_tup2[19]:\n        return False\n    elif test_tup1[19] < test_tup2[19]:\n        return True\n    elif test_tup1[20] > test_tup2[20]:\n        return False\n    elif test_tup1[20] < test_tup2[20]:\n        return True\n    elif test_tup1[21] > test_tup2[21]:\n        return False\n    elif test_tup1[21] < test_tup2[21]:\n        return True\n    elif test_tup1[22] > test_tup2[22]:\n        return False\n    elif test_tup1[22] < test_tup2[22]:\n        return True\n    elif test_tup1[23] > test_tup2[23]:\n        return False\n    elif test_tup1[23] < test_tup2[23]:\n        return True\n    elif test_tup1[24] > test_tup2[24]:\n        return False\n    elif test_tup1[24] < test_tup2[24]:\n        return True\n    elif test_tup1[25] > test_tup2[25]:\n        return False\n    elif test_tup1[25] < test_tup2[25]:\n        return True\n    elif test_tup1[26] > test_tup2[26]:\n        return False\n    elif test_tup1[26] < test_tup2[26]:\n        return True\n    elif test_tup1[27] > test_tup2[27]:\n        return False\n    elif test_tup1[27] < test_tup2[27]:\n        return True\n    elif test_tup1[28] > test_tup2[28]:\n        return False\n    elif test_tup1[28] < test_tup2[28]:\n        return True\n    elif test_tup1[29] > test_tup2[29]:\n        return False\n    elif test_tup1[29] < test_tup2[29]:\n        return True\n    elif test_tup1[30] > test_tup2[30]:\n        return False\n    elif test_tup1[30] < test_tup2[30]:\n        return True\n    elif test_tup1[31] > test_tup2[31]:\n        return False\n    elif test_tup1[31] < test_tup2[31]:\n        return True\n    elif test_tup1[32] > test_tup2[32]:\n        return False\n    elif test_tup1[32] < test_tup2[32]:\n        return True\n    elif test_tup1[33] > test_tup2[33]:\n        return False\n    elif test_tup1[33] < test_tup2[33]:\n        return True\n    elif test_tup1[34] > test_tup2[34]:\n        return False\n    elif test_tup1[34] < test_tup2[34]:\n        return True\n    elif test_tup1[35] > test_tup2[35]:\n        return False\n    elif test_tup1[35] < test_tup2[35]:\n        return True\n    elif test_tup1[36] > test_tup2[36]:\n        return False\n    elif test_tup1[36] < test_tup2[36]:\n        return True\n    elif test_tup1[37] > test_tup2[37]:\n        return False\n    elif test_tup1[37] < test_tup2[37]:\n        return True\n    elif test_tup1[38] > test_tup2[38]:\n        return False\n    elif test_tup1[38] < test_tup2[38]:\n        return True\n    elif test_tup1[39] > test_tup2[39]:\n        return False\n    elif test_tup1[39] < test_tup2[39]:\n        retur",
        "num_ids": 2000
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass # remove pass statement\n    #return the logical result (True or False)\n",
        "num_ids": 21
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[i] < test_tup1[i]:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1 < test_tup2:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return all(tup2 < tup1 for tup1, tup2 in zip(test_tup1, test_tup2))\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]:\n        return True\n    return False\n",
        "num_ids": 66
    }
]