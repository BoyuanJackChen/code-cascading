[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elem = set(test_tup1) & set(test_tup2)\n    print(similar_elem)\n    print(type(similar_elem))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [i for i in test_tup1 if i in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize a dictionary\n    result_dict = {}\n    # iterate through the first tuple\n    for item in test_tup1:\n        # if item exists in the second tuple,\n        if item in test_tup2:\n            # add the item to the dictionary with key \"shared\"\n            result_dict[item] = \"shared\"\n    # return the dictionary\n    return result_dict\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar = []\n    # TODO: Write the implementation of this function.\n    for i in test_tup1:\n        if i in test_tup2:\n            similar.append(i)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_items = []\n    for item1 in test_tup1:\n        for item2 in test_tup2:\n            if item1 == item2:\n                shared_items.append(item2)\n    return shared_items\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Given two tuples of equal length, return a list of tuples, where each\n    # tuple contains one element of each of the input tuples. \n    # Note that the returned list is not sorted in any way.\n    # A list of tuples is returned in the format: [(tup1[0], tup2[0]), (tup1[1], tup2[1]),...]\n    return None\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    result_list = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                result_list.append(elem1)\n    \n    return result_list\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    sqr = int(math.sqrt(n))\n    for i in range(3, sqr + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    \n    if n == 2:\n        return False\n    \n    if n % 2 == 0:\n        return True\n    \n    limit = math.floor(math.sqrt(n))\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return True\n    return False\n    \n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n%2 == 0:\n        return True\n    i = 3\n    while i*i <= n:\n        if n%i == 0:\n            return True\n        i += 2\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return False\n    elif n==2:\n        return False\n    elif n==3:\n        return False\n    elif n%2==0:\n        return True\n    elif n%3==0:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if is_not_prime(n):\n        return False\n    else:\n        return True\ndef is_palindrome(n):\n    '''\n    Write a python function to identify palindromes.\n    '''\n    if n<0:\n        return False\n    elif str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\ndef is_power(n,m):\n    '''\n    Write a python function to identify powers of a number.\n    '''\n    if m==1:\n        return True\n    elif n==m:\n        return True\n    elif n%m!=0:\n        return False\n    elif m==2:\n        return False\n    elif n%2==0:\n        return False\n    elif m%2==0:\n        return False\n    else:\n        return True\ndef is_power2(n,m):\n    '''\n    Write a python function to identify powers of a number.\n    '''\n    if m==1:\n        return True\n    elif n%m!=0:\n        return False\n    elif m==2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        return True\ndef gcd(n,m):\n    '''\n    Write a python function to identify the gcd of two numbers.\n    '''\n    if n==0 or m==0:\n        return 0\n    if n==m:\n        return n\n    elif n>m:\n        if n%m==0:\n            return m\n        else:\n            return gcd(m,n%m)\n    elif m>n:\n        if m%n==0:\n            return n\n        else:\n            return gcd(n,m%n)\ndef find_gcd(nums):\n    '''\n    Write a python function to identify the gcd of a list of numbers.\n    '''\n    if nums==[]:\n        return 0\n    if len(nums)==1:\n        return nums[0]\n    if len(nums)==2:\n        return gcd(nums[0],nums[1])\n    else:\n        return gcd(nums[0],find_gcd(nums[1:]))\ndef find_lcm(nums):\n    '''\n    Write a python function to identify the lcm of a list of numbers.\n    '''\n    if nums==[]:\n        return 0\n    if len(nums)==1:\n        return nums[0]\n    if len(nums)==2:\n        return nums[0]*nums[1]//math.gcd(nums[0],nums[1])\n    else:\n        return nums[0]*find_lcm(nums[1:])//math.gcd(nums[0],find_lcm(nums[1:]))\ndef is_perfect(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    if sum==n:\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Write a python function to identify abundant numbers.\n    '''\n    if is_perfect(n):\n        return False\n    else:\n        return True\ndef is_deficient(n):\n    '''\n    Write a python function to identify deficient numbers.\n    '''\n    if is_perfect(n):\n        return False\n    elif n%2==0:\n        return True\n    else:\n        return False\ndef is_amicable(n):\n    '''\n    Write a python function to identify amicable numbers.\n    '''\n    if is_deficient(n)==True:\n        return False\n    else:\n        sum1=0\n        sum2=0\n        for i in range(1,int(math.sqrt(n))+1):\n            if n%i==0:\n                sum1+=i\n        for i in range(1,int(math.sqrt(n))+1):\n            if sum1==n:\n                return True\n            elif sum1%i==0:\n                sum2+=i\n        if sum2==n:\n            return True\n        else:\n            return False\ndef find_factors(n):\n    '''\n    Write a python function to identify factors of a number.\n    '''\n    factors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    return factors\ndef find_factors2(n):\n    '''\n    Write a python function to identify factors of a number.\n    '''\n    factors=[]\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            factors.append(i)\n            factors.append(int(n/i))\n    return factors\ndef find_factors3(n):\n    '''\n    Write a python function to identify factors of a number.\n    '''\n    factors=[]\n    i=1\n    while i<n:\n        if n%i==0:\n            factors.append(i)\n            factors.append(int(n/i))\n        i+=1\n    return factors\ndef is_even(n):\n    '''\n    Write a python function to identify even numbers.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\ndef is_odd(n):\n    '''\n    Write a python function to identify odd numbers.\n    '''\n    if is_even(n)==True:\n        return False\n    else:\n        return True\ndef is_even(n):\n    '''\n    Write a python function to identify even numbers.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\ndef is_odd(n):\n    '''\n    Write a python function to identify odd numbers.\n    '''\n    if is_even(n)==True:\n        return False\n    else:\n        return True\ndef sum_of_digits(n):\n    '''\n    Write a python function to identify the sum of digits of a number.\n    '''\n    sum=0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    return sum\ndef sum_of_digits2(n):\n    '''\n    Write a python function to identify the sum of digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits3(n):\n    '''\n    Write a python function to identify the sum of digits of a number.\n    '''\n    return sum(map(int,str(n)))\ndef sum_of_digits4(n):\n    '''\n    Write a python function to identify the sum of digits of a number.\n    '''\n    return sum(map(lambda a:a,str(n)))\ndef is_armstrong(n):\n    '''\n    Write a python function to identify armstrong numbers.\n    '''\n    sum1=0\n    for i in str(n):\n        sum1+=int(i)**len(str(n))\n    if sum1==n:\n        return True\n    else:\n        return False\ndef is_armstrong2(n):\n    '''\n    Write a python function to identify armstrong numbers.\n    '''\n    sum1=0\n    for i in str(n):\n        sum1+=int(i)**len(str(n))\n    return sum1==n\ndef is_armstrong3(n):\n    '''\n    Write a python function to identify armstron"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 1 or n%2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #write your code here\n    isPrime = True\n    for i in range(2,math.ceil(math.sqrt(n))+1):\n        if n%i==0:\n            isPrime = False\n            break\n    return isPrime\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return []\n    hq.heapify(nums)\n    lst = []\n    for i in range(n):\n        lst.append(hq.heappop(nums))\n    return lst[::-1]\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n > len(nums):\n        return []\n    hq.heapify(nums)\n    lst = []\n    for i in range(n):\n        lst.append(hq.heappop(nums))\n    return lst\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return\n    h = []\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    while h:\n        print(hq.heappop(h),end=\" \")\n    print()\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return \"Invalid Input\"\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappop(nums)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) == 0:\n        return []\n    maxheap = []\n    for i in range(n):\n        hq.heappush(maxheap,(-nums[i],nums[i]))\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(maxheap)[1])\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest_nums=[]\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    for i in range(n):\n        hq.heappush(q,nums[i])\n    return list(reversed([hq.heappop(q) for i in range(n)]))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    i = 0\n    while i < n:\n        print(hq.heappop(nums))\n        i += 1\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # nums=input().split()\n    # n=int(input())\n    # n=int(n)\n    nums=[int(i) for i in nums]\n    heap=[]\n    for i in range(n):\n        # print(i)\n        # print(heap)\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    # print(heap)\n    while heap:\n        print(hq.heappop(heap),end=\" \")\n    return\nheap_queue_largest([\"5\", \"7\", \"8\", \"10\", \"2\", \"3\", \"4\", \"1\", \"9\"],5)"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=nums[:n]\n    hq.heapify(heap)\n    for i in range(n,len(nums)):\n        if(heap[0]<nums[i]):\n            hq.heappushpop(heap,nums[i])\n    return heap[::-1]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=nums[:n]\n    hq.heapify(heap)\n    for i in range(n,len(nums)):\n        if(heap[0]>nums[i]):\n            hq.heappushpop(heap,nums[i])\n    return heap\ndef heap_queue_2largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=nums[:n]\n    hq.heapify(heap)\n    heap_2=nums[n:]\n    hq.heapify(heap_2)\n    for i in range(n,len(nums)):\n        if(heap[0]<nums[i] and heap_2[0]<nums[i]):\n            if(heap[0]<heap_2[0]):\n                hq.heappushpop(heap,nums[i])\n            else:\n                hq.heappushpop(heap_2,nums[i])\n        elif(heap[0]<nums[i]):\n            hq.heappushpop(heap,nums[i])\n        elif(heap_2[0]<nums[i]):\n            hq.heappushpop(heap_2,nums[i])\n    return heap[::-1]+(heap_2[::-1])\ndef heap_queue_2smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=nums[:n]\n    hq.heapify(heap)\n    heap_2=nums[n:]\n    hq.heapify(heap_2)\n    for i in range(n,len(nums)):\n        if(heap[0]>nums[i] and heap_2[0]>nums[i]):\n            if(heap[0]>heap_2[0]):\n                hq.heappushpop(heap,nums[i])\n            else:\n                hq.heappushpop(heap_2,nums[i])\n        elif(heap[0]>nums[i]):\n            hq.heappushpop(heap,nums[i])\n        elif(heap_2[0]>nums[i]):\n            hq.heappushpop(heap_2,nums[i])\n    return heap+(heap_2)\ndef partition(nums,p,r):\n    i=p-1\n    j=p\n    while(j<r):\n        if(nums[j]<nums[r]):\n            i+=1\n            nums[i],nums[j]=nums[j],nums[i]\n        j+=1\n    nums[i+1],nums[r]=nums[r],nums[i+1]\n    return i+1\ndef quick_sort(nums,p,r):\n    if(p<r):\n        q=partition(nums,p,r)\n        quick_sort(nums,p,q-1)\n        quick_sort(nums,q+1,r)\ndef quick_sort_3way(nums,p,r):\n    if(p<r):\n        q=partition(nums,p,r)\n        if(q-p<r-(q+1)):\n            quick_sort_3way(nums,p,q-1)\n            quick_sort_3way(nums,q+1,r)\n        else:\n            quick_sort_3way(nums,q+1,r)\n            quick_sort_3way(nums,p,q-1)\ndef quick_sort_2way(nums,p,r):\n    if(p<r):\n        q=partition(nums,p,r)\n        quick_sort_2way(nums,p,q-1)\n        quick_sort_2way(nums,q+1,r)\ndef quick_sort_3way_2(nums,p,r):\n    if(p<r):\n        q=partition(nums,p,r)\n        if(q-p<r-(q+1)):\n            quick_sort_3way_2(nums,p,q-1)\n            quick_sort_3way_2(nums,q+1,r)\n        else:\n            quick_sort_3way_2(nums,q+1,r)\n            quick_sort_3way_2(nums,p,q-1)\ndef quick_sort_3way_merge(nums,p,r):\n    if(p<r):\n        q=partition(nums,p,r)\n        if(q-p<r-(q+1)):\n            quick_sort_3way_merge(nums,p,q-1)\n            quick_sort_3way_merge(nums,q+1,r)\n        else:\n            quick_sort_3way_merge(nums,q+1,r)\n            quick_sort_3way_merge(nums,p,q-1)\ndef quick_sort_3way_python(nums,p,r):\n    if(p<r):\n        q=partition(nums,p,r)\n        if(q-p<r-(q+1)):\n            quick_sort_3way_python(nums,p,q-1)\n            quick_sort_3way_python(nums,q+1,r)\n        else:\n            nums[q+1:r+1]=sorted(nums[q+1:r+1])\n            nums[p:q]=nums[p:q][::-1]\ndef quick_sort_3way_python2(nums,p,r):\n    if(p<r):\n        q=partition(nums,p,r)\n        if(q-p<r-(q+1)):\n            quick_sort_3way_python2(nums,p,q-1)\n            quick_sort_3way_python2(nums,q+1,r)\n        else:\n            nums[q+1:r+1]=sorted(nums[q+1:r+1])\n            nums[p:q+1]=nums[p:q+1][::-1]\ndef quick_sort_3way_python3(nums,p,r):\n    if(p<r):\n        q=partition(nums,p,r)\n        if(q-p<r-(q+1)):\n            quick_sort_3way_python3(nums,p,q-1)\n            quick_sort_3way_python3(nums,q+1,r)\n        else:\n            for i in range(q+1,r+1):\n                nums[i],nums[r]=nums[r],nums[i]\n            quick_sort_3way_python3(nums,p,q-1)\n            quick_sort_3way_python3(nums,q+1,r)\ndef quicksort(nums,p,r):\n    if(p<r):\n        q=partition(nums,p,r)\n        quicksort(nums,p,q-1)\n        quicksort(nums,q+1,r)\ndef quicksort_3way(nums,p,"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x:\n        if x == 1 or x == 2:\n            return True\n        else:\n            return False\n            break\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Converting given number x into binary string. \n    bin_str_x = bin(x).replace(\"0b\",\"\") \n    # Comparing length of binary string. \n    if len(bin_str_x) == 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    while (x!= 0): \n        x = x & (x - 1) \n        print(x)\n    if (x == 0): \n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x >>= 1\n    if x == 1:\n        return True\n    else:\n        return False\n    \nif __name__ == \"__main__\":\n    x = int(input(\"Enter number: \"))\n    result = is_Power_Of_Two(x)\n    print(result)\n    \n'''\nOutput:\nEnter number: 9\nTrue\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x - 1)) == 0) and x\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = bin(x)\n    if(x[2:] == \"1\"):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # # Method 1\n    # if (x & (x - 1)) == 0: \n    #     print (\"The number is a power of 2!\")\n    # else: \n    #     print (\"The number is not a power of 2!\")\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    i = 1\n    while i!= x: \n        i = i << 1\n    return True if x & i == i else False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # 1) checking for the power of two using bitwise and operation\n    \n    return (x&(-x))==x\n    \ndef test_Power_Of_Two():\n    '''\n    Write a python function to test the above function.\n    '''\n    print('Test Results')\n    print(is_Power_Of_Two(2))\n    print(is_Power_Of_Two(3))\n    print(is_Power_Of_Two(5))\n    print(is_Power_Of_Two(6))\n    print(is_Power_Of_Two(7))\n    print(is_Power_Of_Two(8))\n    \ntest_Power_Of_Two()\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = 'Python is an interpreted, high-level, general-purpose programming language. Python's design philosophy emphasizes code readability with its notable use of significant whitespace.'\n    if re.search('[a-zA-Z]+\\s{3,}',text):\n        return re.search('[a-zA-Z]+\\s{3,}',text)\n    else:\n        return re.search('[a-zA-Z]+\\s{3,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    my_regex = re.compile(r'\\b\\w{4,}\\b')\n    my_regex.findall(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    reg = re.compile('\\w{4,}')\n    out = re.findall(reg, text)\n    return out\n    \ndef find_pattern_in_text(text):\n    '''\n    Write a regex that matches the phone number formats: (xxx) xxx-xxxx and xxx-xxx-xxxx.\n    '''\n    reg = re.compile('\\(\\d{3}\\)\\s\\d{3}-\\d{4}')\n    out = re.findall(reg, text)\n    return out\n    \ndef find_char_dictionary(text):\n    '''\n    Write a function to find all words that have all the characters in the input string.\n    \n    Note: All characters have to be unique in the string.\n    '''\n    reg = re.compile('\\w{3}\\s\\w{3}\\s\\w{3}\\s\\w{3}')\n    out = re.findall(reg, text)\n    return out\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b[\\w]{4,}\\b', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\S{4,}\\b')\n    return pattern.findall(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b[a-zA-z]{4,}\\b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef find_char_short(text):\n    '''\n    Write a function to find all words which are of length smaller than 4 in a string.\n    '''\n    pattern = r'\\b[a-zA-z]{,3}\\b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef replace_char(text):\n    '''\n    Write a function to replace all occurences of the first character of a word with '$',\n    if the word's length is at least 5\n    '''\n    pattern = r'\\b[a-zA-z]\\w{4,}\\b'\n    result = re.sub(pattern, r'$\\1', text)\n    print(result)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]{4,}\\b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    ans = re.findall(r'\\w{4,}', text)\n    if ans:\n        print(ans)\n        return ans\n    else:\n        return 'No such word'\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\S{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n    long_words = []\n    for word in text.split():\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x * x, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num*num)\n    return new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x * x, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = [i ** 2 for i in nums]\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:]+str[:i]==str:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    if l == 0:\n        return -1\n    if l == 1:\n        return 0\n    rotations = []\n    for i in range(1, l):\n        left_rotation = str[i:]+str[:i]\n        rotations.append(left_rotation)\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find_rotations(s):\n        s=list(s)\n        s.sort()\n        l=len(s)\n        for i in range(l):\n            if(s[i]!=s[0]):\n                return i\n        return l\n    return find_rotations(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    count = 0\n    for i in range(n): \n        for j in range(1,n+1): \n            if (str[i:i+j] == str[i+j:i+j+j]): \n                count += 1\n            else: \n                break\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 1:\n        return 0\n    if len(str) == 1:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str[:2]+str[2:]\n    str2 = str[-2:]+str[:-2]\n    if(str1 == str2):\n        print(str1)\n        print(str2)\n        print(0)\n    elif(str1 == str):\n        print(str1)\n        print(str2)\n        print(1)\n    elif(str2 == str):\n        print(str2)\n        print(str1)\n        print(1)\n    else:\n        print(str1)\n        print(str2)\n        print(2)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = str\n    s_len = len(str)\n    def isRotated(s, n): \n        # s = s.lower()\n        for i in range(n):\n            if (s == s[n-i:] + s[:n-i]):\n                return True\n        return False\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    rotations=[]\n    if n==0:\n        return rotations\n    for i in range(1,n+1):\n        if str[i%n:]+str[:i%n]==str:\n            rotations.append(i%n)\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(0, len(str)):\n        if str[i:] + str[:i] == str:\n            rotations = rotations + 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return str[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Initialize left and right pointer\n    l,r = 0, len(s)-1\n    while l<r:\n        if s[l]==ch:\n            s=s[:l]+s[l+1:]\n            l=0\n            r=len(s)-1\n        else:\n            l+=1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s[:s.find(ch)] + s[s.find(ch)+1:]\n    return s\n    \ns = input(\"Enter a string: \")\nch = input(\"Enter a charater to be removed: \")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s=s.replace(ch,\"\")\n        return s\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[0:s.find(ch)]+s[s.find(ch)+1:len(s)-s[::-1].find(ch)-1]"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[0:s.find(ch)]+s[s.rfind(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1) \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\",1).replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        new_str = s[:s.find(ch)] + s[s.find(ch)+1:]\n        return new_str\n    else:\n        return s\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # new_M = []\n    # row_sum = []\n    # for row in M:\n    #     row_sum.append(sum(row))\n    # row_sum = sorted(row_sum)\n    # for row in row_sum:\n    #     new_row = []\n    #     for row_ in M:\n    #         if sum(row_) == row:\n    #             new_row.append(row_)\n    #     new_M.append(new_row)\n    # print(new_M)\n    # return new_M\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    # new_M = []\n    # col_sum = []\n    # for col_ in range(len(M[0])):\n    #     col_sum.append(sum([row[col_] for row in M]))\n    # col_sum = sorted(col_sum)\n    # for col in col_sum:\n    #     new_row = []\n    #     for row_ in range(len(M[0])):\n    #         new_row.append(sum([M[r][row_] for r in range(len(M)) if col == sum([M[r][c] for c in range(len(M[0]))])]))\n    #     new_M.append(new_row)\n    # return new_M\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its diagonals.\n    '''\n    # new_M = []\n    # dia_sum = []\n    # for i in range(len(M)):\n    #     dia_sum.append(sum([M[j][j] for j in range(len(M[0])) if j == i]))\n    #     dia_sum.append(sum([M[j][len(M)-j-1] for j in range(len(M[0])) if j == i]))\n    # dia_sum = sorted(dia_sum)\n    # for dia in dia_sum:\n    #     new_row = []\n    #     for row_ in range(len(M[0])):\n    #         new_row.append(sum([M[r][row_] for r in range(len(M)) if dia == sum([M[r][c] for c in range(len(M[0])) if abs(r-c) == len(M)-1])]))\n    #     new_M.append(new_row)\n    # return new_M\n    '''\n    Write a function to sort the matrix in descending order according to the sum of its diagonals.\n    '''\n    # new_M = []\n    # dia_sum = []\n    # for i in range(len(M)):\n    #     dia_sum.append(sum([M[j][j] for j in range(len(M[0])) if j == i]))\n    #     dia_sum.append(sum([M[j][len(M)-j-1] for j in range(len(M[0])) if j == i]))\n    # dia_sum = sorted(dia_sum, reverse = True)\n    # for dia in dia_sum:\n    #     new_row = []\n    #     for row_ in range(len(M[0])):\n    #         new_row.append(sum([M[r][row_] for r in range(len(M)) if dia == sum([M[r][c] for c in range(len(M[0])) if abs(r-c) == len(M)-1])]))\n    #     new_M.append(new_row)\n    # return new_M\n    '''\n    Write a function to find the determinant of the given matrix.\n    '''\n    # return determinant(M)\n    '''\n    Write a function to find the transpose of the given matrix.\n    '''\n    # return transpose(M)\n    '''\n    Write a function to multiply two matrices and return the result.\n    '''\n    # new_M = []\n    # for row_ in range(len(M)):\n    #     new_row = []\n    #     for col_ in range(len(M[0])):\n    #         new_row.append(M[row_][col_] * B[col_][0])\n    #     new_M.append(new_row)\n    # return new_M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = copy.deepcopy(M)\n    l = len(matrix)\n    # print(l)\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                if (matrix[i][j] > matrix[k][j]) and (matrix[i][j]!= 0):\n                    matrix[i], matrix[k] = matrix[k], matrix[i]\n    # print(matrix)\n    return matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)-1):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    n = len(M)\n    for i in range(n):\n        M[i] = sorted(M[i])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for row in range(len(M)):\n        M[row] = sorted(M[row], key=lambda x: x[1])\n    M.sort(key=lambda x: sum(x))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_rows = sorted([[sum(row), row] for row in M])\n    return [[row[1] for row in sorted_rows]]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get dimensions\n    n, m = len(M), len(M[0])\n    # Sum of rows\n    sum_rows = [sum(row) for row in M]\n    # Sort and return\n    return [row[:] for row in sorted(zip(sum_rows, M), key = lambda x: x[0])]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # if only 1 row, it's already sorted.\n    if len(M) <= 1:\n        return M\n    M = np.array(M)\n    \n    # sort the rows\n    M = M[M[:,0].argsort()]\n    # sort the columns\n    # first column is the row indices, so we'll do it based on the second column\n    M = M[M[:,1].argsort()]\n    # replace the old column indices with the cumulative sum of the columns\n    M[:,1] = np.cumsum(M[:,1])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # print(M)\n    M.sort(key = lambda x: sum(x))\n    # print(M)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2) * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume = (1/6)*(l*b*h)\n    return volume\n    \ndef find_Volume_rect(w,l,h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    \n    volume = w*l*h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\ndef find_surface_area(a,b,c) : \n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    surface_area = (a + b + c) * 2\n    return surface_area\ndef find_diagonal(l,b,h) : \n    '''\n    Write a python function to find the diagonal of a triangular prism.\n    '''\n    diagonal = (l**2 + b**2 + h**2)**0.5\n    return diagonal\ndef find_circumradius(a,b,c) : \n    '''\n    Write a python function to find the circumradius of a spherical triangle.\n    '''\n    circumradius = (a * b * c) / (4 * find_Area(a,b,c))\n    return circumradius\ndef find_inradius(a,b,c) : \n    '''\n    Write a python function to find the inradius of a spherical triangle.\n    '''\n    inradius = (find_Area(a,b,c) / (4 * find_circumradius(a,b,c)))**0.5\n    return inradius\ndef find_volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a spherical triangle.\n    '''\n    volume = (1/3) * find_Area(l,b,h)\n    return volume\ndef find_surface_area(a,b,c) : \n    '''\n    Write a python function to find the surface area of a spherical triangle.\n    '''\n    surface_area = 4 * find_Area(a,b,c)\n    return surface_area\ndef find_diagonal(l,b,h) : \n    '''\n    Write a python function to find the diagonal of a spherical triangle.\n    '''\n    diagonal = (l**2 + b**2 + h**2)**0.5\n    return diagonal\ndef find_circumradius(a,b,c) : \n    '''\n    Write a python function to find the circumradius of a spherical triangle.\n    '''\n    circumradius = (a * b * c) / (4 * find_Area(a,b,c))\n    return circumradius\ndef find_inradius(a,b,c) : \n    '''\n    Write a python function to find the inradius of a spherical triangle.\n    '''\n    inradius = (find_Area(a,b,c) / (4 * find_circumradius(a,b,c)))**0.5\n    return inradius\ndef find_volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a spherical triangle.\n    '''\n    volume = (1/3) * find_Area(l,b,h)\n    return volume\ndef find_surface_area(a,b,c) : \n    '''\n    Write a python function to find the surface area of a spherical triangle.\n    '''\n    surface_area = 4 * find_Area(a,b,c)\n    return surface_area\ndef find_diagonal(l,b,h) : \n    '''\n    Write a python function to find the diagonal of a spherical triangle.\n    '''\n    diagonal = (l**2 + b**2 + h**2)**0.5\n    return diagonal\ndef find_circumradius(a,b,c) : \n    '''\n    Write a python function to find the circumradius of a spherical triangle.\n    '''\n    circumradius = (a * b * c) / (4 * find_Area(a,b,c))\n    return circumradius\ndef find_inradius(a,b,c) : \n    '''\n    Write a python function to find the inradius of a spherical triangle.\n    '''\n    inradius = (find_Area(a,b,c) / (4 * find_circumradius(a,b,c)))**0.5\n    return inradius\ndef find_volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a spherical triangle.\n    '''\n    volume = (1/3) * find_Area(l,b,h)\n    return volume\ndef find_surface_area(a,b,c) : \n    '''\n    Write a python function to find the surface area of a spherical triangle.\n    '''\n    surface_area = 4 * find_Area(a,b,c)\n    return surface_area\ndef find_diagonal(l,b,h) : \n    '''\n    Write a python function to find the diagonal of a spherical triangle.\n    '''\n    diagonal = (l**2 + b**2 + h**2)**0.5\n    return diagonal\ndef find_circumradius(a,b,c) : \n    '''\n    Write a python function to find the circumradius of a spherical triangle.\n    '''\n    circumradius = (a * b * c) / (4 * find_Area(a,b,c))\n    return circumradius\ndef find_inradius(a,b,c) : \n    '''\n    Write a python function to find the inradius of a spherical triangle.\n    '''\n    inradius = (find_Area(a,b,c) / (4 * find_circumradius(a,b,c)))**0.5\n    return inradius\ndef find_volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a spherical triangle.\n    '''\n    volume = (1/3) * find_Area(l,b,h)\n    return volume\ndef find_surface_area(a,b,c) : \n    '''\n    Write a python function to find the surface area of a spherical triangle.\n    '''\n    surface_area = 4 * find_Area(a,b,c)\n    return surface_area\ndef find_diagonal(l,b,h) : \n    '''\n    Write a python function to find the diagonal of a spherical triangle.\n    '''\n    diagonal = (l**2 + b**2 + h**2)**0.5\n    return diagonal\ndef find_circumradius(a,b,c) : \n    '''\n    Write a python function to find the circumradius of a spherical triangle.\n    '''\n    circumradius = (a * b * c) / (4 * find_Area(a,b,c))\n    return circumradius\ndef find_inradius(a,b,c) : \n    '''\n    Write a python function to find the inradius of a spherical triangle.\n    '''\n    inradius = (find_Area(a,b,c) / (4 * find_circumradius(a,b,c)))**0.5\n    return inradius\ndef find_volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a spherical triangle.\n    '''\n    volume = (1/3) * find_Area(l,b,h)\n    return volume\ndef find_surface_area(a,b,c) : \n    '''\n    Write a python function to find the surface area of a spherical triangle.\n    '''\n    surface_area = 4 * find_Area(a,b,c)\n    return surface_area\ndef find_diagonal(l,b,h) : \n    '''\n    Write a python function to find the diagonal of a spherical triangle.\n    '''\n    diagonal = (l**2 + b**2 + h**2)**0.5\n    return diagonal\ndef find_circumradius(a,b,c) : \n    '''\n    Write a python function to find the circumradius of a spherical triangle.\n    '''\n    circumradius = (a * b * c) / (4 * find_Area(a,b,c))\n    return circumradius\ndef find_inradius(a,b,c) : \n    '''\n    Write a python function to find the inradius of a spherical triangle.\n    '''\n    inradius = (find_Area(a,b,c) / (4 * find_circumradius(a,b,c)))**0.5\n    return inradius\ndef find_volume(l,b,h) : \n    '"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    return (1/3)*h*b*l\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = l * b * h\n    print(\"The volume of a triangular prism is:\",vol)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = l * b * h / 3\n    return vol\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]+_[a-z]+$', text, re.I) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('_[a-z]+_', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'\\w+_\\w+', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #import re\n    #return bool(re.match('^[a-z_]+$', text))\n    return True if text.find('_') >= 0 else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    string = re.sub('_+', '', text)\n    if re.search('[a-z]', string):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+_[a-z]+$'\n    result = re.search(pattern, text)\n    return result is not None\n    \ndef max_product_of_three(first_number, second_number, third_number):\n    '''\n    Write a function that takes three integers as arguments and returns the maximum product of two numbers that can be formed by one, two, or three multiplies. \n    For example, if the three arguments are 3, 5, 10, the function should return 30 because 10 * 3 = 30.\n    '''\n    result = 0\n    # your code here\n    result = max(max(first_number * second_number, first_number * third_number), second_number * third_number)\n    return result\n    \ndef count_char_occurances(text, char):\n    '''\n    Write a function that returns the number of times a character appears in a string.\n    '''\n    count = 0\n    # your code here\n    count = text.count(char)\n    return count\n    \ndef fizz_buzz(input):\n    '''\n    Write a function that takes a number as an argument and returns \"fizz\", \"buzz\", or \"fizzbuzz\" based on the value of that argument. \n    \n    If the argument is divisible by 3, print \"fizz\". \n    If the argument is divisible by 5, print \"buzz\". \n    If the argument is divisible by both 3 and 5, print \"fizzbuzz\". \n    Otherwise, print the value of the argument.\n    '''\n    # your code here\n    if input % 3 == 0:\n        if input % 5 == 0:\n            print('fizzbuzz')\n        else:\n            print('fizz')\n    elif input % 5 == 0:\n        print('buzz')\n    else:\n        print(input)\n        \ndef find_all_substrings(string):\n    '''\n    Write a function that finds all substrings of the input string and returns them as a list. \n    \n    For example, the input \"hello\" would return [\"h\", \"e\", \"l\", \"l\", \"o\", \"ll\", \"lo\", \"hel\", \"ell\", \"llo\", \"he\", \"e\", \"l\", \"l\", \"o\", \"llo\", \"he\", \"e\", \"l\", \"l\", \"o\", \"lll\", \"hel\", \"ell\", \"llo\", \"hello\"]\n    '''\n    result = []\n    # your code here\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            result.append(string[i:j])\n    return result\n    \ndef count_overlapping_substrings(string1, string2):\n    '''\n    Write a function that takes two strings as arguments and returns the number of times that the first string appears as a substring in the second string.\n    \n    For example, if string1 is \"abc\" and string2 is \"abdca\", the function should return 4 because the substrings are \"abc\", \"abdca\", \"abdca\", and \"abc\".\n    '''\n    # your code here\n    result = 0\n    for substring in find_all_substrings(string1):\n        if substring in string2:\n            result += 1\n    return result\n    \ndef add_random_ints(n):\n    '''\n    Write a function that returns the sum of n random integers between 0 and 100. \n    \n    Remember, we define 0 to be the number that appears most often in a list. For example, if the list [2, 5, 8, 2, 0, 9, 5] contains the most 0s, then the function should return 0.\n    '''\n    result = 0\n    # your code here\n    arr = []\n    for i in range(n):\n        arr.append(random.randint(0, 100))\n    result = max(arr, key=arr.count)\n    return result\n    \ndef sum_of_numbers(n):\n    '''\n    Write a function that returns the sum of all even numbers from 1 to n (inclusive).\n    \n    For example, if n is 6, the function should return 8 because 6 + 2 + 4 + 6 + 4 + 2 = 18.\n    '''\n    result = 0\n    # your code here\n    result = n\n    return result\n    \ndef solve_math_problem(equation):\n    '''\n    Write a function that returns the solution of a math problem.\n    \n    For example, if the input is \"3x + 2x = x\", then the function should return \"x = 3\". \n    The format of the input is such that the first word of the input is the name of the function. \n    The rest of the input will contain the equation to be solved. The format of the equation will be a string with at least one number, and it could contain spaces. The format will be \"x = 3\" where x will be whatever number you need to plug into the equation.\n    '''\n    # your code here\n    first = equation.split()[0]\n    equation = equation.replace(first, '', 1)\n    result = eval(equation)\n    return first +'='+ str(result)\n    \ndef is_in_alphabet(text):\n    '''\n    Write a function that takes a string as input and returns true if the input string contains only letters and false otherwise. \n    \n    Note that spaces are not letters, and empty strings are not letters.\n    '''\n    # your code here\n    if len(text) == 0:\n        return False\n    for c in text:\n        if not ('a' <= c <= 'z' or 'A' <= c <= 'Z'):\n            return False\n    return True\n    \ndef sort_by_length(strings):\n    '''\n    Write a function that takes a list of strings as input and returns a new list that contains the same elements as the input list, but with the strings sorted by length in descending order. \n    \n    For example, if the input list is [\"hello\", \"apple\", \"dog\", \"apple\", \"zoo\", \"app\"], the function should return a list such that it becomes [\"zoo\", \"app\", \"apple\", \"apple\", \"dog\", \"hello\"]. \n    '''\n    # your code here\n    result = []\n    # result = sorted(strings, key=len, reverse=True)\n    result = sorted(strings, key=len, reverse=True)\n    return result\n    \ndef check_if_chars_in_string(string1, string2):\n    '''\n    Write a function that checks if the characters in a string appear in another string in the same order.\n    \n    For example, if the string1 is \"aeiou\" and the string2 is \"yudf\", the function should return True because the characters in \"aeiou\" appear in \"yudf\" in order.\n    '''\n    # your code here\n    return len(string1) == len(string2) and len(set(string1) & set(string2)) == len(string1)\n    \ndef array_diff(array1, array2):\n    '''\n    Write a function that takes two arrays and returns an array containing all the elements that are in the first array but not in the second.\n    \n    For example, if array1 is [1, 2, 3, 4] and array2 is [2, 4, 6, 8], the function should return [1, 3, 5]\n    '''\n    result = []\n    # your code here\n    for i in range(len(array1)):\n        if array1[i] not in array2:\n            result.append(array1[i])\n    return result\n    \ndef remove_duplicate_words(text):\n    '''\n    Write a function that takes a string and returns a string with all the duplicate words removed. \n    \n    For example, if the input is \"the cat in the hat\" the function should return \"the cat in hat\". \n    '''\n    # your code here\n    result = ''\n    if text == '':\n        return ''\n    for c in text:\n        if c.isalpha():\n            result += c\n    return result\n    \ndef count_missing_letters(string1, string2):\n    '''\n    Write a function that takes two strings as arguments and returns the number of characters in the first string that are missing in the second string. \n    \n    For example, if th"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"^[a-z]*_[a-z]*$\", text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search(r'[a-z]+_[a-z]+', text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # for i in text:\n    #     if i.islower():\n    #         print(i)\n    #     else:\n    #         print(\"False\")\n    #         return False\n    # return True\n    return bool(re.search(r'[_a-z]+_[_a-z]*', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    flag=0\n    if re.match(r'^[a-z_]+$',text) is not None:\n        return True\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a)\n    \ndef polygon_perimeter(n, a):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the polygon's sides and side length.\n    '''\n    return (n * a)\n    \ndef area_of_circle(r):\n    '''\n    Write a function that returns the area of a circle given its radius.\n    '''\n    return (math.pi * (r ** 2))\n    \ndef area_of_rectangle(a, b):\n    '''\n    Write a function that returns the area of a rectangle given its width and height.\n    '''\n    return (a * b)\n    \ndef area_of_triangle(a, h):\n    '''\n    Write a function that returns the area of a triangle given its base and height.\n    '''\n    return ((a * h) / 2)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Declare the variables\n    a = int(input('What is the length of one of the sides of the square?'))\n    # Calculate the perimeter\n    perimeter = 4 * a\n    # Print the perimeter\n    print(perimeter)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # variables\n    perimeter = 0\n    \n    # logic\n    perimeter = 4 * a\n    \n    # return\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.split()\n    for i in range(len(string)):\n        for j in range(len(string[i])):\n            if string[i][j] in string[i]:\n                string[i] = string[i].replace(string[i][j], '')\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = ''\n    for i in string:\n        if i not in result:\n            result += i\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string) \n    for i in list_string: \n        if i in string_2: \n            string_2 = string_2.replace(i, '') \n    return string_2 \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = list(string) \n    i = 0\n    for char in string: \n        if char not in string: \n            return False\n    return li\ndef check_for_index(li,index): \n    '''\n    Write a function to check whether a character is present at a particular index or not.\n    '''\n    if index>=len(li): \n        return False\n    return True\ndef permutation(li,n): \n    '''\n    Write a function to perform n permutation on the given list.\n    '''\n    if n==0: \n        return []\n    if n==1: \n        return li\n    elif n==len(li): \n        return [li]\n    else: \n        l=[]\n        for i in range(len(li)): \n            m=li[i]\n            rem_li=li[:i]+li[i+1:]\n            for p in permutation(rem_li,n-1): \n                l.append([m]+p)\n        return l\ndef remove_chars(li,n): \n    '''\n    Write a function to remove n characters from the given string.\n    '''\n    if n==0: \n        return li\n    if n>=len(li): \n        return False\n    if li[n]==\" \": \n        return remove_chars(li,n+1)\n    return li[:n]+li[n+1:]\ndef rotate(li,n): \n    '''\n    Write a function to rotate the given list by n elements towards left.\n    '''\n    if n>=len(li): \n        return False\n    return li[n:]+li[:n]\ndef string_rotation(s1,s2): \n    '''\n    Write a function to determine whether two strings are a rotation of each other or not.\n    '''\n    if len(s1)!= len(s2): \n        return False\n    s1 = \"\".join(s1)\n    s2 = \"\".join(s2)\n    return s1 in s2+s2\ndef palindrome(s): \n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    if len(s) <= 1: \n        return True\n    if s[0]!=s[-1]: \n        return False\n    return palindrome(s[1:-1])\ndef palindrome_permutation(s): \n    '''\n    Write a function to check whether the given string is a permutation of palindrome or not.\n    '''\n    dic = {}\n    for char in s: \n        if char in dic: \n            dic[char]+=1\n        else: \n            dic[char]=1\n    odd_count = 0\n    for val in dic.values(): \n        if val%2!=0: \n            odd_count+=1\n    return odd_count<=1\ndef remove_duplicates(li): \n    '''\n    Write a function to remove duplicates from the given list.\n    '''\n    l=[]\n    for i in li: \n        if i not in l: \n            l.append(i)\n    return l\ndef remove_duplicates_in_sorted_list(li): \n    '''\n    Write a function to remove duplicates from the given sorted list.\n    '''\n    if len(li)<=1: \n        return li\n    if li[0]==li[1]: \n        return remove_duplicates_in_sorted_list(li[1:])\n    return [li[0]]+remove_duplicates_in_sorted_list(li[1:])\ndef move_zeros(li): \n    '''\n    Write a function to move all zeros to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(li)): \n        if li[i]==0: \n            count+=1\n    return li[count:]+[0]*count\ndef move_zeros_v2(li): \n    '''\n    Write a function to move all zeros to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(li)): \n        if li[i]!=0: \n            li[count],li[i]=li[i],0\n            count+=1\n    return [0]*count+li[count:]\ndef array_diff(li1,li2): \n    '''\n    Write a function to remove all elements from the first list which is present in the second list.\n    '''\n    li3=[]\n    for i in li1: \n        if i not in li2: \n            li3.append(i)\n    return li3\ndef array_diff_v2(li1,li2): \n    '''\n    Write a function to remove all elements from the first list which is present in the second list.\n    '''\n    return [x for x in li1 if x not in li2]\ndef array_diff_v3(li1,li2): \n    '''\n    Write a function to remove all elements from the first list which is present in the second list.\n    '''\n    li1_set = set(li1)\n    li2_set = set(li2)\n    return list(li1_set.difference(li2_set))\ndef array_diff_v4(li1,li2): \n    '''\n    Write a function to remove all elements from the first list which is present in the second list.\n    '''\n    li1.sort()\n    li2.sort()\n    for i in range(len(li2)): \n        if li1[i]==li2[i]: \n            li1.pop(i)\n            li2.pop(i)\n    return li1+li2\ndef search_rotated_array(li,n): \n    '''\n    Write a function to search an element in the rotated sorted array.\n    '''\n    start = 0\n    end = len(li)-1\n    while start<=end: \n        mid = start+(end-start)//2\n        if li[mid]==n: \n            return mid\n        elif li[mid]>li[start]: \n            if n>li[mid] or n<li[start]: \n                start = mid+1\n            else: \n                end = mid-1\n        else: \n            if n>li[mid] or n<li[end]: \n                end = mid-1\n            else: \n                start = mid+1\n    return -1\ndef search_rotated_array_v2(li,n): \n    '''\n    Write a function to search an element in the rotated sorted array.\n    '''\n    start = 0\n    end = len(li)-1\n    while start<=end: \n        mid = start+(end-start)//2\n        if li[mid]==n: \n            return mid\n        elif li[start]<=li[mid]: \n            if n>li[mid] or n<li[start]: \n                start = mid+1\n            else: \n                end = mid-1\n        else: \n            if n>li[mid] or n<li[end]: \n                end = mid-1\n            else: \n                start = mid+1\n    return -1\ndef search_rotated_array_v3(li,n): \n    '''\n    Write a function to search an element in the rotated sorted array.\n    '''\n    start = 0\n    end = len(li)-1\n    while start<=end: \n        mid = start+(end-start)//2\n        if li[mid]==n: \n            return mid\n        elif li[start]<=li[mid]: \n            if n>li[mid] or n<li[start]: \n                start = mid+1\n            else: \n                end = mid-1\n        else: \n            if n>li[mid] or n<li[end]: \n                end = mid-1\n            else: \n                start = mid+1\n    return -1\ndef search_rotated"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [i for i in string if i not in string[:string.find(i)]]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not string: \n        return ''\n    if not list_str: \n        return ''\n    size = len(string) \n    list_str = [None] * size  \n    for i in range(size): \n        list_str[i] = string[i] \n    j = 0\n    for i in range(size): \n        if list_str[i] not in list_str[j:]: \n            j += 1\n        else: \n            break\n    return ''.join(list_str[j:]) \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for i in range(len(string)):\n        if string[i] not in string_list:\n            string_list.append(string[i])\n    return string_list\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in range(len(list)):\n        string += str(list[i])\n    return string\ndef remove_char_from_str(string, character_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # for i in range(len(string)):\n    #     if string[i] not in character_list:\n    #         string_list.append(string[i])\n    # return string_list\n    for character in character_list:\n        string = string.replace(character, \"\")\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for i in string:\n        string_list.append(i)\n    return string_list\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return\n    if len(string) == 1:\n        return string\n    if len(string) == 2:\n        if string[0] == string[1]:\n            return string[0]\n        return string[0]\n    chars = list(string)\n    for i in range(len(chars)):\n        if chars[i] == string[0]:\n            break\n    if i == 0:\n        return chars[i]\n    return ''.join(chars[i:])\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # time complexity O(n)\n    # space complexity O(1)\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for index, value in enumerate(arraynums):\n        if value in arraynums[index + 1:]:\n            duplicates.append(value)\n    print(duplicates)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 1:\n        return False\n    else:\n        return len(set(arraynums))!= len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def contains_duplicate(arr):\n        sorted_arr = sorted(arr)\n        for i in range(1, len(sorted_arr)):\n            if sorted_arr[i] == sorted_arr[i-1]:\n                return True\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #loop over the original array and check if the value is in the new array\n    for i in arraynums:\n        if i in arraynums:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    for x in arraynums:\n        for y in arraynums:\n            if x == y:\n                return True\n                break\n            else:\n                return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0, len(arraynums)-1):\n        if arraynums[i] in arraynums[i+1:]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # O(n)\n    # time complexity:\n    # space complexity:\n    hashset = {}\n    for num in arraynums:\n        if num in hashset:\n            return True\n        else:\n            hashset[num] = True\n    return False\n    # sort array\n    # O(nlogn)\n    # time complexity:\n    # space complexity:\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #soln 1\n    #return len(set(arraynums)) < len(arraynums)\n    #soln 2\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return ((x % 4 == 0) and (x % 100!= 0)) or (x % 400 == 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==9 or x==11:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x) == int:\n        if (x % 3 == 0) and (x % 5 == 0):\n            return f\"{x} is woodball!\"\n        elif (x % 3 == 0) and (x % 5!= 0):\n            return f\"{x} is not woodball!\"\n        elif (x % 3!= 0) and (x % 5 == 0):\n            return f\"{x} is not woodball!\"\n        else:\n            return \"It's a normal number!\"\n    else:\n        return f\"{x} is not a number!\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    sum = 0\n    for i in x:\n        sum = sum + int(i)\n    if sum % 7 == 0:\n        return \"WOODBALL\"\n    else:\n        return \"NOT WOODBALL\"\nx = input(\"Enter a number: \")\nprint(is_woodall(x))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x % 4 == 0 or x % 7 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(1, x): \n        if (x % i == 0): \n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 3 == 0\nprint(is_woodall(24))\nprint(is_woodall(25))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    def is_divisible_by_range(x,y,z):\n        if x % y == 0 and x % z == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%5==0 or x%3==0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    d = {'0':0, '1':3, '2':3, '3':5, '4':4, '5':4, '6':3, '7':5, '8':5, '9':4, '10':3, 'J':2, 'Q':2, 'K':2, 'A':1}\n    return sum([d[k] for k in list(x)])\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        rem = num % 10\n        reverse = reverse * 10 + rem\n        num = num // 10\n    if reverse - 2 * reverse == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <0:\n        num = -1 * num\n    num = str(num)\n    num2 = num[::-1]\n    num = int(num)\n    num2 = int(num2)\n    if num - 2 * num2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef add_one(num):\n    '''\n    Write a python function to add one to a given number.\n    '''\n    num = num + 1\n    return num\n    \ndef square_it(num):\n    '''\n    Write a python function to return a given number raised to the power of 2.\n    '''\n    num = num ** 2\n    return num\n    \ndef palindrome(word):\n    '''\n    Write a python function to return whether a given word is a palindrome or not.\n    '''\n    if word == word[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_number = 0\n    reverse_number = str(num)[::-1]\n    if num-int(reverse_number) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    #print(num_str)\n    num_rev = int(num_str[::-1])\n    #print(num_rev)\n    if num_rev == 2*num-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = str(num[::-1])\n    rev = int(rev)\n    if(rev!= (num * 2)):\n        return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 10:\n        return False\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n    if int(num_str_rev) < num - 1:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while (num>0):\n        rev_num = rev_num * 10 + (num%10)\n        num = num//10\n    print(rev_num)\n    if (num == rev_num-1):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while (num>0):\n        rev = rev*10+num%10\n        num = num//10\n    if(rev-num == num):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return True if num == (num[::-1])[::-1] -1 else False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    rev_num = 0\n    while(n > 0):\n        rev_num = rev_num * 10 + n % 10\n        n = n // 10\n    return num == 2*rev_num-1\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [9, 1, 2, 3, 4]\n    # print(arr)\n    # arr.sort(reverse = True)\n    # print(arr)\n    # max_num = \"\"\n    # for i in arr :\n    #     max_num += str(i)\n    # print(max_num)\n    # return int(max_num)\n    \n    \n    # A much cleaner solution.\n    return int(''.join(sorted(map(str, arr), reverse = True)))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Start with the first element. \n    max_num = arr[0] \n    # Start with the first element. \n    max_num1 = arr[1] \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Converting all elements to int\n    list_Of_Ints = [int(i) for i in arr]\n    list_Of_Ints.sort(reverse = True)\n    # print(list_Of_Ints)\n    # Creating a copy of list_Of_Ints for further usage\n    list_Of_Ints_Copy = list_Of_Ints\n    # Initializing a variable to store largest number\n    Max_Num = 0\n    while len(list_Of_Ints_Copy)!= 0:\n        # Determining the largest number that can be formed with given digits\n        num = list_Of_Ints_Copy.pop()\n        while num >= 10 and len(list_Of_Ints_Copy)!= 0:\n            num = list_Of_Ints_Copy.pop()\n        Max_Num = Max_Num*10 + num\n    print(Max_Num)\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return arr.index(max(arr))\n    \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return arr.index(max(arr, key=int))\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a python function to count the number of times that a substring occurs in the given string.\n    '''\n    return sum([1 for i in range(len(string)) if string.startswith(sub_string, i)])\n    \ndef find_num_of_paths_in_maze(n, m, x, y, memo):\n    '''\n    Write a python function to count the number of paths in the maze from position (0, 0) to (n - 1, m - 1). \n    '''\n    if n == 0 or m == 0:\n        return 0\n    if (x,y) == (n-1,m-1):\n        return 1\n    if memo[x][y]!= -1:\n        return memo[x][y]\n    memo[x][y] = find_num_of_paths_in_maze(n, m, x+1, y, memo) + find_num_of_paths_in_maze(n, m, x, y+1, memo)\n    return memo[x][y]\n    \ndef find_max_sum_of_path_in_maze(n, m, x, y, memo):\n    '''\n    Write a python function to find the maximum sum of the path in the maze from position (0, 0) to (n - 1, m - 1). \n    '''\n    if n == 0 or m == 0:\n        return 0\n    if (x,y) == (n-1,m-1):\n        return 1\n    if memo[x][y]!= -1:\n        return memo[x][y]\n    memo[x][y] = find_max_sum_of_path_in_maze(n, m, x+1, y, memo) + find_max_sum_of_path_in_maze(n, m, x, y+1, memo)\n    return memo[x][y]\n    \ndef find_num_of_paths_in_maze_2(n, m, x, y, memo):\n    '''\n    Write a python function to count the number of paths in the maze from position (0, 0) to (n - 1, m - 1). \n    '''\n    if n == 0 or m == 0:\n        return 0\n    if (x,y) == (n-1,m-1):\n        return 1\n    if memo[x][y]!= -1:\n        return memo[x][y]\n    memo[x][y] = find_num_of_paths_in_maze_2(n, m, x+1, y, memo) + find_num_of_paths_in_maze_2(n, m, x, y+1, memo)\n    return memo[x][y]\n    \ndef find_max_sum_of_path_in_maze_2(n, m, x, y, memo):\n    '''\n    Write a python function to find the maximum sum of the path in the maze from position (0, 0) to (n - 1, m - 1). \n    '''\n    if n == 0 or m == 0:\n        return 0\n    if (x,y) == (n-1,m-1):\n        return 1\n    if memo[x][y]!= -1:\n        return memo[x][y]\n    memo[x][y] = find_max_sum_of_path_in_maze_2(n, m, x+1, y, memo) + find_max_sum_of_path_in_maze_2(n, m, x, y+1, memo)\n    return memo[x][y]\n    \ndef num_of_paths_in_maze_1(n, m, x, y):\n    '''\n    Write a python function to count the number of paths in the maze from position (0, 0) to (n - 1, m - 1). \n    '''\n    if n == 0 or m == 0:\n        return 0\n    if (x,y) == (n-1,m-1):\n        return 1\n    return num_of_paths_in_maze_1(n, m, x+1, y) + num_of_paths_in_maze_1(n, m, x, y+1)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = [int(i) for i in arr]\n    arr.sort()\n    arr.reverse()\n    return arr[0] * arr[1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the array in descending order\n    arr.sort(reverse = True) \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(int, arr))\n    max = arr[0]\n    for num in arr:\n        if num > max:\n            max = num\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(str(i) for i in arr)) \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # return the max no from the arr \n    return max(arr) \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y > 0) or (x > 0 and y < 0):\n        print(\"Both are opposite signs\")\n    elif(x > 0 and y > 0):\n        print(\"Both are positive\")\n    elif(x < 0 and y < 0):\n        print(\"Both are negative\")\n    else:\n        print(\"Both are zero\")\n    \nopposite_Signs(0,0)\nopposite_Signs(-5,5)\nopposite_Signs(5,5)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return not (x<0 and y>0 or x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return 1\n    elif x<0 and y<0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #x,y = int(x), int(y)\n    return ((x<0 and y>0) or (x>0 and y<0))\n    #return(x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y>0:\n        return False\n    else:\n        return True\n    return\n    \n    "
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0)&(y>0):\n        return True\n    elif(x>0)&(y<0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    def check_signs(x,y):\n        if x == 0 and y == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 2) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_square(n):\n        for i in range(1, n):\n            if i * i == n:\n                return True\n        return False\n    def is_triangle(n):\n        for i in range(1, n):\n            if i * (i + 1) / 2 == n:\n                return True\n        return False\n    def is_pentagonal(n):\n        for i in range(1, n):\n            if i * (3 * i - 1) / 2 == n:\n                return True\n        return False\n    def is_hexagonal(n):\n        for i in range(1, n):\n            if i * (2 * i - 1) == n:\n                return True\n        return False\n    def is_heptagonal(n):\n        for i in range(1, n):\n            if i * (5 * i - 3) / 2 == n:\n                return True\n        return False\n    def is_octagonal(n):\n        for i in range(1, n):\n            if i * (3 * i - 2) == n:\n                return True\n        return False\n    if is_square(n):\n        return is_square(n)\n    elif is_triangle(n):\n        return is_triangle(n)\n    elif is_pentagonal(n):\n        return is_pentagonal(n)\n    elif is_hexagonal(n):\n        return is_hexagonal(n)\n    elif is_heptagonal(n):\n        return is_heptagonal(n)\n    elif is_octagonal(n):\n        return is_octagonal(n)\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # https://www.geeksforgeeks.org/octagonal-number-set-1/\n    # https://www.geeksforgeeks.org/octagonal-number-set-2/\n    # https://math.stackexchange.com/questions/1031433/octagonal-number-formula\n    \n    if n < 1:\n        return False\n    else:\n        return n == (1 + (1 + 24 * n) ** 0.5) / 6\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3*n - 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*n)-(n*n)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*n) + (2*n) + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (2 * (n-1) + 1) ** 2 - (2 * (n-1) + 3)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = int(input())\n    return (3*n**2) + (2*n) + 1\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # record the length of each substring\n    # start from each char in s to get each substring\n    # check the sum of each substring and if equal to the length of substring\n    # if yes increment the count\n    # return count\n    N = len(s)\n    if N == 0:\n        return 0\n    subs = defaultdict(list)\n    for i in range(len(s)):\n        subs[i].append(s[i])\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            sub = s[i:j+1]\n            if len(sub) > 1:\n                subs[i].append(sub)\n    count = 0\n    for k in subs.keys():\n        for sub in subs[k]:\n            if sum(map(lambda x: int(x), sub)) == len(sub):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    dict = defaultdict(list)\n    \n    sum = 0\n    \n    for i in range(len(s)):\n        sum += int(s[i])\n        dict[sum].append(s[i])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    pre = 0\n    for i in range(n):\n        cur = 0\n        for j in range(i, n):\n            cur += int(s[j])\n            dp[j - i + 1] += dp[pre]\n            pre = j - i + 1\n    return sum(dp.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    count = 0\n    for i in range(l):\n        for j in range(i, l):\n            count += check_sum(s[i:j+1])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def get_substrings(s):\n        result = []\n        for i in range(len(s)):\n            for j in range(i,len(s)):\n                result.append(s[i:j+1])\n        return result\n    def get_sum(s):\n        return sum([int(x) for x in s])\n    substrings = get_substrings(s)\n    return sum([1 for x in substrings if get_sum(x) == len(x)])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if j-i == sum(int(x) for x in s[i:j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    i = 0\n    count = 0\n    while i < length:\n        j = i\n        while j < length:\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                count += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substring=s[i:j+1]\n            sum_of_substring=0\n            for k in substring:\n                sum_of_substring+=int(k)\n            if len(s[i:j+1])==len(str(sum_of_substring)):\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            d[s[i:j]] += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s)==0:\n        return 0\n    s = s[::-1]\n    substring_count = 0\n    for i in range(len(s)):\n        k = i+1\n        while k<len(s):\n            if sum(list(map(int,s[i:k])))==len(s[i:k]):\n                substring_count +=1\n            k +=1\n    return substring_count\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    smallest = xs[0]\n    \n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    largest = xs[0]\n    \n    for x in xs:\n        if x > largest:\n            largest = x\n    return largest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for x in xs:\n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = xs[0]\n    for x in xs:\n        if x < num:\n            num = x\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = test_list[-1] - test_list[0]\n    for i in range(1, len(test_list)-1):\n        max_diff = max(max_diff, test_list[i+1] - test_list[i])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff_list.append(abs(test_list[i] - test_list[j]))\n    if len(diff_list) == 0:\n        return None\n    else:\n        return max(diff_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([test_list[i] - test_list[i+1] for i in range(len(test_list)-1)])\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Write your code here\n    max_difference = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if max_difference < abs(test_list[i] - test_list[j]):\n                max_difference = abs(test_list[i] - test_list[j])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list first, then scan the list one by one\n    # use a variable to store the maximum difference\n    test_list.sort()\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1] - test_list[i]\n        if max_diff < diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 1:\n        return 0\n    else:\n        test_list.sort()\n        differences = []\n        for i in range(0,len(test_list)-1):\n            differences.append(abs(test_list[i] - test_list[i+1]))\n        return max(differences)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list == []:\n        return None\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print (sorted(subjectmarks, key=lambda x: x[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=itemgetter(1))\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda subjectmarks: subjectmarks[1])\n    print(sorted_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(i+1,len(subjectmarks)):\n            if subjectmarks[i][1] < subjectmarks[j][1]:\n                subjectmarks[i],subjectmarks[j] = subjectmarks[j],subjectmarks[i]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks.sort(key = lambda x : x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l=sorted(subjectmarks,key=lambda x:x[1])\n    return l\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list_sorted = sorted(subjectmarks, key=lambda x:x[1])\n    return list_sorted\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 0:\n        if type(data_list[0]) == list:\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    if not isinstance(data_list, list):\n        return data_list\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    if type(data_list[0]) is list:\n        return sum([recursive_list_sum(data_list[0]), recursive_list_sum(data_list[1:])])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    if not data_list:\n        return result\n    result += data_list[0]\n    if len(data_list) > 1:\n        return result + recursive_list_sum(data_list[1:])\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #return the sum of a list of ints\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for data in data_list:\n        if type(data) == list:\n            result += recursive_list_sum(data)\n        else:\n            result += data\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for num in list if num > 0)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for x in list:\n        if x > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count +=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #list = [1,-1,4,5,-5]\n    count = 0\n    for x in list:\n        if x > 0:\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_numbers = 0\n    for i in list:\n        if i >= 0:\n            positive_numbers += 1\n    return positive_numbers\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return sum(bell(n) for n in range(1, n+1))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2,n+1):\n        for j in range(1,i+1):\n            dp[i] = dp[i] + dp[i-j]\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    \ndef partition(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return partition(n-1) + partition(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = []\n    \n    for i in range(n):\n        bell_set.append(sum(bell_set) + 1)\n    \n    print(bell_set)\n    \n    bell_set = [0] * n\n    \n    bell_set[0] = 1\n    \n    bell_set[1] = 1\n    \n    for i in range(2, n):\n        bell_set[i] = bell_set[i - 1] + bell_set[i - 2]\n        \n    return bell_set[n - 1]\n        \n        \nbell_number(4)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    global bell_memo\n    global num_bells\n    global k\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = 1\n    for i in range(1,n+1):\n        bell[i] = bell[i-1]*i\n    bell[n] = bell[n-1]*(n+1)\n    return bell[n]//(bell[n-n]*bell[n])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    assert (n >= 0), \"Bell numbers can only be defined for n >= 0.\"\n    bell_nums = [1]\n    # bell_nums[1] = 2\n    for i in range(n):\n        bell_nums.append(bell_nums[i]*2)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    def b_n(k,n):\n        if k==0:\n            return 0\n        if k==1:\n            return 1\n        return sum([b_n(k-1,i)*b_n(n-i,k-1) for i in range(1,n+1)])\n    return b_n(n,n)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = [1]\n    for i in range(n):\n        bell_set.append(bell_set[-1]*(n-i))\n    print(bell_set)\n    return bell_set[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_increasing = True\n    is_decreasing = True\n    for i in range(len(A)-1):\n        if(A[i]<A[i+1]):\n            is_increasing = False\n        if(A[i]>A[i+1]):\n            is_decreasing = False\n    if(is_increasing):\n        return True\n    elif(is_decreasing):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            count += 1\n    if count == 0:\n        return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] < A[-1]:\n        for i in range(len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    if A[0] > A[-1]:\n        for i in range(len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif l == []:\n        return False\n    else:\n        return is_sublist(l[1:], s) or (l[0] == s[0] and is_sublist(l[1:], s[1:]))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n    \n    return sub_set\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n    return sub_set\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(s) > len(l):\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    else:\n        if l[0] == s:\n            return True\n        else:\n            return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        for j in range(len(s)):\n            if l[i + j]!= s[j]:\n                break\n            if j == len(s) - 1:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n    \n    return sub_set\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for x in Input:\n        if len(x)!=len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    list_of_tuple = []\n    for tuple_input in Input:\n        list_of_tuple.append(tuple_input)\n    length_tuple = len(list_of_tuple[0])\n    length_list_of_tuple = len(list_of_tuple)\n    # print(length_tuple, length_list_of_tuple)\n    for i in range(0, length_list_of_tuple):\n        for j in range(i+1, length_list_of_tuple):\n            if(len(list_of_tuple[i])!= len(list_of_tuple[j])):\n                return False\n    return True\n    \ndef find_equal_tuple2(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    length_tuple = len(Input[0])\n    length_list_of_tuple = len(Input)\n    print(length_tuple, length_list_of_tuple)\n    for i in range(0, length_list_of_tuple):\n        for j in range(i+1, length_list_of_tuple):\n            if(len(Input[i])!= len(Input[j])):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(Input)):\n        if i%2 == 0:\n            list1.append(Input[i])\n        else:\n            list2.append(Input[i])\n    if len(list1)!= len(list2):\n        print('NO')\n    else:\n        print('YES')\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = None\n    #Xo\u00e1 d\u00f2ng sau v\u00e0 vi\u1ebft code v\u00e0o \u0111\u00e2y set c\u00e1c gi\u00e1 tr\u1ecb ph\u00f9 h\u1ee3p\n    \n    if result:\n        return result\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = Input.split(',')\n    n = len(Input)\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for x in Input:\n        if len(x)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input_length = len(Input[0])\n    for i in Input:\n        if len(i)!= Input_length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    list1=[]\n    list2=[]\n    for i in Input:\n        list1.append(i[0])\n        list2.append(i[1])\n    if len(list1)!=len(set(list1)):\n        return False\n    elif len(list2)!=len(set(list2)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(Input) == len(set(Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    Tuple = tuple(Input)\n    Length = len(Tuple)\n    List_Len = [len(i) for i in Tuple]\n    \n    if len(set(List_Len)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize length of input list\n    length = len(nums)\n    # Set the range of our max gap\n    gap = length\n    # Loop through our list, halving the gap every time\n    while gap > 1:\n        # Initialize the new gap\n        gap = int(gap/1.3)\n        # Initialize the previous iteration's gap\n        prev_gap = gap\n        # Initialize the comparison variable\n        i = 0\n        # Loop through the list until we have gone through each element\n        while i < length - gap:\n            # If our current element is greater than the next element\n            if nums[i] > nums[i + gap]:\n                # Swap them\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # Set our new comparison variable\n                i += gap\n            else:\n                # Set our new gap to be the last one checked\n                gap = prev_gap\n                # Move onto the next element\n                i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n        return nums\n    def is_sorted(nums, i, j):\n        return all(nums[i] <= nums[j] for i in range(j))\n    def sort_pass(nums):\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if not is_sorted(nums, i, j):\n                    nums = swap(nums, i, j)\n        return nums\n    if len(nums) < 2:\n        return nums\n    swap(nums, 0, len(nums) - 1)\n    return sort_pass(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, index1, index2):\n        nums[index1], nums[index2] = nums[index2], nums[index1]\n    \n    gap = len(nums)\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))  # minimum gap is 1\n        swapped = False\n        \n        for i in range(len(nums) - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                swap(nums, i, j)\n                swapped = True\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25)) # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Determine the gap size\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # \u5148\u5c06\u6570\u7ec4\u5206\u4e3a\u4e24\u4e2a\u5b50\u6570\u7ec4\n    list_length = len(nums)\n    gap = list_length\n    swapped = True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        for j in range(1, n):\n            if int(i*i) - int(j*j) == n:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def squares(n):\n        for i in range(1,n+1):\n            if i*i == n:\n                return(i,i)\n            if i*i > n:\n                break\n        return(i-1,int(n-i*i))\n    x = squares(n)\n    if x[0]*x[1]==n:\n        return('YES')\n    if x[0]*x[1]<n:\n        return('NO')\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(sqrt(n))**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    l = []\n    for i in range(1, n+1):\n        if math.sqrt(i) % 1 == 0:\n            l.append(i)\n    if len(l) % 2!= 0:\n        return 'NO'\n    l1 = [i for i in l if i <= n//2]\n    l2 = [i for i in l if i >= n//2]\n    l3 = []\n    for i in l1:\n        for j in l2:\n            if i+j == n:\n                l3.append((i,j))\n    if len(l3) == 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # base case\n    if n < 2:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if(i*i + j*j == n):\n                print(\"\\nNumber is a square\")\n                print(\"\\nFirst Square is:\",i)\n                print(\"\\nSecond Square is:\",j)\n                return True\n                \ndef max_Square(n): \n    '''\n    Write a python function to find the largest square number which is less than a given number. \n    '''\n    largest_square = 0\n    while(largest_square*largest_square < n):\n        largest_square += 1\n    return largest_square\n    \ndef max_div_square(n):\n    '''\n    Write a python function to find the largest square number which is divisible by the given number.\n    '''\n    largest_square = 0\n    while(largest_square*largest_square < n):\n        largest_square += 1\n    if largest_square%n==0:\n        return largest_square\n    else:\n        return max_Square(n)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def isSquare(n,sqr):\n        if sqr*sqr<=n:\n            return False\n        elif sqr*sqr>n:\n            return True\n    def isSubSquare(n,sqr):\n        if sqr*sqr<n:\n            return True\n        elif sqr*sqr>n:\n            return False\n    def isSquare_2(n,sqr):\n        if sqr*sqr<=n:\n            return True\n        elif sqr*sqr>n:\n            return False\n    if isSquare(n,0)==True:\n        return True\n    else:\n        for i in range(1,int(n**0.5)+1):\n            if isSubSquare(n,i)==True:\n                return True\n            elif isSquare(n,i)==False:\n                pass\n            else:\n                return False\ndef dif_Square_2(n):\n    if n%4==0:\n        return True\n    else:\n        return False\ndef sum_Square(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return n*(n+1)*(2*n+1)/6\n    elif n<0:\n        return n*(n+1)*(2*n+1)/6\ndef sum_Square_2(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef num_square(n):\n    if n==0:\n        return 1\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef dif_Square_3(n):\n    if n%4==0:\n        return True\n    else:\n        return False\ndef dif_Square_4(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return n*(n+1)*(2*n+1)/6\n    elif n<0:\n        return n*(n+1)*(2*n+1)/6\ndef sum_Square_3(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef num_square_2(n):\n    if n==0:\n        return 1\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef dif_Square_5(n):\n    if n%4==0:\n        return True\n    elif n%4!=0:\n        return False\n    else:\n        return False\ndef dif_Square_6(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return n*(n+1)*(2*n+1)/6\n    elif n<0:\n        return n*(n+1)*(2*n+1)/6\ndef sum_Square_5(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef num_square_3(n):\n    if n==0:\n        return 1\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef dif_Square_7(n):\n    if n%4==0:\n        return True\n    elif n%4!=0:\n        return False\n    else:\n        return False\ndef dif_Square_8(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return n*(n+1)*(2*n+1)/6\n    elif n<0:\n        return n*(n+1)*(2*n+1)/6\ndef sum_Square_7(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef num_square_4(n):\n    if n==0:\n        return 1\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef dif_Square_9(n):\n    if n%4==0:\n        return True\n    elif n%4!=0:\n        return False\n    else:\n        return False\ndef dif_Square_10(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return n*(n+1)*(2*n+1)/6\n    elif n<0:\n        return n*(n+1)*(2*n+1)/6\ndef sum_Square_9(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef num_square_5(n):\n    if n==0:\n        return 1\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef dif_Square_11(n):\n    if n%4==0:\n        return True\n    elif n%4!=0:\n        return False\n    else:\n        return False\ndef dif_Square_12(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return n*(n+1)*(2*n+1)/6\n    elif n<0:\n        return n*(n+1)*(2*n+1)/6\ndef sum_Square_11(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef num_square_6(n):\n    if n==0:\n        return 1\n    elif n>0:\n        return int(n*(n+1)*(2*n+1)/6)\n    elif n<0:\n        return int(-n*(n+1)*(2*n+1)/6)\ndef dif_Square_13(n):\n    if n%4==0:\n        return True\n    elif n%4!=0:\n        return False\n    else:\n        return False\ndef dif_Square_14(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return n*(n+1)*(2*n+1)/6\n    elif n<0:\n        return n*(n+1)*(2*n+1)/6\ndef sum_Square_13(n):\n    if n==0:\n        return 0\n    elif n>0:\n        return in"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        for j in range(1,n):\n            if i**2 + j**2 == n:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def isSquare(n):\n        i = 1\n        while(i * i <= n): \n            if(i * i == n):\n                return True\n            i = i + 1\n        return False\n    for i in range(1,n):\n        if(isSquare(i) == True):\n            if(n - i == i):\n                print(n, \"is a disarium number\")\n                break\n            else:\n                print(n, \"is not a disarium number\")\n                break\n    \nif __name__ == \"__main__\":\n    n = eval(input(\"Enter number: \"))\n    dif_Square(n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    flag=False\n    i=1\n    while(flag==False and i<=n):\n        if ((n-i**2)**0.5)%1==0:\n            flag=True\n            return 1\n        else:\n            i+=1\n    if flag==False:\n        return 0\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    #Create an array that will store all of the patterns that have already been used\n    current_patterns = []\n    \n    #For each pattern in the list of patterns:\n    for pattern in patterns:\n        \n        #If the current pattern is in the list of patterns, continue\n        if pattern in current_patterns:\n            continue\n        \n        #If the current pattern is not in the list of patterns, continue\n        else:\n            \n            #Add the current pattern to the list of patterns\n            current_patterns.append(pattern)\n            \n            #Set a variable that will store the colors of the current pattern\n            current_colors = []\n            \n            #For each color in the colors array\n            for color in colors:\n                \n                #If the current color is not in the list of current colors:\n                if color not in current_colors:\n                    \n                    #If the current color is the same as the color in the current pattern\n                    if color == pattern[0]:\n                        \n                        #Add the current color to the list of current colors\n                        current_colors.append(color)\n                        \n                        #If the number of colors is equal to the number of patterns:\n                        if len(current_colors) == len(patterns):\n                            \n                            #If the current colors are the same as the pattern\n                            if current_colors == pattern:\n                                return True\n                            \n                            #If the current colors are not the same as the pattern\n                            else:\n                                continue\n                        \n                        #If the number of colors is not the same as the number of patterns\n                        else:\n                            continue\n                    \n                    #If the current color is not the same as the color in the current pattern\n                    else:\n                        continue\n                \n                #If the current color is already in the list of current colors:\n                else:\n                    continue\n    \n    #If there is no match between the colors and patterns, return false\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_length = len(colors)\n    pattern_length = len(patterns)\n    if pattern_length!= color_length:\n        return False\n    \n    for i in range(0, pattern_length):\n        if patterns[i] == 0:\n            if colors[i] == 0:\n                continue\n            else:\n                return False\n        elif patterns[i] == 1:\n            if colors[i] == 1:\n                continue\n            else:\n                return False\n        elif patterns[i] == 2:\n            if colors[i] == 2:\n                continue\n            else:\n                return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] in colors:\n            colors.remove(patterns[i])\n        else:\n            return False\n    return len(colors)==0\n    \nprint(is_samepatterns(['red', 'blue'],['all','odd','even']))\nprint(is_samepatterns(['red', 'green', 'blue'],['odd', 'all', 'odd'])"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Your code here\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def check_patterns(colors, patterns):\n        prev_pattern = patterns[0]\n        for i in range(1, len(patterns)):\n            if prev_pattern == patterns[i]:\n                return False\n            prev_pattern = patterns[i]\n        return True\n    return check_patterns(colors, patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not colors or not patterns: return False\n    counter = defaultdict(int)\n    for i, val in enumerate(colors):\n        counter[val] = i\n    \n    for pattern in patterns:\n        last = i = counter[pattern[0]]\n        for num in pattern:\n            i = counter[num]\n            if i > last: return False\n            last = i\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    n = len(colors)\n    while i < n-1:\n        if colors[i] == colors[i+1] and patterns[i] == patterns[i+1]:\n            i += 2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i, color in enumerate(colors):\n        if color == patterns[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i+1] - colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return set(tuple(i) for i in test_list if all(j % K == 0 for j in i))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    result = []\n    \n    for i in range(len(test_list)):\n        if all(list(map(lambda x: x%K==0, test_list[i])))==True:\n            result.append(test_list[i])\n            \n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if (i[0]%K == 0 and i[1]%K == 0 and i[2]%K == 0 and i[3]%K == 0):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            tuples.append(tup)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for each_tuple in test_list:\n        # print(each_tuple)\n        if all([number%K==0 for number in each_tuple]):\n            result.append(each_tuple)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        flag = 0\n        for x in tup:\n            if x % K == 0:\n                flag += 1\n            else:\n                flag = 0\n                break\n        if flag == len(tup):\n            tuples.append(tup)\n    return tuples\n    \nprint(find_tuples([(1,2,3,4),(3,4,5,6)], 3))"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [i for i in test_list if all([x % K == 0 for x in i])]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #initialise a set to store the tuple\n    tuples = set()\n    #iterate through the list of tuples\n    for i in range(len(test_list)):\n        #iterate through the elements of each tuple\n        for j in range(len(test_list[i])):\n            #if the element is divisible by K\n            if test_list[i][j] % K == 0:\n                #append the tuple to the set\n                tuples.add(test_list[i])\n                #break out of the j loop\n                break\n    #return the set\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #initialize answer as an empty list\n    answer = []\n    #iterate over all elements in the list\n    for a, b, c, d in test_list:\n        #check if all elements are divisible by k\n        if (a % K == 0) and (b % K == 0) and (c % K == 0) and (d % K == 0):\n            #if yes, append the list to the answer list\n            answer.append([a, b, c, d])\n    #return the answer list\n    return answer\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = list()\n    for i in range(0, len(test_list)):\n        if (len(test_list[i]) % K == 0):\n            new_list.append(test_list[i])\n    return new_list\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    # n = 4,\n    # 2, 3\n    # 4 / 2 = 2.5\n    # 2.5 / 2 = 2\n    # 2 / 2 = 1\n    # 1 / 2 = 0\n    # 0 / 2 = 0\n    # 0 / 3 = 0\n    # 0 / 4 = 0\n    # 0 / 5 = 0\n    # 0 / 6 = 0\n    # 0 / 7 = 0\n    # 0 / 8 = 0\n    # 0 / 9 = 0\n    # 0 / 10 = 0\n    \n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n): \n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    return n % 2!= 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether "
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(n):\n        if n%11==0:\n            print(n,\"is divisible by 11\")\n        else:\n            print(n,\"is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n    return\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1,21):\n        if n % i == 0 and n % 11 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    import math\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n        \n        \ndef is_Prime(n): \n    '''\n    Write a Python program to find whether a number is prime or not.\n    '''\n    \n    for i in range(2,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    else:\n        return True\n        \n        \ndef find_pythagorean_triplet(a,b): \n    '''\n    Write a Python program to find whether three given numbers can form a pythagorean triplet.\n    '''\n    \n    for i in range(1,a):\n        for j in range(1,b):\n            k = (i**2+j**2)**(1/2)\n            if k == int(k) and (i+j+int(k)) == 1000:\n                return [i,j,int(k)]\n    return 'No pythagorean triplet can be formed from the given numbers'\n        \n        \ndef fibonacci_modulo(n,m): \n    '''\n    Write a Python program to find the numbers of Fibonacci numbers modulo m.\n    '''\n    \n    n = n % m\n    fib_series = [0,1]\n    while True:\n        fib_series.append(fib_series[-1] + fib_series[-2])\n        if fib_series[-1] % m == n:\n            return fib_series\n        if fib_series[-1] > m:\n            fib_series.pop()\n            break\n        \n        \ndef is_Even_Or_Odd(n): \n    '''\n    Write a Python program to print the even numbers from a given list.\n    '''\n    \n    lst = list(range(1,11))\n    for i in lst:\n        if n % 2 == 0:\n            print(i,end=\" \")\n            \n            \ndef is_Factor(n,m): \n    '''\n    Write a Python program to check whether a number is a factor of another number.\n    '''\n    \n    for i in range(1,m):\n        if m % i == 0:\n            if n % i == 0:\n                return True\n    return False\n    \n    \ndef is_Coprime(n,m): \n    '''\n    Write a Python program to find the gcd and lcm of two numbers.\n    '''\n    \n    return n * m // math.gcd(n,m)\n        \n        \ndef get_Max_Min(arr): \n    '''\n    Write a Python program to get maximum and minimum value from a list.\n    '''\n    \n    max = arr[0]\n    min = arr[0]\n    for i in arr:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return (max,min)\n        \n        \ndef get_min_max_sum_subarray(arr): \n    '''\n    Write a Python program to find the sum of contiguous subarray with the largest sum in a given array of integers.\n    '''\n    \n    sum = arr[0]\n    max = arr[0]\n    for i in arr:\n        if sum + i > max:\n            max = sum + i\n        if sum + i < 0:\n            sum = 0\n        else:\n            sum += i\n    return sum\n        \n        \ndef get_pairs_of_numbers(arr): \n    '''\n    Write a Python program to find all the pairs of numbers whose sum is equal to the result number that is let's say 8.\n    '''\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == 8:\n                print(arr[i],arr[j])\n                \n                \ndef swap_case(s): \n    '''\n    Write a Python program to swap cases of a given string.\n    '''\n    \n    lst = list(s)\n    lst = [i.swapcase() for i in lst]\n    return ''.join(lst)\n        \n        \ndef count_substring(string, sub_string):\n    '''\n    Write a Python function to count substrings that are in alphabetical order.\n    '''\n    \n    count = 0\n    for i in range(len(string)-len(sub_string)+1):\n        if sub_string == string[i:i+len(sub_string)]:\n            count += 1\n    return count\n        \n        \ndef check_perfect_number(n): \n    '''\n    Write a Python program to check whether a number is perfect or not.\n    '''\n    \n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    return False\n        \n        \ndef is_palindrome(s): \n    '''\n    Write a Python program to check whether a string is palindrome or not.\n    '''\n    \n    lst = []\n    s = s.lower()\n    for i in s:\n        if i.isalpha():\n            lst.append(i)\n    if lst == lst[::-1]:\n        return True\n    return False\n        \n        \ndef is_Perfect_Square(n): \n    '''\n    Write a Python program to check whether a number is a perfect square or not.\n    '''\n    \n    return n**0.5 == int(n**0.5)\n        \n        \ndef is_Capital_Letter(s): \n    '''\n    Write a Python program to check whether a string is a capital letter or not.\n    '''\n    \n    for i in s:\n        if i.isupper():\n            return True\n    return False\n        \n        \ndef is_Lower_Case(s): \n    '''\n    Write a Python program to check whether a string is a lower case letter or not.\n    '''\n    \n    for i in s:\n        if i.islower():\n            return True\n    return False\n        \n        \ndef get_missing_number(arr): \n    '''\n    Write a Python program to find the first missing positive number in a given list of numbers.\n    '''\n    \n    arr.sort()\n    for i in range(1,len(arr)+1):\n        if i not in arr:\n            return i\n        \n        \ndef generate_prime_number(n): \n    '''\n    Write a Python program to generate the first n prime numbers.\n    '''\n    \n    lst = [2]\n    for i in range(3,n+1):\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            lst.append(i)\n    return lst\n        \n        \ndef is_Perfect_Number(n): \n    '''\n    Write a Python program to check whether a number is perfect or not.\n    '''\n    \n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    return False\n        \n        \ndef get_Lcm(a,b): \n    '''\n    Write a Python program to get LCM of two numbers.\n    '''\n    \n    return (a*b) // math.gcd(a,b)\n        \n        \ndef is_Triangular(n): \n    '''\n    Write a Python program to check whether a number is triangular or not.\n    '''\n    \n    n = int(n)\n    for i in range(1,int(n**0.5)+1):\n        if n == i*(i+1)//2:\n            return True\n    return False\n        \n        \ndef is_Pythagorean_Triplet(a,b,c): \n    '''\n    Write a Python program to check whether a triangle is a pythagorean triplet or not.\n    '''\n    \n    return a**2 + b**2 == c**2\n        \n        \ndef is_Palindrome(s): \n    '''\n    Write a Python program to check whether a strin"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        print(\"The number is divisible by 11.\")\n    else: \n        print(\"The number is not divisible by 11.\")\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\nprint(is_Diff(int(input(\"Enter a number to check: \"))))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s) \n    if(n % 2 == 0): \n        print(\"Length of the string is even.\") \n    else: \n        print(\"Length of the string is odd.\")\n        \nword_len('test') \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'True'\n    else:\n        return 'False'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length%2 == 0:\n        print(\"even\")\n    else:\n        print(\"odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if (l % 2) == 0:\n        return True\n    else:\n        return False\n        \n    \n    \n    \ndef sent_len(s): \n    '''\n    Write a python function to check whether the length of the sentence is odd or not.\n    '''\n    l = len(s.split())\n    if (l % 2) == 0:\n        return True\n    else:\n        return False\n        \n        \n        \ndef word_count(s):\n    '''\n    Write a python function to count the number of words in a given sentence.\n    '''\n    l = len(s.split())\n    return l\n    \n    \n    \ndef avg_word_len(s): \n    '''\n    Write a python function to calculate the average word length from a given sentence.\n    '''\n    l = len(s.split())\n    avg_len = l/2\n    return avg_len\n    \n    \n    \ndef check_punct(s): \n    '''\n    Write a python function to check whether the given sentence has more than 2 punctuations or not.\n    '''\n    punct = ['.', ',', ':', ';']\n    punct_count = 0\n    for i in s:\n        if i in punct:\n            punct_count += 1\n    if punct_count > 2:\n        return True\n    else:\n        return False\n    \n    \ndef check_sent(s): \n    '''\n    Write a python function to check whether the given sentence ends with \".\" or not.\n    '''\n    if s[-1] == '.':\n        return True\n    else:\n        return False\n        \n        \ndef check_start(s): \n    '''\n    Write a python function to check whether the given sentence starts with \"The\" or not.\n    '''\n    if s[0:3] == \"The\":\n        return True\n    else:\n        return False\n    \n    \ndef check_stop(s): \n    '''\n    Write a python function to check whether the given sentence ends with \"The\" or not.\n    '''\n    if s[-4:] == \"The\":\n        return True\n    else:\n        return False\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        print(s + \"is even\")\n    else:\n        print(s + \"is odd\")\n    return length\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return (n * (n - 1) * (n - 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1)/2)**0.5)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1) * (n+2) // 6)\n    \ndef cuban_number(n):\n    '''\n    Write a function to find the nth cuban number.\n    '''\n    return (n * (2*n - 1) * (2*n)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sum = 0\n    count = 0\n    while count <= n:\n        sum += count\n        count += 1\n    return sum\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1) * (n+2) * (n+3)) // 24\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0: \n        return \"Sorry, must be greater than 0.\"\n    if n == 0: \n        return 0\n    return n * (n + 1) * (n + 2) / 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n - 1)//2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a count variable\n    count = 0\n    # Initialize an iterative variable\n    i = 1\n    # Initialize a list\n    tetrahedral_numbers = []\n    # Iterate through the numbers\n    while count!= n:\n        # Calculate the value\n        tetrahedral = i * (3 * i - 1) / 2\n        # Append the value\n        tetrahedral_numbers.append(tetrahedral)\n        # Increase the count\n        count += 1\n        # Increment i\n        i += 1\n    # Return the list\n    return tetrahedral_numbers\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n + 1)*(n + 2))/6\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4/3 * math.pi * (r**3)\n    return vol\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    per = 2*(a+b)\n    return per\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    per = a+b+a+b\n    return per\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    per = 4*a\n    return per\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    per = a+b+c\n    return per\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    per = 2*math.pi*r\n    return per\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    per = 2*(a+b)\n    return per\ndef perimeter_trapezium(a,b,h):\n    '''\n    Write a function to find the perimeter of a trapezium.\n    '''\n    per = a+b+h\n    return per\ndef perimeter_kite(a,b):\n    '''\n    Write a function to find the perimeter of a kite.\n    '''\n    per = 2*(a+b)\n    return per\ndef perimeter_heptagon(a,b):\n    '''\n    Write a function to find the perimeter of a heptagon.\n    '''\n    per = 5*a+a\n    return per\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of an octagon.\n    '''\n    per = 8*a\n    return per\ndef perimeter_nonagon(a,b):\n    '''\n    Write a function to find the perimeter of a nonagon.\n    '''\n    per = 5*a+4*b\n    return per\ndef perimeter_decagon(a,b):\n    '''\n    Write a function to find the perimeter of a decagon.\n    '''\n    per = 10*a+9*b\n    return per\ndef perimeter_regular_polygon(sides,r):\n    '''\n    Write a function to find the perimeter of a regular polygon.\n    '''\n    per = sides*(2*math.pi*r)\n    return per\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = a*b\n    return area\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    area = 1/2*a*b\n    return area\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = a**2\n    return area\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi*(r**2)\n    return area\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = a*b\n    return area\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    area = 1/2*(a+b)*h\n    return area\ndef area_kite(a,b):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    area = 1/2*a*b\n    return area\ndef area_heptagon(a,b):\n    '''\n    Write a function to find the area of a heptagon.\n    '''\n    area = 1/2*(a*b)*(math.sqrt(5))\n    return area\ndef area_octagon(a):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    area = (math.sqrt(2))/4*(a**2)\n    return area\ndef area_nonagon(a,b):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    area = 1/4*(math.sqrt(2))*(a**2)*b\n    return area\ndef area_decagon(a,b):\n    '''\n    Write a function to find the area of a decagon.\n    '''\n    area = 1/4*a*(b**2)*math.sqrt(5)\n    return area\ndef area_regular_polygon(sides,r):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area = 1/2*(math.sqrt(2)*r)*sides*sides\n    return area\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    return area\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = a**3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (math.pi*(r**2)*h)\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = (1/3)*math.pi*(a**2)*h\n    return volume\ndef volume_prism(a,b,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume = (a*b*h)\n    return volume\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    volume = (1/3)*math.pi*(r**3)\n    return volume\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    volume = (4/3)*math.pi*a*b*c\n    return volume\ndef area_of_base(r,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (r*h)/2\n    return area\ndef volume_of_base(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\ndef volume_of_base_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = (1/3)*math.pi*(a**2)*b\n    return volume\ndef area_of_base_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    area = 4*math.pi*r**2\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    return (4/3)*math.pi*(r**3)\n    "
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    print(volume)\nvolume_sphere(2)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef area_cube(l):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    return 6*l**2\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*w\ndef area_triangle(l,w):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 1/2*l*w\ndef area_parallelogram(l,w):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return l*w\ndef area_trapezoid(l,w,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return 1/2*(l+w)*h\ndef area_rhombus(l,w):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return 1/2*l*w\ndef area_kite(l,w,h):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    return 1/2*l*w*h\ndef area_regular_polygon(sides,side):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    return (1/2)*sides*side\ndef volume_regular_polygon(sides,side):\n    '''\n    Write a function to find the volume of a regular polygon.\n    '''\n    return (1/2)*math.pi*side**2*sides\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_cylinder_with_bottom(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a bottom.\n    '''\n    return math.pi*r**2*h\ndef volume_cylinder_with_top(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a top.\n    '''\n    return math.pi*r**2*h/3\ndef volume_cone_with_bottom(r,h):\n    '''\n    Write a function to find the volume of a cone with a bottom.\n    '''\n    return (1/3)*math.pi*r**2*h\ndef volume_cone_with_top(r,h):\n    '''\n    Write a function to find the volume of a cone with a top.\n    '''\n    return (1/3)*math.pi*r**2*h/3\ndef area_triangle_with_base(b,h):\n    '''\n    Write a function to find the area of a triangle with a base.\n    '''\n    return 1/2*b*h\ndef area_triangle_with_height(b,h):\n    '''\n    Write a function to find the area of a triangle with a height.\n    '''\n    return 1/2*b*h\ndef volume_prism(b,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return 1/3*b*h\ndef area_regular_pyramid(sides,side):\n    '''\n    Write a function to find the area of a regular pyramid.\n    '''\n    return (1/2)*sides*side**2\ndef volume_regular_pyramid(sides,side):\n    '''\n    Write a function to find the volume of a regular pyramid.\n    '''\n    return (1/3)*math.pi*side**2*sides\ndef area_regular_hexagon(sides,side):\n    '''\n    Write a function to find the area of a regular hexagon.\n    '''\n    return (1/4)*sides*side**2\ndef area_regular_octagon(sides,side):\n    '''\n    Write a function to find the area of a regular octagon.\n    '''\n    return (1/4)*sides*side**2\ndef volume_pyramid(sides,side):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (1/3)*math.pi*side**2*sides\ndef volume_hexagonal_prism(sides,side):\n    '''\n    Write a function to find the volume of a hexagonal prism.\n    '''\n    return (1/3)*sides*side**2\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l*w*h\ndef volume_spherical_cap():\n    '''\n    Write a function to find the volume of a spherical cap.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_parallelepiped(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return l*w*h\ndef volume_ellipsoid(l,w,h):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (1/3)*math.pi*r**2*h\ndef volume_ball():\n    '''\n    Write a function to find the volume of a ball.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_cone_helper(r,h):\n    '''\n    Write a helper function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_cylinder_helper(r,h):\n    '''\n    Write a helper function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef volume_sphere_helper(r):\n    '''\n    Write a helper function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_pyramid_helper(sides,side):\n    '''\n    Write a helper function to find the volume of a pyramid.\n    '''\n    return (1/3)*math.pi*side**2*sides\ndef volume_hexagonal_prism_helper(sides,side):\n    '''\n    Write a helper function to find the volume of a hexagonal prism.\n    '''\n    return (1/3)*sides*side**2\ndef area_helper(shape,l,w,h):\n    '''\n    Write a helper function to find the area of an object.\n    '''\n    if shape == 'Cube':\n        return area_cube(l)\n    elif shape == 'Rectangle':\n        return area_rectangle(l,w)\n    elif shape == 'Triangle':\n        return area_triangle(l,w)\n    elif shape == 'Parallelogram':\n        return area_parallelogram(l,w)\n    elif shape == 'Trapezoid':\n        return area_trapezoid(l,w,h)\n    elif shape == 'Rhombus':\n        return area_rhombus(l,w)\n    elif shape == 'Kite':\n        return area_kite(l,w,h)\n    elif shape == 'Regular Polygon':\n        return area_regular_polygon(l,w)\n    elif shape == 'Cone':\n        return area_cone(r,h)\n    elif shape == 'Cylinder':\n        return area_cylinder(r,h)\n    elif shape == 'Cylinder With Top':\n        return area_cylinder_with_top(r,h)\n    elif shape == 'Cylinder With Bottom':\n        return area_cylinder_with_bottom(r,h)\n    elif shape == 'Cone With Top':\n        return area_cone_with_top("
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # using only the volume formula of a sphere\n    r = r*r*math.pi\n    return r\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4 / 3) * (math.pi * (r ** 3))\n    return vol\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return char % 26\n    \ndef get_Char_ver_2(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    Another way of solving this problem.\n    '''\n    return sum([ord(c) for c in strr]) % 26\n    \ndef get_Char_ver_3(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum(ord(c) for c in strr) % 26\n    "
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(c) for c in strr]) % 26\n    #Another solution\n    '''\n    return sum([ord(c) for c in strr]) % 26\n    '''\n    \n    \nif __name__ == \"__main__\":\n    str1 = \"hello\"\n    str2 = \"world\"\n    str3 = \"foobar\"\n    print(get_Char(str1))\n    print(get_Char(str2))\n    print(get_Char(str3))\n    "
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list1=[]\n    sum=0\n    for i in strr:\n        list1.append(ord(i))\n    for i in list1:\n        sum=sum+i\n    return(chr(sum%26))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.replace(' ','')\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x = sum(ord(c) for c in strr)%26\n    return chr(x+97)\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x = sum(ord(c) for c in strr)%26\n    return chr(x+97)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0 \n    for i in strr:\n        sum = sum + ord(i)\n    return chr(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    temp=0\n    for x in strr:\n        temp+=ord(x)\n    temp%=26\n    return chr(temp+97)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    num = 0\n    for i in strr:\n        num = num + ord(i)\n    return chr(num % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # code here\n    return reduce(lambda x,y:x+y,map(lambda x:ord(x),strr),0)%26\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    prev = 0\n    new = 1\n    for i in range(n):\n        temp = new\n        new = prev + new * 2\n        prev = temp\n    return new\nprint(sequence(4))\nprint(sequence(5))\nprint(sequence(6))\nprint(sequence(7))\nprint(sequence(8)"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: return 0\n    elif n == 2: return 1\n    elif n == 3: return 2\n    elif n == 4: return 3\n    elif n == 5: return 5\n    elif n == 6: return 8\n    else: return sequence(n - 1) - sequence(n - 5)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #Using map to sum list elements\n    newman = sum(list(map(int, str(n))))\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    f = 0\n    while f!= n:\n        i += 1\n        if i % 2 == 0:\n            f += 1\n    return i\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else:\n        return sequence(n-1)+sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    last_num_spoken = []\n    last_num_spoken = {}\n    count = 1\n    current_num = 1\n    while True:\n        if len(last_num_spoken) < n:\n            last_num_spoken[count] = current_num\n            count += 1\n            current_num = 0\n        else:\n            last_num = last_num_spoken[count]\n            last_num_spoken[count] = current_num\n            current_num = count - last_num\n            count += 1\n        if count == 2020:\n            return current_num\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    else:\n        return sequence(n - 1) + sequence(n - 2) - sequence(n - 4)\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 1\n    current = 1\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r<0:\n        return -1\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403\n    pi = math.pi\n    surfacearea = 4 * pi * r * r\n    return surfacearea\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403\n    pi = math.pi\n    surfacearea = 2 * pi * r * (r + h)\n    return surfacearea\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403\n    pi = math.pi\n    surfacearea = pi * r * (r + (r * h))\n    return surfacearea\ndef surfacearea_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    surfacearea = 2 * (a * b + a * c + b * c)\n    return surfacearea\ndef surfacearea_cone_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403\n    pi = math.pi\n    surfacearea = pi * r * (r + (r * h))\n    return surfacearea\ndef surfacearea_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surfacearea = b * h\n    return surfacearea\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surfacearea = a * b\n    return surfacearea\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    surfacearea = a * b\n    return surfacearea\ndef surfacearea_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    surfacearea = 1/2 * a * h + b * h\n    return surfacearea\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    print('The surface area of a sphere with a radius of {0} is {1}'.format(r,area))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #surface area of a sphere = 4*pi*r^2\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volume_cube(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return side ** 3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r ** 2 * h\ndef surfacearea_cube(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * side ** 2\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * r * (r + h)\ndef surfacearea_parallelipiped(a, b, c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2 * (a * b + b * c + c * a)\ndef volume_parallelipiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return a * b * c\ndef volume_rhombus(d,h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return d * h / 2\ndef surfacearea_rhombus(d,h):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return 2 * (d * h / 2 + d * d / 2)\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a * b\ndef surfacearea_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of a ellipsoid.\n    '''\n    return (4 * math.pi * a * b * c) / 3\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of a ellipsoid.\n    '''\n    return (4 * math.pi * a * b * c) / 3\ndef surfacearea_triangle(a,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return a * h / 2\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a * b * c) / 2\ndef surfacearea_triangularprism(a,b,c,h):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    return 2 * (a * b + a * c + b * c) + 2 * h * (a * b + b * c + c * a)\ndef volume_triangularprism(a,b,c,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return (a * b * c) + 2 * h * (a * b + b * c + c * a)\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return 2 * (a * b)\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a * b\ndef surfacearea_rectangularprism(a,b,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2 * (a * b) + 2 * h * (a + b)\ndef volume_rectangularprism(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a * b + 2 * h * (a + b)\ndef surfacearea_conesurface(a,b,h):\n    '''\n    Write a function to find the surface area of a cone surface.\n    '''\n    return math.pi * a * b + math.pi * a ** 2 * h / 3\ndef volume_conesurface(a,b,h):\n    '''\n    Write a function to find the volume of a cone surface.\n    '''\n    return (math.pi / 3) * a ** 2 * b + (math.pi / 3) * a ** 2 * h\ndef surfacearea_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 2 * (a * b + a * c + b * c)\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a * b * c\ndef surfacearea_cylindercurve(r,h):\n    '''\n    Write a function to find the surface area of a cylinder curve.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef volume_cylindercurve(r,h):\n    '''\n    Write a function to find the volume of a cylinder curve.\n    '''\n    return (math.pi * r ** 2 * h) / 3\ndef surfacearea_conecurve(r,h):\n    '''\n    Write a function to find the surface area of a cone curve.\n    '''\n    return math.pi * r * (r + h)\ndef volume_conecurve(r,h):\n    '''\n    Write a function to find the volume of a cone curve.\n    '''\n    return (1 / 3) * math.pi * r ** 2 * h\ndef surfacearea_hollowcylinder(r1,r2,h):\n    '''\n    Write a function to find the surface area of a hollow cylinder.\n    '''\n    return (2 * math.pi * r2 * (r2 + h)) + (2 * math.pi * r1 * (r1 + h))\ndef volume_hollowcylinder(r1,r2,h):\n    '''\n    Write a function to find the volume of a hollow cylinder.\n    '''\n    return ((math.pi / 3) * r2 ** 2 * h) + ((math.pi / 3) * r1 ** 2 * h)\ndef surfacearea_hollowcone(r1,r2,h):\n    '''\n    Write a function to find the surface area of a hollow cone.\n    '''\n    return (math.pi * r2 * (r2 + h)) + (math.pi * r1 * (r1 + h))\ndef volume_hollowcone(r1,r2,h):\n    '''\n    Write a function to find the volume of a hollow cone.\n    '''\n    return ((1 / 3) * math.pi * r2 ** 2 * h) + ((1 / 3) * math.pi * r1 ** 2 * h)\ndef surfacearea_sphereface(r):\n    '''\n    Write a function to find the surface area of a sphere face.\n    '''\n    return 4 * math.pi * r ** 2\ndef volume_sphereface(r):\n    '''\n    Write a function to find the volume of a sphere face.\n    '''\n    return (4 / 3) * math.pi * r ** 3\ndef surfacearea_hollowsphereface(r):\n    '''\n    Write a function to find the surface area of a hollow sphere face.\n    '"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159265359\n    r = float(r)\n    sa = 4*pi*(r**2)\n    return sa\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    r = float(r)\n    h = float(h)\n    sa = 2*pi*(r**2)+2*pi*r*h\n    return sa\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi = 3.14159265359\n    r = float(r)\n    h = float(h)\n    sa = pi*(r**2)+pi*(r*h)/3\n    return sa\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    l = float(l)\n    sa = 6*(l**2)\n    return sa\ndef surfacearea_rectprism(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    sa = 2*(l*w+l*h+w*h)\n    return sa\ndef surfacearea_circprism(r):\n    '''\n    Write a function to find the surface area of a circular prism.\n    '''\n    pi = 3.14159265359\n    r = float(r)\n    sa = 2*pi*(r**2)\n    return sa\ndef surfacearea_trapezoid(l,w,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    sa = (l*w+l*h+w*h)/2\n    return sa\ndef surfacearea_rhombus(d):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    d = float(d)\n    sa = (math.sqrt(2)*d**2)/2\n    return sa\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    a = float(a)\n    b = float(b)\n    sa = a*b\n    return sa\ndef surfacearea_trapezoid(l,w,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    sa = (l*w+l*h+w*h)/2\n    return sa\ndef surfacearea_quadrilateral(a,b,c,d):\n    '''\n    Write a function to find the surface area of a quadrilateral.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    d = float(d)\n    sa = (a+b+c+d)/2\n    return sa\ndef surfacearea_kite(r,s):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    r = float(r)\n    s = float(s)\n    sa = math.pi*(r**2)\n    return sa\ndef surfacearea_pyramid(a,s):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    a = float(a)\n    s = float(s)\n    sa = math.sqrt((a**2)*(s**2))/4\n    return sa\ndef surfacearea_spheropolyhedron(r):\n    '''\n    Write a function to find the surface area of a spheropolyhedron.\n    '''\n    r = float(r)\n    pi = 3.14159265359\n    sa = 4*pi*(r**2)\n    return sa\ndef surfacearea_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    r = float(r)\n    pi = 3.14159265359\n    sa = 4*pi*(r**2)\n    return sa\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    sa = 2*pi*(r**2)+2*pi*r*h\n    return sa\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    sa = pi*(r**2)+pi*(r*h)/3\n    return sa\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    l = float(l)\n    sa = 6*(l**2)\n    return sa\ndef surfacearea_rectprism(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    sa = 2*(l*w+l*h+w*h)\n    return sa\ndef surfacearea_circprism(r):\n    '''\n    Write a function to find the surface area of a circular prism.\n    '''\n    r = float(r)\n    pi = 3.14159265359\n    sa = 2*pi*(r**2)\n    return sa\ndef surfacearea_trapezoid(l,w,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    sa = (l*w+l*h+w*h)/2\n    return sa\ndef surfacearea_rhombus(d):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    d = float(d)\n    sa = (math.sqrt(2)*d**2)/2\n    return sa\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    a = float(a)\n    b = float(b)\n    sa = a*b\n    return sa\ndef surfacearea_trapezoid(l,w,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    sa = (l*w+l*h+w*h)/2\n    return sa\ndef surfacearea_quadrilateral(a,b,c,d):\n    '''\n    Write a function to find the surface area of a quadrilateral.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    d = float(d)\n    sa = (a+b+c+d)/2\n    return sa\ndef surfacearea_kite(r,s):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    r = float(r)\n    s = float(s)\n    sa = math.pi*(r**2)\n    return sa\ndef surfacearea_pyramid(a,s):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    a = float(a)\n    s = float(s)\n    sa = math.sqrt((a**2)*(s**2))/4\n    return sa\ndef surfacearea_spheropolyhedron(r):\n    '''\n    Write a function to find the surface area of a spheropolyhedron.\n    '''\n    r = floa"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere = 4 * math.pi * r ** 2\n    print(surfacearea_sphere)\n    return surfacearea_sphere\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    def surfacearea_sphere(r):\n        '''\n        Write a function to find the surface area of a sphere.\n        '''\n        PI = 3.14159265\n        return 4.0*PI*(r**2)\n    return surfacearea_sphere(r)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4*math.pi*r**2\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return(n*(3*n-1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    start_num = 1\n    curr_num = 2\n    if n == 1:\n        return 1\n    else:\n        while n > 0:\n            n -= 1\n            if (curr_num % 2) == 0:\n                start_num = start_num - curr_num\n            else:\n                start_num = start_num + curr_num\n            curr_num = curr_num + 1\n    return start_num\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return\n    last_term = None\n    a = 1\n    i = 1\n    while True:\n        term = a * (3 ** i - 1) // 2\n        if last_term is None:\n            last_term = term\n        if term > n:\n            return last_term\n        a += 1\n        i += 1\n        last_term = term\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    nth = [0,1,2,4,5,6,8]\n    if n > 7:\n        i = 0\n        while n > nth[i]:\n            i += 1\n        return nth[i] + hexagonal_number(i)\n    else:\n        return nth[n]\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return hexagonal_number(n - 1) + 2 * hexagonal_number(n // 2 - 1)\n    else:\n        return hexagonal_number(n - 1) + 2 * hexagonal_number((n - 1) // 2)\n    \ndef hexagonal_number(n):\n    '''\n    Write a function to find nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return hexagonal_number(n - 1) + hexagonal_number(n - 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def neighbors(i):\n        return [i-1, i+1, i+2]\n    def hexagonal_number(n):\n        return (1/2)*(n*(n+1))\n    def find_center(n):\n        k = 1\n        while hexagonal_number(k) < n:\n            k += 1\n        return k-1\n    def hexagonal_sequence_up_to(n):\n        return [hexagonal_number(k) for k in range(n+1)]\n    def find_neighbor(n):\n        return hexagonal_sequence_up_to(n)[n]\n    def neighbors_of_center(center):\n        return [neighbor for neighbor in neighbors(center) if neighbor > 0]\n    def find_left_neighbor(center):\n        left_neighbor_index = find_neighbor(center) - 1\n        if left_neighbor_index == 0:\n            left_neighbor_index = neighbors_of_center(center)[-1]\n        return left_neighbor_index\n    def find_right_neighbor(center):\n        right_neighbor_index = find_neighbor(center) + 1\n        if right_neighbor_index == len(hexagonal_sequence_up_to(n)):\n            right_neighbor_index = neighbors_of_center(center)[0]\n        return right_neighbor_index\n    def find_next_center(center):\n        return (find_left_neighbor(center) + find_right_neighbor(center)) // 2\n    def find_hexagonal_sequence(n):\n        i = 0\n        while hexagonal_number(i) < n:\n            i += 1\n        return i\n    k = find_hexagonal_sequence(n)\n    center = find_center(k)\n    center_neighbors = neighbors_of_center(center)\n    i = find_next_center(center)\n    while i not in center_neighbors:\n        i = find_next_center(i)\n    return hexagonal_number(i)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def r(x):\n        return int(np.round(np.sqrt(3)*x))\n    x = n*(n+1)/2\n    return int(x) if r(x)**2 == x else r(x) - 1\n    \ncentered_hexagonal_number(0)\ncentered_hexagonal_number(1)\ncentered_hexagonal_number(2)\ncentered_hexagonal_number(3)\ncentered_hexagonal_number(5)\ncentered_hexagonal_number(6)\ncentered_hexagonal_number(7)\ncentered_hexagonal_number(8)\ncentered_hexagonal_number(9)\ncentered_hexagonal_number(10)\ncentered_hexagonal_number(11)\ncentered_hexagonal_number(12)\ncentered_hexagonal_number(13)\ncentered_hexagonal_number(14)\ncentered_hexagonal_number(15)\ncentered_hexagonal_number(16)\ncentered_hexagonal_number(17)\ncentered_hexagonal_number(18)\ncentered_hexagonal_number(19)\ncentered_hexagonal_number(20)\ncentered_hexagonal_number(21)\ncentered_hexagonal_number(22)\ncentered_hexagonal_number(23)\ncentered_hexagonal_number(24)\ncentered_hexagonal_number(25)\ncentered_hexagonal_number(26)\ncentered_hexagonal_number(27)\ncentered_hexagonal_number(28)\ncentered_hexagonal_number(29)\ncentered_hexagonal_number(30)\ncentered_hexagonal_number(31)\ncentered_hexagonal_number(32)\ncentered_hexagonal_number(33)\ncentered_hexagonal_number(34)\ncentered_hexagonal_number(35)\ncentered_hexagonal_number(36)\ncentered_hexagonal_number(37)\ncentered_hexagonal_number(38)\ncentered_hexagonal_number(39)\ncentered_hexagonal_number(40)\ncentered_hexagonal_number(41)\ncentered_hexagonal_number(42)\ncentered_hexagonal_number(43)\ncentered_hexagonal_number(44)\ncentered_hexagonal_number(45)\ncentered_hexagonal_number(46)\ncentered_hexagonal_number(47)\ncentered_hexagonal_number(48)\ncentered_hexagonal_number(49)\ncentered_hexagonal_number(50)\ncentered_hexagonal_number(51)\ncentered_hexagonal_number(52)\ncentered_hexagonal_number(53)\ncentered_hexagonal_number(54)\ncentered_hexagonal_number(55)\ncentered_hexagonal_number(56)\ncentered_hexagonal_number(57)\ncentered_hexagonal_number(58)\ncentered_hexagonal_number(59)\ncentered_hexagonal_number(60)\ncentered_hexagonal_number(61)\ncentered_hexagonal_number(62)\ncentered_hexagonal_number(61)\ncentered_hexagonal_number(60)\ncentered_hexagonal_number(59)\ncentered_hexagonal_number(58)\ncentered_hexagonal_number(57)\ncentered_hexagonal_number(56)\ncentered_hexagonal_number(55)\ncentered_hexagonal_number(54)\ncentered_hexagonal_number(53)\ncentered_hexagonal_number(52)\ncentered_hexagonal_number(51)\ncentered_hexagonal_number(50)\ncentered_hexagonal_number(49)\ncentered_hexagonal_number(48)\ncentered_hexagonal_number(47)\ncentered_hexagonal_number(46)\ncentered_hexagonal_number(45)\ncentered_hexagonal_number(44)\ncentered_hexagonal_number(43)\ncentered_hexagonal_number(42)\ncentered_hexagonal_number(41)\ncentered_hexagonal_number(40)\ncentered_hexagonal_number(39)\ncentered_hexagonal_number(38)\ncentered_hexagonal_number(37)\ncentered_hexagonal_number(36)\ncentered_hexagonal_number(35)\ncentered_hexagonal_number(34)\ncentered_hexagonal_number(33)\ncentered_hexagonal_number(32)\ncentered_hexagonal_number(31)\ncentered_hexagonal_number(30)\ncentered_hexagonal_number(29)\ncentered_hexagonal_number(28)\ncentered_hexagonal_number(27)\ncentered_hexagonal_number(26)\ncentered_hexagonal_number(25)\ncentered_hexagonal_number(24)\ncentered_hexagonal_number(23)\ncentered_hexagonal_number(22)\ncentered_hexagonal_number(21)\ncentered_hexagonal_number(20)\ncentered_hexagonal_number(19)\ncentered_hexagonal_number(18)\ncentered_hexagonal_number(17)\ncentered_hexagonal_number(16)\ncentered_hexagonal_number(15)\ncentered_hexagonal_number(14)\ncentered_hexagonal_number(13)\ncentered_hexagonal_number(12)\ncentered_hexagonal_number(11)\ncentered_hexagonal_number(10)\ncentered_hexagonal_number(9)\ncentered_hexagonal_number(8)\ncentered_hexagonal_number(7)\ncentered_hexagonal_number(6)\ncentered_hexagonal_number(5)\ncentered_hexagonal_number(4)\ncentered_hexagonal_number(3)\ncentered_hexagonal_number(2)\ncentered_hexagonal_number(1)\ncentered_hexagonal_number(0)\ncentered_hexagonal_number(1)\ncentered_hexagonal_number(2)\ncentered_hexagonal_number(3)\ncentered_hexagonal_number(4)\ncentered_hexagonal_number(5)\ncentered_hexagonal_number(6)\ncentered_hexagonal_number(7)\ncentered_hexagonal_number(8)\ncentered_hexagonal_number(9)\ncentered_hexagonal_number(10)\ncentered_hexagonal_number(11)\ncentered_hexagonal_number(12)\ncentered_hexagonal_number(13)\ncentered_hexagonal_number(14)\ncentered_hexagonal_number(15)\ncentered_hexagonal_number(16)\ncentered_hexagonal_number(17)\ncentered_hexagonal_number(18)\ncentered_hexagonal_number(19)\ncentered_hexagonal_number(20)\ncentered_hexagonal_number(21)\ncentered_hexagonal_number(22)\ncentered_hexagonal_number(23)\ncentered_hexagonal_number(24)\ncentered_hexagonal_number(25)\ncentered_hexagonal_number(26)\ncentered_hexagonal_number(27)\ncentered_hexagonal_number(28)\ncentered_hexagonal_number(29)\ncentered_hexagonal_number(30)\ncentered_hexagonal_number(31)\ncentered_hexagonal_number(32)\ncentered_hexagonal_number(33)\ncentered_hexagonal_number(34)\ncentered_hexagonal_number(35)\ncentered_hexagonal_number(36)\ncentered_hexagonal_number(37)\ncentered_hexagonal_number(38)\ncentered_hexagonal_number(39)\ncentered_hexagonal_number(40)\ncentered_hexagonal_number(41)\ncentered_hexagonal_number(42)\ncentered_hexagonal_number(43)\ncentered_hexagonal_number(44)\ncentered_hexagonal_number(45)\ncentered_hexagonal_number(46)\ncentered_hexagonal_number(47)\ncentered_hexagonal_number(48)\ncentered_hexagonal_number(49)\ncentered_hexagonal_number(50)\ncentered_hexagonal_number(51)\ncentered_hexagonal_number(52)\ncentered_hexagonal_number(53)\ncentered_hexagonal_number(54)\ncentered_hexagonal_number(55)\ncentered_hexagonal_number(56)\ncentered_hexagonal_number(57)\ncentered_hexagonal_number(58)\ncentered_hexagonal_number(59)\ncentered_hexagonal_number(60)\ncentered_hexagonal_number(61)\ncentered_hexagonal_number(62)\ncentered_hexagonal_number(61)\ncentered_hexagonal_number(60)\ncentered_hexagonal_number(59)\ncentered_hexagonal_number(58)\ncentered_hexagonal_number(57)\ncentered_hexagonal_number(56)\ncentered_hexagonal_number(55)\ncentered_hexagonal_number(54)\ncentered_hexagonal_number(53)\ncentered_he"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n) - hexagonal_number(n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # create dictionary to store centered hexagonal numbers\n    centered_hexagonal_numbers = {}\n    # iterate over hexagonal numbers\n    for k in range(1, 350):\n        # print(k)\n        # generate hexagonal number\n        hexagonal_number = k * (2 * k - 1)\n        # calculate its centering\n        hexagonal_number_centered = hexagonal_number - (k * (k - 1) / 2)\n        # store it in the dictionary\n        centered_hexagonal_numbers[hexagonal_number_centered] = hexagonal_number\n    # return value corresponding to the nth hexagonal number\n    return centered_hexagonal_numbers[n]\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return hexagonal_number(n) - hexagonal_number(n-2)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dictionary = {}\n    for keys in dict1:\n        merged_dictionary[keys] = dict1[keys]\n    for keys in dict2:\n        if keys in merged_dictionary.keys():\n            merged_dictionary[keys] = merged_dictionary[keys] + dict2[keys]\n        else:\n            merged_dictionary[keys] = dict2[keys]\n    for keys in dict3:\n        if keys in merged_dictionary.keys():\n            merged_dictionary[keys] = merged_dictionary[keys] + dict3[keys]\n        else:\n            merged_dictionary[keys] = dict3[keys]\n    return merged_dictionary\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3.update(dict1)\n    dict3.update(dict2)\n    return dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2) and dict1.update(dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print (type(dict1))\n    return dict(list(dict1.items())+list(dict2.items())+list(dict3.items()))\n    #return dict1\n    \nprint(merge_dictionaries_three({1:10, 2:20}, {3:30, 4:40}, {5:50, 6:60}))\nprint(merge_dictionaries_three({1:100, 2:200}, {3:300, 4:400}, {5:500, 6:600}))\nprint(merge_dictionaries_three({1:1000, 2:2000}, {3:3000, 4:4000}, {5:5000, 6:6000}))\nprint(merge_dictionaries_three({1:10000, 2:20000}, {3:30000, 4:40000}, {5:50000, 6:60000}))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2).update(dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if dict1 == None or dict2 == None or dict3 == None:\n        return {}\n    else:\n        return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1 and not dict2 and not dict3:\n        return {}\n    if not dict1 and not dict2:\n        return dict3\n    if not dict1 and not dict3:\n        return dict2\n    if not dict2 and not dict3:\n        return dict1\n    result = {}\n    if dict1 and dict2:\n        result = dict(dict1, **dict2)\n    if dict1 and dict3:\n        result = dict(dict1, **dict3)\n    if dict2 and dict3:\n        result = dict(result, **dict3)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if isinstance(list1, list):\n        return collections.Counter(list1)\n    else:\n        print('Input is not a list')\n        return -1\n        \nprint(freq_count([5, 5, 2, 2, 3, 3, 3]))\nprint(freq_count([1, 2, 2, 3, 3, 4, 5]))\nprint(freq_count(['a', 'b', 'a', 'c', 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(freq_count(['a', 'b', 'a', 'c', 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(freq_count('a'))\nprint(freq_count(''))\nprint(freq_count([]))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    dict2 = {}\n    for i in list2:\n        dict2[i] = list1.count(i)\n    return dict2\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    for i in list1:\n        if i in list(freq_count.dic1.keys()):\n            freq_count.dic1[i] += 1\n        else:\n            freq_count.dic1[i] = 1\n    print(freq_count.dic1)\nfreq_count(['a','a','a','b','b','c','c','c'])\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Your function should take one input, a list. You can assume this input will always be a list.\n    # Your function should return a dictionary where the keys are the elements in the list and the values\n    # are the frequencies of the elements.\n    list1 = [1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,4,5,6]\n    dict1 = collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # counter = collections.Counter(list1)\n    # return(counter)\n    return collections.Counter(list1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num_helper(n,i):\n        if (i-1) < 0:\n            return n\n        return closest_num_helper(n,i-1)\n    return closest_num_helper(N,len(str(N))-1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return\n    \ndef remove_duplicates(string):\n    '''\n    Given a string, remove any duplicate characters from the string\n    '''\n    return\n    \ndef find_missing_letter(chars):\n    '''\n    Given a list of strings, return the character that's missing from the list.\n    '''\n    return\n    \ndef is_unique(string):\n    '''\n    Given a string, return whether or not it has all unique characters.\n    '''\n    return\n    \ndef remove_all_before(items, target):\n    '''\n    Remove all elements of a given list, before an element of a target type.\n    '''\n    return\n    \ndef reverse(items):\n    '''\n    Given a list of numbers, return the list in reverse order.\n    '''\n    return\n    \ndef rotate(items, value):\n    '''\n    Given a list of numbers, and a number n, rotate the list to the right by n elements.\n    '''\n    return\n    \ndef min_max(items):\n    '''\n    Given a list of numbers, return the minimum and maximum number in that list.\n    '''\n    return\n    \ndef sum_two_smallest_numbers(numbers):\n    '''\n    Return the sum of the two smallest numbers in a list of numbers.\n    '''\n    return\n    \ndef remove_smallest(numbers):\n    '''\n    Remove the smallest number from a list of numbers.\n    '''\n    return\n    \ndef make_squares(numbers):\n    '''\n    Given a list of numbers, return a new list of numbers where each numbers is square of the original numbers.\n    '''\n    return\n    \ndef remove_first_and_last(items):\n    '''\n    Given a list of numbers, return a list with the first and last items removed.\n    '''\n    return\n    \ndef remove_middle(items, value):\n    '''\n    Given a list of numbers, return a list with all occurrences of value removed.\n    '''\n    return\n    \ndef make_russian_doll(n, p):\n    '''\n    Given a positive integer n, and a positive integer p.\n    Return a list of integers in the range 1, 2,..., n, such that:\n    * All integers are at least p places away from each other.\n    * The first integer is p places away from the first.\n    * The last integer is n - p places away from the last.\n    '''\n    return\n    \ndef n_queens(n):\n    '''\n    Return all possible solutions to the n-queens puzzle.\n    '''\n    return\n    \ndef mix_up(a, b):\n    '''\n    Given 2 strings, return a new string made by concatenating them in the following order:\n    '''\n    return\n    \ndef max_array(arr):\n    '''\n    Given an array of integers, return the length of the longest subarray that contains only odd numbers.\n    '''\n    return\n    \ndef is_sorted(items):\n    '''\n    Return a boolean indicating whether given items are in sorted order.\n    '''\n    return\n    \ndef create_target_array(n, number_list):\n    '''\n    Given two lists, create a new list such that the new list should contain the elements of the first two lists in the following order:\n    '''\n    return\n    \ndef sort_list(numbers):\n    '''\n    Sort a list of numbers using the Bubble Sort algorithm.\n    '''\n    return\n    \ndef nested_sum(n):\n    '''\n    Return the sum of a nested list.\n    '''\n    return\n    \ndef remove_all_occurrences(items, value):\n    '''\n    Remove all occurrences of a given value in a list.\n    '''\n    return\n    \ndef separate_all_evens(items):\n    '''\n    Separate all even numbers from odd numbers.\n    '''\n    return\n    \ndef remove_duplicates_with_odd_even(items):\n    '''\n    Given a list of integers, remove all the duplicates such that each element appears only once and returns the new list.\n    '''\n    return\n    \ndef reverse_order(items):\n    '''\n    Given a list of numbers, return the list in reversed order.\n    '''\n    return\n    \ndef smallest_number(numbers):\n    '''\n    Given a list of numbers, return the smallest number in the list.\n    '''\n    return\n    \ndef is_palindrome(string):\n    '''\n    Return whether or not the given string is a palindrome.\n    '''\n    return\n    \ndef remove_duplicate_spaces(string):\n    '''\n    Return a string with all adjacent whitespaces replaced by a single whitespace.\n    '''\n    return\n    \ndef count_unique_characters(string):\n    '''\n    Given a string, return the number of unique characters in the string.\n    '''\n    return\n    \ndef count_unique_words(sentence):\n    '''\n    Given a sentence, return the number of unique words in the sentence.\n    '''\n    return\n    \ndef list_comprehensions(items):\n    '''\n    Return a list of the first item in the list, then the second item, then the third item, and so on.\n    '''\n    return\n    \ndef rotate_list(items, value):\n    '''\n    Given a list of numbers and a number n, return a list that's the list of numbers in rotation.\n    '''\n    return\n    \ndef reverse_string(string):\n    '''\n    Given a string, return a new string with all the characters reversed.\n    '''\n    return\n    \ndef remove_duplicate_spaces(string):\n    '''\n    Given a string, return a new string with all the duplicate spaces removed.\n    '''\n    return\n    \ndef add_all_numbers(numbers):\n    '''\n    Given a list of numbers, return the sum of all of the numbers in the list.\n    '''\n    return\n    \ndef rotate_array(items, value):\n    '''\n    Given an array of numbers, and a value, rotate the array to the right by the given value.\n    '''\n    return\n    \ndef array_diff(a, b):\n    '''\n    Given two lists of numbers of the same size, determine all the elements that are in the first list but not in the second.\n    '''\n    return\n    \ndef find_missing_numbers(numbers):\n    '''\n    Given a list of numbers, return a list of all the missing numbers in the list.\n    '''\n    return\n    \ndef max_sequence(items):\n    '''\n    Given a list of numbers, return the maximum sum of any contiguous sequence of numbers in the list.\n    '''\n    return\n    \ndef is_sum_of_two_squares(n):\n    '''\n    Given a number n, return true if n can be expressed as the sum of two squares.\n    '''\n    return\n    \ndef minimum_subsequence(items):\n    '''\n    Given a list of numbers, return the length of the shortest contiguous sequence that contains all the numbers in the list.\n    '''\n    return\n    \ndef find_missing_number(items):\n    '''\n    Given an array of numbers in random order, return the missing number in the array.\n    '''\n    return\n    \ndef move_zeros(array):\n    '''\n    Given an array of numbers, move all the zeros to the end and return the new array.\n    '''\n    return\n    \ndef make_all_stars(n):\n    '''\n    Given a number n, return a string that is n asterisks.\n    '''\n    return\n    \ndef make_out_word(out, word):\n    '''\n    Given a string that is the out, and a word, make a string by placing the word in the center of the out, and return it.\n    '''\n    return\n    \ndef check_permutation(str1, str2):\n    '''\n    Given two strings, return true if they are permutations of each other.\n    '''\n    return\n    \ndef find_missing_number(items):\n    '''\n    Given a list of numbers, return the number that is missing from the list.\n    '''\n    return\n    \ndef create_lis"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N,0,-1):\n        if i<=N and i>=1:\n            return i\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #a=0\n    #b=1\n    #for i in range(N):\n    #    temp=a\n    #    a=b\n    #    b=temp+b\n    #return b\n    \n    if N<0:\n        N*=-1\n    \n    a=0\n    b=1\n    for i in range(N):\n        c=a\n        a=b\n        b=c+b\n        \n    if N<0:\n        b*=-1\n    return b\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    cache = {}\n    cache[1] = 1\n    for i in range(1, N):\n        cache[i] = cache[i-1] + 1\n    return cache[N-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    if n <= 0:\n        return False\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        while True:\n            n = n-1\n            if n == 1:\n                return 1\n            elif n == 0:\n                return 0\n            elif (n % 2) == 0:\n                return n\n            elif (n % 2)!= 0:\n                return n+1\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 1\n    \n    for i in range(1, N + 1):\n        if i % N == 0:\n            return i\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(N//x for x in range(1, N+1) if x%2==0)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #brute force\n    #find all the numbers in the range and compare to N\n    \n    #return the min\n    return min([i for i in range(1,N+1) if N%i==0])\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for item in list1:\n        list2.append(len(item))\n    print(max(list2))\n    return(max(list2))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l=0\n    for i in list1:\n        if len(i)>l:\n            l=len(i)\n    return l\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word)>length:\n            length = len(word)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = ['Easy', 'Medium', 'Hard', 'Excellent', 'X', 'X', 'X', 'X', 'X', 'X']\n    max_len = 0\n    for item in list1:\n        if max_len < len(item):\n            max_len = len(item)\n    print(max_len)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for word in list1:\n        len_list.append(len(word))\n    return len_list\nlen_log(['Sophie', 'Hello', 'Jacob', 'World'])\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max=0\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"Length of longest word is:\",max(list1, key = len))\n    return\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort()\n    l = []\n    for i in list1:\n        l.append(len(i))\n    print(\"The longest word is:\", list1[l.index(max(l))])\n    return \"The longest word is:\", list1[l.index(max(l))]\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #str1 = 'abc'\n    #sub_str = 'a'\n    #str2 = 'a'\n    #sub_str = 'abc'\n    #str2 = 'ab'\n    #sub_str = 'ab'\n    #str2 = 'abca'\n    #sub_str = 'abc'\n    #str2 = 'abca'\n    #sub_str = 'bc'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if sub_str in str1[i:]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #for item in str1:\n    #    if str(item) in str(sub_str):\n    #        return True\n    #return False\n    \n    #return str1.find(sub_str)!= -1\n    #list_of_items = [item for item in str1 if item in sub_str]\n    #return len(list_of_items) == len(sub_str)\n    \n    str1_split = str1.split(sub_str)\n    return len(str1_split) > 1\n    \n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #start writing your code here\n    for i in range(len(str1)):\n        if sub_str in str1[i:i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1 = str1.split()\n    sub_str = sub_str.split()\n    print(sub_str)\n    sub_str_len = len(sub_str[0])\n    if len(str1) >= len(sub_str):\n        for i in range(0, len(str1) - (len(sub_str) - 1)):\n            print(i)\n            if sub_str[0] in str1[i] and sub_str[1] in str1[i]:\n                print(str1[i])\n                return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #using the function sum1_n(n) for calculating the sum of all numbers from 1 to n\n    def sum1_n(n):\n        return ((n*(n+1))/2)\n    #using the function sum2_n(n) for calculating the sum of the squares of all numbers from 1 to n\n    def sum2_n(n):\n        return (sum([i**2 for i in range(1,n+1)]))\n    #if the difference between the sum1_n(n) and the sum2_n(n) of the given number is not 0\n    if(sum1_n(n) - sum2_n(n)!= 0):\n        #return the given number as undulating\n        return n\n    #else if the difference between the sum1_n(n) and the sum2_n(n) of the given number is 0\n    elif(sum1_n(n) - sum2_n(n) == 0):\n        #return the given number as not undulating\n        return \"not undulating\"\n    \nprint(is_undulating(25))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num = n\n    s = str(num)\n    if num < 10:\n        return False\n    while num:\n        n = num % 10\n        num = int(num / 10)\n        if n - int(n):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    i = 1\n    while i < n:\n        if n % i == 0:\n            if n/i == i:\n                count += 1\n            else:\n                count -= 1\n        i += 1\n    if count == 0:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    s_len = len(s)\n    s_sum = 0\n    for i in range(s_len):\n        s_sum += int(s[i])\n    if s_len % 2 == 0:\n        s_sum += 1\n    s_sum = str(s_sum)\n    s_len = len(s_sum)\n    s_sum = 0\n    for i in range(s_len):\n        s_sum += int(s_sum)\n    if s_len % 2 == 0:\n        s_sum += 1\n    return (s_sum == n)\n    \nif __name__ == '__main__':\n    print('Ans: ',is_undulating(852535))\n    print('Ans: ',is_undulating(93719))\n    print('Ans: ',is_undulating(937192))\n    print('Ans: ',is_undulating(9371922))\n    print('Ans: ',is_undulating(93719225)"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n):\n        if i % 2 == 0:\n            if (n % (i * 2))!= 0:\n                return False\n        else:\n            if (n % (i * 2)) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(1,len(s)):\n        if int(s[i]) - int(s[i-1]) == int(s[i-1]) - int(s[i]):\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    count = 1\n    while len(n) > 1:\n        for i in n:\n            if n[0] == i:\n                count += 1\n            else:\n                if count!= 1:\n                    return False\n                count = 1\n        n = str(int(n[1:])+int(n[0]))\n    return True if count!= 1 else False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    for i in range(1, n):\n        if (n % i == 0):\n            if (i % 2!= 0):\n                return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 2:\n        return False\n    if n == 1:\n        return True\n    \n    even_s = 0\n    odd_s = 0\n    i = 1\n    while(n):\n        if n & 1:\n            odd_s += i\n        else:\n            even_s += i\n        i += 1\n        n >>= 1\n    if odd_s % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b<0:\n        return 1/power(a,abs(b))\n    elif a==0:\n        return 0\n    elif b==1:\n        return a\n    elif b%2==0:\n        return power(a,b//2)*power(a,b//2)\n    else:\n        return a*power(a,b//2)*power(a,b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b < 0:\n        return 1/power(a, -b)\n    if b % 2 == 0:\n        return power(a*a, b/2)\n    else:\n        return a*power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    #calculate the value of a^b\n    result = 1\n    for i in range(0,b):\n        result = result * a\n    \n    #return the result\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < index_min:\n            index_min = test_list[i][1]\n    return index_min\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    index_minimum = 0\n    for i in test_list:\n        if i[1] < test_list[index_minimum][1]:\n            index_minimum = index\n        index += 1\n    return index_minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list[test_list.index(min(test_list, key=itemgetter(1)))]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    first_minimum = min(test_list, key = itemgetter(1))\n    return first_minimum[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1, 0)) #This sorts the list by first value, then second value.\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    index_min = 0\n    index_second_min = 0\n    for i,j in test_list:\n        if j < test_list[index_min][1]:\n            index_min = index\n        if j < test_list[index_second_min][1]:\n            index_second_min = index\n        index += 1\n    return test_list[index_min]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    index = 0\n    index_max = 0\n    index_second_max = 0\n    for i,j in test_list:\n        if j > test_list[index_max][1]:\n            index_max = index\n        if j > test_list[index_second_max][1]:\n            index_second_max = index\n        index += 1\n    return test_list[index_max]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_value = min(test_list, key=itemgetter(1))[1]\n    return [t for t in test_list if t[1]==smallest_value][0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_list = [i[0] for i in test_list]\n    value_list = [i[1] for i in test_list]\n    index_min = index_list[value_list.index(min(value_list))]\n    return index_min\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    try:\n        # extract the first element of each tuple, as we'll only be comparing the first element to each other tuple's first element\n        first_element_list = [i[0] for i in test_list]\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = []\n    for i in lst:\n        l.append(len(i))\n    return min(l)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    min_l = l\n    for i in range(l):\n        min_l = min(min_l, len(lst[i]))\n    return min_l\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini = None\n    for i in lst:\n        if not mini or len(i) < len(mini):\n            mini = i\n    return len(mini)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(len(item) for item in lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_len = None\n    \n    for sublist in lst:\n        if min_len == None:\n            min_len = len(sublist)\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    \n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 100\n    for lst in lst_list:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=1000\n    for i in lst:\n        if len(i)<min_length:\n            min_length=len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    import math\n    minimum_list = []\n    for i in range(0,len(lst)):\n        if len(lst[i])<len(minimum_list):\n            minimum_list = lst[i]\n    return len(minimum_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #Since we can't access the other elements in a list of lists, we'll have to \n    #iterate over the lists and find their lengths. We'll then return the smallest length.\n    #Empty lists are considered to have length of 0, so we'll return 0 for them. \n    if len(lst)==0:\n        return 0\n    else:\n        min_len=len(lst[0])\n        for i in lst:\n            if len(i)<min_len:\n                min_len=len(i)\n        return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_list = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisor_list.append(i)\n    return len(divisor_list)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors.append(i)\n    print(divisors)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<=0:\n        raise ValueError(\"Number should be positive\")\n    divisors=0\n    for i in range(1,int(n**0.5)+1):\n        if n%i==0:\n            divisors+=1\n    return divisors*2\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    cnt = 0\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            count += 1\n    return count*2\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return len([x for x in range(1,n+1) if n % x == 0])\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    factors = [1]\n    for i in range(2,n):\n        if n%i == 0:\n            factors.append(i)\n    return(len(factors))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    divisor_list = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisor_list.append(i)\n    return len(divisor_list)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for element in list1:\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        else:\n            freq_dict[element] += 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_list={}\n    for element in list1:\n        if element not in frequency_list:\n            frequency_list[element]=list1.count(element)\n    return frequency_list\n    \ndef frequency_lists_1(list1):\n    frequency_list={}\n    for element in list1:\n        if element not in frequency_list:\n            frequency_list[element]=list1.count(element)\n    return frequency_list\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    #define empty dictionary\n    \n    freq_dict = {}\n    #define empty list for appending to dictionary later\n    \n    for item in list1:\n        #loop through each item in list1 and append to empty list\n        freq_list = []\n        if item in list1:\n            #if the item is already in the list, append to empty list\n            freq_list.append(item)\n        else:\n            #otherwise, append to list for next iteration of loop\n            pass\n        #if the item is already in the list, increment the list\n        #if the item is not in the list, pass\n        freq_dict[item] = freq_list\n        \n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) == list:\n            list2 = list2 + i\n    list3 = []\n    for i in list2:\n        if i not in list3:\n            list3.append(i)\n    dictionary = {}\n    for i in list3:\n        dictionary[i] = list2.count(i)\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] = freq_dict[i] + 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq:\n            freq[i] = list1.count(i)\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    print(freq)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for num in list1:\n        if num not in freq_dict.keys():\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 1\n    else:\n        result = 1\n        for number in numbers:\n            result *= number\n        return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product *= i\n    return product/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    total = 1\n    for i in numbers:\n        total *= i\n    return total / length\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_sum = 1\n    for i in numbers:\n        numbers_sum = numbers_sum * i\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result = result * x\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for num in numbers:\n        sum *= num\n    return sum / len(numbers)\nprint(multiply_num([1,2,3]))\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total = total * i\n    return total / len(numbers)\nprint(multiply_num([1,2,3,4,5]))\nprint(multiply_num([2,4,6,8,10]))\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_string += str(remainder)\n        n = n // 2\n    return binary_string[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize the output\n    binary = \"\"\n    \n    # set the current power of two\n    pow = 1\n    \n    # compare the input with the current power of two\n    while(n >= pow): \n        # get the value of current power of two\n        curr_pow = pow\n        \n        # do a right shift\n        pow = pow * 2\n        \n        # check if the input is more than or equal to current power of two\n        if(curr_pow >= n): \n            binary += \"1\"\n            n -= curr_pow\n        else: \n            binary += \"0\"\n    \n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # we need to find out whether its even or odd\n    n = int(n)\n    if n%2 == 0:\n        # this means its even\n        return \"0\" + decimal_to_binary(n//2)\n    else:\n        # this means its odd\n        return \"1\" + decimal_to_binary(n//2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\") \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # base case\n    if n == 0: \n        return ''\n    # recursive step\n    else: \n        # return the recursion with the number from the previous step\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    return n % 2 + 10 * decimal_to_binary(int(n / 2))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Start with an empty string \n    binary = \"\" \n    \n    # One by one, extract the digits \n    while(n > 0): \n        binary = str(n % 2) + binary \n        n = n//2\n    \n    # Return the binary number \n    return binary \n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert num into string\n    s = str(num)\n    # reverse the string\n    rs = s[::-1]\n    # check if the reversed string is a palindrome\n    if rs == s:\n        # if it is, return the same number\n        return num\n    # else, find the first instance of a non-palindrome character in the reversed string and get the index of it\n    index = len(s)\n    for i in range(len(s)):\n        if s[i]!= rs[i]:\n            index = i\n            break\n    # get the two numbers that make up the palindrome\n    if index == len(s):\n        # if there is no non-palindrome character, return a palindrome of the same length as num\n        return int(''.join([s[i] for i in range(0, len(s))]))\n    else:\n        # else, return the palindrome whose digits come after the non-palindrome character\n        return int(s[:index] + rs[index:])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 9\n    if num == 2:\n        return 99\n    if num == 3:\n        return 9009\n    if num == 4:\n        return 9999\n    if num == 5:\n        return 906609\n    if num == 6:\n        return 9999999\n    if num == 7:\n        return 99999999\n    if num == 8:\n        return 999999999\n    if num == 9:\n        return 99999999999\n    if num == 10:\n        return 999999999999\n    if num == 11:\n        return 999999999999999\n    if num == 12:\n        return 999999999999999999999\n    if num == 13:\n        return 999999999999999999999999\n    if num == 14:\n        return 9999999999999999999999999999\n    if num == 15:\n        return 999999999999999999999999999999999\n    if num == 16:\n        return 9999999999999999999999999999999999999\n    if num == 17:\n        return 9999999999999999999999999999999999999999999\n    if num == 18:\n        return 999999999999999999999999999999999999999999999999999\n    if num == 19:\n        return 99999999999999999999999999999999999999999999999999999999999\n    if num == 20:\n        return 99999999999999999999999999999999999999999999999999999999999999999999\n    if num == 21:\n        return 99999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 22:\n        return 99999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 23:\n        return 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 24:\n        return 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 25:\n        return 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 26:\n        return 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 27:\n        return 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 28:\n        return 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 29:\n        return 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 30:\n        return 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 31:\n        return 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 32:\n        return 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    if num == 33:\n        return
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # converts number to string\n    num = str(num)\n    # reverses the string\n    reversedNum = num[::-1]\n    # checks if number is a palindrome\n    if num == reversedNum:\n        # if so, returns the original number\n        return int(num)\n    else:\n        # if not, returns the last character of the reversed number\n        return int(reversedNum + num[0])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    temp = num\n    while not is_palindrome(temp):\n        temp = temp - 1\n    return temp\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #handle negative numbers\n    if num < 0:\n        return -1\n    #handle single digits\n    if num < 10:\n        return num\n    #do we need to handle a zero?\n    if num == 10:\n        return 11\n    #otherwise, we need to find the next palindrome\n    #We can start by checking to see if the last character of the number is a one.\n    #If that is the case, then we can simply take that character, add it to the beginning of the number,\n    #and then take the next palindrome.  This is our base case.\n    if num % 10 == 1:\n        return num * 10 + 1\n    #If the last character is not a one, then we need to find the next palindrome number that contains it.\n    #We need to find the smallest multiple of 10 greater than the number and subtract 1.\n    elif num % 10!= 1:\n        return num * 10 + num % 10 - 1\n    #At this point, we have a two digit number, so we need to find the next palindrome.\n    #We can just take the first number, add the second number, and then take the product and add one.\n    #This is our recursive case.\n    elif num % 10 == 9:\n        return num * 10 + num % 10 + 1\n    #The last case is that we have a ten digit number, so we have to find the next palindrome.\n    #We can find the next palindrome by taking the product of the first and second digits, then incrementing by one.\n    else:\n        return num * 10 + num % 10 + 1\n    \n    \ndef next_bigger(n):\n    '''\n    Write a function to find the next bigger number with the same digits\n    '''\n    #handle negative numbers\n    if n < 0:\n        return -1\n    if n == 0:\n        return 1\n    #if we have a single digit, just return it\n    if len(str(n)) == 1:\n        return n\n    #otherwise, we need to find the next bigger number\n    #We can start by checking to see if the last character of the number is a one.\n    #If that is the case, then we can simply take that character, add it to the beginning of the number,\n    #and then take the next bigger number.  This is our base case.\n    if n % 10 == 1:\n        return n * 10 + 9\n    #If the last character is not a one, then we need to find the next biggest number that contains it.\n    #We need to find the smallest multiple of 10 greater than the number and subtract 1.\n    elif n % 10!= 1:\n        return n * 10 + n % 10 - 1\n    #At this point, we have a two digit number, so we need to find the next bigger number.\n    #We can just take the first number, add the second number, and then take the product and add one.\n    #This is our recursive case.\n    elif n % 10 == 9:\n        return n * 10 + n % 10 - 1\n    #The last case is that we have a ten digit number, so we have to find the next bigger number.\n    #We can find the next bigger number by taking the product of the first and second digits, then incrementing by one.\n    else:\n        return n * 10 + n % 10 + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    numstr = str(num)\n    numlen = len(numstr)\n    if numlen == 1:\n        return num\n    else:\n        #if length of input is even\n        if numlen % 2 == 0:\n            mid = numlen/2\n            halfstr = numstr[mid-1]+numstr[mid]\n            if int(halfstr) > num:\n                return int(halfstr+halfstr[::-1])\n            else:\n                return int(halfstr+str(int(halfstr) - 1)[::-1])\n        #if length of input is odd\n        else:\n            mid = numlen/2\n            halfstr = numstr[mid] + numstr[mid-1]\n            if int(halfstr) > num:\n                return int(halfstr+halfstr[::-1])\n            else:\n                return int(halfstr+str(int(halfstr) - 1)[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Reverse the number\n    number = str(num)\n    number = number[::-1]\n    # Find the next palindrome\n    number = int(number)\n    number += 1\n    while not is_palindrome(number):\n        number += 1\n    return number\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #first convert the number to string\n    s = str(num)\n    #then reverse the string and check if it's palindrome, if not return the original number\n    rev = s[::-1]\n    if s == rev:\n        return -1\n    #otherwise\n    else:\n        for i in range(len(s)):\n            if s[i:] == rev[:len(s)-i] and int(s+rev[len(s)-i:])>=num:\n                return int(s+rev[len(s)-i:])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    i = len(str_num)\n    while i > 0:\n        if str_num[:i][::-1] == str_num[:i]:\n            return int(str_num[:i] + str_num[:i][::-1])\n        i -= 1\n    return 0\n    \ndef next_largest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    i = len(str_num)\n    while i > 0:\n        if str_num[:i][::-1] == str_num[:i]:\n            return int(str_num[:i] + str_num[:i][::-1])\n        i -= 1\n    return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    else:\n        num = str(num)\n        l_num = num[0:len(num)//2]\n        r_num = num[-len(num)//2:]\n        r_num = ''.join(reversed(r_num))\n        return int(l_num + r_num)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return kth_element_helper(arr, 0, len(arr) - 1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, low, high):\n        if len(arr) == 1:\n            return arr\n        i = low-1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[high] = arr[high], arr[i+1]\n        return i+1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    #since we are given that k is a positive integer, we can use a binary search to\n    #find the index of the kth element\n    #we can find the kth element by comparing the number of comparisons used in a\n    #binary search to k.\n    #we could do a binary search using the mid point as our pivot\n    #we can use a binary search with pivot = n/2 since in a binary search\n    #we use n/2 as our pivot\n    \n    return binary_search(arr, n, n/2, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    def find_pivot_idx(arr, start, end):\n        mid = (start+end)//2\n        if mid == len(arr)-1 or (mid == 0 and end == len(arr)-1):\n            return mid\n        if arr[mid] <= arr[mid+1] and arr[mid] <= arr[mid-1]:\n            return mid\n        elif arr[mid] <= arr[mid+1]:\n            return find_pivot_idx(arr, start, mid)\n        else:\n            return find_pivot_idx(arr, mid, end)\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    pivot = find_pivot_idx(arr, 0, len(arr)-1)\n    if k == pivot + 1:\n        return arr[pivot]\n    elif k < pivot + 1:\n        return kth_element(arr[:pivot], k)\n    else:\n        return kth_element(arr[pivot+1:], k-pivot-1)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pivot = k - 1\n    while True:\n        # elements before the pivot are greater than the pivot\n        if pivot < len(arr) and arr[pivot] > arr[pivot - 1]:\n            # pivot is in the right place, so break out of the loop\n            break\n        else:\n            # pivot is in the wrong place, so change pivot\n            pivot += 1\n    # array is now sorted in place\n    if pivot + 1 == k:\n        return arr[pivot]\n    elif pivot + 1 > k:\n        return kth_element(arr[:pivot], k)\n    else:\n        return kth_element(arr[pivot + 1:], k - pivot - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr,low,high):\n        i = low-1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j]<=pivot:\n                i=i+1\n                arr[i],arr[j]=arr[j],arr[i]\n        arr[i+1],arr[high]=arr[high],arr[i+1]\n        return (i+1)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        if arr[mid] > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, low, high):\n        pivot = arr[high]\n        pivot_idx = low\n        for idx in range(low, high):\n            if arr[idx] < pivot:\n                arr[idx], arr[pivot_idx] = arr[pivot_idx], arr[idx]\n                pivot_idx += 1\n        arr[pivot_idx], arr[high] = arr[high], arr[pivot_idx]\n        return pivot_idx\n    def quick_select(arr, low, high, k):\n        if low < high:\n            pivot_idx = partition(arr, low, high)\n            if pivot_idx == k-1:\n                return arr[pivot_idx]\n            elif pivot_idx < k-1:\n                return quick_select(arr, pivot_idx+1, high, k)\n            else:\n                return quick_select(arr, low, pivot_idx, k)\n    return quick_select(arr, 0, len(arr)-1, k)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    output = \"\"\n    for i in word.split(\"_\"):\n        output += i.capitalize()\n    return output\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    for i in word.split('_'):\n        camel += i.title()\n    return camel\n    \n    \nif __name__ == '__main__':\n    print(snake_to_camel('the_stealth_warrior'))\n    print(snake_to_camel('the_stealth_warrior_game'))\n    print(snake_to_camel('the_stealth_warrior_game_part_1'))"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # a = word.split('_')\n    # a = [x.capitalize() for x in a]\n    # return ''.join(a)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    ret = ''\n    is_first = True\n    for c in word:\n        if c.isupper():\n            if not is_first:\n                ret += '_'\n            is_first = False\n        ret += c.upper()\n    return ret\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 1:\n        return word[0]\n    first_word = word[0]\n    second_word = word[1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    cap_list = []\n    cap_list.extend(word.split('_'))\n    \n    return cap_list[0].lower() + ''.join(i.title() for i in cap_list[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_word = word.split(\"_\")[0]\n    rest_of_words = word.split(\"_\")[1:]\n    return first_word + ''.join([x.title() for x in rest_of_words])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    if '-' in word:\n        word = word.split('-')\n        for i in range(len(word)):\n            word[i] = word[i].title()\n        camel = ''.join(word)\n    else:\n        camel = word.title()\n    return camel\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2!= 0 and m % 2!= 0:\n        return n * m\n    elif n % 2 == 0 and m % 2!= 0:\n        return n * (m-1)\n    elif n % 2!= 0 and m % 2 == 0:\n        return n * (m-1)\n    elif n % 2 == 0 and m % 2 == 0:\n        return n * (m-2)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n%2==0 and m%2==0 and n>=m:\n        a = int((n-m)/2)\n    else:\n        a = int((n+m)/2)\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*m*(n-m+1)//2\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n - 1) * (m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    sum_left = 0\n    sum_right = 0\n    for i in range(n):\n        sum_left += m[i][0]\n        sum_right += m[i][1]\n    if sum_left == sum_right:\n        return 1\n    return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n ** m\n    "
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    n_str = str(n)\n    m_str = str(m)\n    if len(n_str)!= len(m_str):\n        n_str = '0'*(len(m_str)-len(n_str)) + n_str\n    else:\n        n_str = n_str[::-1]\n    return int(n_str+m_str)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return n\n    if m == 1:\n        return 0\n    if m == 2:\n        return 1\n    return eulerian_num(n, m - 1) - eulerian_num(n, m - 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    p = [0, 0, 0, 0]\n    s = 0\n    for i in range(n):\n        s = (s + m) % 4\n        p[s] = p[s] + 1\n    p[0] = p[0] - 1\n    for i in range(1, 4):\n        p[i] = p[i] + p[i - 1]\n    return p[0] + p[1] + p[2] + p[3]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n        return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sub_list in input_list:\n        sub_list.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(i) for i in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Sort each sublist of strings in the input list of lists\n    input_list[0].sort()\n    input_list[1].sort()\n    input_list[2].sort()\n    input_list[3].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # set up a placeholder list to hold the sorted sublists\n    sublists = []\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # print(input_list)\n    result = []\n    for sublist in input_list:\n        sublist.sort()\n        result.append(sublist)\n    result.sort()\n    # print(result)\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    ctr=0\n    for i in lst:\n        if(i):\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    # return len([i for i in lst if i])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return [(x, y) for x, y in zip(test_list, test_tup)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    print(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp = []\n    for i in test_tup:\n        temp.append(i)\n    temp.append(test_list)\n    return tuple(temp)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not isinstance(test_list, list) or not isinstance(test_tup, tuple):\n        print(\"Input must be a list and a tuple.\")\n        return\n    \n    test_list.append(1)\n    test_tup.append(1)\n    \ndef list_from_tuple(test_tuple):\n    '''\n    Write a function to convert tuple into a list.\n    '''\n    if not isinstance(test_tuple, tuple):\n        print(\"Input must be a tuple.\")\n        return\n    \n    return list(test_tuple)\n    \n    \ndef tuple_from_list(test_list):\n    '''\n    Write a function to convert list into a tuple.\n    '''\n    if not isinstance(test_list, list):\n        print(\"Input must be a list.\")\n        return\n    \n    return tuple(test_list)\n    \n    \ndef main():\n    '''\n    Write a function to return the sum of the given lists.\n    '''\n    test_list = [1, 2, 3]\n    test_tuple = (1, 2, 3)\n    \n    print(\"Testing list to tuple:\", list_from_tuple(test_list) == tuple(test_list))\n    print(\"Testing tuple to list:\", tuple_from_list(test_tuple) == list(test_tuple))\n    print(\"Testing add_lists:\", add_lists([1, 2], (3, 4)) == (1, 2, 3, 4))\n    print(\"Testing add_lists:\", add_lists([1], (3, 4)) == (1, 3, 4))\n    print(\"Testing add_lists:\", add_lists([1, 2], (3)) == (1, 2, 3))\n    print(\"Testing add_lists:\", add_lists([1, 2], (3, 4, 5)) == (1, 2, 3, 4, 5))\n    print(\"Testing add_lists:\", add_lists([1, 2], (3, 4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7))\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + list(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"Original list: \" + str(test_list))\n    print(\"Original tuple: \" + str(test_tup))\n    tup_len = len(test_tup)\n    list_len = len(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"Testing the add_lists() method...\")\n    test_list.append(3)\n    test_tup = test_tup + (3,)\n    print(test_list)\n    print(test_tup)\n    print(\"========================\")\n    print(\"\\nDone!\\n\")\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l=[]\n    for i in num1:\n        l.append(i)\n    for i in num2:\n        l.append(i)\n    for i in num3:\n        l.append(i)\n    l.sort()\n    print(l)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # print(num1, num2, num3)\n    # print(sorted(num1 + num2 + num3))\n    return sorted(num1 + num2 + num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    if num1 == [] and num2 == []:\n        return num3\n    if num2 == []:\n        return num1\n    if num3 == []:\n        return num2\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            res.append(num1[i])\n            i += 1\n        else:\n            res.append(num2[j])\n            j += 1\n    while i < len(num1):\n        res.append(num1[i])\n        i += 1\n    while j < len(num2):\n        res.append(num2[j])\n        j += 1\n    return res\n    \ndef merge_k_sorted_list(arr):\n    '''\n    Write a function to merge k sorted lists into one sorted list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    res = []\n    while i < len(arr):\n        arr[i] = merge_sorted_list(arr[i],arr[i+1],arr[i+2])\n        i += 3\n        if len(arr[i]) == 0:\n            i += 1\n    return arr[0]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = num1.copy()\n    l2 = num2.copy()\n    l3 = num3.copy()\n    merge_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(l1) and j < len(l2) and k < len(l3):\n        if l1[i] < l2[j] and l1[i] < l3[k]:\n            merge_list.append(l1[i])\n            i += 1\n        elif l2[j] < l1[i] and l2[j] < l3[k]:\n            merge_list.append(l2[j])\n            j += 1\n        elif l3[k] < l1[i] and l3[k] < l2[j]:\n            merge_list.append(l3[k])\n            k += 1\n        else:\n            return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # taking a single list as input \n    num1 = [1,2,3,4,5]\n    num2 = [2,3,4,5,6,7,8]\n    num3 = [3,4,5,6,7,8,9]\n    sorted_nums = []\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create an empty list\n    result = []\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    if num1:\n        sorted_list.append(num1.pop(0))\n    if num2:\n        sorted_list.append(num2.pop(0))\n    if num3:\n        sorted_list.append(num3.pop(0))\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res=[]\n    for i in range(len(num1)):\n        if num1[i]>num2[i] and num1[i]>num3[i]:\n            res.append(num1[i])\n            continue\n        if num2[i]>num1[i] and num2[i]>num3[i]:\n            res.append(num2[i])\n            continue\n        if num3[i]>num1[i] and num3[i]>num2[i]:\n            res.append(num3[i])\n            continue\n    for i in range(len(num1)):\n        if num1[i]<num2[i] and num1[i]<num3[i]:\n            res.append(num1[i])\n            continue\n        if num2[i]<num1[i] and num2[i]<num3[i]:\n            res.append(num2[i])\n            continue\n        if num3[i]<num1[i] and num3[i]<num2[i]:\n            res.append(num3[i])\n            continue\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    num_list = []\n    #print(num1,num2,num3)\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            num_list.append(num1[i])\n            i+=1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            num_list.append(num2[j])\n            j+=1\n        elif num3[k] <= num1[i] and num3[k] <= num2[j]:\n            num_list.append(num3[k])\n            k+=1\n        else:\n            if num1[i] < num2[j] and num1[i] < num3[k]:\n                num_list.append(num1[i])\n                i+=1\n            elif num2[j] < num3[k] and num2[j] < num1[i]:\n                num_list.append(num2[j])\n                j+=1\n            elif num3[k] < num1[i] and num3[k] < num2[j]:\n                num_list.append(num3[k])\n                k+=1\n    while i<len(num1):\n        num_list.append(num1[i])\n        i+=1\n    while j<len(num2):\n        num_list.append(num2[j])\n        j+=1\n    while k<len(num3):\n        num_list.append(num3[k])\n        k+=1\n    return num_list\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    c = 0\n    for i in range(0, n):\n        b = list(s)\n        b = b[::-1]\n        s = ''\n        for i in b:\n            s+=i\n        if s.count('0') == s.count('1'):\n            c+=1\n        else:\n            pass\n    return c\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    rotation_list = []\n    for i in range(0,n):\n        rotation_list.append(s[i:] + s[:i])\n    count = 0\n    for i in rotation_list:\n        count += int(i,2)%2\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    string = s\n    count = 0\n    if n%2 == 0:\n        n = int(n/2)\n    else:\n        n = int(n/2) +1\n    while n!= 0:\n        if string[0] == '0':\n            string = string[1:] + string[0]\n            count = count + 1\n            string = string[1:] + string[0]\n        else:\n            string = string[-1] + string[:-1]\n            count = count + 1\n            string = string[-1] + string[:-1]\n        n = n-1\n    return count\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        odd=0\n        for j in s:\n            if j%2==1:\n                odd+=1\n        if odd>0:\n            count+=1\n        s = s[1:]+s[0]\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return s.count('0') + s.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def sum_of_bits(s,n):\n        return sum([int(i) for i in s])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s.count('0')%2==0 and s.count('1')%2==0:\n        return 0\n    else:\n        return (s.count('1')+s.count('0'))//n\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    print(s,n)\n    string = s.lstrip('0')\n    string = string.rstrip('0')\n    string = string[::-1]\n    rot = string\n    for i in range(n):\n        rot = '0' + rot[:-1]\n    print(rot)\n    return len([i for i in rot if i == '1'])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #base case\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n):\n        if int(s,2) & 0x1 == 0x1:\n            count += 1\n        s = s[1:] + s[0]\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_of_elements = []\n    for element in nestedlist:\n        if type(element) == list:\n            for e in element:\n                if e not in list_of_elements:\n                    list_of_elements.append(e)\n        else:\n            if element not in list_of_elements:\n                list_of_elements.append(element)\n    print(list_of_elements)\n    return list_of_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for elem in nestedlist:\n        if type(elem) is list:\n            return common_in_nested_lists(elem)\n    return [elem for elem in nestedlist if nestedlist.count(elem) == len(nestedlist)]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    seen = set()\n    for item in nestedlist:\n        if type(item) is list:\n            for i in item:\n                seen.add(i)\n        else:\n            seen.add(item)\n    return seen\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if isinstance(nestedlist, list) == False:\n        return []\n    if len(nestedlist) == 0:\n        return []\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        for sublist in nestedlist:\n            if isinstance(sublist, list) == False:\n                return []\n        newlist = nestedlist[0]\n        for sublist in nestedlist[1:]:\n            sublist = set(sublist)\n            newlist = set(newlist)\n            newlist = newlist.intersection(sublist)\n        newlist = list(newlist)\n        newlist.sort()\n        return newlist\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #create set of all items\n    itemlist = []\n    for sublist in nestedlist:\n        for item in sublist:\n            itemlist.append(item)\n    #get set of common items\n    itemset = set(itemlist)\n    itemlist = list(itemset)\n    return itemlist\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize a set for storing the result\n    result_set = set()\n    # Write the code to find the common elements in the given nested lists\n    for inner_list in nestedlist:\n        result_set = result_set.intersection(set(inner_list))\n    return list(result_set)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j in common:\n                continue\n            else:\n                common.append(j)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in nestedlist[0]:\n        for j in nestedlist[1]:\n            if i == j:\n                common_list.append(i)\n                break\n    return common_list\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    elif text[0] == '-' and text[1:].isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n    except:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit() == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in list1:\n        for j in i:\n            if len(i[j])>0:\n                return False\n    return True\n    \ndef check_exists(list1):\n    '''\n    Write a function to check whether all dictionaries in a list contain the key 'name' or not.\n    '''\n    \n    for i in list1:\n        if 'name' not in i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if len(x) == 0:\n            print(\"Empty\")\n            return True\n        else:\n            print(\"Not empty\")\n            return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    dit_empty = True\n    for i in list1:\n        if bool(i) == False:\n            dit_empty = False\n    return dit_empty\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0,len(list1)):\n        if len(list1[i]) == 0:\n            return 1\n    return 0\ndef list_of_empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0,len(list1)):\n        if len(list1[i]) == 0:\n            return list1[i]\n    return None\ndef disjoint_or_not(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are disjoint or not.\n    '''\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if len(list1[i].union(list1[j])) == (len(list1[i])+len(list1[j])):\n                return 1\n    return 0\ndef disjoint_or_not_list(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are disjoint or not.\n    '''\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if len(list1[i].union(list1[j])) == (len(list1[i])+len(list1[j])):\n                return list1[i].union(list1[j])\n    return None\ndef disjoint_or_not_list2(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are disjoint or not.\n    '''\n    disjoint_list = []\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if len(list1[i].union(list1[j])) == (len(list1[i])+len(list1[j])):\n                disjoint_list.append(list1[i].union(list1[j]))\n    return disjoint_list\ndef max_min_key_dit(d1):\n    '''\n    Write a function to find the maximum and minimum values of the keys in a dictionary.\n    '''\n    min_key = list(d1.keys())[0]\n    max_key = list(d1.keys())[0]\n    for key in list(d1.keys()):\n        if min_key > key:\n            min_key = key\n        elif max_key < key:\n            max_key = key\n    return(min_key,max_key)\ndef max_min_key_dit2(d1):\n    '''\n    Write a function to find the maximum and minimum values of the keys in a dictionary.\n    '''\n    min_key = min(d1.keys())\n    max_key = max(d1.keys())\n    return(min_key,max_key)\ndef min_max_key_dict(d1):\n    '''\n    Write a function to find the maximum and minimum values of the keys in a dictionary.\n    '''\n    min_key = min(list(d1.keys()))\n    max_key = max(list(d1.keys()))\n    return(min_key,max_key)\ndef min_max_key_dict2(d1):\n    '''\n    Write a function to find the maximum and minimum values of the keys in a dictionary.\n    '''\n    min_key = min(d1.keys())\n    max_key = max(d1.keys())\n    return(min_key,max_key)\ndef difference_between_keys_dict(d1):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list = [d1,d1]\n    dict_list_keys = list(d1.keys())\n    for i in range(0,len(dict_list)):\n        dict_list_keys_new = []\n        for key in dict_list_keys:\n            dict_list_keys_new.append(key)\n        dict_list[i] = dict_list_keys_new\n    return(dict_list[0][0] - dict_list[1][0])\ndef difference_between_keys_dict2(d1):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict3(d1,d2):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list = [d1,d2]\n    dict_list_keys = list(d1.keys())\n    for i in range(0,len(dict_list)):\n        dict_list_keys_new = []\n        for key in dict_list_keys:\n            dict_list_keys_new.append(key)\n        dict_list[i] = dict_list_keys_new\n    return(dict_list[0][0] - dict_list[1][0])\ndef difference_between_keys_dict4(d1,d2):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict5(d1,d2):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict6(d1,d2):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict7(d1):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict8(d1):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict9(d1,d2):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict10(d1,d2):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict11(d1,d2):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict12(d1,d2):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = list(d1.keys())\n    return(dict_list_keys[0] - dict_list_keys[1])\ndef difference_between_keys_dict13(d1):\n    '''\n    Write a function to find the difference between keys in two dictionaries.\n    '''\n    dict_list_keys = lis"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n    # return all(d.get('key', None) is None for d in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = False\n    for d in list1:\n        if d:\n            flag = True\n            break\n    return not flag\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for item in list1:\n        if len(item.keys())!= 0:\n            empty = False\n            break\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty=True\n    for i in list1:\n        if i!={}:\n            empty=False\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list=[]\n    for i in list1:\n        if i=={}:\n            empty_list.append(i)\n    if empty_list==[]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_int = 0\n    for i in nums:\n        nums_int = nums_int * 10 + i\n    return nums_int\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result = result*10 + i\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #convert the tuple to a list of integers\n    nums = list(nums)\n    #get length of list\n    l = len(nums)\n    #initialise sum variable\n    sum = 0\n    #iterate over list\n    for i in range(l):\n        #add numbers to the sum variable\n        sum += nums[i]\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(n) for n in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(float(i))\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(item) for item in test_list]\n    except:\n        print('All elements in list must be convertible to float')\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(x) for x in sublist] for sublist in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    print(test_list)\n    try:\n        return [[float(x) for x in element] for element in test_list]\n    except ValueError:\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # add whatever code you need here\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index, list in enumerate(test_list):\n        try:\n            test_list[index] = float(list)\n        except ValueError:\n            pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, sublist in enumerate(test_list):\n        for j, item in enumerate(sublist):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(\" \")) \n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split(' ')\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_ = string.split()\n    return list_\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [i for i in string.split(' ') if i!='']\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = list(string.split(\" \"))\n    return(string_list)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    for i in range(0,len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    a = 0\n    for i in range(len(arr)):\n        a += arr[i]\n    return a\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def singleNumber(nums):\n        '''\n        This function is based on the bit manipulation techniques.\n        Given an array of sorted numbers, this function\n        returns the single element that does not repeat.\n        '''\n        i = 0\n        while i < len(nums):\n            if i == len(nums) - 1:\n                return nums[i]\n            elif nums[i]!= nums[i+1]:\n                return nums[i]\n            else:\n                i += 2\n    if len(arr) == 0:\n        return -1\n    return singleNumber(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    prev_num = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] == prev_num:\n            prev_num = arr[i]\n        else:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    n = len(arr)\n    start = 0\n    end = n-1\n    \n    while start <= end:\n        mid = start + (end-start)//2\n        if mid > 0 and arr[mid-1] == arr[mid]:\n            if (mid-1) == 0 or arr[mid-2]!= arr[mid]:\n                return arr[mid]\n            end = mid-2\n        elif mid < n-1 and arr[mid+1] == arr[mid]:\n            if (mid+1) == n-1 or arr[mid+2]!= arr[mid]:\n                return arr[mid]\n            start = mid+2\n        else:\n            return arr[mid]\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l=[]\n    for i in arr:\n        if i not in l:\n            l.append(i)\n    for i in l:\n        if arr.count(i)==1:\n            return i\n    return 0\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0,len(arr)):\n        if i == 0:\n            if arr[i]!= arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i]!= arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n                return arr[i]\n    return \"No element\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    elif arr[0]==arr[1]:\n        return search(arr[1:])\n    return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # iterate through array and store in a hash table\n    hash_table = {}\n    for element in arr:\n        if element in hash_table:\n            hash_table[element] += 1\n        else:\n            hash_table[element] = 1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return arr[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # for i in range(0, len(list1), 2):\n    #     list1.append(list1[i][0] * list1[i+1][0])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1_copy = list1.copy()\n    while len(list1_copy) > 0:\n        max_tuple = max_product_in_tuple(list1_copy)\n        return max_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = 0\n    for i in list1:\n        for j in list1:\n            if i[0]!=j[0] and i[1]!=j[1]:\n                if i[0]*i[1]*j[0]*j[1]>maximum:\n                    maximum = i[0]*i[1]*j[0]*j[1]\n    return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import itertools\n    l1=sorted(list1, key=lambda x: x[0])\n    for i in range(len(l1)-1):\n        if l1[i][1] * l1[i+1][1] >= l1[i][0] * l1[i+1][0]:\n            return l1[i][1] * l1[i+1][1]\n        \n        \ndef nested_sum(list1):\n    '''\n    Write a function to get the sum of all numbers in the nested list.\n    '''\n    def inner_sum(list1):\n        sum=0\n        for i in range(len(list1)):\n            if type(list1[i]) == list:\n                sum += inner_sum(list1[i])\n            else:\n                sum += list1[i]\n        return sum\n    return inner_sum(list1)\n    \n    \ndef equal_consecutive(list1):\n    '''\n    Write a function to check if all the consecutive numbers in a given list are equal to each other.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]!= list1[i+1]:\n            return False\n    return True\n    \n    \ndef freq_of_max_even_nums(list1):\n    '''\n    Write a function to get the number of times the maximum even number occurs in a list.\n    '''\n    max1=max(list1)\n    counter=0\n    for i in range(len(list1)):\n        if list1[i] == max1 and max1 % 2 == 0:\n            counter += 1\n    return counter\n    \n    \ndef extract_elements(list1):\n    '''\n    Write a function that extracts the elements of a given list after removing the first and last elements.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if i == 0 or i == len(list1)-1:\n            continue\n        list2.append(list1[i])\n    return list2\n    \n    \ndef flip_list(list1):\n    '''\n    Write a function to flip the order of the elements in a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        list2.insert(0, list1[i])\n    return list2\n    \n    \ndef min_and_max_of_list(list1):\n    '''\n    Write a function to get the minimum and maximum element in a given list.\n    '''\n    return min(list1), max(list1)\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse the order of elements in a list.\n    '''\n    list2=[]\n    for i in range(len(list1)-1, -1, -1):\n        list2.append(list1[i])\n    return list2\n    \n    \ndef remove_all_duplicates(list1):\n    '''\n    Write a function to remove all duplicates from a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    return list2\n    \n    \ndef remove_first_last_4(list1):\n    '''\n    Write a function to remove the first and last 4 elements from a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)-1):\n        if i < 4 or i > len(list1)-5:\n            list2.append(list1[i])\n    return list2\n    \n    \ndef bubble_sort_asc(list1):\n    '''\n    Write a function to sort the given list in ascending order using the bubble sort algorithm.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(len(list1)-1):\n            if list1[j] > list1[j+1]:\n                list1[j], list1[j+1] = list1[j+1], list1[j]\n    return list1\n    \n    \ndef bubble_sort_desc(list1):\n    '''\n    Write a function to sort the given list in descending order using the bubble sort algorithm.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(len(list1)-1):\n            if list1[j] < list1[j+1]:\n                list1[j], list1[j+1] = list1[j+1], list1[j]\n    return list1\n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicate elements from a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)-1):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    return list2\n    \n    \ndef generate_list(n):\n    '''\n    Write a function to generate a list of N numbers.\n    '''\n    list1=[]\n    for i in range(n):\n        list1.append(i)\n    return list1\n    \n    \ndef replace_all_elements(list1):\n    '''\n    Write a function to replace all the elements of a list to their squares.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        list2.append(list1[i]**2)\n    return list2\n    \n    \ndef rotate_list(list1, n):\n    '''\n    Write a function to rotate a list by N elements.\n    '''\n    list2=[]\n    for i in range(n, len(list1)):\n        list2.append(list1[i])\n    for i in range(n):\n        list2.append(list1[i])\n    return list2\n    \n    \ndef skip_every_n(list1, n):\n    '''\n    Write a function to skip every Nth element in a list.\n    '''\n    list2=[]\n    for i in range(0, len(list1), n):\n        list2.append(list1[i])\n    return list2\n    \n    \ndef find_divisors(list1):\n    '''\n    Write a function to find all the divisors of a given number.\n    '''\n    list2=[]\n    for i in range(1, len(list1)):\n        if list1[i] % list1[0] == 0:\n            list2.append(list1[i])\n    return list2\n    \n    \ndef find_sum_of_squares(list1):\n    '''\n    Write a function to find the sum of the squares of all the elements in the list.\n    '''\n    sum=0\n    for i in range(len(list1)):\n        sum += list1[i]**2\n    return sum\n    \n    \ndef find_sum_of_even_numbers(list1):\n    '''\n    Write a function to find the sum of all the even numbers in a given list.\n    '''\n    sum=0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            sum += list1[i]\n    return sum\n    \n    \ndef is_palindrome(string1):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    string1=string1.lower()\n    string2=string1[::-1]\n    if string1 == string2:\n        return True\n    return False\n    \n    \ndef remove_duplicates_1(list1):\n    '''\n    Write a function to remove all the duplicates from a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)-1):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    return list2\n    \n    \ndef remove_duplicates_2(list1):\n    '''\n    Write a function to remove all the duplicate"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = [(-1, 2), (1, -2), (3, 6), (-3, -6)]\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            a = list1[i]\n            b = list1[j]\n            if a[0] * b[0] > a[1] * b[1] or a[1] * b[1] > a[0] * b[0]:\n                list2.append((a, b))\n    return list2\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import operator\n    result = []\n    result_tuple = []\n    for x in list1:\n        if len(x) == 2:\n            result_tuple.append(x)\n    #for x in list1:\n        if len(x) == 4:\n            result_tuple.append(x)\n    for t in result_tuple:\n        if type(t) is tuple:\n            if len(t) == 4:\n                result.append(t)\n    \n    list1 = sorted(result, key=lambda x: x[1], reverse=True)\n    #print(list1)\n    max_product = 0\n    for x in list1:\n        if abs(x[0]) * abs(x[1]) > max_product:\n            max_product = abs(x[0]) * abs(x[1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    highest_product = list1[0]\n    for item1 in range(len(list1)):\n        for item2 in range(item1 + 1, len(list1)):\n            if max(list1[item1], list1[item2]) == list1[item1] and min(list1[item1], list1[item2]) == list1[item2]:\n                highest_product = list1[item1] * list1[item2]\n    return highest_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] == None:\n            list1[i] = 0\n        for j in range(i+1, len(list1)):\n            if list1[i] * list1[j] > list2:\n                list2 = list1[i] * list1[j]\n    return list2\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Find the maximum product\n    max_prod = 0\n    # Initialize the variables\n    i = 0\n    j = 0\n    # Make a copy of the list to iterate through\n    l_copy = list1[:]\n    # For each list item in the copy\n    while i < len(l_copy):\n        # For each list item in the copy\n        for j in range(i + 1, len(l_copy)):\n            # If the product of the current i and j are greater than max_prod\n            if abs(l_copy[i][0] * l_copy[j][1]) > max_prod:\n                # Make the product the new max_prod\n                max_prod = abs(l_copy[i][0] * l_copy[j][1])\n                # Set i and j to the last index of the list\n                i = j\n        # Move the ith item to the next item in the list\n        i += 1\n    return max_prod\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    def sum_amicable_numbers(limit):\n        amicable_numbers = []\n        for x in range(1, limit):\n            y = sum_of_divisors(x)\n            z = sum_of_divisors(y)\n            if x == z and x!= y:\n                amicable_numbers.append(x)\n                amicable_numbers.append(y)\n        return sum(amicable_numbers)\n    return sum_amicable_numbers(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # to check if a number is a amicable pair, it will need to be checked for\n    # every number from 1 to that number.\n    # this is where a recursive function would be handy:\n    #    def sum_divisors(num):\n    #        sum_of_divisors = 1\n    #        for i in range(2, num):\n    #            if num % i == 0:\n    #                sum_of_divisors += i\n    #        return sum_of_divisors\n    # the above function can be used to get the sum of divisors in a recursive\n    # fashion.\n    # this is where an iterative method would be more useful:\n    #    def sum_divisors(num):\n    #        sum_of_divisors = 0\n    #        for i in range(1, num):\n    #            if num % i == 0:\n    #                sum_of_divisors += i\n    #        return sum_of_divisors\n    # the above function can be used to get the sum of divisors in a iterative\n    # fashion.\n    # so then, the recursive function can be used to check for amicable numbers:\n    #    def is_amicable(num):\n    #        sum_of_divisors = sum_divisors(num)\n    #        if sum_of_divisors!= num and sum_of_divisors!= 1:\n    #            return is_amicable(sum_of_divisors)\n    #        elif sum_of_divisors == num:\n    #            return True\n    #        else:\n    #            return False\n    # the above function can be used to check for amicable numbers.\n    # for example, amicable numbers for the first ten thousand:\n    #        print(is_amicable(220)) # -> True\n    #        print(is_amicable(284)) # -> True\n    #        print(is_amicable(1184)) # -> True\n    #        print(is_amicable(1210)) # -> True\n    #        print(is_amicable(2924)) # -> True\n    #        print(is_amicable(5020)) # -> True\n    #        print(is_amicable(9474)) # -> True\n    #        print(is_amicable(10530)) # -> True\n    #        print(is_amicable(15600)) # -> True\n    #        print(is_amicable(28162)) # -> True\n    #        print(is_amicable(33550)) # -> True\n    #        print(is_amicable(40730)) # -> True\n    #        print(is_amicable(13044)) # -> True\n    #        print(is_amicable(24996)) # -> True\n    #        print(is_amicable(29574)) # -> True\n    #        print(is_amicable(56986)) # -> True\n    #        print(is_amicable(159720)) # -> True\n    #        print(is_amicable(182984)) # -> True\n    #        print(is_amicable(232940)) # -> True\n    #        print(is_amicable(289344)) # -> True\n    #        print(is_amicable(426968)) # -> True\n    #        print(is_amicable(533532)) # -> True\n    #        print(is_amicable(589824)) # -> True\n    #        print(is_amicable(605294)) # -> True\n    #        print(is_amicable(639274)) # -> True\n    #        print(is_amicable(670754)) # -> True\n    #        print(is_amicable(749964)) # -> True\n    #        print(is_amicable(837718)) # -> True\n    #        print(is_amicable(854758)) # -> True\n    #        print(is_amicable(930998)) # -> True\n    #        print(is_amicable(955618)) # -> True\n    #        print(is_amicable(995602)) # -> True\n    #        print(is_amicable(1047498)) # -> True\n    #        print(is_amicable(1057494)) # -> True\n    #        print(is_amicable(1058522)) # -> True\n    #        print(is_amicable(1067722)) # -> True\n    #        print(is_amicable(1091702)) # -> True\n    #        print(is_amicable(1109998)) # -> True\n    #        print(is_amicable(1137994)) # -> True\n    #        print(is_amicable(1168998)) # -> True\n    #        print(is_amicable(1191942)) # -> True\n    #        print(is_amicable(1205474)) # -> True\n    #        print(is_amicable(1228726)) # -> True\n    #        print(is_amicable(1244918)) # -> True\n    #        print(is_amicable(1255006)) # -> True\n    #        print(is_amicable(1272918)) # -> True\n    #        print(is_amicable(1289822)) # -> True\n    #        print(is_amicable(1316934)) # -> True\n    #        print(is_amicable(1331338)) # -> True\n    #        print(is_amicable(1344018)) # -> True\n    #        print(is_amicable(1355526)) # -> True\n    #        print(is_amicable(1372334)) # -> True\n    #        print(is_amicable(1386422)) # -> True\n    #        print(is_amicable(1394946)) # -> True\n    #        print(is_amicable(1410234)) # -> True\n    #        print(is_amicable(1414010)) # -> True\n    #        print(is_amicable(1423214)) # -> True\n    #        print(is_amicable(1451698)) # -> True\n    #        print(is_amicable(1458014)) # -> True\n    #        print(is_amicable(1476698)) # -> True\n    #        print(is_amicable(1486822)) # -> True\n    #        print(is_amicable(1498086)) # -> True\n    #        print(is_amicable(1513010)) # -> True\n    #        print(is_amicable(1523234)) # -> True\n    #        print(is_amicable(1534018)) # -> True\n    #        print(is_amicable(1555238)) # -> True\n    #        print(is_amicable(1567234)) # -> True\n    #        print(is_amicable(1578698)) # -> True\n    #        print(is_amicable(1592754)) # -> True\n    #        print(is_amicable(1608058)) # -> True\n    #        print(is_amicable(1617126)) # -> True\n    #        print(is_amicable(1627558)) # -> True\n    #        print(is_amicable(1637010)) # -> True\n    #        print(is_amicable(1647834)) # -> True\n    #        print(is_amicable(1657018)) # -> True\n    #        print(is_amicable(1667602)) # -> True\n    #        print(is_amicable(1677498)) # -> True\n    #        print(is_amicable(1688010)) # -> True\n    #        print(is_amicable(1708254)) # -> True\n    #        print(is_amicable(1718986)) # -> True\n    #        print(is_amicable(1729018)) # -> True\n    #        print(is_amicable(1739454)) # -> True\n    #        print(is_amicable(1749866)) # -> True\n    #        print(is_amicable(1759114)) # -> True\n    #        print(is_amicable(1769946)) # -> True\n    #        print(is_amicable(1778838)) # -> True\n    #        print(is_amicable(1789634)) # -> True\n    #        print(is_amicable(1790518)) # -> True\n    #        print(is_amicable(1802482)) # -> True\n    #        print(is_ami"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    for i in range(2, limit):\n        for j in range(i+1, limit):\n            sum_1 = i+j\n            sum_2 = i*j\n            if i == j:\n                continue\n            elif sum_2 > limit:\n                break\n            elif sum_1 == sum_2:\n                numbers.append(i)\n                numbers.append(j)\n    sum_all = sum(set(numbers))\n    return sum_all\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for x in range(1,limit):\n        #print('[DEBUG] Current x value: %s' % x)\n        sum += amicable_number(x)\n        \n    return sum\n    \ndef amicable_number(number):\n    '''\n    Write a function that returns the sum of divisors of a given number, not including the number itself.\n    '''\n    # Set our divisor limit to the number of digits in our input number\n    limit = int(math.log10(number)) + 1\n    \n    # We'll make a list of divisors\n    divisors = []\n    \n    # Iterate through each digit in the number\n    for i in range(1, limit):\n        # Get the current digit\n        current_digit = int(number / (10**(i - 1))) % 10\n        \n        # Add it to the list\n        divisors.append(current_digit)\n        \n    #print('[DEBUG] Divisors: %s' % divisors)\n    \n    # Now we'll iterate through the list of divisors\n    amicable_sum = 0\n    for divisor in divisors:\n        #print('[DEBUG] Current divisor: %s' % divisor)\n        # Check to see if the divisor is a member of divisors\n        if (divisor in divisors) and (number % divisor == 0):\n            #print('[DEBUG] Number: %s / divisor: %s' % (number, divisor))\n            # If it is, then we'll add the sum of both numbers\n            amicable_sum += (number + divisor)\n            #print('[DEBUG] Amicable sum: %s' % amicable_sum)\n    \n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = [False] * limit\n    sum = 0\n    for i in range(limit):\n        for j in range(i + 1, limit):\n            if is_amicable_number(i, j, amicable_nums):\n                sum += i + j\n                break\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(sum_amicable_numbers(x) for x in range(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(get_sum_of_amicable_numbers(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit < 2:\n        raise Exception('limit must be > 1')\n    \n    amicable_numbers = set()\n    \n    for a in range(1, limit + 1):\n        b = sum_divisors(a)\n        if a == sum_divisors(b) and a!= b:\n            amicable_numbers.add(a)\n            amicable_numbers.add(b)\n    \n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def dfs(cur_num, amicable_numbers):\n        if cur_num >= limit:\n            return amicable_numbers\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.polar(complex(a,b))[1]\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    '''\n    Complex number is defined by real and imaginary part.\n    '''\n    return(cmath.phase(complex(a,b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\nprint(angle_complex(1,1))\nprint(angle_complex(-1,1))\nprint(angle_complex(1,-1))\nprint(angle_complex(1,0))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    pass\n    complex_number = a+b*1j\n    angle = cmath.phase(complex_number)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\nprint(angle_complex(4,2))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = complex(a,b)\n    return cmath.polar(angle)[1]\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a==0 and b==0:\n        return 0.0\n    elif a == 0 and b == 0:\n        return 0.0\n    elif a == 0:\n        return cmath.pi/2\n    elif b==0:\n        return cmath.pi/2\n    elif a==0 and b==0:\n        return 0.0\n    elif a==0 and b!=0:\n        return cmath.pi/2\n    elif b==0 and a!=0:\n        return cmath.pi/2\n    elif a>0 and b>0:\n        return cmath.acos(a/b)\n    elif a>0 and b<0:\n        return cmath.acos(a/b)+cmath.pi\n    elif a<0 and b>0:\n        return cmath.acos(a/b)+2*cmath.pi\n    elif a<0 and b<0:\n        return cmath.acos(a/b)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = a\n    y = b\n    angle = cmath.phase(complex(x,y))\n    angle = round(angle,3)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = a.real\n    y = a.imag\n    r = (x**2 + y**2)**(1/2)\n    r1 = (b.real**2 + b.imag**2)**(1/2)\n    r2 = (x**2 + y**2)**(1/2)\n    r3 = (b.real**2 + b.imag**2)**(1/2)\n    if r!= 0:\n        c = abs((r1/r) - (r2/r))\n        d = abs((r3/r) - (r2/r))\n    else:\n        c = 0\n        d = 0\n    if c > d:\n        print(f\"The angle is {c} degrees.\")\n    else:\n        print(f\"The angle is {d} degrees.\")\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if(string[i] == '0'):\n            count_0 += 1\n        else:\n            count_1 += 1\n        if(count_0 == count_1):\n            max_diff = max(max_diff,count_0-count_1)\n        if(count_0 > count_1):\n            count_1 = 0\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # dp[i] is the maximum difference of 0s and 1s in sub-string[0...i]\n    dp = [0 for i in range(len(string))]\n    \n    # Base case: i=0\n    dp[0] = 0 if string[0] == '0' else 1\n    \n    # Base case: i=1\n    if string[1] == '0':\n        dp[1] = 1 if string[0] == '1' else 2\n    else:\n        dp[1] = 1 if string[0] == '0' else 2\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    import re\n    import numpy as np\n    res = []\n    a = np.array(list(string))\n    for i in range(len(a)):\n        b = re.findall(\"1+\", a[i])\n        res.append(len(b))\n    return max(res)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(len(string)):\n        if string[i] == \"1\":\n            length += 1\n        elif string[i] == \"0\":\n            length += 1\n            \n    return length\n    \ndef find_length(string):\n    max_count = 0\n    count = 0\n    \n    for i in range(len(string)):\n        if string[i] == \"1\":\n            count += 1\n            max_count = max(count, max_count)\n        elif string[i] == \"0\":\n            count = 0\n            \n    return max_count\n    \ndef find_length(string):\n    count = 0\n    max_count = 0\n    \n    for i in string:\n        if i == \"1\":\n            count += 1\n            max_count = max(count, max_count)\n        elif i == \"0\":\n            count = 0\n            \n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        str_0 = 0\n        str_1 = 0\n        for j in range(i, len(string)):\n            if(string[j] == '0'):\n                str_0 += 1\n            else:\n                str_1 += 1\n            if(str_1 > str_0):\n                break\n        max_length = max(max_length, str_0, str_1)\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_count_0 = 0\n    max_count_1 = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(0, len(string)):\n        if string[i] == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n        if count_1 > max_count_1:\n            max_count_1 = count_1\n        if count_0 > max_count_0:\n            max_count_0 = count_0\n    return max_count_1 - max_count_0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(\n        [\n            (\n                len([x for x in string if x == \"0\"]), \n                len([x for x in string if x == \"1\"]),\n            )\n        ]\n    )\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = len(string)\n    max_sub_array = []\n    for i in range(l):\n        j = l - i - 1\n        count = 0\n        c = 0\n        while j < l:\n            if string[j] == '1':\n                count += 1\n                c += 1\n            else:\n                count = 0\n            if count > len(max_sub_array):\n                max_sub_array = list(string[j: j + c + 1])\n            j += 1\n    return len(max_sub_array)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([count(string, '0'), count(string, '1')]) - min([count(string, '0'), count(string, '1')])\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize new_length and prev_length\n    new_length = 0\n    prev_length = 0\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 1 # intially set to 1\n    for i in range(2, min(a,b)+1): # iterate through all numbers between 2 and min(a,b)\n        if a%i == 0 and b%i == 0: # check if i is a common factor of both numbers\n            sum = sum + i # add the common factor to the sum\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b == 0): \n        return a \n    else: \n        return sum(b,a%b) \ndef sum_of_divisors(n): \n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    sum_of_divisors = 0\n    for i in range(1,n): \n        if(n % i == 0): \n            sum_of_divisors += i \n    return sum_of_divisors \ndef amicable_numbers(n): \n    '''\n    Write a python function to find the sum of amicable numbers between 1 and n.\n    '''\n    sum_of_amicable_numbers = 0\n    for a in range(1,n): \n        b = sum_of_divisors(a) \n        if(a!= b and sum_of_divisors(b) == a): \n            sum_of_amicable_numbers += a \n    return sum_of_amicable_numbers\nprint(\"The sum of common divisors of 6 and 28 is :\", sum(6,28))\nprint(\"The sum of divisors of 6 is :\", sum_of_divisors(6))\nprint(\"The sum of divisors of 28 is :\", sum_of_divisors(28))\nprint(\"The sum of divisors of 6 is :\", sum_of_divisors(6))\nprint(\"The sum of amicable numbers between 1 and 10 is :\", amicable_numbers(10))"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        a,b = b,a\n    i = 2\n    sum = 0\n    while i <= min(a,b):\n        if a%i==0 and b%i==0:\n            sum += i\n        i+=1\n    return sum\ndef multiply(a,b):\n    '''\n    Write a python function to find the product of common divisors of two given numbers.\n    '''\n    if a<b:\n        a,b = b,a\n    i = 2\n    sum = 0\n    while i <= min(a,b):\n        if a%i==0 and b%i==0:\n            sum += i\n        i+=1\n    return sum\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two given numbers.\n    '''\n    if a<b:\n        a,b = b,a\n    i = 2\n    sum = 0\n    while i <= a:\n        if a%i==0 and b%i==0:\n            sum += i\n        i+=1\n    return sum\ndef count_factors(a):\n    '''\n    Write a python function to find the count of factors of a given number.\n    '''\n    if a<0:\n        a = -a\n    i = 1\n    count = 0\n    while i <= a:\n        if a%i==0:\n            count += 1\n        i+=1\n    return count\ndef count_primes(a):\n    '''\n    Write a python function to find the count of prime numbers less than a given number.\n    '''\n    if a<0:\n        a = -a\n    i = 2\n    count = 0\n    while i <= a:\n        if a%i==0:\n            count += 1\n        i+=1\n    return count\ndef is_prime(a):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if a<0:\n        a = -a\n    i = 2\n    while i <= a:\n        if a%i==0:\n            return False\n        i+=1\n    return True\ndef is_palindrome(a):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    return str(a)==str(a)[::-1]\ndef convert(a):\n    '''\n    Write a python function to convert a given number to binary number.\n    '''\n    i = 0\n    ans = \"\"\n    while(a):\n        if a%2==0:\n            ans = '0' + ans\n        else:\n            ans = '1' + ans\n        a = a//2\n        i += 1\n    return ans\ndef convert_binary(a):\n    '''\n    Write a python function to convert a given number to decimal number.\n    '''\n    ans = 0\n    for i in range(len(a)):\n        ans += int(a[-1-i])*(2**i)\n    return ans\ndef convert_decimal(a):\n    '''\n    Write a python function to convert a given number to octal number.\n    '''\n    ans = \"\"\n    while(a):\n        if a%8==0:\n            ans = '0' + ans\n        else:\n            ans = '1' + ans\n        a = a//8\n        i += 1\n    return ans\ndef convert_octal(a):\n    '''\n    Write a python function to convert a given number to hexadecimal number.\n    '''\n    ans = \"\"\n    while(a):\n        if a%16==0:\n            ans = '0' + ans\n        else:\n            ans = '1' + ans\n        a = a//16\n        i += 1\n    return ans\ndef convert_hexadecimal(a):\n    '''\n    Write a python function to convert a given number to hexadecimal number.\n    '''\n    ans = \"\"\n    while(a):\n        if a%16==0:\n            ans = '0' + ans\n        elif a%16==1:\n            ans = '1' + ans\n        elif a%16==2:\n            ans = '2' + ans\n        elif a%16==3:\n            ans = '3' + ans\n        elif a%16==4:\n            ans = '4' + ans\n        elif a%16==5:\n            ans = '5' + ans\n        elif a%16==6:\n            ans = '6' + ans\n        elif a%16==7:\n            ans = '7' + ans\n        elif a%16==8:\n            ans = '8' + ans\n        elif a%16==9:\n            ans = '9' + ans\n        elif a%16==10:\n            ans = 'A' + ans\n        elif a%16==11:\n            ans = 'B' + ans\n        elif a%16==12:\n            ans = 'C' + ans\n        elif a%16==13:\n            ans = 'D' + ans\n        elif a%16==14:\n            ans = 'E' + ans\n        elif a%16==15:\n            ans = 'F' + ans\n        a = a//16\n        i += 1\n    return ans\ndef fibonacci(a):\n    '''\n    Write a python function to find the nth term of fibonacci series.\n    '''\n    if a==0:\n        return 0\n    elif a==1:\n        return 1\n    else:\n        return fibonacci(a-1)+fibonacci(a-2)\ndef factorial(a):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if a==0:\n        return 1\n    else:\n        return a*factorial(a-1)\ndef binary_to_decimal(a):\n    '''\n    Write a python function to convert a binary number to decimal number.\n    '''\n    ans = 0\n    i = 0\n    for i in range(len(a)):\n        ans += int(a[-1-i])*(2**i)\n    return ans\ndef decimal_to_binary(a):\n    '''\n    Write a python function to convert a decimal number to binary number.\n    '''\n    ans = \"\"\n    while(a):\n        if a%2==0:\n            ans = '0' + ans\n        else:\n            ans = '1' + ans\n        a = a//2\n        i += 1\n    return ans\ndef binary_to_octal(a):\n    '''\n    Write a python function to convert a binary number to octal number.\n    '''\n    ans = \"\"\n    while(a):\n        if a%8==0:\n            ans = '0' + ans\n        else:\n            ans = '1' + ans\n        a = a//8\n        i += 1\n    return ans\ndef octal_to_binary(a):\n    '''\n    Write a python function to convert a octal number to binary number.\n    '''\n    ans = \"\"\n    while(a):\n        if a%2==0:\n            ans = '0' + ans\n        else:\n            ans = '1' + ans\n        a = a//2\n        i += 1\n    return ans\ndef decimal_to_octal(a):\n    '''\n    Write a python function to convert a decimal number to octal number.\n    '''\n    ans = \"\"\n    while(a):\n        if a%8==0:\n            ans = '0' + ans\n        else:\n            ans = '1' + ans\n        a = a//8\n        i += 1\n    return ans\ndef octal_to_decimal(a):\n    '''\n    Write a python function to convert a octal number to decimal number.\n    '''\n    ans = 0\n    i = 0\n    for i in range(len(a)):\n        ans += int(a[-1-i])*("
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a>b):\n        return sum(b,a)\n    else:\n        if(a%b==0):\n            return b\n        else:\n            return sum(b,a%b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=1\n    sum=0\n    while(i<=b):\n        if(b%i==0 and a%i==0):\n            sum+=i\n        i+=1\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a==0 or b==0):\n        return 0\n    if(a>b):\n        return sum(b,a)\n    if(a<b):\n        return b + sum(a,b)\n    if(a==b):\n        return b\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum_d=1\n    for i in range(2,min(a,b)+1):\n        if(a%i==0 and b%i==0):\n            sum_d=sum_d+i\n    return sum_d\nprint(sum(3,6))\nprint(sum(9,4))\nprint(sum(7,21))\nprint(sum(9,90))\nprint(sum(60,32))\nprint(sum(10,100))\nprint(sum(100,200))\nprint(sum(200,100))\nprint(sum(200,200))\nprint(sum(200,0))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b:\n        return a\n    else:\n        return abs(sum(a,b)-b)+a\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return int(math.gcd(a,b))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(x,y):\n        if y == 0:\n            return x\n        else:\n            return gcd(y,x%y)\n    return a*b/gcd(a,b)\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \nmultiply_int(5, 8) #40\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    \n    return [x for x in str.split(' ') if len(x) > n]\n    \n    \n    \n'''\nWrite a function named count_code() that takes a string and returns the number of times \nthat the string \u201ccode\u201d appears anywhere in the string, \nexcept we'll accept any letter for the \u201cd\u201d, so \u201ccope\u201d and \u201ccooe\u201d count.\n'''\ndef count_code(str):\n    \n    return str.count('co', 0, len(str)) + str.count('e', 0, len(str)) + str.count('o', 0, len(str))\n    \n    \n'''\nWrite a function named has_no_e() that returns True if the given word doesn\u2019t have the letter \u201ce\u201d in it.\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [s for s in str if len(s) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = str.split()\n    new_list = []\n    for word in word_list:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for s in str:\n        if len(s) > n:\n            result.append(s)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [i for i in str if len(i) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_word = str.split()\n    long_words = []\n    for word in list_word:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(' ') if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = str.split()\n    l1 = [i for i in l if len(i) > n]\n    return l1\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # define the magic constant\n    magic_constant = 15\n    magic_matrix = my_matrix\n    # define the value to be returned\n    value_to_return = False\n    # define the counter\n    magic_counter = 0\n    # define the steps\n    for i in range(0, len(my_matrix)):\n        magic_counter += my_matrix[i][0]\n    magic_counter -= magic_constant\n    # if the counter is 0, the matrix is magic\n    if magic_counter == 0:\n        value_to_return = True\n    # otherwise, check the rows, columns and diagonals\n    else:\n        # check the rows\n        for i in range(0, len(my_matrix)):\n            magic_counter = 0\n            for j in range(0, len(my_matrix[i])):\n                magic_counter += my_matrix[i][j]\n            magic_counter -= magic_constant\n            if magic_counter!= 0:\n                value_to_return = False\n                break\n        # check the columns\n        for j in range(0, len(my_matrix)):\n            magic_counter = 0\n            for i in range(0, len(my_matrix)):\n                magic_counter += my_matrix[i][j]\n            magic_counter -= magic_constant\n            if magic_counter!= 0:\n                value_to_return = False\n                break\n        # check the diagonals\n        magic_counter = 0\n        for i in range(0, len(my_matrix)):\n            magic_counter += my_matrix[i][i]\n        magic_counter -= magic_constant\n        if magic_counter!= 0:\n            value_to_return = False\n        magic_counter = 0\n        for i in range(0, len(my_matrix)):\n            magic_counter += my_matrix[i][len(my_matrix) - 1 - i]\n        magic_counter -= magic_constant\n        if magic_counter!= 0:\n            value_to_return = False\n    # return the result\n    return value_to_return\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #check if its even\n    if len(my_matrix)%2 == 1:\n        return False\n    #check if its even length\n    if len(my_matrix)%2 == 0:\n        for i in range(len(my_matrix)):\n            if len(my_matrix[i])!= len(my_matrix):\n                return False\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if sum(my_matrix[0])!= sum(my_matrix[1]) or sum(my_matrix[0])!= sum(my_matrix[2]):\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # First check to see if the sum of each row is the same as the sum of each column\n    # Also need to check that the diagonal is the same\n    # Sum of each row should be the same\n    # Sum of each column should be the same\n    # The sum of the diagonals should be the same\n    # The sum of each row should be the same as the sum of each column\n    \n    # Check to see if the sum of each row is the same as the sum of each column\n    sum_rows = 0\n    for row in my_matrix:\n        sum_rows += sum(row)\n    \n    # Check to see if the sum of each column is the same as the sum of each row\n    sum_columns = 0\n    for i in range(len(my_matrix)):\n        sum_columns += my_matrix[0][i]\n    \n    # Check to see if the sum of each row is the same as the sum of each column\n    sum_diagonal1 = 0\n    for i in range(len(my_matrix)):\n        sum_diagonal1 += my_matrix[i][i]\n    \n    # Check to see if the sum of each row is the same as the sum of each column\n    sum_diagonal2 = 0\n    for i in range(len(my_matrix)):\n        sum_diagonal2 += my_matrix[len(my_matrix)-1-i][i]\n    \n    return sum_rows == sum_columns == sum_diagonal1 == sum_diagonal2\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        my_col = list(map(lambda row: row[i], my_matrix))\n        print(my_col)\n        if sorted(my_col)!= my_col:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 3 and len(my_matrix[0]) == 3:\n        cols = [0 for i in range(3)]\n        rows = [0 for i in range(3)]\n        diags = [0 for i in range(2)]\n        for i in range(3):\n            rows[i] = sum(my_matrix[i])\n            cols[i] = sum(x[i] for x in my_matrix)\n            if i == 0:\n                diags[0] = my_matrix[0][0] + my_matrix[2][2]\n            elif i == 1:\n                diags[1] = my_matrix[0][2] + my_matrix[2][0]\n        return cols == rows == diags\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not my_matrix: return False\n    if len(my_matrix)!= len(my_matrix[0]): return False\n    for y in range(len(my_matrix)):\n        for x in range(len(my_matrix[y])):\n            if my_matrix[y][x] == 0: continue\n            # Checks the column.\n            count = 0\n            for yy in range(len(my_matrix)):\n                if my_matrix[yy][x]!= 0:\n                    count += 1\n            if count!= my_matrix[y][x]:\n                return False\n            # Checks the row.\n            count = 0\n            for xx in range(len(my_matrix[y])):\n                if my_matrix[y][xx]!= 0:\n                    count += 1\n            if count!= my_matrix[y][x]:\n                return False\n    # Checks the 3x3 block.\n    for y in range(0, len(my_matrix), 3):\n        for x in range(0, len(my_matrix[y]), 3):\n            count = 0\n            for yy in range(3):\n                for xx in range(3):\n                    if my_matrix[y+yy][x+xx]!= 0:\n                        count += 1\n            if count!= 15:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n    s = sum([sum([my_matrix[i][j] for j in range(m)]) for i in range(n)])\n    t = sum([sum([my_matrix[i][j] for i in range(n)]) for j in range(m)])\n    l = sum([my_matrix[i][i] for i in range(n)])\n    r = sum([my_matrix[i][n-i-1] for i in range(n)])\n    return s == t == l == r\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # A magic square is an n*n matrix where n is an odd natural number and the sum of any row, column, or diagonal of length n is always equal to the same number.\n    # A natural number is a number that is a whole number and greater than 0.\n    # The sum of any row, column, or diagonal of length n is an arithmetic series where n is the number of items in that row, column, or diagonal.\n    # A magic square is an n*n matrix where n is an odd natural number and the sum of any row, column, or diagonal of length n is always equal to the same number.\n    # A magic square is an n*n matrix where n is an odd natural number and the sum of any row, column, or diagonal of length n is always equal to the same number.\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    assert type(my_matrix) is list\n    assert len(my_matrix) is len(my_matrix[0])\n    # Check if the diagonal sums to the same value\n    diag_sum = sum(my_matrix[0][0])\n    for i in range(len(my_matrix)):\n        assert diag_sum == sum(my_matrix[i][i])\n    # Check if all of the rows and columns add up to the same value\n    row_sum = [sum(i) for i in my_matrix]\n    col_sum = [sum(j) for j in zip(*my_matrix)]\n    for i in range(len(row_sum)):\n        assert row_sum[i] == col_sum[i]\n    # Check if the square is magic\n    for n in range(1, len(my_matrix)):\n        for m in range(len(my_matrix) - n):\n            square = [my_matrix[i][m:m + n + 1] for i in range(m, m + n + 1)]\n            if sum(square[0])!= sum(square[-1]):\n                return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_map = defaultdict(int)\n    max_frequency = 0\n    max_element = None\n    for i in nums:\n        frequency_map[i] += 1\n        if frequency_map[i] > max_frequency:\n            max_frequency = frequency_map[i]\n            max_element = i\n    print(max_frequency, max_element)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a hashmap\n    # traverse the list\n    # keep a variable to store the max value\n    # return the value\n    hashmap = defaultdict(int)\n    for num in nums:\n        hashmap[num] += 1\n    max_value = max(hashmap.values())\n    for key, value in hashmap.items():\n        if value == max_value:\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = {}\n    for i in nums:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    max_value = max(dict.values())\n    for i in dict:\n        if dict[i] == max_value:\n            return i\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = {}\n    for num in nums:\n        frequency[num] = frequency.get(num, 0) + 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    res = None\n    d = defaultdict(lambda : 0)\n    for item in nums:\n        d[item] += 1\n        if d[item] > max_count:\n            max_count = d[item]\n            res = item\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    a = defaultdict(int)\n    for i in nums:\n        a[i] += 1\n    return max(a, key=a.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash_map = {}\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        if item in hash_map:\n            hash_map[item] += 1\n            max_freq = max(max_freq, hash_map[item])\n        else:\n            hash_map[item] = 1\n    for item in hash_map:\n        if hash_map[item] == max_freq:\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    for n in nums:\n        freq[n] += 1\n        if freq[n] > max_freq:\n            max_freq = freq[n]\n    for key, value in freq.items():\n        if value == max_freq:\n            return key\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels.reverse()\n    for i in vowels:\n        str1 = str1.replace(i, '')\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i = 0\n    j = len(str1)-1\n    while i<j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i],str1[j] = str1[j],str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    vowels_in_str = set(str1)\n    vowels_not_in_str = vowels_in_str.difference(vowels)\n    return ''.join(vowels_not_in_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a','e','i','o','u','y','A','E','I','O','U','Y'])\n    str1 = str1.lower()\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_index.append(i)\n    return \"\".join(str1[i] for i in range(len(str1)) if i not in vowel_index)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    list1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if list1[i] not in vowels:\n            i += 1\n        elif list1[j] not in vowels:\n            j -= 1\n        else:\n            list1[i], list1[j] = list1[j], list1[i]\n            i += 1\n            j -= 1\n    return \"\".join(list1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if(isinstance(str1,str)):\n        return reverse_vowels_rec(str1)\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i = 0\n    j = len(str1) -1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    vowels_only = []\n    for i in str1:\n        if i in vowels:\n            vowels_only.append(i)\n    print(vowels_only)\n    for i in range(len(str1)):\n        if str1[i] not in vowels_only:\n            str1 = str1[:i] + str1[i].upper() + str1[i+1:]\n    print(str1)\nreverse_vowels(\"leetcode\")\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    start,end = 0, len(str1)-1\n    while start < end:\n        if str1[start] not in vowels:\n            start += 1\n        elif str1[end] not in vowels:\n            end -= 1\n        else:\n            str1[start], str1[end] = str1[end], str1[start]\n            start += 1\n            end -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowel_str = \"\"\n    for ch in str1:\n        if ch in vowels:\n            vowel_str = ch + vowel_str\n        else:\n            vowel_str = vowel_str + ch\n    return vowel_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #your code here\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for i in tup1:\n        tup_str += str(i)\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = \"\"\n    for i in tup1:\n        result = result + str(i) + \" \"\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return(str(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Your code here\n    tup_str = \"\"\n    for i in tup1:\n        tup_str += str(i)\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \ndef tup_split(s, sep=' '):\n    '''\n    Write a function to split a string.\n    '''\n    return s.split(sep)\n    \ndef max_occur(tup1):\n    '''\n    Write a function to find the maximum of the numbers in a tuple.\n    '''\n    return max(tup1)\n    \ndef min_occur(tup1):\n    '''\n    Write a function to find the minimum of the numbers in a tuple.\n    '''\n    return min(tup1)\n    \ndef concat_tup(tup1, tup2):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    return tup1 + tup2\n    \ndef tup_len(tup1):\n    '''\n    Write a function to find the length of a tuple.\n    '''\n    return len(tup1)\n    \ndef max_num(tup1):\n    '''\n    Write a function to return the number with the highest frequency.\n    '''\n    return max(tup1, key=tup1.count)\n    \ndef index_of_num(tup1, num):\n    '''\n    Write a function to return the index of a number in a tuple.\n    '''\n    return tup1.index(num)\n    \ndef max_num_index(tup1):\n    '''\n    Write a function to return the index of the number with the highest frequency.\n    '''\n    return tup1.index(max(tup1, key=tup1.count))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for x in tup1:\n        string += str(x) + \" \"\n    return string.rstrip()\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    output_string = \"\"\n    for i in tup1:\n        output_string += str(i) + \", \"\n    output_string = output_string[:-2]\n    print(output_string)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \",\".join(str(x) for x in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return tuple(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenums=[]\n    for num in nums:\n        if num<0:\n            negativenums.append(num)\n    return sum(negativenums)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_nums_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_nums_sum += num\n    return negative_nums_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # input: list of numbers\n    # output: sum of negative numbers\n    return sum(i for i in nums if i < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #sum = 0\n    #for num in nums:\n    #    if num < 0:\n    #        sum += num\n    #return sum\n    return sum(i for i in nums if i < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(nums) if nums[0] < 0 else 0\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return -1\n    else:\n        return n * (2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = 1\n    result = 0\n    while n > 0:\n        result += x\n        x += 3\n        n -= 1\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2*n - 1))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = (n * (2 * n - 1)) // 2\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n-1))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n    \ndef test_hexagonal_num():\n    '''\n    A number on a hexagonal graph is the sum of its straight line neighbors, \n    where each straight line neighbor is the difference of the hexagonal number's straight line neighbor, \n    and the difference of a hexagonal number with its center.\n    '''\n    assert hexagonal_num(1) == 1\n    assert hexagonal_num(4) == 10\n    assert hexagonal_num(6) == 18\n    assert hexagonal_num(8) == 33\n    assert hexagonal_num(10) == 41\n    assert hexagonal_num(20) == 82\n    assert hexagonal_num(24) == 83\n    assert hexagonal_num(25) == 84\n    assert hexagonal_num(30) == 91\n    assert hexagonal_num(50) == 220\n    assert hexagonal_num(100) == 766\n    print(\"All tests passed!\")\n    \ndef get_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return hexagonal_num(n) + get_sum(n-1)\n        \ndef get_sum_iter(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += hexagonal_num(i)\n        i += 1\n    return sum\n        \ndef get_sum_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return hexagonal_num(n) + get_sum_recursive(n-1)\n        \ndef get_sum_iter2(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = hexagonal_num(i)\n        i += 1\n    return sum\n    \ndef get_sum_recursive2(n):\n    if n == 1:\n        return 1\n    else:\n        return hexagonal_num(n) + get_sum_recursive2(n-1)\n        \ndef test_get_sum():\n    assert get_sum(1) == 1\n    assert get_sum(4) == 10\n    assert get_sum(6) == 18\n    assert get_sum(8) == 33\n    assert get_sum(10) == 41\n    assert get_sum(20) == 82\n    assert get_sum(24) == 83\n    assert get_sum(25) == 84\n    assert get_sum(30) == 91\n    assert get_sum(50) == 220\n    assert get_sum(100) == 766\n    print(\"All tests passed!\")\n    \ntest_hexagonal_num()\ntest_get_sum()\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n * (2 * n - 1)) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    nonzeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            nonzeroes += 1\n    return zeroes / nonzeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    return zeros/nonzeros\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # I'm using a list comprehension to remove all 0s from the list\n    # and then count how many are there\n    return [1 for i in nums if i!= 0].count(0) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    count_zeros = 0\n    count_non_zeros = 0\n    for i in nums:\n        if i == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    print(count_zeros,count_non_zeros)\n    if count_zeros!= 0:\n        return count_zeros/count_non_zeros\n    else:\n        return 0\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    nz = 0\n    for i in nums:\n        if i == 0:\n            z += 1\n        else:\n            nz += 1\n    return z/nz\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize variables.\n    zeroes = 0\n    nonzeroes = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # count zeroes and non-zeroes, and store in two arrays, z and n\n    nz = z = 0\n    for i in nums:\n        if i == 0:\n            z += 1\n        else:\n            nz += 1\n    return [z, nz]\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    m = n\n    while m > 0:\n        m = m & (m - 1)\n    if m == 0 and n == 1:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return (n == (pow(2,a) + pow(2,b) for a,b in combinations(range(32),2) if a+b == n))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    else:\n        while n!=0:\n            if n%2==1:\n                return False\n            n=n//2\n        return True\n    "
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return True\n        \n    elif n < 0:\n        return False\n    else:\n        while n!= 0:\n            if n%2 == 0:\n                n = n//2\n            else:\n                return False\n        return True\n    \ndef check_for_n_power_of_two(n,power_of_two):\n    if (n & (n-1)) == 0:\n        return power_of_two\n    else:\n        return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n > 0:\n        if (n & (n - 1) == 0): # if n is a power of 2\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n & (n - 1) == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0):\n        return False\n    if (n == 1):\n        return True\n    while (n > 1):\n        if (n % 2!= 0):\n            return False\n        else:\n            n = n / 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2!= 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while(n): \n        if ((n & 1) == 0): \n            n = n >> 1\n            continue\n        else:\n            if (n & 3) == 0: \n                n = n >> 2\n            elif (n & 4) == 0:\n                n = n >> 3\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def isPower(n): \n        if (n == 0): \n            return False\n        while (n!= 1): \n            if (n % 2!= 0): \n                return False\n            n = n // 2\n        return True\n    \n    def findPower(n): \n        if (n == 0): \n            return 1\n        if (isPower(n)): \n            return n \n        i = 1\n        while (1): \n            if (i * i > n): \n                return i - 1\n            i = i + 1\n    \n    def isSum(a, b): \n        if (a == 0): \n            return True\n        if (b == 0): \n            return False\n        while (b!= 0): \n            if ((a ^ b) & 1): \n                return False\n            a = a >> 1\n            b = b >> 1\n        return True\n    \n    ans = 0\n    if (n == 0): \n        return 0\n    if (isSum(n, findPower(n))): \n        return 1\n    while (n): \n        ans = ans + 1\n        if (isSum(findPower(ans), n)): \n            return ans \n        n = n - findPower(ans) \n    return ans\n    \nn = int(input())\nprint(is_Sum_Of_Powers_Of_Two(n))"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return (2*math.pi*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*r*math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    print(2 * pi * r)\n    return 2 * pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [y for x in test_list for y in x]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [i for sublist in test_list for i in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(itertools.chain.from_iterable(test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # remove [[ and ]] from test_list\n    delim = \"[\"\n    delim_index = test_list.find(delim)\n    if delim_index!= -1:\n        test_list = test_list[:delim_index] + test_list[delim_index+1:]\n    # iterate through the nested list to extract the numbers\n    if test_list == \"\":\n        return []\n    result_list = []\n    for sublist in test_list.split(\",\"):\n        for item in sublist.split(\" \"):\n            result_list.append(item.strip())\n    return result_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Set up return list\n    singly_list = []\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        if isinstance(i, list):\n            result.extend(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for ele in test_list:\n        if isinstance(ele,list):\n            for sub in ele:\n                result.append(sub)\n        else:\n            result.append(ele)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sublist in test_list:\n        singly_list.extend(sublist)\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # make sure it's a list, and make it unique\n    nums = list(set(nums))\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(i):\n        '''Flips i from bottom to top and returns it.'''\n        return len(nums) - i - 1\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(idx):\n        '''Flips all elements in nums before index idx in reverse order.\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #initiate variables\n    i = 0\n    iteration = 0\n    #loop through each number in the list\n    while i < len(nums)-1:\n        #if the number is less than the next number,\n        #swap them, increment the iteration, and\n        #start the loop over again\n        if nums[i] < nums[i+1]:\n            temp = nums[i]\n            nums[i] = nums[i+1]\n            nums[i+1] = temp\n            iteration = iteration+1\n            i = 0\n        else:\n            i = i+1\n    #return the total number of iterations needed\n    return iteration\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # iterate through the list and flip the first k elements, where k is the index of the last element\n    for i in range(len(nums)-1, 0, -1):\n        j = 0\n        while j < i:\n            if nums[j] > nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n                print(nums)\n            j += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(i, A):\n        '''\n        Flip the subarray A[i:] such that A[i:] is sorted.\n        '''\n        if i >= len(A) - 1:\n            return A\n        j = i\n        while j < len(A) - 1 and A[j] > A[j+1]:\n            A[j], A[j+1] = A[j+1], A[j]\n            j += 1\n        return A\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    flip = nums\n    if len(nums) > 1:\n        # find the minimum value in the list\n        minVal = min(flip)\n        # find the index of the minimum value\n        indexMin = flip.index(minVal)\n        # Reverse the order of the remaining list\n        flip.reverse()\n        # Then, reverse the order of the list until the minimum value is on the right\n        # print(\"Index of min value = \", indexMin)\n        flip = flip[:indexMin + 1] + flip[indexMin::-1]\n        # print(\"flip = \", flip)\n        # Reverse the remaining list back to the original order\n        flip.reverse()\n    return flip\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # split list into two parts\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        # find the correct index to split the list into two parts\n        for i in range(right, left, -1):\n            if nums[i] > nums[i-1]:\n                left = i\n                break\n        else:\n            # if there's no larger element in the right part, then the whole list is in the correct order\n            # return\n            return\n        # find the correct index to split the list into two parts\n        for i in range(left, right):\n            if nums[i] > nums[left]:\n                right = i\n                break\n        else:\n            # if there's no larger element in the left part, then the whole list is in the correct order\n            # return\n            return\n        # reverse the list from left to right\n        nums[left:right+1] = reversed(nums[left:right+1])\n        # reverse the list from right to left\n        nums[left+1:right+1] = reversed(nums[left+1:right+1])\n        # reverse the list from left to right\n        nums[:left+1] = reversed(nums[:left+1])\n        \n        left += 1\n        right -= 1\n        \n    # return\n    return\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def is_sorted(nums):\n        '''\n        Returns True if nums is sorted in non-decreasing order.\n        '''\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # list1=[5, 1, 2, 3, 4]\n    # list2=[5, 3, 2, 3, 6]\n    # list3=[1, 2, 3, 4, 5]\n    \n    # Write your code here\n    counter=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) and len(list1)!= len(list3):\n        print(\"Please input three equal lists.\")\n        return\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for a,b,c in zip(list1,list2,list3):\n        if a==b==c:\n            samepair+=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len([x for x in zip(list1,list2,list3) if x[0]==x[1]==x[2]])\nprint(count_samepair([1,2,3],[2,2,3],[2,2,3]))\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1 = [1,1,3,3,4]\n    list2 = [1,2,3,3,4]\n    list3 = [1,2,3,4,5]\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepairs = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    samepairs += 1\n    return samepairs\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_res=[]\n    for item1,item2,item3 in zip(list1,list2,list3):\n        list_res.append(item1) if item1==item2==item3 else list_res.append(0)\n    return list_res\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for each in Input:\n        if isinstance(each, list):\n            lists.append(each)\n    return len(lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    res = [str(i) for i in Input if type(i) == list] \n    return len(res)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in Input: \n        if isinstance(i, list): \n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = 0\n    for i in Input:\n        if isinstance(i, list):\n            result += 1\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in Input:\n        if isinstance(i, list):\n            list_count = list_count + 1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #Input = (1, 2, (4, 5), (7,), (8, 9), 10)\n    count = 0\n    for i in Input: \n        if isinstance(i, tuple): \n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = Input\n    lists= []\n    temp_lists = []\n    for i in Input:\n        if i not in temp_lists:\n            temp_lists.append(i)\n        else:\n            lists.append(temp_lists)\n            temp_lists = []\n            temp_lists.append(i)\n    lists.append(temp_lists)\n    print(lists)\n    return len(lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    Input = list(Input)\n    for i in range(len(Input)):\n        if type(Input[i]) == type(list()):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() \n    print(\"Maximum difference between any two elements in an array is\", arr[-1]-arr[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            max_diff = max(max_diff,abs(arr[i]-arr[j]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        if abs(arr[i] - arr[i+1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i+1])\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n > 1:\n        max_diff = 0\n        max_diff = max(arr) - min(arr)\n    \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr) - min(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return max(arr[i+1]-arr[i] for i in range(len(arr)-1))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0 \n    arr_len = len(arr) \n    arr_set = set(arr) \n    for i in arr_set: \n        for j in arr_set: \n            if abs(i - j) > max_diff and i!= j: \n                max_diff = abs(i - j) \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(max(arr) - min(arr), abs(min(arr) - max(arr)))"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for y in range(n):\n        if a*y + b*n == 0:\n            return (a, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #your code here\n    for x in range(n):\n        for y in range(n):\n            if x * a + y * b == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n+1):\n        for j in range(n+1):\n            if i*a + j*b == n:\n                return (i,j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    for x in range(n):\n        y = n - x\n        if a * x + b * y == n:\n            return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if (i * a + j * b == n):\n                return (i, j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    for x in range(n):\n        for y in range(n):\n            if x * a + y * b == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    result = (None, None)\n    for x in range(1, n):\n        for y in range(1, n):\n            if x + y == n and a*x + b*y == n:\n                result = (x, y)\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, n//b)\n    else:\n        return (n//a, n//b)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return (n, 0)\n    if a == 0:\n        return (0, n)\n    else:\n        x, y = 0, 0\n        while n!= 0:\n            q = n // a\n            r = n % a\n            x = x + q\n            y = y + r\n            n = a\n            a = r\n        return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if x*a % n == 1:\n            y = x*n // a\n            break\n    if (x, y) == (0, 0):\n        return None\n    return (x, y)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 == None:\n        return list1\n    else:\n        for element in list2:\n            if element in list1:\n                list1.remove(element)\n        return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    list3 = [x for x in list1 if x not in list2]\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        while item in list1:\n            list1.remove(item)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list1:\n        while x in list2:\n            list2.remove(x)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [1,2,3,4,5,6,7]\n    list2 = [3,4,5,6]\n    \n    for num in list2:\n        while num in list1:\n            list1.remove(num)\n    \n    print(list1)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        if x in list1:\n            list1.remove(x)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # base case\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        raise ValueError(\"n must be non-negative.\")\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n > 0:\n        return (n) + sum_series(n - 2)\n    elif n < 0:\n        return sum_series(n + 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n):\n        sum = 0\n        for i in range(n//2):\n            sum += n-2*i\n        return sum\n    return func(n)\n    \ndef sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n):\n        if n == 0:\n            return 0\n        else:\n            return n + func(n-2)\n    return func(n)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n        else:\n            return n + func(n-2, a, b)\n    return func(n, a, b)\n    \ndef sum_series(n, *, a = 0, b = 1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def func(n, a=0, b=1):\n        if n == 0:\n            return a\n    "
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(1,n//2 + 1):\n            sum += n - 2*i\n        return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n):\n        total += n - 2*i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # all functions in Python start with the self keyword\n    def sum_series(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        s = 0\n        for i in range(1, n):\n            s += (n - 2 * i)\n        return s\n    return sum_series(n)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n        "
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n < 2:\n        return n\n    else:\n        return n + sum_series(n-2)\n        \n    \n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * (s**2)) / (4 * tan(pi/s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = (s**2)/(4*tan(pi/l))\n    return A\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #Calculates the area of the polygon, s = length of side, l = number of sides\n    return round((s**2*tan(pi/l))/(4*tan(pi/l)),3)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if not isinstance(s, int):\n        raise TypeError('The number of sides must be an integer.')\n    elif s <= 0:\n        raise ValueError('The number of sides must be positive.')\n    elif not isinstance(l, int):\n        raise TypeError('The length of the side must be an integer.')\n    elif l <= 0:\n        raise ValueError('The length of the side must be positive.')\n    else:\n        return ((s*(l**2))/(4*tan(pi/s)))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / (2 * tan(pi / l))\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is a prime number.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    return False\n    \n    \ndef reverse(s):\n    '''\n    Write a function to reverse the string.\n    '''\n    s1 = s[::-1]\n    return s1\n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] in s2:\n            s2 = s2.replace(s1[i], '', 1)\n        else:\n            return False\n    return True\n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a function to sum up the digits of a number.\n    '''\n    if n < 0:\n        n = -n\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n //= 10\n    return s\n    \n    \ndef is_palindrome_advanced(s):\n    '''\n    Write a function to check if the string is a palindrome.\n    '''\n    for i in range(len(s) // 2):\n        if s[i]!= s[len(s) - i - 1]:\n            return False\n    return True\n    \n    \ndef sum_of_primes(l, r):\n    '''\n    Write a function to calculate the sum of all the prime numbers between 2 numbers.\n    '''\n    s = 0\n    for i in range(l, r + 1):\n        if is_prime(i):\n            s += i\n    return s\n    \n    \ndef nth_term(n, r):\n    '''\n    Write a function to calculate the nth term of a sequence.\n    '''\n    return r ** n\n    \n    \ndef is_pangram(s):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for c in alphabet:\n        if c not in s:\n            return False\n    return True\n    \n    \ndef concatenate(l):\n    '''\n    Write a function to concatenate a list of strings.\n    '''\n    s = ''\n    for i in l:\n        s += i\n    return s\n    \n    \ndef repeated(s):\n    '''\n    Write a function to find the first repeated character in a string.\n    '''\n    for i in range(len(s)):\n        if s.count(s[i]) > 1:\n            return s[i]\n    return False\n    \n    \ndef rotate_list(l, n):\n    '''\n    Write a function to rotate a list of n elements to the right.\n    '''\n    l1 = l[-n:] + l[:-n]\n    return l1\n    \n    \ndef reverse_list(l):\n    '''\n    Write a function to reverse a list of n elements.\n    '''\n    l1 = l[::-1]\n    return l1\n    \n    \ndef palindrome_permutation(s):\n    '''\n    Write a function to check if a given string is a permutation of a palindrome.\n    '''\n    s = s.replace(' ', '').lower()\n    l = list(s)\n    odd = 0\n    for i in range(len(l)):\n        if l.count(l[i]) % 2!= 0:\n            odd += 1\n    return odd <= 1\n    \n    \ndef prime_factorization(n):\n    '''\n    Write a function to find prime factors of a given number.\n    '''\n    l = []\n    for i in range(2, n):\n        if n % i == 0:\n            l.append(i)\n            n //= i\n    return l\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function to return the nth Fibonacci number.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \n    \ndef factorial(n):\n    '''\n    Write a function to return the factorial of a given number.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \n    \ndef reverse_words(s):\n    '''\n    Write a function to reverse words in a given sentence.\n    '''\n    s1 = s.split(' ')\n    l = []\n    for i in s1:\n        l.append(i[::-1])\n    s2 =''.join(l)\n    return s2\n    \n    \ndef digital_root(n):\n    '''\n    Write a function to calculate the digital root of a number.\n    '''\n    s = str(n)\n    while len(s)!= 1:\n        s = str(sum_of_digits(int(s)))\n    return s\n    \n    \ndef armstrong_number(n):\n    '''\n    Write a function to check if a given number is an Armstrong number.\n    '''\n    s = str(n)\n    l = list(s)\n    s1 = 0\n    for i in l:\n        s1 += int(i) ** len(l)\n    return s1 == n\n    \n    \ndef is_pangram_sorted(s):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    l = list(s.lower())\n    l.sort()\n    for i in range(len(l)):\n        if l[i]!= chr(i + 97):\n            return False\n    return True\n    \n    \ndef largest_product(l):\n    '''\n    Write a function to calculate the largest product of n adjacent numbers in a given list.\n    '''\n    l1 = []\n    for i in range(len(l) - 1):\n        if l[i] * l[i + 1] not in l1:\n            l1.append(l[i] * l[i + 1])\n    return max(l1)\n    \n    \ndef factorial_digit_sum(n):\n    '''\n    Write a function to calculate the sum of factorials of the digits of a number.\n    '''\n    s = str(n)\n    s1 = ''\n    for i in s:\n        s1 += str(factorial(int(i)))\n    return sum_of_digits(int(s1))\n    \n    \ndef is_pangram_sorted_set(s):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    s1 = set()\n    for i in range(26):\n        s1.add(chr(i + 97))\n    l = list(s.lower())\n    l.sort()\n    for i in l:\n        if i not in s1:\n            return False\n    return True\n    \n    \ndef is_pangram_sorted_list(s):\n    '''\n    Write a function to check if a string is a pangram"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / (2 * tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    side = l / s\n    area = s * (side ** 2) / (4 * tan(pi / s))\n    return area\ndef perimeter_polygon(s):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given its side length.\n    '''\n    perimeter = s * s * pi\n    return perimeter\ndef area_polygon_v2(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    This version is better than version 1 because it uses the math module to compute the tan() function.\n    '''\n    side = l / s\n    area = s * (side ** 2) / (4 * tan(pi / s))\n    return area\ndef perimeter_polygon_v2(s):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given its side length.\n    This version is better than version 1 because it uses the math module to compute the pi constant.\n    '''\n    perimeter = s * l * pi\n    return perimeter\ndef area_polygon_v3(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    This version is better than version 1 and 2 because it uses the math module to compute the tan() function.\n    '''\n    side = l / s\n    area = s * (side ** 2) / (4 * tan(pi / s))\n    return area\ndef perimeter_polygon_v3(s):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given its side length.\n    This version is better than version 1 and 2 because it uses the math module to compute the pi constant.\n    '''\n    perimeter = s * l * pi\n    return perimeter\ndef print_polygon(s, l):\n    '''\n    Write a function to print a regular polygon of the given length and number of sides.\n    '''\n    print('The perimeter of the polygon is: ', perimeter_polygon_v3(s))\n    print('The area of the polygon is: ', area_polygon_v3(s, l))\ndef print_polygon_v2(s, l):\n    '''\n    Write a function to print a regular polygon of the given length and number of sides.\n    This version is better than the version 1 because it uses the print() function instead of the print function.\n    '''\n    print('The perimeter of the polygon is: ', perimeter_polygon_v3(s))\n    print('The area of the polygon is: ', area_polygon_v3(s, l))\ndef print_polygon_v3(s, l):\n    '''\n    Write a function to print a regular polygon of the given length and number of sides.\n    This version is better than the version 1 and 2 because it uses the print() function instead of the print function.\n    '''\n    print('The perimeter of the polygon is: ', perimeter_polygon_v3(s))\n    print('The area of the polygon is: ', area_polygon_v3(s, l))\ndef print_polygon_v4(s, l):\n    '''\n    Write a function to print a regular polygon of the given length and number of sides.\n    This version is better than the version 1, 2 and 3 because it uses the print() function instead of the print function.\n    This version is not very readable, however the result is the same.\n    '''\n    side = l / s\n    area = s * (side ** 2) / (4 * tan(pi / s))\n    print('The perimeter of the polygon is: ', l)\n    print('The area of the polygon is: ', area)\ndef print_polygon_v5(s, l):\n    '''\n    Write a function to print a regular polygon of the given length and number of sides.\n    This version is better than the version 1, 2 and 3 because it uses the print() function instead of the print function.\n    This version is also better than version 4 because it is more efficient and readable.\n    '''\n    side = l / s\n    area = s * (side ** 2) / (4 * tan(pi / s))\n    print('The perimeter of the polygon is: ', l)\n    print('The area of the polygon is: ', area)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l ** 2) / (4 * tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = l\n    if l <= 0:\n        return -1\n    if l < 3:\n        return 0\n    if l == 3:\n        return (s**2) / (4 * tan(pi/n))\n    return ((n-2) * s**2) / (4 * tan(pi/n))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(s*l/2*tan(pi/s))\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum1 += i\n        j = n//i\n        if j % i == 0:\n            sum2 += j\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s1=0\n    s2=0\n    for i in range(1,n+1):\n        if n%i==0:\n            s1=s1+i\n    for j in range(1,n+1):\n        if n%j==0:\n            s2=s2+j\n    if s1==s2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d1=0\n    d2=0\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n            if n%(i+1)==0: \n                d2+=i+1\n    return d1==d2 \ndef two_prime_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d1=0\n    d2=0\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n            if n%(i+1)==0: \n                d2+=i+1\n    return d1+d2==n\ndef sum_of_divisors(n): \n    '''\n    Write a function to determine if the sum of the divisors of a number is the number.\n    '''\n    d1=0\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n    return d1==n \ndef sum_of_primes(n): \n    '''\n    Write a function to determine if the sum of the divisors of a number is the number.\n    '''\n    d1=0\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n    return d1>n \ndef perfect_number(n): \n    '''\n    Write a function to determine if a number is perfect. A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself.\n    '''\n    d1=0\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n    return d1==n \ndef num_of_divisors(n): \n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    d1=0\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n    return d1 \ndef prime_divisors(n): \n    '''\n    Write a function to determine the number of prime divisors of a number.\n    '''\n    d1=0\n    for i in range(1, n): \n        if n%i==0: \n            if i==n**0.5: \n                d1+=1\n            if n%(i+1)==0: \n                d1+=1\n    return d1 \ndef num_of_divisors_till_n(n): \n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    d1=0\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n    return d1 \ndef divisors_till_n(n): \n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    d1=1\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n    return d1 \ndef prime_number(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    return divisors_till_n(n)==n \ndef prime_factors(n): \n    '''\n    Write a function to determine prime factors of a number.\n    '''\n    d1=[]\n    for i in range(1, n): \n        if n%i==0: \n            if i==n**0.5: \n                d1.append(i)\n            if n%(i+1)==0: \n                d1.append(i+1)\n    return d1 \ndef number_of_prime_factors(n): \n    '''\n    Write a function to determine the number of prime factors of a number.\n    '''\n    d1=0\n    for i in range(1, n): \n        if n%i==0: \n            if i==n**0.5: \n                d1+=1\n            if n%(i+1)==0: \n                d1+=1\n    return d1 \ndef divisors(n): \n    '''\n    Write a function to determine the divisors of a number.\n    '''\n    d1=[]\n    for i in range(1, n): \n        if n%i==0: \n            d1.append(i)\n    return d1 \ndef factorial(n): \n    '''\n    Write a function to determine the factorial of a number.\n    '''\n    d1=1\n    for i in range(1, n): \n        d1*=i \n    return d1 \ndef sum_of_factorials(n): \n    '''\n    Write a function to determine the sum of the factorials of a number.\n    '''\n    d1=0\n    for i in range(1, n): \n        d1+=factorial(i) \n    return d1 \ndef sum_of_divisors_till_n(n): \n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    d1=0\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n    return d1 \ndef num_of_divisors_till_n(n): \n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    d1=0\n    for i in range(1, n): \n        if n%i==0: \n            d1+=i \n    return d1 \ndef divisors_till_n(n): \n    '''\n    Write a function to determine the divisors of a number.\n    '''\n    d1=[]\n    for i in range(1, n): \n        if n%i==0: \n            d1.append(i)\n    return d1 \ndef divisors_till_n_prime(n): \n    '''\n    Write a function to determine the prime divisors of a number.\n    '''\n    d1=[]\n    for i in range(1, n): \n        if n%i==0: \n            if i==n**0.5: \n                d1.append(i)\n            if n%(i+1)==0: \n                d1.append(i+1)\n    return d1 \ndef nth_prime(n): \n    '''\n    Write a function to determine the nth prime.\n    '''\n    d1=0\n    d2=0\n    for i in range(1, n): \n        d1+=1\n        if prime_number(d1): \n            d2+=1\n            if d2==n: \n                return d1 \ndef primorial(n): \n    '''\n    Write a function to determine the primorial of a number.\n    '''\n    d1=1\n    for i in range(1, n): \n        d1*=i \n    return d1 \ndef nth_primorial(n): \n    '''\n    Write a function to determine the nth primorial.\n    '''\n    d1=1\n    for i in range(1, n): \n        d1*=i \n    return d1 \ndef palindrome(n): \n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    d1=n\n    d2=0\n    while d1!=0: \n        d2=d2*10+d1%10\n        d1=d1//10\n    return d2==n \ndef palindrome_product(n): \n    '''\n    Write a function to determine the palindrome product of two numbers.\n    '''\n    d1=n\n    d2="
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1,int(math.sqrt(n))+1): \n        if n % i == 0: \n            sum_of_divisors += i \n            if n//i!= i: \n                sum_of_divisors += n//i \n    return sum_of_divisors\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_div(n): \n        num_div = [i for i in range(1, n+1) if n % i == 0]\n        return sum(num_div)\n    \n    if sum_div(n) == sum_div(n+1): \n        return True\n    else: \n        return False\n        \n        \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    def prime_check(n): \n        if n == 1: \n            return False\n        elif n == 2: \n            return True\n        else: \n            for i in range(2, n): \n                if n % i == 0: \n                    return False\n        return True\n    \n    if prime_check(n):\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n): \n        if n%i == 0: \n            if n/i == i: \n                return True\n            elif n/i!= i: \n                return False\n                break\ndef next_prime(n): \n    '''\n    Write a function to return the next prime number.\n    '''\n    if n <= 1: \n        return 2\n    prime_number = [2]\n    for i in range(3, n+1): \n        for j in prime_number: \n            if i%j == 0: \n                break\n        else: \n            prime_number.append(i)\n    return prime_number[-1]\ndef nth_prime(n): \n    '''\n    Write a function to return the nth prime number.\n    '''\n    prime_number = [2]\n    prime = 0\n    for i in range(3, n+1): \n        for j in prime_number: \n            if i%j == 0: \n                break\n        else: \n            prime_number.append(i)\n    return prime_number[-1]\ndef coin_combos(n): \n    '''\n    Write a function to return the number of ways to form n by \n    using the coins 1, 2, 3, 4, and 5.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 7\n    elif n == 5: \n        return 13\n    elif n == 6: \n        return 24\n    elif n == 7: \n        return 44\n    elif n == 8: \n        return 81\n    elif n == 9: \n        return 149\n    elif n == 10: \n        return 274\n    elif n == 11: \n        return 629\n    elif n == 12: \n        return 1764\n    elif n == 13: \n        return 4371\n    elif n == 14: \n        return 9689\n    elif n == 15: \n        return 26406\n    elif n == 16: \n        return 54913\n    elif n == 17: \n        return 154349\n    elif n == 18: \n        return 3524578\n    elif n == 19: \n        return 5702887\n    elif n == 20: \n        return 9227465\ndef cont_frac(n): \n    '''\n    Write a function to return the nth continued fraction.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 5\n    elif n == 5: \n        return 9\n    elif n == 6: \n        return 1\n    elif n == 7: \n        return 2\n    elif n == 8: \n        return 3\n    elif n == 9: \n        return 4\n    elif n == 10: \n        return 5\n    elif n == 11: \n        return 6\n    elif n == 12: \n        return 7\n    elif n == 13: \n        return 2\n    elif n == 14: \n        return 3\n    elif n == 15: \n        return 4\n    elif n == 16: \n        return 5\n    elif n == 17: \n        return 6\n    elif n == 18: \n        return 7\n    elif n == 19: \n        return 8\n    elif n == 20: \n        return 9\n    elif n == 21: \n        return 11\n    elif n == 22: \n        return 2\n    elif n == 23: \n        return 4\n    elif n == 24: \n        return 5\n    elif n == 25: \n        return 6\n    elif n == 26: \n        return 7\n    elif n == 27: \n        return 8\n    elif n == 28: \n        return 9\n    elif n == 29: \n        return 11\n    elif n == 30: \n        return 2\n    elif n == 31: \n        return 4\n    elif n == 32: \n        return 5\n    elif n == 33: \n        return 6\n    elif n == 34: \n        return 7\n    elif n == 35: \n        return 8\n    elif n == 36: \n        return 9\n    elif n == 37: \n        return 11\n    elif n == 38: \n        return 3\n    elif n == 39: \n        return 5\n    elif n == 40: \n        return 6\n    elif n == 41: \n        return 7\n    elif n == 42: \n        return 8\n    elif n == 43: \n        return 9\n    elif n == 44: \n        return 11\n    elif n == 45: \n        return 4\n    elif n == 46: \n        return 5\n    elif n == 47: \n        return 6\n    elif n == 48: \n        return 7\n    elif n == 49: \n        return 8\n    elif n == 50: \n        return 9\n    elif n == 51: \n        return 11\n    elif n == 52: \n        return 5\n    elif n == 53: \n        return 6\n    elif n == 54: \n        return 7\n    elif n == 55: \n        return 8\n    elif n == 56: \n        return 9\n    elif n == 57: \n        return 11\n    elif n == 58: \n        return 6\n    elif n == 59: \n        return 7\n    elif n == 60: \n        return 8\n    elif n == 61: \n        return 9\n    elif n == 62: \n        return 11\n    elif n == 63: \n        return 7\n    elif n == 64: \n        return 8\n    elif n == 65: \n        return 9\n    elif n == 66: \n        return 11\n    elif n == 67: \n        return 8\n    elif n == 68: \n        return 9\n    elif n == 69: \n        return 11\n    elif n == 70: \n        return 8\n    elif n == 71: \n        return 9\n    elif n == 72: \n        return 11\n    elif n == 73: \n        return 9\n    elif n == 74: \n        return 11\n    elif n == 75: \n        return 11\n    elif n == 76: \n        return 5\n    elif n == 77: \n        return 6\n    elif n == 78: \n        return 7\n    elif n == 79: \n        return 8\n    elif n == 80: \n        return 9\n    elif n == 81: \n        return 11\n    elif n == 82: \n        return 6\n    elif n == 83: \n        return 7\n    elif n == 84: \n        return 8\n    elif n == 85: \n        return 9\n    elif n == 86: \n        return 11\n    elif n == 87: \n        return 7\n    elif n == 88: \n        return 8\n    elif n == 89: \n        return 9\n    elif n == 90: \n        return 11\n    elif n == 91: \n        return 8\n    elif n == 92: \n        return 9\n    elif n == 93: \n        return 11\n    elif n == 94: \n        return 9\n    elif n == 95: \n        return 11\n    elif n == 96: \n        return 11\n    elif n == 97: \n        return 6\n    elif n == 98: \n        return 7\n    elif n == 99: \n        return 8\n    elif n == 100: \n        return 9\n    elif n == 101: \n        return 11\n    elif n == 102: \n        return 7\n    elif n == 103: \n        return 8\n    elif n == 104: \n        return 9\n    elif n == 105: \n        return 11\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Dictionary to store sum of divisors of each number.\n    sum_of_divisors = dict()\n    #Counter to store number of numbers with same sum of divisors.\n    counter = 0\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            sum1 += i\n    sum2 = 0\n    for j in range(1, n+1):\n        if sum1 == (n * 2) - sum2: \n            return True\n        elif j == n: \n            sum2 += n\n    return False\ndef div_sum_list(n):\n    '''\n    Write a function to return a list of the divisors of an integer. \n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    return div_list\ndef factorial(n):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef fib(n): \n    '''\n    Write a function to return the nth Fibonacci number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fib(n-1) + fib(n-2)\ndef fizz_buzz(n):\n    '''\n    Write a function that takes in a number n and returns a list of the first n numbers,\n    one at each index.\n    For each number, if it is divisible by 3, insert \"fizz\" in the index position.\n    For each number, if it is divisible by 5, insert \"buzz\" in the index position.\n    For each number, if it is divisible by 3 and 5, insert \"fizzbuzz\" in the index position.\n    For example, fizz_buzz(3) should return: [1, 2, fizz]\n    '''\n    list = []\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            list.append(\"fizzbuzz\")\n        elif i % 3 == 0: \n            list.append(\"fizz\")\n        elif i % 5 == 0: \n            list.append(\"buzz\")\n        else: \n            list.append(i)\n    return list\ndef prime_list(n):\n    '''\n    Write a function to return a list of the first n prime numbers.\n    '''\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        isPrime = True\n        for i in range(3, int(math.sqrt(num) + 1), 2):\n            if num % i == 0:\n                isPrime = False\n                break\n        if isPrime == True:\n            primes.append(num)\n        num += 2\n    return primes\ndef count_list(n, k):\n    '''\n    Write a function that takes in a number n and an array of integers and returns the number\n    of times that the sum of the elements in the array is equal to n.\n    '''\n    if len(k) == 1:\n        if n == k[0]:\n            return 1\n        else:\n            return 0\n    else:\n        count = 0\n        for i in range(len(k)):\n            # if k[i] == 0:\n            #     k[i] = 1\n            count += count_list(n - k[i], k[:i] + k[i+1:])\n        return count\ndef pig_it(text):\n    '''\n    Write a function that takes in a string and returns a string in which each word is replaced by\n    its \"pig latin\" equivalent. For example, \"This is fun\" becomes \"histay isway funtay\".\n    '''\n    words = text.split(\" \")\n    pig_words = []\n    for i in range(len(words)):\n        if len(words[i]) == 1:\n            pig_words.append(words[i])\n        else:\n            first_char = words[i][0]\n            pig_char = first_char + \"ay\"\n            pig_words.append(pig_char[1:] + words[i][1:])\n    return \" \".join(pig_words)\ndef flatten(a_list):\n    '''\n    Write a function to flatten a list of lists.\n    '''\n    if len(a_list) == 0:\n        return []\n    else:\n        flatten_list = []\n        for i in a_list:\n            if type(i) == list:\n                flatten_list.extend(flatten(i))\n            else:\n                flatten_list.append(i)\n        return flatten_list\ndef palindrome(n):\n    '''\n    Write a function that takes in a number n and returns whether or not it is a palindrome.\n    '''\n    if n == n[::-1]:\n        return True\n    else:\n        return False\ndef sum_list(n):\n    '''\n    Write a function that takes in a number n and returns a list of all the numbers between 1 and n,\n    inclusive. For example, sum_list(5) should return [1, 2, 3, 4, 5]\n    '''\n    list = []\n    for i in range(1, n+1):\n        list.append(i)\n    return list\ndef sum_rec(n):\n    '''\n    Write a function that takes in a number n and returns the sum of all the numbers between 1 and n,\n    inclusive. For example, sum_rec(5) should return 15 (1+2+3+4+5)\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_rec(n-1)\ndef is_prime(n):\n    '''\n    Write a function that takes in a number n and returns whether or not it is prime.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_rec(n, i=2):\n    '''\n    Write a function that takes in a number n and returns whether or not it is prime.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    else:\n        if n % i == 0:\n            return False\n        else:\n            return is_prime_rec(n, i + 1)\ndef is_palindrome(n):\n    '''\n    Write a function that takes in a number n and returns whether or not it is a palindrome.\n    '''\n    if n == n[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_rec(n, i=0):\n    '''\n    Write a function that takes in a number n and returns whether or not it is a palindrome.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    else:\n        if n % 10 == n[i]:\n            return is_palindrome_rec(n//10, i + 1)\n        else:\n            return False\ndef fib_list(n):\n    '''\n    Write a function that takes in a number n and returns a list of the first n numbers in the Fibonacci sequence.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    else:\n        return [0, 1] + fib_list(n - 1)\ndef fib_list_rec(n):\n    '''\n    Write a function that takes in a number n and returns a list of the first n numbers in the Fibonacci sequence.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    else:\n        return [0, 1] + fib_list_rec(n - 1)\ndef fact_list(n):\n    '''\n    Write a function that takes in a number n and returns a list of the first n factorials.\n    '''\n    if n == "
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum1 = sum1 + i\n            if n%i!= 0:\n                sum2 = sum2 + i\n            if n%i!= 0:\n                sum3 = sum3 + i\n    if sum1 == sum2 == sum3:\n        return True\n    else:\n        return False\n        \ndef fact_sum(n):\n    '''\n    Write a function that finds the sum of the factorials of the digits of a number.\n    '''\n    sum1 = 0\n    n1 = 0\n    n2 = 0\n    for i in str(n):\n        n1 = int(i)\n        n2 = n1*math.factorial(n1)\n        sum1 = sum1 + n2\n    return sum1\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum=0\n    for i in range(1,n):\n        if n%i==0:\n            div_sum+=i\n    return div_sum\ndef num_of_pairs(n):\n    '''\n    Find the number of pairs of positive integers, (a,b), such that (a,a) and (b,b) are distinct,\n    a<b, and a+b=n.\n    '''\n    count=0\n    for i in range(1,n):\n        if div_sum(i)<=n:\n            if div_sum(n-i)!=n:\n                count+=1\n    return count\ndef interleave_char(str1,str2):\n    '''\n    Write a function that interleaves two strings, alternating between the characters of each string.\n    '''\n    str_list=[]\n    for i in range(len(str1)):\n        str_list.append(str1[i])\n        str_list.append(str2[i])\n    return str_list\ndef max_len(str_list):\n    '''\n    Write a function that returns the maximum length of consecutive characters in a list.\n    '''\n    max_len=0\n    for i in range(len(str_list)):\n        if len(str_list[i])>max_len:\n            max_len=len(str_list[i])\n    return max_len\ndef get_num_col(length):\n    '''\n    Write a function that returns the number of columns for a string, with a space between each character.\n    '''\n    return math.ceil(math.sqrt(length))\ndef print_col(length,str_list):\n    '''\n    Write a function that prints out the rows for a given string with a space between each character.\n    '''\n    col=get_num_col(len(str_list))\n    for i in range(len(str_list)):\n        print(str_list[i],end=' ')\n        if (i+1)%col==0:\n            print()\ndef merge_sort(list):\n    '''\n    Write a function that takes a list and sorts the list using the merge sort algorithm.\n    '''\n    if len(list)>1:\n        mid=len(list)//2\n        list_left=list[:mid]\n        list_right=list[mid:]\n        merge_sort(list_left)\n        merge_sort(list_right)\n        i=0\n        j=0\n        k=0\n        while i<len(list_left) and j<len(list_right):\n            if list_left[i]<list_right[j]:\n                list[k]=list_left[i]\n                i+=1\n            else:\n                list[k]=list_right[j]\n                j+=1\n            k+=1\n        while i<len(list_left):\n            list[k]=list_left[i]\n            i+=1\n            k+=1\n        while j<len(list_right):\n            list[k]=list_right[j]\n            j+=1\n            k+=1\ndef list_to_str(list):\n    '''\n    Write a function that converts a list into a string.\n    '''\n    return ''.join(list)\ndef is_sorted(str_list):\n    '''\n    Write a function that returns True if a string is a sorted string, and False otherwise.\n    '''\n    str_list=list(str_list)\n    str_list.sort()\n    sorted_str=''.join(str_list)\n    if str_list==sorted_str:\n        return True\n    return False\ndef is_palindrome(str_list):\n    '''\n    Write a function that returns True if a string is a palindrome, and False otherwise.\n    '''\n    str_list=list(str_list)\n    str_list.sort()\n    sorted_str=''.join(str_list)\n    if str_list==sorted_str:\n        return True\n    return False\ndef is_permutation(str_list,str_list2):\n    '''\n    Write a function that returns True if a string is a permutation of another string, and False otherwise.\n    '''\n    if len(str_list)==len(str_list2):\n        for i in range(len(str_list)):\n            if str_list.count(str_list[i])!=str_list2.count(str_list2[i]):\n                return False\n    return True\ndef is_anagram(str_list,str_list2):\n    '''\n    Write a function that returns True if a string is an anagram of another string, and False otherwise.\n    '''\n    if len(str_list)==len(str_list2):\n        str_list=list(str_list)\n        str_list.sort()\n        str_list2=list(str_list2)\n        str_list2.sort()\n        if str_list==str_list2:\n            return True\n    return False\ndef check_anagram_permutation(str_list,str_list2):\n    '''\n    Write a function that returns True if a string is an anagram or a permutation, and False otherwise.\n    '''\n    if is_anagram(str_list,str_list2)==True:\n        return True\n    elif is_permutation(str_list,str_list2)==True:\n        return True\n    return False\ndef anagram_solution(str_list,str_list2):\n    '''\n    Write a function that returns the first index of the anagram solution, or None if there is no solution.\n    '''\n    if check_anagram_permutation(str_list,str_list2)==True:\n        for i in range(len(str_list)):\n            str_list2=list(str_list2)\n            str_list2.sort()\n            for j in range(len(str_list)):\n                if str_list[i]==str_list2[j]:\n                    return i\n    return None\ndef rotate_string(str_list,n):\n    '''\n    Write a function that rotates a string by n characters.\n    '''\n    return str_list[n:]+str_list[:n]\ndef find_string_index(str_list,str_list2):\n    '''\n    Write a function that returns the index of the second occurrence of a substring in another string, or None if there is no such string.\n    '''\n    str_list=list(str_list)\n    str_list2=list(str_list2)\n    if len(str_list2)<=len(str_list):\n        for i in range(len(str_list)):\n            for j in range(len(str_list)):\n                if str_list[i:i+len(str_list2)]==str_list2:\n                    return i\n    return None\ndef find_first_index(str_list,str_list2):\n    '''\n    Write a function that returns the first index of a substring in another string, or None if there is no such string.\n    '''\n    str_list=list(str_list)\n    str_list2=list(str_list2)\n    if len(str_list2)<=len(str_list):\n        for i in range(len(str_list)):\n            if str_list[i:i+len(str_list2)]==str_list2:\n                return i\n    return None\ndef remove_string_index(str_list,str_list2):\n    '''\n    Write a function that removes the first occurrence of a substring in another string, or None if there is no such string.\n    '''\n    str_list=list(str_list)\n    str_list2=list(str_list2)\n    if len(str_list2)<=len(str_list):\n        for i in range(len(str_list)):\n            if str_list[i:i+len(str_list2)]==str_list2:\n                return str_list[:i]+str_list[i+len(str_list2):]\n    return None\ndef remove_string_all(str_lis"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    chars_pos = dict()\n    for ch in str1:\n        if ord(ch) < ord('a') or ord(ch) > ord('z'):\n            continue\n        if ch in chars_pos:\n            chars_pos[ch] = chars_pos[ch] + 1\n        else:\n            chars_pos[ch] = 1\n    return chars_pos\n    \ndef count_char_position2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    chars_pos = dict()\n    for ch in str1.lower():\n        if ch in chars_pos:\n            chars_pos[ch] = chars_pos[ch] + 1\n        else:\n            chars_pos[ch] = 1\n    return chars_pos\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1.lower():\n        if str1.lower().index(i) == ord(i)-ord('a') and str1.lower().index(i) <= (len(str1)-1):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letter_dict = {}\n    str1 = str1.lower()\n    for i in str1:\n        if i in letter_dict:\n            letter_dict[i] += 1\n        else:\n            letter_dict[i] = 1\n    print(letter_dict)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == \"a\" or str1[i].lower() == \"e\" or str1[i].lower() == \"i\" or str1[i].lower() == \"o\" or str1[i].lower() == \"u\":\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a')+i):\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(alphabet)):\n            if str1[i].lower() == alphabet[j]:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([i for i in range(len(str1)) if str1[i].lower() == str1[i].lower()])\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(set([char.lower() for char in str1 if char.lower() in string.ascii_lowercase]))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if (i == 'a' or i == 'b' or i == 'c' or i == 'd' or i == 'e' or i == 'f' or i == 'g' or i == 'h' or i == 'i' or i == 'j' or i == 'k' or i == 'l' or i =='m' or i == 'n' or i == 'o' or i == 'p' or i == 'q' or i == 'r' or i =='s' or i == 't' or i == 'u' or i == 'v' or i == 'w' or i == 'x' or i == 'y' or i == 'z'):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in range(len(str1)):\n        if ord(str1[i])>=65 and ord(str1[i])<=90:\n            count+=1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in range(0,len(A)):\n        for j in range(0,len(A)):\n            if i!=j:\n                if (A[i]^A[j])%2==0:\n                    count+=1\n                    #print(i,j,(A[i]^A[j]),'count is ',count)\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # iterate over each element\n    # xor it with the next element\n    # check if xor is even\n    # if yes, increment count\n    # return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_even = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if (A[i] ^ A[j] % 2) == 0:\n                    xor_even += 1\n    return xor_even \n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    \n    for i in range(0, len(A)):\n        for j in range(i + 1, len(A)):\n            if ((A[i] ^ A[j]) & 1) == 0:\n                even_pairs += 1\n    \n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in range(len(A)): \n        for j in range(i + 1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                pair_count += 1\n    return pair_count \n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def xor_even(x):\n        return x % 2 == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for x in A:\n        for y in A:\n            if x ^ y == 2:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    ans = 0\n    for i in range(len(A)): \n        for j in range(i + 1, len(A)): \n            if A[i] ^ A[j] % 2 == 0: \n                ans += 1\n    return ans\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # For each number in the list, if it is an even number, it xors to an even number.\n    even_pairs = 0\n    for number in A:\n        if is_even(number ^ 2):\n            even_pairs += 1\n    \n    return even_pairs\n    \ndef is_even(x):\n    '''\n    Write a function that returns True if x is even, and False otherwise.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # range of integers given\n    # A = [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** int(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2 ** int(n).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (len(bin(n)) - len(bin(n).rstrip('0')))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**(n-1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Return 2^n\n    return 1 << n.bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n==0 else (2**ceil(log(n,2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return 2**(int(n) - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Return 1 if n is greater than or equal to 2. \n    if n >= 2: \n        return (n & -n).bit_length() \n    # Return 1 if n is greater than or equal to 0. \n    elif n >= 0: \n        return 0\n    # Otherwise, return the bitwise opposite of n. \n    else: \n        return (1 << 31) + n + 1\n        \ndef fibonacci(n):\n    '''\n    Write a python function that takes a number n as an input and returns the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return 1 << (n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a.count(x) >= 1:\n        return a.count(x)\n    else:\n        return None\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if (a[i] == x): \n            count += 1\n    return count \na = [1, 4, 2, 6, 3, 3, 1] \nprint(frequency(a, 3)) \n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)): \n        if a[i] == x: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for y in a: \n        if y == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Creating an empty dictionary \n    mydict = {} \n    for i in range(0, len(a)): \n        if a[i] in mydict: \n            mydict[a[i]] += 1\n        else: \n            mydict[a[i]] = 1\n          \n    # Driver code \n    for i in mydict: \n        if i == x: \n            print(mydict[i], end = \" \") \n    \n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for element in a:\n        if x == element:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check if the range is valid \n    if m > n:\n        raise ValueError(\"Invalid range: start point cannot be greater than end point\")\n    # print the original list\n    print(\"The original list is: \" + str(list1))\n    # print the range\n    print(\"The range is: \" + str(m) + \" and \" + str(n))\n    # print the sum of elements within the range\n    print(\"The sum of the elements within the range are: \" + str(sum(list1[m-1:n])))\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    summ=0\n    for i in list1[m:n]:\n        summ = summ + i\n    return summ\n    \n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_total = 0\n    for x in list1[m:n]:\n        sum_total += x\n    return sum_total\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        return None\n    sum_of_list = 0\n    for i in range(m, n+1):\n        sum_of_list += list1[i]\n    return sum_of_list\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        print('Range not valid.')\n    else:\n        sum = 0\n        for num in list1[m:n+1]:\n            sum += num\n    return sum\n    \ndef sum_range_list_for(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        print('Range not valid.')\n    else:\n        sum = 0\n        for num in range(m,n+1):\n            sum += list1[num]\n    return sum\n    \ndef sum_range_list_while(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        print('Range not valid.')\n    else:\n        sum = 0\n        index = m\n        while index <= n:\n            sum += list1[index]\n            index += 1\n    return sum\n    \ndef sum_range_list_plus_plus(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        print('Range not valid.')\n    else:\n        sum = 0\n        for num in list1[m:n+1:1]:\n            sum += num\n    return sum\n    \ndef sum_range_list_plus_plus_for(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        print('Range not valid.')\n    else:\n        sum = 0\n        for num in range(m,n+1,1):\n            sum += list1[num]\n    return sum\n    \ndef sum_range_list_plus_plus_while(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        print('Range not valid.')\n    else:\n        sum = 0\n        index = m\n        while index <= n:\n            sum += list1[index]\n            index += 1\n    return sum\n    \ndef get_mean_for(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the mean value of a list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum / len(list1)\n    \ndef get_mean_while(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the mean value of a list.\n    '''\n    sum = 0\n    index = 0\n    while index < len(list1):\n        sum += list1[index]\n        index += 1\n    return sum / len(list1)\n    \ndef get_mean_plus_plus_for(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the mean value of a list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum / len(list1)\n    \ndef get_mean_plus_plus_while(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the mean value of a list.\n    '''\n    sum = 0\n    index = 0\n    while index < len(list1):\n        sum += list1[index]\n        index += 1\n    return sum / len(list1)\n    \ndef get_median_for(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the median value of a list.\n    '''\n    n = len(list1)\n    list1.sort()\n    if n % 2 == 0:\n        return (list1[int(n/2)] + list1[int(n/2-1)])/2\n    else:\n        return list1[int(n/2)]\n    \ndef get_median_while(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the median value of a list.\n    '''\n    n = len(list1)\n    list1.sort()\n    if n % 2 == 0:\n        return (list1[int(n/2)] + list1[int(n/2-1)])/2\n    else:\n        return list1[int(n/2)]\n    \ndef get_median_plus_plus_for(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the median value of a list.\n    '''\n    n = len(list1)\n    list1.sort()\n    return (list1[int(n/2)] + list1[int(n/2-1)])/2\n    \ndef get_median_plus_plus_while(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the median value of a list.\n    '''\n    n = len(list1)\n    list1.sort()\n    return (list1[int(n/2)] + list1[int(n/2-1)])/2\n    \ndef get_mode_for(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the mode value of a list.\n    '''\n    mode = 1\n    max_frequency = 0\n    for num in list1:\n        frequency = list1.count(num)\n        if frequency > max_frequency:\n            mode = num\n            max_frequency = frequency\n    return mode\n    \ndef get_mode_while(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the mode value of a list.\n    '''\n    mode = 1\n    max_frequency = 0\n    index = 0\n    while index < len(list1):\n        frequency = list1.count(list1[index])\n        if frequency > max_frequency:\n            mode = list1[index]\n            max_frequency = frequency\n        index += 1\n    return mode\n    \ndef get_mode_plus_plus_for(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the mode value of a list.\n    '''\n    mode = 1\n    max_frequency = 0\n    for num in list1:\n        frequency = list1.count(num)\n        if frequency > max_frequency:\n            mode = num\n            max_frequency = frequency\n    return mode\n    \ndef get_mode_plus_plus_while(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the mode value of a list.\n    '''\n    mode = 1\n    max_frequency = 0\n    index = 0\n    while index < len(list1):\n        frequency = list1.count(list1[index])\n        if frequency > max_frequency:\n            mode = list1[index]\n            max_frequency = frequency\n        index += 1\n    return mode\n    \ndef get_range_for(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the range of a list.\n    '''\n    max_num = list1[0]\n    min_num = list1[0]\n    for num in list1:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num - min_num\n    \ndef get_range_while(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the range of a list.\n    '''\n    max_num = list1[0]\n    min_num = list1[0]\n    index = 0\n    while index < len(list1):\n        if list1[index] > max_num:\n            max_num = list1[index]\n        if list1[index] < min_num:\n            min_num = list1[index]\n        index += 1\n    return max_num "
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    if m > n:\n        temp = n\n        n = m\n        m = temp\n    if m == n:\n        return 0\n    if m == 0:\n        return list1[n-1]\n    return list1[n-1] + sum_range_list(list1, m-1, n-1)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    counter = 0\n    for num in list1:\n        if m <= counter <= n:\n            sum_of_list = sum_of_list + list1[counter]\n        counter = counter + 1\n    return sum_of_list\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\ndef area_pentagon(b):\n    '''\n    Write a function to find the area of a regular pentagon from its length of sides.\n    '''\n    return math.sqrt((5 * (b**2)) / (4 * math.tan(math.pi / 5)))\ndef perimeter_hexagon(c):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return c * 6\ndef area_hexagon(d):\n    '''\n    Write a function to find the area of a regular hexagon from its length of sides.\n    '''\n    return math.sqrt((3 * (d**2)) / (math.tan(math.pi / 6)))\ndef perimeter_heptagon(e):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return e * 7\ndef area_heptagon(f):\n    '''\n    Write a function to find the area of a regular heptagon from its length of sides.\n    '''\n    return math.sqrt((5 * (f**2)) / (math.tan(math.pi / 7)))\ndef perimeter_octagon(g):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return g * 8\ndef area_octagon(h):\n    '''\n    Write a function to find the area of a regular octagon from its length of sides.\n    '''\n    return math.sqrt((2 * (h**2)) / (math.tan(math.pi / 8)))\ndef perimeter_nonagon(i):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return i * 9\ndef area_nonagon(j):\n    '''\n    Write a function to find the area of a regular nonagon from its length of sides.\n    '''\n    return math.sqrt((3 * (j**2)) / (math.tan(math.pi / 9)))\ndef perimeter_decagon(k):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return k * 10\ndef area_decagon(l):\n    '''\n    Write a function to find the area of a regular decagon from its length of sides.\n    '''\n    return math.sqrt((4 * (l**2)) / (math.tan(math.pi / 10)))\ndef perimeter_tricon(m):\n    '''\n    Write a function to find the perimeter of a regular tricon from the length of its sides.\n    '''\n    return m * 12\ndef area_tricon(n):\n    '''\n    Write a function to find the area of a regular tricon from its length of sides.\n    '''\n    return math.sqrt((3 * (n**2)) / (math.tan(math.pi / 12)))\ndef perimeter_rectangle(o):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    return o * 4\ndef area_rectangle(p):\n    '''\n    Write a function to find the area of a regular rectangle from its length of sides.\n    '''\n    return p * p\ndef perimeter_rhombus(q):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return q * 4\ndef area_rhombus(r):\n    '''\n    Write a function to find the area of a regular rhombus from its length of sides.\n    '''\n    return math.sqrt(r * r / 2)\ndef perimeter_trapezium(s):\n    '''\n    Write a function to find the perimeter of a regular trapezium from the length of its sides.\n    '''\n    return s * 4\ndef area_trapezium(t):\n    '''\n    Write a function to find the area of a regular trapezium from its length of sides.\n    '''\n    return (t * (t + (math.sqrt(t**2 + 4)))) / 2\ndef perimeter_parallelogram(u):\n    '''\n    Write a function to find the perimeter of a regular parallelogram from the length of its sides.\n    '''\n    return u * 4\ndef area_parallelogram(v):\n    '''\n    Write a function to find the area of a regular parallelogram from its length of sides.\n    '''\n    return v * v\ndef perimeter_kite(w):\n    '''\n    Write a function to find the perimeter of a regular kite from the length of its sides.\n    '''\n    return w * 6\ndef area_kite(x):\n    '''\n    Write a function to find the area of a regular kite from its length of sides.\n    '''\n    return (x * (math.sqrt(3) * x)) / 2\ndef perimeter_circle(y):\n    '''\n    Write a function to find the perimeter of a regular circle from its length of sides.\n    '''\n    return y * 2 * math.pi\ndef area_circle(z):\n    '''\n    Write a function to find the area of a regular circle from its length of sides.\n    '''\n    return z * z * math.pi\ndef perimeter_ellipse(a):\n    '''\n    Write a function to find the perimeter of a regular ellipse from its length of sides.\n    '''\n    return a * 4\ndef area_ellipse(b):\n    '''\n    Write a function to find the area of a regular ellipse from its length of sides.\n    '''\n    return b * b * math.pi\ndef perimeter_square(c):\n    '''\n    Write a function to find the perimeter of a regular square from its length of sides.\n    '''\n    return c * 4\ndef area_square(d):\n    '''\n    Write a function to find the area of a regular square from its length of sides.\n    '''\n    return d * d\ndef perimeter_rectangle_square(e):\n    '''\n    Write a function to find the perimeter of a regular rectangle-square from its length of sides.\n    '''\n    return e * 8\ndef area_rectangle_square(f):\n    '''\n    Write a function to find the area of a regular rectangle-square from its length of sides.\n    '''\n    return f * f\ndef perimeter_square_rectangle(g):\n    '''\n    Write a function to find the perimeter of a regular square-rectangle from its length of sides.\n    '''\n    return g * 4\ndef area_square_rectangle(h):\n    '''\n    Write a function to find the area of a regular square-rectangle from its length of sides.\n    '''\n    return h * h\ndef perimeter_rhombus_square(i):\n    '''\n    Write a function to find the perimeter of a regular rhombus-square from its length of sides.\n    '''\n    return i * 8\ndef area_rhombus_square(j):\n    '''\n    Write a function to find the area of a regular rhombus-square from its length of sides.\n    '''\n    return j * j / 2\ndef perimeter_kite_square(k):\n    '''\n    Write a function to find the perimeter of a regular kite-square from its length of sides.\n    '''\n    return k * 6\ndef area_kite_square(l):\n    '''\n    Write a function to find the area of a regular kite-square from its length of sides.\n    '''\n    return (l * l * math.sqrt(3)) / 2\ndef perimeter_nonagon_square(m):\n    '''\n    Write a function to find the perimeter of a regular nonagon-square from its length of sides.\n    '''\n    return m * 10\ndef area_nonagon_square(n):\n    '''\n    Write a function to find the area of a regular nonagon-square from its length of sides.\n    '''\n    return (n * n * n * n) / 4\ndef perimeter_pentagon_square(o):\n    '''\n    Write a function to find the perimeter of a regular pentagon-square from its length of sides.\n    '"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pentagon_perimeter = 5 * a\n    return pentagon_perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter=5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculating the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #declare variables\n    perimeter = 0\n    #The perimeter of a pentagon is determined by 5 sides, the sum of which is calculated for each side\n    # and added to the perimeter\n    perimeter += 5*a\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    #declare variables\n    area = 0\n    #The area of a pentagon is determined by the formula for a regular pentagon,\n    #where \"b\" represents the length of each side\n    area = (5*(a**2))/(4*math.tan(math.radians(18)))\n    return area\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(\"The perimeter of a regular pentagon from the length of its sides is:\",5*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = s.count('std')\n    print('No. of std is: {}'.format(n))\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # count = 0\n    # for i in range(len(s) - 2):\n    #     if s[i:i+3] =='std':\n    #         count += 1\n    # return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = 0\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2] =='s':\n            c += 1\n    return c\n    \n    \n    \ndef count_letters(s):\n    '''\n    Write a function that return a dictionary that contains the count of each letter in a given string.\n    '''\n    dict = {}\n    for i in s:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n    \n    \n    \n    \ndef count_letters_hash(s):\n    '''\n    Write a function that return a dictionary that contains the count of each letter in a given string. (Use Hash)\n    '''\n    d = {}\n    for i in s:\n        d[i] = d.get(i,0) + 1\n    return d\n    \n    \n    \n    \ndef count_letters_sorted(s):\n    '''\n    Write a function that return a dictionary that contains the count of each letter in a given string. (Use sort)\n    '''\n    d = {}\n    s.sort()\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n    \n    \n    \n    \ndef rotate_matrix(m):\n    '''\n    Write a function that takes a N * M matrix (N = M) as input and returns the matrix rotated 90 degrees.\n    '''\n    N = len(m)\n    M = len(m[0])\n    ans = [[0 for i in range(N)] for j in range(M)]\n    for i in range(M):\n        for j in range(N):\n            ans[i][j] = m[N-j-1][i]\n    return ans\n    \n    \n    \n    \ndef find_min_max(n, k, arr):\n    '''\n    Write a function that returns a tuple (min, max) out of N numbers such that min and max are not equal and the difference between min and max is K.\n    '''\n    sorted_arr = sorted(arr)\n    if sorted_arr[0]!= sorted_arr[-1]:\n        return sorted_arr[0], sorted_arr[-1]\n    else:\n        for i in range(len(sorted_arr)-1):\n            if sorted_arr[i] + k!= sorted_arr[i+1]:\n                return sorted_arr[i], sorted_arr[i+1]\n    return -1, -1\n    \n    \n    \ndef find_min_max_tuple(n, k, arr):\n    '''\n    Write a function that returns a tuple (min, max) out of N numbers such that min and max are not equal and the difference between min and max is K. (Use sort)\n    '''\n    sorted_arr = sorted(arr)\n    if sorted_arr[0]!= sorted_arr[-1]:\n        return sorted_arr[0], sorted_arr[-1]\n    else:\n        for i in range(len(sorted_arr)-1):\n            if sorted_arr[i] + k!= sorted_arr[i+1]:\n                return (sorted_arr[i], sorted_arr[i+1])\n    return -1, -1\n    \n    \n    \ndef find_triplet(arr, target):\n    '''\n    Write a function to find a triplet in the array that sum to a given value.\n    '''\n    arr.sort()\n    for i in range(len(arr)-2):\n        left = i+1\n        right = len(arr)-1\n        while(left < right):\n            if arr[i] + arr[left] + arr[right] == target:\n                return arr[i], arr[left], arr[right]\n            elif arr[i] + arr[left] + arr[right] < target:\n                left += 1\n            else:\n                right -= 1\n    return -1, -1, -1\n    \n    \n    \ndef find_triplet_hash(arr, target):\n    '''\n    Write a function to find a triplet in the array that sum to a given value. (Use hash table)\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if target - arr[i] in d:\n            return arr[i], target-arr[i], d[target-arr[i]]\n        else:\n            d[arr[i]] = arr[i]\n    return -1, -1, -1\n    \n    \n    \ndef find_triplet_hash_opt(arr, target):\n    '''\n    Write a function to find a triplet in the array that sum to a given value. (Use hash table, use two pointers)\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if target - arr[i] in d:\n            return arr[i], target-arr[i], d[target-arr[i]]\n        else:\n            d[arr[i]] = arr[i]\n    for i in range(len(arr)-1):\n        if arr[i] + arr[-1] == target:\n            return arr[i], arr[-1], arr[-1]\n    return -1, -1, -1\n    \n    \n    \ndef find_triplet_sorted(arr, target):\n    '''\n    Write a function to find a triplet in the array that sum to a given value. (Use sorted array)\n    '''\n    n = len(arr)\n    for i in range(n-2):\n        left = i+1\n        right = n-1\n        while(left < right):\n            if arr[i] + arr[left] + arr[right] == target:\n                return arr[i], arr[left], arr[right]\n            elif arr[i] + arr[left] + arr[right] < target:\n                left += 1\n            else:\n                right -= 1\n    return -1, -1, -1\n    \n    \n    \ndef find_triplet_sorted_opt(arr, target):\n    '''\n    Write a function to find a triplet in the array that sum to a given value. (Use sorted array, use two pointers)\n    '''\n    n = len(arr)\n    for i in range(n-2):\n        left = i+1\n        right = n-1\n        while(left < right):\n            if arr[i] + arr[left] + arr[right] == target:\n                return arr[i], arr[left], arr[right]\n            elif arr[i] + arr[left] + arr[right] < target:\n                left += 1\n            else:\n                right -= 1\n    for i in range(n-1):\n        if arr[i] + arr[n-1] == target:\n            return arr[i], arr[n-1], arr[n-1]\n    return -1, -1, -1\n    \n    \n    \ndef find_pair(arr, target):\n    '''\n    Write a function to find a pair in the array that sum to a given value.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1):\n        if target - arr[i] in arr:\n            return arr[i], target-arr[i]\n    return -1, -1\n    \n    \n    \ndef find_pair_hash(arr, target):\n    '''\n    Write a function to find a pair in the array that sum to a given value. (Use hash table)\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if target - arr[i] in d:\n            return arr[i], target-arr[i]\n        else:\n            d[arr[i]] = arr[i]\n    return -1, -1\n    \n    \n    \ndef find_pair_sorted(arr, target):\n    '''\n    Write a function to find a pair in the array that sum to a given value. (Use sorted array)\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        left = i+1\n        right = n-1\n        while(left < right):\n            if arr[i] + ar"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data = [item[0] for item in test_tuple]\n    return len(set(data)) == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def check_list(l):\n        return all([isinstance(i, type(test_tuple[0])) for i in l])\n    return check_list\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #initialize an empty list\n    list_of_all_elements = []\n    #append all the elements in tuple\n    for element in test_tuple:\n        list_of_all_elements.append(element)\n    #convert the list into a tuple\n    tuple_of_all_elements = tuple(list_of_all_elements)\n    #check if all elements are same\n    if len(set(tuple_of_all_elements)) == 1:\n        print(f\"All elements in tuple {test_tuple} have same data type\")\n    else:\n        print(f\"All elements in tuple {test_tuple} do not have same data type\")\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = None\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(x) is type(test_tuple[0]) for x in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)-1):\n        if type(test_tuple[i])!= type(test_tuple[i+1]):\n            print('Not all elements have same data type.')\n            return\n    print('All elements have same data type.')\n    return\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    i=0\n    for element in test_tuple:\n        if i==0:\n            first_type = type(element)\n        if type(element)!= first_type:\n            return False\n        else:\n            pass\n        i+=1\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = (1, 2, 3, 'hello', {'a':2, 'b':3})\n    return True if all(type(a) == type(test_tuple[0]) for a in test_tuple) else False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        if type(test_tuple[0]) == type(test_tuple[1]):\n            for i in range(1, len(test_tuple)):\n                if type(test_tuple[i])!= type(test_tuple[0]):\n                    return False\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    from collections import Counter\n    l = Counter(map(type,test_tuple))\n    if(len(l)==1):\n        return True\n    else:\n        return False\nprint(check_type((1,2,3,4,5)))\nprint(check_type((1.1,2.2,3.3,4.4,5.5)))\nprint(check_type([1,2,3,4,5]))\nprint(check_type((1,2,3,1.0,5)))\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr[n//2] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr[n//2] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n < 1 or n > 10**5:\n        return False\n    for elem in arr:\n        if elem == x:\n            if arr.count(x) > n/2:\n                return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return True if arr.count(x) > n//2 else False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n < 3:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        c = 0\n        l = len(arr)\n        for i in range(l):\n            if arr[i] == x:\n                c += 1\n                break\n        return (c >= (l / 2) + 1)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Edge Cases\n    if not arr:\n        return False\n    if x < arr[0]:\n        return False\n    if x > arr[-1]:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for element in arr:\n        if element == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n  "
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while (n): \n        set_bits += n & 1\n        n >>= 1\n    return set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #Set function converts the \n    #string into a set of characters \n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([c for i, c in enumerate(str) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    char_list = list(str)\n    for index, char in enumerate(char_list):\n        if index % 2 == 1:\n            char_list[index] = ''\n    return ''.join(char_list)\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # code goes here\n    str1 = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            str1 = str1 + str[i]\n    return str1\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new += str[i]\n    return new\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            str = str[:i] + str[i+1:]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in str[1::2]:\n        str = str.replace(i,'')\n    return str\n    \ndef even_values_string(str):\n    '''\n    Write a python function to remove all the even indexed characters from a string\n    '''\n    for i in str[::2]:\n        str = str.replace(i,'')\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # TODO: Fix this!\n    list = []\n    for x in range(len(str)):\n        if x % 2 == 0:\n            list.append(str[x])\n    return \"\".join(list)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # if a > b:\n    #     if a > c:\n    #         print(a)\n    #     else:\n    #         print(c)\n    # elif b > c:\n    #     print(b)\n    # else:\n    #     print(c)\n    print(min(a,b,c))\n    \ndef reverse_string(str):\n    '''\n    Write a function to reverse a given string.\n    '''\n    str = str[::-1]\n    print(str)\n    \ndef remove_vowels(str):\n    '''\n    Write a function to remove all vowels from a given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    for i in str:\n        if i in vowels:\n            str = str.replace(i, \"\")\n    print(str)\n    \ndef check_pwd(pwd):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    for i in range(len(pwd)):\n        if pwd[i]!= pwd[len(pwd)-1-i]:\n            return False\n    return True\n    \ndef remove_whitespaces(str):\n    '''\n    Write a function to remove all white spaces from a given string.\n    '''\n    print(\"\".join(str.split()))\n    \ndef remove_non_alpha(str):\n    '''\n    Write a function to remove all non-alphabets from a given string.\n    '''\n    for i in str:\n        if not i.isalpha():\n            str = str.replace(i, \"\")\n    print(str)\n    \ndef sum_nums(str):\n    '''\n    Write a function to sum all numbers present in a string.\n    '''\n    for i in str:\n        if i.isnumeric():\n            sum += int(i)\n    print(sum)\n    \ndef is_palindrome(str):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    for i in range(len(str)):\n        if str[i]!= str[len(str)-1-i]:\n            return False\n    return True\n    \ndef is_pangram(str):\n    '''\n    Write a function to check if a string is a pangram or not.\n    A pangram is a sentence containing every letter of the alphabet.\n    '''\n    alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for i in alphabets:\n        if i not in str:\n            return False\n    return True\n    \ndef replace_vowels(str):\n    '''\n    Write a function to replace all vowels in a string with #\n    '''\n    vowels = ['a','e','i','o','u']\n    for i in str:\n        if i in vowels:\n            str = str.replace(i, \"#\")\n    print(str)\n    \ndef add_num(num1,num2):\n    '''\n    Write a function to add two numbers.\n    '''\n    sum = num1 + num2\n    print(sum)\n    \ndef remove_duplicates(str):\n    '''\n    Write a function to remove all duplicate words from a given string.\n    '''\n    print(\" \".join(set(str.split())))\n    \ndef reverse_sentence(str):\n    '''\n    Write a function to reverse all the words in a given sentence.\n    '''\n    words = str.split()\n    reverse_words = words[::-1]\n    print(\" \".join(reverse_words))\n    \ndef is_isogram(str):\n    '''\n    Write a function to check if a string is isogram or not.\n    '''\n    str = str.lower()\n    for i in str:\n        if str.count(i) > 1:\n            return False\n    return True\n    \ndef is_unique(str):\n    '''\n    Write a function to check if a string is a unique string or not.\n    '''\n    str = str.lower()\n    for i in str:\n        if str.count(i) > 1:\n            return False\n    return True\n    \ndef find_happiest_country(countries):\n    '''\n    Write a function to return the happiest country from the given dictionary of countries.\n    '''\n    max = 0\n    country = ''\n    for i in countries:\n        if max < countries[i]:\n            max = countries[i]\n            country = i\n    return country\n    \ndef find_happiest_country_options(countries,options):\n    '''\n    Write a function to return the options with the happiest country from the given dictionary of countries.\n    '''\n    max = 0\n    country = ''\n    for i in countries:\n        if max < countries[i]:\n            max = countries[i]\n            country = i\n    options.append(country)\n    return options\n    \ndef most_occuring_word(str):\n    '''\n    Write a function to return the most occuring word from a given string.\n    '''\n    str = str.lower()\n    words = str.split()\n    occurence = {}\n    for i in words:\n        if i in occurence:\n            occurence[i] += 1\n        else:\n            occurence[i] = 1\n    max = 0\n    for i in occurence:\n        if occurence[i] > max:\n            max = occurence[i]\n    for i in occurence:\n        if occurence[i] == max:\n            return i\n            \ndef group_even_odd(l):\n    '''\n    Write a function to group even and odd numbers from a given list.\n    '''\n    even = []\n    odd = []\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(even,odd)\n    \ndef remove_duplicates_in_list(l):\n    '''\n    Write a function to remove duplicate values from a list.\n    '''\n    print(list(set(l)))\n    \ndef remove_vowels_with_loop(str):\n    '''\n    Write a function to remove all vowels from a given string using loops.\n    '''\n    vowels = ['a','e','i','o','u']\n    for i in str:\n        if i in vowels:\n            str = str.replace(i, \"\")\n    print(str)\n    \ndef remove_vowels_without_loop(str):\n    '''\n    Write a function to remove all vowels from a given string without using loops.\n    '''\n    vowels = ['a','e','i','o','u']\n    str = list(str)\n    for i in range(len(str)):\n        if str[i] in vowels:\n            str[i] = \"\"\n    print(\"\".join(str))\n    \ndef remove_vowels_with_while_loop(str):\n    '''\n    Write a function to remove all vowels from a given string using loops.\n    '''\n    vowels = ['a','e','i','o','u']\n    i = 0\n    while i < len(str):\n        if str[i] in vowels:\n            str = str.replace(str[i], \"\")\n        i += 1\n    print(str)\n    \ndef remove_vowels_without_while_loop(str):\n    '''\n    Write a function to remove all vowels from a given string without using loops.\n    '''\n    vowels = ['a','e','i','o','u']\n    str = list(str)\n    i = 0\n    while i < len(str):\n        if str[i] in vowels:\n            str[i] = \"\"\n        i += 1\n    print(\"\".join(str))\n    \ndef longest_word(str):\n    '''\n    Write a function to return the longest word from the given string."
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = 0\n    if(a<=b and a<=c):\n        min = a\n    elif(b<=a and b<=c):\n        min = b\n    elif(c<=a and c<=b):\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return c\n        else:\n            return b\n    else:\n        if a<c:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    #pass\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a < b):\n        if(b < c):\n            return c\n        else:\n            return b\n    else:\n        if(a < c):\n            return c\n        else:\n            return a\nprint(min_of_three(3,6,9))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c) \n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_value = 0 \n    min_value = min(a,b,c)\n    return min_value\ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    max_value = 0 \n    max_value = max(a,b,c)\n    return max_value\ndef equal_of_three(a,b,c): \n    '''\n    Write a function to find equal of three numbers.\n    '''\n    equal_value = 0 \n    equal_value = a==b==c\n    return equal_value\ndef greater_than_two(a,b): \n    '''\n    Write a function to find greater of two numbers.\n    '''\n    greater_value = 0 \n    if a > b:\n        greater_value = a\n    else:\n        greater_value = b\n    return greater_value\ndef less_than_two(a,b): \n    '''\n    Write a function to find less than of two numbers.\n    '''\n    less_value = 0 \n    if a < b:\n        less_value = a\n    else:\n        less_value = b\n    return less_value\ndef addition(a,b): \n    '''\n    Write a function to find addition of two numbers.\n    '''\n    add_value = 0 \n    add_value = a+b\n    return add_value\ndef substraction(a,b): \n    '''\n    Write a function to find substraction of two numbers.\n    '''\n    sub_value = 0 \n    sub_value = a-b\n    return sub_value\ndef multiplication(a,b): \n    '''\n    Write a function to find multiplication of two numbers.\n    '''\n    mul_value = 0 \n    mul_value = a*b\n    return mul_value\ndef division(a,b): \n    '''\n    Write a function to find division of two numbers.\n    '''\n    div_value = 0 \n    div_value = a/b\n    return div_value\ndef module(a,b): \n    '''\n    Write a function to find module of two numbers.\n    '''\n    mod_value = 0 \n    mod_value = a%b\n    return mod_value\ndef exponent(a,b): \n    '''\n    Write a function to find exponent of two numbers.\n    '''\n    exp_value = 0 \n    exp_value = a**b\n    return exp_value\ndef power_of_two(a): \n    '''\n    Write a function to find power of two numbers.\n    '''\n    pow_value = 0 \n    pow_value = a**2\n    return pow_value\ndef power_of_three(a): \n    '''\n    Write a function to find power of three numbers.\n    '''\n    pow_value = 0 \n    pow_value = a**3\n    return pow_value\ndef power_of_four(a): \n    '''\n    Write a function to find power of four numbers.\n    '''\n    pow_value = 0 \n    pow_value = a**4\n    return pow_value\ndef power_of_five(a): \n    '''\n    Write a function to find power of five numbers.\n    '''\n    pow_value = 0 \n    pow_value = a**5\n    return pow_value\ndef square_root(a): \n    '''\n    Write a function to find square root of number.\n    '''\n    sqrt_value = 0 \n    sqrt_value = a**0.5\n    return sqrt_value\ndef number_is_prime(a): \n    '''\n    Write a function to check given number is prime or not.\n    '''\n    prime = 0 \n    prime = a%2\n    return prime\ndef number_is_composite(a): \n    '''\n    Write a function to check given number is composite or not.\n    '''\n    comp = 0 \n    comp = a%2\n    if comp == 0:\n        return True\n    else:\n        return False\ndef number_is_even(a): \n    '''\n    Write a function to check given number is even or not.\n    '''\n    even = 0 \n    even = a%2\n    if even == 0:\n        return True\n    else:\n        return False\ndef number_is_odd(a): \n    '''\n    Write a function to check given number is odd or not.\n    '''\n    odd = 0 \n    odd = a%2\n    if odd!= 0:\n        return True\n    else:\n        return False\ndef factorial_of_five(a): \n    '''\n    Write a function to find factorial of five numbers.\n    '''\n    fact_value = 0 \n    fact_value = a*4\n    return fact_value\ndef factorial_of_six(a): \n    '''\n    Write a function to find factorial of six numbers.\n    '''\n    fact_value = 0 \n    fact_value = a*5\n    return fact_value\ndef number_of_digits(a): \n    '''\n    Write a function to find number of digits of a number.\n    '''\n    digits = 0 \n    digits = len(str(a))\n    return digits\ndef check_positive(a): \n    '''\n    Write a function to check given number is positive or not.\n    '''\n    positive = 0 \n    positive = a > 0\n    return positive\ndef check_negative(a): \n    '''\n    Write a function to check given number is negative or not.\n    '''\n    negative = 0 \n    negative = a < 0\n    return negative\ndef sum_of_digits(a): \n    '''\n    Write a function to find sum of digits of a number.\n    '''\n    sum_digits = 0 \n    sum_digits = sum([int(i) for i in str(a)])\n    return sum_digits\ndef number_of_even_digits(a): \n    '''\n    Write a function to find number of even digits of a number.\n    '''\n    even_digits = 0 \n    even_digits = len([int(i) for i in str(a) if int(i)%2==0])\n    return even_digits\ndef number_of_odd_digits(a): \n    '''\n    Write a function to find number of odd digits of a number.\n    '''\n    odd_digits = 0 \n    odd_digits = len([int(i) for i in str(a) if int(i)%2!=0])\n    return odd_digits\ndef palindrome(a): \n    '''\n    Write a function to check given number is palindrome or not.\n    '''\n    palindrome = 0 \n    x = str(a)\n    y = x[::-1]\n    if y == x:\n        palindrome = True\n    else:\n        palindrome = False\n    return palindrome\ndef perfect_number(a): \n    '''\n    Write a function to check given number is perfect or not.\n    '''\n    perfect = 0 \n    sum_divisors = 0\n    for i in range(1,a):\n        if a%i == 0:\n            sum_divisors = sum_divisors + i\n    if sum_divisors == a:\n        perfect = True\n    else:\n        perfect = False\n    return perfect\ndef check_armstrong_number(a): \n    '''\n    Write a function to check given number is armstrong or not.\n    '''\n    armstrong = 0 \n    sum_of_digits = 0\n    n = a\n    while n > 0:\n        digit = n % 10\n        sum_of_digits = sum_of_digits + digit ** 3\n        n = n // 10\n    if sum_of_digits == a:\n        armstrong = True\n    else:\n        armstrong = False\n    return armstrong\ndef check_pythagorean_number(a): \n    '''\n    Write a function to check given number is pythagorean or not.\n    ''"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\nprint(min_of_three(5,7,9))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c) \n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n&i!= i:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n_bin = bin(n)[2:]\n    r_bin = bin(r)[2:]\n    l_bin = bin(l)[2:]\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #checking for 0\n    if (n&(1<<(l-1))):\n        return 0\n    if (n&(1<<(r-1))):\n        return 0\n    return 1\ndef all_Bits_Set"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    # function to check whether all the bits are unset in the given range or not\n    def check_all_bits_set(n):\n        # initializing a variable to store the bit value of a given number\n        b = n\n        # initializing a variable to store the value of a bit if it is set or not\n        bit = 0\n        # initializing a variable to store the number of set bits\n        count_set_bit = 0\n        # loop to iterate through the bits of a given number\n        while b>0:\n            # calculating the bit value of the number\n            bit = b%2\n            # checking whether the bit is set or not\n            if bit == 1:\n                # incrementing the number of set bits\n                count_set_bit += 1\n            # updating the number to remove the bit value of the number\n            b = b//2\n        # checking whether all the bits are unset or not\n        if count_set_bit == 0:\n            # returning True if all the bits are unset\n            return True\n        # returning False if all the bits are set\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return (n>>l)^(n>>r) == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n^(n>>r) == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&(n>>r) == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = l - (l & (l-1))\n    r = r - (r & (r-1))\n    return n&n>>r == n\ndef all_Bits_Set_In_The_Given"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n == 0):\n        return (1)\n    if (n == -1):\n        return (0)\n    if(l == 0):\n        return (1)\n    if(r == 0):\n        return (1)\n    \n    if ((n & (1 << l)) == 0):\n        if ((n & (1 << (l+1)))!= 0):\n            return all_Bits_Set_In_The_Given_Range(n, l+1, r)\n        else:\n            return all_Bits_Set_In_The_Given_Range(n, l+1, r-1)\n    else:\n        return all_Bits_Set_In_The_Given_Range(n, l+1, r)\n    \n    return 0;\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(\"\\n---> all_Bits_Set_In_The_Given_Range \\n\")\n    print(\"All the bits are set or unset in the given range.\",end=\" \")\n    for i in range(n):\n        if ((l>>i)&1)==0 or ((r>>i)&1)==0:\n            print(i)\n    print(\"\\n\")\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<0 or r>n:\n        print('All bits in range can be represented in the range from 0 to',n-1)\n    else:\n        m=2**(r-l+1)\n        s=(m*(m-1))//2\n        if s==(n-l):\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n_bin=bin(n)\n    l_bin=bin(l)\n    r_bin=bin(r)\n    all_bits_set=True\n    if len(n_bin)>len(r_bin):\n        n_bin=n_bin[2:]\n    else:\n        r_bin=r_bin[2:]\n    for i in range(len(n_bin)):\n        if n_bin[i]=='0' and r_bin[i]=='0':\n            all_bits_set=False\n            break\n    if all_bits_set==True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_pos = []\n    arr_neg = []\n    for num in arr:\n        if num > 0:\n            arr_pos.append(num)\n        else:\n            arr_neg.append(num)\n    arr_pos.extend(arr_neg)\n    return arr_pos\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    curr_idx = 0\n    prev_idx = 0\n    end_idx = len(arr) - 1\n    while prev_idx <= curr_idx <= end_idx:\n        if arr[curr_idx] < 0:\n            arr[prev_idx], arr[curr_idx] = arr[curr_idx], arr[prev_idx]\n            curr_idx += 1\n            prev_idx += 1\n        elif arr[curr_idx] == 0:\n            curr_idx += 1\n        else:\n            curr_idx += 1\n            end_idx -= 1\n            arr[curr_idx], arr[end_idx] = arr[end_idx], arr[curr_idx]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialization\n    # O(N)\n    pos = []\n    neg = []\n    # O(N)\n    for i in range(n):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    curr = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[curr] = arr[curr], arr[i]\n            curr += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        n = len(arr)\n    neg_index = 0\n    pos_index = n-1\n    for i in range(n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[neg_index]\n            arr[neg_index] = temp\n            neg_index = neg_index + 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    for j in range(0, n):\n        if(arr[j] < 0):\n            temp = arr[j]\n            arr[j] = arr[i]\n            arr[i] = temp\n            i = i + 1\n    return arr\n    \nprint(re_arrange_array([-3, -2, -1, 1, 2, 3], 3))\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # a = [12, -5, 3, 2, -1, -10, 11, 15, 17]\n    # b = [0]*n\n    # j = 0\n    # for i in range(n):\n    #     if a[i] > 0:\n    #         b[j] = a[i]\n    #         j += 1\n    # for k in range(j, n):\n    #     b[k] = a[k-j]\n    # print(b)\n    \n    i, j = 0, n-1\n    while i < j:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        else:\n            i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = -1\n    j = 0\n    while j < n and i < n:\n        if arr[j] < 0:\n            arr.insert(i, arr.pop(j))\n            i += 1\n        j += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    start_of_negative = 0\n    end_of_negative = n\n    start_of_positive = n\n    end_of_positive = len(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j = j + 1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            new_str += str1[i]\n        else:\n            new_str += char\n    return new_str\nprint(replace_blank(\"hi there\",'$'))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for x in range(len(str1)):\n        if str1[x]==\" \":\n            str1=str1[:x]+char+str1[x+1:]\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    string = str1.split(' ')\n    return ''.join(string).replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            str1 = str1[:i] + char + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    # n = 4\n    # Output = [12,14,15,13]\n    largest = heapq.nlargest(n,list1)\n    print(largest)\n    return largest\n    \ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    # n = 4\n    # Output = [12,14,15,13]\n    largest = heapq.nlargest(n,list1)\n    print(largest)\n    return largest\n    \ndef my_func(n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    # n = 4\n    # Output = [12,14,15,13]\n    largest = heapq.nlargest(n,list1)\n    print(largest)\n    return largest\n    \n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        return list1\n    else:\n        heap = []\n        for i in range(0,n):\n            if len(list1)>0:\n                heapq.heappush(heap,list1.pop(0))\n        return heap\nprint(larg_nnum([1,5,3,6,7],2))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l = len(list1)\n    # base case\n    if l<n:\n        return []\n    # recursion\n    if n==1:\n        return list1[-n:]\n    if n>l/2:\n        return heapq.nlargest(n, list1)\n    else:\n        return heapq.nlargest(n, list1[l-n:]) + larg_nnum(list1[:l-n],n-1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n<=0:\n        return list1\n    n=int(n)\n    heap = []\n    for i in range(len(list1)):\n        if i < n:\n            heapq.heappush(heap,(-list1[i],list1[i]))\n        elif list1[i] > heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(-list1[i],list1[i]))\n    return [x[1] for x in heap]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq._heapify_max(list1)\n    return list(heapq._heappop_max(list1) for _ in range(n))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    heapq.heapify(list2)\n    for i in range(n):\n        if(len(list1) == 0):\n            return list2\n        else:\n            heapq.heappush(list2,list1[0])\n            heapq.heappop(list1)\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n < 1 or n > len(list1):\n        return None\n    nums = []\n    for x in range(n):\n        largest = list1[0]\n        for i in range(len(list1)):\n            if list1[i] > largest:\n                largest = list1[i]\n        list1.remove(largest)\n        nums.append(largest)\n    return nums\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2 * pi * r * (h + r)\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(2*pi*r*h)\n    return 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14159 * r * (r + h)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    r = float(r)\n    h = float(h)\n    return (2 * math.pi * r * (r + h))\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s1=math.pi*r*r\n    s2=2*math.pi*r*h\n    return s1+s2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # check that inputs are numeric\n    if type(r) not in [int, float] or type(h) not in [int, float]:\n        return 'Invalid input. Inputs must be numeric.'\n    # check that inputs are positive\n    if r <= 0 or h <= 0:\n        return 'Invalid input. Inputs must be positive.'\n    # calculate surface area\n    s_area = 2*math.pi*r*(r+h) + 2*math.pi*r**2\n    return s_area\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Find the lateral surface area of a cylinder.\n    A = pi * r**2\n    B = 2 * pi * r * h\n    C = 2 * pi * r**2 + 2 * pi * r * h\n    lateral_surface_area = A + B + C\n    #Return the lateral surface area.\n    return lateral_surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    surfacearea = 2 * pi * r * (r+h)\n    return surfacearea\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #surface area of a cylinder = 2*pi*r^2 + 2*pi*r*h\n    pi = 3.14\n    surface_area = 2*pi*r**2 + 2*pi*r*h\n    return surface_area\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid given its length, width, and height.\n    This function should not accept side lengths separately, and should accept them in \n    any order.\n    '''\n    return l*w*h\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base length, width, and height. \n    This function should not accept side lengths separately, and should accept them in \n    any order.\n    '''\n    return l*w*h\n    \ndef volume_pyramid(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid given its base length, width, and height.\n    This function should not accept side lengths separately, and should accept them in \n    any order.\n    '''\n    return l*w*h/3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #l = int(input(\"Enter the length of any side of the cube: \"))\n    def volume(side_length):\n        return side_length**3\n    print(f\"The volume of the cube with side length {l} is {volume(l)} units^3.\")\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l ** 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if type(l) == float or type(l) == int:\n        return pow(l,3)\n    else:\n        return 'Enter a positive integer or floating number'\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def volume(side_length):\n        return side_length ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n ^ (n >> 1)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = (n & 0xaaaaaaaa) >> 1\n    return x ^ n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Set all bits one by one \n    for i in range(1, n+1): \n        print(bin(i).replace(\"0b\", \"\")) \n        for j in range(1,n+1): \n            if i & j == j: \n                print(\"1\", end=\"\") \n            else: \n                print(\"0\", end=\"\") \n        print(\"\") \ndef even_bit_set_number(n):\n    while n: \n        print('1' if n & 1 else '0', end='') \n        n >>= 1\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1\n    while (mask < n):\n        mask = mask << 1\n    mask = mask >> 1\n    return (n & mask)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # set all even bits as 1 and \n    # all odd bits as 0 \n    return (n & 0x55555555) << 1\n    \nn = int(input(\"Enter an integer to check whether all even bits are set or not :\"))\nprint(\"Number with all even bits set : {}\".format(even_bit_set_number(n)))\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    set_even_bit_number = n\n    while (n):\n        set_even_bit_number = set_even_bit_number & (set_even_bit_number ^ (set_even_bit_number & -set_even_bit_number))\n        n = n >> 1\n    return set_even_bit_number\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Set all bits of 'n' to 1.\n    n |= n >> 1\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = dict(Counter(test_list))\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dic = {}\n    for t in test_list:\n        if t in my_dic.keys():\n            my_dic[t] += 1\n        else:\n            my_dic[t] = 1\n    return my_dic\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_of_tuples = Counter(test_list)\n    return dict_of_tuples\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create a set for each tuple in the list\n    result_list = set()\n    result_dict = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Make a dict with the tuple as the key and the number of occurrences as the value\n    occurence_dict = {}\n    for item in test_list:\n        if item in occurence_dict:\n            occurence_dict[item] += 1\n        else:\n            occurence_dict[item] = 1\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    temp_dict = {}\n    for item in test_list:\n        if item not in temp_dict:\n            temp_dict[item] = 1\n        else:\n            temp_dict[item] += 1\n    return temp_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return_dict = {}\n    for item in test_list:\n        if item in return_dict.keys():\n            return_dict[item] += 1\n        else:\n            return_dict[item] = 1\n    return return_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create counter for each tuple\n    counter_dict = Counter(test_list)\n    #print(counter_dict)\n    #iterate through counter and return values\n    #value = counter_dict.values()\n    #print(value)\n    #for i in test_list:\n        #print(i)\n    return counter_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # we have to define two pointers: one for left and one for right.\n    # we will start our search from the beginning of the string, and go towards the end.\n    # we will keep a variable to keep count of the number of substrings.\n    # we will keep a substring variable to store the current substring we are looking at.\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # function that count the number of non-empty substrings of a given string\n    num_substrings = len(str)\n    # loop through each character of the string and check if the character is equal to a character of another substring\n    for i in range(len(str)):\n        # check if the character of the substring is equal to the character of the original string\n        if str[i] == str[i-1]:\n            # if yes, then add 1 to the number of substrings\n            num_substrings += 1\n    return num_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def func(str):\n        sub_strings = []\n        for i in range(len(str)):\n            for j in range(i+1, len(str)+1):\n                sub_strings.append(str[i:j])\n        return sub_strings\n    return len(func(str))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    list_of_substrings = []\n    substrings = []\n    for index,char in enumerate(str):\n        if char not in substrings:\n            substrings.append(char)\n        elif char in substrings:\n            for char in substrings:\n                if char == char:\n                    substrings.append(char)\n                    list_of_substrings.append(substrings)\n                    substrings.remove(char)\n    return len(list_of_substrings)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i:j+1]!= '': \n                count += 1\n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # return len([substring for substring in str.split() if substring])\n    return len(str.split())\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n    \ndef count_substring(str, sub_str):\n    '''\n    Write a python function to count the number of occurences of a substring in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def countSubstring(input_string):\n        size = len(input_string) \n        substring_count = 0\n        for i in range(0,size):\n            for j in range(i,size):\n                substring = input_string[i:j+1]\n                if len(substring) > 1:\n                    substring_count = substring_count + 1\n        return substring_count\n    if str == \"\":\n        return 0\n    return countSubstring(str)\ndef prefix_suffix(str):\n    '''\n    Write a python function to count the number of substrings of a given string of the same character.\n    '''\n    def countSubString(str):\n        l = []\n        for i in range(len(str)):\n            for j in range(i,len(str)):\n                if str[i] == str[j]:\n                    l.append(str[i:j+1])\n        return len(l)\n    if str == \"\":\n        return 0\n    return countSubString(str)\ndef triple_double(str):\n    '''\n    Write a python function to replace all the occurrences of space, comma, dot, exclamation, question mark, semicolon, and slash with the given character.\n    '''\n    def replace(str,char):\n        return str.replace(\" \",\"\").replace(\",\",\"\").replace(\".\",\"\").replace(\"!\",\"\").replace(\"?\",\"\").replace(\";\",\"\").replace(\"/\",\"\")\n    if str == \"\":\n        return \"\"\n    return replace(str,char)\ndef match_pattern(str):\n    '''\n    Write a python function to check whether a given string contains any special character or not.\n    '''\n    import re\n    def match(str):\n        matches = re.findall(r'[@_!#$%^&*()<>?/\\|}{~:]',str)\n        return matches\n    if str == \"\":\n        return False\n    return bool(match(str))\ndef minimum_window_substring(str,pat):\n    '''\n    Write a python function to find the minimum window in the given string which will contain all the characters of the given pattern.\n    '''\n    def find_window(str,pat):\n        window_start, matched, substr_start = 0,0,0\n        min_length = len(str) + 1\n        for chr in pat:\n            matched = str.find(chr,window_start)\n            if matched == -1:\n                return \" \"\n            window_start = matched + 1\n        for window_end in range(len(str),0,-1):\n            if str[substr_start:window_end] == pat[substr_start:window_end]:\n                if min_length > window_end - substr_start:\n                    min_length = window_end - substr_start\n                    min_substr_start = substr_start\n                substr_start = substr_start + 1\n        if min_length > len(str):\n            return \" \"\n        return str[min_substr_start:min_length+1]\n    if pat == \"\" or str == \"\":\n        return \"\"\n    return find_window(str,pat)\ndef permutation_count(str,pat):\n    '''\n    Write a python function to find the permutation of the given string if it contains the given pattern.\n    '''\n    def permutation(str,pat):\n        perm_count = 0\n        for i in range(0,len(str)):\n            for j in range(0,len(pat)):\n                if pat[j] == str[i]:\n                    if i+1 >= len(str) or pat[j]!= str[i+1]:\n                        break\n            if i+1 < len(str) and pat[j] == str[i]:\n                perm_count = perm_count + 1\n        return perm_count\n    if pat == \"\" or str == \"\":\n        return 0\n    return permutation(str,pat)\ndef pattern_matching(str,pat):\n    '''\n    Write a python function to count the number of times that the given pattern occurs in the given string.\n    '''\n    def count_pat(str,pat):\n        count = 0\n        for i in range(0,len(str)):\n            if str[i:i+len(pat)] == pat:\n                count = count + 1\n        return count\n    if pat == \"\" or str == \"\":\n        return 0\n    return count_pat(str,pat)\ndef rotate_string(str):\n    '''\n    Write a python function to rotate the given string by given number of characters.\n    '''\n    def rotate(str,n):\n        if str == \"\":\n            return \"\"\n        return str[n:] + str[:n]\n    if str == \"\":\n        return \"\"\n    return rotate(str,len(str)-1)\ndef string_compression(str):\n    '''\n    Write a python function to compress a given string without the use of additional memory and return the compressed string.\n    '''\n    if str == \"\":\n        return \"\"\n    if len(str) == 1:\n        return str+\"1\"\n    def compress(str):\n        comp = \"\"\n        count = 0\n        for i in range(0,len(str)):\n            if i+1 >= len(str):\n                comp = comp + str[i] + str[i]\n                break\n            elif str[i] == str[i+1]:\n                count = count + 1\n            elif str[i]!= str[i+1]:\n                comp = comp + str[i] + str(count+1)\n                count = 0\n        if len(comp) >= len(str):\n            return str\n        return comp\n    return compress(str)\ndef string_rotation(str1,str2):\n    '''\n    Write a python function to check whether two strings are rotation of each other or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if str1+str1 == str2:\n        return True\n    return str2 in str1+str1\ndef substring_matching(str,pat):\n    '''\n    Write a python function to check whether the given string contains any permutation of the given pattern.\n    '''\n    def permutation(str,pat):\n        perm_count = 0\n        for i in range(0,len(str)):\n            for j in range(0,len(pat)):\n                if pat[j] == str[i]:\n                    if i+1 >= len(str) or pat[j]!= str[i+1]:\n                        break\n            if i+1 < len(str) and pat[j] == str[i]:\n                perm_count = perm_count + 1\n        return perm_count\n    if pat == \"\" or str == \"\":\n        return 0\n    return permutation(str,pat)\ndef longest_consecutive_substring(str):\n    '''\n    Write a python function to find the longest substring of given string with consecutive characters.\n    '''\n    def longest_consecutive_substring(str):\n        length = 0\n        count = 0\n        substr = \"\"\n        for i in range(len(str)):\n            if i+1 < len(str) and str[i] == str[i+1]:\n                count = count + 1\n            else:\n                if count > length:\n                    length = count\n                    substr = str[i-count+1:i+1]\n                count = 0\n        if count > length:\n            length = count\n            substr = str[i-count+1:i+1]\n        return substr\n    if str == \"\":\n        return \"\"\n    return longest_consecutive_substring(str)\ndef reverse_words(str):\n    '''\n    Write a python function to reverse the words in the given string.\n    '''\n    def reverse(str,start,end):\n        while start < end:\n            str[start],str[end] = str[end],str[start]\n            start = start + 1\n            end = end - 1\n    if str == \"\":\n        return \"\"\n    start, end = 0, len(str)-1\n    while start < end:\n        if str[start] == \" \":\n            start = start + 1\n        elif str[end] == \" \":\n            end = end - 1\n    "
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str.split())\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for i in range(1,m):\n        for j in range(i+1,m):\n            for k in range(j+1,m):\n                if k >= i and k <= j:\n                    total_number_of_sequences += 1\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 0 or n < 0:\n        return \"One of the inputs must be zero or negative.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return m\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m - n,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    #m = int(input(\"Enter a positive integer m: \"))\n    #n = int(input(\"Enter a positive integer n: \"))\n    \n    sequences = []\n    i = 0\n    j = 0\n    \n    #base case\n    if n == 0:\n        return 1\n    \n    #recursive case\n    else:\n        while j < n:\n            if 2 * m > n:\n                sequences.append(1)\n                j = j + 1\n                m = m - 1\n            else:\n                sequences.append(i + 1)\n                i = i + 1\n                j = j + 1\n                m = m - 1\n            \n        #print(sequences)\n        return get_total_number_of_sequences(m, n - 1) + sum(sequences)\n    \n    \n    #This code uses O(m^n) time complexity.\n    \n    \ndef get_total_number_of_sequences_v2(m,n):\n    \n    #base case\n    if n == 0:\n        return 1\n    \n    else:\n        sequences = []\n        \n        #recursive case\n        for i in range(0, m + 1):\n            sequences.append(get_total_number_of_sequences_v2(m, n - 1))\n            \n    return sum(sequences)\n    \n    #This code uses O(m^2) time complexity.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    max_value = m - (n-1)\n    min_value = n - 2\n    for i in range(min_value, max_value+1):\n        total_sequences += (math.factorial(max_value)//(math.factorial(i)*math.factorial(max_value-i)))\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        return n * get_total_number_of_sequences(m, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # define m and n\n    m = 10\n    n = 5\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Variables\n    count = 0\n    i = 1\n    j = 0\n    \n    # Finds the number of sequences in the given range\n    for k in range(1,n+1):\n        if k == 1:\n            count = 1\n            break\n        else:\n            count = count + (n-k+1)*(m-i+1)*(i-1)\n            i = i + 2\n    \n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_total_number_of_sequences_helper(m,n):\n        if n == 1:\n            return m\n        if m < 2 * n:\n            return 0\n        if m == 2 * n:\n            return 2**(n-1)\n        return get_total_number_of_sequences_helper(m - n, n - 1) + 2 * (get_total_number_of_sequences_helper(m - 2 * n, n - 1))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Create a list that stores all possible permutations of the elements in an array.\n    permutations = []\n    \n    # Populate the list with permutations of the elements in the array.\n    for i in range(m): \n        permutations.append([i+1])\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    count = 0\n    for i in range(1,n):\n        count += m-1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Your code here\n    list1.pop()\n    for element in list2:\n        list1.append(element)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1] = list2[0:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[0:-1] = list2\n    return list1\nprint(replace_list([1, 2, 3, 4], [5, 6]))"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    return(len(str1))\n    \n    \n    \ndef find_charac(str1, ch1):\n    '''\n    Write a function to return the position of the first and last occurence of a character in a string\n    '''\n    return(str1.find(ch1), str1.rfind(ch1))\n    \n    \n    \ndef count_occurence(str1, ch1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(str1.count(ch1))\n    \n    \n    \ndef remove_chac(str1, ch1):\n    '''\n    Write a function to remove the character at the first and last occurence of a character in a string\n    '''\n    return(str1.replace(ch1, \"\"))\n    \n    \n    \ndef remove_chac_string(str1, ch1):\n    '''\n    Write a function to remove the character at the first and last occurence of a character in a string\n    '''\n    return(str1.replace(ch1, \"\"))\n    \n    \n    \ndef remove_chac_string_replace(str1, ch1):\n    '''\n    Write a function to remove the character at the first and last occurence of a character in a string\n    '''\n    return(str1.replace(ch1, \"\"))\n    \n    \n    \ndef remove_chac_replace(str1, ch1, ch2):\n    '''\n    Write a function to remove the character at the first and last occurence of a character in a string\n    '''\n    return(str1.replace(ch1, ch2))\n    \n    \n    \ndef split_string(str1, ch1):\n    '''\n    Write a function to split a string into words using a space as the delimiter.\n    '''\n    return(str1.split(ch1))\n    \n    \n    \ndef replace_chac_charac(str1, ch1, ch2):\n    '''\n    Write a function to replace the character at the first occurence of a character in a string with another character\n    '''\n    return(str1.replace(ch1, ch2))\n    \n    \n    \ndef check_palindrome(str1):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    if (str1[::-1].lower() == str1.lower()):\n        return(True)\n        \n    else:\n        return(False)\n        \n    \n    \ndef capitalize_first_charac(str1):\n    '''\n    Write a function to capitalize the first character of the string.\n    '''\n    return(str1.capitalize())\n    \n    \n    \ndef capitalize_each_charac(str1):\n    '''\n    Write a function to capitalize each character of the string.\n    '''\n    return(str1.title())\n    \n    \n    \ndef lower_case(str1):\n    '''\n    Write a function to convert the given string into lower case.\n    '''\n    return(str1.lower())\n    \n    \n    \ndef upper_case(str1):\n    '''\n    Write a function to convert the given string into upper case.\n    '''\n    return(str1.upper())\n    \n    \n    \ndef capitalize(str1):\n    '''\n    Write a function to capitalize the first character of each word of the string.\n    '''\n    return(str1.title())\n    \n    \n    \ndef capitalize_each_word(str1):\n    '''\n    Write a function to capitalize each word of the string.\n    '''\n    return(str1.title())\n    \n    \n    \ndef join_charac(str1, ch1):\n    '''\n    Write a function to join all the words of a string into a single string.\n    '''\n    return(ch1.join(str1))\n    \n    \n    \ndef join_charac_string(str1, ch1):\n    '''\n    Write a function to join all the words of a string into a single string.\n    '''\n    return(ch1.join(str1))\n    \n    \n    \ndef replace_chac(str1, ch1, ch2):\n    '''\n    Write a function to replace the character at the first occurence of a character in a string with another character.\n    '''\n    return(str1.replace(ch1, ch2))\n    \n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    return(str1.lower() == str1[::-1].lower())\n    \n    \n    \ndef remove_charac(str1, ch1):\n    '''\n    Write a function to remove the character at the given position of a string.\n    '''\n    return(str1.replace(ch1, \"\"))\n    \n    \n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether the given strings are anagrams or not.\n    '''\n    return(sorted(str1.lower()) == sorted(str2.lower()))\n    \n    \n    \ndef count_chac(str1, ch1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(str1.count(ch1))\n    \n    \n    \ndef count_chac_string(str1, ch1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(str1.count(ch1))\n    \n    \n    \ndef find_charac_with_chac(str1, ch1):\n    '''\n    Write a function to return the position of the first and last occurence of a character in a string\n    '''\n    return(str1.find(ch1), str1.rfind(ch1))\n    \n    \n    \ndef count_occurence_with_chac(str1, ch1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(str1.count(ch1))\n    \n    \n    \ndef remove_charac_with_chac(str1, ch1):\n    '''\n    Write a function to remove the character at the first and last occurence of a character in a string\n    '''\n    return(str1.replace(ch1, \"\"))\n    \n    \n    \ndef remove_chac_string_with_chac(str1, ch1):\n    '''\n    Write a function to remove the character at the first and last occurence of a character in a string\n    '''\n    return(str1.replace(ch1, \"\"))\n    \n    \n    \ndef remove_chac_string_replace_with_chac(str1, ch1):\n    '''\n    Write a function to remove the character at the first and last occurence of a character in a string\n    '''\n    return(str1.replace(ch1, \"\"))\n    \n    \n    \ndef remove_chac_replace_with_chac(str1, ch1, ch2):\n    '''\n    Write a function to remove the character at the first and last occurence of a character in a string\n    '''\n    return(str1.replace(ch1, ch2))\n    \n    \n    \ndef split_string_with_chac(str1, ch1):\n    '''\n    Write a function to split a string into words using a space as the delimiter.\n    '''\n    return(str1.split(ch1))\n    \n    \n    \ndef replace_chac_charac_with_chac(str1, ch1, ch2):\n    '''\n    Write a function to replace the character at the first occurence of a character in a string with another character\n    '''\n    return(str1.replace(ch1, ch2))\n    \n    \n    \ndef is_palindrome_with_chac(str1):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    return(str1.lower() == str1[::-"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count +=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count +=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    print(\"Total no of characters in string is: \",count)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \ndef count_charac_dict(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return {i:str1.count(i) for i in str1}\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_characters = 0\n    for i in range(0, len(str1)):\n        total_characters += len(str1[i])\n    return total_characters\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num = 0\n    for i in str1:\n        num += 1\n    return num\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True: \n        if int(math.sqrt(N)) < N: \n            N += 1\n        else: \n            break\n    return N \n    \ndef next_Perfect_Square_Optimized(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N, 2**31): \n        if int(math.sqrt(i)) == math.sqrt(i): \n            return i \n        \ndef is_Perfect_Square(N): \n    '''\n    Write a python function to find if a given number is a perfect square.\n    '''\n    # if N == 1: \n    #     return True \n    # if N == 4: \n    #     return True \n    # if N == 9: \n    #     return True \n    # if N == 16: \n    #     return True \n    # if N == 25: \n    #     return True \n    if int(math.sqrt(N)) == math.sqrt(N): \n        return True\n    else: \n        return False\n        \ndef is_Perfect_Square_Optimized(N): \n    '''\n    Write a python function to find if a given number is a perfect square.\n    '''\n    # if N == 1: \n    #     return True \n    # if N == 4: \n    #     return True \n    # if N == 9: \n    #     return True \n    # if N == 16: \n    #     return True \n    # if N == 25: \n    #     return True \n    \n    for i in range(1, N): \n        if i*i == N: \n            return True\n            \n    return False\n    \ndef is_Odd(N): \n    '''\n    Write a python function to check if a given number is odd or not.\n    '''\n    if N % 2 == 0: \n        return False\n    else: \n        return True\n        \ndef is_Odd_Optimized(N): \n    '''\n    Write a python function to check if a given number is odd or not.\n    '''\n    return N % 2 == 1\n    \ndef is_Even(N): \n    '''\n    Write a python function to check if a given number is even or not.\n    '''\n    if N % 2 == 0: \n        return True\n    else: \n        return False\n        \ndef is_Even_Optimized(N): \n    '''\n    Write a python function to check if a given number is even or not.\n    '''\n    return N % 2 == 0\n        \ndef is_Divisible_by_5(N): \n    '''\n    Write a python function to check if a given number is divisible by 5 or not.\n    '''\n    if N % 5 == 0: \n        return True\n    else: \n        return False\n        \ndef is_Divisible_by_5_Optimized(N): \n    '''\n    Write a python function to check if a given number is divisible by 5 or not.\n    '''\n    return N % 5 == 0\n    \ndef is_Divisible_by_13(N): \n    '''\n    Write a python function to check if a given number is divisible by 13 or not.\n    '''\n    if N % 13 == 0: \n        return True\n    else: \n        return False\n        \ndef is_Divisible_by_13_Optimized(N): \n    '''\n    Write a python function to check if a given number is divisible by 13 or not.\n    '''\n    return N % 13 == 0\n    \ndef reverse_Integer(N): \n    '''\n    Write a python function to reverse the given number.\n    '''\n    rev_N = 0 \n    while N > 0: \n        rev_N = rev_N*10 + N%10 \n        N //= 10 \n    return rev_N\n    \ndef reverse_Integer_Optimized(N): \n    '''\n    Write a python function to reverse the given number.\n    '''\n    # if N == 0: \n    #     return N \n    # if N >= 0: \n    #     rev_N = 0 \n    # else: \n    #     rev_N = -1 * N\n    # for i in range(len(str(N))): \n    #     rev_N += int(str(N)[i]) * 10**(len(str(N)) - i - 1)\n    # if N >= 0: \n    #     return rev_N \n    # else: \n    #     return -1 * rev_N \n    return int(str(N)[::-1])\n    \ndef reverse_Integer_With_Built_In_Function(N): \n    '''\n    Write a python function to reverse the given number.\n    '''\n    return int(str(N)[::-1])\n    \ndef fibonacci(N): \n    '''\n    Write a python function to find the Nth fibonacci number.\n    '''\n    if N == 0: \n        return 0 \n    if N == 1: \n        return 1 \n    return fibonacci(N-1) + fibonacci(N-2)\n    \ndef fibonacci_Optimized(N): \n    '''\n    Write a python function to find the Nth fibonacci number.\n    '''\n    F = [0, 1] \n    for i in range(2, N): \n        F.append(F[i-1] + F[i-2])\n    return F[N]\n    \ndef fibonacci_Sequence_Up_To(N): \n    '''\n    Write a python function to generate the fibonacci sequence up to a given number.\n    '''\n    F = [0, 1] \n    for i in range(2, N): \n        F.append(F[i-1] + F[i-2])\n    return F \n    \ndef is_Prime(N): \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if N == 2: \n        return True \n    if N == 3: \n        return True \n    if N % 2 == 0: \n        return False\n    if N % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if N % i == 0 or N % (i+2) == 0: \n            return False\n    return True\n    \ndef is_Prime_Optimized(N): \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if N == 2: \n        return True \n    if N == 3: \n        return True \n    if N % 2 == 0: \n        return False\n    if N % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if N % i == 0 or N % (i+2) == 0: \n            return False\n    return True\n    \ndef list_Prime_Numbers_Up_To(N): \n    '''\n    Write a python function to generate the list of prime numbers up to a given number.\n    '''\n    primes = [] \n    for i in range(2, N): \n        if is_Prime(i): \n            primes.append(i)\n    return primes\n    \ndef list_Prime_Numbers_Up_To_Optimized(N): \n    '''\n    Write a python function to generate the list of prime numbers up to a given number.\n    '''\n    primes = [] \n    for i in range(2, N): \n        if is_Prime_Optimized(i): \n            primes.append(i)\n    return primes\n    \ndef prime_Factors(N): \n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    primes = [] \n    for i in range(2, int(math.sqr"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N)%1 == 0: \n        return (int(math.sqrt(N)+1))**2 \n    else: \n        return -1 \n    \n    \ndef min_len_search(arr, n):\n    '''\n    Given an array of positive integers, find the minimum length subarray such that the absolute difference between any \n    two elements of this subarray is less than or equal to 1.\n    '''\n    for i in range(0, n): \n        j = i + 1\n        if j == n: \n            break\n        while j < n and (arr[j] - arr[i]) <= 1: \n            j += 1\n        print(i, j)\n    return (j - i + 1) \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    SQRT = N ** 0.5\n    return int((SQRT + 1)**2)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 2\n    if N<0:\n        return -1\n    if math.ceil(math.sqrt(N)) == math.sqrt(N): \n        return math.ceil(math.sqrt(N))\n    else: \n        return math.ceil(math.sqrt(N))+1\n  \ndef isPerfectSquare(N): \n    '''\n    Write a python function to check if a given number is a perfect square number.\n    '''\n    if N < 0: \n        return False\n    else:\n        return int(math.sqrt(N)) ** 2 == N \n  \ndef isFibonacci(N): \n    '''\n    Write a python function to check if a given number is a Fibonacci number.\n    '''\n    if N <= 1: \n        return True\n    first = 0\n    second = 1\n    for i in range(2, N+1): \n        third = first + second\n        if third == N: \n            return True\n        first = second \n        second = third \n    return False\n  \ndef checkParity(N): \n    '''\n    Write a python function to check if a given number is even or odd.\n    '''\n    if N % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n  \ndef convertToDecimal(N): \n    '''\n    Write a python function to convert an octal number into its decimal representation.\n    '''\n    convert = 0\n    while N!= 0:\n        reminder = N % 10\n        N = int(N / 10)\n        convert = convert + (reminder * math.pow(8, (len(str(N)))))\n    return convert\n  \ndef findSumOfDigits(N): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    if N < 0: \n        return \"Invalid input\"\n    else:\n        return int(N % 10 + (N/10) % 10 + (N/100) % 10 + (N/1000) % 10 + (N/10000) % 10) \n  \ndef findSumOfDigits_2(N): \n    '''\n    Write a python function to find the sum of digits of a given number using a built-in function.\n    '''\n    return sum([int(x) for x in list(str(N))])\n  \ndef findDifference(N1, N2): \n    '''\n    Write a python function to find the difference between 2 given numbers.\n    '''\n    if N1 < N2: \n        return N2 - N1\n    else: \n        return N1 - N2\n  \ndef sumOfSquare(N): \n    '''\n    Write a python function to sum of squares of digits of a given number.\n    '''\n    if N < 0: \n        return \"Invalid input\"\n    else:\n        return (N % 10) ** 2 + (N/10) % 10 ** 2 + (N/100) % 10 ** 2 + (N/1000) % 10 ** 2 + (N/10000) % 10 ** 2\n  \ndef isFibonacci(N): \n    '''\n    Write a python function to check if a given number is a Fibonacci number.\n    '''\n    if N <= 1: \n        return True\n    first = 0\n    second = 1\n    for i in range(2, N+1): \n        third = first + second\n        if third == N: \n            return True\n        first = second \n        second = third \n    return False\n  \ndef sumOfDigits(N): \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    if N < 0: \n        return \"Invalid input\"\n    else:\n        return int(N % 10 + (N/10) % 10 + (N/100) % 10 + (N/1000) % 10 + (N/10000) % 10) \n  \ndef isPalindrome(N): \n    '''\n    Write a python function to check if a given number is a palindrome or not.\n    '''\n    if N < 0: \n        return \"Invalid input\"\n    else:\n        return str(N) == str(N)[::-1] \n  \ndef decimalToBinary(N): \n    '''\n    Write a python function to convert a decimal number to its binary representation.\n    '''\n    return bin(N)[2:] \n  \ndef decimalToOctal(N): \n    '''\n    Write a python function to convert a decimal number to its octal representation.\n    '''\n    return oct(N)[2:] \n  \ndef decimalToHexadecimal(N): \n    '''\n    Write a python function to convert a decimal number to its hexadecimal representation.\n    '''\n    return hex(N)[2:] \n  \ndef decimalToRoman(N): \n    '''\n    Write a python function to convert a decimal number to its roman representation.\n    '''\n    if N > 3999 or N < 1: \n        return \"Invalid input\"\n    numeralOrder = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1] \n    numeralLetters = {1000 : \"M\", 900 : \"CM\", 500 : \"D\", 400 : \"CD\", 100 : \"C\", 90 : \"XC\", 50 : \"L\", 40 : \"XL\", 10 : \"X\", 9 : \"IX\", 5 : \"V\", 4 : \"IV\", 1 : \"I\"} \n    result = '' \n    for value in numeralOrder: \n        while N >= value: \n            result += numeralLetters[value] \n            N -= value \n    return result \n  \ndef decimalToRoman_2(N): \n    '''\n    Write a python function to convert a decimal number to its roman representation.\n    '''\n    numeralOrder = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1] \n    numeralLetters = {\"M\" : 1000, \"CM\" : 900, \"D\" : 500, \"CD\" : 400, \"C\" : 100, \"XC\" : 90, \"L\" : 50, \"XL\" : 40, \"X\" : 10, \"IX\" : 9, \"V\" : 5, \"IV\" : 4, \"I\" : 1} \n    result = '' \n    for value in numeralOrder: \n        while N >= value: \n            result += numeralLetters[value] \n            N -= value \n    return result \n  \ndef isVowel(ch): \n    '''\n    Write a python function to check if a given character is a vowel or not.\n    '''\n    return ch.upper() in \"AEIOU\" \n  \ndef vowelWords(S): \n    '''\n    Write a python function to return the count of vowels in a given string.\n    '''\n    return sum([1 for ch in S if isVowel(ch)]) \n  \ndef vowelWords_2(S): \n    '''\n    Write a python function to return the count of vowels in a given string using a built-in function.\n    '''\n    return len([ch for ch in S if isVowel(ch)]) \n  \ndef factorial(N): \n    '''\n    Write a python function to return the factorial of a given number.\n    '''\n    if N < 0: \n        return \"Invalid input\"\n    elif N == 0: \n        return 1\n    else:\n        return N * factorial(N - 1) \n  \ndef factorial_2(N): \n    '''\n    Write a python function to return the factorial of a given number using a built-in function.\n    '''\n    return math.factorial(N) \n  \ndef sumOfFactorials(N): \n    '''\n    Write a python function to return the sum of factorials of a given number.\n    '''\n    sum = 0\n    for i in range(1, N+1): \n        sum += factorial(i) \n    return sum \n  \ndef sumOfFactorials_2(N): "
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt = math.sqrt(N)\n    if int(sqrt + 1)**2 == N:\n        return (int(sqrt + 1))**2\n    else:\n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    Sqrt = int(math.sqrt(N)) \n    if (Sqrt * Sqrt) == N: \n        return (Sqrt + 1) * (Sqrt + 1) \n    while (Sqrt * Sqrt) < N: \n        Sqrt = Sqrt + 1\n    return Sqrt * Sqrt \n  "
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # return the next square number\n    return (math.ceil(math.sqrt(N))+1)**2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N + 1): \n        if (math.sqrt(i) == int(math.sqrt(i))): \n            return (i) \n  "
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = int(math.sqrt(N))\n    for i in range(square,1,-1):\n        if (i**2) < N:\n            return (i**2)\n        else:\n            continue\n        \n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.sqrt(N)\n    if x == int(x):\n        return (int(x) + 1) ** 2\n    return -1\ndef next_Perfect_Square_v2(N):\n    import math  \n    return (int(math.sqrt(N))+1)**2\nprint(next_Perfect_Square(5)) # 6\nprint(next_Perfect_Square_v2(5)) # 6\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr or len(arr)<=1:\n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        sum = arr[i]\n        j = i\n        while j >= 1 and arr[j-1] > arr[j]:\n            sum += arr[j-1]\n            j -= 1\n        sum += arr[j]\n        if sum > max_sum:\n            max_sum = sum\n    \n    for i in range(len(arr) - 1, -1, -1):\n        sum = arr[i]\n        j = i\n        while j <= len(arr) - 2 and arr[j+1] < arr[j]:\n            sum += arr[j+1]\n            j += 1\n        sum += arr[j]\n        if sum > max_sum:\n            max_sum = sum\n    \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # sum of max bitonic subarray of size 3\n    def sumOf3(arr, n):\n        if n < 3:\n            return -1\n        max1 = max2 = arr[0] + arr[1]\n        max1_idx = 0\n        max2_idx = 1\n        i = 2\n        while i < n:\n            max2 = max(max2, max1 + arr[i])\n            max1 = max(max1, max2 + arr[i])\n            if max1 > max2:\n                max1_idx = i\n            max2_idx = i\n            i += 1\n        return max1\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # O(N) Time / O(1) Space\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    for i in range(1, len(arr)):\n        curr_sum = max(curr_sum + arr[i], arr[i])\n        max_sum = max(max_sum, curr_sum)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # find the maximum element in the array\n    max_ending_here = max(arr)\n    \n    # find the maximum element in the array starting at the end\n    max_so_far = 0\n    for i in range(len(arr) - 1, -1, -1):\n        max_so_far = max(max_so_far, max_ending_here)\n        max_ending_here = max(max_ending_here, arr[i])\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #initialize current sum to 0 and max sum to 0\n    current_sum = 0\n    max_sum = 0\n    #iterate through array\n    for i in range(len(arr)):\n        #if value is greater than previous value, increment sum by value\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        #if value is less than previous value, set max sum to current sum and reset current sum\n        elif arr[i] < arr[i-1]:\n            max_sum = max(current_sum, max_sum)\n            current_sum = arr[i]\n        #if value is equal to previous value, reset current sum and continue\n        elif arr[i] == arr[i-1]:\n            current_sum = 0\n    max_sum = max(current_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_subsequence_sum(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_sum_recur(low, high):\n        if low == high:\n            return arr[low]\n        mid = (low+high)//2\n        return max(max_sum_recur(low, mid), max_sum_recur(mid+1, high), max_sum_recur_helper(low, mid, high))\n    return max_sum_recur(0, len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # array is bitonic if it is first increasing then decreasing\n    n = len(arr)\n    # DP[i] stores the maximum sum of a bitonic subarray ending at index i\n    DP = [0 for _ in range(n)]\n    # prefix stores the maximum sum of a bitonic subarray ending at index i\n    # which is equal to DP[i - 1] + arr[i - 1]\n    prefix = [0 for _ in range(n)]\n    for i in range(1, n):\n        # index i is always bitonic\n        DP[i] = arr[i]\n        # If index i - 1 is also bitonic, then we can take arr[i - 1]\n        if i > 1 and DP[i - 2] < arr[i - 1]:\n            DP[i] += DP[i - 2] + arr[i - 1]\n        prefix[i] = prefix[i - 1] + arr[i]\n        # If index i - 1 is decreasing, then we can take arr[i]\n        if i > 1 and arr[i - 1] < arr[i - 2]:\n            DP[i] = max(DP[i], prefix[i - 1])\n    return DP[n - 1]\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = 1.0\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    tolerance = 0.000001\n    difference = abs(guess ** 2 - number)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #create an initial guess\n    guess = 1\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    approx = number / 2\n    \n    while True:\n        better = (approx + number / approx) / 2\n        if abs(better - approx) < 0.001:\n            return better\n        approx = better\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.01\n    estimate = 1.0\n    while True:\n        next_estimate = (estimate + number / estimate) / 2\n        difference = abs(next_estimate - estimate)\n        if difference < epsilon:\n            return next_estimate\n        estimate = next_estimate\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    guess = 1\n    while abs(guess * guess - number) > 0.001:\n        guess = ((guess + number / guess) / 2)\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    guess = 1\n    while x > 1:\n        guess = (guess + x / guess) / 2\n        x = number / guess\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = float(number) / 2\n    while True:\n        better = (approx + number / approx) / 2\n        print(\"better: \" + str(better))\n        if abs(approx - better) < 0.001:\n            return better\n        approx = better\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approximation = number/2.0\n    while True:\n        better = (approximation + number/approximation)/2.0\n        if better == approximation:\n            return better\n        approximation = better\n        \nprint(babylonian_squareroot(9))\nprint(babylonian_squareroot(10))\nprint(babylonian_squareroot(16))\nprint(babylonian_squareroot(81))\nprint(babylonian_squareroot(135))\nprint(babylonian_squareroot(4096))\nprint(babylonian_squareroot(65536))\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    try:\n        number = int(number)\n        assert number > 0\n    except:\n        return 'Error: input was not an integer'\n    \n    if (number == 0) or (number == 1):\n        return number\n    \n    guess = number // 2\n    while True:\n        quotient = number // guess\n        remainder = number % guess\n        next_guess = (guess + remainder) // quotient\n        if next_guess == guess:\n            return guess\n        guess = next_guess\n        \n        \ndef binary_search(input_list, number):\n    '''\n    Write a function for finding the index of a number in a given list using binary search.\n    '''\n    try:\n        assert isinstance(input_list, list)\n        assert isinstance(number, int)\n    except:\n        return 'Error: input was not a list'\n    \n    if len(input_list) == 0:\n        return -1\n    if len(input_list) == 1:\n        return 0 if input_list[0] == number else -1\n        \n    mid = len(input_list) // 2\n    \n    if input_list[mid] < number:\n        return binary_search(input_list[mid + 1:], number) + mid + 1\n    elif input_list[mid] > number:\n        return binary_search(input_list[:mid], number)\n    else:\n        return mid\n        \n    \ndef is_prime(n):\n    '''\n    Write a function for determining whether a number is prime or not.\n    '''\n    try:\n        n = int(n)\n        assert n > 0\n    except:\n        return 'Error: input was not an integer'\n    \n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n        \n    \ndef is_palindrome(input_string):\n    '''\n    Write a function for determining whether a string is a palindrome.\n    '''\n    try:\n        assert isinstance(input_string, str)\n    except:\n        return 'Error: input was not a string'\n    \n    input_string = input_string.lower().replace(' ', '')\n    return input_string == input_string[::-1]\n    \n    \ndef is_power(base, exponent):\n    '''\n    Write a function for determining whether a number is a power of another number.\n    '''\n    try:\n        assert isinstance(base, int)\n        assert isinstance(exponent, int)\n    except:\n        return 'Error: input was not an integer'\n    \n    if base == 0:\n        return False\n    if base == 1:\n        return True\n    if exponent == 1:\n        return True\n    return base ** exponent == base\n    \n    \ndef remove_duplicates(input_list):\n    '''\n    Write a function for removing duplicate items in a list.\n    '''\n    try:\n        assert isinstance(input_list, list)\n    except:\n        return 'Error: input was not a list'\n    \n    if len(input_list) == 0:\n        return []\n    \n    return list(set(input_list))\n    \n    \ndef reverse_list(input_list):\n    '''\n    Write a function for reversing the order of items in a list.\n    '''\n    try:\n        assert isinstance(input_list, list)\n    except:\n        return 'Error: input was not a list'\n    \n    if len(input_list) == 0:\n        return []\n    \n    if len(input_list) == 1:\n        return input_list\n    \n    return input_list[-1:] + reverse_list(input_list[:-1])\n    \n    \ndef single_letter_count(input_string):\n    '''\n    Write a function for counting the number of times a letter appears in a string.\n    '''\n    try:\n        assert isinstance(input_string, str)\n    except:\n        return 'Error: input was not a string'\n    \n    if len(input_string) == 0:\n        return []\n    \n    return [input_string.count(i) for i in list(set(input_string))]\n    \n    \ndef smallest_positive_missing_integer(input_list):\n    '''\n    Write a function for finding the smallest positive integer missing from an unsorted list.\n    '''\n    try:\n        assert isinstance(input_list, list)\n    except:\n        return 'Error: input was not a list'\n    \n    if len(input_list) == 0:\n        return 1\n    \n    input_list = list(set(input_list))\n    if min(input_list) > 0:\n        return min(input_list)\n    if max(input_list) < 0:\n        return 1\n    if 1 not in input_list:\n        return 1\n    if max(input_list) + 1 not in input_list:\n        return max(input_list) + 1\n    \n    for i in range(1, max(input_list) + 2):\n        if i not in input_list:\n            return i\n            \n    \ndef sort_words(input_string):\n    '''\n    Write a function for sorting a string of words in alphabetical order.\n    '''\n    try:\n        assert isinstance(input_string, str)\n    except:\n        return 'Error: input was not a string'\n    \n    if len(input_string) == 0:\n        return ''\n    \n    return''.join(sorted(input_string.split()))\n    \n    \ndef unique_in_order(input_string):\n    '''\n    Write a function for removing duplicate characters in a string.\n    '''\n    try:\n        assert isinstance(input_string, str)\n    except:\n        return 'Error: input was not a string'\n    \n    if len(input_string) == 0:\n        return ''\n    \n    return ''.join(sorted(set(input_string)))\n    \n    \ndef is_anagram(input_string_one, input_string_two):\n    '''\n    Write a function for determining if two strings are anagrams of each other.\n    '''\n    try:\n        assert isinstance(input_string_one, str)\n        assert isinstance(input_string_two, str)\n    except:\n        return 'Error: input was not a string'\n    \n    if len(input_string_one)!= len(input_string_two):\n        return False\n    \n    input_string_one = input_string_one.lower()\n    input_string_two = input_string_two.lower()\n    return sorted(input_string_one) == sorted(input_string_two)\n    \n    \ndef average_of_list(input_list):\n    '''\n    Write a function for finding the average of a list of numbers.\n    '''\n    try:\n        assert isinstance(input_list, list)\n    except:\n        return 'Error: input was not a list'\n    \n    if len(input_list) == 0:\n        return 0\n    \n    return sum(input_list) / len(input_list)\n    \n    \ndef common_elements(input_list_one, input_list_two):\n    '''\n    Write a function for finding common elements from two lists.\n    '''\n    try:\n        assert isinstance(input_list_one, list)\n        assert isinstance(input_list_two, list)\n    except:\n        return 'Error: input was not a list'\n    \n    if len(input_list_one) == 0:\n        return []\n    if len(input_list_two) == 0:\n        return []\n    \n    return [x for x in input_list_one if x in input_list_two]\n    \n    \ndef rotate_list(input_list, n):\n    '''\n    Write a function for rotating a list by a specified number of steps.\n    '''\n    try:\n        assert isinstance(input_list, list)\n        assert isinstance(n, int)\n    except:\n        return 'Error: input was not a list'\n    \n    if len(input_list) == 0:\n    "
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for x in range(n)]for y in range(n)]\n    for i in range(n): \n        dp[i][i] = 1\n    for j in range(1, n): \n        for i in range(0, j): \n            if (str[i] == str[j] and (j - i <= 2 or dp[i + 1][j - 1])) or (str[i] == str[j] and (dp[i + 1][j] == 1 or dp[i][j - 1])): \n                dp[i][j] = 1 if dp[i + 1][j - 1] else 2\n            else: \n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) \n    return dp[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)]for y in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    for cl in range(2,n+1):\n        for i in range(n-cl+1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                table[i][j] = 2\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n    return table[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    lps = [[False for i in range(n)] for i in range(n)]\n    # Build table lps[][] in bottom up manner \n    for i in range(n): \n        lps[i][i] = True\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            lps[i][i+1] = True\n            start = i\n            end = i+1\n            maxLength = 2\n    for start in range(n-1):\n        for end in range(start+1, n):\n            if str[start] == str[end] and lps[start+1][end-1]:\n                lps[start][end] = True\n                if maxLength < end-start+1:\n                    maxLength = end-start+1\n                    start_index = start\n                    end_index = end\n    print(\"Longest palindromic subsequence is: \", str[start_index:end_index+1])\n    return maxLength\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return longest_palindromic_subsequence(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n)] for j in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    return sum(1 / x for x in range(1, n + 1))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1 + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1/n + (harmonic_sum(n-1))\n    #pass\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + sum([1 / i for i in range(1, n)])\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/(n - 1) + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n-1) + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict1={}\n    for i in array_nums1:\n        if i not in dict1:\n            dict1[i]=1\n    intersection=[]\n    for j in array_nums2:\n        if j in dict1:\n            intersection.append(j)\n    return intersection\n    \nprint(intersection_array([1,2,2,1],[2,2])"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set2&set1)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1.intersection(set_nums2))\n    \nif __name__ == '__main__':\n    array_nums1 = [1,2,2,1]\n    array_nums2 = [2,2]\n    print(intersection_array(array_nums1,array_nums2)"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = array_nums1\n    nums2 = array_nums2\n    array_intersection = []\n    #iterate through nums1\n    for num in nums1:\n        #check if num is in nums2\n        if num in nums2:\n            #if so add num to the list\n            array_intersection.append(num)\n    return array_intersection\n    "
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1_sorted = sorted(array_nums1)\n    array_nums2_sorted = sorted(array_nums2)\n    array_nums_intersection = []\n    i = 0\n    j = 0\n    while i < len(array_nums1_sorted) and j < len(array_nums2_sorted):\n        if array_nums1_sorted[i] == array_nums2_sorted[j]:\n            array_nums_intersection.append(array_nums1_sorted[i])\n            i += 1\n            j += 1\n        elif array_nums1_sorted[i] < array_nums2_sorted[j]:\n            i += 1\n        else:\n            j += 1\n    return array_nums_intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in set(array_nums1) if x in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    if set1 == set2:\n        return array_nums1\n    else:\n        return_list = []\n        for element in set1:\n            if element in set2:\n                return_list.append(element)\n        return return_list\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # set1 = set(array_nums1)\n    # set2 = set(array_nums2)\n    # return list(set1&set2)\n    # return [i for i in array_nums1 if i in array_nums2]\n    # return [i for i in array_nums1 if i in array_nums2]\n    return [i for i in array_nums1 if i in array_nums2]\nprint(intersection_array([1,2,3,4,5], [1,2,4,6,7]))\nprint(intersection_array([1,2,3,4,5], [1,2,5,6,7])"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in array_nums1:\n        if i not in d1:\n            d1[i] = 1\n        else:\n            d1[i] += 1\n    for j in array_nums2:\n        if j not in d2:\n            d2[j] = 1\n        else:\n            d2[j] += 1\n    result = []\n    for key in d1:\n        if key in d2:\n            if d1[key] == d2[key]:\n                result.append(key)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    d={}\n    res=[]\n    for i in array_nums1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in array_nums2:\n        if i in d:\n            if d[i]>0:\n                d[i]-=1\n                res.append(i)\n    return res\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for a in tup:\n        if a == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # tup = (1,2,1,4,5,6,4,8,4,4,4,6,8,9,10,4,4)\n    # x = 4\n    # Your Code Here\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if x not in tup:\n        return 0\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # count = 0\n    # for i in tup:\n    #     if i == x:\n    #         count += 1\n    # return count\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if(x == i):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for y in tup:\n        if y == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if i == (len(list)-1):\n            list.append(element)\n        else:\n            list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    return list\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for x in list:\n        list.insert(list.index(x),element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    else:\n        return [list[0]] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    list.append(element)\n    index = len(list)\n    for i in range(index):\n        if i == 0:\n            list.insert(i,element)\n        else:\n            list.insert(i,element)\n            list.pop()\n    return list\nprint(insert_element([1,2,3],0))\nprint(insert_element([1,2,3],4))\nprint(insert_element([1,2,3],0))\nprint(insert_element([2,4,6,8],7))\nprint(insert_element([2,4,6,8],4))\nprint(insert_element([2,4,6,8],5))\nprint(insert_element([2,4,6,8],0))\nprint(insert_element([2,4,6,8],9))\nprint(insert_element([2,4,6,8],10))\nprint(insert_element([2,4,6,8],11))\nprint(insert_element([2,4,6,8],12))\nprint(insert_element([2,4,6,8],13))\nprint(insert_element([2,4,6,8],14))\nprint(insert_element([2,4,6,8],15))\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    return [list[0]] + [element] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i!= len(list)-1:\n            result.append(element)\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #create new list\n    new_list = []\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        list.insert(i,element)\n        i += 1\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(complex(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    l = []\n    for x in numbers:\n        ans = cmath.polar(x)\n        l.append(ans)\n    return l\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)==complex:\n        return cmath.polar(numbers)\n    else:\n        return \"Input is not a complex number\"\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    new_list = []\n    for num in numbers:\n        a = num.real\n        b = num.imag\n        r = (num.real**2 + num.imag**2)**(1/2)\n        theta = cmath.atan(num.imag/num.real)\n        new_list.append((r,theta))\n    return new_list\n        \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        r=cmath.polar(numbers[i])\n        print(r)\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r=numbers.real\n    i=numbers.imag\n    return (r,i)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers) is list:\n        return [complex_to_polar(i) for i in numbers]\n    else:\n        return complex_to_polar(numbers)\n    \ndef complex_to_polar(n):    \n    '''\n    Write a python function to convert a complex number to polar coordinates.\n    '''\n    return (cmath.polar(n))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)==complex:\n        return cmath.polar(numbers)\n    elif type(numbers)==list:\n        res=[]\n        for i in numbers:\n            res.append(convert(i))\n        return res\n    else:\n        return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    theta = cmath.phase(numbers)\n    r = abs(numbers)\n    return (theta,r)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        if cmath.isnan(num):\n            polar_coordinates.append((num, cmath.nan))\n        else:\n            complex_num = complex(num)\n            real_num = num.real\n            imag_num = num.imag\n            angle = cmath.polar(complex_num)[1]\n            magnitude = cmath.polar(complex_num)[0]\n            polar_coordinates.append((real_num, imag_num, angle, magnitude))\n    return(polar_coordinates)\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i,int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if type(i) == int])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i == int(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l)<n:\n        return None\n    comb = []\n    comb = combinations_with_replacement(l,n)\n    return comb\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l) + 1):\n        for subset in combinations_with_replacement(l, i):\n            if len(subset) == n:\n                combs.append(tuple(subset))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    if len(l) < n:\n        return []\n    comb = []\n    for i in range(n):\n        comb.append(l[i])\n    return [tuple(comb)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [ tuple(combination) for combination in combinations_with_replacement(l,n) ]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) + 1):\n        result.extend(list(combinations_with_replacement(l, i)))\n    return result[1:]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        x = list(combinations_with_replacement(l, n))\n        for j in range(len(x)):\n            combinations.append(x[j])\n    return combinations\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # write code here\n    if n < 2:\n        return 0\n    isPrime = [1] * n\n    isPrime[0] = isPrime[1] = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    #check if input is a positive integer\n    if n <= 0:\n        print(\"Input must be a positive integer.\")\n        return 0\n        \n    #assume every number up to input is prime\n    primes = [2]\n    \n    #find all the other primes up to the input\n    for i in range(3, n, 2):\n        prime = True\n        \n        #check if prime by dividing it by the primes in the list\n        for j in primes:\n            if i % j == 0:\n                prime = False\n                break\n        \n        #if the number is a prime, add it to the list\n        if prime:\n            primes.append(i)\n            \n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def count_Primes(n):\n        primes = [1] * n\n        primes[0] = 0\n        primes[1] = 0\n        for i in range(2, int(n**0.5)+1):\n            if primes[i]:\n                for j in range(i*i, n, i):\n                    primes[j] = 0\n        return sum(primes)\n    return count_Primes(n)\n    "
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n <= 0:\n        return 0\n    \n    prime = [1] * n\n    prime[0] = 0\n    prime[1] = 0\n    \n    i = 2\n    while i*i <= n:\n        if prime[i] == 1:\n            for j in range(i*i, n, i):\n                prime[j] = 0\n        i += 1\n    return prime.count(1)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #TODO: Implement and document your solution.\n    pass\n    \ndef count_Primes_sieve(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number using Sieve of Eratosthenes.\n    '''\n    #TODO: Implement and document your solution.\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = []\n    for i in range(2, n+1):\n        primes.append(i)\n    for i in range(2, int(n**0.5)+1):\n        if i in primes:\n            for j in range(i*i, n+1, i):\n                if j in primes:\n                    primes.remove(j)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    is_prime = [True for i in range(n+1)]\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i] is True:\n            for j in range(2*i, n+1, i):\n                is_prime[j] = False\n    return is_prime.count(True)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime_count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            prime_count += 1\n    return prime_count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    count = 1\n    for i in range(2,n):\n        if is_Prime(i):\n            count +=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    prime_nums = [2,3,5,7]\n    if n in prime_nums:\n        return 1\n    for num in prime_nums:\n        if n % num == 0:\n            break\n        if num * num >= n:\n            prime_nums.append(n)\n            break\n    else:\n        prime_nums.append(n)\n    return len(prime_nums) - 1\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = (b,a)\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    (a,b) = (b,a)\n    return (a,b)\nprint(swap_numbers(1,2))\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # print(\"a is: \",a)\n    # print(\"b is: \",b)\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1),max(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #output = [i * j for i, j in zip(test_tup1, test_tup2)]\n    #return tuple(output)\n    return (test_tup1[0] * test_tup2[1], test_tup1[1] * test_tup2[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Define your function here\n    def max_tup(tup1, tup2):\n        a, b = max(tup1), max(tup2)\n        c = a if a > b else b\n        t = tuple(x for x in [a, b, c] if x not in tup1 and x not in tup2)\n        return t\n    return max_tup(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #print(len(test_tup1), len(test_tup2))\n    #print(test_tup1)\n    #print(test_tup2)\n    #print(sorted(test_tup1))\n    #print(sorted(test_tup2))\n    test_tup1_max = sorted(test_tup1)[::-1]\n    test_tup2_max = sorted(test_tup2)[::-1]\n    #print(test_tup1_max)\n    #print(test_tup2_max)\n    #print(sorted(test_tup1)[::-1])\n    #print(sorted(test_tup2)[::-1])\n    test_tup_max = []\n    for i in range(len(test_tup1_max)):\n        if i <= len(test_tup2_max) - 1:\n            test_tup_max.append(test_tup1_max[i] + test_tup2_max[i])\n    return test_tup_max\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup_one = max(test_tup1)\n    tup_two = max(test_tup2)\n    return (tup_one, tup_two)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if sum(test_tup1) >= sum(test_tup2) else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_el1 = max(test_tup1)\n    max_el2 = max(test_tup2)\n    print(max(max_el1, max_el2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if (len(test_tup1) == len(test_tup2)):\n        return test_tup1 if sum(test_tup1) > sum(test_tup2) else test_tup2\n    else:\n        return None\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return min(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1])\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        '''\n        Return True if n is prime and False if n is not prime\n        '''\n        if n<=1:\n            return False\n        elif n==2:\n            return True\n        else:\n            for i in range(2,n):\n                if n%i==0:\n                    return False\n            return True\n    def nth_prime(n):\n        '''\n        Return the nth prime number\n        '''\n        num=3\n        prime=2\n        while n>0:\n            if is_prime(num):\n                prime=num\n                n=n-1\n            num=num+1\n        return prime\n    return nth_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Create a list of all primes in the specified range\n    list_of_primes = list(primerange(2, n))\n    # Create a list of all even numbers up to the specified range\n    list_of_evens = list(range(2,n,2))\n    # Create a list of all odd numbers up to the specified range\n    list_of_odds = list(range(3,n,2))\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # The number of primes strictly less than n. \n    numberOfPrimes = 0\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return next(newman_shanks_williams(n))\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 4\n    if n == 1: \n        return 2\n    else: \n        while n > 2:\n            n -= 1\n            a += 2\n            a = 2 * a - 1\n            if Miller_Rabin_test(a, 5, n):\n                return a\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables.\n    primes = [2]\n    number = 2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # n = int(input())\n    def root(num, p):\n        return num**(1/p)\n    def is_prime(n):\n        for i in range(2, int(n**(0.5))+1):\n            if n%i == 0:\n                return False\n        return True\n    def primorial(n):\n        p_list = []\n        for i in range(n+1):\n            if is_prime(i):\n                p_list.append(i)\n        return p_list\n    def newman_shanks(n):\n        primo_list = primorial(n)\n        primes = []\n        for i in range(len(primo_list)):\n            for j in range(len(primo_list)):\n                if is_prime(int((root(primo_list[i], j))**n)):\n                    primes.append(int((root(primo_list[i], j))**n))\n        return primes\n    primes = newman_shanks(n)\n    return primes[-1]\nprint(newman_prime(10001))\nprint(newman_prime(5))\nprint(newman_prime(6))\nprint(newman_prime(7))\nprint(newman_prime(8))\nprint(newman_prime(9))\nprint(newman_prime(10))\nprint(newman_prime(11))\nprint(newman_prime(12))\nprint(newman_prime(13))\nprint(newman_prime(14))\nprint(newman_prime(15))\nprint(newman_prime(16))\nprint(newman_prime(17))\nprint(newman_prime(18))\nprint(newman_prime(19))\nprint(newman_prime(20))\nprint(newman_prime(21))\nprint(newman_prime(22))\nprint(newman_prime(23))\nprint(newman_prime(24))\nprint(newman_prime(25))\nprint(newman_prime(26))\nprint(newman_prime(27))\nprint(newman_prime(28))\nprint(newman_prime(29))\nprint(newman_prime(30))\nprint(newman_prime(31))\nprint(newman_prime(32))\nprint(newman_prime(33))\nprint(newman_prime(34))\nprint(newman_prime(35))\nprint(newman_prime(36))\nprint(newman_prime(37))\nprint(newman_prime(38))\nprint(newman_prime(39))\nprint(newman_prime(40))\nprint(newman_prime(41))\nprint(newman_prime(42))\nprint(newman_prime(43))\nprint(newman_prime(44))\nprint(newman_prime(45))\nprint(newman_prime(46))\nprint(newman_prime(47))\nprint(newman_prime(48))\nprint(newman_prime(49))\nprint(newman_prime(50))\nprint(newman_prime(51))\nprint(newman_prime(52))\nprint(newman_prime(53))\nprint(newman_prime(54))\nprint(newman_prime(55))\nprint(newman_prime(56))\nprint(newman_prime(57))\nprint(newman_prime(58))\nprint(newman_prime(59))\nprint(newman_prime(60))\nprint(newman_prime(61))\nprint(newman_prime(62))\nprint(newman_prime(61))\nprint(newman_prime(60))\nprint(newman_prime(59))\nprint(newman_prime(58))\nprint(newman_prime(57))\nprint(newman_prime(56))\nprint(newman_prime(55))\nprint(newman_prime(54))\nprint(newman_prime(53))\nprint(newman_prime(52))\nprint(newman_prime(51))\nprint(newman_prime(50))\nprint(newman_prime(49))\nprint(newman_prime(48))\nprint(newman_prime(47))\nprint(newman_prime(46))\nprint(newman_prime(45))\nprint(newman_prime(44))\nprint(newman_prime(43))\nprint(newman_prime(42))\nprint(newman_prime(41))\nprint(newman_prime(40))\nprint(newman_prime(39))\nprint(newman_prime(38))\nprint(newman_prime(37))\nprint(newman_prime(36))\nprint(newman_prime(35))\nprint(newman_prime(34))\nprint(newman_prime(33))\nprint(newman_prime(32))\nprint(newman_prime(31))\nprint(newman_prime(30))\nprint(newman_prime(29))\nprint(newman_prime(28))\nprint(newman_prime(27))\nprint(newman_prime(26))\nprint(newman_prime(25))\nprint(newman_prime(24))\nprint(newman_prime(23))\nprint(newman_prime(22))\nprint(newman_prime(21))\nprint(newman_prime(20))\nprint(newman_prime(19))\nprint(newman_prime(18))\nprint(newman_prime(17))\nprint(newman_prime(16))\nprint(newman_prime(15))\nprint(newman_prime(14))\nprint(newman_prime(13))\nprint(newman_prime(12))\nprint(newman_prime(11))\nprint(newman_prime(10))\nprint(newman_prime(9))\nprint(newman_prime(8))\nprint(newman_prime(7))\nprint(newman_prime(6))\nprint(newman_prime(5))\nprint(newman_prime(4))\nprint(newman_prime(3))\nprint(newman_prime(2))\nprint(newman_prime(1))\nprint(newman_prime(0))"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n <= 1: return 1\n    if n == 2: return 7\n    if n == 3: return 19\n    \n    n2 = n*2\n    n3 = n*3\n    \n    n2_f, n3_f = newman_prime(n2), newman_prime(n3)\n    \n    return n2_f - n3_f\n    \n    \ndef solve(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    nums = set(range(n))\n    \n    for x in range(2,n):\n        nums.remove(x) if x % 2 == 0 else None\n        \n        for y in range(2,x):\n            if x % y == 0:\n                nums.remove(x)\n                break\n    \n    return len(nums)\n    \n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        raise ValueError\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 79\n    if n == 23:\n        return 83\n    if n == 24:\n        return 89\n    if n == 25:\n        return 97\n    if n == 26:\n        return 101\n    if n == 27:\n        return 103\n    if n == 28:\n        return 107\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 127\n    if n == 32:\n        return 131\n    if n == 33:\n        return 137\n    if n == 34:\n        return 139\n    if n == 35:\n        return 149\n    if n == 36:\n        return 151\n    if n == 37:\n        return 157\n    if n == 38:\n        return 163\n    if n == 39:\n        return 167\n    if n == 40:\n        return 173\n    if n == 41:\n        return 179\n    if n == 42:\n        return 181\n    if n == 43:\n        return 191\n    if n == 44:\n        return 193\n    if n == 45:\n        return 197\n    if n == 46:\n        return 199\n    if n == 47:\n        return 211\n    if n == 48:\n        return 223\n    if n == 49:\n        return 227\n    if n == 50:\n        return 229\n    if n == 51:\n        return 233\n    if n == 52:\n        return 239\n    if n == 53:\n        return 241\n    if n == 54:\n        return 251\n    if n == 55:\n        return 257\n    if n == 56:\n        return 263\n    if n == 57:\n        return 269\n    if n == 58:\n        return 271\n    if n == 59:\n        return 277\n    if n == 60:\n        return 281\n    if n == 61:\n        return 283\n    if n == 62:\n        return 293\n    if n == 63:\n        return 307\n    if n == 64:\n        return 311\n    if n == 65:\n        return 313\n    if n == 66:\n        return 317\n    if n == 67:\n        return 331\n    if n == 68:\n        return 337\n    if n == 69:\n        return 347\n    if n == 70:\n        return 349\n    if n == 71:\n        return 353\n    if n == 72:\n        return 359\n    if n == 73:\n        return 367\n    if n == 74:\n        return 373\n    if n == 75:\n        return 379\n    if n == 76:\n        return 383\n    if n == 77:\n        return 389\n    if n == 78:\n        return 397\n    if n == 79:\n        return 401\n    if n == 80:\n        return 409\n    if n == 81:\n        return 419\n    if n == 82:\n        return 421\n    if n == 83:\n        return 431\n    if n == 84:\n        return 433\n    if n == 85:\n        return 439\n    if n == 86:\n        return 443\n    if n == 87:\n        return 449\n    if n == 88:\n        return 457\n    if n == 89:\n        return 461\n    if n == 90:\n        return 463\n    if n == 91:\n        return 467\n    if n == 92:\n        return 479\n    if n == 93:\n        return 487\n    if n == 94:\n        return 491\n    if n == 95:\n        return 499\n    if n == 96:\n        return 503\n    if n == 97:\n        return 509\n    if n == 98:\n        return 521\n    if n == 99:\n        return 523\n    if n == 100:\n        return 541\n    if n == 101:\n        return 547\n    if n == 102:\n        return 557\n    if n == 103:\n        return 563\n    if n == 104:\n        return 569\n    if n == 105:\n        return 571\n    if n == 106:\n        return 577\n    if n == 107:\n        return 581\n    if n == 108:\n        return 583\n    if n == 109:\n        return 593\n    if n == 110:\n        return 599\n    if n == 111:\n        return 601\n    if n == 112:\n        return 607\n    if n == 113:\n        return 613\n    if n == 114:\n        return 617\n    if n == 115:\n        return 619\n    if n == 116:\n        return 631\n    if n == 117:\n        return 641\n    if n == 118:\n        return 643\n    if n == 119:\n        return 647\n    if n == 120:\n        return 653\n    if n == 121:\n        return 659\n    if n == 122:\n        return 661\n    if n == 123:\n        return 673\n    if n == 124:\n        return 677\n    if n == 125:\n        return 683\n    if n == 126:\n        return 691\n    if n == 127:\n        return 701\n    if n == 128:\n        return 709\n    if n == 129:\n        return 719\n    if n == 130:\n        return 727\n    if n == 131:\n        return 733\n    if n == 132:\n        return 739\n    if n == 133:\n        return 743\n    if n == 134:\n        return 751\n    if n == 135:\n        return 761\n    if n == 136:\n        return 769\n    if n == 137:\n        return 773\n    if n == 138:\n        return 787\n    if n == 139:\n        return 797\n    if n == 140:\n        return 809\n    if n == 141:\n        return 811\n    if n == 142:\n        return 821\n    if n == 143:\n        return 823\n    if n == 144:\n        return 827\n    if n == 145:\n        return 829\n    if n == 146:\n        return 839\n    if n == 147:\n        return 853\n    if n == 148:\n        return 857\n    if n == 149:\n        return 859\n    if n == 150:\n        return 863\n    if n == 151:\n        return 877\n    if n == 152:\n        return 881\n    if n == 153:\n        return 883\n    if n == 154:\n        return 887\n    if n == 155:\n        return 907\n    if n == 156:\n        return 911\n    if n == 157:\n        return 919\n    if n == 158:\n        return 929\n    if n == 159:\n        return 937\n    if n == 160:\n        return 941\n    if n == 161:\n        return 947\n    if n == 162:\n        return 953\n    if n == 163:\n        return 967\n    if n == 164:\n        return 971\n    if n == 165:\n        return 977\n    if n == 166:\n        return 983\n    if n == 167:\n        return 991\n    if n == 168:\n        return 997\n    if n == 169:\n        return 1009\n    if n == 170:\n        return 1013\n    if n == 171:\n        return 1019\n    if n == 172:\n        return 1021\n    if n == 173:\n        return 1031\n    if n == 174:\n        retur"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([element1 / element2 for element1, element2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (2,5,6)\n    div_el = tuple(map(lambda x,y: x/y, test_tup1, test_tup2))\n    print('Division of elements of two tuples: ', div_el)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Invalid input\"\n    else:\n        return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return(tuple(zip(test_tup1, map(lambda x, y: x / y, test_tup1, test_tup2))))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def _division_elements(tup1, tup2):\n        if len(tup1) == len(tup2):\n            return tuple(map(lambda x, y: x / y, tup1, tup2))\n        else:\n            raise Exception(\"Length of tuples are not equal\")\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (\n        test_tup1[0] / test_tup2[0],\n        test_tup1[1] / test_tup2[1]\n    )\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1, test_tup2 = test_tup1, test_tup2\n    if len(test_tup1) == len(test_tup2):\n        return tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    else:\n        return None\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(tuple(divide(i,j) for i,j in zip(test_tup1, test_tup2)))\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    \n    result = []\n    \n    for element_index in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[element_index] / test_tup2[element_index])\n        except ZeroDivisionError:\n            result.append(0)\n    \n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert division_elements((5, 10), (2, 5)) == (2.0, 2.5)\n    assert division_elements((7, 2), (3, 2)) == (2, 1)\n    assert division_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # L = 3\n    # ans = ( [1, 2, 3], [4, 5, 6], [7, 8, 9], [10] )\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #base case\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    new_list = []\n    list1 = list1[:]\n    new_list = list1[:L]\n    list1 = list1[L:]\n    return new_list, list1\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_list = list1[:L]\n    second_list = list1[L:]\n    return (first_list, second_list)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        print(\"No\")\n    else:\n        len2 = int(len(list1) / L)\n        return (list1[0:L], list1[L:L+len2])\n    return tuple\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return(list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return(list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == len(list1):\n        first_list = list1[0:L]\n        second_list = list1[L:]\n    elif L > len(list1):\n        first_list = list1[0:L]\n        second_list = []\n    else:\n        first_list = []\n        second_list = list1[0:L]\n    return (first_list, second_list)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L1 = list1[:L]\n    L2 = list1[L:]\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age*7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age) is not int or h_age < 0:\n        return \"Invalid input\"\n    else:\n        return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return \"Can't calculate dog's age for age of zero or less\"\n    if h_age == 0:\n        return \"the dog's age in dog's years is zero\"\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return (10.5 + (h_age - 2) * 4)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # If the function is passed 1, return 35.\n    # If the function is passed 2, return 34.\n    # If the function is passed 3, return 33.\n    # If the function is passed 4, return 32.\n    # If the function is passed 5, return 31.\n    # If the function is passed 6, return 30.\n    # If the function is passed 7, return 29.\n    # If the function is passed 8, return 28.\n    # If the function is passed 9, return 27.\n    # If the function is passed 10, return 26.\n    # If the function is passed 11, return 25.\n    # If the function is passed 12, return 24.\n    # If the function is passed 13, return 23.\n    # If the function is passed 14, return 22.\n    # If the function is passed 15, return 21.\n    # If the function is passed 16, return 20.\n    # If the function is passed 17, return 19.\n    # If the function is passed 18, return 18.\n    # If the function is passed 19, return 17.\n    # If the function is passed 20, return 16.\n    # If the function is passed 21, return 15.\n    # If the function is passed 22, return 14.\n    # If the function is passed 23, return 13.\n    # If the function is passed 24, return 12.\n    # If the function is passed 25, return 11.\n    # If the function is passed 26, return 10.\n    # If the function is passed 27, return 9.\n    # If the function is passed 28, return 8.\n    # If the function is passed 29, return 7.\n    # If the function is passed 30, return 6.\n    # If the function is passed 31, return 5.\n    # If the function is passed 32, return 4.\n    # If the function is passed 33, return 3.\n    # If the function is passed 34, return 2.\n    # If the function is passed 35, return 1.\n    # If the function is passed 36, return 0.\n    # If the function is passed 37, return -1.\n    # If the function is passed 38, return -2.\n    # If the function is passed 39, return -3.\n    # If the function is passed 40, return -4.\n    # If the function is passed 41, return -5.\n    # If the function is passed 42, return -6.\n    # If the function is passed 43, return -7.\n    # If the function is passed 44, return -8.\n    # If the function is passed 45, return -9.\n    # If the function is passed 46, return -10.\n    # If the function is passed 47, return -11.\n    # If the function is passed 48, return -12.\n    # If the function is passed 49, return -13.\n    # If the function is passed 50, return -14.\n    # If the function is passed 51, return -15.\n    # If the function is passed 52, return -16.\n    # If the function is passed 53, return -17.\n    # If the function is passed 54, return -18.\n    # If the function is passed 55, return -19.\n    # If the function is passed 56, return -20.\n    # If the function is passed 57, return -21.\n    # If the function is passed 58, return -22.\n    # If the function is passed 59, return -23.\n    # If the function is passed 60, return -24.\n    # If the function is passed 61, return -25.\n    # If the function is passed 62, return -26.\n    # If the function is passed 63, return -27.\n    # If the function is passed 64, return -28.\n    # If the function is passed 65, return -29.\n    # If the function is passed 66, return -30.\n    # If the function is passed 67, return -31.\n    # If the function is passed 68, return -32.\n    # If the function is passed 69, return -33.\n    # If the function is passed 70, return -34.\n    # If the function is passed 71, return -35.\n    # If the function is passed 72, return -36.\n    # If the function is passed 73, return -37.\n    # If the function is passed 74, return -38.\n    # If the function is passed 75, return -39.\n    # If the function is passed 76, return -40.\n    # If the function is passed 77, return -41.\n    # If the function is passed 78, return -42.\n    # If the function is passed 79, return -43.\n    # If the function is passed 80, return -44.\n    # If the function is passed 81, return -45.\n    # If the function is passed 82, return -46.\n    # If the function is passed 83, return -47.\n    # If the function is passed 84, return -48.\n    # If the function is passed 85, return -49.\n    # If the function is passed 86, return -50.\n    # If the function is passed 87, return -51.\n    # If the function is passed 88, return -52.\n    # If the function is passed 89, return -53.\n    # If the function is passed 90, return -54.\n    # If the function is passed 91, return -55.\n    # If the function is passed 92, return -56.\n    # If the function is passed 93, return -57.\n    # If the function is passed 94, return -58.\n    # If the function is passed 95, return -59.\n    # If the function is passed 96, return -60.\n    # If the function is passed 97, return -61.\n    # If the function is passed 98, return -62.\n    # If the function is passed 99, return -63.\n    # If the function is passed 100, return -64.\n    # If the function is passed 101, return -65.\n    # If the function is passed 102, return -66.\n    # If the function is passed 103, return -67.\n    # If the function is passed 104, return -68.\n    # If the function is passed 105, return -69.\n    # If the function is passed 106, return -70.\n    # If the function is passed 107, return -71.\n    # If the function is passed 108, return -72.\n    # If the function is passed 109, return -73.\n    # If the function is passed 110, return -74.\n    # If the function is passed 111, return -75.\n    # If the function is passed 112, return -76.\n    # If the function is passed 113, return -77.\n    # If the function is passed 114, return -78.\n    # If the function is passed 115, return -79.\n    # If the function is passed 116, return -80.\n    # If the function is passed 117, return -81.\n    # If the function is passed 118, return -82.\n    # If the function is passed 119, return -83.\n    # If the function is passed 120, return -84.\n    # If the function is passed 121, return -85.\n    # If the function is passed 122, return -86.\n    # If the function is passed 123, return -87.\n    # If the function is passed 124, return -88.\n    # If the function is passed 125, return -89.\n    # If the function is passed 126, return -90.\n    # If the function is passed 127, return -91.\n    # If the function is passed 128, return -92.\n    # If the function is passed 129, return -93.\n    # If the function is passed 130, return -94.\n    # If the function is passed 131, return -95.\n    # If the function is passed 132, return -96.\n    # If the function is passed 133, return -97.\n    # If the function is passed 134, return -98.\n    # If the function is passed 135, return -99.\n    # If the function is passed 136, return -100.\n    # If the function is passed 137, return -101.\n    # If the function is passed 138, return -102.\n    # If the function is passed 139, return -103.\n    # If the function is passed 140, return -104.\n    # If the function is passed 141, return -105.\n    # If the function is passed 142, return -106.\n    # If the function is passed 143, return -107.\n    # If the function is passed 144, return -108.\n    # If the function is passed 145, return -109.\n    # If the function is passed 146, return -110.\n    # If the function i"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # h_age = int(input('Enter dog\\'s age in human years: '))\n    if h_age < 0:\n        print('Please enter a valid age!')\n    else:\n        if h_age <= 2:\n            dog_age = h_age * 10.5\n        else:\n            dog_age = 21 + (h_age - 2) * 4\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return print(f\"The dog is {dog_years} years old in dog's years.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 10.5\n    print(f'The dog is {d_age} in dog\\'s years.')\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        dog_age = h_age * 10.5\n    else:\n        dog_age = 21 + (h_age - 2)*4\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # 1. Calculate the age of the dog in human years.\n    # 2. Calculate the age of the dog in dog's years.\n    # 3. Return the age of the dog in dog's years.\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # if age is negative, return 0\n    if h_age < 0:\n        return 0\n    # if age is equal to or below 2, return age * 10\n    elif h_age <= 2:\n        return h_age * 10\n    # if age is equal to or above 2, return 10.5 * the age modulo 4\n    else:\n        return (10.5 * (h_age - 2)) % 4\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i + step])\n    return split_list\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    print([S[i:i+step] for i in range(0, len(S), step)])\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    new_list = S[::step]\n    result.append(new_list)\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Check that the list is long enough to be split\n    if len(S) < step:\n        return 'Incorrect input.'\n    # If the list is long enough, then split the list\n    elif len(S) >= step:\n        return [S[i:i + step] for i in range(0, len(S), step)]\n    # If the list is not long enough, return 'Incorrect input.'\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    #take input\n    n = step\n    \n    #split list\n    split_list = [S[i:i+n] for i in range(0, len(S), n)]\n    \n    #return\n    return split_list\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print((2 * l ** 2))\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print('Answer: %f'%(6*l*l))\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a=l**2\n    return 6*a\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = int(l)\n    def lateral_surface_area(l):\n        return 6*l**2\n    return lateral_surface_area(l)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral = 6*l**2\n    return lateral\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    # side_length = 2\n    return (6 * side_length ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(l)\n    side = float(l)\n    print(\"The lateral surface area of the cube is : \", 6*side*side)\n    return 6*side*side\n    \nlateralsurface_cube(10)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if (i+1)%2!= 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sums = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sums = sums + i**2\n    return sums\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1,2):\n        s=s+i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i*i for i in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n ** 2) + square_Sum(n - 1)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    n = int(n)\n    if (n%2 == 0) :\n        print(\"invalid input\")\n    else :\n        print(int(n*(n+1)*(2*n+1)/6))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 1:\n        return None\n    else:\n        sum = 0\n        for i in range(1, n + 1):\n            if i % 2!= 0:\n                sum += i ** 2\n        return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return \"Error: n must be greater than 0\"\n    else:\n        if n % 2 == 0:\n            return \"Error: n must be odd\"\n        else:\n            odd_numbers = []\n            for i in range(1, n + 1):\n                if i % 2!= 0:\n                    odd_numbers.append(i)\n            total = sum([i**2 for i in odd_numbers])\n            return total\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    def star_num_gen():\n        star_num = 0\n        i = 1\n        while True:\n            star_num += i\n            i += 1\n            yield star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Iterate over every number\n    for num in range(1, n):\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #There are 5 stars in a pentagon and 3 in a star.\n    #This is a pentagon and star number relation. \n    return int((5*n*n + 5*n + 3)/2)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # A map object which keeps a count of the number of each stars.\n    stars = {}\n    i = 1\n    while len(stars)!= n:\n        stars[i] = stars.get(i,0) + 1\n        i += 2\n    return stars\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_nums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 13421771, 268435455, 536870911, 1073741823, 2147483647, 4294967295, 8589934591, 17179869183, 34359738367, 68719476735, 137438953471, 274877906943, 549755813887, 1099511627776, 2199023255551, 4398046511103, 8796093022207, 17592186044415, 35184372088831, 70368744177664, 140737488355327, 281474976710656, 562949953421311, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808]\n    if n < len(star_nums):\n        return star_nums[n - 1]\n    else:\n        return None\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n**2 + n \n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = \"1\"\n    i = 2\n    while len(star_num) < n:\n        star_num += \" \" * (len(star_num) * 2 - 1) + \"*\" + \" \" * (len(star_num) * 2 - 1) + \"*\"\n        i += 1\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        num = 1\n        for i in range(1, n+1):\n            num = (num * 3) + 1\n        return num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    return n*find_star_num(n-1)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef main():\n    k = input('Input a character: ')\n    print('The ASCII value is {}'.format(ascii_value(k)))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == \"A\" or k == \"a\":\n        return 65\n    elif k == \"B\" or k == \"b\":\n        return 66\n    elif k == \"C\" or k == \"c\":\n        return 67\n    elif k == \"D\" or k == \"d\":\n        return 68\n    elif k == \"E\" or k == \"e\":\n        return 69\n    elif k == \"F\" or k == \"f\":\n        return 70\n    elif k == \"G\" or k == \"g\":\n        return 71\n    elif k == \"H\" or k == \"h\":\n        return 72\n    elif k == \"I\" or k == \"i\":\n        return 73\n    elif k == \"J\" or k == \"j\":\n        return 74\n    elif k == \"K\" or k == \"k\":\n        return 75\n    elif k == \"L\" or k == \"l\":\n        return 76\n    elif k == \"M\" or k == \"m\":\n        return 77\n    elif k == \"N\" or k == \"n\":\n        return 78\n    elif k == \"O\" or k == \"o\":\n        return 79\n    elif k == \"P\" or k == \"p\":\n        return 80\n    elif k == \"Q\" or k == \"q\":\n        return 81\n    elif k == \"R\" or k == \"r\":\n        return 82\n    elif k == \"S\" or k == \"s\":\n        return 83\n    elif k == \"T\" or k == \"t\":\n        return 84\n    elif k == \"U\" or k == \"u\":\n        return 85\n    elif k == \"V\" or k == \"v\":\n        return 86\n    elif k == \"W\" or k == \"w\":\n        return 87\n    elif k == \"X\" or k == \"x\":\n        return 88\n    elif k == \"Y\" or k == \"y\":\n        return 89\n    elif k == \"Z\" or k == \"z\":\n        return 90\n    elif k == \"0\" or k == \"0\":\n        return 48\n    elif k == \"1\" or k == \"1\":\n        return 49\n    elif k == \"2\" or k == \"2\":\n        return 50\n    elif k == \"3\" or k == \"3\":\n        return 51\n    elif k == \"4\" or k == \"4\":\n        return 52\n    elif k == \"5\" or k == \"5\":\n        return 53\n    elif k == \"6\" or k == \"6\":\n        return 54\n    elif k == \"7\" or k == \"7\":\n        return 55\n    elif k == \"8\" or k == \"8\":\n        return 56\n    elif k == \"9\" or k == \"9\":\n        return 57\n    elif k == \" \":\n        return 32\n    else:\n        return -1\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isupper():\n        return ord(k)-65\n    else:\n        return ord(k)-97\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= '0' and k <= '9':\n        return ord(k)-48\n    else:\n        return ord(k)-55\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            total_sum += arr[i]\n    return total_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                count += arr[i]\n    return count\nprint(sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #Write your code here\n    result = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            result += arr[i]\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) < 1:\n        return None\n    even_sum = 0\n    for index, element in enumerate(arr):\n        if index % 2 == 0 and element % 2 == 0:\n            even_sum += element\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_sum = 0\n    even_pos = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            even_sum = even_sum + arr[i]\n            even_pos = i\n    return even_sum,even_pos\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for num in range(len(arr)):\n        if num % 2 == 0 and arr[num] % 2 == 0:\n            sum += arr[num]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + sum_even_and_even_index(arr[2:])\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr),2):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    return [even_sum, even_index]\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for n in arr:\n        if n % 2 == 0 and arr.index(n) % 2 == 0:\n            even_sum += n\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(n ** 5 for n in range(1,n+1) if n % 2 == 0)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**5\n    return sum\ndef sum_Powers_1(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n natural numbers that are raised to the nth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**n\n    return sum\ndef sum_of_five(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n natural numbers that are raised to the nth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**n\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(1,n+1) if i%2==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n):\n        result += pow(i, 5)\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum += (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += (i ** 5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            power_sum += i**5\n    return power_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def factorial(n):\n        if n <= 1:\n            return 1\n        return n * factorial(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        power = 2\n        sum = 0\n        while (power <= n):\n            sum += power**5\n            power += 2\n        return sum\n    \n    \ndef is_Divisible(n, m): \n    '''\n    Write a python function that takes in two integers n and m and returns True if n is divisible by m. Return False otherwise.\n    '''\n    if (n % m == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for t in test_list:\n        return_list.append(t[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    if not isinstance(test_list, list) or len(test_list) <= 0 or not isinstance(test_list[0], tuple):\n        return 'invalid input'\n    \n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    \n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    returned_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_2 = []\n    for i in test_list:\n        list_2.append(i[1])\n    return list_2\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_list[i][1] for i in range(len(test_list))]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list = [('apples', 'oranges', 'cherries'), (1, 2, 3), [1, 2, 3], {'name': 'wesley', 'age': 42}]\n    output_list = []\n    for tup in test_list:\n        output_list.append(tup[-1])\n    return output_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Tuples must be of the same length\")\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #test_tup1 = (5, 2, 3)\n    #test_tup2 = (7, 3)\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (tup1 - tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i, j in enumerate(test_tup1):\n        new_tup += (test_tup1[i]-test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    tup1 = (1, 2, 3, 4, 5)\n    tup2 = (2, 3, 4, 5, 6)\n    tup3 = ()\n    for i in range(len(tup1)):\n        tup3 += (tup1[i] - tup2[i],)\n    return tup3\nprint(substract_elements(tup1, tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup_diff = []\n    for i in range(len(test_tup1)):\n        tup_diff.append(test_tup1[i] - test_tup2[i])\n    return tuple(tup_diff)\n    \ndef substract_elements_alt(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(substract(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)))\n    \ndef substract_elements_alt2(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    return tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_element = test_tup1[0]\n    test_tup2_element = test_tup2[0]\n    test_tup1_element = test_tup1_element - test_tup2_element\n    test_tup3 = (test_tup1_element,)\n    return test_tup3\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n)//(math.factorial(k)**2*math.factorial(n-k)) for k in range(0, n//2 + 1))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a = 2\n    b = 1\n    for i in range(1,n):\n        a = a + b\n        b = a - b\n    return a\n    \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<=0:\n        return 0\n    else:\n        if n==1:\n            return 1\n        else:\n            return 2*n\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 1): \n        return 0\n    if (n == 2): \n        return 1\n    if (n == 3): \n        return 2\n    return ( (n-1)*even_binomial_Coeff_Sum(n-1) ) + (2*even_binomial_Coeff_Sum(n-2)) \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 2\n    if (n == 3): \n        return 3\n    return ( (n-1)*odd_binomial_Coeff_Sum(n-1) ) + (2*odd_binomial_Coeff_Sum(n-2)) \ndef binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients.\n    '''\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 3\n    if (n == 3): \n        return 6\n    return ( (n-1)*binomial_Coeff_Sum(n-1) ) + (2*binomial_Coeff_Sum(n-2)) \ndef number_of_divisors(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of divisors.\n    '''\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 2\n    if (n == 3): \n        return 4\n    if (n == 4): \n        return 7\n    if (n == 5): \n        return 9\n    return ( (n-1)*number_of_divisors(n-1) ) + (2*number_of_divisors(n-2)) \ndef binomial_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients for all the terms.\n    '''\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 3\n    if (n == 3): \n        return 6\n    return ( (n-1)*binomial_Sum(n-1) ) + (2*binomial_Sum(n-2)) \ndef number_of_divisors_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of number of divisors for all the terms.\n    '''\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 2\n    if (n == 3): \n        return 5\n    if (n == 4): \n        return 12\n    if (n == 5): \n        return 20\n    return ( (n-1)*number_of_divisors_Sum(n-1) ) + (2*number_of_divisors_Sum(n-2)) \ndef binomial_Coeff( n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the binomial coefficient for a specific k.\n    '''\n    if (n == k or k == 0): \n        return 1\n    if (k > n): \n        return 0\n    return ( (n-1)*binomial_Coeff(n-1, k) ) + (k*binomial_Coeff(n-2, k-1)) \ndef number_of_divisors_Coeff( n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of divisors for a specific k.\n    '''\n    if (k > n-k): \n        k = n-k\n    if (k == 1): \n        return n\n    if (k == 0): \n        return 1\n    return ( (n-1)*number_of_divisors_Coeff(n-1, k) ) + (k*number_of_divisors_Coeff(n-2, k-1)) \ndef factorial(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of the number.\n    '''\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 2\n    if (n == 3): \n        return 6\n    if (n == 4): \n        return 24\n    if (n == 5): \n        return 120\n    return ( (n-1)*factorial(n-1) ) + (n*factorial(n-2)) \ndef fibonacci(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the nth fibonacci number.\n    '''\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 2\n    if (n == 3): \n        return 3\n    if (n == 4): \n        return 5\n    if (n == 5): \n        return 8\n    return ( (n-1)*fibonacci(n-1) ) + (n*fibonacci(n-2)) \ndef gcd(a, b): \n    '''\n    Write a python function that takes in two integers a and b and returns the greatest common divisor.\n    '''\n    if (a == 1 or b == 1): \n        return 1\n    if (a == 0 or b == 0): \n        return 0\n    return gcd(b, a % b) \ndef gcd_Sum( a, b): \n    '''\n    Write a python function that takes in two integers a and b and returns the sum of the greatest common divisors for all pairs of integers from a up to b.\n    '''\n    if (a == 1 or b == 1): \n        return 1\n    if (a == 0 or b == 0): \n        return 0\n    return ( (b-1)*gcd_Sum(a, b-1) + (a*b) // gcd(a, b) ) \ndef gcd_Product( a, b): \n    '''\n    Write a python function that takes in two integers a and b and returns the product of the greatest common divisors for all pairs of integers from a up to b.\n    '''\n    if (a == 1 or b == 1): \n        return 1\n    if (a == 0 or b == 0): \n        return 0\n    return ( (b-1)*gcd_Product(a, b-1) + (a*b) // gcd(a, b) ) \ndef prime_Factors(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the prime factors of the number.\n    '''\n    if (n == 1): \n        return [1]\n    prime_Factors_List = []\n    for i in range(2, int(math.sqrt(n)+1)): \n        if (n % i == 0): \n            prime_Factors_List.append(i)\n            n = n//i\n            if (n == 1): \n                return prime_Factors_List\n    prime_Factors_List.append(n)\n    return prime_Factors_List\ndef prime_Factors_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of prime factors of the number.\n    '''\n    if (n == 1): \n        return 1\n    prime_Factors_List = prime_Factors(n)\n    return sum(prime_Factors_List)\ndef prime_Factors_Product(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the product of prime factors of the number.\n    '''\n    if (n == 1): \n        return 1\n    prime_Factors_List = prime_Factors(n)\n    return math.prod(prime_Factors_List)\ndef number_of_divisors_Product(n): \n    '''\n    Write a python functio"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # a binomial coefficient is denoted by B(n,k) where n is the total number of terms and k is the number of terms with a 1 in the ith position\n    # so the sum of binomial coefficients is denoted by C(n)\n    \n    # the binomial coefficient of 2 is 2^2 which is 4 which is equal to the number of 1's in a binary representation of 2\n    # the binomial coefficient of 1 is 1 which is equal to the number of 1's in a binary representation of 1\n    # the binomial coefficient of 0 is 0 which is equal to the number of 1's in a binary representation of 0\n    # the binomial coefficient of n is the sum of the binomial coefficients of n-1 and 1, with the additional 1 \n    # if n is odd, then the last binomial coefficient is 0\n    # so if n is even, then the last binomial coefficient is equal to 0\n    \n    # the algorithm is as follows:\n    # we create a function B(n) that returns the sum of the binomial coefficients of n-1\n    # we then return the sum of the binomial coefficients of n and the binomial coefficient of n-1\n    \n    # B(n) = B(n-1) + 1\n    \n    if n == 0:\n        return 1\n    else:\n        sum = 1\n        while (n - 1) > 0:\n            sum = sum + 1\n            n = n - 1\n        return sum\n        \ndef sum_of_binomial_coefficients_in_interval_1_to_n(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients in the range [1, n]\n    '''\n    \n    # the sum of binomial coefficients in the range [1, n] is equal to the sum of binomial coefficients in the range [0, n] + binomial coefficients in the range [1, n-1]\n    \n    # so the sum of binomial coefficients in the range [1, n] is equal to the sum of binomial coefficients in the range [0, n] + binomial coefficients in the range [1, n-1]\n    \n    # so the sum of binomial coefficients in the range [1, n] is equal to the sum of binomial coefficients in the range [0, n] + binomial coefficients in the range [0, n-1]\n    \n    # the algorithm is as follows:\n    # we create a function B(n) that returns the sum of the binomial coefficients of n-1\n    # we then return the sum of the binomial coefficients of n and the binomial coefficient of n-1\n    \n    # B(n) = B(n-1) + 1\n    \n    if n == 0:\n        return 0\n    else:\n        sum = 1\n        while (n - 1) > 0:\n            sum = sum + 1\n            n = n - 1\n        return sum\n        \ndef sum_of_binomial_coefficients_in_interval_0_to_n_2(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients in the range [0, n]\n    '''\n    \n    # the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # so the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # so the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # the algorithm is as follows:\n    # we create a function B(n) that returns the sum of the binomial coefficients of n-1\n    # we then return the sum of the binomial coefficients of n and the binomial coefficient of n-1\n    \n    # B(n) = B(n-1) + 1\n    \n    if n == 0:\n        return 0\n    else:\n        sum = 1\n        while (n - 1) > 0:\n            sum = sum + 1\n            n = n - 1\n        return sum\n        \ndef sum_of_binomial_coefficients_in_interval_0_to_n_3(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients in the range [0, n]\n    '''\n    \n    # the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # so the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # so the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # the algorithm is as follows:\n    # we create a function B(n) that returns the sum of the binomial coefficients of n-1\n    # we then return the sum of the binomial coefficients of n and the binomial coefficient of n-1\n    \n    # B(n) = B(n-1) + 1\n    \n    if n == 0:\n        return 0\n    else:\n        sum = 1\n        while (n - 1) > 0:\n            sum = sum + 1\n            n = n - 1\n        return sum\n        \ndef sum_of_binomial_coefficients_in_interval_0_to_n_4(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients in the range [0, n]\n    '''\n    \n    # the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # so the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # so the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # the algorithm is as follows:\n    # we create a function B(n) that returns the sum of the binomial coefficients of n-1\n    # we then return the sum of the binomial coefficients of n and the binomial coefficient of n-1\n    \n    # B(n) = B(n-1) + 1\n    \n    if n == 0:\n        return 0\n    else:\n        sum = 1\n        while (n - 1) > 0:\n            sum = sum + 1\n            n = n - 1\n        return sum\n        \ndef sum_of_binomial_coefficients_in_interval_0_to_n_5(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients in the range [0, n]\n    '''\n    \n    # the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # so the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # so the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0, n]\n    \n    # the algorithm is as follows:\n    # we create a function B(n) that returns the sum of the binomial coefficients of n-1\n    # we then return the sum of the binomial coefficients of n and the binomial coefficient of n-1\n    \n    # B(n) = B(n-1) + 1\n    \n    if n == 0:\n        return 0\n    else:\n        sum = 1\n        while (n - 1) > 0:\n            sum = sum + 1\n            n = n - 1\n        return sum\n        \ndef sum_of_binomial_coefficients_in_interval_0_to_n_6(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients in the range [0, n]\n    '''\n    \n    # the sum of binomial coefficients in the range [0, n] is equal to the sum of binomial coefficients in the range [0"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n==0): \n        return 0\n    elif (n==1): \n        return 1\n    else: \n        return (even_binomial_Coeff_Sum(n-1) + n - 1 + even_binomial_Coeff_Sum(n-2)) \n    \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    return int((math.factorial(n))/((math.factorial(2))*(math.factorial(n-2))))\n    \ndef is_even_binomial_Coeff( n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and returns True if n and k are both even and the sum of even index binomial coefficients of n and k is zero.\n    '''\n    \n    if (k%2 == 0) and (n%2 == 0):\n        return (even_binomial_Coeff_Sum(n) - even_binomial_Coeff_Sum(k)) == 0\n    else:\n        return False\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Initialize a variable and set it equal to 0\n    sum = 0\n    #Create a variable 'i' and set it equal to 0.\n    i = 0\n    #Create a variable 'b' and set it equal to 2.\n    b = 2\n    #Create a while loop that will continue while the 'i' is less than the input n.\n    while i < n:\n        #Create a variable 'a' and set it equal to n-i.\n        a = n-i\n        #Create a variable 'c' and set it equal to i.\n        c = i\n        #Create a variable 'b' and set it equal to 2.\n        b = 2\n        #Create a while loop that will continue while the 'b' is greater than or equal to 1.\n        while b >= 1:\n            #Create a variable 'd' and set it equal to a.\n            d = a\n            #Create a variable 'b' and set it equal to b.\n            b = b\n            #Create a variable 'c' and set it equal to c.\n            c = c\n            #Create a variable 'a' and set it equal to a.\n            a = d\n            #Create a variable 'b' and set it equal to b.\n            b = b\n            #Set the value of the variable 'b' to 0.\n            b = 0\n            #Create a variable 'x' and set it equal to a.\n            x = a\n            #Create a variable 'y' and set it equal to b.\n            y = b\n            #Create a variable 'z' and set it equal to c.\n            z = c\n            #Create a variable 'z' and set it equal to x.\n            x = z\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = x\n            #Create a variable 'z' and set it equal to y.\n            z = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Set the value of the variable 'c' to 0.\n            c = 0\n            #Set the value of the variable 'a' to 0.\n            a = 0\n            #Set the value of the variable 'b' to 0.\n            b = 0\n            #Set the value of the variable 'd' to 0.\n            d = 0\n            #Create a variable 'x' and set it equal to a.\n            x = a\n            #Create a variable 'y' and set it equal to b.\n            y = b\n            #Create a variable 'z' and set it equal to c.\n            z = c\n            #Create a variable 'z' and set it equal to x.\n            x = z\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = z\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Set the value of the variable 'b' to 0.\n            b = 0\n            #Set the value of the variable 'a' to 0.\n            a = 0\n            #Set the value of the variable 'c' to 0.\n            c = 0\n            #Set the value of the variable 'd' to 0.\n            d = 0\n            #Create a variable 'b' and set it equal to d.\n            b = d\n            #Create a variable 'a' and set it equal to z.\n            a = z\n            #Create a variable 'c' and set it equal to x.\n            c = x\n            #Create a variable 'd' and set it equal to y.\n            d = y\n            #Create a variable 'x' and set it equal to b.\n            x = b\n            #Create a variable 'y' and set it equal to a.\n            y = a\n            #Create a variable 'z' and set it equal to c.\n            z = c\n            #Create a variable 'z' and set it equal to x.\n            x = z\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = z\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal to y.\n            z = x\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'x' and set it equal to z.\n            x = y\n            #Create a variable 'z' and set it equal to x.\n            z = x\n            #Create a variable 'z' and set it equal t"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = []\n    binomial_coeff.append(1)\n    for i in range(1, n+1):\n        if(i % 2 == 0):\n            binomial_coeff.append(binomial_coeff[i-1] * (n-i+1))\n        else:\n            binomial_coeff.append(binomial_coeff[i-1] * i)\n    return sum(binomial_coeff)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += C(n,i)\n    return ans\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14\n    return pi*(r**2)*h\n    \ndef run():\n    print(volume_cylinder(2,3))\n    \nif __name__ == '__main__':\n    run("
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r ** 2 * h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14*(r**2))*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return (math.pi)*r*r*h\nprint(volume_cylinder(2,3))\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265359\n    return round(pi*(r**2)*h,2)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    v = pi*(r**2)*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #volume of a cylinder = pi * r^2 * h\n    #pi * r^2 * h = pi * r^2 * h\n    #volume = pi * r^2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    v = pi * (r**2) * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi*r**2*h\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key]>=n:\n            new_dict[key] = dict[key]\n    return new_dict\nprint(dict_filter(my_dict, 3))\nprint(dict_filter(my_dict, 7))\nprint(dict_filter(my_dict, 9))\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    final_dict = {}\n    for i in dict.keys():\n        if dict[i] >= n:\n            final_dict[i] = dict[i]\n    return final_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return{k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for (key,value) in dict.items() if value>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {key:value for (key,value) in dict.items() if value>=n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {i: dict[i] for i in dict if dict[i] >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return{k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            result[key] = dict[key]\n    return result\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(set(test_tup[:test_tup.index(0)]))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(min(test_tup))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    list_ = list(test_tup)\n    count = 1\n    for i in range(1, len(list_)):\n        if list_[i] == list_[0]:\n            count += 1\n        else:\n            break\n    return count\n    \ndef find_nearest_right_triangle(side_a, side_b, side_c):\n    '''\n    Write a function to find the nearest right triangle with its hypotenuse greater than the input.\n    '''\n    # from math import sqrt\n    # import numpy as np\n    # from scipy.spatial import distance\n    # print(sqrt(side_a**2 + side_b**2) > side_c)\n    # print(np.sqrt(side_a**2 + side_b**2) > side_c)\n    # print(distance.seuclidean([0,0], [1,0]))\n    # print(distance.seuclidean([0,0], [0,1]))\n    # print(distance.seuclidean([0,0], [1,1]))\n    # print(distance.seuclidean([1,0], [1,1]))\n    # print(distance.seuclidean([1,1], [0,0]))\n    # print(distance.seuclidean([1,1], [1,0]))\n    # print(distance.seuclidean([0,1], [1,1]))\n    # print(distance.seuclidean([0,0], [1,1]))\n    # print(distance.seuclidean([0,0], [0,0]))\n    # print(distance.seuclidean([0,0], [-1,0]))\n    # print(distance.seuclidean([0,0], [-1,0]))\n    # print(distance.seuclidean([0,0], [-1,1]))\n    # print(distance.seuclidean([0,0], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,0]))\n    # print(distance.seuclidean([1,1], [-1,0]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # print(distance.seuclidean([1,1], [-1,1]))\n    # prin"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    final_count = 0\n    tup_list = list(test_tup)\n    for i in tup_list:\n        count = 0\n        for j in test_tup:\n            if i == j:\n                break\n            count += 1\n        final_count += count\n    return final_count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_tup = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == (test_tup[i - 1]):\n            count_tup += 1\n    return count_tup\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def count_first_elements_helper(test_tup, n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return test_tup[0]\n        else:\n            return count_first_elements_helper(test_tup, n-1) + test_tup[n-1]\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([1 for el in test_tup if el == test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    a = tuple(test_tup)\n    sorted_a = sorted(a)\n    print(sorted_a)\n    count = 0\n    for i in range(len(sorted_a)):\n        if sorted_a[i] == a[i]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup[0] == 0:\n        return 0\n    else:\n        for i in range(len(test_tup)-1):\n            if test_tup[i] == 0:\n                return i\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup_len = len(test_tup)\n    for i in range(0,test_tup_len-1):\n        if i == 0:\n            # for i=0, element in tuple is itself.\n            # hence, only 1 element is in it.\n            print(\"Only 1 element in tuple\")\n        else:\n            # for i>0, element in tuple is first element, hence, 2 elements are there in it.\n            print(f\"{i+1} elements in tuple\")\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    from math import sqrt\n    \n    # we know that the pattern is \n    # 2n(n + 1) - 1\n    # we can find the num_digits from that\n    num_digits = int(sqrt(2 * n * (n + 1) - 1) + 1)\n    \n    # we can get the top num_digits digits from the number\n    top_n = int(str(2 * n * (n + 1) - 1)[-num_digits:])\n    \n    # and we can get the remianing part from the pattern\n    bottom = (num_digits * 9 - num_digits) // 10\n    \n    return top_n + bottom\n    \nif __name__ == '__main__':\n    import sys\n    \n    if len(sys.argv) == 2:\n        print(is_num_decagonal(int(sys.argv[1])))\n    else:\n        print('I need a number')\n        "
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+9)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Store the factorials of the digits.\n    fact = [0] * 9\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # 1)    1*10 + 2*9 +... + n*8 + n*7 + n*6 + n*5 + n*4 + n*3 + n*2 + n*1 = n*9 + 1*8 +... + n*6 + n*5 + n*4 + n*3 + n*2 + n*1 = n(n+1)/2\n    # 2)    (1*10 + 2*9 +... + n*8 + n*7 + n*6 + n*5 + n*4 + n*3 + n*2 + n*1) = n(n+1)/2\n    # 3)    n = 1 + (1/2) + (1/3) + (1/4) +... + (1/n)\n    # 4)    (n + 1)/2 = 1 + 1/2 + 1/3 + 1/4 +... + 1/n\n    # 5)    (n + 1)/2 = (1/2) + (1/3) + (1/4) +... + (1/n)\n    # 6)    n + 1 = (1/2) + (1/3) + (1/4) +... + (1/n)\n    # 7)    n = (1/2) + (1/3) + (1/4) +... + (1/n)\n    # 8)    n = 1/2 + 1/3 + 1/4 +... + 1/n\n    # 9)    n = 1 + 2 + 3 +... + n\n    # 10) n = 1 + 2 + 3 +... + n\n    # 11) n = 1 + 2 + 3 +... + n\n    # 12) n = 1 + 2 + 3 +... + n\n    # 13) n = 1 + 2 + 3 +... + n\n    # 14) n = 1 + 2 + 3 +... + n\n    # 15) n = 1 + 2 + 3 +... + n\n    # 16) n = 1 + 2 + 3 +... + n\n    # 17) n = 1 + 2 + 3 +... + n\n    # 18) n = 1 + 2 + 3 +... + n\n    # 19) n = 1 + 2 + 3 +... + n\n    # 20) n = 1 + 2 + 3 +... + n\n    # 21) n = 1 + 2 + 3 +... + n\n    # 22) n = 1 + 2 + 3 +... + n\n    # 23) n = 1 + 2 + 3 +... + n\n    # 24) n = 1 + 2 + 3 +... + n\n    # 25) n = 1 + 2 + 3 +... + n\n    # 26) n = 1 + 2 + 3 +... + n\n    # 27) n = 1 + 2 + 3 +... + n\n    # 28) n = 1 + 2 + 3 +... + n\n    # 29) n = 1 + 2 + 3 +... + n\n    # 30) n = 1 + 2 + 3 +... + n\n    # 31) n = 1 + 2 + 3 +... + n\n    # 32) n = 1 + 2 + 3 +... + n\n    # 33) n = 1 + 2 + 3 +... + n\n    # 34) n = 1 + 2 + 3 +... + n\n    # 35) n = 1 + 2 + 3 +... + n\n    # 36) n = 1 + 2 + 3 +... + n\n    # 37) n = 1 + 2 + 3 +... + n\n    # 38) n = 1 + 2 + 3 +... + n\n    # 39) n = 1 + 2 + 3 +... + n\n    # 40) n = 1 + 2 + 3 +... + n\n    # 41) n = 1 + 2 + 3 +... + n\n    # 42) n = 1 + 2 + 3 +... + n\n    # 43) n = 1 + 2 + 3 +... + n\n    # 44) n = 1 + 2 + 3 +... + n\n    # 45) n = 1 + 2 + 3 +... + n\n    # 46) n = 1 + 2 + 3 +... + n\n    # 47) n = 1 + 2 + 3 +... + n\n    # 48) n = 1 + 2 + 3 +... + n\n    # 49) n = 1 + 2 + 3 +... + n\n    # 50) n = 1 + 2 + 3 +... + n\n    # 51) n = 1 + 2 + 3 +... + n\n    # 52) n = 1 + 2 + 3 +... + n\n    # 53) n = 1 + 2 + 3 +... + n\n    # 54) n = 1 + 2 + 3 +... + n\n    # 55) n = 1 + 2 + 3 +... + n\n    # 56) n = 1 + 2 + 3 +... + n\n    # 57) n = 1 + 2 + 3 +... + n\n    # 58) n = 1 + 2 + 3 +... + n\n    # 59) n = 1 + 2 + 3 +... + n\n    # 60) n = 1 + 2 + 3 +... + n\n    # 61) n = 1 + 2 + 3 +... + n\n    # 62) n = 1 + 2 + 3 +... + n\n    # 63) n = 1 + 2 + 3 +... + n\n    # 64) n = 1 + 2 + 3 +... + n\n    # 65) n = 1 + 2 + 3 +... + n\n    # 66) n = 1 + 2 + 3 +... + n\n    # 67) n = 1 + 2 + 3 +... + n\n    # 68) n = 1 + 2 + 3 +... + n\n    # 69) n = 1 + 2 + 3 +... + n\n    # 70) n = 1 + 2 + 3 +... + n\n    # 71) n = 1 + 2 + 3 +... + n\n    # 72) n = 1 + 2 + 3 +... + n\n    # 73) n = 1 + 2 + 3 +... + n\n    # 74) n = 1 + 2 + 3 +... + n\n    # 75) n = 1 + 2 + 3 +... + n\n    # 76) n = 1 + 2 + 3 +... + n\n    # 77) n = 1 + 2 + 3 +... + n\n    # 78) n = 1 + 2 + 3 +... + n\n    # 79) n = 1 + 2 + 3 +... + n\n    # 80) n = 1 + 2 + 3 +... + n\n    # 81) n = 1 + 2 + 3 +... + n\n    # 82) n = 1 + 2 + 3 +... + n\n    # 83) n = 1 + 2 + 3 +... + n\n    # 84) n = 1 + 2 + 3 +... + n\n    # 85) n = 1 + 2 + 3 +... + n\n    # 86) n = 1 + 2 + 3 +... + n\n    # 87) n = 1 + 2 + 3 +... + n\n    # 88) n = 1 + 2 + 3 +... + n\n    # 89) n = 1 + 2 + 3 +... + n\n    # 90) n = 1 + 2 + 3 +... + n\n    # 91) n = 1 + 2 + 3 +... + n\n    # 92) n = 1 + 2 + 3 +... + n\n    # 93) n = 1 + 2 + 3 +... + n\n    # 94) n = 1 + 2 + 3 +... + n\n    # 95) n = 1 + 2 + 3 +... + n\n    # 96) n = 1 + 2 + 3 +... + n\n    # 97) n = 1 + 2 + 3 +... + n\n    # 98) n = 1 + 2 + 3 +... + n\n    # 99) n = 1 + 2 + 3 +... + n\n    # 100) n = 1 + 2 + 3 +... + n\n    # 101) n = 1 + 2 + 3 +... + n\n    # 102) n = 1 + 2 + 3 +... + n\n    # 103) n = 1 + 2 + 3 +... + n\n    # 104) n = 1 + 2 + 3 +... + n\n    # 105) n = 1 + 2 + 3 +... + n\n    # 106) n = 1 + 2 + 3 +... + n\n    # 107) n = 1 + 2 + 3 +... + n\n    # 108) n = 1 + 2 + 3 +... + n\n    # 109) n = 1 + 2 + 3 +... + n\n    # 110) n = 1 + 2 + 3 +... + n\n    # 111) n = 1 + 2 + 3 +... + n\n    # 112) n = 1 + 2 + 3 +... + n\n    # 113) "
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nth_decimal = 0\n    decimal = 1\n    while nth_decimal < n:\n        decimal += 1\n        nth_decimal += decimal\n    return decimal\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0: return\n    t = 0\n    num = 1\n    while num <= n:\n        t += 1\n        num *= 10\n    num /= 10\n    return num + (t * 9)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(9*n - 2*n*(n-1) +1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_d(n):\n        return int(n*(10*n-n+1)/2)\n    for i in range(1, 100):\n        if is_d(i) == n:\n            return True\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    return int(10*n*n - 9*n + 1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return (found, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return (True, pos)\n    else:\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    index_pos = -1\n    i = 0\n    for x in dlist:\n        if x == item:\n            index_pos = i\n            return(True, index_pos)\n        else:\n            i += 1\n            index_pos = -1\n    return(False, index_pos)\n    \n    \n    "
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = -1\n    for x in range(len(dlist)):\n        if dlist[x] == item:\n            found = True\n            position = x\n            break\n    return (found, position)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # create an empty dictionary\n    pos = []\n    # loop through each element in the array\n    for index, num in enumerate(dlist):\n        # if the current element is equal to the target\n        if num == item:\n            # return true and the current index position\n            return True, index\n    # return false if the target element is not found\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Your code here\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    new_list = []\n    for each_element in test_list:\n        if each_element in new_list:\n            return False\n        else:\n            new_list.append(each_element)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_set = set(test_list)\n    if(len(test_list_set) == len(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    if len(test_list) == len(set(test_list)):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i in unique_list:\n            return False\n        else:\n            unique_list.append(i)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    \n    \n    return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    try:\n        set(test_list)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    # You need to write code here.\n    # Remember to return the result here\n    return test_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i] - nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for (x,y) in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x1 - x2 for (x1, x2) in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for num in nums1:\n        if num not in nums2:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list=[]\n    for i in range(0,len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list_sub = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return list_sub\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub=[]\n    for i in range(len(nums1)):\n        sub.append(nums1[i]-nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    print(list(map(lambda x: x[0]-x[1], zip(nums1,nums2))))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    while(n): \n        d[n % 10] = d.get(n % 10, 0) + 1\n        n = n // 10\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # getting the unique digits in the number\n    digits = []\n    while (n):\n        digits.append(n%10)\n        n = n//10\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def check(n):\n        count = [0]*10\n        while(n):\n            count[n%10]+=1\n            n//=10\n        return all(count[i]<=i for i in range(10))\n    return check(n)\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 0:0}\n    for i in str(n):\n        dict[int(i)]+=1\n    if(dict[1]>1 or dict[2]>1 or dict[3]>1 or dict[4]>1 or dict[5]>1 or dict[6]>1 or dict[7]>1 or dict[8]>1 or dict[9]>1 or dict[0]>1):\n        return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in n:\n        if i > 1:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in str(n):\n        if int(i) > int(i):\n            return False\n        if n%int(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # DIGITS = '123456789'\n    # # If input is 0 or not an integer, return false\n    # if not isinstance(n, int) or n == 0:\n    #     return False\n    # # Create dictionary of numbers to digits and count of occurence of each digit in the integer\n    # occurence = {}\n    # for x in DIGITS:\n    #     occurence[x] = 0\n    # # Get each digit and add 1 to each occurence count\n    # while n > 0:\n    #     digit = n % 10\n    #     occurence[digit] += 1\n    #     n //= 10\n    # # Return false if any occurence count is greater than the digit itself\n    # for x in occurence:\n    #     if occurence[x] > x:\n    #         return False\n    # return True\n    '''\n    Given a non-negative integer, return its complement number. The complement strategy is to flip the bits of its binary representation.\n    '''\n    # def findComplement(num):\n    #     result = 0\n    #     while num > 0:\n    #         result = result * 2 + (num % 2)\n    #         num //= 2\n    #     return result\n    # # or\n    # def findComplement(num):\n    #     return num ^ (2 ** len(bin(num)) - 1)\n    # # or\n    # def findComplement(num):\n    #     return ~num\n    '''\n    Given a string, return whether it is a palindrome.\n    '''\n    def isPalindrome(s):\n        if len(s) <= 1:\n            return True\n        return s[0] == s[-1] and isPalindrome(s[1:-1])\n    '''\n    Given a binary tree, return the preorder traversal of its nodes' values.\n    '''\n    def preorderTraversal(root):\n        res = []\n        def traversal(root):\n            if root:\n                res.append(root.val)\n                traversal(root.left)\n                traversal(root.right)\n        traversal(root)\n        return res\n    '''\n    Given a binary tree, return the postorder traversal of its nodes' values.\n    '''\n    def postorderTraversal(root):\n        res = []\n        def traversal(root):\n            if root:\n                traversal(root.left)\n                traversal(root.right)\n                res.append(root.val)\n        traversal(root)\n        return res\n    '''\n    Given a binary tree, return the inorder traversal of its nodes' values.\n    '''\n    def inorderTraversal(root):\n        res = []\n        def traversal(root):\n            if root:\n                traversal(root.left)\n                res.append(root.val)\n                traversal(root.right)\n        traversal(root)\n        return res\n    '''\n    Given a list of numbers, and a target \u201ckey\u201d, remove all instances of \u201ckey\u201d in-place and return the new length of the list.\n    '''\n    # def removeElement(nums, key):\n    #     '''\n    #     Solution 1 - Time: O(n), Space: O(n)\n    #     '''\n    #     i = 0\n    #     while i < len(nums):\n    #         if nums[i] == key:\n    #             del nums[i]\n    #         else:\n    #             i += 1\n    #     return len(nums)\n    '''\n    Given a string, return whether it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    def isPalindrome(s):\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            while i < j and not s[i].isalnum():\n                i += 1\n            while i < j and not s[j].isalnum():\n                j -= 1\n            if s[i].lower()!= s[j].lower():\n                return False\n            i += 1\n            j -= 1\n        return True\n    '''\n    Given a string, return whether it is a pangram, a pangram is a sentence using every letter of the alphabet at least once.\n    '''\n    def isPangram(s):\n        return len(set(s.lower())) == 26\n    '''\n    Given an array of integers, return the minimum difference between any two elements in the array.\n    '''\n    def minimumDifference(nums):\n        min = float('inf')\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if abs(nums[i] - nums[j]) < min:\n                    min = abs(nums[i] - nums[j])\n        return min\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    def isPalindrome(s):\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            while i < j and not s[i].isalnum():\n                i += 1\n            while i < j and not s[j].isalnum():\n                j -= 1\n            if s[i].lower()!= s[j].lower():\n                return False\n            i += 1\n            j -= 1\n        return True\n    '''\n    Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end.\n    '''\n    def rotateString(s, amount):\n        if len(s) < 2 or amount == 0:\n            return s\n        amount %= len(s)\n        return s[amount:] + s[:amount]\n    '''\n    Given a string, return its encoding defined as follows:\n    First, the string is divided into the least possible number of disjoint substrings consisting of identical characters\n    for example, \"aabbbc\" is divided into [\"aa\", \"bbb\", \"c\"]\n    Next, each substring with length greater than one is replaced with a concatenation of its length and the repeating character\n    for example, substring \"bbb\" is replaced by \"3b\"\n    Finally, all the new strings are concatenated together in the same order and a new string is returned.\n    '''\n    def encode(s):\n        if len(s) == 0:\n            return s\n        res = []\n        for i in range(1, len(s)):\n            if s[i]!= s[i-1]:\n                res.append(s[i-1] + str(i - 1))\n        res.append(s[-1] + str(len(s) - 1))\n        return ''.join(res)\n    '''\n    Given a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n    '''\n    def firstUniqChar(s):\n        for i in range(len(s)):\n            if s.count(s[i]) == 1:\n                return i\n        return -1\n    '''\n    Given an array of integers, find the one that appears an odd number of times.\n    '''\n    def findOdd(nums):\n        for n in nums:\n            if nums.count(n) % 2 == 1:\n                return n\n        return -1\n    '''\n    Given an array of integers, find the one that appears an odd number of times.\n    '''\n    def findOdd(nums):\n        counter = {}\n        for n in nums:\n            counter[n] = counter.get(n, 0) + 1\n        for n in counter:\n            if counter[n] % 2 == 1:\n                return n\n    '''\n    Given a string, return a \"rotated right 2\" version where the last 2 chars are moved to the beginning.\n    '''\n    def rotateString(s, amount):\n        if len(s) < 2 or amount == 0:\n            return s\n        amount %= len(s)\n        return s[-amount:] + "
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n==0:\n        return False\n    a=[]\n    while n>0:\n        a.append(n%10)\n        n=n//10\n    a=sorted(a)\n    for i in range(len(a)):\n        if a[i]>i+1:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # dictionary to store the count of each digit \n    digitCount = {} \n    \n    # variable to store the number \n    num = n \n    \n    while (num > 0): \n        \n        # extract the last digit \n        digit = num % 10\n        \n        if digit not in digitCount: \n            digitCount[digit] = 1\n        else: \n            digitCount[digit] += 1\n        \n        # update the number by removing the last digit \n        num = int(num / 10) \n    \n    for digit in range(0, 10): \n        if (digitCount[digit] > digit): \n            return False\n        \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len(set(str(n))) == len(str(n))\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    i=0\n    for item in list:\n        if item!=element:\n            i+=1\n    if i==len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x!= element:\n            return False\n    return True\nprint(check_element([1,2,3],3))\nprint(check_element([3,4,5],3))\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list[0] == element:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    else:\n        first_element = list[0]\n        list.pop(0)\n        if first_element!= element:\n            return False\n        else:\n            return check_element(list,element)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check_element([1,2,3],4)\n    # check_element([1,2,3,4],4)\n    # check_element([1,2,3,4,5],4)\n    # check_element([1,2,3,4,5],1)\n    # check_element([1,1,1,1,1],1)\n    # check_element([],1)\n    # check_element([1,2,3,4],5)\n    # check_element([1,2,3,4],1)\n    # check_element([1,2,3,4],1)\n    # check_element([1,2,3,4],2)\n    # check_element([1,2,3,4],3)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    b = r'ab{2,3}'\n    # pattern = re.compile(b)\n    # print(pattern.findall(text))\n    # print(bool(pattern.findall(text)))\n    # print(bool(re.search(b, text)))\n    return bool(re.search(b, text))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # https://regexr.com/3k0c6\n    # \\b(\\w)\\b{2,3}\\b\n    pattern = re.compile(r'\\b(\\w)\\b{2,3}\\b')\n    if pattern.search(text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ab{2,3}', text):\n        return 'Found a two or three b\\'s'\n    else:\n        return 'Not found any b\\'s'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_match_two_three = re.search(r'ab{2}|ab{3}', text)\n    if text_match_two_three:\n        print(text_match_two_three)\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    return re.match(r'a.{2,3}b', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return 'Yes, this string contains an ab character.'\n    return 'No, this string does not contain an ab character.'\nprint(text_match_two_three('ab'))\nprint(text_match_two_three('abc'))\nprint(text_match_two_three('aba'))\nprint(text_match_two_three('abb'))\nprint(text_match_two_three('ababb'))\nprint(text_match_two_three('abbb'))\nprint(text_match_two_three('abbbb'))\nprint(text_match_two_three('abbbbb'))\nprint(text_match_two_three('ababbbb'))\nprint(text_match_two_three('abbbbbb'))\nprint(text_match_two_three('ababbbbb'))\nprint(text_match_two_three('ababbbbbb'))\nprint(text_match_two_three('ababbbbbbb'))\nprint(text_match_two_three('ababbbbbbbb'))\nprint(text_match_two_three('ababbbbbbbbb'))\nprint(text_match_two_three('ababbbbbbbbbb'))\nprint(text_match_two_three('ababbbbbbbbbbb'))\nprint(text_match_two_three('ababbbbbbbbbbbb'))\nprint(text_match_two_three('ababbbbbbbbbbbbb'))\nprint(text_match_two_three('ababbbbbbbbbbbbbb'))\nprint(text_match_two_three('ababbbbbbbbbbbbbbb'))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # #Version 1:\n    # if re.search('ab{2,3}', text):\n    #     print('true')\n    # else:\n    #     print('false')\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r'ab{2,3}')\n    return regex.search(text) is not None\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(0,n):\n        if i+k <= n:\n            curr_sum = sum(a[i:i+k])\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        else:\n            break\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k <= 1: \n        return sum(a)\n    if k >= n: \n        return k * max(a)\n    return max(k * max_sub_array_sum_repeated(a, n, k-1), max_sub_array_sum_repeated(a, n, k//2) + max_sub_array_sum_repeated(a, n, k//2 + 1))\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # print(a, k)\n    if k==0 or k==1:\n        return(sum(a))\n    else:\n        ans = 0\n        for i in range(k):\n            ans += sum(a)\n            a = a + a\n        # print(ans)\n        return(ans)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    global_max = 0\n    local_max = 0\n    for i in range(0, n): \n        for j in range(0, i + 1): \n            local_max = local_max + a[j] \n        for j in range(i + 1, n): \n            if (local_max == (k * a[i])): \n                global_max = max(global_max, local_max) \n            local_max = local_max - a[j - 1] + a[j] \n        if (local_max > global_max): \n            global_max = local_max\n    return global_max \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #print(\"In max_sub_array_sum_repeated\")\n    #print(\"Array: \", a)\n    #print(\"Array Length: \", n)\n    #print(\"Number of Repeats: \", k)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the Maximum Sum\n    MaxSum = -(2**31) \n    \n    # Initialize the first element as sum of array\n    # values[0] + values[1] +..... + values[k-1] \n    summ = 0 \n    \n    # Compute the sum of first (k-1) elements \n    for i in range(0, k): \n        summ += a[i] \n    \n    # Initialize Maximum Sum\n    MaxSum = max(MaxSum, summ) \n    \n    # Compute sum of remaining elements\n    for i in range(k, n): \n        summ += a[i] - a[i - k] \n        MaxSum = max(MaxSum, summ) \n    \n    return MaxSum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    max_sum_arr = []\n    \n    for i in range(n):\n        for j in range(k):\n            max_sum += a[i]\n        max_sum_arr.append(max_sum)\n        max_sum = 0\n    return max(max_sum_arr)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    MOD = 1000000007\n    s = sum(a)\n    s = s % MOD\n    # print(s)\n    if(k == 1):\n        return s\n    # if(k == 2):\n    #     return (s*k) % MOD\n    m = max(a)\n    s = (s + m*k) % MOD\n    # print(s)\n    return s\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = 0\n    for i in range(n):\n        res = max(res, sum(a[i: i+k]))\n    return res \n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(2,n+1):\n        sum=sum+i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def sum_square(n):\n        sum=0\n        for i in range(0,n+1,2):\n            sum+=i*i\n        return sum\n    return sum_square(n)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i*i\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(2,n+1,2)])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_even_numbers = 0\n    for i in range(2,n+1,2):\n        sum_even_numbers += i**2\n    return sum_even_numbers\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += i * i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for x in range(1,n+1):\n        if(x%2==0):\n            sum+=x**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # This function return the sum of squares of first n even numbers.\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*(n+2)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_sum = 0\n    for i in range(0, n+1, 2):\n        square_sum += i**2\n    return square_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return \"Cannot handle negative numbers\"\n    \n    else:\n        return sum([i**2 for i in range(2,n+1,2)])\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1 = [len(sublist) for sublist in list1]\n    return max(list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = []\n    for i in list1:\n        length.append(len(i))\n    return max(length)\n    \ndef count_languages():\n    '''\n    Write a function to count the number of languages in a list.\n    '''\n    languages = ['english','hindi','punjabi','marathi','gujarati','kannada']\n    count = 0\n    for i in languages:\n        count += 1\n    return count\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length=[]\n    for i in range(0,len(list1)):\n        length.append(len(list1[i]))\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for x in list1:\n        if len(x) > len(result):\n            result = x\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = len(list1[0])\n    for i in range(1,len(list1)):\n        if max<len(list1[i]):\n            max = len(list1[i])\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = len(list1[0])\n    for i in list1:\n        if length < len(i):\n            length = len(i)\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if list1 == []:\n        return 0\n    elif type(list1[0]) is list:\n        return 1+max(max_length(list1[i]) for i in range(len(list1)))\n    else:\n        return 1\n    \ndef min_length(list1):\n    '''\n    Write a function to find the list of minimum length in a list of lists.\n    '''\n    if list1 == []:\n        return 0\n    elif type(list1[0]) is list:\n        return 1+min(min_length(list1[i]) for i in range(len(list1)))\n    else:\n        return 1\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # your code\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return lengths.index(max(lengths))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = []\n    for i in list1:\n        if len(i) > len(max_len):\n            max_len = i\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    count = 0\n    max_count = 0\n    for i in list1:\n        count += 1\n        if len(i) > max_count:\n            max_count = len(i)\n    print(max_count)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a table to store subproblem results \n    subproblem_results = [[0 for _ in range(k)] for _ in range(n)] \n    for color in range(k): \n        subproblem_results[0][color] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0 or n < 0 or k < 0: \n        return 0\n    if n == 1: \n        return k \n    if k == 1: \n        return n \n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) + count_no_of_ways(n - 3, k)\n    \ndef count_no_of_ways_dp(n, k, prev_ways_dp, curr_ways_dp): \n    if n == 0 or k == 0 or n < 0 or k < 0: \n        return 0\n    if n == 1: \n        return k \n    if k == 1: \n        return n \n    if prev_ways_dp[n - 1] == -1:\n        prev_ways_dp[n - 1] = count_no_of_ways_dp(n - 1, k, prev_ways_dp, curr_ways_dp)\n    if curr_ways_dp[n - 1] == -1:\n        curr_ways_dp[n - 1] = count_no_of_ways_dp(n - 1, k, prev_ways_dp, curr_ways_dp)\n    return prev_ways_dp[n - 1] + curr_ways_dp[n - 1]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    if n == 2:\n        if k == 1:\n            return k\n        else:\n            return k * k\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    f = [0 for i in range(n+1)]\n    f[0] = 1\n    for i in range(1, n+1):\n        for j in range(k):\n            if i-1 < 0:\n                f[i] += f[0]\n            elif i-1 >= 0:\n                f[i] += f[i-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a table to store solutions to subproblems.  \n    # No. of ways to paint fence of size 0 with 0 or 1 color are both 1.\n    m = n + 1\n    table = [0 for i in range(m)]\n    table[0] = 1\n    table[1] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1:\n        return 1\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if k == 1:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k*k\n    \n    n_ways = [0]*n\n    n_ways[0] = k\n    n_ways[1] = k*k\n    n_ways[2] = k*k*k\n    n_ways[3] = k*k*k*k\n    \n    for i in range(4, n):\n        n_ways[i] = n_ways[i-3]*k + n_ways[i-2]*k*k + n_ways[i-1]*k*k*k\n    return n_ways[n-1]\n    \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initializing the first row with zeroes.\n    matrix = [[0 for i in range(k)] for i in range(n + 1)]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(k, 0, -1):\n            if j >= i:\n                dp[j] = dp[j] + dp[j - i]\n    return dp[k]\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        if(n>m):\n            return n//m\n        else:\n            return m//n\n    except ZeroDivisionError:\n        return 'Division by Zero'\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # print(n,m)\n    if m>0:\n        q=n//m\n        return q\n    if m==0:\n        print('No integer divisor')\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n>m):\n        return n//m\n    else:\n        return m//n\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(\"The quotient is\",n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int((n/m))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q=n//m\n    return(q)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m \n    return q\nprint(find(10,3))\nprint(find(10,5))\nprint(find(10,4))\nprint(find(10,7))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"The third side of the triangle is:\", math.sqrt((w**2)+(h**2)))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def b_c_given_a(a,b):\n        c = math.sqrt(a**2 + b**2)\n        return c\n    def b_c_given_c(a,c):\n        b = math.sqrt(c**2 - a**2)\n        return b\n    def b_c_given_b(a,b):\n        c = math.sqrt(b**2 - a**2)\n        return c\n    if w == h:\n        b = h\n    elif w!= h:\n        b = b_c_given_a(w,h)\n    return b\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        w, h = h, w\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w!=h:\n        return w**2+h**2\n        #print('w and h are different.')\n    else:\n        return math.sqrt(w**2+h**2)\n        #print('w and h are the same.')\n        \ndef otherside_rightangle_for(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a!=b:\n        return a**2+b**2\n        #print('a and b are different.')\n    else:\n        return math.sqrt(a**2+b**2)\n        #print('a and b are the same.')\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        print('The third side is', w)\n    elif w!= h:\n        s = (w**2 + h**2) ** 0.5\n        print('The third side is', s)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w*w+h*h)\n    return c\n    \ndef otherside_rightanglediagonal(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(a*a+b*b)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c=w**2+h**2\n    return math.sqrt(c)\ndef otherside_rightangle_recursive(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def otherside(side_a,side_b,side_c):\n        c=side_a**2+side_b**2-2*side_a*side_b*math.cos(side_c)\n        return math.sqrt(c)\n    return otherside(w,h,math.pi/2)\ndef is_equal(a,b):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return a == int(str(a)[0])+int(str(a)[1])\ndef is_equal_recursive(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    if len(str(a)) == 1:\n        return a==a\n    return a==int(str(a)[0])+int(str(a)[1])\ndef is_equal_recursive2(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a)\ndef is_equal_recursive3(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    def is_equal_recursive2(a):\n        if len(str(a)) == 1:\n            return a==a\n        return a==int(str(a)[0])+int(str(a)[1])\n    return is_equal_recursive2(a)\ndef is_equal_recursive4(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    if len(str(a)) == 1:\n        return a==a\n    return is_equal_recursive4(a-int(str(a)[0])-int(str(a)[1]))\ndef is_equal_recursive5(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    if len(str(a)) == 1:\n        return a==a\n    return is_equal_recursive5(a-int(str(a)[0])-int(str(a)[1]))\ndef is_equal_recursive6(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,0)\ndef is_equal_recursive7(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a)\ndef is_equal_recursive8(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a)\ndef is_equal_recursive9(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a)\ndef is_equal_recursive10(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a)\ndef is_equal_recursive11(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a)\ndef is_equal_recursive12(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a)\ndef is_equal_recursive13(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a)\ndef is_equal_recursive14(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a)\ndef is_equal_recursive15(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive16(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive17(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive18(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive19(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive20(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive21(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive22(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive23(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive24(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a)\ndef is_equal_recursive25(a):\n    '''\n    Write a function to find whether a number is equal to the sum of its digits.\n    '''\n    return is_equal_recursive(a,a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a)"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    #Find the third side length\n    thirdside = math.sqrt((w**2)+(h**2))\n    \n    #Return the third side\n    return thirdside\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2+w**2)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return(max(listval))\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    x = len(listval)\n    listval.sort()\n    return listval[x-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    def max_rec(lst):\n        if len(lst) == 1:\n            return lst[0]\n        return max(lst[0],max_rec(lst[1:]))\n    return max_rec(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 'List is empty'\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if type(maxval) == int and type(listval[i]) == int:\n            if listval[i] > maxval:\n                maxval = listval[i]\n        elif type(maxval) == str and type(listval[i]) == str:\n            if listval[i] > maxval:\n                maxval = listval[i]\n        elif type(maxval) == int and type(listval[i]) == str:\n            if listval[i] > maxval:\n                maxval = listval[i]\n        elif type(maxval) == str and type(listval[i]) == int:\n            if listval[i] > maxval:\n                maxval = listval[i]\n        elif type(maxval) == str and type(listval[i]) == str:\n            if listval[i] > maxval:\n                maxval = listval[i]\n        else:\n            print('Invalid input')\n            return\n    print(maxval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for num in listval:\n        if num > maxval:\n            maxval = num\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError\n    max_num = listval[0]\n    for val in listval:\n        if type(val) == int:\n            if val > max_num:\n                max_num = val\n        else:\n            raise TypeError\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n    \n    \n    "
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for num in listval:\n        if num > max_val:\n            max_val = num\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 0:\n        return 1\n    divisors = [1]\n    for i in range(2,int(math.sqrt(number))+1):\n        if number%i == 0:\n            divisors.append(i)\n    if math.sqrt(number).is_integer():\n        divisors.append(int(math.sqrt(number)))\n    return sum(divisors) + number\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 1\n    for i in range(2,int(number**0.5)+1):\n        if number%i==0:\n            div_sum += i\n            div_sum += number/i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, number + 1) if number % i == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    # loop through the list of divisors and add the numbers to a total variable\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n    \n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    sum_divs = sum(divisors)\n    return sum_divs\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(2, number):\n        if number % i == 0:\n            result += i\n    return result\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # This function is contributed by Mohit Kumra\n    # print(arr)\n    if len(arr) == 1:\n        return arr, 0\n    else:\n        mid = len(arr)//2\n        # print(mid)\n        A = arr[:mid]\n        B = arr[mid:]\n        # print(A)\n        # print(B)\n        A, a = get_Inv_Count(A)\n        B, b = get_Inv_Count(B)\n        # print(A, a, B, b)\n        C = []\n        i = j = k = 0\n        inversion_count = a + b\n        # print(inversion_count)\n        while(i < len(A) and j < len(B)):\n            if A[i] < B[j]:\n                C.append(A[i])\n                i += 1\n            else:\n                C.append(B[j])\n                j += 1\n                inversion_count += (len(A)-i)\n        C += A[i:]\n        C += B[j:]\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_len = len(arr)\n    count = 0\n    for i in range(0, arr_len):\n        for j in range(0, arr_len):\n            if (arr[i] < arr[j]):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # base case\n    if len(arr) < 2: \n        return arr, 0\n    else: \n        # split array in half\n        mid = len(arr) // 2\n        # recursively call function to count inversions\n        left, left_inversions = get_Inv_Count(arr[:mid])\n        right, right_inversions = get_Inv_Count(arr[mid:])\n        # sort and merge lists\n        sorted_arr = merge_and_count_inversions(left, right)\n        # count total number of inversions\n        inversions = left_inversions + right_inversions\n        # return sorted array and number of inversions\n        return sorted_arr, inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr) \n  "
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge(arr, left, mid, right): \n        inv_count = 0\n        i = left\n        j = mid+1\n        k = left\n        arr = sorted(arr)\n        while(i<=mid and j<=right): \n            if arr[i]<=arr[j]: \n                i+=1\n            else: \n                inv_count+=mid+1-i \n                j+=1\n        for i in range(left,right+1): \n            arr[i] = left \n        return inv_count \n    def mergeSort(arr, left, right): \n        inv_count = 0\n        if left < right: \n            mid = (left + right)//2\n            inv_count+=mergeSort(arr, left, mid) \n            inv_count+=mergeSort(arr, mid+1, right) \n            inv_count+=merge(arr, left, mid, right) \n        return inv_count \n    return mergeSort(arr,0,len(arr)-1) \ndef get_Inv_Count_InPlace(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def mergeSortInPlace(arr, left, right): \n        def merge(arr, left, mid, right): \n            i = left \n            j = mid+1\n            for k in range(left, right+1): \n                if i > mid: \n                    arr[k] = j \n                    j+=1\n                elif j > right: \n                    arr[k] = i \n                    i+=1\n                elif arr[i] <= arr[j]: \n                    arr[k] = i \n                    i+=1\n                else: \n                    arr[k] = j \n                    j+=1\n        def countInversions(arr, left, right, arr_sorted): \n            inv_count = 0\n            if left < right: \n                mid = (left + right)//2\n                countInversions(arr, left, mid, arr_sorted) \n                countInversions(arr, mid+1, right, arr_sorted) \n                inv_count = countInversionsInPlace(arr, left, mid, right, arr_sorted) \n            return inv_count \n        def countInversionsInPlace(arr, left, mid, right, arr_sorted): \n            i = left \n            j = mid+1\n            k = left\n            while(i<=mid and j<=right): \n                if arr[i]<=arr[j]: \n                    arr_sorted[k] = arr[i] \n                    i+=1\n                else: \n                    arr_sorted[k] = arr[j] \n                    j+=1\n                    inv_count+=mid+1-i \n                k+=1\n            while(i<=mid): \n                arr_sorted[k] = arr[i] \n                i+=1\n                k+=1\n            while(j<=right): \n                arr_sorted[k] = arr[j] \n                j+=1\n                k+=1\n            for i in range(left, right+1): \n                arr[i] = arr_sorted[i] \n            return inv_count \n        return countInversions(arr, left, right, arr) \n    return mergeSortInPlace(arr, 0, len(arr)-1) \ndef get_count_of_num(arr, k): \n    '''\n    Write a python function to count the number of times an element appears in an array.\n    '''\n    def getCount(arr, k): \n        def binarySearch(arr, left, right, k): \n            if left > right: \n                return 0\n            mid = (left + right)//2\n            if arr[mid] == k: \n                return (mid + 1) \n            elif arr[mid] > k: \n                return binarySearch(arr, left, mid-1, k) \n            else: \n                return binarySearch(arr, mid+1, right, k) \n        return binarySearch(arr, 0, len(arr)-1, k) \n    return getCount(arr, k) \ndef get_pos_of_num(arr, k): \n    '''\n    Write a python function to find the index of an element in an array.\n    '''\n    def binarySearch(arr, left, right, k): \n        if left > right: \n            return -1\n        mid = (left + right)//2\n        if arr[mid] == k: \n            return mid\n        elif arr[mid] > k: \n            return binarySearch(arr, left, mid-1, k) \n        else: \n            return binarySearch(arr, mid+1, right, k) \n    return binarySearch(arr, 0, len(arr)-1, k) \ndef get_last_occ_of_num(arr, k): \n    '''\n    Write a python function to find the last index of an element in an array.\n    '''\n    def binarySearch(arr, left, right, k): \n        if left > right: \n            return -1\n        mid = (left + right)//2\n        if arr[mid] == k: \n            return mid\n        elif arr[mid] > k: \n            return binarySearch(arr, left, mid-1, k) \n        else: \n            return binarySearch(arr, mid+1, right, k) \n    return binarySearch(arr, 0, len(arr)-1, k) \ndef get_missing_number(arr, size): \n    '''\n    Write a python function to find the missing number.\n    '''\n    def linearSearch(arr, size): \n        for i in range(size): \n            if arr[i]!=i: \n                return i \n        return size \n    return linearSearch(arr, size) \ndef get_longest_palindromic_substr(str): \n    '''\n    Write a python function to find the longest palindromic substring.\n    '''\n    def longestPalindromeSubstr(str): \n        def expand(left, right): \n            while left >= 0 and right < len(str) and str[left] == str[right]: \n                left -= 1\n                right += 1\n            return str[left+1:right] \n        if len(str) < 2 or str[:] == str[::-1]: \n            return str \n        result = '' \n        for i in range(len(str)): \n            result = max(result, expand(i, i), expand(i, i+1), key=len) \n        return result \n    return longestPalindromeSubstr(str) \ndef get_number_of_subarr_with_sum(arr, k): \n    '''\n    Write a python function to count the number of subarrays with sum = k.\n    '''\n    def findNumberOfSubarraysWithSumK(arr, k): \n        def binarySearch(arr, left, right, k, result): \n            if left > right: \n                return 0\n            mid = (left + right)//2\n            if arr[mid] == k: \n                result[0] += 1 \n            elif arr[mid] > k: \n                binarySearch(arr, left, mid-1, k, result) \n            else: \n                binarySearch(arr, mid+1, right, k, result) \n        def countSubarrWithSumK(arr, k): \n            n = len(arr) \n            result = [0] \n            binarySearch(arr, 0, n-1, k, result) \n            return result[0] \n        return countSubarrWithSumK(arr, k) \n    return findNumberOfSubarraysWithSumK(arr, k) \ndef get_missing_num_sorted_arr(arr): \n    '''\n    Write a python function to find the first missing number in an array.\n    '''\n    def firstMissingNumSortedArr(arr): \n        def binarySearch(arr, left, right, k): \n            if left > right: \n                return -1\n            mid = (left + right)//2\n            if arr[mid] == k: \n                return mid\n            elif ar"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)[1]\n    "
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] > arr[j]):\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[0] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if isinstance(i, list):\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list_flat = []\n    for i in list1:\n        if type(i) == list:\n            list_flat.extend(flatten_list(i))\n        else:\n            list_flat.append(i)\n    return list_flat\n    "
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def get_flatten_list(list1):\n        if type(list1) == list:\n            if len(list1) == 0:\n                return None\n            else:\n                for i in list1:\n                    if type(i) == list:\n                        get_flatten_list(i)\n                    else:\n                        return list1\n        else:\n            return list1\n    return get_flatten_list(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Your code here\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            for item1 in item:\n                flat_list.append(item1)\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(list1):\n        flatten_list = []\n        for item in list1:\n            if isinstance(item, list):\n                flatten_list.extend(flatten(item))\n            else:\n                flatten_list.append(item)\n        return flatten_list\n    return flatten(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n    for item in list1:\n        if isinstance(item, list):\n            final_list.extend(flatten_list(item))\n        else:\n            final_list.append(item)\n    return final_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #list1 = [[1,2,3,4],[2,3,4,5],[6,7,8]]\n    #flattened_list = [1,2,3,4,2,3,4,5,6,7,8]\n    if isinstance(list1, list):\n        if len(list1) == 1:\n            if isinstance(list1[0], list):\n                return flatten_list(list1[0])\n            else:\n                return list1\n        else:\n            flattened_list = []\n            for i in list1:\n                if isinstance(i, list):\n                    flattened_list += flatten_list(i)\n                else:\n                    flattened_list.append(i)\n            return flattened_list\n    else:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    result = []\n    for element in list1:\n        if type(element) is list:\n            result += flatten_list(element)\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    #max_aggregate_list.append(stdata[0][0])\n    for i in range(len(stdata)):\n        max_aggregate_list.append(stdata[i][0])\n    return(max(max_aggregate_list))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([max(t) for t in stdata])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata,key=lambda x: x[2])[2]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(sum(t[0] for t in stdata), sum(t[1] for t in stdata))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #sort the data in the list by the second element\n    #in each tuple, sort the list in descending order\n    stdata.sort(key = lambda x:x[1], reverse=True)\n    #initilize the dictionary\n    dict = defaultdict(lambda:0)\n    for i in stdata:\n        dict[i[0]] += i[1]\n    #print the dictionary\n    for k,v in dict.items():\n        print(k,v)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # list of tuple\n    # dictionary with key as a tuple from list and value as the corresponding list of tuples\n    # The dictionary will be used to find the maximum of the tuple\n    # dictionary with key as a tuple from list and value as the corresponding list of tuples\n    # The dictionary will be used to find the maximum of the tuple\n    l = []\n    dic = {}\n    for tuples in stdata:\n        l.append(tuples[1])\n        #print(tuples[0])\n        dic[tuples[0]] = tuples[1]\n    # print(dic)\n    l.sort(reverse=True)\n    print(l)\n    # return the maximum value of the list of tuples\n    for tuples in stdata:\n        for i in l:\n            if i == tuples[1]:\n                return tuples[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = []\n    aggregate.append(0)\n    for i in range(1, len(stdata)):\n        aggregate.append(max(aggregate[i-1], stdata[i][0] - stdata[i][1]))\n    return aggregate[-1]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for tup in stdata:\n        if tup[1] > max_agg:\n            max_agg = tup[1]\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = []\n    # res = [0] * len(stdata)\n    if len(stdata) == 0:\n        return res\n    if len(stdata) == 1:\n        return stdata[0][1]\n    else:\n        res.append(stdata[0][1])\n        for i in range(1, len(stdata)):\n            if stdata[i][0] >= stdata[i-1][0]:\n                res.append(stdata[i][1])\n            else:\n                res.append(max(res[i-1], stdata[i][1]))\n        return max(res)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    lst=[]\n    for i in range(len(stdata)):\n        lst.append(stdata[i][1])\n    print(max(lst))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0]*(n+1) for _ in range(2**n)]\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n=int(n)\n    def count_n_seq(n,count,curr_sum,curr_sum_1):\n        if n==0:\n            if curr_sum==curr_sum_1:\n                count+=1\n            return count\n        else:\n            count=count_n_seq(n-1,count,curr_sum,curr_sum_1)\n            count=count_n_seq(n-1,count,curr_sum+2**n,curr_sum_1+2**n)\n            return count\n    return count_n_seq(n,0,0,0)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0, 2**(2*n)):\n        if int(bin(i)[2:].zfill(2*n)[:n], 2) == int(bin(i)[2:].zfill(2*n)[n:], 2):\n            count += 1\n    return count\nprint(count_binary_seq(1))\nprint(count_binary_seq(2))\nprint(count_binary_seq(3))\nprint(count_binary_seq(4))\nprint(count_binary_seq(5))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum = 0\n    s = '1'\n    for i in range(0, n):\n        sum += int(s, 2)\n        s += '0' + s[0]\n    # print(sum)\n    s = s[1:]\n    s = '0' + s\n    sum += int(s, 2)\n    # print(sum)\n    return 2**(n*2) - 1 if sum == 2**(n*2) - 1 else 0\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return count_binary_seq_util(0, n, 0, n)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = 0\n    for i in range(0, 2**n):\n        #print(bin(i)[2:])\n        #print(int(bin(i)[2:]) % (2**n))\n        if(int(bin(i)[2:]) % (2**n) == 0):\n            a = a + 1\n    return a\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize the count for all possible binary sequences\n    count = 0\n    # base case:\n    count = 2**(2*n)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0 for i in range(n + 1)] for j in range(2 ** n)] \n    mod = 10 ** 9 + 7\n    \n    for i in range(n): \n        dp[1][i] = 1\n    \n    for i in range(2, 2 ** n): \n        for j in range(n): \n            if (i >> j) & 1 == 0: \n                dp[i][j] = (dp[i][j] + dp[i - 1][j + 1]) % mod\n            else: \n                dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % mod\n    \n    count = 0\n    for i in range(2 ** n): \n        if dp[i][0] == dp[i][n - 1]: \n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    for i in range(2**(n*2)):\n        s1 = bin(i)[2:].zfill(n*2)\n        s2 = s1[:n]\n        s3 = s1[n:]\n        if s1[:n] == s1[n:]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return binomial(2**n, n)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    else:\n        return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    elif isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        if not d:\n            return 0\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 1 + max(map(dict_depth, d.values()))\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + (max(map(dict_depth, d.values())) if isinstance(d, dict) else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    elif len(d) == 0:\n        return 0\n    else:\n        max_depth = 0\n        for k in d:\n            if isinstance(d[k], dict):\n                max_depth = max(max_depth, dict_depth(d[k]))\n        return max_depth + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # index=0\n    # ranges=4\n    # rotations=2\n    # arr = [1, 2, 3, 4, 5]\n    # arr_len=len(arr)\n    # index=arr_len\n    # print(arr)\n    # for i in range(0,ranges) :\n    #     print(arr[i])\n    # # for i in range(0,rotations) :\n    # #     print(arr[index])\n    #     index+=1\n    #     if index>=arr_len :\n    #         index=0\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(\"\\nEnter the number of rotations for each range of indices : \")\n    rotations_dict = {}\n    for i in range(len(ranges)) :\n        rotations_dict[ranges[i]] = int(input(\"\\nNumber of rotations for range : \"+str(ranges[i])+\" = \"))\n    index_element = rotations[index]\n    print(\"\\nThe element at index \"+str(index_element)+\" after rotation is : \",end=\"\")\n    print(arr[ranges[index_element] - 1])\n    return\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations%len(arr)\n    new_arr = []\n    for i in range(len(arr)) :\n        new_arr.append(arr[(i+rotations)%len(arr)])\n    return new_arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    print(\"Index is :\",index)\n    print(\"After rotating the array by '\",rotations,\"' rotations,\")\n    for i in range(len(arr)) :\n        if i == index :\n            print(arr[i],\"is at index\",i)\n            break\n    print(\"***************************************************************\")\n    \ndef main() :\n    \n    print(\"Enter the array elements : \")\n    arr = []\n    num = int(input())\n    for i in range(num) :\n        arr.append(int(input()))\n    \n    print(\"Enter number of rotations :\")\n    rotations = int(input())\n    \n    print(\"Enter the index for the element to be found :\")\n    index = int(input())\n    \n    find_Element(arr,rotations,index)\n    \nif __name__ == \"__main__\" :\n    main("
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr) :\n        return False\n    for i in range(rotations) :\n        if index == 0 :\n            index = len(arr) - 1\n        else :\n            index -= 1\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    r = index%len(arr)\n    k = rotations[r]%len(arr)\n    return(arr[(index+k)%len(arr)])\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        if(index+i)<len(arr) :\n            print(arr[index+i],end=\" \")\n    print()\n    return\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Python program to find element at a given index \n    # after number of rotations. \n    print(\"Finding element in a rotated sorted array at index\",index)\n    print(\"The array is:\",arr)\n    print(\"The array is rotated for\",rotations,\"times\")\n    start,end = 0,len(arr)-1\n    mid = (start+end)//2\n    while (start<=end) :\n        mid = (start+end)//2\n        if(arr[mid] == ranges[index]) :\n            return mid\n        if(ranges[index]<arr[mid]) :\n            end = mid-1\n        else :\n            start = mid+1\n    start = 0\n    end = len(arr)-1\n    while (start<=end) :\n        mid = (start+end)//2\n        if(arr[mid] == ranges[index]) :\n            return mid\n        if(ranges[index]<arr[mid]) :\n            end = mid-1\n        else :\n            start = mid+1\n    return -1\n    \ndef find_element_bf(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Python program to find element at a given index \n    # after number of rotations. \n    start,end = 0,len(arr)-1\n    while (start<=end) :\n        mid = (start+end)//2\n        if(arr[mid] == ranges[index]) :\n            return mid\n        if(ranges[index]<arr[mid]) :\n            end = mid-1\n        else :\n            start = mid+1\n    start = 0\n    end = len(arr)-1\n    while (start<=end) :\n        mid = (start+end)//2\n        if(arr[mid] == ranges[index]) :\n            return mid\n        if(ranges[index]<arr[mid]) :\n            end = mid-1\n        else :\n            start = mid+1\n    return -1\n        \n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left = 0\n    right = len(arr) - 1\n    if ranges[index][0] > len(arr) :\n        return 0\n    elif ranges[index][0] == len(arr) :\n        return arr[-1]\n    while(left <= right):\n        mid = left + (right - left) // 2\n        if ranges[index][1] == arr[mid] :\n            return arr[mid]\n        if ranges[index][1] > arr[mid] :\n            left = mid + 1\n        else:\n            right = mid - 1\n    left_rotations = rotations[index][0]\n    right_rotations = rotations[index][1]\n    if right_rotations!= 0 and (right_rotations > left_rotations or right_rotations == left_rotations):\n        return 0\n    if left_rotations == 0:\n        return arr[mid]\n    if right_rotations == 0:\n        return arr[mid - left_rotations]\n    return find_Element(arr[:mid - left_rotations],ranges,rotations,index - 1)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr) :\n        return -1\n    if rotations < 0 :\n        return -1\n    if index < 0:\n        return -1\n    start = 0\n    end = len(ranges)-1\n    if ranges[0] >= ranges[1] :\n        while start <= end :\n            mid = start + (end-start)//2\n            if ranges[mid] >= ranges[start] and ranges[mid] <= ranges[end] :\n                if index < ranges[mid] :\n                    end = mid - 1\n                else :\n                    start = mid + 1\n            else :\n                break\n    else :\n        while start <= end :\n            mid = start + (end-start)//2\n            if ranges[mid] >= ranges[start] and ranges[mid] <= ranges[end] :\n                if index > ranges[mid] :\n                    start = mid + 1\n                else :\n                    end = mid - 1\n            else :\n                break\n    if index > ranges[start] :\n        rotations = rotations % (ranges[start])\n        return find_Element(arr,ranges,rotations,ranges[start])\n    elif index < ranges[end] :\n        rotations = rotations % (ranges[end])\n        return find_Element(arr,ranges,rotations,ranges[end])\n    else :\n        return arr[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_list = []\n    for words in words:\n        if words.startswith('p'):\n            new_list.append(words)\n    return new_list"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"p\\w+\")\n    for word in words:\n        match = pattern.match(word)\n        if match:\n            print(match.group())\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    l = []\n    for i in words:\n        if i[0] == 'p' and i[1] == 'a':\n            l.append(i)\n    return l\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            print(word)\ndef starts_withp(words):\n    '''\n    Write a function to return all words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\ndef convert_word_num(word):\n    '''\n    Write a function to return a numeric value of a string word (i.e. 'one', 'two', etc)\n    '''\n    if word.isalpha():\n        return word\n    else:\n        try:\n            return int(word)\n        except:\n            return float(word)\ndef convert_word_num_list(words):\n    '''\n    Write a function to return a list of numeric values of a list of words (i.e. ['one', 'two', 'three'])\n    '''\n    return [convert_word_num(word) for word in words]\ndef test_convert_word_num_list():\n    assert convert_word_num_list(['one', 'two', 'three']) == [1, 2, 3]\n    assert convert_word_num_list(['one', 'two', 'three', 'four']) == [1, 2, 3, 4]\ndef convert_word_num_list_in_dict(words):\n    '''\n    Write a function to return a dictionary of numeric values of a list of words (i.e. ['one', 'two', 'three'])\n    '''\n    return {word: convert_word_num(word) for word in words}\ndef test_convert_word_num_list_in_dict():\n    assert convert_word_num_list_in_dict(['one', 'two', 'three']) == {'one': 1, 'two': 2, 'three': 3}\n    assert convert_word_num_list_in_dict(['one', 'two', 'three', 'four']) == {'one': 1, 'two': 2, 'three': 3, 'four': 4}\ndef first_n_even_number(n):\n    '''\n    Write a function to return first n even numbers.\n    '''\n    return [num for num in range(0, n+1, 2)]\ndef first_n_even_number_list(n):\n    '''\n    Write a function to return a list of first n even numbers.\n    '''\n    return [num for num in range(0, n+1, 2)]\ndef test_first_n_even_number():\n    assert first_n_even_number(6) == [0, 2, 4, 6, 8, 10]\n    assert first_n_even_number(4) == [0, 2, 4, 6]\ndef test_first_n_even_number_list():\n    assert first_n_even_number_list(6) == [0, 2, 4, 6, 8, 10]\n    assert first_n_even_number_list(4) == [0, 2, 4, 6]\ndef first_n_odd_number(n):\n    '''\n    Write a function to return first n odd numbers.\n    '''\n    return [num for num in range(1, n+1, 2)]\ndef first_n_odd_number_list(n):\n    '''\n    Write a function to return a list of first n odd numbers.\n    '''\n    return [num for num in range(1, n+1, 2)]\ndef test_first_n_odd_number():\n    assert first_n_odd_number(6) == [1, 3, 5, 7, 9, 11]\n    assert first_n_odd_number(4) == [1, 3, 5, 7]\ndef test_first_n_odd_number_list():\n    assert first_n_odd_number_list(6) == [1, 3, 5, 7, 9, 11]\n    assert first_n_odd_number_list(4) == [1, 3, 5, 7]\ndef fib(n):\n    '''\n    Write a function to return a list of Fibonacci numbers up to a certain number.\n    '''\n    return [num for num in range(n+1)]\ndef fib_list(n):\n    '''\n    Write a function to return a list of Fibonacci numbers up to a certain number.\n    '''\n    return [num for num in range(n+1)]\ndef test_fib():\n    assert fib(5) == [0, 1, 1, 2, 3]\n    assert fib(8) == [0, 1, 1, 2, 3, 5, 8, 13]\ndef test_fib_list():\n    assert fib_list(5) == [0, 1, 1, 2, 3]\n    assert fib_list(8) == [0, 1, 1, 2, 3, 5, 8, 13]\ndef fib_dict(n):\n    '''\n    Write a function to return a dictionary of Fibonacci numbers up to a certain number.\n    '''\n    return {num: num for num in range(n+1)}\ndef test_fib_dict():\n    assert fib_dict(5) == {0: 0, 1: 1, 2: 1, 3: 2, 4: 3, 5: 5, 6: 8, 7: 13}\n    assert fib_dict(8) == {0: 0, 1: 1, 2: 1, 3: 2, 4: 3, 5: 5, 6: 8, 7: 13, 8: 21, 9: 34, 10: 55, 11: 89, 12: 144, 13: 233, 14: 377, 15: 610, 16: 987, 17: 1597, 18: 2584, 19: 4181, 20: 6765, 21: 10946, 22: 17711, 23: 28657, 24: 46368, 25: 75025, 26: 121393, 27: 196418, 28: 317811, 29: 514229, 30: 832040, 31: 1346269, 32: 2178309, 33: 3524578, 34: 5702887, 35: 9227465, 36: 14930352, 37: 24157817, 38: 39088169, 39: 63245986, 40: 102334155, 41: 165580141, 42: 267914296, 43: 433494437, 44: 701408733, 45: 1134903170, 46: 1836311903, 47: 2971215073, 48: 4807526976, 49: 7778742049, 50: 12586269025, 51: 20365011074, 52: 32796576279, 53: 54900321931, 54: 86267571272, 55: 139583862445, 56: 225851433717, 57: 365435296162, 58: 591286729879, 59: 956722026041, 60: 1548008755920, 61: 2504730781961, 62: 4052739537881, 63: 6366133055681, 64: 1048576}\ndef test_fib_dict2():\n    assert fib_dict(5) == {0: 0, 1: 1, 2: 1, 3: 2, 4: 3, 5: 5, 6: 8, 7: 13}\n    assert fib_dict(8) == {0: 0, 1: 1, 2: 1, 3: 2, 4: 3, 5: 5, 6: 8, 7: 13, 8: 21, 9: 34, 10: 55, 11: 89, 12: 144, 13: 233, 14: 377, 15: 610, 16: 987, 17: 1597, 18: 2584, 19: 4181, 20: 6765, 21: 10946, 22: 17711, 23: 28657, 24: 46368, 25: 75025, 26: 121393, 27: 196418, 28: 317811, 29: 514229, 30: 832040, 31: 1346269, 32: 2178309, 33: 3524578, 34: 5702887, 35: 9227465, 36: 14930352, 37: 24157817, 38: 39088169, 39: 63245986, 40: 102334155, 41: 165580141, 42: 267914296, 43: 433494437, 44: 701408733, 45: 1134903170, 46: 1"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list1 = []\n    for i in words:\n        if i[0] == \"p\":\n            list1.append(i)\n    return (list1[0],list1[1])\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0]=='p':\n            return word\ndef has_p(words):\n    '''\n    Write a function to return a list of all words that contain a 'p' somewhere.\n    '''\n    return [word for word in words if 'p' in word]\ndef pig_latin(words):\n    '''\n    Write a function to translate English to Pig Latin.\n    '''\n    return [word+'ay' if word[0] in 'aeiou' else word[1:]+word[0]+'ay' for word in words]\ndef is_palindrome(number):\n    '''\n    Write a function to check whether a number is palindrome.\n    '''\n    return number==int(str(number)[::-1])\ndef is_prime(number):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    for i in range(2,int(number/2)+1):\n        if number%i==0:\n            return False\n    return True if number>1 else False\ndef end_with_s(words):\n    '''\n    Write a function to return a list of all words in a string ending with's'.\n    '''\n    return [word for word in words if word[-1]=='s']\ndef most_frequent(words):\n    '''\n    Write a function to find the most frequent character in a string.\n    '''\n    return max(words,key=words.count)\ndef is_anagram(word1,word2):\n    '''\n    Write a function to check whether two words are anagrams or not.\n    '''\n    return sorted(word1)==sorted(word2)\ndef is_valid(number):\n    '''\n    Write a function to check whether a number is valid or not.\n    '''\n    return True if number==int(str(number)[::-1]) else False\ndef end_with_c(words):\n    '''\n    Write a function to return a list of all words ending with 'c'.\n    '''\n    return [word for word in words if word.endswith('c')]\ndef find_hyphen(words):\n    '''\n    Write a function to return a list of words where there's an 'a' in it.\n    '''\n    return [word for word in words if '-' in word]\ndef count_vowels(words):\n    '''\n    Write a function to return a list of vowels in a string.\n    '''\n    vowels=['a','e','i','o','u','A','E','I','O','U']\n    return [word for word in words for letter in word if letter in vowels]\ndef count_consonants(words):\n    '''\n    Write a function to return a list of consonants in a string.\n    '''\n    vowels=['a','e','i','o','u','A','E','I','O','U']\n    return [word for word in words for letter in word if letter not in vowels]\ndef sum_of_multiples(num):\n    '''\n    Write a function to return a list of multiples of 3 & 5 below a number.\n    '''\n    return [i for i in range(num) if i%3==0 or i%5==0]\ndef multiply_even_numbers(numbers):\n    '''\n    Write a function to multiply all the even numbers in a list.\n    '''\n    return 1 if len(numbers)==0 else numbers[0] if numbers[0]%2==0 else numbers[0]*numbers[1]\ndef is_pangram(sentence):\n    '''\n    Write a function to check whether a sentence is a pangram or not.\n    '''\n    alphabet=set(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'])\n    return True if set(sentence.lower())>=alphabet else False\ndef is_anagram_of_palindrome(words):\n    '''\n    Write a function to check whether the input word is an anagram of a palindrome or not.\n    '''\n    return sorted(words)==sorted(words[::-1])\ndef substring_between_letters(sentence,start,end):\n    '''\n    Write a function to get the substring between two letters of a string.\n    '''\n    return sentence[sentence.find(start)+1:sentence.find(end)]\ndef palindrome_index(words):\n    '''\n    Write a function to return the index of the first non-repeating character.\n    '''\n    for i in range(len(words)):\n        if len(words[i:i+len(words[i])//2+1])>1:\n            if words[i:i+len(words[i])//2+1]==words[i:i+len(words[i])//2+1][::-1]:\n                return i\n    return None\ndef frequency_sort(items):\n    '''\n    Write a function to return a list of sorted tuples based on the frequency of the elements in the tuples.\n    '''\n    frequency={}\n    for item in items:\n        if item not in frequency:\n            frequency[item]=1\n        else:\n            frequency[item]+=1\n    frequency_list=[(k,v) for k,v in frequency.items()]\n    frequency_list.sort(key=lambda x: x[1],reverse=True)\n    return [item[0] for item in frequency_list]\ndef base_conversion(number,base):\n    '''\n    Write a function to convert a decimal number into a different base number.\n    '''\n    base_numbers='0123456789abcdefghijklmnopqrstuvwxyz'\n    output=''\n    while number>0:\n        output+=base_numbers[number%base]\n        number=number//base\n    return output[::-1]\ndef every_other_letter(words):\n    '''\n    Write a function to return a list of every other letter in a word.\n    '''\n    return [word[i] for i in range(len(words)) if i%2==0]\ndef remove_vowels(word):\n    '''\n    Write a function to remove all vowels from a word.\n    '''\n    return ''.join(letter for letter in word if letter not in 'aeiou')\ndef encrypt_message(message,key):\n    '''\n    Write a function to encrypt a message using a key.\n    '''\n    encryption=''\n    for i in range(len(message)):\n        encryption+=chr(ord(message[i])+ord(key[i]))\n    return encryption\ndef decrypt_message(message,key):\n    '''\n    Write a function to decrypt a message using a key.\n    '''\n    decryption=''\n    for i in range(len(message)):\n        decryption+=chr(ord(message[i])-ord(key[i]))\n    return decryption\ndef solution(words):\n    '''\n    Write a function to create a new list of words where each word in the list starts with the last letter of the previous word.\n    '''\n    return [words[i][len(words[i])-1] if len(words[i])>0 else words[i] for i in range(len(words))]\ndef group_anagrams(words):\n    '''\n    Write a function to group anagrams together.\n    '''\n    anagrams={}\n    for word in words:\n        word_sorted=sorted(word)\n        if word_sorted not in anagrams:\n            anagrams[word_sorted]=[word]\n        else:\n            anagrams[word_sorted].append(word)\n    return list(anagrams.values())\ndef find_pairs(numbers,target_sum):\n    '''\n    Write a function to return a list of tuples of 2 numbers that sum up to target_sum.\n    '''\n    return [(numbers[i],numbers[j]) for i in range(len(numbers)) for j in range(len("
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern=re.compile('^p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    pattern=re.compile('p$')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef no_p(words):\n    '''\n    Write a function to return two words from a list of words not starting with letter 'p'.\n    '''\n    pattern=re.compile('^\\d')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef no_p(words):\n    '''\n    Write a function to return two words from a list of words not ending with letter 'p'.\n    '''\n    pattern=re.compile('p$')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('\\d')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('^.*p.*p$')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=list(filter(pattern.match,words))\n    print(lst)\ndef find_p(words):\n    '''\n    Write a function to return two words from a list of words containing the letter 'p'.\n    '''\n    pattern=re.compile('p.*p')\n    lst=lis"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_1=words.split()\n    for i in list_1:\n        if i[0]=='p':\n            print(i)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    f=words[:]\n    for word in f:\n        if word[0]==\"p\":\n            return(word)\ndef letters(words):\n    '''\n    Write a function to return letters in the word\n    '''\n    h=words[:]\n    for word in h:\n        return(re.findall(r'\\w',word))\ndef words_length(words):\n    '''\n    Write a function to return the number of words in a list\n    '''\n    g=words[:]\n    return(len(g))\ndef avg_length(words):\n    '''\n    Write a function to return the average length of words in a list\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(sum(b)/len(b))\ndef list_from_file(filename):\n    '''\n    Write a function that reads a file and returns a list of lines from that file\n    '''\n    with open(filename) as f:\n        h=f.readlines()\n    return(h)\ndef reverse(words):\n    '''\n    Write a function to return a list of words that are reversed\n    '''\n    return(words[::-1])\ndef word_lengths(words):\n    '''\n    Write a function to return a list of the lengths of words in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(b)\ndef longest_word(words):\n    '''\n    Write a function to return the longest word in a list\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(max(b))\ndef shortest_word(words):\n    '''\n    Write a function to return the shortest word in a list\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(min(b))\ndef longest_word_length(words):\n    '''\n    Write a function to return the length of the longest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(max(b))\ndef longest_word_letters(words):\n    '''\n    Write a function to return the number of letters in the longest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(max(b))\ndef longest_word_reverse(words):\n    '''\n    Write a function to return the reverse of the longest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(max(b))\ndef longest_word_index(words):\n    '''\n    Write a function to return the index of the longest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(b.index(max(b)))\ndef longest_word_index_reversed(words):\n    '''\n    Write a function to return the index of the longest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(b.index(max(b)))\ndef longest_word_letters(words):\n    '''\n    Write a function to return the number of letters in the longest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(max(b))\ndef shortest_word_index(words):\n    '''\n    Write a function to return the index of the shortest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(b.index(min(b)))\ndef shortest_word_index_reversed(words):\n    '''\n    Write a function to return the index of the shortest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(b.index(min(b)))\ndef shortest_word_letters(words):\n    '''\n    Write a function to return the number of letters in the shortest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(min(b))\ndef dict_from_file(filename):\n    '''\n    Write a function to return a dictionary of words from a file. The key should be the word, the value should be the frequency of that word in the file\n    '''\n    with open(filename) as f:\n        h=f.readlines()\n    i=[]\n    for word in h:\n        i.append(word)\n    j={}\n    for word in i:\n        j.setdefault(word,i.count(word))\n    return(j)\ndef longest_word_dict(words):\n    '''\n    Write a function to return the longest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(max(b))\ndef unique_words(words):\n    '''\n    Write a function to return a list of unique words in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(word)\n    return(list(set(b)))\ndef first_unique_letter(words):\n    '''\n    Write a function to return the index of the first unique letter in a word\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(word)\n    return(b.index(min(set(b), key=b.count)))\ndef first_unique_letter_index_reversed(words):\n    '''\n    Write a function to return the index of the first unique letter in a word\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(word)\n    return(b.index(max(set(b), key=b.count)))\ndef words_start_with_r(words):\n    '''\n    Write a function to return a list of all words that start with 'r'\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        if word[0]==\"r\":\n            b.append(word)\n    return(b)\ndef words_start_with_a(words):\n    '''\n    Write a function to return a list of all words that start with 'a'\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        if word[0]==\"a\":\n            b.append(word)\n    return(b)\ndef words_start_with_u(words):\n    '''\n    Write a function to return a list of all words that start with 'u'\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        if word[0]==\"u\":\n            b.append(word)\n    return(b)\ndef longest_word_dict_length(words):\n    '''\n    Write a function to return the length of the longest word in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(len(word))\n    return(max(b))\ndef most_common_letter(words):\n    '''\n    Write a function to return the most common letter in a list of words\n    '''\n    a=words[:]\n    b=[]\n    for word in a:\n        b.append(word)"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n - 1:\n        return 0\n    if dp[index][k]!= -1:\n        return dp[index][k]\n    if k > index + 1:\n        max_sum = max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        max_sum = 0\n        for i in range(index + 1, n):\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, index + 1))\n    dp[index][k] = max_sum\n    return dp[index][k]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base Case\n    if (k > n):\n        return 0\n    \n    # Return max of including the ith element and excluding the ith element\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n                max_sum_increasing_subseq(a, n, index + 1, k + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    m = [0] * (n + 1)\n    m[0] = 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return 0\n    if k == index:\n        return a[k]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0 for _ in range(n)]\n    for i in range(n):\n        dp[i] = dp[i - 1] + a[i]\n    dp[k] = 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if k == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global memo\n    if k > index:\n        return float('-inf')\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    ans = 0\n    # if the length of the prefix is less than k\n    if index < k:\n        # ans is the prefix sum\n        ans = sum(a[0:index+1])\n    else:\n        # j is the index in the prefix\n        # j must be >= k to include kth element\n        j = k\n        # while j is less than index\n        while j < index:\n            # temp is the prefix sum uptil j and excluding jth element\n            temp = sum(a[0:j+1])\n            # if the current prefix sum is more than the previous prefix sum\n            # update the ans by including jth element\n            if temp > ans:\n                ans = temp\n            # increment j by 1\n            j = j+1\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    #print('a', a)\n    for i in range(1, n):\n        #print('a[i]', a[i])\n        #print('a[i]', a[i], 'index', index)\n        #print('a[index]', a[index], 'a[i]', a[i])\n        if a[index] < a[i]:\n            #print('a[i]', a[i])\n            if a[i] > k:\n                k = a[i]\n                #print('a[i]', a[i], 'k', k)\n                #print('k', k)\n            #else:\n                #print('k', k)\n                #print('a[i]', a[i], 'k', k)\n                #print('k', k)\n                #k = a[i]\n            index = i\n    #print('k', k)\n    if k > a[index]:\n        return a[index] + max_sum_increasing_subseq(a, n, index, k)\n    else:\n        return k + max_sum_increasing_subseq(a, n, index, k)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = []\n    for i in range(len(tuplex)):\n        if i % m == 0:\n            new_tuplex.append(tuplex[i])\n    # print(new_tuplex)\n    # print(len(new_tuplex))\n    return new_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n+1]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a=[]\n    for i in range(m):\n        a.append(tuplex[i*n:(i+1)*n])\n    return tuple(a)\ndef div_siz_by(tuplex):\n    return div_siz(tuplex,tuplex)\ndef div_siz(tuplex1,tuplex2):\n    '''\n    Return a quotient and a remainder of the division of two tuples.\n    '''\n    if(len(tuplex1)>len(tuplex2)):\n        q=tuplex1//tuplex2\n        return q,tuplex1-q*tuplex2\n    elif(len(tuplex1)<len(tuplex2)):\n        q=tuplex2//tuplex1\n        return q,tuplex2-q*tuplex1\n    elif(len(tuplex1)==len(tuplex2)):\n        q=tuplex1//tuplex2\n        return q,tuplex1-q*tuplex2\ndef tuple_product(tuplex1,tuplex2):\n    '''\n    Write a function to return the product of two tuples.\n    '''\n    tuplex1=tuple(tuplex1)\n    tuplex2=tuple(tuplex2)\n    return tuple([tuplex1[i]*tuplex2[i] for i in range(len(tuplex1))])\ndef dict_colon_tuplex(d):\n    '''\n    Write a function to get the key and the colon of the dictionaries.\n    '''\n    return dict(zip(d.keys(),colon_tuplex(d.values(),len(d),len(d.keys()))))\ndef dict_product(d1,d2):\n    '''\n    Write a function to return the product of two dictionaries.\n    '''\n    d=deepcopy(d1)\n    for i in d2.keys():\n        d[i]=d2[i]\n    return dict(zip(d1.keys(),tuple_product(d1.values(),d.values())))\ndef count_greater_than(lst,n):\n    '''\n    Write a function to return the number of elements in the list that are greater than n.\n    '''\n    count=0\n    for i in lst:\n        if i>n:\n            count+=1\n    return count\ndef list_product(lst1,lst2):\n    '''\n    Write a function to return the product of two lists.\n    '''\n    return [lst1[i]*lst2[i] for i in range(len(lst1))]\ndef count_greater_than_one_condition(lst1,lst2,lst3):\n    '''\n    Write a function to return the number of elements in the list that are greater than n.\n    '''\n    count=0\n    for i in lst1:\n        if i>lst2[lst3.index(i)] and i>lst2[lst3.index(i)]:\n            count+=1\n    return count\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef list_of_prime(n):\n    '''\n    Write a function to return a list of prime numbers up to n.\n    '''\n    prime_lst=[]\n    for i in range(2,n+1):\n        if is_prime(i):\n            prime_lst.append(i)\n    return prime_lst\ndef list_of_perfect_square(n):\n    '''\n    Write a function to return a list of perfect square numbers up to n.\n    '''\n    lst=[]\n    for i in range(1,n+1):\n        if i*i<=n:\n            lst.append(i*i)\n    return lst\ndef prime_divisor(n):\n    '''\n    Write a function to return a list of prime divisors of n.\n    '''\n    lst=[]\n    if is_prime(n):\n        return [n]\n    for i in range(2,n+1):\n        if n%i==0:\n            if is_prime(i):\n                lst.append(i)\n            else:\n                return lst\n    return lst\ndef prime_factor(n):\n    '''\n    Write a function to return a list of prime factors of n.\n    '''\n    lst=[]\n    if is_prime(n):\n        return [n]\n    for i in range(2,n+1):\n        if n%i==0:\n            if is_prime(i):\n                lst.append(i)\n            else:\n                return lst\n    return lst\ndef prime_factor_list(n):\n    '''\n    Write a function to return a list of prime factors of n.\n    '''\n    lst=prime_factor(n)\n    while n!=1:\n        lst.append(n)\n        for i in range(2,n+1):\n            if n%i==0:\n                n=n//i\n                if is_prime(i):\n                    lst.append(i)\n    return lst\ndef prime_divisor_list(n):\n    '''\n    Write a function to return a list of prime divisors of n.\n    '''\n    lst=prime_factor(n)\n    return list_of_prime(lst[-1])\ndef totient(n):\n    '''\n    Write a function to return the Euler's totient function of n.\n    '''\n    if n==1:\n        return 1\n    lst=prime_factor(n)\n    product=1\n    for i in lst:\n        product*=i**(n//i)-(n//i)\n    return product\ndef get_odd_index(lst):\n    '''\n    Write a function to return the indices of the odd elements in a list.\n    '''\n    return [i for i in range(len(lst)) if lst[i]%2==1]\ndef get_odd_element(lst):\n    '''\n    Write a function to return the odd elements in a list.\n    '''\n    return [lst[i] for i in range(len(lst)) if lst[i]%2==1]\ndef get_even_element(lst):\n    '''\n    Write a function to return the even elements in a list.\n    '''\n    return [lst[i] for i in range(len(lst)) if lst[i]%2==0]\ndef get_complement_set(lst):\n    '''\n    Write a function to return the complement of the set.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in lst:\n        if i not in lst1:\n            lst1.append(i)\n        else:\n            lst2.append(i)\n    return lst1+lst2\ndef get_sorted_dict_keys(d):\n    '''\n    Write a function to return the sorted keys of the dictionary.\n    '''\n    lst=list(d.keys())\n    lst.sort()\n    return lst\ndef get_sorted_dict_values(d):\n    '''\n    Write a function to return the sorted values of the dictionary.\n    '''\n    lst=list(d.values())\n    lst.sort()\n    return lst\ndef get_sorted_dict_items(d):\n    '''\n    Write a function to return the sorted items of the dictionary.\n    '''\n    lst=list(d.items())\n    lst.sort()\n    return lst\ndef get_min_max_value(d):\n    '''\n    Write a function to return the minimum and the maximum value of the dictionary.\n    '''\n    lst=list(d.values())\n    return (min(lst),max(lst))\ndef get_sum_of_value(d):"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst=[]\n    for i in range(m,n):\n        lst.append(tuplex[i])\n    return tuple(lst)\ndef merge_tuples(tuple1,tuple2):\n    '''\n    Write a function to merge two tuples.\n    '''\n    lst=[]\n    for i in range(0,len(tuple1)):\n        lst.append(tuple1[i])\n    for j in range(0,len(tuple2)):\n        lst.append(tuple2[j])\n    return tuple(lst)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    import itertools\n    return (list(itertools.product(*tuplex))[m:n])\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[i*m:(i+1)*m] for i in range(n)])\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #m,n are the size of the tuple.\n    #input: (m,n)\n    #output: a colon of the tuple.\n    m=int(m)\n    n=int(n)\n    if m!=n:\n        print('The size of the tuple should be the same.')\n        return\n    else:\n        #print('The colon of the tuple is:')\n        for i in range(m):\n            if i==0:\n                print(tuplex[0],end=' ')\n            else:\n                print(tuplex[i],end=' ')\n        print()\n        for i in range(m):\n            for j in range(n):\n                if j==0:\n                    print(tuplex[i][0],end=' ')\n                else:\n                    print(tuplex[i][j],end=' ')\n            print()\n        return\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = ()\n    for i in range(m):\n        a += (tuplex[i][n],)\n    return a\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuple_colon=tuple(list(tuplex[i][::n] for i in range(m)))\n    return tuple_colon\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuplex.split(',')\n    tuplex1=[]\n    for i in range(len(tuplex)):\n        tuplex[i]=tuplex[i].replace('[','')\n        tuplex[i]=tuplex[i].replace(']','')\n        tuplex[i]=tuplex[i].split(' ')\n        for j in range(len(tuplex[i])):\n            tuplex[i][j]=int(tuplex[i][j])\n        tuplex1.append(tuplex[i])\n    tuplex1=tuplex1[:n]\n    tuplex1=tuple(tuplex1)\n    tuplex1=tuplex1*m\n    tuplex1=tuplex1[:n]\n    return tuplex1\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    ret_list = []\n    for i in range(N):\n        ret_list.append(nums1[i]*nums2[i])\n    return ret_list\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import heapq\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, heapq.heappushpop(heap, nums1[i] * nums2[j]))\n    return heapq.nlargest(N, heap)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = 0\n    max_prod = 0\n    for i in range(0, N):\n        for j in range(0, N):\n            prod = nums1[i] * nums2[j]\n            if prod > max_prod:\n                max_prod = prod\n                res = prod\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 0: return []\n    if N == 1: return list(map(lambda a: max(a), itertools.product(nums1, nums2)))\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check to make sure that N is not too large\n    if N > len(nums1) + len(nums2):\n        print(\"N is too large\")\n        return None\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_prod = 0\n    largest_prod_2 = 0\n    indices = []\n    num1 = 0\n    num2 = 0\n    for i in range(0,N):\n        for j in range(0,N):\n            if (nums1[i] * nums2[j]) > largest_prod:\n                largest_prod = nums1[i] * nums2[j]\n                num1 = i\n                num2 = j\n                indices.append((num1,num2))\n    return largest_prod,indices\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    p = 1\n    for i in range(N):\n        p *= nums1[i] * nums2[i]\n    for j in range(N, len(nums1)):\n        p *= nums1[j]\n    for k in range(N, len(nums2)):\n        p *= nums2[k]\n    result.append(p)\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums = nums1 + nums2\n    nums.sort()\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #import random\n    #nums1 = [random.randint(1, 9) for x in range(0, N)]\n    #nums2 = [random.randint(1, 9) for x in range(0, N)]\n    nums1.sort()\n    nums2.sort()\n    largest_product = 0\n    for i in range(0, N):\n        largest_product = max(largest_product, nums1[i] * nums2[N-1-i])\n    return largest_product\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def largest_product(nums1, nums2, N):\n    '''\n    Write a function to find the largest product of N consecutive numbers in a given array.\n    '''\n    def largest_product(nums, N):\n        '''\n        Write a function to find the largest product of N consecutive numbers in a given array.\n        '''\n        left = 0\n        right = N - 1\n        min_neg = 0\n        max_neg = 0\n        result = float('-inf')\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef min(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef leapyear(year):\n    '''\n    Write a python function to check whether the input year is a leap year or not.\n    '''\n    if (year%4==0) and (year%100!=0) or (year%400==0):\n        return True\n    else:\n        return False\ndef average(lst):\n    '''\n    Write a python function to compute the average of all the numbers in the list.\n    '''\n    length=len(lst)\n    total=0\n    for i in lst:\n        total+=i\n    return total/length\ndef divisible(a,b):\n    '''\n    Write a python function to check if the first input number is divisible by the second number.\n    '''\n    if a%b==0:\n        return True\n    else:\n        return False\ndef divisibility(a):\n    '''\n    Write a python function to check the divisibility of a number.\n    '''\n    for i in range(1,a+1):\n        if a%i==0:\n            print(i,end=\" \")\n    return\ndef palindrome(string):\n    '''\n    Write a python function to check if the input string is a palindrome or not.\n    '''\n    length=len(string)\n    for i in range(0,length//2):\n        if string[i]!=string[length-i-1]:\n            return False\n    return True\ndef minimum(a,b,c):\n    '''\n    Write a python function to determine the minimum of three numbers.\n    '''\n    if a<b and b<c:\n        return a\n    elif b<a and a<c:\n        return b\n    elif c<b and b<a:\n        return c\n    else:\n        return a\ndef ascending(a):\n    '''\n    Write a python function to check if the input list is in ascending order or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]>a[i+1]:\n            return False\n    return True\ndef partition(a,x):\n    '''\n    Write a python function to partition a list so that all the elements less than x appear first and all the elements greater than x appear after all the elements less than x.\n    '''\n    temp=0\n    for i in range(len(a)):\n        if a[i]<x:\n            temp+=1\n            a[i],a[temp]=a[temp],a[i]\n    return temp\ndef rotate(a,d):\n    '''\n    Write a python function to rotate a list by d elements.\n    '''\n    length=len(a)\n    b=[]\n    for i in range(d):\n        b.append(a[i])\n    for i in range(d,length):\n        b.append(a[i])\n    for i in range(d):\n        b.append(a[i])\n    return b\ndef bubble_sort(a):\n    '''\n    Write a python function to sort a list in ascending order using bubble sort algorithm.\n    '''\n    length=len(a)\n    for i in range(length):\n        for j in range(length-1-i):\n            if a[j]>a[j+1]:\n                a[j],a[j+1]=a[j+1],a[j]\n    return a\ndef maximum_product(a):\n    '''\n    Write a python function to compute the maximum product of three numbers.\n    '''\n    length=len(a)\n    a.sort()\n    return (a[length-1]*a[length-2]*a[length-3])\ndef prime(number):\n    '''\n    Write a python function to check if the input number is prime or not.\n    '''\n    for i in range(2,number):\n        if number%i==0:\n            return False\n    return True\ndef fibonacci(number):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    if number==0:\n        return 0\n    if number==1:\n        return 1\n    else:\n        return fibonacci(number-1)+fibonacci(number-2)\ndef sum_of_digits(number):\n    '''\n    Write a python function to compute the sum of digits of a number.\n    '''\n    sum=0\n    while number>0:\n        sum+=number%10\n        number=number//10\n    return sum\ndef palindrome_permutation(string):\n    '''\n    Write a python function to check if the input string is a permutation of a palindrome or not.\n    '''\n    count=dict()\n    for i in string:\n        if i in count:\n            count[i]+=1\n        else:\n            count[i]=1\n    odd_count=0\n    for i in count:\n        if count[i]%2!=0:\n            odd_count+=1\n        if odd_count>1:\n            return False\n    return True\ndef duplicate(number):\n    '''\n    Write a python function to check if the input number has a duplicate digit or not.\n    '''\n    number_string=str(number)\n    for i in range(len(number_string)):\n        if number_string.count(number_string[i])>1:\n            return True\n    return False\ndef digit_sum(number):\n    '''\n    Write a python function to compute the sum of digits of a number.\n    '''\n    sum=0\n    while number>0:\n        sum+=number%10\n        number=number//10\n    return sum\ndef digital_root(number):\n    '''\n    Write a python function to compute the digital root of a number.\n    '''\n    while number>9:\n        number=digit_sum(number)\n    return number\ndef reverse(number):\n    '''\n    Write a python function to reverse a number.\n    '''\n    string=str(number)\n    return int(string[::-1])\ndef single_number(a):\n    '''\n    Write a python function to find the single number which occurs odd number of times in the input list.\n    '''\n    for i in a:\n        if a.count(i)%2==0:\n            return -1\n    return i\ndef fibonacci_again(number):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    for i in range(number+1):\n        if fibonacci(i)==number:\n            return i\ndef fizz_buzz(number):\n    '''\n    Write a python function to check if the input number is divisible by 3, 5 or both.\n    '''\n    if number%3==0 and number%5==0:\n        return \"fizz buzz\"\n    elif number%3==0:\n        return \"fizz\"\n    elif number%5==0:\n        return \"buzz\"\n    else:\n        return number\ndef odd_even(number):\n    '''\n    Write a python function to check if the input number is odd or even.\n    '''\n    if number%2==0:\n        return \"even\"\n    else:\n        return \"odd\"\ndef armstrong(number):\n    '''\n    Write a python function to check if the input number is an Armstrong number or not.\n    '''\n    sum=0\n    number_string=str(number)\n    for i in number_string:\n        sum+=int(i)**len(number_string)\n    if sum==number:\n        return \"armstrong\"\n    else:\n        return \"not armstrong\"\ndef odd_even_sum(number):\n    '''\n    Write a python function to find the sum of the digits of a number if the number has odd number of digits or not.\n    '''\n    number_string=str(number)\n    if len(number_string)%2!=0:\n        return sum_of_digits(number)\n    else:\n        return -1\ndef subset("
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n    #end of function\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(\"The maximum of the numbers is: \",max(a,b))\n    return\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    elif a<b:\n        print(b)\n    elif a==b:\n        print(a)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \n    \ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    return list(str1)\n    \n    \ndef list_to_tuple(li):\n    '''\n    Write a function to convert a given list to a tuple of characters.\n    '''\n    return tuple(li)\n    \n    \ndef list_to_string(li):\n    '''\n    Write a function to convert a given list to a string of characters.\n    '''\n    return ''.join(li)\n    \n    \ndef list_to_list(li):\n    '''\n    Write a function to convert a given list to a list of characters.\n    '''\n    return list(li)\n    \n    \ndef string_to_list_of_tup(str1):\n    '''\n    Write a function to convert a given string to a list of tuples of characters.\n    '''\n    return [tuple(li) for li in str1]\n    \n    \ndef string_to_list_of_list(str1):\n    '''\n    Write a function to convert a given string to a list of lists of characters.\n    '''\n    return [[li] for li in str1]\n    \n    \ndef list_of_tuples_to_string(li):\n    '''\n    Write a function to convert a given list of tuples of characters to a string of characters.\n    '''\n    return ''.join([''.join(li) for li in li])\n    \n    \ndef list_of_list_to_string(li):\n    '''\n    Write a function to convert a given list of lists of characters to a string of characters.\n    '''\n    return ''.join([li[0] for li in li])\n    \n    \ndef string_to_tuple_of_list(str1):\n    '''\n    Write a function to convert a given string to a list of tuples of characters.\n    '''\n    return [(li) for li in str1]\n    \n    \ndef string_to_tuple_of_string(str1):\n    '''\n    Write a function to convert a given string to a list of tuples of characters.\n    '''\n    return [tuple(li) for li in str1]\n    \n    \ndef list_of_tuples_to_list(li):\n    '''\n    Write a function to convert a given list of tuples of characters to a list of lists of characters.\n    '''\n    return [list(li) for li in li]\n    \n    \ndef list_to_list_of_tuples(li):\n    '''\n    Write a function to convert a given list to a list of tuples of characters.\n    '''\n    return [(li) for li in li]\n    \n    \ndef list_to_list_of_strings(li):\n    '''\n    Write a function to convert a given list to a list of strings of characters.\n    '''\n    return [''.join(li) for li in li]\n    \n    \ndef list_to_list_of_list(li):\n    '''\n    Write a function to convert a given list to a list of lists of characters.\n    '''\n    return [[li] for li in li]\n    \n    \ndef string_to_tuple_of_tuple(str1):\n    '''\n    Write a function to convert a given string to a list of tuples of characters.\n    '''\n    return [tuple(li) for li in str1]\n    \n    \ndef list_of_list_to_string(li):\n    '''\n    Write a function to convert a given list of lists of characters to a string of characters.\n    '''\n    return ''.join([li[0] for li in li])\n    \n    \ndef string_to_list_of_list_of_string(str1):\n    '''\n    Write a function to convert a given string to a list of lists of characters.\n    '''\n    return [list(li) for li in str1]\n    \n    \ndef string_to_list_of_list_of_tuple(str1):\n    '''\n    Write a function to convert a given string to a list of lists of tuples of characters.\n    '''\n    return [list(li) for li in str1]\n    \n    \ndef string_to_list_of_list_of_list(str1):\n    '''\n    Write a function to convert a given string to a list of lists of lists of characters.\n    '''\n    return [[li] for li in str1]\n    \n    \ndef list_to_list_of_list_of_list(li):\n    '''\n    Write a function to convert a given list to a list of lists of lists of characters.\n    '''\n    return [[li] for li in li]\n    \n    \ndef list_to_list_of_list_of_tuple(li):\n    '''\n    Write a function to convert a given list to a list of lists of tuples of characters.\n    '''\n    return [[tuple(li)] for li in li]\n    \n    \ndef list_to_list_of_list_of_string(li):\n    '''\n    Write a function to convert a given list to a list of lists of strings of characters.\n    '''\n    return [list(li) for li in li]\n    \n    \ndef list_to_list_of_list_of_list(li):\n    '''\n    Write a function to convert a given list to a list of lists of lists of characters.\n    '''\n    return [[li] for li in li]\n    \n    \ndef string_to_list_of_list_of_list_of_list(str1):\n    '''\n    Write a function to convert a given string to a list of lists of lists of lists of characters.\n    '''\n    return [[[li] for li in str1]]\n    \n    \ndef string_to_list_of_list_of_list_of_tuple(str1):\n    '''\n    Write a function to convert a given string to a list of lists of lists of tuples of characters.\n    '''\n    return [[tuple(li) for li in str1]]\n    \n    \ndef list_of_tuple_to_string(li):\n    '''\n    Write a function to convert a given list of tuples of characters to a string of characters.\n    '''\n    return ''.join([''.join(li) for li in li])\n    \n    \ndef list_of_tuple_to_tuple_of_list(li):\n    '''\n    Write a function to convert a given list of tuples of characters to a list of tuples of characters.\n    '''\n    return [tuple(li) for li in li]\n    \n    \ndef list_of_tuple_to_list_of_list_of_tuple(li):\n    '''\n    Write a function to convert a given list of tuples of characters to a list of lists of tuples of characters.\n    '''\n    return [[tuple(li)] for li in li]\n    \n    \ndef tuple_of_list_to_tuple_of_list(li):\n    '''\n    Write a function to convert a given list of tuples of characters to a tuple of lists of tuples of characters.\n    '''\n    return tuple([tuple(li) for li in li])\n    \n    \ndef string_to_list_of_list_of_list_of_string(str1):\n    '''\n    Write a function to convert a given string to a list of lists of lists of characters.\n    '''\n    return [list(li) for li in str1]\n    \n    \ndef list_to_tuple_of_list_of_list_of_string(li):\n    '''\n    Write a function to convert a given list to a list of tuples of lists of lists of characters.\n    '''\n    return [tuple(li) for li in li]\n    \n    \ndef list_to_list_of_list_of_list_of_tuple(li):\n    '''\n    Write a function to convert a given list to a list of lists of lists of tuples of characters.\n    '''\n    return [[tuple(li)] for li in li]\n    \n    \ndef tuple_t"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    my_tuple = tuple(str1)\n    print(my_tuple)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Your code here\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        lst.append(str1[i])\n    tpl = tuple(lst)\n    return tpl\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1_l = list(str1)\n    return tuple(str1_l)\n    \n    \ndef list_to_tuple(list1):\n    '''\n    Write a function to convert a given list to a tuple of characters.\n    '''\n    return tuple(list1)\n    \n    \ndef test_string_to_tuple():\n    assert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')\n    assert string_to_tuple('hello ') == ('h', 'e', 'l', 'l', 'o','')\n    assert string_to_tuple('world') == ('w', 'o', 'r', 'l', 'd')\n    \n    \ndef test_list_to_tuple():\n    assert list_to_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\n    assert list_to_tuple(['a', 'b', 'c ', 'd']) == ('a', 'b', 'c', 'd')\n    assert list_to_tuple(['a', 'b', 'c', 'd', 'e']) == ('a', 'b', 'c', 'd', 'e')\n    \n    \nif __name__ == '__main__':\n    test_string_to_tuple()\n    test_list_to_tuple()\n    \n    print('all tests passed...')\n    "
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x=0\n    while n:\n        x ^= n\n        n &= (n-1)\n    return x\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 1\n    while True:\n        if i & n == 0:\n            return i\n        i <<= 1\n    # your code here\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n ^ (n - 1)) + 1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary = bin(n)[2:]\n    if binary[0] == '0':\n        return n\n    else:\n        binary = '0' + binary\n        mask = binary.replace('0', '1')\n        return int(mask, 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i=1\n    while (n >> i) > 1:\n        i = i << 1\n    return i\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (1 << n.bit_length()) - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= (n >> 1) \n    n |= (n >> 2) \n    n |= (n >> 4) \n    n |= (n >> 8) \n    n |= (n >> 16) \n    n |= (n >> 32) \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Set the leftmost bit \n    n |= (n & -n) \n    return n \n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    result = n & -n\n    return result\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Volume of a cone is V = 1/3 *pi *r^2 * h\n    return 1/3*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = (1/3)*math.pi*(r**2)*h\n    return volume_cone\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    try:\n        volume = math.pi*(r**2)*(h/3)\n    except:\n        return None\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*r*r*h/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*(h)\n    print(\"The volume of a cone is\",volume)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r<0 or h<0:\n        return 'Input Error'\n    else:\n        return (1/3)*math.pi*r**2*h\ndef surface_area_parallelepiped(l,b,h):\n    '''\n    Write a function to calculate the surface area of a parallelepiped.\n    '''\n    if l<0 or b<0 or h<0:\n        return 'Input Error'\n    else:\n        return (2*(l*b+b*h+h*l))\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    if r<0 or h<0:\n        return 'Input Error'\n    else:\n        return (2*math.pi*r*(r+h))\ndef surface_area_cone(r,h):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    if r<0 or h<0:\n        return 'Input Error'\n    else:\n        return (1/3)*math.pi*r**2*(r+h)\ndef surface_area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    if r<0:\n        return 'Input Error'\n    else:\n        return 4*math.pi*r**2\ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a positive integer.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        return sum([int(i) for i in str(n)])\ndef average_of_digits(n):\n    '''\n    Write a function that returns the average of the digits of a positive integer.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        return sum([int(i) for i in str(n)])/len(str(n))\ndef sum_of_digits_recursive(n):\n    '''\n    Write a function that returns the sum of the digits of a positive integer.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        if len(str(n))==1:\n            return n\n        else:\n            return n%10+sum_of_digits_recursive(n//10)\ndef average_of_digits_recursive(n):\n    '''\n    Write a function that returns the average of the digits of a positive integer.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        if len(str(n))==1:\n            return n\n        else:\n            return n%10+average_of_digits_recursive(n//10)\ndef sum_of_prime_numbers(n):\n    '''\n    Write a function that returns the sum of all prime numbers less than a positive integer.\n    '''\n    if n<2:\n        return 'Input Error'\n    else:\n        if is_prime(n):\n            return n\n        else:\n            return n+sum_of_prime_numbers(n-1)\ndef sum_of_prime_numbers_recursive(n):\n    '''\n    Write a function that returns the sum of all prime numbers less than a positive integer.\n    '''\n    if n<2:\n        return 'Input Error'\n    else:\n        if is_prime(n):\n            return n\n        else:\n            return n+sum_of_prime_numbers_recursive(n-1)\ndef is_prime(n):\n    if n<2:\n        return 'Input Error'\n    else:\n        if n==2:\n            return True\n        else:\n            for i in range(2,int(math.sqrt(n))+1):\n                if n%i==0:\n                    return False\n            return True\ndef is_prime_recursive(n):\n    if n<2:\n        return 'Input Error'\n    else:\n        if n==2:\n            return True\n        else:\n            for i in range(2,int(math.sqrt(n))+1):\n                if n%i==0:\n                    return False\n            return True\ndef num_of_prime_numbers(n):\n    '''\n    Write a function that returns the number of prime numbers less than a positive integer.\n    '''\n    if n<2:\n        return 'Input Error'\n    else:\n        if is_prime(n):\n            return 1\n        else:\n            return 1+num_of_prime_numbers(n-1)\ndef num_of_prime_numbers_recursive(n):\n    '''\n    Write a function that returns the number of prime numbers less than a positive integer.\n    '''\n    if n<2:\n        return 'Input Error'\n    else:\n        if is_prime(n):\n            return 1\n        else:\n            return 1+num_of_prime_numbers_recursive(n-1)\ndef product_of_prime_numbers(n):\n    '''\n    Write a function that returns the product of all prime numbers less than a positive integer.\n    '''\n    if n<2:\n        return 'Input Error'\n    else:\n        if is_prime(n):\n            return n\n        else:\n            return n*product_of_prime_numbers(n-1)\ndef product_of_prime_numbers_recursive(n):\n    '''\n    Write a function that returns the product of all prime numbers less than a positive integer.\n    '''\n    if n<2:\n        return 'Input Error'\n    else:\n        if is_prime(n):\n            return n\n        else:\n            return n*product_of_prime_numbers_recursive(n-1)\ndef palindrome(n):\n    '''\n    Write a function that returns True if the integer is a palindrome. Otherwise, return False.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        return str(n)==str(n)[::-1]\ndef palindrome_recursive(n):\n    '''\n    Write a function that returns True if the integer is a palindrome. Otherwise, return False.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        if len(str(n))==1:\n            return True\n        else:\n            if str(n)==str(n)[::-1]:\n                return True\n            else:\n                return False+palindrome_recursive(n//10)\ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a positive integer.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        if n==0:\n            return 1\n        else:\n            return n*factorial(n-1)\ndef factorial_recursive(n):\n    '''\n    Write a function that returns the factorial of a positive integer.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        if n==0:\n            return 1\n        else:\n            return n*factorial_recursive(n-1)\ndef fibonacci(n):\n    '''\n    Write a function that returns the nth term of the fibonacci sequence.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return fibonacci(n-1)+fibonacci(n-2)\ndef fibonacci_recursive(n):\n    '''\n    Write a function that returns the nth term of the fibonacci sequence.\n    '''\n    if n<0:\n        return 'Input Error'\n    else:\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return fibonacci_recursive(n-1)+fibonacci_recursive(n-2)\ndef prime_factors(n):\n    '''\n    Write a function that returns a list of prime factors of a positive integer.\n    '''\n    if n<0"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #return math.pi * math.pow(r,2) * h / 3\n    #return math.pi * r**2 * h / 3\n    #return 1/3 * math.pi * r**2 * h\n    return 1/3 * math.pi * math.pow(r,2) * h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    volume= pi*r*r*h/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4*math.pi*r*r*r)/3\n    return volume\ndef volume_paralellogram(a,b):\n    '''\n    Write a function to find the volume of a paralellogram.\n    '''\n    volume = a*b\n    return volume\ndef volume_right_circular_cylinder(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    volume = 2*math.pi*r*h/3\n    return volume\ndef volume_right_circular_cone(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    volume = math.pi*r*h\n    return volume\ndef volume_right_circular_cone_2(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_right_circular_cone_3(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    volume = math.pi*r*h\n    return volume\ndef volume_cone_2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_cone_3(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_sphere_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r*r*r\n    return volume\ndef volume_sphere_3(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4*math.pi*r*r*r)/3\n    return volume\ndef volume_paralellogram_2(a,b):\n    '''\n    Write a function to find the volume of a paralellogram.\n    '''\n    volume = a*b\n    return volume\ndef volume_paralellogram_3(a,b):\n    '''\n    Write a function to find the volume of a paralellogram.\n    '''\n    volume = a*b\n    return volume\ndef volume_right_circular_cylinder_2(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    volume = 2*math.pi*r*h/3\n    return volume\ndef volume_right_circular_cylinder_3(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_right_circular_cone_4(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    volume = math.pi*r*h\n    return volume\ndef volume_right_circular_cone_5(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_right_circular_cone_6(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    volume = math.pi*r*h\n    return volume\ndef volume_cone_4(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_cone_5(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_sphere_4(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r*r*r\n    return volume\ndef volume_sphere_5(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4*math.pi*r*r*r)/3\n    return volume\ndef volume_paralellogram_4(a,b):\n    '''\n    Write a function to find the volume of a paralellogram.\n    '''\n    volume = a*b\n    return volume\ndef volume_paralellogram_5(a,b):\n    '''\n    Write a function to find the volume of a paralellogram.\n    '''\n    volume = a*b\n    return volume\ndef volume_right_circular_cylinder_4(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    volume = 2*math.pi*r*h/3\n    return volume\ndef volume_right_circular_cylinder_5(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_right_circular_cone_6(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    volume = math.pi*r*h\n    return volume\ndef volume_right_circular_cone_7(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_right_circular_cone_8(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    volume = math.pi*r*h\n    return volume\ndef volume_cone_6(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_cone_7(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_sphere_6(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r*r*r\n    return volume\ndef volume_sphere_7(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4*math.pi*r*r*r)/3\n    return volume\ndef volume_paralellogram_6(a,b):\n    '''\n    Write a function to find the volume of a paralellogram.\n    '''\n    volume = a*b\n    return volume\ndef volume_paralellogram_7(a,b):\n    '''\n    Write a function to find the volume of a paralellogram.\n    '''\n    volume = a*b\n    return volume\ndef volume_right_circular_cylinder_6(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    volume = 2*math.pi*r*h/3\n    return volume\ndef volume_right_circular_cylinder_7(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    volume = math"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(n).bit_length()\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while (highest_power <= n):\n        highest_power <<= 1\n    return highest_power >> 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(log(n, 2))\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_pow = 0\n    while(n):\n        highest_pow += 1\n        n = n >> 1\n    return highest_pow\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n & n-1 > 0:\n        n &= (n-1)\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPower = 0; \n    while(highestPower <= n): \n        highestPower = highestPower * 2; \n    return highestPower/2; \n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    power = 0\n    while 2**power <= n:\n        power += 1\n        \n    return power-1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0: \n        return 0\n    return 1 if n == 1 else 2 if n == 2 else 2**(highest_Power_of_2(n // 2) + 1)\n    \ndef is_Palindromic_with_Space(s): \n    '''\n    Write a python function to check whether a string is palindromic or not. The function should return true if the string is palindromic otherwise it should return false.\n    '''\n    #return s == s[::-1]\n    return s == ''.join(reversed(s))\n    \ndef is_Palindromic_without_Space(s): \n    '''\n    Write a python function to check whether a string is palindromic or not. The function should return true if the string is palindromic otherwise it should return false.\n    '''\n    return s == ''.join(reversed(s))\n    \ndef is_Valid_Password(s): \n    '''\n    Write a python function to check whether a string is valid or not. The string should only contain alphanumeric characters and should not contain any spaces. The string should not contain any repeating characters. \n    '''\n    return len(s) >= 6 and s == ''.join(sorted(s))\n    \ndef find_Palindromic_Numbers(n): \n    '''\n    Write a python function to find all palindromic numbers less than or equal to n.\n    '''\n    return [i for i in range(1, n + 1) if is_Palindromic_without_Space(str(i))]\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n & n-1 == 0:\n        return 1\n    else:\n        return highest_Power_of_2(n-1) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 0\n    for i in range(30):\n        if (2**i) <= n:\n            x = i\n        else:\n            break\n    return 2**x\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1: \n        return None\n    if n == 1: \n        return 2\n    if n == 2: \n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # if n is 0, then the return 0\n    if n is 0: \n        return 2\n    # if n is 1, then the return 1\n    if n is 1: \n        return 1\n    # if n is even, then the return the nth lucas number is the n-1th lucas number + 2^(n-1)\n    if n is even: \n        return find_lucas(n-1) + (2**(n-1))\n    # if n is odd, then the return the nth lucas number is the n-1th lucas number + (-1)^(n-1) * 2^(n-1)\n    if n is odd: \n        return find_lucas(n-1) + (-1)**(n-1) * (2**(n-1))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2,1]\n    for i in range(n):\n        lucas.append(lucas[i]+lucas[i+1])\n    return lucas[n]\nprint(find_lucas(8))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def sum_series(n, base_0=0, base_1=1):\n        if n == 0:\n            return base_0\n        elif n == 1:\n            return base_1\n        else:\n            return sum_series(n-2, base_0, base_1) + sum_series(n-1, base_0, base_1)\n    return sum_series(n, 2, 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_list = []\n    for x in range(0,n):\n        if x == 0:\n            lucas_list.append(2)\n        elif x == 1:\n            lucas_list.append(1)\n        else:\n            lucas_list.append(lucas_list[x-1] + lucas_list[x-2])\n    return lucas_list[n-1]\n    \ndef find_lucas_recursive(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas_recursive(n-1) + find_lucas_recursive(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base case: the lucas numbers is 1\n    if n == 0:\n        return 2\n    # Base case: if the lucas numbers is less than 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n):\n        '''\n        Returns the nth lucas number.\n        '''\n        if n == 0: \n            return 2\n        elif n == 1: \n            return 1\n        else: \n            return lucas(n-1) + lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas_helper(n, prev_lucas_num, prev_lucas_num_2):\n        '''\n        Calculates the lucas number\n        '''\n        if n == 0:\n            return 2\n        elif n == 1:\n            return prev_lucas_num\n        elif n == 2:\n            return prev_lucas_num_2\n        else:\n            return lucas_helper(n-1, prev_lucas_num, prev_lucas_num_2) + lucas_helper(n-2, prev_lucas_num, prev_lucas_num_2)\n    return lucas_helper(n, 2, 1)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = string + \": \" + str(list_)\n    return string\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % item for item in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % i for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print(\"Adding '{}' to the list {}\".format(string, list_))\n    return [string + elem for elem in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [f'{string}'.join(i) for i in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(map(str, list_))\n    list_[0] = string\n    print(\" \".join(list_))\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    assert isinstance(string, str)\n    assert isinstance(list_, list)\n    for i in range(len(list_)):\n        list_[i] = string + str(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [f\"{item} {string}\" for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    for j in range(len(l3)):\n        d2[l3[j]] = l1[j]\n    for x, y in d1.items():\n        d3[x] = y\n    for i in range(len(l2)):\n        d3[l2[i]] = d2[l3[i]]\n    return d3\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i, j, k in zip(l1, l2, l3):\n        d1[i] = {j:k}\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l1 = [1,2,3]\n    # l2 = ['a', 'b', 'c']\n    # l3 = [10,20,30]\n    \n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = {}\n        dict1[l1[i]][l2[i]] = l3[i]\n    return dict1\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]: {l2[i]: l3[i] for i in range(len(l1))} for i in range(len(l2))} for i in range(len(l3))]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return \"All list lengths must be equal\"\n    else:\n        list_dictionary = {}\n        for i in range(len(l1)):\n            list_dictionary[l1[i]] = {l2[i]:l3[i]}\n        return list_dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {}\n    for d in range(len(l1)):\n        dict[l1[d]] = {l2[d]:l3[d]}\n    return dict\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]: {l2[i]: l3[i] for i in range(len(l1))}} for i in range(len(l1))]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {l1[i]: {l2[i]: l3[i] for i in range(len(l1))}}\n    return dict\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # to optimize the space complexity, we can create a cache map to store the possible sums calculated for the previous n.\n    # We can compute the sum of n using O(1) time.\n    # We can iterate from 1 to n and calculate the sum of every possible number.\n    # If the sum calculated is not in the cache map, we can calculate it and add it to the map.\n    # We can return the maximum sum found in the map.\n    cache = {}\n    def calc_sum_helper(n, cache):\n        if n == 0:\n            return 0\n        if n in cache:\n            return cache[n]\n        # split n into two numbers and compute the sum of the two\n        half = calc_sum_helper(n // 2, cache)\n        third = calc_sum_helper(n // 3, cache)\n        fourth = calc_sum_helper(n // 4, cache)\n        fifth = calc_sum_helper(n // 5, cache)\n        sums = half + third + fourth + fifth\n        # determine which sum to add to the cache map and return it\n        if half > sums - half:\n            cache[n] = half\n            return half\n        if third > sums - third:\n            cache[n] = third\n            return third\n        if fourth > sums - fourth:\n            cache[n] = fourth\n            return fourth\n        cache[n] = fifth\n        return fifth\n    return calc_sum_helper(n, cache)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n < 2:\n            return 0\n        if n % 2 == 0:\n            return max( f(n/2) + f(n/2), f(n/2) )\n        if n % 3 == 0:\n            return max( f(n/3) + f(n/3), f(n/3) )\n        if n % 4 == 0:\n            return max( f(n/4) + f(n/4), f(n/4) )\n        if n % 5 == 0:\n            return max( f(n/5) + f(n/5), f(n/5) )\n        return n\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n )\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n        \ndef get_max_sum_rec (n, sum = 0):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return sum\n    \n    # Recursive case\n    else:\n        sum = max( (get_max_sum_rec(n/2, sum) + get_max_sum_rec(n/3, sum) + get_max_sum_rec(n/4, sum) + get_max_sum_rec(n/5, sum)), n)\n        return sum\n        \ndef get_max_sum_cache (n, sum = 0, max_sum_cache = {}):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return sum\n        \n    # Recursive case\n    elif n in max_sum_cache:\n        return max_sum_cache[n]\n    else:\n        sum = max( (get_max_sum_cache(n/2, sum) + get_max_sum_cache(n/3, sum) + get_max_sum_cache(n/4, sum) + get_max_sum_cache(n/5, sum)), n)\n        max_sum_cache[n] = sum\n        return sum\n        \ndef get_max_sum_bottom_up (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return max( (get_max_sum_bottom_up(n/2) + get_max_sum_bottom_up(n/3) + get_max_sum_bottom_up(n/4) + get_max_sum_bottom_up(n/5)), n)\n        \n        \ndef get_max_sum_dp (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        max_sum_cache = [0] * (n+1)\n        max_sum_cache[1] = 1\n        for i in range(2, n+1):\n            max_sum_cache[i] = max( (max_sum_cache[i-1] + max_sum_cache[i/2] + max_sum_cache[i/3] + max_sum_cache[i/4] + max_sum_cache[i/5]), i)\n        return max_sum_cache[n]\n        \ndef get_max_sum_dp2 (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        max_sum_cache = [0] * (n+1)\n        max_sum_cache[1] = 1\n        for i in range(2, n+1):\n            max_sum_cache[i] = max( (max_sum_cache[i-1] + max_sum_cache[i/2] + max_sum_cache[i/3] + max_sum_cache[i/4] + max_sum_cache[i/5]), i)\n        return max_sum_cache[n]\n        \ndef get_max_sum_dp_bottom_up (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        max_sum_cache = [0] * (n+1)\n        max_sum_cache[1] = 1\n        for i in range(2, n+1):\n            max_sum_cache[i] = max( (max_sum_cache[i-1] + max_sum_cache[i/2] + max_sum_cache[i/3] + max_sum_cache[i/4] + max_sum_cache[i/5]), i)\n        return max_sum_cache[n]\n        \n        \ndef get_max_sum_dp_bottom_up_no_zeros (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        max_sum_cache = [0] * (n+1)\n        max_sum_cache[1] = 1\n        for i in range(2, n+1):\n            max_sum_cache[i] = max( (max_sum_cache[i-1] + max_sum_cache[i/2] + max_sum_cache[i/3] + max_sum_cache[i/4] + max_sum_cache[i/5]), i)\n        return max_sum_cache[n]\n        \ndef get_max_sum_dp_bottom_up_no_zeros_bottom_up (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        max_sum_cache = [0] * (n+1)\n        max_sum_cache[1] = 1\n        for i in range(2, n+1):\n            max_sum_cache[i] = max( (max_sum_cache[i-1] + max_sum_cache[i/2] + max_sum_cache[i/3] + max_sum_cache[i/4] + max_sum_cache[i/5]), i)\n        return max_sum_cache[n]\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n    \nprint(get_max_sum(100))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max (get_max_sum (int(n/2)), get_max_sum (int(n/3)), get_max_sum (int(n/4)), get_max_sum (int(n/5)))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(n):\n        max_sum += i\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        return max((f(n//2)+f(n//3)+f(n//4)+f(n//5)),n)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n < 1):\n        return 0\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for list_length in range(len(input_list)):\n        if len(input_list[list_length]) > max_length:\n            max_length = len(input_list[list_length])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    result = None\n    for list_ in input_list:\n        if max_length == -1 or max_length < len(list_):\n            max_length = len(list_)\n            result = list_\n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n    max_len = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    new_list = []\n    for i in input_list:\n        if len(i) > len(new_list):\n            new_list = i\n    return new_list\n    \ndef same_frequency(num1, num2):\n    '''\n    Write a function to check if two numbers have the same frequency of digits.\n    '''\n    str1 = str(num1)\n    str2 = str(num2)\n    counter1 = {}\n    counter2 = {}\n    for i in str1:\n        if i in counter1:\n            counter1[i] += 1\n        else:\n            counter1[i] = 1\n    for i in str2:\n        if i in counter2:\n            counter2[i] += 1\n        else:\n            counter2[i] = 1\n    return counter1 == counter2\n    \ndef double_base_palindromes(n):\n    '''\n    Write a function to return all palindromic numbers less than n in the form of base b.\n    '''\n    # base10 palindromes\n    all_palindromes = []\n    for num in range(1, n):\n        if str(num) == str(num)[::-1]:\n            all_palindromes.append(num)\n    \n    # base2 palindromes\n    all_2 = []\n    for num in range(1, n):\n        if str(bin(num)) == str(bin(num))[::-1]:\n            all_2.append(num)\n    \n    # base8 palindromes\n    all_8 = []\n    for num in range(1, n):\n        if str(oct(num)) == str(oct(num))[::-1]:\n            all_8.append(num)\n            \n    return all_palindromes + all_2 + all_8\n    \ndef sorting(arr):\n    '''\n    Write a function that sorts the positive numbers in ascending order,\n    and keeps the negative numbers untouched.\n    '''\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] = arr[i]\n        else:\n            temp = arr[i]\n            arr[i] = -1\n            arr[arr.index(-1)] = temp\n    return arr\n    \ndef to_upper_case(string):\n    '''\n    Write a function to convert a string to all uppercase.\n    '''\n    output = ''\n    for i in range(len(string)):\n        output += string[i].upper()\n    return output\n    \ndef string_to_number(input):\n    '''\n    Write a function to convert a string to an integer without using int().\n    '''\n    new_input = ''\n    for i in input:\n        if i.isdigit():\n            new_input += i\n    return int(new_input)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for l in input_list:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n    \ndef remove_duplicates(input_list):\n    '''\n    Write a function to remove duplicate elements from a list\n    '''\n    output_list = []\n    for l in input_list:\n        if l not in output_list:\n            output_list.append(l)\n    return output_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    max_length_list = None\n    for item in input_list:\n        if len(item) > maximum:\n            maximum = len(item)\n            max_length_list = item\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = len(input_list)\n    max_length = len(input_list[0])\n    for i in range(length):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup is None:\n        return\n    tup_list = list(test_tup)\n    tup_list.sort()\n    for i in range(0, len(tup_list) - 1):\n        if tup_list[i] == tup_list[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(sorted(test_tup))\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # start writing your code here\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup == tuple(sorted(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    temp = {}\n    for c in str1:\n        if c in temp:\n            temp[c] += 1\n        else:\n            temp[c] = 1\n    for key,value in temp.items():\n        if value == 1:\n            return key\n    return \"No Unique Character\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1=str1.lower()\n    for i in range(len(str1)):\n        if str1.count(str1[i])==1:\n            return str1[i]\n    return -1\n    \ndef find_first_unique_number(arr):\n    '''\n    Write a python function to find the first unique number in an array.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i])==1:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    temp = {}\n    for i in range(len(str1)):\n        if str1[i] not in temp:\n            temp[str1[i]] = 1\n        else:\n            temp[str1[i]] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Time complexity: O(n^2)\n    # Space complexity: O(1)\n    # for i in range(len(str1)):\n    #     for j in range(i + 1, len(str1)):\n    #         if str1[i] == str1[j]:\n    #             return None\n    #         else:\n    #             return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n    \nprint(first_non_repeating_character('abcd'))\nprint(first_non_repeating_character('aab'))\nprint(first_non_repeating_character('aabb'))\nprint(first_non_repeating_character('aabbcc'))\nprint(first_non_repeating_character('aaabbbccc'))\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeat_list = []\n    for i in range(len(str1)):\n        if str1[i] not in non_repeat_list:\n            non_repeat_list.append(str1[i])\n        else:\n            non_repeat_list.remove(str1[i])\n    return non_repeat_list[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeating_character = []\n    for char in str1:\n        if str1.count(char) == 1:\n            non_repeating_character.append(char)\n    return non_repeating_character\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1={}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]=0\n        dict1[i]=dict1[i]+1\n    for i in str1:\n        if dict1[i]==1:\n            return i\n    return None\nprint(first_non_repeating_character('tantalate'))\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # create a dict to store the count of each character\n    # O(n)\n    d = {}\n    for char in str1:\n        if char in d.keys():\n            d[char] += 1\n        else:\n            d[char] = 1\n    # print(d)\n    \n    # iterate the dict and find the first non-repeated character\n    # O(n)\n    for key in d.keys():\n        if d[key] == 1:\n            return key\n    return None\n    \nprint(first_non_repeating_character('google'))\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_index = {}\n    for index, char in enumerate(str1):\n        if char in char_index:\n            char_index[char].append(index)\n        else:\n            char_index[char] = [index]\n    for k,v in char_index.items():\n        if len(v)==1:\n            return v[0]\n    return -1\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    #check for the given example\n    if re.match(regex,string):\n        print(\"String starts and ends with the same character\")\n    else:\n        print(\"String does not start and end with the same character\")\n        \n        \n    #write your code here\n    return\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex,string))"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.search(regex, string) else False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    matches = pattern.findall(string)\n    if len(matches)==0:\n        print(\"False\")\n    else:\n        print(\"True\")\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.search(regex, string) else False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string.startswith(string[0]) and string.endswith(string[0])\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        big=a\n        med=b\n        small=c\n    else:\n        big=b\n        med=a\n        small=c\n    if med>big:\n        temp=big\n        big=med\n        med=temp\n    if small>big:\n        temp=small\n        small=big\n        big=temp\n    if small>med:\n        temp=small\n        small=med\n        med=temp\n    if small>big:\n        temp=small\n        small=big\n        big=temp\n    return small\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and b >= c:\n        return b\n    elif a >= c and c >= b:\n        return c\n    elif b >= a and a >= c:\n        return a\n    elif b >= c and c >= a:\n        return c\n    elif c >= a and a >= b:\n        return a\n    elif c >= b and b >= a:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    else:\n        if a < c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\nprint(median_numbers(3,1,2))\nprint(median_numbers(1,2,3))\nprint(median_numbers(4,5,3))\nprint(median_numbers(5,4,3))\nprint(median_numbers(5,4,5))\nprint(median_numbers(1,1,1))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return ((a + b + c) / 3)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        elif a<c:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    n = len(nums)\n    if n%2 == 0:\n        return sum(nums[n//2-1:n//2+1])/2\n    else:\n        return nums[n//2]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    else:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a,b,c])\n    if len(numbers) == 3:\n        if numbers[0] == numbers[2]:\n            return numbers[1]\n        else:\n            return numbers[2]\n    else:\n        return numbers[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        if c > a:\n            return c\n        else:\n            return a\n    else:\n        if b > c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_of_digits_helper(num)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        for digit in num:\n            sum_of_digits += int(digit)\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    num_sum = 0\n    for num in nums:\n        num_sum += sum(int(digit) for digit in str(num))\n    return num_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for digit in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        sum = 0\n        while num:\n            sum += num % 10\n            num //= 10\n        print(sum)\nsum_of_digits([1234, 345, 56, 6789]"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    new_list = []\n    for num in nums:\n        sum_of_num = 0\n        while num > 0:\n            sum_of_num += num % 10\n            num = num // 10\n        new_list.append(sum_of_num)\n    return new_list\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        while num > 0:\n            result += num % 10\n            num = num // 10\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list=[]\n    for i in nums:\n        sum_list.append(sum([int(j) for j in list(str(i))]))\n    return sum_list\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Tuple sizes not the same\")\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert(len(test_tup1) == len(test_tup2))\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \ndef bitwise_xor_reduce(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return functools.reduce(operator.xor, test_tup1, test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([ a ^ b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = list(map(lambda a, b: a^b, test_tup1, test_tup2))\n    return tuple(xor)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,0,1,1)\n    test_tup2 = (0,1,1,0)\n    return (test_tup1 ^ test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = {}\n    for item in test_list:\n        if item not in result:\n            result[item] = 1\n        else:\n            result[item] += 1\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if not test_list:\n        return 0\n    else:\n        return len(set(tuple(sorted(sublist)) for sublist in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print(len(set(test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = [tuple(sorted(x)) for x in test_list]\n    unique_list = []\n    for i in range(0, len(test_list)):\n        if test_list[i] not in unique_list:\n            unique_list.append(test_list[i])\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = test_list.split()\n    test_list = [x for x in test_list if x.isalpha()]\n    test_list = list(set(test_list))\n    print(len(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print(f\"{len(set(test_list))}\")\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for i in range(0, len(test_list)):\n        x = test_list[i]\n        y = x[0]\n        freq_list.append(y)\n    return freq_list\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Intialize a set to store all the unique tuples\n    unique_set = set()\n    # Loop through the list and for each unique tuple, add it to the set\n    for i in test_list:\n        unique_set.add(tuple(i))\n    # Initialize a list to store all the unique tuples\n    unique_list = []\n    # Loop through the set and append all the unique tuples to the list\n    for i in unique_set:\n        unique_list.append(list(i))\n    # Print the unique list\n    print('The unique list of tuples is', unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    sum_tup = ()\n    for index in range(len(test_tup1)):\n        sum_tup = sum_tup + (test_tup1[index] + test_tup2[index],)\n    return sum_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result += (test_tup1[i] + test_tup2[i],)\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(test_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(0,len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] + test_tup2[i]),)\n    return result_tup\ntest_tup1 = (1,2,3,4)\ntest_tup2 = (5,6,7,8)\nprint(add_nested_tuples(test_tup1,test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] + test_tup2[i],)\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    if len(test_tup1) > len(test_tup2):\n        for x in range(len(test_tup1)):\n            if x < len(test_tup2):\n                new_tup = new_tup + (test_tup1[x] + test_tup2[x],)\n            else:\n                new_tup = new_tup + (test_tup1[x],)\n    else:\n        for x in range(len(test_tup2)):\n            if x < len(test_tup1):\n                new_tup = new_tup + (test_tup1[x] + test_tup2[x],)\n            else:\n                new_tup = new_tup + (test_tup2[x],)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(0, len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    i = 0\n    tup = ()\n    while i < len(test_tup1):\n        tup = tup + (test_tup1[i] + test_tup2[i],)\n        i += 1\n    return tup\nprint(add_nested_tuples(tuple1, tuple2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = ()\n    if type(test_tup1) == type(test_tup2) and type(test_tup1) == tuple and type(test_tup2) == tuple:\n        if len(test_tup1) == len(test_tup2):\n            for i in range(len(test_tup1)):\n                res = res + ((test_tup1[i] + test_tup2[i]),)\n        return res\n    else:\n        return \"Enter valid input\"\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a < b):\n        print(a)\n    else:\n        print(b)\nminimum(2,3)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a < b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        print(\"The minimum is\",b)\n    else:\n        print(\"The minimum is\",a)\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(\"The maximum is\",a)\n    else:\n        print(\"The maximum is\",b)\n        \ndef maximum_of_three(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            print(\"The maximum is\",a)\n        else:\n            print(\"The maximum is\",c)\n    else:\n        if b > c:\n            print(\"The maximum is\",b)\n        else:\n            print(\"The maximum is\",c)\n            \ndef maximum_of_four(a,b,c,d):\n    '''\n    Write a python function to find the maximum of four numbers.\n    '''\n    if a > b:\n        if a > c:\n            if a > d:\n                print(\"The maximum is\",a)\n            else:\n                print(\"The maximum is\",d)\n        else:\n            if c > d:\n                print(\"The maximum is\",c)\n            else:\n                print(\"The maximum is\",d)\n    else:\n        if b > c:\n            if b > d:\n                print(\"The maximum is\",b)\n            else:\n                print(\"The maximum is\",d)\n        else:\n            if c > d:\n                print(\"The maximum is\",c)\n            else:\n                print(\"The maximum is\",d)\n                \ndef minimum_of_four(a,b,c,d):\n    '''\n    Write a python function to find the minimum of four numbers.\n    '''\n    if a < b:\n        if a < c:\n            if a < d:\n                print(\"The minimum is\",a)\n            else:\n                print(\"The minimum is\",d)\n        else:\n            if c < d:\n                print(\"The minimum is\",c)\n            else:\n                print(\"The minimum is\",d)\n    else:\n        if b < c:\n            if b < d:\n                print(\"The minimum is\",b)\n            else:\n                print(\"The minimum is\",d)\n        else:\n            if c < d:\n                print(\"The minimum is\",c)\n            else:\n                print(\"The minimum is\",d)\n                \ndef sum_of_two(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    print(\"The sum of\",a,\"and\",b,\"is\",a+b)\n    \ndef sum_of_three(a,b,c):\n    '''\n    Write a python function to find the sum of three numbers.\n    '''\n    print(\"The sum of\",a,\"and\",b,\"and\",c,\"is\",a+b+c)\n    \ndef sum_of_four(a,b,c,d):\n    '''\n    Write a python function to find the sum of four numbers.\n    '''\n    print(\"The sum of\",a,\"and\",b,\"and\",c,\"and\",d,\"is\",a+b+c+d)\n    \ndef sum_of_all(a,b,c,d):\n    '''\n    Write a python function to find the sum of all four numbers.\n    '''\n    sum1=a+b+c+d\n    print(\"The sum of\",a,\"and\",b,\"and\",c,\"and\",d,\"is\",sum1)\n    \ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    average1=(a+b)/2\n    print(\"The average of\",a,\"and\",b,\"is\",average1)\n    \ndef average_of_three(a,b,c):\n    '''\n    Write a python function to find the average of three numbers.\n    '''\n    average1=(a+b+c)/3\n    print(\"The average of\",a,\"and\",b,\"and\",c,\"is\",average1)\n    \ndef average_of_four(a,b,c,d):\n    '''\n    Write a python function to find the average of four numbers.\n    '''\n    average1=(a+b+c+d)/4\n    print(\"The average of\",a,\"and\",b,\"and\",c,\"and\",d,\"is\",average1)\n    \ndef count_lower_case(s):\n    '''\n    Write a python function to count the number of lowercase letters in a string.\n    '''\n    lowercase=0\n    for i in s:\n        if i.islower():\n            lowercase+=1\n    print(s,\"has\",lowercase,\"lowercase letters\")\n    \ndef count_upper_case(s):\n    '''\n    Write a python function to count the number of uppercase letters in a string.\n    '''\n    uppercase=0\n    for i in s:\n        if i.isupper():\n            uppercase+=1\n    print(s,\"has\",uppercase,\"uppercase letters\")\n    \ndef count_digits(s):\n    '''\n    Write a python function to count the number of digits in a string.\n    '''\n    digits=0\n    for i in s:\n        if i.isdigit():\n            digits+=1\n    print(s,\"has\",digits,\"digits\")\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels=0\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            vowels+=1\n    print(s,\"has\",vowels,\"vowels\")\n    \ndef count_consonants(s):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    consonants=0\n    for i in s:\n        if i.isalpha() and i not in \"aeiouAEIOU\":\n            consonants+=1\n    print(s,\"has\",consonants,\"consonants\")\n    \ndef has_dashdash(s):\n    '''\n    Write a python function to check if a string contains two instances of \"--\".\n    '''\n    if \"--\" in s:\n        print(s,\"contains two instances of --\")\n    else:\n        print(s,\"does not contain two instances of --\")\n        \ndef remove_dashdash(s):\n    '''\n    Write a python function to remove two instances of \"--\" from a string.\n    '''\n    s1=s.replace(\"--\",\"\")\n    print(s,\"is changed to\",s1)\n    \ndef remove_char(s,c):\n    '''\n    Write a python function to remove all instances of a character from a string.\n    '''\n    s2=s.replace(c,\"\")\n    print(s,\"is changed to\",s2)\n    \ndef remove_char_count(s,c):\n    '''\n    Write a python function to remove the first count instances of a character from a string.\n    '''\n    s3=s.replace(c,c*count_occurences(s,c),count_occurences(s,c))\n    print(s,\"is changed to\",s3)\n    \ndef is_even(a):\n    '''\n    Write a python function to check if a number is even.\n    '''\n    if a%2==0:\n        print(a,\"is an even number\")\n    else:\n        print(a,\"is an odd number\")\n        \ndef is_prime(a):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if a > 1:\n        for i in range(2,a):\n            if a % i == 0:\n                print(a,\"is not a prime number\")\n                break\n        else:\n            print(a,\"is a prime number\")\n    else:\n        print(a,\"is not a prime number\")\n        \ndef is_triangular(n):\n    '''\n    Write a python function to check if a number is triangular.\n    '''\n    n1=1\n    n2=1\n    while "
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        min=a\n    else:\n        min=b\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\ndef find_maximum_in_bitonic_array(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            return arr[mid]\n        elif arr[mid]>arr[mid+1]:\n            low = mid+1\n        elif arr[mid]>arr[mid-1]:\n            high = mid\n    return max(arr[low],arr[high])\ndef find_maximum_in_bitonic_array2(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            low = mid+1\n        elif arr[mid]>arr[mid+1]:\n            high = mid\n        elif arr[mid]>arr[mid-1]:\n            low = mid\n    return arr[low]\ndef find_maximum_in_bitonic_array3(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            low = mid+1\n        elif arr[mid]>arr[mid+1]:\n            high = mid\n        elif arr[mid]>arr[mid-1]:\n            low = mid\n    return arr[low]\ndef find_maximum_in_bitonic_array4(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            low = mid+1\n        elif arr[mid]>arr[mid+1]:\n            high = mid\n        elif arr[mid]>arr[mid-1]:\n            low = mid\n    return arr[high]\ndef find_maximum_in_bitonic_array5(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            low = mid+1\n        elif arr[mid]>arr[mid+1]:\n            high = mid\n        elif arr[mid]>arr[mid-1]:\n            low = mid\n    return arr[high]\ndef find_minimum_in_bitonic_array(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            high = mid\n        elif arr[mid]>arr[mid+1]:\n            low = mid+1\n        elif arr[mid]>arr[mid-1]:\n            high = mid\n    return arr[low]\ndef find_minimum_in_bitonic_array2(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            high = mid\n        elif arr[mid]>arr[mid+1]:\n            low = mid+1\n        elif arr[mid]>arr[mid-1]:\n            high = mid\n    return arr[high]\ndef find_minimum_in_bitonic_array3(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            high = mid\n        elif arr[mid]>arr[mid+1]:\n            low = mid+1\n        elif arr[mid]>arr[mid-1]:\n            high = mid\n    return arr[low]\ndef find_minimum_in_bitonic_array4(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            high = mid\n        elif arr[mid]>arr[mid+1]:\n            low = mid+1\n        elif arr[mid]>arr[mid-1]:\n            high = mid\n    return arr[low]\ndef find_minimum_in_bitonic_array5(arr):\n    low,high = 0,len(arr)-1\n    while low<high:\n        mid = (low+high)//2\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\n            high = mid\n        elif arr[mid]>arr[mid+1]:\n            low = mid+1\n        elif arr[mid]>arr[mid-1]:\n            high = mid\n    return arr[low]\nif __name__ == \"__main__\":\n    print(minimum(1,4))\n    print(maximum(1,4))\n    print(find_maximum_in_bitonic_array([1,3,8,12,4,2]))\n    print(find_maximum_in_bitonic_array2([1,3,8,12,4,2]))\n    print(find_maximum_in_bitonic_array3([1,3,8,12,4,2]))\n    print(find_maximum_in_bitonic_array4([1,3,8,12,4,2]))\n    print(find_maximum_in_bitonic_array5([1,3,8,12,4,2]))\n    print(find_minimum_in_bitonic_array([1,3,8,12,4,2]))\n    print(find_minimum_in_bitonic_array2([1,3,8,12,4,2]))\n    print(find_minimum_in_bitonic_array3([1,3,8,12,4,2]))\n    print(find_minimum_in_bitonic_array4([1,3,8,12,4,2]))\n    print(find_minimum_in_bitonic_array5([1,3,8,12,4,2]))"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    elif b>a:\n        return a\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b :\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    result = False\n    for i in tuplex:\n        if i == tuple1:\n            result = True\n    return result\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuple1)!= tuple:\n        raise TypeError('Argument is not a tuple')\n    for item in tuplex:\n        if type(item)!= tuple:\n            raise TypeError('The item is not a tuple')\n    for i in tuplex:\n        for item in i:\n            if type(item)!= tuple:\n                raise TypeError('The item is not a tuple')\n            if item not in tuple1:\n                return False\n        if tuplex not in tuple1:\n            return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) > 0:\n        return \"Element exists in the tuple\"\n    else:\n        return \"Element does not exist in the tuple\"\n    \nprint(check_tuplex((1,2,3),1))\nprint(check_tuplex((1,2,3),4))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\nprint(check_tuplex((1,2,3),(1,2,3,4)))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\nprint(check_tuplex(tuple1,tuple2))\nprint(check_tuplex(tuple1,tuple3))\nprint(check_tuplex(tuple1,tuple4))\nprint(check_tuplex(tuple1,tuple5))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n    \n    \ndef find_factors(x):\n    '''\n    Write a python function to find all the factors of a given number.\n    '''\n    if x == 1:\n        return 1\n    else:\n        return list(range(1,x+1))\n    \n    \ndef find_non_prime(x):\n    '''\n    Write a python function to find all the non prime numbers between 1 and n.\n    '''\n    return list(set(list(range(1,x+1))).difference(set(list(prime_factors(x)))))\n    \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(len(x)): \n        if(x[i] == '1'): \n            parity ^= i \n    if(parity%2 == 0): \n        return 'even'\n    else: \n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # P(0) = 0\n    # P(1) = 1\n    # P(n) = 1 - 2*P(n-1) if n>1\n    \n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return 1 - 2*find_Parity(x-1) \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # x = input()\n    # y = x%2\n    # print(y)\n    if (x % 2 == 0): \n        return \"even\"\n    else: \n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 1): \n        return 'odd'\n    else: \n        return 'even'\n        "
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x % 2 == 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    return x % 2\n    \ndef find_Parity_v2(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return not x % 2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n    \ndef find_Parity_recur(x, i=0): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    elif i == 0: \n        return \"Odd\"\n    else: \n        return find_Parity_recur(x, i + 1)\n    \ndef find_Parity_recur_helper(x, parity=0): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        parity = 0\n    elif parity == 0: \n        parity = 1\n    else: \n        return parity\n    return find_Parity_recur_helper(x, parity + 1)\n    \n    \ndef find_Parity_while(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x: \n        parity = parity ^ 1 \n        x = x >> 1\n    return \"Even\" if parity == 0 else \"Odd\"\n    \ndef find_Parity_while_helper(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x: \n        parity = parity ^ 1 \n        x = x >> 1\n    return \"Even\" if parity == 0 else \"Odd\"\n    \n    \ndef find_Parity_return(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def recur_find_Parity(x): \n        if x % 2 == 0: \n            return \"Even\"\n        else: \n            return \"Odd\"\n    return recur_find_Parity(x) if x % 2 == 0 else recur_find_Parity(x + 1)\n    \ndef find_Parity_return_helper(x, i=0): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def recur_find_Parity_helper(x, parity=0): \n        if x % 2 == 0: \n            return \"Even\"\n        elif i == 0: \n            return \"Odd\"\n        else: \n            return recur_find_Parity_helper(x, parity + 1)\n    return recur_find_Parity_helper(x)\n    \n    \ndef find_Parity_memo(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def recur_find_Parity(x): \n        if x == 0: \n            return \"Even\"\n        elif memo[x] == 0: \n            memo[x] = recur_find_Parity(x - 1)\n        return memo[x]\n    return recur_find_Parity(x)\n    \ndef find_Parity_memo_helper(x, i=0): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def recur_find_Parity_helper(x, parity=0, memo={}): \n        if x == 0: \n            return \"Even\"\n        elif i == 0: \n            return \"Odd\"\n        elif x not in memo: \n            memo[x] = recur_find_Parity_helper(x - 1, memo)\n        return memo[x]\n    return recur_find_Parity_helper(x)\n    \n    \ndef find_Parity_bottom_up(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def recur_find_Parity(x): \n        if x == 0: \n            return \"Even\"\n        elif x == 1: \n            return \"Odd\"\n        else: \n            return recur_find_Parity(x - 1)\n    return recur_find_Parity(x)\n    \ndef find_Parity_bottom_up_helper(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def recur_find_Parity_helper(x, parity=0, memo={}): \n        if x == 0: \n            return \"Even\"\n        elif x == 1: \n            return \"Odd\"\n        elif x not in memo: \n            memo[x] = recur_find_Parity_helper(x - 1, memo)\n        return memo[x]\n    return recur_find_Parity_helper(x)\n    \ndef main(): \n    print(find_Parity(3))\n    print(find_Parity(7))\n    print(find_Parity(8))\n    print(find_Parity(11))\n    print(find_Parity(13))\n    print(find_Parity(14))\n    print(find_Parity_recur(3))\n    print(find_Parity_recur(7))\n    print(find_Parity_recur(8))\n    print(find_Parity_recur(11))\n    print(find_Parity_recur(13))\n    print(find_Parity_recur(14))\n    print(find_Parity_while(3))\n    print(find_Parity_while(7))\n    print(find_Parity_while(8))\n    print(find_Parity_while(11))\n    print(find_Parity_while(13))\n    print(find_Parity_while(14))\n    print(find_Parity_return(3))\n    print(find_Parity_return(7))\n    print(find_Parity_return(8))\n    print(find_Parity_return(11))\n    print(find_Parity_return(13))\n    print(find_Parity_return(14))\n    print(find_Parity_memo(3))\n    print(find_Parity_memo(7))\n    print(find_Parity_memo(8))\n    print(find_Parity_memo(11))\n    print(find_Parity_memo(13))\n    print(find_Parity_memo(14))\n    print(find_Parity_bottom_up(3))\n    print(find_Parity_bottom_up(7))\n    print(find_Parity_bottom_up(8))\n    print(find_Parity_bottom_up(11))\n    print(find_Parity_bottom_up(13))\n    print(find_Parity_bottom_up(14))\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # n = list(str(n))\n    # temp = 0\n    # while n[0] == '0':\n    #     temp += 1\n    #     n = n[1:]\n    # n = ''.join(n)\n    # for i in range(len(n) - 1, -1, -1):\n    #     if n[i] > n[i - 1]:\n    #         n = n[:i - 1] + n[i] + n[i - 1] + n[i + 1:]\n    #         break\n    # if n[0] == '0':\n    #     n = n[1:]\n    # n = ''.join(n)\n    # n = int(n)\n    # return n\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i-1] < s[i]:\n            break\n    if i == len(s) - 1:\n        return -1\n    return int(s[:i] + s[i-1] + ''.join(sorted(s[i:])))\n    \nprint(rearrange_bigger(512))\nprint(rearrange_bigger(9812))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(34562))\nprint(rearrange_bigger(123456789))\nprint(rearrange_bigger(12345678910111213))\nprint(rearrange_bigger
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(str(n), reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    next_bigger = ''\n    for i in range(len(n)-1, -1, -1):\n        next_bigger += n[i]\n        for j in range(i-1, -1, -1):\n            if n[j] > n[i]:\n                next_bigger += n[j]\n                break\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def swap(n, i, j):\n        '''\n        returns the number with index i and j swapped\n        '''\n        return n[:i] + n[j] + n[i+1:j] + n[i] + n[j+1:]\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = n\n    while True:\n        n = list(map(int, list(str(n))))\n        n = n[::-1]\n        n.sort()\n        n = int(''.join(map(str, n)))\n        if n > num:\n            break\n        num = n\n    return num\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if not isinstance(n, int):\n        raise Exception(\"n must be a positive integer\")\n    if n <= 0:\n        raise Exception(\"n must be a positive integer\")\n    s = str(n)\n    bigger = []\n    for i in range(len(s)):\n        bigger.append(max(s[:i+1]))\n    return int(''.join(bigger))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    res = []\n    for i in range(len(n)):\n        max_j = 0\n        max_j_index = 0\n        for j in range(len(n)):\n            if n[i] < n[j] and j > max_j:\n                max_j = n[j]\n                max_j_index = j\n        res.append(max_j)\n        res.append(n[i])\n        n = n[:i] + n[max_j_index] + n[i+1:]\n    return int(''.join(res))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    if not isinstance(n, int):\n        return -1\n    if n < 0:\n        return -1\n    if n < 10:\n        return n\n    arr = []\n    while n!= 0:\n        arr.append(n%10)\n        n //= 10\n    arr.reverse()\n    result = 0\n    for i in range(len(arr)):\n        result = result*10 + arr[i]\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return rearrange_bigger(n//10) * (10) + n % 10\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Maintain a priority queue of pairs where the priority is the sum of the pair and the pairs are ordered by the first element in the pair\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    \n    min_heap = []\n    pairs = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if i < len(nums1) and j < len(nums2):\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n    \n    while min_heap and len(pairs) < k:\n        _, num1, num2 = heapq.heappop(min_heap)\n        pairs.append((num1, num2))\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    queue = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(queue, (-nums1[i] - nums2[j], (nums1[i], nums2[j])))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return pairs\n    minHeap = []\n    for i in range(0,k):\n        heapq.heappush(minHeap, (nums1[i] + nums2[0], (nums1[i], nums2[0])))\n    for i in range(k, len(nums2)):\n        if nums1[i - k] + nums2[i] < minHeap[0][0]:\n            heapq.heappop(minHeap)\n            heapq.heappush(minHeap, (nums1[i - k] + nums2[i], (nums1[i - k], nums2[i])))\n    for pair in minHeap:\n        pairs.append(pair[1])\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if k > (n1 * n2):\n        return []\n    \n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    visited = set()\n    while len(visited) < k:\n        _, i1, i2 = heapq.heappop(heap)\n        if (i1, i2) not in visited:\n            visited.add((i1, i2))\n            if i1!= n1 and i2!= n2:\n                heapq.heappush(heap, (nums1[i1] + nums2[i2], i1 + 1, i2))\n            if i1!= n1:\n                heapq.heappush(heap, (nums1[i1] + nums2[i2 + 1], i1, i2 + 1))\n            if i2!= n2:\n                heapq.heappush(heap, (nums1[i1 + 1] + nums2[i2], i1 + 1, i2))\n            \n    ret = []\n    for (a, b) in visited:\n        ret.append((nums1[a], nums2[b]))\n    return ret\n    \ndef k_largest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of largest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if k > (n1 * n2):\n        return []\n    \n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    visited = set()\n    while len(visited) < k:\n        _, i1, i2 = heapq.heappop(heap)\n        if (i1, i2) not in visited:\n            visited.add((i1, i2))\n            if i1!= n1 and i2!= n2:\n                heapq.heappush(heap, (nums1[i1] + nums2[i2], i1 + 1, i2))\n            if i1!= n1:\n                heapq.heappush(heap, (nums1[i1] + nums2[i2 + 1], i1, i2 + 1))\n            if i2!= n2:\n                heapq.heappush(heap, (nums1[i1 + 1] + nums2[i2], i1 + 1, i2))\n            \n    ret = []\n    for (a, b) in visited:\n        ret.append((nums1[a], nums2[b]))\n    return ret\n    \ndef k_largest_pairs_with_index(nums1, nums2, k):\n    '''\n    Write a function to find k number of largest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if k > (n1 * n2):\n        return []\n    \n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    visited = set()\n    while len(visited) < k:\n        _, i1, i2 = heapq.heappop(heap)\n        if (i1, i2) not in visited:\n            visited.add((i1, i2))\n            if i1!= n1 and i2!= n2:\n                heapq.heappush(heap, (nums1[i1] + nums2[i2], i1 + 1, i2))\n            if i1!= n1:\n                heapq.heappush(heap, (nums1[i1] + nums2[i2 + 1], i1, i2 + 1))\n            if i2!= n2:\n                heapq.heappush(heap, (nums1[i1 + 1] + nums2[i2], i1 + 1, i2))\n            \n    ret = []\n    for (a, b) in visited:\n        ret.append((nums1[a], nums2[b]))\n    return ret\n    \ndef k_smallest_pairs_with_index(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if k > (n1 * n2):\n        return []\n    \n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    visited = set()\n    while len(visited) < k:\n        _, i1, i2 = heapq.heappop(heap)\n        if (i1, i2) not in visited:\n            visited.add((i1, i2))\n            if i1!= n1 and i2!= n2:\n                heapq.heappush(heap, (nums1[i1] + nums2[i2], i1 + 1, i2))\n            if i1!= n1:\n                heapq.heappush(heap, (nums1[i1] + nums2[i2 + 1], i1, i2 + 1))\n            if i2!= n2:\n                heapq.heappush(heap, (nums1[i1 + 1] + nums2[i2], i1 + 1, i2))\n            \n    ret = []\n    for (a, b) in visited:\n        ret.append((nums1[a], nums2[b]))\n    return ret\n    \ndef max_profit(prices):\n    '''\n    Write a function that takes in a list of stock prices and returns the maximum profit that could have been made by buying and selling one share of stock on consecutive days.\n    '''\n    if not prices:\n        return 0\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + 1, len(prices)):\n            max_profit = max(max_profit, prices[j] - prices[i])\n    return max_profit\n    \ndef max_profit_with_index(prices):\n    '''\n    Write a function that takes in a list of stock prices and returns the maximum profit that could have been made by buying and selling one share of stock on consecutive days.\n    '''\n    if not prices:\n        return 0\n    max_profit = 0\n    min_price = prices[0]\n    for i in range(len(prices)):\n        min_price = min(min_price, prices[i])\n        max_profit = max(max_profit, prices[i] - min_price)\n    return max_profit\n    \ndef max_profit_k_transactions(prices, k):\n    '''\n    Write a function that takes in a list of stock prices and returns the maximum profit that could have been made by buying and selling one share of stock on consecutive days up to k transactions.\n    '''\n    if not prices:\n        return 0\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + 1, len(prices)):\n            if j - i <= k:\n                max_profit = max(max_profit, prices[j] - prices[i])\n            else:\n                break\n    return max_profit\n    \ndef max_profit_k_transactions_with_index(prices, k):\n    '''\n    Write a function that takes in a list of stock prices and returns the maximum profit that could have been made by buying and selling one share of stock on consecutive days up to k transactions.\n    '''\n    if not prices:\n        return 0\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + 1, len(p"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # k = 2\n    # [4, 5, 1, 2]\n    # [3, 2, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [2, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # [4, 5, 1, 2]\n    # [1, 3, 3, 5]\n    \n    # "
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for i, v in enumerate(nums1):\n        for j, w in enumerate(nums2):\n            heapq.heappush(pq, (v+w, i, j))\n    res = []\n    while k > 0:\n        res.append(heapq.heappop(pq))\n        k -= 1\n    return [t[1:] for t in res]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #set up heap with (nums[i]+nums[j], i, j)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heap.append((nums1[i]+nums2[j], i, j))\n    heapq.heapify(heap)\n    \n    ret = []\n    for i in range(k):\n        ret.append(heapq.heappop(heap))\n    return ret\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            result.append([nums1[i], nums2[j]])\n    \n    return result[:k]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if min_product > list1[i][0] * list1[i][1]:\n            min_product = list1[i][0] * list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    prod_list = []\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            prod_list.append(list1[i][0] * list1[j][1])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = list1[0][0]*list1[0][1]\n    for index in range(1, len(list1)):\n        if list1[index][0] * list1[index][1] < minimum:\n            minimum = list1[index][0] * list1[index][1]\n    print(\"Minimum product: {}\".format(minimum))\n    return minimum\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for tup in list1:\n        if (tup[0]*tup[1]) < min_product:\n            min_product = tup[0]*tup[1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(list1, key=lambda x: x[0]*x[1])\nprint(min_product_tuple([(4,5), (7,2), (1,8), (3,2)]))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 'No pairs found in the list'\n    else:\n        prod_tuple=[]\n        for i in list1:\n            prod_tuple.append(i[0]*i[1])\n        return min(prod_tuple)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0] * list1[i][1] < min_product:\n            min_product = list1[i][0] * list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #for i in range(len(list1)):\n    #    for j in range(i+1,len(list1)):\n    #        if list1[i][0]*list1[j][0] < list1[i][1]*list1[j][1]:\n    #            print(list1[i])\n    #            print(list1[j])\n    #            print(list1[i][0]*list1[j][0])\n    #            print(list1[i][1]*list1[j][1])\n    #            return list1[i][0]*list1[j][0]\n    #        elif list1[i][0]*list1[j][0] == list1[i][1]*list1[j][1]:\n    #            print(list1[i])\n    #            print(list1[j])\n    #            print(list1[i][0]*list1[j][0])\n    #            print(list1[i][1]*list1[j][1])\n    #            return list1[i][0]*list1[j][0]\n    #return -1\n    list1.sort()\n    if len(list1) < 2:\n        return -1\n    else:\n        return list1[0][0]*list1[1][0]\n    \nprint(min_product_tuple([(1, 1), (2, 2), (3, 3)]))\nprint(min_product_tuple([(3, 4), (3, 5), (1, 5)]))\nprint(min_product_tuple([(1, 2), (3, 4), (5, 6)]))\nprint(min_product_tuple([(7, 8), (3, 6), (4, 5), (5, 6)]))\nprint(min_product_tuple([(7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8), (3, 6), (4, 5), (5, 6), (7, 8)]))\nprint(min_product_tuple([(1, 4), (2, 6), (3, 8), (4, 7), (5, 8), (7, 9), (8, 5), (9, 4), (10, 3), (11, 5), (12, 7), (13, 6), (14, 9), (15, 8), (16, 1), (17, 6), (18, 8), (19, 10), (20, 2), (21, 4), (22, 8), (23, 10), (24, 3), (25, 6), (26, 9), (27, 7), (28, 4), (29, 2), (30, 5), (31, 3), (32, 6), (33, 10), (34, 12), (35, 9), (36, 8), (37, 3), (38, 4), (39, 7), (40, 5), (41, 5), (42, 8), (43, 6), (44, 6), (45, 9), (46, 8), (47, 4), (48, 3), (49, 6), (50, 10), (51, 5), (52, 4), (53, 5), (54, 9), (55, 10), (56, 2), (57, 5), (58, 4), (59, 8), (60, 7), (61, 6), (62, 2), (63, 6), (64, 8), (65, 1), (66, 4), (67, 9), (68, 5), (69, 8), (70, 10), (71, 2), (72, 2), (73, 8), (74, 1), (75, 3), (76, 8), (77, 10), (78, 5), (79, 10), (80, 3), (81, 1), (82, 3), (83, 5), (84, 10), (85, 7), (86, 7), (87, 3), (88, 6), (89, 8), (90, 2), (91, 3), (92, 4), (93, 2), (94, 2), (95, 6), (96, 9), (97, 5), (98, 1), (99, 10)]))\nprint(min_product_tuple([(1, 4), (2, 6), (3, 8), (4, 7), (5, 8), (7, 9), (8, 5), (9, 4), (10, 3), (11, 5), (12, 7), (13, 6), (14, 9), (15, 8), (16, 1), (17, 6), (18, 8), (19, 10), (20, 2), (21, 4), (22, 8), (23, 10), (24, 3), (25, 6), (26, 9), (27, 7), (28, 4), (29, 2), (30, 5), (31, 3), (32, 6), (33, 10), (34, 12), (35, 9), (36, 8), (37, 3), (38, 4), (39, 7), (40, 5), (41, 5), (42, 8), (43, 6), (44, 6), (45, 9), (46, 8), (47, 4), (48, 3), (49, 6), (50, 10), (51, 5), (52, 4), (53, 5), (54, 9), (55, 10), (56, 2), (57, 5), (58, 4), (59, 8), (60, 7), (61, 6), (62, 2), (63, 6), (64, 8), (65, 1), (66, 4), (67, 9), (68, 5), (69, 8), (70, 10), (71, 2), (72, 2), (73, 8), (74, 1), (75, 3), (76, 8), (77, 10), (78, 5), (79, 10), (80, 3), (81, 1), (82, 3), (83, 5), (84, 10), (85, 7), (86, 7), (87, 3), (88, 6), (89, 8), (90, 2), (91, 3), (92, 4), (93, 2), (94, 2), (95, 6), (96, 9), (97, 5), (98, 1), (99, 10), (100, 9), (101, 4), (102, 2), (103, 5), (104, 7), (105, 8), (106, 10), (107, 1), (108, 3), (109, 5), (110, 6), (111, 7), (112, 3), (113, 8), (114, 1), (115, 5), (116, 7), (117, 8), (118, 6), (119, 8), (120, 1), (121, 3), (122, 4), (123, 7), (124, 8), (125, 9), (126, 2), (127, 4), (128, 7), (129, 8), (130, 9), (131, 3), (132, 6), (133, 10), (134, 4)"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = None\n    min_prod_pairs = None\n    for pair in list1:\n        if not min_prod:\n            min_prod = pair[0]*pair[1]\n            min_prod_pairs = pair\n        elif pair[0]*pair[1] < min_prod:\n            min_prod = pair[0]*pair[1]\n            min_prod_pairs = pair\n    return min_prod_pairs\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    list2 = []\n    for i in list1:\n        if len(i) == 1:\n            list2.append(i)\n        elif len(i) == 2:\n            list2.append(i)\n    \n    list3 = []\n    \n    for i in list2:\n        for j in list2:\n            if len(i) == 1 and len(j) == 1 and i!= j:\n                list3.append(i[0]*j[0])\n                list3.sort()\n                return list3[0]\n            elif len(i) == 2 and len(j) == 2 and i!= j:\n                list3.append(i[0]*i[1]*j[0]*j[1])\n                list3.sort()\n                return list3[0]\n            elif len(i) == 2 and len(j) == 1:\n                list3.append(i[0]*j[0]*i[1])\n                list3.sort()\n                return list3[0]\n            elif len(i) == 1 and len(j) == 2:\n                list3.append(i[0]*j[0]*j[1])\n                list3.sort()\n                return list3[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in range(len(listval)):\n        if val > listval[i]:\n            val = listval[i]\n    return val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # We will use the built in min() function\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    try:\n        #if listval is empty return null\n        if len(listval) == 0:\n            return None\n        #if list is not empty, return min value\n        else:\n            return min(listval)\n    except:\n        #if list is empty, return null\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef min_ind(listval):\n    '''\n    Write a function to find the minimum index in a given heterogeneous list.\n    '''\n    return min_val(listval)\n    \ndef max_ind(listval):\n    '''\n    Write a function to find the maximum index in a given heterogeneous list.\n    '''\n    return max_val(listval)\n    \ndef min_even(listval):\n    '''\n    Write a function to find the minimum even value in a given heterogeneous list.\n    '''\n    return min_ind([x for x in listval if x % 2 == 0])\n    \ndef max_even(listval):\n    '''\n    Write a function to find the maximum even value in a given heterogeneous list.\n    '''\n    return max_ind([x for x in listval if x % 2 == 0])\n    \ndef min_odd(listval):\n    '''\n    Write a function to find the minimum odd value in a given heterogeneous list.\n    '''\n    return min_ind([x for x in listval if x % 2 == 1])\n    \ndef max_odd(listval):\n    '''\n    Write a function to find the maximum odd value in a given heterogeneous list.\n    '''\n    return max_ind([x for x in listval if x % 2 == 1])\n    \ndef sum_even(listval):\n    '''\n    Write a function to sum all even values in a given heterogeneous list.\n    '''\n    return sum(x for x in listval if x % 2 == 0)\n    \ndef sum_odd(listval):\n    '''\n    Write a function to sum all odd values in a given heterogeneous list.\n    '''\n    return sum(x for x in listval if x % 2 == 1)\n    \ndef count_even(listval):\n    '''\n    Write a function to count the number of even values in a given heterogeneous list.\n    '''\n    return len([x for x in listval if x % 2 == 0])\n    \ndef count_odd(listval):\n    '''\n    Write a function to count the number of odd values in a given heterogeneous list.\n    '''\n    return len([x for x in listval if x % 2 == 1])\n    \ndef average(listval):\n    '''\n    Write a function to compute the average of all values in a given heterogeneous list.\n    '''\n    return sum_even(listval)/count_even(listval)\n    \ndef sum_squares(listval):\n    '''\n    Write a function to compute the sum of squares of all values in a given heterogeneous list.\n    '''\n    return sum([x*x for x in listval])\n    \ndef square_root(listval):\n    '''\n    Write a function to compute the square root of all values in a given heterogeneous list.\n    '''\n    return math.sqrt(sum_squares(listval))\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError('List cannot be empty.')\n    # init min to first value in list\n    min = listval[0]\n    for i in range(len(listval)):\n        # if new value is less than current min value, update min\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # if not listval:\n    #     return ''\n    # else:\n    #     return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if(listval[i] < minval):\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    else:\n        new_str = ''\n        for x in range(len(word)):\n            if x == 0:\n                new_str += word[x].upper()\n            elif word[x] == '_':\n                new_str +=''\n            elif x == len(word)-1:\n                new_str += word[x].upper()\n            else:\n                new_str += word[x].lower()\n        return new_str\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    split = word.split('_')\n    if split[0] == '':\n        split = split[1:]\n    for i in split:\n        camel_case = camel_case + i.capitalize()\n    return camel_case\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(\\w)', lambda m: m.group(1).upper(), word)\ndef check_str_length(s):\n    '''\n    Write a function to check if the string is less than or equal to 50 characters.\n    '''\n    if len(s) <= 50:\n        return True\n    return False\ndef check_str_length_1(s):\n    '''\n    Write a function to check if the string is less than or equal to 50 characters.\n    '''\n    if len(s) <= 50:\n        return True\n    return False\ndef string_addition(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_1(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_2(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_3(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_4(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_5(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_6(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_7(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_8(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_9(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_10(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_11(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_12(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_13(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_14(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_15(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_16(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_17(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_18(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_19(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_20(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_21(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_22(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_23(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_24(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_25(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_26(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_27(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_28(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_29(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_30(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_31(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_32(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_33(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_34(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_35(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_36(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_37(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_38(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_39(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_40(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_41(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_42(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_43(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_44(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_45(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_46(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_47(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_48(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_49(s):\n    '''\n    Write a function to add two strings\n    '''\n    return s +'' + s\ndef string_addition_50(s):\n    '''\n    Write a function to add tw"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #your code here\n    return word[0].lower()+word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case_string = ''\n    words = list(word)\n    \n    for index, word in enumerate(words):\n        if index == 0:\n            camel_case_string += word.upper()\n        else:\n            camel_case_string += word.lower()\n    return camel_case_string\n    "
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = list(word)\n    new_word[0] = new_word[0].upper()\n    for i in range(1,len(new_word)):\n        if new_word[i] == '_':\n            new_word[i+1] = new_word[i+1].upper()\n    return ''.join(new_word)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    l = list(word)\n    for i in range(len(l)):\n        if l[i] == '_':\n            l[i] = ''\n        elif l[i].isupper() == False and l[i-1].isupper() == True:\n            l[i] = l[i].upper()\n    l[0] = l[0].upper()\n    return ''.join(l)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #your code here\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list_remove = []\n    for item in l:\n        if item % 2 == 0:\n            list_remove.append(item)\n    for item in list_remove:\n        l.remove(item)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)-1,-1,-1):\n        if l[i] % 2!= 0:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    nums = []\n    for i in l:\n        if i % 2 == 0:\n            nums.append(i)\n    return nums\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    for i in l:\n        if i % 2 == 0:\n            l2.append(i)\n    return l2\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    even_numbers = []\n    for i in l:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    print(even_numbers)\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x:x%2==0,l))\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(map(lambda x: x[n-1], list1))\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    assert(n <= len(list1))\n    if n == 1:\n        return list1[0]\n    else:\n        return extract_nth_element(list1[1:], n-1)\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [list1[i][n] for i in range(len(list1))]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n    \ndef main():\n    list1 = [('a', 'b'), ('c', 'd'), ('e', 'f')]\n    print(extract_nth_element(list1, 3))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list1[n - 1])\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n][1])\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #Extract the element and store it in a variable\n    #Initialize an empty list and loop over the list\n    #Check if n is in the range of the list and then append the element in a list\n    #Return the list\n    return_list = []\n    for item in list1:\n        if n < len(list1) and n >= 0:\n            return_list.append(item[n])\n        else:\n            return None\n    return return_list\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # list1 = [1,2,3,4,5,6]\n    # list2 = [1,2,3,3,4,5,6]\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list2:\n        if i in list1:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list2:\n        if item in list1:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #list1 = [1,2,3,4,5,6]\n    #list2 = [4,5,7,8,9]\n    #list1 = [4,5,7,8,9]\n    #list2 = [1,2,3,4,5,6]\n    #list1 = [4,5,7,8,9]\n    #list2 = [1,2,3,4,5,6]\n    #list1 = []\n    #list2 = []\n    #list1 = [4,5,6]\n    #list2 = [1,2,3,4,5,6]\n    #list1 = [4,5,6]\n    #list2 = []\n    #list1 = [1,2,3,4,5,6]\n    #list2 = []\n    #list1 = [1,2,3,4,5,6]\n    #list2 = [1,2,3,4,5,6]\n    \n    for i in list2:\n        if i in list1:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return bool(set(list1).intersection(list2)) \nlist1=[]\nlist2=[]\nn=int(input(\"Enter the number of elements in list 1 :\"))\nfor i in range(0,n):\n    print(\"Enter the value of the list 1 :\")\n    list1.append(int(input()))\nm=int(input(\"Enter the number of elements in list 2 :\"))\nfor i in range(0,m):\n    print(\"Enter the value of the list 2 :\")\n    list2.append(int(input()))\nprint(\"List 1 : \",list1)\nprint(\"List 2 : \",list2)\nprint(\"Are any value of list 1 in list 2?\",overlapping(list1,list2)) "
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in list1:\n        for j in list2:\n            if j == i:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return [value for value in list1 if value in list2]\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Your code here \n    maxProd = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            prod = arr[i]*arr[j]\n            if prod>maxProd:\n                maxProd = prod\n    return maxProd\nif __name__ == \"__main__\": \n    arr = [10,3,5,6,2]\n    print(\"Maximum product pair is\", max_Product(arr)"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    n=len(arr)\n    max_product=arr[0]*arr[1]\n    for i in range(n-1):\n        if arr[i]*arr[i+1]>max_product:\n            max_product=arr[i]*arr[i+1]\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = arr[0]*arr[1]\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]*arr[j]>max_prod):\n                max_prod=arr[i]*arr[j]\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initializing the array with 0\n    arr = [0]*len(arr)\n    \n    # Following a simple method, we find the maximum product pair in a given array.\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            if (arr[i]*arr[j] > arr[j]*arr[i]): \n                arr[i], arr[j] = arr[j], arr[i] \n    \n    # Printing the result\n    print(\"\\nThe highest product pair is: \")\n    print(arr)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if max_product < arr[i]*arr[j]:\n                max_product = arr[i]*arr[j]\n                first = i\n                second = j\n    return max_product,first,second\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    max1 = 0\n    max2 = 1\n    min1 = 1\n    min2 = 0\n    for i in range(0, n): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n        \n        if arr[i] < min1: \n            min2 = min1 \n            min1 = arr[i] \n        elif arr[i] < min2: \n            min2 = arr[i] \n    \n    return max1*max2*min1*min2 \n    \n    \nprint(max_Product([-2, -3, 4, -5]))"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if (len(arr) < 2): \n        return\n    largest = arr[0] * arr[1] \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] * arr[j] > largest): \n                largest = arr[i] * arr[j] \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #This function is to find the maximum product pair from a given array\n    \n    n = len(arr) # n is the length of the input array.\n    #Initializing an array to store the final results\n    result_array = [0] * n\n    #Storing the results in an array\n    #Looping through the array and initializing the variables to store the results\n    for i in range(n):\n        max_num = 1\n        min_num = 1\n        for j in range(n):\n            if(arr[i] == arr[j]):\n                continue\n            elif(arr[i] * arr[j] > max_num):\n                max_num = arr[i] * arr[j]\n                result_array[i] = arr[i] * arr[j]\n            elif(arr[i] * arr[j] < min_num):\n                min_num = arr[i] * arr[j]\n                result_array[i] = arr[i] * arr[j]\n    #Printing the results\n    print(result_array)\n    return result_array[0]\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if product > maxProduct:\n                maxProduct = product\n                i1 = i\n                i2 = j\n    return maxProduct,i1,i2\n    \ndef find_two_max(arr): \n    '''\n    Write a python function to find two maximum numbers from a given array of integers.\n    '''\n    max1 = -2147483647\n    max2 = -2147483647\n    for i in range(0,len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1,max2\n    \ndef find_two_max_with_empty(arr): \n    '''\n    Write a python function to find two maximum numbers from a given array of integers.\n    '''\n    max1 = -2147483647\n    max2 = -2147483647\n    first_empty = len(arr)\n    second_empty = len(arr)\n    for i in range(0,len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n            first_empty = i\n        elif arr[i] > max2:\n            max2 = arr[i]\n            second_empty = i\n    return max1,max2,first_empty,second_empty\n    \ndef find_two_max_with_empty_v2(arr): \n    '''\n    Write a python function to find two maximum numbers from a given array of integers.\n    '''\n    max1 = -2147483647\n    max2 = -2147483647\n    first_empty = len(arr)\n    second_empty = len(arr)\n    for i in range(0,len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n            first_empty = i\n        elif arr[i] > max2 and arr[i]!= max1:\n            max2 = arr[i]\n            second_empty = i\n    return max1,max2,first_empty,second_empty\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    mx = arr[0]\n    for i in range(len(arr)):\n        mx = max(mx, arr[i])\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    Input_list = list(Input)\n    for i in Input_list:\n        if i[0] not in Output:\n            Output.append(i[0])\n        else:\n            pass\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = {}\n    for i in Input: \n        for j in i: \n            if j not in d: \n                d[j] = 0\n            d[j] += 1\n    return d \n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return_list = []\n    for k in range(len(Input)):\n        if Input[k] not in return_list:\n            return_list.append(Input[k])\n    return return_list\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)): \n        for j in range(i + 1, len(Input)): \n            if Input[i][0] == Input[j][0]: \n                if Input[i][0] not in result: \n                    result.append(Input[i][0]) \n                if Input[j][0] not in result: \n                    result.append(Input[j][0]) \n    return result \n  "
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    i = 0\n    flag = 0\n    while(i<len(Input)): \n        j = i + 1\n        while(j < len(Input)): \n            if Input[i][0] == Input[j][0]: \n                print(Input[i], end =\" \") \n                flag = 1\n            j += 1\n        if flag == 1: \n            flag = 0\n        i += 1\n    return\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    set_key = set(Input)\n    for i in set_key:\n        Output.append(i)\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    def return_count(Input):\n        Input.sort(key=lambda x: x[1])\n        return [Input[0][1],len(Input)]\n    \n    return (return_count(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for Tuple in Input:\n        if len(Output) == 0:\n            Output.append(Tuple)\n        else:\n            temp = []\n            for Element in Output:\n                if Element[0] in Tuple:\n                    temp.append(Element)\n            if len(temp) == 0:\n                Output.append(Tuple)\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your code here\n    Output = []\n    for i in range(len(Input)):\n        Output.append(Input[i][0])\n    return Output\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i)>max):\n            max = len(i)\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=0\n    for i in lst:\n        if(len(i)>max_len):\n            max_len=len(i)\n            result=i\n    return result\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    print(lst)\n    max=len(lst[0])\n    a=lst[0]\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n            a=i\n    return a\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_val = None\n    for val in lst:\n        if len(val) > max_len:\n            max_len = len(val)\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i)>max_length:\n            max_length = len(i)\n            max_list = i\n    print(\"The maximum length of list is: \", max_length)\n    print(\"The element of a list having maximum length is: \", max_list)\n    return\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return \"Empty List\"\n    else:\n        max_len=len(lst[0])\n        for i in lst:\n            if len(i)>max_len:\n                max_len=len(i)\n        return lst[0]\nlst=['python', 'c++', 'java', 'ruby', 'c', 'javascript']\nprint(\"The maximum length element is:\", Find_Max(lst))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if max < len(i):\n            max = len(i)\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    res = lst[0]\n    for i in lst[1:]:\n        if len(i) > max_len:\n            max_len = len(i)\n            res = i\n    return res\n    \n    \ndef str_count(str):\n    '''\n    Write a Python program to count the number of each character of a string in Python.\n    '''\n    count={}\n    for n in str:\n        count[n]=count.get(n,0)+1\n    return count\n    \n    \ndef count_occur(str, n):\n    '''\n    Write a Python program to count the occurrences of a substring in a string.\n    '''\n    count=0\n    for i in range(len(str)-n+1):\n        if str[i:i+n] == str[i:i+n][::-1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    result = []\n    for i in lst:\n        result.append(len(i))\n    print(result)\n    return lst[result.index(max(result))]\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 2)\n        sum1 += list1[i]\n    print(sum1 * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += round(num)\n    print(sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += num\n    print(sum * len(list1))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 3)\n        total = total + list1[i]\n    return total*len(list1)\n    \ndef check_for_equals(list1):\n    '''\n    Write a function to check if all of the items in a given list of numbers are equal and return the number of times they are equal.\n    '''\n    count = 0\n    if len(list1) == 0:\n        return 0\n    for i in range(len(list1)):\n        if list1[0] == list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total += list1[i]\n    return total*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 1)\n    print(sum(list1)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #Code goes here\n    list_sum = 0\n    for i in list1:\n        list_sum = list_sum + i\n    list_sum = round(list_sum, 1)\n    print(list_sum)\n    return list_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # count = len(list1)\n    # sum = 0\n    # for i in range(count):\n    #     if type(list1[i]) == int or type(list1[i]) == float:\n    #         sum += round(list1[i])\n    # return sum\n    return sum([round(i) for i in list1]) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for x in list1:\n        rounded = round(x, 2)\n        rounded_list.append(rounded)\n    total_sum = sum(rounded_list)\n    length_of_list = len(list1)\n    return total_sum * length_of_list\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total = sum(rounded_list)\n    product = len(list1) * total\n    return product\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return (n*(n+1)*(n+2))/6\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**3\n    return sum\n    #code here\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    while (n):\n        result += (n % 2 == 0) * n * n * n\n        n = n // 2\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        if(i%2==0):\n            s+=i*i*i\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**3\n        else:\n            continue\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result = result + i**3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (cube_Sum(n-1)+(n*(n+1)//2))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # base case \n    if n == 1: \n        return n \n    else: \n        # The sum of cubes of first n even numbers is 3*(n*(n+1))/2. \n        return n * (n + 1) * (3*(n**3)) // 6\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1) if i%2 == 0])\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Use the inbuilt function to iterate\n    # Then use the loop to write the for loop\n    for element in test_tup:\n        print(element, end = '-')\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    lst = []\n    for t in test_tup:\n        lst.append(t.split(' '))\n    return ''.join(map(lambda x: ''.join(x), lst))\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delim.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '_'\n    result = []\n    for item in test_tup:\n        result.append(item + delimiter)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + ':'\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = test_tup.split(':')\n    test_tup = tuple(test_tup)\n    print(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimeter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        if type(element) is str:\n            result += element\n        else:\n            result += str(element)\n        result += '#'\n    return result[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    conc_str = \"\"\n    for i in test_tup:\n        conc_str += str(i) + ','\n    return conc_str.rstrip(',')\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return_string = ''\n    for i in test_tup:\n        return_string += i +''\n        \n    return return_string\n    \ndef get_coordinates(string):\n    '''\n    Write a function to return the coordinates of the element in the string\n    '''\n    \n    return [int(i) for i in string.split(',')]\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1, n+1)])/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return (sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i ** 3 for i in range(1, n + 1)]) / n\n    \ndef find_Average_Of_Cubed_Values(n):\n    '''\n    Write a Python function that returns the sum of cubes of first n natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/(n*n*n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return n**3/(n**2 + n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    print(sum/n)\n    \n    \ndef Sum_Of_Cubes(n):\n    '''\n    Write a python function to print the sum of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    print(sum)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)])/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum += i**3\n    print(sum/n)\n    "
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n<=0:\n        return None\n    else:\n        return (n*n*n)/3\ndef main():\n    n = int(input(\"Enter the number:\"))\n    a = find_Average_Of_Cube(n)\n    print(a)\nmain()\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum/n\n    \nprint(find_Average_Of_Cube(10))\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = tuple()\n    for tuple_element in test_tuple:\n        result += tuple_element[-1],\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(test_tuple[::-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    try:\n        return test_tuple[-1]\n    except IndexError:\n        return None\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count = count+1\n    return count\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 3))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 6))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 1))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 9))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 0))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 5))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 1))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 0))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 1))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 9))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 0))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 6))\nprint(count_element_in_list([], 1))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 5))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 0))\nprint(count_element_in_list([], 0))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 0))\nprint(count_element_in_list([], 1))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 5))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 6))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 1))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 9))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 0))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 6))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 2))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 4))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 5))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 0))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 7))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 1))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 3))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 6))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 8))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 9))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 5))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9], [1, 1, 2, 4]], 0))\nprint(count_element_in_list([], 3))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 3))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 2))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 0))\nprint(count_element_in_list([], 1))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 3))\nprint(count_element_in_list([[], [], [], [], [], [], [], []], 0))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 1))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 9))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 0))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 6))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 2))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 4))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 5))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 0))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 7))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 1))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 3))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 6))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 8))\nprint(count_element_in_list([[1, 3, 4], [3, 3, 4], [5, 7, 9]], 9))\nprint(count_element_in"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if x in list1[i:j+1]:\n                count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([item for item in list1 if x in item])\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([item for item in list1 if x in item])\n    \ncount_element_in_list(list1, x)\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,list) and x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    print(list(filter(lambda x: x%2!=0,nums)))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #return list(filter(lambda x: x%2 == 1, nums))\n    #return [num for num in nums if num%2 == 1]\n    #return [num for num in nums if num%2!= 0]\n    return [num for num in nums if num%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnums = []\n    for i in nums:\n        if i%2!= 0:\n            oddnums.append(i)\n    return oddnums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2 == 1:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not dt:\n        return dt\n    else:\n        return dt.split('-')\n    \ndef change_date_format_2(dt):\n    '''\n    Write a function to convert a date of mm-dd-yyyy format to dd-mm-yyyy format.\n    '''\n    if not dt:\n        return dt\n    else:\n        return dt.split('-')\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Check if the given string is in valid format.\n    # If so, return the reformatted date.\n    if not re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        return \"Invalid date format!\"\n    # Split the date into three different strings.\n    date_list = dt.split(\"-\")\n    # Rejoin the date and month into one string.\n    date = \" \".join([date_list[2], date_list[1], date_list[0]])\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new = re.split('[-.]', dt)\n    new = new[::-1]\n    new = '-'.join(new)\n    return new\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import re\n    match_date = re.match(r\"(\\d{4})-(\\d{1,2})-(\\d{1,2})\",dt)\n    dt_splitted = dt.split('-')\n    return f\"{dt_splitted[2]}-{dt_splitted[1]}-{dt_splitted[0]}\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt[0], dt[1], dt[2] = dt[2], dt[1], dt[0]\n    return ('-'.join(dt))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = dt[::-1]\n    return \"-\".join(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '-'.join(dt.split('-')[::-1])\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_format = '%Y-%m-%d'\n    d = dt.split('-')\n    dt = '-'.join(d[::-1])\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.match(\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    day = int(m.group(1))\n    month = int(m.group(2))\n    year = int(m.group(3))\n    if day<10:\n        day = '0'+str(day)\n    if month<10:\n        month = '0'+str(month)\n    if year<10:\n        year = '0'+str(year)\n    dt = str(day)+'-'+str(month)+'-'+str(year)\n    return dt\n    \ndef count_unique_words(s):\n    '''\n    Write a function to count the number of unique words in a given text.\n    '''\n    s = s.lower()\n    m = re.findall(\"[a-z]+\", s)\n    d = {}\n    for i in m:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n    \ndef longest_substring_with_k_distinct(str, k):\n    '''\n    Given a string, find the length of the longest substring in it with no more than K distinct characters.\n    '''\n    n = len(str)\n    if n == 0 or n < k:\n        return 0\n    l, r = 0, 0\n    d = {}\n    max_len = 1\n    for r in range(n):\n        if str[r] in d:\n            d[str[r]] += 1\n        else:\n            d[str[r]] = 1\n        while len(d) > k:\n            d[str[l]] -= 1\n            if d[str[l]] == 0:\n                del d[str[l]]\n            l += 1\n        max_len = max(max_len, r-l+1)\n    return max_len\n    \ndef top_k_frequent_words(str, k):\n    '''\n    Given a string and a number \u2018K\u2019, find the most frequent \u2018K\u2019 number of words in the given string.\n    '''\n    l = str.split()\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    d = dict(sorted(d.items(), key=lambda item: item[1], reverse=True))\n    s = []\n    for i in d:\n        if k > 0:\n            s.append(i)\n            k -= 1\n        else:\n            break\n    return s\n    \ndef check_balanced_parens(str):\n    '''\n    A string is said to be balanced if it has as many opening parentheses as it has closing parentheses.\n    Given a string, determine whether it is balanced.\n    '''\n    s = []\n    for i in str:\n        if i == '(':\n            s.append(i)\n        elif i == ')':\n            try:\n                s.pop()\n            except:\n                return False\n    if len(s) == 0:\n        return True\n    else:\n        return False\n    \ndef remove_adjacent_duplicates(str):\n    '''\n    Write a function to remove all adjacent duplicates from a string.\n    '''\n    s = []\n    for i in str:\n        if i not in s:\n            s.append(i)\n    return ''.join(s)\n    \ndef pair_characters_of_a_string_by_frequency(str):\n    '''\n    A string is said to be good if the frequency of each of its characters is divisible by the frequency of its adjacent character.\n    '''\n    s = remove_adjacent_duplicates(str)\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i]%2 == 0:\n            continue\n        else:\n            return False\n    return True\n    \ndef count_binary_substrings(str):\n    '''\n    A binary string is a string consisting of only 0's and 1's.\n    A binary string is called bitwise easy if it satisfies one of the following properties:\n    - The number of 1's is equal to the number of 0's.\n    - All runs of 0's are followed by a single 1 or all runs of 1's are followed by a single 0.\n    - For example, 10101010 is a bitwise easy string and 11110101 is not.\n    '''\n    s = remove_adjacent_duplicates(str)\n    d = {}\n    count = 0\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if i == '0':\n            if d[i]%2 == 0:\n                count += 1\n        else:\n            if d[i]%2!= 0:\n                count += 1\n    return count\n    \ndef longest_palindromic_substring(str):\n    '''\n    Given a string, find the longest palindromic substring in it.\n    '''\n    s = str\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_len = 1\n    max_left = 0\n    max_right = 1\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            left = i-max_right\n            right = i+max_left\n            temp_len = right - left + 1\n            if temp_len > max_len:\n                max_len = temp_len\n                max_left = left\n                max_right = right\n        else:\n            left = i-max_right-1\n            right = i+max_left\n            temp_len = right - left + 1\n            if temp_len > max_len:\n                max_len = temp_len\n                max_left = left\n                max_right = right\n    return max_left, max_right\n    \ndef edit_distance(str1, str2):\n    '''\n    Given two strings, compute the edit distance between them.\n    The edit distance is defined as the minimum number of edits (insertion, deletion, or substitution) needed to change one string to the other.\n    For example, \"biting\" and \"sitting\" have an edit distance of 2 (substitute b for s, and insert a t).\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n == 0:\n        return m\n    if m == 0:\n        return n\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = i\n    for j in range(1, m+1):\n        dp[0][j] = j\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])\n    return dp[n][m]\n    \ndef edit_distance_dp(str1, str2):\n    '''\n    Given two strings, compute the edit distance between them.\n    The edit distance is defined as the minimum number of edits (insertion, deletion, or substitution) needed to change one string to the other.\n    For example, \"biting\" and \"sitting\" have an edit distance of 2 (substitute b for s, and insert a t).\n    '''\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = i\n    for j in range(1, m+1):"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    temp = re.findall(r'\\d+',dt)\n    dt = '-'.join(temp[::-1])\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert isinstance(my_list, list), 'The parameter should be of type list'\n    assert len(my_list) > 1, 'The length of the list should be greater than 1'\n    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            while i >= gap and my_list[i] < my_list[i - gap]:\n                my_list[i], my_list[i - gap] = my_list[i - gap], my_list[i]\n                i -= gap\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = int(n/2)\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap/2)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            # Sort the sub list for this gap.\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            current_value = my_list[i]\n            current_position = i\n            while current_position >= gap and my_list[current_position - gap] > current_value:\n                my_list[current_position] = my_list[current_position - gap]\n                current_position -= gap\n            my_list[current_position] = current_value\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert isinstance(my_list, list)\n    assert len(my_list) > 1\n    assert all(isinstance(item, int) for item in my_list)\n    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple([test_tup1[i] & test_tup2[i] for i in range(len(test_tup1))])\n    else:\n        raise ValueError\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = (2, 4, 5, 6)\n    test_tup2 = (4, 6, 7, 8)\n    result = tuple(a & b for a,b in zip(test_tup1, test_tup2))\n    print(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([i for i in test_tup1 if i in test_tup2])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tuple(x) for x in list(map(lambda x, y: (x or y), test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup3 = ()\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            tup3 += (test_tup1[i],)\n    return tup3\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result_tup = ()\n        for i in range(0, len(test_tup1)):\n            if test_tup1[i] == 1 and test_tup2[i] == 1:\n                result_tup = result_tup + (1,)\n            else:\n                result_tup = result_tup + (0,)\n        return result_tup\n    else:\n        print(\"Input tuples do not have the same length!\")\n        return None\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        if num1 == True and num2 == True:\n            result_tup = result_tup + (num1, num2)\n        elif num1 == False or num2 == False:\n            result_tup = result_tup + (False, False)\n    return result_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1 & tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        print(\"Both tuples should be of same length.\")\n        return\n    else:\n        test_tup3 = ()\n        for i in range(0,len(test_tup1)):\n            test_tup3 += (test_tup1[i] & test_tup2[i],)\n        return test_tup3\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        print(\"Both tuples should be of same length.\")\n        return\n    else:\n        test_tup3 = ()\n        for i in range(0,len(test_tup1)):\n            test_tup3 += (test_tup1[i] | test_tup2[i],)\n        return test_tup3\n    \ndef xor_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise xor tuples from the given two tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        print(\"Both tuples should be of same length.\")\n        return\n    else:\n        test_tup3 = ()\n        for i in range(0,len(test_tup1)):\n            test_tup3 += (test_tup1[i] ^ test_tup2[i],)\n        return test_tup3\n    \ndef not_tuples(test_tup1):\n    '''\n    Write a function to extract the elementwise not tuples from the given tuple.\n    '''\n    if len(test_tup1)!= 1:\n        print(\"Single tuple should be passed as input.\")\n        return\n    else:\n        test_tup2 = ()\n        for i in range(0,len(test_tup1)):\n            test_tup2 += (~test_tup1[i],)\n        return test_tup2\n    \ndef shift_left_tuples(test_tup1, test_int):\n    '''\n    Write a function to extract the tuple shifted to the left by the given integer.\n    '''\n    if (len(test_tup1)!= 1):\n        print(\"Single tuple should be passed as input.\")\n        return\n    else:\n        test_tup2 = ()\n        for i in range(0,len(test_tup1)):\n            test_tup2 += (test_tup1[i] << test_int, )\n        return test_tup2\n    \ndef shift_right_tuples(test_tup1, test_int):\n    '''\n    Write a function to extract the tuple shifted to the right by the given integer.\n    '''\n    if (len(test_tup1)!= 1):\n        print(\"Single tuple should be passed as input.\")\n        return\n    else:\n        test_tup2 = ()\n        for i in range(0,len(test_tup1)):\n            test_tup2 += (test_tup1[i] >> test_int, )\n        return test_tup2\n        \ndef bin_format_tuples(test_tup1):\n    '''\n    Write a function to convert the tuple to a binary format tuple.\n    '''\n    test_tup2 = ()\n    for i in range(0,len(test_tup1)):\n        test_tup2 += (bin(test_tup1[i])[2:],)\n    return test_tup2\n    \ndef hex_format_tuples(test_tup1):\n    '''\n    Write a function to convert the tuple to a hexadecimal format tuple.\n    '''\n    test_tup2 = ()\n    for i in range(0,len(test_tup1)):\n        test_tup2 += (hex(test_tup1[i])[2:],)\n    return test_tup2\n    \ndef permutation_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the permutation of tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        print(\"Both tuples should be of same length.\")\n        return\n    else:\n        test_tup3 = ()\n        for i in range(0,len(test_tup1)):\n            test_tup3 += (test_tup1[test_tup2[i]],)\n        return test_tup3\n    \ndef in_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the boolean indication of membership tuples from the given tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        print(\"Both tuples should be of same length.\")\n        return\n    else:\n        test_tup3 = ()\n        for i in range(0,len(test_tup1)):\n            if test_tup1[i] in test_tup2:\n                test_tup3 += (1, )\n            else:\n                test_tup3 += (0, )\n        return test_tup3\n    \ndef concatenation_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise concatenation tuples from the given tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        print(\"Both tuples should be of same length.\")\n        return\n    else:\n        test_tup3 = ()\n        for i in range(0,len(test_tup1)):\n            test_tup3 += (test_tup1[i] + test_tup2[i],)\n        return test_tup3\n    \ndef repeat_tuples(test_tup1, test_int):\n    '''\n    Write a function to extract the repeated tuples.\n    '''\n    if (len(test_tup1)!= 1):\n        print(\"Single tuple should be passed as input.\")\n        return\n    else:\n        test_tup2 = ()\n        for i in range(0,test_int):\n            test_tup2 += (test_tup1[0],)\n        return test_tup2\n    \ndef single_to_multi_tuples(test_tup1):\n    '''\n    Write a function to extract the tuples in the tuple as multiple tuples.\n    '''\n    if len(test_tup1) == 1:\n        return ()\n    else:\n        test_tup2 = ()\n        for i in range(0,len(test_tup1)):\n            test_tup2 += (test_tup1[i:i+1],)\n        return test_tup2\n    \ndef is_tuples_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check whether the two tuples are equal or not.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        return False\n    else:\n        for i in range(0,len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                return False\n        return True\n    \ndef is_tuples_subset(test_tup1, test_tup2):\n    '''\n    Write a function to check whether the first tuple is a subset of the second tuple or not.\n    '''\n    if (len(test_tup1) > len(test_tup2)):\n        return False\n    else:\n        for i in range(0,len(test_tup1)):\n            if test_tup1[i] not in test_tup2:\n                return False\n        return True\n    \ndef is_tuples_superse"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    x1 = (-b + d**(1/2))/(2*a)\n    x2 = (-b - d**(1/2))/(2*a)\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    try:\n        return a*(b**2-4*a*c)**(1/2)\n    except ZeroDivisionError:\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a - b + c * c)/(2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return 'the equation is not a parabola.'\n    else:\n        d = (b ** 2) - (4 * a * c)\n        return d\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    from fractions import Fraction as frac\n    # a*x*x + b*x + c = 0\n    # (-b - sqrt(b*b-4*a*c))/2a\n    # (-b + sqrt(b*b-4*a*c))/2a\n    # for root in the quadratic equation, it is the same\n    # (-b - sqrt(b*b-4*a*c))/2a\n    # (-b + sqrt(b*b-4*a*c))/2a\n    # so I used this function to get sqrt(x)\n    # if the sign of b is negative, then the sqrt will be negative\n    def quadratic_equation(a, b, c):\n        '''\n        Return the square root of b*b - 4*a*c\n        '''\n        d = b**2 - 4*a*c\n        if d > 0:\n            return math.sqrt(d)\n        else:\n            return -1\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return None\n            else:\n                return c\n        else:\n            return -b/2\n    elif b == 0:\n        if c == 0:\n            return None\n        else:\n            return -c/a\n    else:\n        d = quadratic_equation(a, b, c)\n        if d > 0:\n            return (-b - d)/(2*a)\n        else:\n            return (-b + d)/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    if a == 0:\n        x_max = -c / b\n        x_min = -x_max\n    else:\n        disc = b**2 - 4*a*c\n        if disc > 0:\n            x1 = (-b + math.sqrt(disc)) / (2*a)\n            x2 = (-b - math.sqrt(disc)) / (2*a)\n            if x1 > x2:\n                x_max = x2\n                x_min = x1\n            else:\n                x_max = x1\n                x_min = x2\n        elif disc == 0:\n            x = -b / (2*a)\n            x_max = x\n            x_min = x\n        else:\n            return []\n    return [x_min, x_max]\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        print('Not a quadratic equation.')\n        return None\n    d = b*b - 4*a*c\n    if d < 0:\n        print('No real roots.')\n        return None\n    elif d == 0:\n        x0 = -b / (2*a)\n        print('One real root: ', x0)\n        return None\n    else:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        print('Two real roots: ', x1,'', x2)\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        print('The parabola is a line.')\n    else:\n        x = -b/(2*a)\n        y = (a*x**2) + (b*x) + c\n        print(f'The directrix is located at ({x}, {y})')\n        "
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-c)/(2*b)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2) == set():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list(set(list1).intersection(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n    return (list1 == list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if (set(list1).intersection(set(list2))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return True if list1.intersection(list2) else False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # get the intersection of both lists\n    intersection = set(list1).intersection(set(list2))\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1+base2)*height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = ((base1 + base2) / 2) * height\n    return median\n    \ndef run():\n    '''\n    Run the program.\n    '''\n    base1 = int(input('Base 1: '))\n    base2 = int(input('Base 2: '))\n    height = int(input('Height: '))\n    print(f'The median of the trapezium is {median_trapezium(base1, base2, height)}')\n    \nif __name__ == '__main__':\n    run("
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = base1 + base2\n    height = 2*height\n    return (area + height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(\"The median length of a trapezium of sides\",base1,\"and\",base2,\"is\",(base1+base2+math.sqrt(base1**2+base2**2))/2)\n    return (base1+base2+math.sqrt(base1**2+base2**2))/2\n    \ndef area_of_circle(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"The area of a circle of radius\",radius,\"is\",(math.pi)*(radius**2))\n    return (math.pi)*(radius**2)\n    \ndef area_of_cylinder(radius,height):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    print(\"The area of a cylinder of radius\",radius,\"and height\",height,\"is\",(2*math.pi*radius*height)+((math.pi)*(radius**2)))\n    return ((2*math.pi*radius*height)+((math.pi)*(radius**2)))\n    \ndef volume_of_cone(radius,height):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print(\"The volume of a cone of radius\",radius,\"and height\",height,\"is\",(1/3)*math.pi*(radius**2)*height)\n    return ((1/3)*math.pi*(radius**2)*height)\n    \ndef volume_of_sphere(radius):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(\"The volume of a sphere of radius\",radius,\"is\",(4/3)*math.pi*(radius**3))\n    return ((4/3)*math.pi*(radius**3))\n    \ndef volume_of_prism(length,breadth,height):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    print(\"The volume of a prism of length\",length,\"and breadth\",breadth,\"and height\",height,\"is\",length*breadth*height)\n    return (length*breadth*height)\n    \ndef volume_of_pyramid(base,height):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    print(\"The volume of a pyramid of base\",base,\"and height\",height,\"is\",(1/3)*base*height)\n    return (1/3)*base*height\n    \ndef volume_of_cube(edge):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    print(\"The volume of a cube of edge length\",edge,\"is\",edge**3)\n    return (edge**3)\n    \ndef volume_of_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    print(\"The volume of an ellipsoid with semi-major axis\",a,\"semi-minor axis\",b,\"and third axis\",c,\"is\",(4/3)*math.pi*a*b*c)\n    return (4/3)*math.pi*a*b*c\n    \ndef volume_of_rhombus(diagonal):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    print(\"The volume of a rhombus of diagonal\",diagonal,\"is\",(1/2)*(diagonal**2))\n    return (1/2)*(diagonal**2)\n    \ndef volume_of_trapezium(base1,base2,height):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    print(\"The volume of a trapezium of bases\",base1,\"and\",base2,\"and height\",height,\"is\",((base1+base2)*height)/2)\n    return ((base1+base2)*height)/2\n    \ndef volume_of_spherical_caps(radius1,radius2):\n    '''\n    Write a function to find the volume of spherical caps.\n    '''\n    print(\"The volume of the spherical cap with radius\",radius1,\"and radius\",radius2,\"is\",((4/3)*math.pi*(radius1**3)-(4/3)*math.pi*(radius2**3))*((radius1-radius2)/radius1))\n    return ((4/3)*math.pi*(radius1**3)-(4/3)*math.pi*(radius2**3))*((radius1-radius2)/radius1)\n    \ndef volume_of_cylindrical_caps(radius1,radius2):\n    '''\n    Write a function to find the volume of cylindrical caps.\n    '''\n    print(\"The volume of the cylindrical cap with radius\",radius1,\"and radius\",radius2,\"is\",((math.pi)*(radius1**2)*(radius1-radius2))/(radius1-2*radius2))\n    return ((math.pi)*(radius1**2)*(radius1-radius2))/(radius1-2*radius2)\n    \ndef volume_of_cone_with_slant(radius,slant_height):\n    '''\n    Write a function to find the volume of a cone with a slanted surface.\n    '''\n    print(\"The volume of a cone with a slanted surface\",slant_height,\"is\",((1/3)*math.pi*(radius**2)*slant_height))\n    return ((1/3)*math.pi*(radius**2)*slant_height)\n    \ndef volume_of_cone_with_flat_surface(radius,flat_height):\n    '''\n    Write a function to find the volume of a cone with a flat surface.\n    '''\n    print(\"The volume of a cone with a flat surface\",flat_height,\"is\",(1/3)*math.pi*(radius**2)*flat_height)\n    return (1/3)*math.pi*(radius**2)*flat_height\n    \ndef area_of_torus(inner_radius,outer_radius):\n    '''\n    Write a function to find the area of a torus.\n    '''\n    print(\"The area of a torus with inner radius\",inner_radius,\"and outer radius\",outer_radius,\"is\",(2*math.pi*(inner_radius+outer_radius)*math.sqrt((outer_radius-inner_radius)**2+inner_radius**2)))\n    return (2*math.pi*(inner_radius+outer_radius)*math.sqrt((outer_radius-inner_radius)**2+inner_radius**2))\n    \ndef area_of_spherical_shell(inner_radius,outer_radius):\n    '''\n    Write a function to find the area of a spherical shell.\n    '''\n    print(\"The area of a spherical shell with inner radius\",inner_radius,\"and outer radius\",outer_radius,\"is\",(2*math.pi*outer_radius*(outer_radius**2+inner_radius**2+2*outer_radius*inner_radius))/3)\n    return (2*math.pi*outer_radius*(outer_radius**2+inner_radius**2+2*outer_radius*inner_radius))/3\n    \ndef area_of_cylindrical_shell(inner_radius,outer_radius):\n    '''\n    Write a function to find the area of a cylindrical shell.\n    '''\n    print(\"The area of a cylindrical shell with inner radius\",inner_radius,\"and outer radius\",outer_radius,\"is\",(2*math.pi*outer_radius*(outer_radius**2+inner_radius**2))/2)\n    return (2*math.pi*outer_radius*(outer_radius**2+inner_radius**2))/2\n    \ndef area_of_cone_with_circular_face(radius):\n    '''\n    Write a function to find the area of a cone with a circular face.\n    '''\n    print(\"The area of a cone with a circular face\",radius,\"is\",(2*math.pi*radius**2))\n    return (2*math.pi*radius**2)\n    \ndef area_of_cone_with_conical_face(radius,slant_height):\n    '''\n    Write a function to find the area of a cone with a conical face.\n    '''\n    print(\"The area of a cone with a conical face\",slant"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # med= (base1+base2)/2\n    # return height*med/2\n    return height*(base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(\"The median of a trapezium is \" + str((base1 + base2) / 2))\n    return (base1 + base2) / 2\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    arr.append(number)\n    arr.sort()\n    if number>arr[len(arr)-1]:\n        print(True)\n    else:\n        print(False)\n    \n    \n    \nif __name__ == \"__main__\":\n    number = int(input())\n    arr = list(map(int,input().split(' ')))\n    check_greater(arr, number)\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n        else:\n            return False\nprint(check_greater([1,2,3,4,5],6))\nprint(check_greater([1,2,3,4,5],5))\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if number <= num:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    n = len(arr)\n    greater = 0\n    for i in range(n):\n        if arr[i] > number:\n            greater += 1\n    print(greater)\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('a.*?b')\n    # matches = pattern.findall(text)\n    # return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    return 'Not matched!'\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.findall(r'ab+', text)\n    if pattern:\n        return''.join(pattern)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'[ab]+$'\n    result = re.findall(pattern,text)\n    return result!= []\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    x = re.findall(\"ab+\", text)\n    if x:\n        return \"Match Found\"\n    else:\n        return \"No Match Found\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    myRegex = re.compile(r'ab+')\n    mo = myRegex.search(text)\n    if mo is not None:\n        return mo.group()\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    x = re.findall('ab*', text)\n    return(bool(x))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # if re.match('ab*', text):\n    #     print('Matched')\n    # else:\n    #     print('Not matched')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    x = re.findall('ab+',text)\n    if x:\n        for i in x:\n            print(i)\n    else:\n        print('-1')\ntext = \"The ghost that says boo haunts the loo\"\ntext_match_one(text)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int((str(n)[-1]))"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif n == 0 :\n        return 0\n    else :\n        return n%10\n        \ndef sum_of_squares(n) :\n    '''\n    Write a python function to calculate the sum of squares of the numbers.\n    '''\n    if type(n) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif n < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    elif n == 0 :\n        return 0\n    else :\n        return sum([x*x for x in range(1,n+1)])\n        \ndef average_digit(n) :\n    '''\n    Write a python function to calculate the average digit of a given number.\n    '''\n    if type(n) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif n < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return sum([int(x) for x in str(n)])/len(str(n))\n        \ndef sum_of_digits(n) :\n    '''\n    Write a python function to calculate the sum of digits of a given number.\n    '''\n    if type(n) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif n < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return sum([int(x) for x in str(n)])\n        \ndef product_of_digits(n) :\n    '''\n    Write a python function to calculate the product of digits of a given number.\n    '''\n    if type(n) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif n < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return reduce((lambda x, y : x*y), [int(x) for x in str(n)])\n        \ndef multiplication_table(n) :\n    '''\n    Write a python function to calculate the multiplication table of a given number.\n    '''\n    if type(n) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif n < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return [x*n for x in range(1,11)]\n        \ndef palindrome(s) :\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if type(s) is not str :\n        return 'Invalid input. Only strings are allowed.'\n    else :\n        if len(s) < 2 :\n            return 'The string is already a palindrome.'\n        else :\n            if s[:int(len(s)/2)] == s[::-1][:int(len(s)/2)] :\n                return 'The string is a palindrome.'\n            else :\n                return 'The string is not a palindrome.'\n                \ndef fizzbuzz(n) :\n    '''\n    Write a python function to display the fizzbuzz of a given number.\n    '''\n    if type(n) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif n < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        if n%3 == 0 and n%5 == 0 :\n            return 'FizzBuzz'\n        elif n%3 == 0 :\n            return 'Fizz'\n        elif n%5 == 0 :\n            return 'Buzz'\n        else :\n            return n\n            \ndef addition(a, b) :\n    '''\n    Write a python function to calculate the addition of 2 numbers.\n    '''\n    if type(a) is not int and type(b) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 or b < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return a+b\n        \ndef subtraction(a, b) :\n    '''\n    Write a python function to calculate the subtraction of 2 numbers.\n    '''\n    if type(a) is not int and type(b) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 or b < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return a-b\n        \ndef multiplication(a, b) :\n    '''\n    Write a python function to calculate the multiplication of 2 numbers.\n    '''\n    if type(a) is not int and type(b) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 or b < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return a*b\n        \ndef division(a, b) :\n    '''\n    Write a python function to calculate the division of 2 numbers.\n    '''\n    if type(a) is not int and type(b) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 or b < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    elif b == 0 :\n        return 'Invalid input. Cannot divide by zero.'\n    else :\n        return a/b\n        \ndef square(a) :\n    '''\n    Write a python function to calculate the square of a number.\n    '''\n    if type(a) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return a*a\n        \ndef cube(a) :\n    '''\n    Write a python function to calculate the cube of a number.\n    '''\n    if type(a) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return a*a*a\n        \ndef sqrt(a) :\n    '''\n    Write a python function to calculate the square root of a number.\n    '''\n    if type(a) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return a**(0.5)\n        \ndef power(a, b) :\n    '''\n    Write a python function to calculate the power of a number.\n    '''\n    if type(a) is not int and type(b) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 or b < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return a**b\n        \ndef reminder(a, b) :\n    '''\n    Write a python function to calculate the remainder of a number.\n    '''\n    if type(a) is not int or type(b) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 or b < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return a%b\n        \ndef prime(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if type(n) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif n < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        for x in range(2,n) :\n            if n%x == 0 :\n                return False\n        return True\n        \ndef product(a, b) :\n    '''\n    Write a python function to calculate the product of 2 numbers.\n    '''\n    if type(a) is not int or type(b) is not int :\n        return 'Invalid input. Only integers are allowed.'\n    elif a < 0 or b < 0 :\n        return 'Invalid input. Only positive integers are allowed.'\n    else :\n        return a*b\n        \ndef add_to_list(n) :\n    '''\n    Write a python function to add a number to the end of a list.\n    ''"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return None\n    else :\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n == 0) :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n)%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = list(str(n))\n    n.reverse()\n    n = ''.join(n)\n    return int(n[0])\n    \n    \ndef product(n) :\n    '''\n    Write a python function to print the product of a list.\n    '''\n    n = list(str(n))\n    n.sort()\n    n = ''.join(n)\n    return int(n)\n    \n    \ndef factorial(n) :\n    '''\n    Write a python function to print the factorial of a number.\n    '''\n    n = 1\n    for i in range(1, n+1) :\n        n = n*i\n    return n\n    \n    \ndef count_vowels(s) :\n    '''\n    Write a python function to count the vowels in a string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for i in s :\n        if i in vowels :\n            count += 1\n    return count\n    \n    \ndef palindrome(s) :\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    if s == s[::-1] :\n        return True\n    else :\n        return False\n        \n        \ndef is_anagram(s1,s2) :\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    s1 = s1.replace(\" \",\"\")\n    s2 = s2.replace(\" \",\"\")\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    if s1 == s2 :\n        return True\n    else :\n        return False\n        \n        \ndef check_pangram(s,alphabet) :\n    '''\n    Write a python function to check whether a string is pangram or not.\n    '''\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    for i in alphabet :\n        if i not in s :\n            return False\n    return True\n    \n    \ndef check_pangram_2(s,alphabet) :\n    '''\n    Write a python function to check whether a string is pangram or not.\n    '''\n    s = set(s.lower())\n    alphabet = set(alphabet)\n    return s.issubset(alphabet)\n    \n    \ndef substring_to_string(str,num) :\n    '''\n    Write a python function to print the character from a string with the given\n    number of times.\n    '''\n    subs = [str[i:i+num] for i in range(0,len(str),num)]\n    for i in range(0,len(subs)) :\n        print(subs[i],end=\"\")\n        \n        \ndef remove_vowels(s):\n    '''\n    Write a python function to remove all the vowels in a string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    s = s.replace(\" \",\"\")\n    l = []\n    for i in s :\n        if i not in vowels :\n            l.append(i)\n    return l\n    \n    \ndef sort_list_in_place(l):\n    '''\n    Write a python function to sort the list in place.\n    '''\n    l.sort()\n    \n    \ndef rotate_list(l,k) :\n    '''\n    Write a python function to rotate a list k times.\n    '''\n    l = l[k:] + l[:k]\n    \n    \ndef max_product_pair(numbers) :\n    '''\n    Write a python function to print the maximum product of two numbers.\n    '''\n    numbers.sort()\n    return numbers[-1]*numbers[-2]\n    \n    \ndef replace_vowels(s) :\n    '''\n    Write a python function to replace the vowels in a string with the\n    following characters \"Z\": \"A\",\"E\": \"E\",\"I\": \"I\", \"O\": \"O\"\n    '''\n    s = s.replace(\"A\",\"Z\")\n    s = s.replace(\"E\",\"A\")\n    s = s.replace(\"I\",\"E\")\n    s = s.replace(\"O\",\"I\")\n    s = s.replace(\"U\",\"O\")\n    return s\n    \n    \ndef remove_duplicate_letters(s) :\n    '''\n    Write a python function to remove duplicate letters in a string.\n    '''\n    l = []\n    for i in s :\n        if i not in l :\n            l.append(i)\n    l = ''.join(l)\n    return l\n    \n    \ndef check_string_permutation(str1,str2) :\n    '''\n    Write a python function to check whether two strings are permutations of each\n    other or not.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str2 = str2.replace(\" \",\"\")\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2 :\n        return True\n    else :\n        return False\n    \n    \ndef check_string_permutation_2(str1,str2) :\n    '''\n    Write a python function to check whether two strings are permutations of each\n    other or not.\n    '''\n    return sorted(str1) == sorted(str2)\n    \n    \ndef check_string_permutation_3(str1,str2) :\n    '''\n    Write a python function to check whether two strings are permutations of each\n    other or not.\n    '''\n    return set(str1) == set(str2)\n    \n    \ndef remove_k_substring(s,k) :\n    '''\n    Write a python function to print the string after removing all the substrings\n    that have exactly k distinct characters.\n    '''\n    s = s.replace(\" \",\"\")\n    for i in range(0,len(s)-k+1) :\n        if len(set(s[i:i+k])) == k :\n            s = s.replace(s[i:i+k],'')\n    return s\n    \n    \ndef remove_k_substring_2(s,k) :\n    '''\n    Write a python function to print the string after removing all the substrings\n    that have exactly k distinct characters.\n    '''\n    s = s.replace(\" \",\"\")\n    count = 0\n    l = []\n    for i in range(0,len(s)-k+1) :\n        if count < k and s[i:i+k] not in l :\n            l.append(s[i:i+k])\n            count += 1\n    return s\n    \n    \ndef remove_k_substring_3(s,k) :\n    '''\n    Write a python function to print the string after removing all the substrings\n    that have exactly k distinct characters.\n    '''\n    return ''.join([s[i] for i in range(len(s)) if i==0 or s[i]!=s[i-1]])\n    \n    \ndef find_longest_substring_no_rep(s) :\n    '''\n    Write a python function to print the longest substring with no repeated\n    characters.\n    '''\n    s = s.replace(\" \",\"\")\n    start = 0\n    max_len = 1\n    for i in range(0,len(s)) :\n        count = 0\n        for j in range(i,len(s)) :\n            if s[j] in s[start:j] :\n                count += 1\n        if count < max_len :\n            start = i\n            max_len = count\n    return s[start:start+max_len]\n    \n    \ndef remove_non_alphanumeric_characters(s) :\n    '''\n    Write a python function to remove all the non-alphanumeric characters from a\n    string.\n    '''\n    s = s.lower()\n    s = s.replace(\" \",\"\""
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<0:\n        n = -n\n    if n<10:\n        return n\n    return last_Digit(n//10)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x<0, list1))\ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(list1))\ndef first_and_last_index(list1,target):\n    '''\n    Write a python function to return the first and last index of a target in a list. If the target is not present in the list return None.\n    '''\n    if target in list1:\n        return list1.index(target),len(list1)-1\n    else:\n        return None\ndef check_pallindrome(list1):\n    '''\n    Write a python function to check if a list is a palindrome.\n    '''\n    return list1[::-1]==list1\ndef common_member(list1,list2):\n    '''\n    Write a python function to find a common member between two lists.\n    '''\n    return set(list1).intersection(list2)\ndef remove_element(list1,target):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    return [x for x in list1 if x!=target]\ndef list_comprehension(list1):\n    '''\n    Write a python list comprehension to generate a list in which each element is the list number multiplied by 1, 2, 3, 4, 5, respectively.\n    '''\n    return [x*i for i in range(1,6) for x in list1]\ndef max_list(list1):\n    '''\n    Write a python function to return the maximum value in a list.\n    '''\n    return max(list1)\ndef palindrome_index(list1):\n    '''\n    Write a python function to return the first index where the list is a palindrome. If the list is not a palindrome then return None.\n    '''\n    for i in range(len(list1)):\n        list1[i] =''+list1[i]\n        rev_list1 = list1[::-1]\n        if list1[i]==rev_list1[i]:\n            return i\n    return None\ndef positive_elements(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    return list(filter(lambda x: x>0, list1))\ndef sum_list(list1):\n    '''\n    Write a python function to return the sum of all the elements in the list.\n    '''\n    return sum(list1)\ndef find_max(list1):\n    '''\n    Write a python function to return the maximum number in the list.\n    '''\n    return max(list1)\ndef frequency(list1):\n    '''\n    Write a python function to return the frequency of elements in a list.\n    '''\n    dict1 = {}\n    for x in list1:\n        if x in dict1:\n            dict1[x]+=1\n        else:\n            dict1[x]=1\n    return dict1\ndef compare_lists(list1,list2):\n    '''\n    Write a python function to return True if both the lists are same and False otherwise.\n    '''\n    return set(list1) == set(list2)\ndef unique_list(list1):\n    '''\n    Write a python function to return the unique elements of the list.\n    '''\n    return list(set(list1))\ndef remove_element_using_sort(list1,target):\n    '''\n    Write a python function to remove the first occurrence of an element in a list.\n    '''\n    list1.sort(reverse=True)\n    list1.remove(target)\n    return list1\ndef find_missing_number(list1):\n    '''\n    Write a python function to return the missing number from the list.\n    '''\n    list1.sort()\n    for i in range(len(list1)):\n        if list1[i] == i:\n            continue\n        else:\n            return i\ndef remove_element_from_end(list1,n):\n    '''\n    Write a python function to remove the nth element from the end of the list.\n    '''\n    list1.sort(reverse=True)\n    list1.pop(n)\n    return list1\ndef create_list_using_range(list1,list2):\n    '''\n    Write a python function to create a list using range.\n    '''\n    return list(range(list1,list2))\ndef create_list_using_for(list1):\n    '''\n    Write a python function to create a list using for loop.\n    '''\n    list_var = []\n    for i in list1:\n        list_var.append(i)\n    return list_var\ndef common_list(list1,list2):\n    '''\n    Write a python function to find common elements between two lists.\n    '''\n    return list(set(list1).intersection(list2))\ndef compare_element_by_index(list1,list2):\n    '''\n    Write a python function to check if the lists have same elements at same index.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\ndef compare_list(list1,list2):\n    '''\n    Write a python function to check if both the lists have same elements.\n    '''\n    list1.sort()\n    list2.sort()\n    return set(list1) == set(list2)\ndef zip_list(list1,list2):\n    '''\n    Write a python function to zip two lists.\n    '''\n    return list(zip(list1,list2))\ndef list_of_dictionaries(list1,list2):\n    '''\n    Write a python function to return a list of dictionaries.\n    '''\n    return [{list1[i]:list2[i]} for i in range(len(list1))]\ndef sum_of_list(list1):\n    '''\n    Write a python function to sum all the elements in the list.\n    '''\n    return sum(list1)\ndef remove_target_from_list(list1,target):\n    '''\n    Write a python function to remove a target element from the list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == target:\n            del list1[i]\n            return list1\n    return list1\ndef common_member_in_list(list1,list2):\n    '''\n    Write a python function to return common members between two lists.\n    '''\n    return list(set(list1).intersection(list2))\ndef remove_element_from_list(list1,target):\n    '''\n    Write a python function to remove an element from the list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == target:\n            del list1[i]\n            return list1\n    return list1\ndef unique_list_in_list(list1,list2):\n    '''\n    Write a python function to return unique elements between two lists.\n    '''\n    return list(set(list1).union(set(list2)))\ndef remove_index_from_list(list1,index):\n    '''\n    Write a python function to remove the element at a particular index from a list.\n    '''\n    list1.pop(index)\n    return list1\ndef delete_element_from_list(list1,target):\n    '''\n    Write a python function to remove the first occurrence of an element from the list.\n    '''\n    list1.remove(target)\n    return list1\ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list.\n    '''\n    list1.reverse()\n    return list1\ndef remove_duplicates_from_list(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(list1))\ndef is_valid_parenthesis(string1):\n    '''\n    Write a python function to check if the string is a valid parenthesis.\n    '"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1=[1,2,3,4,5,-1,-2,-3,6,7,-8,-9,-10]\n    list1=[]\n    for i in list1:\n        if i < 0:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\ndef is_prime(n):\n    '''\n    Write a function which takes an integer argument and returns True if the argument is prime, and False otherwise.\n    '''\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\ndef get_numbers(a, b):\n    '''\n    Write a Python program that accepts an integer (a) and computes the value of a+aa+aaa+aaaa.\n    Sample value of a is 5\n    Expected Result : 615\n    '''\n    x = str(a)\n    l = [int(x*i) for i in range(1,5)]\n    return sum(l)\ndef max_of_three(a,b,c):\n    '''\n    Write a Python function to get the maximum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\ndef is_leap(year):\n    '''\n    A year is a leap year if it is divisible by 4, except that years divisible by 100 are not leap years\n    unless they are also divisible by 400. Write a Python program to test if a year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 4 == 0 and year % 100 == 0 and year % 400 == 0:\n        return True\n    else:\n        return False\ndef is_vowel(letter):\n    '''\n    Write a Python program to test whether a specified character is a vowel or not.\n    '''\n    return letter.lower() in 'aeiou'\ndef double_index(list, index):\n    '''\n    Write a Python function to double a list number from a given index,\n    the length of list is given as an argument.\n    '''\n    if 0 <= index < len(list):\n        list[index] *= 2\n    return list\ndef double_list(list):\n    '''\n    Write a Python function to double a list number from a given index,\n    the length of list is given as an argument.\n    '''\n    for i in range(len(list)):\n        list[i] *= 2\n    return list\ndef maximum_number(list):\n    '''\n    Write a Python function to get the maximum number from a list\n    '''\n    maxi = max(list)\n    return maxi\ndef sum_of_list(list):\n    '''\n    Write a Python function to get the sum of all elements in a list.\n    '''\n    s = sum(list)\n    return s\ndef sum_of_elements_in_list(list):\n    '''\n    Write a Python function to sum all the numbers in a list.\n    '''\n    s = 0\n    for i in list:\n        s += i\n    return s\ndef reverse_list(list):\n    '''\n    Write a Python function that takes a list and returns a new list with the reversed order of elements\n    '''\n    return list[::-1]\ndef reverse_list_of_n_elements(list, n):\n    '''\n    Write a Python function that takes a list and returns a new list with the reverse order of n elements\n    '''\n    return list[-n::1]\ndef add_prefix(list, prefix):\n    '''\n    Write a Python function that takes a list and returns a new list with each element preceded with a prefix string\n    '''\n    return [prefix+x for x in list]\ndef add_suffix(list, suffix):\n    '''\n    Write a Python function that takes a list and returns a new list with each element followed by a suffix string\n    '''\n    return [x+suffix for x in list]\ndef common_elements(list1, list2):\n    '''\n    Write a Python function that takes two lists and returns a new list containing only the elements that are common\n    between the lists (without duplicates). Make sure your program works on two lists of different sizes.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    return list1.intersection(list2)\ndef remove_duplicates(list1):\n    '''\n    Write a Python program to remove duplicates from a list.\n    '''\n    return list(set(list1))\ndef get_matrix_minor(matrix, row, col):\n    '''\n    Write a Python program to get the minors of a given matrix.\n    '''\n    minor = [row[:col] + row[col+1:] for row in (matrix[:row] + matrix[row+1:])]\n    return minor\ndef get_matrix_determinant(matrix):\n    '''\n    Write a Python program to calculate the determinant of a given matrix.\n    '''\n    determinant = 0\n    if len(matrix) == 2:\n        determinant = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    else:\n        for col in range(len(matrix)):\n            minor = get_matrix_minor(matrix, 0, col)\n            determinant += ((-1) ** col) * matrix[0][col] * get_matrix_determinant(minor)\n    return determinant\ndef get_matrix_inverse(matrix):\n    '''\n    Write a Python program to get the inverse of a given matrix.\n    '''\n    determinant = get_matrix_determinant(matrix)\n    if len(matrix) == 2:\n        return [[matrix[1][1]/determinant, -1*matrix[0][1]/determinant],\n                [-1*matrix[1][0]/determinant, matrix[0][0]/determinant]]\n    cofactors = []\n    for r in range(len(matrix)):\n        cofactorRow = []\n        for c in range(len(matrix)):\n            minor = get_matrix_minor(matrix, r, c)\n            cofactorRow.append(((-1) ** (r + c)) * get_matrix_determinant(minor))\n        cofactors.append(cofactorRow)\n    cofactors = transpose_matrix(cofactors)\n    for r in range(len(cofactors)):\n        for c in range(len(cofactors)):\n            cofactors[r][c] = cofactors[r][c]/determinant\n    return cofactors\ndef transpose_matrix(matrix):\n    '''\n    Write a Python program to transpose a matrix.\n    '''\n    transpose = []\n    for r in range(len(matrix[0])):\n        transposeRow = []\n        for c in range(len(matrix)):\n            transposeRow.append(matrix[c][r])\n        transpose.append(transposeRow)\n    return transpose\ndef is_matrix_equal(matrix1, matrix2):\n    '''\n    Write a Python program to test whether two matrices are equal.\n    '''\n    return matrix1 == matrix2\ndef get_matrix_diagonal(matrix):\n    '''\n    Write a Python program to get the diagonal elements of a matrix.\n    '''\n    diag = []\n    for r in range(len(matrix)):\n        diag.append(matrix[r][r])\n    return diag\ndef get_matrix_sum(matrix1, matrix2):\n    '''\n    Write a Python program to add two matrices\n    '''\n    matrix3 = []\n    for r in range(len(matrix1)):\n        matrix3.append([])\n        for c in range(len(matrix1[0])):\n            matrix3[r].append(matrix1[r][c] + matrix2[r][c])\n    return matrix3\ndef is_matrix_equal(ma"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg = [num for num in list1 if num < 0]\n    return list_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [1, -4, 5, -6, 7, -8]\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    newlist=[]\n    for x in list1:\n        if x<0:\n            newlist.append(x)\n    return newlist\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for num in list1:\n        if num < 0:\n            list2.append(num)\n    return list2\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_arr = list(str1)\n    for i in range(len(str_arr)):\n        if str_arr[i] % 2 == 0:\n            str_arr[i] = ''\n    str1 = \"\".join(str_arr)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char in ['a','e','i','o','u']:\n            new_str = new_str + char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i not in new_str:\n            new_str += i\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # check if the string is empty or none\n    if str1 is None or str1 == \"\":\n        return None\n    # loop over the string and check if the character is odd\n    # if it's odd, we'll convert it to an empty string\n    for i in str1:\n        if ord(i) % 2!= 0:\n            str1 = str1.replace(i, \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i%2==0])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # str1 = input()\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\n    \ndef check_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    return str1[::-1] == str1\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    for i in range(len(str1)//2):\n        if str1[i]!= str1[-1-i]:\n            return False\n    return True\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i not in str2:\n            str2 += i\n    return str2\n    \n    \n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    char = '#'\n    result = ''\n    for i in range(len(str1)):\n        if str1[i]!= char:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward = 0\n    backward = 0\n    for i in range(0, len(test_list)):\n        if is_forward(test_list[i]):\n            forward += 1\n        elif is_backward(test_list[i]):\n            backward += 1\n    print(\"Forward:\", forward)\n    print(\"Backward:\", backward)\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for x in test_list:\n        if isinstance(x, tuple) and len(x) == 2:\n            if x[0] == x[1]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(list(filter(lambda x: x[0] == x[1], test_list)))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def helper(test_list):\n        if not test_list:\n            return 0\n        l = len(test_list)\n        forward = 0\n        backward = 0\n        for i in range(l):\n            for j in range(i+1, l):\n                if test_list[j] == test_list[i]:\n                    forward += 1\n        for i in range(l-1):\n            for j in range(i+1, l):\n                if test_list[j] == test_list[i]:\n                    backward += 1\n        return forward, backward\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set([(x, y) for x in test_list for y in test_list if x > y]))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = []\n    for i in range(len(test_list)-1):\n        if i+1 < len(test_list):\n            for j in range(i+1,len(test_list)):\n                if j+1 < len(test_list):\n                    if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                        result.append([test_list[i],test_list[j]])\n                    if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                        result.append([test_list[i],test_list[j]])\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # get all values as a list\n    values = list(test_list.values())\n    # reverse the list\n    reverse_values = values[::-1]\n    # count all possible pairs\n    pairs = sum(values) * sum(reverse_values)\n    return pairs\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # L = [1, 2, 3, 4, 5, 6]\n    # print(type(L))\n    s = \"\"\n    for i in range(len(L)):\n        s += str(L[i])\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    for i in L:\n        multiple *= i\n    return multiple\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    import re\n    n = ''.join(L)\n    n = int(n)\n    return n\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    import functools\n    if not L:\n        return 0\n    x = functools.reduce(lambda a,b: 10*a+b, L)\n    return x\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(e) for e in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Your code here\n    multiple_list = list(map(int, L))\n    return sum(multiple_list)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    else:\n        return str(L[0]) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    text_list = text.split(' ')\n    \n    pattern = re.compile(r'(ADVERB)')\n    \n    for index, word in enumerate(text_list):\n        match = pattern.search(word)\n        if match:\n            return index\n    return None\n    \n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # \ubaa8\ub4e0 \ud2b9\uc218 \ubb38\uc790 \uc81c\uac70\n    text = re.sub(r'[,.:;!?]','', text)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = []\n    text = text.lower()\n    result = re.findall(r'\\b(adverb)\\b', text)\n    for i in range(len(result)):\n        adverb_position.append(text.find(result[i]))\n    return result, adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    index = 0\n    for i in sentence:\n        if (re.match('[a-z]*(ly|ily)$', i, re.IGNORECASE)):\n            result.append([index, index + len(i)])\n        index += len(i) + 1\n    return result\ndef find_adverb_position_v2(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v3(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v4(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v5(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v6(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v7(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v8(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v9(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v10(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v11(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v12(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v13(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v14(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v15(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v16(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v17(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if (re.match('[a-z]*(ly|ily)$', sentence[i], re.IGNORECASE)):\n            result.append([i, i + 1])\n    return result\ndef find_adverb_position_v18(text):\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = [\"so\", \"so far\", \"still\", \"still\", \"still\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", \"yet\", "
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # nltk.download('wordnet')\n    # nltk.download('punkt')\n    # nltk.download('averaged_perceptron_tagger')\n    # nltk.download('tagsets')\n    from nltk.tokenize import word_tokenize\n    from nltk.tag import pos_tag\n    from nltk.stem import WordNetLemmatizer\n    from nltk.corpus import wordnet as wn\n    from nltk.corpus import stopwords\n    from nltk.tokenize import RegexpTokenizer\n    # from nltk.corpus import brown\n    import string\n    import spacy\n    # from nltk.tag import StanfordNERTagger\n    import nltk\n    from nltk.tokenize.treebank import TreebankWordDetokenizer\n    from nltk.tag import pos_tag\n    from nltk.tokenize import RegexpTokenizer\n    from nltk.tag import StanfordNERTagger\n    from nltk.corpus import stopwords\n    from nltk.stem import WordNetLemmatizer\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus import wordnet\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    nltk.download('stopwords')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.tokenize import sent_tokenize\n    from nltk.stem import PorterStemmer\n    from nltk.corpus impor"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    p = re.compile(r\"([A-Za-z]+(?:\\s+[A-Za-z]+)+)\")\n    p_2 = re.compile(r\"\\d+\")\n    p_3 = re.compile(r\"\\s+\")\n    sentence = p_3.sub(\" \", text).strip()\n    sentence = p_2.sub(\" \", sentence).strip()\n    sentence = sentence.split(\" \")\n    result = []\n    for i in range(len(sentence)):\n        if p.match(sentence[i]):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b(perfect|good|well|superb|excellent|nice|interesting|great|amazing)\\s')\n    result = adverb_pattern.finditer(text)\n    return [i.span() for i in result]\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'[a-zA-Z]*(?=n\\'t)')\n    result = pattern.search(text)\n    return result.group()\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b[A-Z]{1,2}\\b'\n    adverb = re.finditer(pattern, text)\n    return [i.group(0) for i in adverb]\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l ** 2\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a=l**2\n    return 6*a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l * l * 6\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    surfacearea = l**2*6\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6 * (l * l)\n    print('The surface area of the cube is: ', surfacearea)\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Approach 1: use of loop\n    # dict = {}\n    # count = 0\n    # for i in nums:\n    #     if i > 0:\n    #         count += 1\n    #         dict[i] = count\n    # print(dict)\n    # return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c=0\n    for i in nums:\n        if i>0:\n            c+=1\n    return c/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    l = len(nums)\n    positive = 0\n    for i in range(l):\n        if nums[i]>0:\n            positive += 1\n    return positive/l\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    number_of_positive = 0\n    for num in nums:\n        if num > 0:\n            number_of_positive += 1\n    return number_of_positive / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize count\n    count = 0\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_of_neg = []\n    for i in list1:\n        if i < 0:\n            list_of_neg.append(i)\n    if list_of_neg == []:\n        return None\n    return max(list_of_neg)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            return list1[i]\n    return None\n    \nlist1 = [10, -20, 4, 15, -5]\nprint(\"Largest negative number is:\", largest_neg(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    m=list1[0]\n    for item in list1:\n        if item<0 and item<m:\n            m=item\n    return m\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -9999\n    for x in list1: \n        if x < max: \n            max = x \n    return max\nprint largest_neg([5, -1, -8, 3, -2])\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maxi = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] > maxi:\n            maxi = list1[i]\n    return maxi\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_of_negative = []\n    for num in list1:\n        if num < 0:\n            list_of_negative.append(num)\n    return max(list_of_negative)\n    \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    list_of_negative = []\n    for num in list1:\n        if num < 0:\n            list_of_negative.append(num)\n    return min(list_of_negative)\n    \ndef smallest_positive(list1): \n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    list_of_positive = []\n    for num in list1:\n        if num > 0:\n            list_of_positive.append(num)\n    return min(list_of_positive)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = sorted(list1)\n    list2.reverse()\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            return list2[i]\n    return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negative_list = []\n    for i in list1:\n        if i < 0:\n            negative_list.append(i)\n    if negative_list:\n        return max(negative_list)\n    else:\n        return None\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [9,6,1,2,7,4,8,5]\n    negative_list = []\n    for i in list1:\n        if i<0:\n            negative_list.append(i)\n    print(negative_list)\n    if negative_list:\n        print(\"largest negative number is \",max(negative_list))\n    else:\n        print(\"no negative numbers in the list\")\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max([i for i in list1 if i < 0])\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for index, element in enumerate(test_list):\n        print(test_list[index][0:K])\n        # if len(test_list[index]) > K:\n        #     test_list[index] = test_list[index][0:K]\n    # return test_list\n    \n    \n    # return tuple(x[0:K] for x in test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    length = len(test_list)\n    return test_list[:length-K]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    length_list = len(test_list)\n    new_list = []\n    for i in range(length_list):\n        if len(test_list[i])>=K:\n            new_list.append(test_list[i][:K])\n        else:\n            new_list.append(test_list[i])\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your code here\n    return trim_tuple_func(test_list, K)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[i][0:K]) for i in range(len(test_list))]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if isinstance(test_list[0], tuple):\n        return [tuple(l[0:K]) for l in test_list]\n    elif isinstance(test_list[0], list):\n        return [l[0:K] for l in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # YOUR CODE HERE\n    return [(x[0], x[1], x[2]) for x in test_list if len(x) == K]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple[:K] for tuple in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #list of tuples, k\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for t in test_list:\n        if len(t) > K:\n            new_t = t[:K]\n        else:\n            new_t = t\n        new_list.append(new_t)\n    return new_list\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    final_list = []\n    for i in range(len(list1)):\n        result = list1[i] * list2[i]\n        final_list.append(result)\n    print(tuple(final_list))\n    return tuple(final_list)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    multiply = ()\n    for i in range(len(tuple1)):\n        multiply += (tuple1[i] * tuple2[i],)\n    return multiply\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n    else:\n        raise Exception('Two tuples of equal length are expected.')\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for idx1, tup1 in enumerate(test_tup1):\n        new_tup += (tup1 * test_tup2[idx1],)\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for i in range(len(tup1)):\n        tup1[i] *= tup2[i]\n    print(tup1)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            print(test_tup1[i] * test_tup2[i])\n    else:\n        print(\"Tuples cannot be multiplied\")\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiply_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        multiply_tup += (i*j,)\n    return multiply_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # index_multiplication = test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n    index_multiplication = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        index_multiplication += (tup1 * tup2,)\n    return index_multiplication\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = Counter(lst) \n    for i in tup: \n        print(res[i], end = \" \") \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup) \n    cnt_lst = cnt.most_common(len(lst))\n    return cnt_lst\n    \ndef count_Occurrence_1(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup) \n    cnt_lst = cnt.most_common(len(lst))\n    res = {}\n    for ele in cnt_lst:\n        if ele[0] in res.keys():\n            res[ele[0]] += 1\n        else:\n            res[ele[0]] = 1\n    return res\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    print(\"Occurence of each element in tuple:\", Counter(tup))\n    print(\"Occurence of each element in list:\", Counter(lst)) \n    \n    \nlst = [10, 20, 30, 40, 10, 20, 30] \ntup = (10, 20, 30, 40, 10, 20, 30) \ncount_Occurrence(tup, lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = {}\n    for i in lst:\n        dict[i] = tup.count(i)\n    return dict\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    x = Counter(lst) \n    t = Counter(tup) \n    for i, j in t.items(): \n        print('Occurrence of', i, 'is:', x[i]) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for item in lst:\n        count = 0\n        for x in tup:\n            if x == item:\n                count += 1\n        print('{} occurence: {}'.format(item, count))\n        \ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b'), ['a', 'b', 'c'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b'), ['a', 'b', 'c'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b'), ['a', 'b', 'c'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c'), ['a', 'b', 'c'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b'), ['a', 'b', 'c'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd'), ['a', 'b', 'c', 'd'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd'), ['a', 'b', 'c', 'd'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd'), ['a', 'b', 'c', 'd'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd'), ['a', 'b', 'c', 'd'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd'), ['a', 'b', 'c', 'd'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'), ['a', 'b', 'c', 'd', 'e'])\ncount_Occurrence(('a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_tup = Counter(tup) \n    count_lst = Counter(lst) \n    \n    for key, val in count_tup.items(): \n        print(key, val) \n    \n    for key, val in count_lst.items(): \n        print(key, val) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for key, val in tup: \n        if key in count: \n            print('{} occurs {} times'.format(key, val)) \n        else: \n            print('{} occurs {} times'.format(key, 0)) \ndef main(): \n    lst = [1, 2, 3, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7] \n    tup = ((1, 4), (2, 6), (3, 9), (4, 8), (5, 7), (6, 6), (7, 7)) \n    count_Occurrence(tup, lst) \nif __name__ == '__main__': \n    main() \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst) \n    # Iterate over each element and increment its count \n    for elem in tup: \n        counter[elem] += 1\n    return dict(counter) \n  "
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for n in nums:\n        yield n**3\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [number**3 for number in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n    \ndef even_nums(nums):\n    '''\n    Write a function to find the even numbers from a list.\n    '''\n    return [num for num in nums if num%2==0]\n    \ndef find_max_element(nums):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    return max(nums)\n    \ndef find_min_element(nums):\n    '''\n    Write a function to find the minimum element in a list.\n    '''\n    return min(nums)\n    \ndef remove_elem(nums, elem):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    return [num for num in nums if num!=elem]\n    \ndef remove_elem_index(nums, elem):\n    '''\n    Write a function to remove an element from a list using its index.\n    '''\n    return [num for i,num in enumerate(nums) if i!=elem]\n    \ndef filter_odd(nums):\n    '''\n    Write a function to filter out only the odd numbers from a list.\n    '''\n    return [num for num in nums if num%2==1]\n    \ndef get_odds_in_range(nums, start, end):\n    '''\n    Write a function to get all the odd numbers between a range of indexes in a list.\n    '''\n    return [num for num in nums[start:end] if num%2==1]\n    \ndef swap_elements(nums, idx1, idx2):\n    '''\n    Write a function to swap 2 elements in a list.\n    '''\n    nums[idx1], nums[idx2] = nums[idx2], nums[idx1]\n    return nums\n    \ndef move_last_element_to_front(nums):\n    '''\n    Write a function to move the last element of a list to the front.\n    '''\n    return [nums[-1]]+nums[:-1]\n    \ndef reverse_list(nums):\n    '''\n    Write a function to reverse the order of a list.\n    '''\n    return nums[::-1]\n    \ndef reverse_list_in_place(nums):\n    '''\n    Write a function to reverse the order of a list without creating a new list.\n    '''\n    return nums[::-1]\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicate elements in a list.\n    '''\n    return list(set(nums))\n    \ndef remove_middle_element(nums, idx):\n    '''\n    Write a function to remove an element in the middle of a list.\n    '''\n    return [nums[:idx]+nums[idx+1:]]\n    \ndef search_element(nums, elem):\n    '''\n    Write a function to search for an element in a list.\n    '''\n    return nums.index(elem) if elem in nums else -1\n    \ndef replace_with_average(nums):\n    '''\n    Write a function to replace all instances of an element with the average of itself and the element before it in the list.\n    '''\n    return [((nums[i-1]+nums[i])/2) if i!=0 else nums[0] for i in range(len(nums))]\n    \ndef sort_list(nums):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    return sorted(nums)\n    \ndef sort_list_in_place(nums):\n    '''\n    Write a function to sort a list in ascending order using a built-in function.\n    '''\n    nums.sort()\n    return nums\n    \ndef sort_list_by_length(nums):\n    '''\n    Write a function to sort a list of strings in ascending order by their length.\n    '''\n    return sorted(nums, key=len)\n    \ndef rotate_list(nums, k):\n    '''\n    Write a function to rotate a list by k.\n    '''\n    return nums[k:]+nums[:k]\n    \ndef reverse_list_in_place_using_slice(nums):\n    '''\n    Write a function to reverse a list in place using a slice.\n    '''\n    nums[:] = nums[::-1]\n    return nums\n    \ndef rotate_list_using_list_comprehension(nums, k):\n    '''\n    Write a function to rotate a list by k using list comprehensions.\n    '''\n    return [nums[(i+k)%len(nums)] for i in range(len(nums))]\n    \ndef rotate_list_using_reverse(nums, k):\n    '''\n    Write a function to rotate a list by k using the reversed function.\n    '''\n    return nums[-k:]+nums[:-k]\n    \ndef rotate_list_using_reversed(nums, k):\n    '''\n    Write a function to rotate a list by k using the reversed function.\n    '''\n    return list(reversed(nums))[k:]+list(reversed(nums))[:k]\n    \ndef rotate_list_using_slice(nums, k):\n    '''\n    Write a function to rotate a list by k using slicing.\n    '''\n    return nums[k:]+nums[:k]\n    \ndef product_of_list_except_self(nums):\n    '''\n    Write a function to multiply all the elements of a list with all the elements except itself.\n    '''\n    product = 1\n    for num in nums:\n        product *= num\n    return product/len(nums)\n    \ndef product_of_list_except_self_with_comprehension(nums):\n    '''\n    Write a function to multiply all the elements of a list with all the elements except itself.\n    '''\n    return [product/len(nums) for product in [product for product in [nums[i] for i in range(len(nums))] for num in nums]]\n    \ndef get_longest_substring_without_repeating_chars(s):\n    '''\n    Write a function to get the longest substring without repeating characters.\n    '''\n    if len(s) == 0:\n        return None\n    \n    seen = {}\n    start = 0\n    end = 0\n    max_len = 0\n    cur_len = 0\n    \n    for i,char in enumerate(s):\n        if char in seen and seen[char]>start:\n            start = seen[char]+1\n            cur_len = i-start+1\n        else:\n            cur_len += 1\n        seen[char] = i\n        if cur_len>max_len:\n            max_len = cur_len\n            start = seen[char]\n    return s[start:start+max_len]\n    \ndef get_longest_substring_without_repeating_chars_with_sliding_window(s):\n    '''\n    Write a function to get the longest substring without repeating characters.\n    '''\n    if len(s) == 0:\n        return None\n    \n    seen = {}\n    start = 0\n    end = 0\n    max_len = 0\n    cur_len = 0\n    \n    for i,char in enumerate(s):\n        if char in seen and seen[char]>start:\n            start = seen[char]+1\n            cur_len = i-start+1\n        else:\n            cur_len += 1\n        seen[char] = i\n        if cur_len>max_len:\n            max_len = cur_len\n            start = seen[char]\n    return s[start:start+max_len]\n    \ndef get_longest_substring_without_repeating_chars_using_sliding_window_with_dict(s):\n    '''\n    Write a function to get the longest substring without repeating characters.\n    '''\n    if len(s) ="
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x: x**3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Your code here\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i*i*i)\n    return cubes\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return n + cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sumn=0\n    while n>0:\n        sumn+=n\n        n=n-1\n    return sumn\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum([sum([int(c) for c in str(i)]) for i in range(n)])\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # \uc774 \ud568\uc218\ub294 \uc0ac\uc2e4\uc0c1 \uc5b4\ub5a4 \uc218\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \uac83\uc778\uc9c0\ub294 \uc544\ubb34\uac83\ub3c4 \ubaa8\ub978\ub2e4. \n    # \uc624\ub298 \uae30\ubd84\uc774 \uc88b\uc544\uc838\uc11c \uadf8\ub0e5 \ub2e4\uc2dc \ud568\uc218\ub85c \ub9cc\ub4e0\uac78\ub85c \uc62c\ub838\ub2e4.\n    if n == 1:\n        return 2\n    else:\n        return cal_sum(n-1) + 2**n\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    assert n >= 0\n    # assert n <= 1000\n    def cal_sum_recursive(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return n + cal_sum_recursive(n-1)\n    return cal_sum_recursive(n)\nprint(cal_sum(0))\nprint(cal_sum(1))\nprint(cal_sum(2))\nprint(cal_sum(3))\nprint(cal_sum(10))\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        sum+=i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # To store sum of the first n perrin numbers \n    sum = 0\n    \n    # Iterate from 1 to n and add \n    for i in range(1, n + 1): \n        sum += i\n    return sum\n    "
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    import math\n    if n==1: \n        return 1\n    else: \n        return 2+sum(cal_sum(n-1))\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    assert n > 1, \"n must be greater than 1\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            extracted_strings.append(str[i])\n    return extracted_strings\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [elem[l:] for elem in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # str = 'Abhik kumar'\n    # l = ['Abhik', 'kumar']\n    count = 0\n    result = ''\n    for s in l:\n        if len(s) == l:\n            result = s\n        else:\n            count = count + 1\n        if count == len(l):\n            return result\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    j = l-1\n    while i < l:\n        j = i\n        while j >= 0 and str[j]!= ',':\n            j -= 1\n        if j!= i:\n            print(str[i:j+1])\n            i = j + 1\n        else:\n            break\n        \ndef find_solution(board, N):\n    '''\n    Write an efficient function to search a given key in a matrix of size N*N.\n    '''\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == '$':\n                return (i,j)\n    return None\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    ret = []\n    for s in str:\n        if len(s) == l:\n            ret.append(s)\n    return ret\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(0, len(l)):\n        if len(l[i]) == l[i]:\n            l[i] = l[i].strip()\n    return(l)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    end = l\n    while end <= len(str):\n        print(str[start:end])\n        start += 1\n        end += 1\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    if len(str) == l:\n        result.append(str)\n    elif len(str) > l:\n        for i in range(len(str) - l + 1):\n            result.append(str[i:i+l])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    t = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            t.append(str[i])\n    return t\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[0:l] for x in str]\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove leading and trailing whitespaces\n    text = text1.strip()\n    # replace all the multispaces with a single space\n    text = re.sub('\\s+','', text)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+', '', text1)\n    return text1\ndef remove_digits(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text1 = re.sub('\\d+', '', text1)\n    return text1\ndef remove_special(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text1 = re.sub('[^a-zA-Z0-9\\s]', '', text1)\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    text1 = re.sub(r'[^\\w\\s]','',text1)\n    return text1\ndef to_lowercase(text1):\n    '''\n    Write a function to convert text into lowercase.\n    '''\n    text1 = text1.lower()\n    return text1\ndef remove_stopwords(text1):\n    '''\n    Write a function to remove all stopwords from the given string.\n    '''\n    stopword_list = [\"a\", \"about\", \"above\", \"after\", \"again\", \"against\", \"all\", \"am\", \"an\", \"and\", \"any\", \"are\", \"as\", \"at\", \"be\", \"because\", \"been\", \"before\", \"being\", \"below\", \"between\", \"both\", \"but\", \"by\", \"can\", \"could\", \"dear\", \"did\", \"do\", \"does\", \"doing\", \"down\", \"during\", \"each\", \"few\", \"for\", \"from\", \"further\", \"had\", \"hadn\", \"has\", \"have\", \"having\", \"he\", \"her\", \"here\", \"hers\", \"herself\", \"him\", \"himself\", \"his\", \"how\", \"i\", \"if\", \"in\", \"into\", \"is\", \"it\", \"its\", \"itself\", \"just\", \"ll\", \"m\", \"ma\", \"me\", \"mightn\", \"more\", \"most\", \"my\", \"myself\", \"needn\", \"no\", \"nor\", \"not\", \"now\", \"o\", \"of\", \"off\", \"on\", \"once\", \"only\", \"or\", \"other\", \"our\", \"ours\", \"ourselves\", \"out\", \"over\", \"own\", \"re\", \"s\", \"same\", \"shan\", \"she\", \"she'll\", \"she's\", \"should\", \"should've\", \"so\", \"some\", \"such\", \"t\", \"than\", \"that\", \"that'll\", \"the\", \"their\", \"theirs\", \"them\", \"themselves\", \"then\", \"there\", \"these\", \"they\", \"this\", \"those\", \"through\", \"to\", \"too\", \"under\", \"until\", \"up\", \"ve\", \"very\", \"was\", \"wasn\", \"we\", \"were\", \"weren\", \"what\", \"when\", \"where\", \"which\", \"while\", \"who\", \"whom\", \"why\", \"will\", \"with\", \"won\", \"wouldn\", \"y\", \"you\", \"you'd\", \"you'll\", \"you're\", \"you've\", \"your\", \"yours\", \"yourself\", \"yourselves\", \"could\", \"he'd\", \"he'll\", \"he's\", \"here's\", \"how's\", \"i'd\", \"i'll\", \"i'm\", \"i've\", \"let's\", \"ought\", \"she'd\", \"she'll\", \"that's\", \"there's\", \"they'd\", \"they'll\", \"they're\", \"they've\", \"we'd\", \"we'll\", \"we're\", \"we've\", \"what's\", \"when's\", \"where's\", \"who's\", \"why's\", \"would\", \"able\", \"abst\", \"accordance\", \"according\", \"accordingly\", \"across\", \"act\", \"actually\", \"added\", \"adj\", \"affected\", \"affecting\", \"affects\", \"afterwards\", \"ah\", \"almost\", \"alone\", \"along\", \"already\", \"also\", \"although\", \"always\", \"among\", \"amongst\", \"announce\", \"another\", \"anybody\", \"anyhow\", \"anymore\", \"anyone\", \"anything\", \"anyway\", \"anyways\", \"anywhere\", \"apparently\", \"approximately\", \"arent\", \"arise\", \"around\", \"aside\", \"ask\", \"asking\", \"auth\", \"available\", \"away\", \"awfully\", \"b\", \"back\", \"became\", \"become\", \"becomes\", \"becoming\", \"beforehand\", \"begin\", \"beginning\", \"beginnings\", \"begins\", \"behind\", \"believe\", \"beside\", \"besides\", \"beyond\", \"biol\", \"brief\", \"briefly\", \"c\", \"ca\", \"came\", \"cannot\", \"can't\", \"cause\", \"causes\", \"certain\", \"certainly\", \"co\", \"com\", \"come\", \"comes\", \"contain\", \"containing\", \"contains\", \"couldnt\", \"date\", \"different\", \"done\", \"downwards\", \"due\", \"e\", \"ed\", \"edu\", \"effect\", \"eg\", \"eight\", \"eighty\", \"either\", \"else\", \"elsewhere\", \"end\", \"ending\", \"enough\", \"especially\", \"et\", \"etc\", \"even\", \"ever\", \"every\", \"everybody\", \"everyone\", \"everything\", \"everywhere\", \"ex\", \"except\", \"f\", \"far\", \"ff\", \"fifth\", \"first\", \"five\", \"fix\", \"followed\", \"following\", \"follows\", \"former\", \"formerly\", \"forth\", \"found\", \"four\", \"furthermore\", \"g\", \"gave\", \"get\", \"gets\", \"getting\", \"give\", \"given\", \"gives\", \"giving\", \"go\", \"goes\", \"gone\", \"got\", \"gotten\", \"h\", \"happens\", \"hardly\", \"hed\", \"hence\", \"hereafter\", \"hereby\", \"herein\", \"heres\", \"hereupon\", \"hes\", \"hi\", \"hid\", \"hither\", \"home\", \"howbeit\", \"however\", \"hundred\", \"id\", \"ie\", \"im\", \"immediate\", \"immediately\", \"importance\", \"important\", \"inc\", \"indeed\", \"index\", \"information\", \"instead\", \"invention\", \"inward\", \"itd\", \"it'll\", \"j\", \"k\", \"keep\", \"keeps\", \"kept\", \"kg\", \"km\", \"know\", \"known\", \"knows\", \"l\", \"largely\", \"last\", \"lately\", \"later\", \"latter\", \"latterly\", \"least\", \"less\", \"lest\", \"let\", \"lets\", \"like\", \"liked\", \"likely\", \"line\", \"little\", \"'ll\", \"look\", \"looking\", \"looks\", \"ltd\", \"made\", \"mainly\", \"make\", \"makes\", \"many\", \"may\", \"maybe\", \"mean\", \"means\", \"meantime\", \"meanwhile\", \"merely\", \"mg\", \"might\", \"million\", \"miss\", \"ml\", \"moreover\", \"mostly\", \"mr\", \"mrs\", \"much\", \"mug\", \"must\", \"n\", \"na\", \"name\", \"namely\", \"nay\", \"nd\", \"near\", \"nearly\", \"necessarily\", \"necessary\", \"need\", \"needs\", \"neither\", \"never\", \"nevertheless\", \"new\", \"next\", \"nine\", \"ninety\", \"nobody\", \"non\", \"none\", \"nonetheless\", \"noone\", \"normally\", \"nos\", \"noted\", \"nothing\", \"nowhere\", \"obtain\", \"obtained\", \"obviously\", \"often\", \"oh\", \"ok\", \"okay\", \"old\", \"omitted\", \"one\", \"ones\", \"onto\", \"ord\", \"others\", \"otherwise\", \"outside\", \"overall\", \"owing\", \"p\", \"page\", \"pages\", \"part\", \"particular\", \"particularly\", \"past\", \"per\", \"perhaps\", \"placed\", \"please\", \"plus\", \"poorly\", \"possible\", \"possibly\", \"potentially\", \"pp\", \"predominantly\", \"present\", \"previously\", \"primarily\", \"probably\", \"promptly\", \"proud\", \"provides\", \"put\", \"q\", \"que\", \"quickly\", \"quite\", \"qv\", \"r\", \"ran\", \"rather\", \"rd\", \"readily\", \"really\", \"recent\", \"recently\", \"ref\", \"refs\", \"regarding\", \"regardless\", \"regards\", \"related\", \"relatively\", \"research\", \"respectivel"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    newstring = re.sub(r\"\\s+\", \"\", text1)\n    return newstring\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r\"\\s+\")\n    result = re.sub(pattern, \"\", text1)\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','',text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # \\t, \\n, \\r\n    # text1=text1.replace('\\t','')\n    text1=re.sub('\\n','',text1)\n    text1=re.sub('\\r','',text1)\n    # text1=re.sub('\\s\\s+',' ',text1) # work if only space\n    text1=re.sub('\\s+',' ',text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace(\" \",\"\")\n    text = text.replace(\"\\t\",\"\")\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.replace(' ','')\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #pattern = '\\s'\n    #return re.sub(pattern, '', text)\n    \n    # Approach 2:\n    #return text1.replace(' ', '')\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_cost = int(actual_cost)\n    sale_amount = int(sale_amount)\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount :\n        return actual_cost - sale_amount\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount-actual_cost if actual_cost>sale_amount else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n    \ndef loss_amount(actual_cost, sale_amount):\n    return actual_cost - sale_amount if sale_amount < actual_cost else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(actual_cost>sale_amount):\n        loss_amount = actual_cost-sale_amount\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount - actual_cost if sale_amount > actual_cost else 0\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n))):\n        if (n % i == 0 and i % 2 == 0):\n            s += i\n    if n % 2 == 0:\n        s += n\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i\n            if i!= n // i: \n                if (n // i) % 2 == 0: \n                    sum += n // i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = [] \n    sum = 0\n    for i in range(1,n) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                factors.append(i)\n                sum = sum + i\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Accept an integer n as input\n    # sum of even factors of n\n    # sum = 1 + 2 +... + n + 1 + 2 +... + n\n    # n = 1\n    # n + 1 = 2\n    # n + 2 = 4\n    # n + 4 = 8\n    # n + 8 = 16\n    # n + 16 = 32\n    #...\n    # n + 32 = 64\n    # n + 64 = 128\n    # n + 128 = 256\n    # n + 256 = 512\n    # n + 512 = 1024\n    # n + 1024 = 2048\n    # n + 2048 = 4096\n    # n + 4096 = 8192\n    # n + 8192 = 16384\n    # n + 16384 = 32768\n    # n + 32768 = 65536\n    # n + 65536 = 131072\n    # n + 131072 = 262144\n    # n + 262144 = 524288\n    # n + 524288 = 1048576\n    # n + 1048576 = 2097152\n    # n + 2097152 = 4194304\n    # n + 4194304 = 8388608\n    # n + 8388608 = 16777216\n    # n + 16777216 = 33554432\n    # n + 33554432 = 67108864\n    # n + 67108864 = 1342177216\n    # n + 1342177216 = 2684354560\n    # n + 2684354560 = 536870912\n    # n + 536870912 = 1073741824\n    # n + 1073741824 = 2147483648\n    # n + 2147483648 = 4294967296\n    # n + 4294967296 = 8589934592\n    # n + 8589934592 = 17179869184\n    # n + 17179869184 = 34359738368\n    # n + 34359738368 = 68719476736\n    # n + 68719476736 = 137438953472\n    # n + 137438953472 = 274877906944\n    # n + 274877906944 = 549755813888\n    # n + 549755813888 = 1099511627776\n    # n + 1099511627776 = 2199023255552\n    # n + 2199023255552 = 4398046511104\n    # n + 4398046511104 = 8796093022208\n    # n + 8796093022208 = 17592186044416\n    # n + 17592186044416 = 35184372088832\n    # n + 35184372088832 = 70368744177664\n    # n + 70368744177664 = 140737488355328\n    # n + 140737488355328 = 281474976710656\n    # n + 281474976710656 = 562949953421312\n    # n + 562949953421312 = 1125899906842624\n    # n + 1125899906842624 = 2251799813685248\n    # n + 2251799813685248 = 4503599627370496\n    # n + 4503599627370496 = 9007199254740992\n    # n + 9007199254740992 = 18014398509481984\n    # n + 18014398509481984 = 36028797018963968\n    # n + 36028797018963968 = 72057594037927936\n    # n + 72057594037927936 = 144115188075855872\n    # n + 144115188075855872 = 288230376151711744\n    # n + 288230376151711744 = 562949953421312\n    # n + 562949953421312 = 1125899906842624\n    # n + 1125899906842624 = 2251799813685248\n    # n + 2251799813685248 = 4503599627370496\n    # n + 4503599627370496 = 9007199254740992\n    # n + 9007199254740992 = 18014398509481984\n    # n + 18014398509481984 = 36028797018963968\n    # n + 36028797018963968 = 72057594037927936\n    # n + 72057594037927936 = 144115188075855872\n    # n + 144115188075855872 = 288230376151711744\n    # n + 288230376151711744 = 562949953421312\n    # n + 562949953421312 = 1125899906842624\n    # n + 1125899906842624 = 2251799813685248\n    # n + 2251799813685248 = 4503599627370496\n    # n + 4503599627370496 = 9007199254740992\n    # n + 9007199254740992 = 18014398509481984\n    # n + 18014398509481984 = 36028797018963968\n    # n + 36028797018963968 = 72057594037927936\n    # n + 72057594037927936 = 144115188075855872\n    # n + 144115188075855872 = 288230376151711744\n    # n + 288230376151711744 = 562949953421312\n    # n + 562949953421312 = 1125899906842624\n    # n + 1125899906842624 = 2251799813685248\n    # n + 2251799813685248 = 4503599627370496\n    # n + 4503599627370496 = 9007199254740992\n    # n + 9007199254740992 = 18014398509481984\n    # n + 18014398509481984 = 36028797018963968\n    # n + 36028797018963968 = 72057594037927936\n    # n + 72057594037927936 = 144115188075855872\n    # n + 144115188075855872 = 288230376151711744\n    # n + 288230376151711744 = 562949953421312\n    # n + 562949953421312 = 1125899906842624\n    # n + 1125899906842624 = 2251799813685248\n    # n + 2251799813685248 = 4503599627370496\n    # n + 4503599627370496 = 9007199254740992\n    # n + 9007199254740992 = 18014398509481984\n    # n + 18014398509481984 = 36028797018963968\n    # n + 36028797018963968 = 72057594037927936\n    # n + 72057594037927936 = 144115188075855872\n    # n + 144115188075855872 = 288230376151711744\n    # n + 288230376151711744 = 562949953421312\n    # n + 562949953421312 = 1125899906842624\n    # n + 1125899906842624 = 2251799813685248\n    # n + 2251799813685248 = 4503599627370496\n    # n + 4503599627370496 = 9007199254740992\n    # n + 9007199254740992 = 18014398509481984\n    # n + 18014398509481984 = 36028797018963968\n    # n + 36028797018963968 = 72057594037927936\n    # n + 72057594037927936 = 144115188075855872\n    # n + 144115188075855872 = 288230376151711744\n    # n + 288230376151711744 = 562949953421312\n    # n + 562949953421312 = 1125899906842624\n    # n + 1125899906842624 = 2251799813685248\n    # n + 2251799813685248 = 4503599627370496\n    # n + 4503599627370496 = 9007199254740992\n    # n + 9007199254740992 = 18014398509481984\n    # n + 18014398509481984 = 36028797018963968\n    # n + 36028797018963968 = 72057594037927936\n    "
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    sum = 0\n    for i in range(1, n) : \n        if (n % i == 0 and i % 2 == 0) : \n            sum += i \n            \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n            if i % 2 == 0:\n                total += i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Handle zero\n    if n <= 0:\n        return 0\n        \n    # The sum of the even factors\n    # equals to the sum of all\n    # odd factors\n    sum = 0\n    \n    for i in range(1, n+1):\n        if (n % i == 0):\n            if (i % 2 == 0):\n                sum += i\n            else:\n                sum += 0\n    return sum\nprint(sumofFactors(4))\nprint(sumofFactors(5))\nprint(sumofFactors(6))\nprint(sumofFactors(8))\nprint(sumofFactors(10))\nprint(sumofFactors(12))\nprint(sumofFactors(14))\nprint(sumofFactors(16))\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    # iterating through every number that is less than n \n    for i in range(1, n): \n        # if i divides n, if not \n        if n%i == 0: \n            # if i is even, add it to sum \n            if i%2 == 0: \n                sum += i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum and i \n    sum = 0\n    i = 2\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            if(n / i == i) : \n                sum += i \n            else : \n                sum += (i + n / i) \n    return sum\ndef first(n) : \n    '''\n    Write a python function to find the first n odd numbers.\n    '''\n    a = 2\n    while(n!= 0) : \n        if(a % 2!= 0) : \n            print(a, end = \" \")\n        a = a + 1\n        n = n - 1\ndef sumOfOdd(n) : \n    '''\n    Write a python function to find the sum of the first n odd numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        sum += i\n    return sum\ndef sumofOdd(n) : \n    '''\n    Write a python function to find the sum of the first n odd numbers.\n    '''\n    sum = 0\n    while(n!= 0) : \n        sum += n \n        n = n - 2\n    return sum\ndef sumofOdd1(n) : \n    '''\n    Write a python function to find the sum of the first n odd numbers.\n    '''\n    return (n * (n + 1)) / 2\ndef sumofOdd2(n) : \n    '''\n    Write a python function to find the sum of the first n odd numbers.\n    '''\n    return n * (n + 1) / 2\ndef firstFactorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact = 1\n    for i in range(2, n + 1) : \n        fact *= i\n    return fact\ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n == 0 or n == 1) : \n        return 1\n    else : \n        return n * factorial(n - 1)\ndef factorial2(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n == 0 or n == 1) : \n        return 1\n    return n * factorial2(n - 1)\ndef firstFactorialRec(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n == 0 or n == 1) : \n        return 1\n    return n * firstFactorialRec(n - 1)\ndef factorialRec(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n == 0 or n == 1) : \n        return 1\n    return n * factorialRec(n - 1)\ndef factorialRec1(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n == 1) : \n            return s\n        return fact(n - 1, n * s)\n    return fact(n, 1)\ndef factorialRec2(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n == 1) : \n            return s\n        return fact(n - 1, n * s)\n    return fact(n, 1)\ndef firstFactorialRecursive(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n == 0 or n == 1) : \n        return 1\n    return n * firstFactorialRecursive(n - 1)\ndef firstFactorialRecursive1(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n == 0 or n == 1) : \n        return 1\n    return firstFactorialRecursive1(n - 1) * n\ndef firstFactorialRecursive2(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return 1 if (n == 0 or n == 1) else n * firstFactorialRecursive2(n - 1)\ndef firstFactorialRecursive3(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n == 0 or n == 1) : \n        return 1\n    return firstFactorialRecursive3(n - 1) * n\ndef factorialRecursive1(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return 1 if (n == 0 or n == 1) else n * factorialRecursive1(n - 1)\ndef factorialRecursive2(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return 1 if (n == 0 or n == 1) else n * factorialRecursive2(n - 1)\ndef factorialRecursive3(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return 1 if (n == 0 or n == 1) else n * factorialRecursive3(n - 1)\ndef firstFactorialRecursive4(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n == 1) : \n            return s\n        return fact(n - 1, n * s)\n    return fact(n, 1)\ndef firstFactorialRecursive5(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n == 1) : \n            return s\n        return fact(n - 1, n * s)\n    return fact(n, 1)\ndef factorialRecursive6(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n == 1) : \n            return s\n        return fact(n - 1, n * s)\n    return fact(n, 1)\ndef factorialRecursive7(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n == 1) : \n            return s\n        return fact(n - 1, n * s)\n    return fact(n, 1)\ndef firstFactorialRecursive8(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n == 1) : \n            return s\n        return fact(n - 1, n * s)\n    return fact(n, 1)\ndef firstFactorialRecursive9(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n == 1) : \n            return s\n        return fact(n - 1, n * s)\n    return fact(n, 1)\ndef firstFactorialRecursive10(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n == 1) : \n            return s\n        return fact(n - 1, n * s)\n    return fact(n, 1)\ndef firstFactorialRecursive11(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def fact(n, s) : \n        if(n == 0 or n ="
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall('[A-Za-z]+[A-Za-z]*z[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing 'ab'.\n    '''\n    words = re.findall('[A-Za-z]+[A-Za-z]*ab[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_word_case_insensitive(text):\n    '''\n    Write a function that matches a word with a 'f' in it.\n    '''\n    words = re.findall('[A-Za-z]+[A-Za-z]*f[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_end_of_line(text):\n    '''\n    Write a regex that matches the word 'world'.\n    '''\n    words = re.findall('\\w[A-Za-z]*world[A-Za-z]*\\n', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_but_not_the_word(text):\n    '''\n    Write a regex that matches the word 'world'.\n    '''\n    words = re.findall('\\w[A-Za-z]*world[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_range(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_range_and_end_of_line(text):\n    '''\n    Write a regex that matches the word 'world'.\n    '''\n    words = re.findall('\\w[A-Za-z]*world[A-Za-z]*\\n', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_and_space_range(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_and_character_range(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_negative_character_class(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_negative_character_class_range(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_and_backslash(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_and_backslash_range(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_and_different_character_ranges(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_and_different_character_ranges_range(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_and_negative_character_ranges(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_and_negative_character_ranges_range(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if len(words) > 0:\n        return True\n    else:\n        return False\ndef text_match_regex_with_character_class_and_surrounded_character_ranges(text):\n    '''\n    Write a regex that matches the word 'hello'.\n    '''\n    words = re.findall('\\w[A-Za-z]*hello[A-Za-z]*', text)\n    print(words)\n    if le"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg=re.compile(r'\\b\\w*z\\w*\\b')\n    result=reg.findall(text)\n    return result\ndef text_match_acronym(text):\n    '''\n    Write a function to find acronyms in a string.\n    An acronym is a word formed from the first letters of words in a\n    sentence.\n    '''\n    reg=re.compile(r'(\\b[A-Z]\\w{2,}\\b)')\n    result=reg.findall(text)\n    return result\ndef text_match_start_end_hyphen(text):\n    '''\n    Write a function to match a string that has a starting and ending\n    hyphen.\n    '''\n    reg=re.compile(r'^-.*-$')\n    result=reg.findall(text)\n    return result\ndef text_match_start_end_dash(text):\n    '''\n    Write a function to match a string that has a starting and ending\n    dash.\n    '''\n    reg=re.compile(r'^-.*-.*$')\n    result=reg.findall(text)\n    return result\ndef text_match_start_end_dash(text):\n    '''\n    Write a function to match a string that has a starting and ending\n    dash.\n    '''\n    reg=re.compile(r'^-.*-.*$')\n    result=reg.findall(text)\n    return result\ndef text_match_start_end_underscore(text):\n    '''\n    Write a function to match a string that has a starting and ending\n    underscore.\n    '''\n    reg=re.compile(r'^_.*_$')\n    result=reg.findall(text)\n    return result\ndef text_match_start_end_underscore(text):\n    '''\n    Write a function to match a string that has a starting and ending\n    underscore.\n    '''\n    reg=re.compile(r'^_.*_.*$')\n    result=reg.findall(text)\n    return result\ndef text_match_start_end_number(text):\n    '''\n    Write a function to match a string that has a starting and ending\n    number.\n    '''\n    reg=re.compile(r'^\\d.*\\d$')\n    result=reg.findall(text)\n    return result\ndef text_match_start_end_number(text):\n    '''\n    Write a function to match a string that has a starting and ending\n    number.\n    '''\n    reg=re.compile(r'^\\d.*\\d.*$')\n    result=reg.findall(text)\n    return result\ndef text_match_start_end_number_percent(text):\n    '''\n    Write a function to match a string that has a starting and ending\n    number or percent.\n    '''\n    reg=re.compile(r'^\\d.*\\d.*$')\n    result=reg.findall(text)\n    return result\ndef text_match_start_end_number_percent(text):\n    '''\n    Write a function to match a string that has a starting and ending\n    number or percent.\n    '''\n    reg=re.compile(r'^\\d.*\\d.*$')\n    result=reg.findall(text)\n    return result\ndef text_match_at_symbol(text):\n    '''\n    Write a function to match a string that has an @ symbol in the middle\n    of the string.\n    '''\n    reg=re.compile(r'@')\n    result=reg.findall(text)\n    return result\ndef text_match_at_symbol(text):\n    '''\n    Write a function to match a string that has an @ symbol in the middle\n    of the string.\n    '''\n    reg=re.compile(r'@')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg=re.compile(r'.*[@|#]$')\n    result=reg.findall(text)\n    return result\ndef text_match_symbol_end(text):\n    '''\n    Write a function to match a string that has a symbol at the end.\n    '''\n    reg"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('[a-z]z[a-z]', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Return True if text contains one or more word(s) that match the pattern.\n    return bool(re.search(r'\\b[a-zA-Z]*z\\b', text))\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z',text)\nprint(text_match_wordz(\"the\"))\nprint(text_match_wordz(\"Python\"))\nprint(text_match_wordz(\"the quick brown fox jumps over the lazy dog\"))\nprint(text_match_wordz(\"Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.[1]\")\n)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #your code here\n    if re.search(r'\\b[\\w]+z\\b',text):\n        return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.findall(r'\\S*z\\S*',text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #print(re.match(r'.*z.*', text))\n    #print(re.match(r'.*[a-z]z.*', text))\n    return re.match(r'.*z.*', text)\n    #return True\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z+', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # if 'z' in text:\n    #     print('True')\n    # else:\n    #     print('False')\n    \n    # pattern = re.compile('\\w*z\\w*')\n    # if pattern.match(text):\n    #     print('True')\n    # else:\n    #     print('False')\n    pattern = re.compile('(.*z.*)')\n    if pattern.match(text):\n        print('True')\n    else:\n        print('False')\n    \n    pattern = re.compile('z\\w*')\n    if pattern.match(text):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = monthnum2\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    if monthnum in month_days:\n        print(f\"The month {monthnum} has {month_days[monthnum]} days.\")\n    else:\n        print(f\"Month number {monthnum} does not exist.\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        print(\"Invalid month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month = {'01':31, '03':31, '05':31, '07':31, '08':31, '10':31, '12':31, '04':30, '06':30, '09':30, '11':30}\n    if monthnum2 in month:\n        print('Yes')\n    else:\n        print('No')\n        \ndef check_monthnumb_range(monthnum3):\n    '''\n    Write a function to check whether the given month number is between 1 and 12 or not.\n    '''\n    if monthnum3 in range(1, 13):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <=12:\n        if monthnum2 == 2:\n            print(\"Month {} is 31 days\".format(monthnum2))\n        elif monthnum2 in (1,3,5,7,8,10,12):\n            print(\"Month {} is 31 days\".format(monthnum2))\n        else:\n            print(\"Month {} is 30 days\".format(monthnum2))\n    else:\n        print(\"Month number is invalid.\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        print(f'This month contains 31 days!')\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(f'This month contains 31 days!')\n    else:\n        print(f'This month contains 30 days!')\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumbs = range(1,13)\n    for monthnumb in monthnumbs:\n        if monthnum2 == monthnumb:\n            if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n                print(\"Yes, There are 31 days in the month of\",monthnumb)\n            elif monthnumb == 2:\n                print(\"Yes, There are 28 days in the month of\",monthnumb)\n            elif monthnumb == 4 or monthnumb == 6 or monthnumb == 9 or monthnumb == 11:\n                print(\"Yes, There are 30 days in the month of\",monthnumb)\n    else:\n        print(\"Sorry, There are no months with 31 days\")\n        return\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4,6,9,11]:\n        print(\"Month having 31 days\")\n    else:\n        print(\"Month having 30 days\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return \"The month has 31 days\"\n    elif monthnum2 in [4,6,9,11]:\n        return \"The month has 30 days\"\n    else:\n        return \"The month has 28 or 29 days\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0, len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n        return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for item in stringlist:\n        reverse_list.append(item[::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [eachstring[::-1] for eachstring in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for string in range(len(stringlist)):\n        stringlist[string] = stringlist[string][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for word in stringlist:\n        word = word[::-1]\n        \n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for idx in range(0,len(stringlist)):\n        stringlist[idx] = stringlist[idx][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for word in stringlist:\n        stringlist[stringlist.index(word)] = word[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for index, string in enumerate(stringlist):\n        stringlist[index] = string[::-1]\n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_len = len(lst[0])\n    min_len = len(lst[0])\n    min_sub = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sub = lst[i]\n    return min_sub\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i!= j:\n                lst1.append(lst[i] + lst[j])\n    for i in lst1:\n        if sum(i) == 0:\n            lst2.append(i)\n    return min(lst2)\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    sub_lst = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n            sub_lst = lst[i]\n    return sub_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_list = []\n    sub_list.append(lst[0])\n    for i in range(1,len(lst)):\n        if lst[i] < sub_list[-1]:\n            sub_list.append(lst[i])\n        elif lst[i] > sub_list[-1]:\n            sub_list.clear()\n            sub_list.append(lst[i])\n    return sub_list\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # return list having minimum length\n    if len(lst) > 0:\n        min = len(lst[0])\n    else:\n        return 0\n    for sublist in lst:\n        if len(sublist) < min:\n            min = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n            index = i\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist=[]\n    sublist1=[]\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            sublist=lst[i:j]\n            sublist1.append(len(sublist))\n    return sublist1.index(min(sublist1))\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # import sys\n    # minimum = sys.maxint\n    # for i in range(len(lst)):\n    #     if len(lst[i]) < minimum:\n    #         minimum = len(lst[i])\n    #         min_list = lst[i]\n    # return min_list\n    return min(lst, key=len)\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = []\n    current_min = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < current_min:\n            current_min = len(lst[i])\n            sublist.clear()\n            sublist.append(lst[i])\n        elif len(lst[i]) == current_min:\n            sublist.append(lst[i])\n    return sublist\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2 * (l + b)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isupper() == False:\n            result += char\n        elif char == 'x':\n            result += 'u'\n        else:\n            result += 'x'\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str(str1)\n    l=[]\n    for i in range(len(str1)):\n        l.append(str1[i])\n    print(l)\n    for i in range(len(l)):\n        if l[i] in l[i+1:]:\n            l[i]=l[i].lower()\n        else:\n            continue\n    print(l)\n    for i in range(len(l)):\n        if l[i].isupper()==True:\n            l[i]=\"_\"\n    print(l)\n    for i in range(len(l)):\n        if l[i]==\"_\":\n            l[i]=\"\"\n    return ''.join(l)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(ch for ch in str1 if ch.isalpha()).lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1_list = list(str1)\n    return ''.join(char for char in str1_list if char.isupper()==False)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in str1:\n        if i.isupper():\n            str1 = str1.replace(i,'')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result_list=[]\n    for letter in str1:\n        if letter.isupper()==False:\n            result_list.append(letter)\n    print(''.join(result_list))\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #code here\n    str2=\"\"\n    for i in range(len(str1)):\n        if str1[i].isupper()==False:\n            str2+=str1[i]\n    return str2\nprint(remove_uppercase('dfasfSLKJlj'))\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] "
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x: x[0], lst)) \n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    num_upper = 0\n    for ch in str:\n        if ch.isupper():\n            num_upper += 1\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for letter in str if letter.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for x in str if x.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for ch in str:\n        if ch.isupper():\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([ch for ch in str if ch.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return [list1]\n    else:\n        list2 = []\n        for i in range(len(list1)):\n            for j in combinations_list(list1[:i] + list1[i + 1:]):\n                list2.append([list1[i]] + j)\n        return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list.all_combinations = []\n    if len(list1) <= 1:\n        combinations_list.all_combinations.append(list1)\n        return combinations_list.all_combinations\n    else:\n        for i in range(len(list1)):\n            new_list = list1[:i] + list1[i+1:]\n            combinations_list.all_combinations += combinations_list(new_list)\n    return combinations_list.all_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1)):\n            for k in range(0, len(list1)):\n                if i!= j and j!= k and k!= i:\n                    list2.append([list1[i], list1[j], list1[k]])\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return [list1]\n    all_list = []\n    for i in range(len(list1)):\n        rest_list = list1[i + 1:]\n        for sub_list in combinations_list(rest_list):\n            all_list.append([list1[i]] + sub_list)\n    return all_list\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, 2))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if(len(list1) < 2):\n        return\n    elif(len(list1) == 2):\n        return [[list1[0],list1[1]], [list1[1],list1[0]]]\n    else:\n        temp_list = []\n        for i in list1:\n            sub_list = list1.copy()\n            sub_list.remove(i)\n            temp_list += combinations_list(sub_list)\n        return temp_list\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    combinations_list = []\n    for n in range(1, len(list1)+1):\n        combinations_list.append(list(itertools.combinations(list1, n)))\n    return combinations_list\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    print('Input list:', list1)\n    if len(list1) == 1:\n        return [[list1[0]], []]\n    else:\n        rest_list = list1[1:]\n        combination_list1 = combinations_list(rest_list)\n        combination_list2 = []\n        for item in combination_list1:\n            item.append(list1[0])\n            combination_list2.append(item)\n        return combination_list2\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 1\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = i - 1\n            end = i\n    print(start, end)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_val = -sys.maxsize-1\n    sub_prod = 1\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        sub_prod = sub_prod * arr[i]\n        if arr[i] == 0 and max_val < 0:\n            max_val = 0\n            start = i + 1\n            end = i + 1\n        elif sub_prod < 0:\n            sub_prod = arr[i]\n            start = i + 1\n            end = i + 1\n        elif sub_prod > max_val:\n            max_val = sub_prod\n            start = i + 1\n            end = i + 1\n    if max_val == -sys.maxsize-1:\n        return max(arr), 0, len(arr)\n    else:\n        return max_val, start, end\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    max_so_far = 1\n    min_so_far = 1\n    max_ending_here = 1\n    for i in range(len(arr)):\n        max_ending_here = max_ending_here * arr[i]\n        max_ending_here = max(arr[i], max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = 1\n    max_product = -1\n    for i in range(len(arr)):\n        product *= arr[i]\n        if product > max_product:\n            max_product = product\n        if product == 0:\n            product = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -float('inf')\n    for i in range(len(arr)):\n        max_product = max(max_product, product(arr[i:]))\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    best = 1\n    curr = 1\n    start = 0\n    for i in range(len(arr)):\n        curr *= arr[i]\n        if curr > best:\n            best = curr\n            start = i\n        if curr < 1:\n            curr = 1\n    if len(arr) == 1:\n        return arr[0], 0, 1\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == []:\n        return None\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0]\n    max_prod_idx = 0\n    for i in range(len(arr)):\n        current_prod = arr[i]\n        if current_prod > max_prod:\n            max_prod = current_prod\n            max_prod_idx = i\n        for j in range(i + 1, len(arr)):\n            current_prod *= arr[j]\n            if current_prod > max_prod:\n                max_prod = current_prod\n                max_prod_idx = j\n    return (max_prod, max_prod_idx)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = -1\n    min_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        if max_ending_here < 0:\n            max_ending_here = arr[i]\n            start = i\n            end = i\n        elif max_ending_here > 0:\n            end = i\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(value == dict.get(n) for value in dict.values())\n    \ndef check_value2(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = dict.get(n)\n    for value in dict.values():\n        if value!= check:\n            return False\n    return True\n    \ndef common_key(dict1, dict2):\n    '''\n    Write a function to find the common key in two dictionaries.\n    '''\n    common_keys = []\n    for key, value in dict1.items():\n        if dict2.get(key):\n            common_keys.append(key)\n    return common_keys\n    \ndef common_value(dict1, dict2):\n    '''\n    Write a function to find the common key in two dictionaries.\n    '''\n    common_values = []\n    for key, value in dict1.items():\n        for key1, value1 in dict2.items():\n            if dict1.get(key) == dict2.get(key1):\n                common_values.append((key, value1))\n    return common_values\n    \ndef main():\n    dict = {1: 100, 2:200, 3:300, 4:400, 5:500, 6:600}\n    print(\"Dictionary is: \", dict)\n    print(\"is all values same? \", check_value(dict, 6))\n    print(\"is all values same? \", check_value2(dict, 6))\n    dict1 = {1: 100, 2:200, 3:300}\n    dict2 = {1: 100, 2:200, 4:400, 5:500, 6:600}\n    print(\"Common keys between dict1 and dict2: \", common_key(dict1, dict2))\n    print(\"Common values between dict1 and dict2: \", common_value(dict1, dict2))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 0:\n        return 'No value'\n    if n == 1:\n        return 'All values are same'\n    else:\n        return 'All values are not same'\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i] == n:\n            return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key in dict:\n        values.append(dict[key])\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    keys = dict.keys()\n    count = 0\n    for key in keys:\n        if dict[key] == n:\n            count += 1\n    if count == len(dict):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[n] == dict.get(n) for n in dict)\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = dict[list(dict.keys())[0]]\n    for i in dict.values():\n        if i!= all_same:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= dict[n]:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict((k, v) for k, v in dict1.items() if v)\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict_no_empty = dict1\n    dict_no_empty = {k:v for k,v in dict_no_empty.items() if v!= []}\n    return dict_no_empty\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = dict()\n    for key, val in dict1.items():\n        if val:\n            new_dict[key] = val\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if dict1[key]!= '':\n            new_dict[key] = dict1[key]\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    for key, value in dict1.items():\n        if len(value) == 0:\n            dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == {}:\n            dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == '':\n            dict1.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: val for key, val in dict1.items() if val}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return {}\n    for key, value in dict1.items():\n        if not value:\n            return {k: v for k, v in dict1.items() if v is not None}\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return -1\n    max_p = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_p = max(max_p, arr[j]*arr[i])\n    return max_p\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        inc = [1]*n\n        for i in range(1,n):\n            for j in range(i):\n                if arr[i] >= arr[j]:\n                    inc[i] = max(inc[i], inc[j]*arr[i])\n        return max(inc)\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_prod = -1\n        for i in range(len(arr)):\n            prod = 1\n            for j in range(i, len(arr)):\n                prod *= arr[j]\n                if prod > max_prod:\n                    max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #arr = [1, 2, 3, 4, 5, 6]\n    m = 1\n    start = 0\n    end = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] < arr[j]):\n                #print(arr[i]*arr[j])\n                if (arr[i]*arr[j] > m):\n                    m = arr[i]*arr[j]\n                    start = i\n                    end = j\n    return [m, start, end]\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #traverse the array \n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return arr[0]\n    \n    max_num = 0\n    #for each number in the array compare the current number to the previous two numbers and update the max\n    #append the current number to the inc list\n    inc = [0]\n    max_num = arr[0]\n    for num in arr[1:]:\n        if num > max_num:\n            inc.append(num)\n        else:\n            inc.append(max_num)\n        max_num = max(max_num, num)\n    return max_num*max(inc)"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # This is similar to the first problem where we are trying to find maximum product of a continuous subarray\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # products = [arr[0]]\n    # for x in range(1, len(arr)):\n    #     products.append(products[x-1] * arr[x])\n    \n    # return max(products)\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    prod = 1\n    max_prod = 1\n    for i in range(n):\n        prod *= arr[i]\n        if prod > max_prod:\n            max_prod = prod\n        if prod == 0:\n            prod = 1\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0 for _ in range(n)]\n    dp[0] = arr[0]\n    for i in range(1,n):\n        dp[i] = max(arr[i], arr[i]*dp[i-1])\n    max_prod = dp[n-1]\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # O(n^2)\n    max_prod = 0\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i, len(arr)):\n            prod = prod * arr[j]\n            max_prod = max(max_prod, prod)\n    return max_prod\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        if i == 0:\n            new_tup = new_tup + (test_tup[i], test_tup[i + 1])\n        elif i == len(test_tup) - 1:\n            new_tup = new_tup + (test_tup[i], test_tup[i - 1])\n        else:\n            new_tup = new_tup + (test_tup[i - 1], test_tup[i + 1])\n    return new_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    assert type(test_tup) == tuple, \"Enter a tuple\"\n    res = list()\n    for i in range(len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            res.append(test_tup[i] + test_tup[j])\n    return res\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        if i == 0:\n            new_tup = (test_tup[i], test_tup[i+1])\n        else:\n            new_tup = new_tup + (test_tup[i] + test_tup[i+1],)\n    return new_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Taken from assignment description\n    total = 0\n    for i in range(len(test_tup) - 1):\n        total += test_tup[i] + test_tup[i + 1]\n    return total\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def add_pairwise_helper(test_tup, start, end):\n        if end == len(test_tup):\n            return None\n        if end - start == 1:\n            return (test_tup[start], test_tup[end])\n        else:\n            return (test_tup[start], test_tup[end], add_pairwise_helper(test_tup, start+1, end-1))\n    return add_pairwise_helper(test_tup, 0, len(test_tup)-1)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return [(test_tup[0]+test_tup[1],test_tup[2]+test_tup[3]),(test_tup[0]+test_tup[2],test_tup[1]+test_tup[3])]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return [x + y for x, y in zip(test_tup, test_tup[1:])]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup\n    return x + y\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    l = len(test_tup)\n    return [(test_tup[i], test_tup[j]) for i in range(l) for j in range(i+1,l)]\n    \nprint(add_pairwise((1, 2, 3, 4, 5)))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = test_tup[0]+test_tup[1]\n    return sum\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #if len(arr) <= 1: \n    #    return n\n    #return (arr[0] * arr[1]) % n \n    result = 1\n    for ele in arr: \n        result = (result * ele) % n \n    return result \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the variable to store the product of the array multiplication modulo n.\n    prod = 1\n    for i in range(0, n): \n        prod = prod * (arr[i] % n)\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in arr:\n        mul = mul * i \n    return mul % n \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(0, len(arr)): \n        result = (result * arr[i]) % n \n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, len(arr)): \n        product = (product * arr[i]) % n \n    return product \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in range(n):\n        mul *= arr[i]\n    remainder = mul % n\n    print(remainder)\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = res * i % n \n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for x in arr: \n        result = (result * x) % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (max(l) - min(l) == len(l) - 1)\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return\n    if len(l) > 1:\n        diff = l[1] - l[0]\n        for i in range(2, len(l)):\n            if l[i] - l[i-1]!= diff:\n                return False\n        return True\n    return False\n    \n    "
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i+1]-l[i]==1 for i in range(len(l)-1))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l[0] + 1 == l[1] and l[1] + 1 == l[2] and l[2] + 1 == l[3] and l[3] + 1 == l[4] and l[4] + 1 == l[5]: \n        return True\n    else:\n        return False\n    return l\n    \nl = [1,2,3,4,5,6]\nprint(check_Consecutive(l))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    lst = [] \n    s = set() \n    for i in range(len(l)): \n        for j in range(i + 1, len(l)): \n            if l[i] + 1 == l[j] or l[i] - 1 == l[j]: \n                lst.append(l[i]) \n                s.add(l[i]) \n    if len(lst) == 0: \n        print(\"No consecutive numbers are present in given list\")\n    else: \n        print(\"consecutive numbers are\", lst) \n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    sorted_l = sorted(l) \n    return sorted_l[0] + 1 == sorted_l[1] and sorted_l[len(sorted_l)-1] == sorted_l[len(sorted_l)-2]\n    \ndef check_Consecutive_v2(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n    \ndef check_Consecutive_v3(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return len(set(l)) == len(l)\n    \nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]))\nprin"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    else:\n        return l[1] == l[0] + 1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (all(l[i] + 1 == l[i + 1] for i in range(len(l) - 1)))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    return l == list(range(min(l), max(l)+1))\ndef check_Digits_Sum(number):\n    '''\n    Write a Python function to check whether a given number is an Armstrong number or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]==1 or l[i]-l[i-1]==-1:\n            return True\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_set = set(test_list1).intersection(*[set(t) for t in test_list2])\n    print(result_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    unique_list1 = []\n    unique_list2 = []\n    for index, element in enumerate(test_list1):\n        if element not in unique_list1:\n            unique_list1.append(element)\n        if test_list2[index] not in unique_list2:\n            unique_list2.append(test_list2[index])\n    for element in unique_list2:\n        if element not in unique_list1:\n            unique_list1.append(element)\n    return tuple(unique_list1)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for item1 in test_list1:\n        for item2 in test_list2:\n            if item1 == item2 and item1 not in result_list:\n                result_list.append(item1)\n    return result_list\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    if len(set1) <= len(set2):\n        return tuple(set1 & set2)\n    else:\n        return tuple(set2 & set1)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1)!= len(test_list2):\n        return \"Invalid Input\"\n    s1 = set(test_list1)\n    s2 = set(test_list2)\n    intersection = s1.intersection(s2)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #solution - 1\n    #set1 = set(test_list1)\n    #set2 = set(test_list2)\n    #return list(set1.intersection(set2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for x in test_list1:\n        for y in test_list2:\n            if x[0] == y[0] and x[1] == y[1]:\n                result.append((x[0], x[1]))\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch,newch)\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch,newch)\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    \n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # print(str1,ch,newch)\n    # str1 = \"abcd123\"\n    # ch = 'd'\n    # newch = '0'\n    # print(str1)\n    # index = str1.index(ch)\n    # str1 = str1.replace(ch,newch)\n    # print(str1,index)\n    \n    str1 = \"abcd123\"\n    ch = 'd'\n    newch = '0'\n    print(str1)\n    index = str1.index(ch)\n    str1 = str1[:index] + newch + str1[index+1:]\n    print(str1)\n    \n    return \n    \nreplace_char(\"abcd123\", 'd','0')\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1) == 0 or str1.isspace():\n        return str1\n    str_len = len(str1)\n    str2 = [None]*str_len\n    \n    for i in range(str_len):\n        if str1[i] == ch:\n            str2[i] = newch\n        else:\n            str2[i] = str1[i]\n    return ''.join(str2)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str1 = str1.replace(ch,newch)\n    return new_str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()\n    # return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    # return sorted(dict1, key=dict1.get, reverse=True)\n    # return sorted(dict1, key=dict1.get, reverse=True)\n    # return sorted(dict1, key=lambda x: dict1[x], reverse=True)\n    # return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()\n    \ndef sum_of_numbers(number):\n    '''\n    Write a function which will take a list as an argument and return the sum of all numbers in the list.\n    '''\n    return sum(number)\n    \ndef sort_list_of_dictionaries(list1):\n    '''\n    Write a function to sort list of dictionaries by value.\n    '''\n    return sorted(list1, key = lambda x: x['name'])\n    \ndef maximum_of_number(number):\n    '''\n    Write a function which will return the maximum number of a given list.\n    '''\n    return max(number)\n    \ndef concat_list_of_strings(list1):\n    '''\n    Write a function which will take a list of strings as an argument and return the concatenated string.\n    '''\n    return \"\".join(list1)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    def f(x):\n        return x[1]\n    \n    dict1 = dict(sorted(dict1.items(), key=f, reverse=True))\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1],reverse=True))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict= sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    \ndef sort_counter_v3(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    \n    \ndef sort_counter_v4(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \n    \ndef sort_counter_v5(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    \n    \ndef sort_counter_v6(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    \n    \n    \ndef sort_counter_v7(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \n    \n    \ndef sort_counter_v8(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \n    \ndef sort_counter_v9(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v10(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \n    \ndef sort_counter_v11(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \n    \ndef sort_counter_v12(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v13(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v14(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v15(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v16(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v17(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v18(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v19(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v20(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v21(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v22(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v23(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v24(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v25(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v26(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v27(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v28(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v29(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v30(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_dict\n    \ndef sort_counter_v31(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse "
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    sorted_values = sorted([i for i in dict1.values()], reverse=True)\n    for value in sorted_values:\n        for key in dict1.keys():\n            if dict1[key] == value:\n                sorted_dict[key] = value\n    return sorted_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    largest = nums[0]\n    smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    return largest + smallest\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(max(nums)+min(nums))\n    return max(nums)+min(nums)\n    \ndef centered_average(nums):\n    '''\n    Write a python function to find the average of the largest and smallest value in a given array.\n    '''\n    print((max(nums)+min(nums))/2)\n    return (max(nums)+min(nums))/2\n    \ndef reverse_pair(nums):\n    '''\n    Write a python function to reverse every other number in a list (or array) of integers.\n    '''\n    for i in range(len(nums)):\n        if i%2==0:\n            nums[i]=nums[i]\n        else:\n            nums[i]=nums[i]*-1\n    return nums\n    \ndef same_values(nums):\n    '''\n    Write a python function to remove all values from a list that are not the same as the first value.\n    '''\n    while nums[0] in nums:\n        nums.remove(nums[0])\n    return nums\n    \ndef sum13(nums):\n    '''\n    Write a python function to remove all values from a list that are not the sum of any two of the previous three values.\n    '''\n    i=3\n    while i<len(nums):\n        if nums[i]!=nums[i-1]+nums[i-2]+nums[i-3]:\n            nums.remove(nums[i])\n        i+=1\n    return nums\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sorted_nums = sorted(nums)\n    return sum(sorted_nums[0], sorted_nums[-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    largest = nums[-1]\n    smallest = nums[0]\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    maxi = nums[0]\n    mini = nums[0]\n    for i in nums:\n        if i > maxi:\n            maxi = i\n        if i < mini:\n            mini = i\n    print(mini,maxi)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_of_nums = sum(nums)\n    max_num = max(nums)\n    min_num = min(nums)\n    return f\"{sum_of_nums} {max_num} {min_num}\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - min(nums) - max(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    print(string)\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = input('Enter a string')\n    if string.islower() == True:\n        print('Your given string is in lower case')\n    elif string.islower() == False:\n        print('Your given string is in upper case')\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = string.lower()\n    return lower_case\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Your code here\n    str1 = str1.split(' ')\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] not in new_str:\n            new_str += str1[i] +''\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]*', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #str1 = \"abba\"\n    #str1 = \"abBa\"\n    #str1 = \"adbB\"\n    #str1 = \"AdbB\"\n    #str1 = \"AdBb\"\n    #str1 = \"AdbB\"\n    #str1 = \"ABbB\"\n    #str1 = \"ab\"\n    #str1 = \"aabBc\"\n    #str1 = \"bb\"\n    #str1 = \"AaBbB\"\n    #str1 = \"abb\"\n    #str1 = \"aaBb\"\n    #str1 = \"aabb\"\n    #str1 = \"abbb\"\n    #str1 = \"aabb\"\n    #str1 = \"abB\"\n    #str1 = \"abB\"\n    #str1 = \"aBb\"\n    #str1 = \"ab\"\n    #str1 = \"Abb\"\n    #str1 = \"abB\"\n    #str1 = \"aab\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"bB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"AB\"\n    #str1 = \"AB\"\n    #str1 = \"aB\"\n    #str1 = \"a\"\n    #str1 = \"A\"\n    #str1 = \"AB\"\n    #str1 = \"aB\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"aB\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"aB\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"aB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"aB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"B\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #str1 = \"AB\"\n    #str1 = \"A\"\n    #str1 = \"a\"\n    #st"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in str1:\n        if i.islower():\n            str1 = str1.replace(i,\"\")\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('(?i)abc','abc',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    substrs = [re.sub('[a-z]', '', x) for x in str1]\n    return substrs\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str(str1)\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = []\n    for char in str1:\n        if char.isupper():\n            str2.append(char)\n    new_str1 = \"\".join(str2)\n    return new_str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r\"(?<=[a-z])([A-Z])\")\n    return pattern.sub(r\"\\1\", str1)\n    # return re.sub(pattern,r'\\1',str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return n[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = str(n)\n    \n    if n <= 0 :\n        raise ValueError(\"Input cannot be negative or zero.\")\n    elif x[0] == '-':\n        return first_Digit(abs(n)) * -1\n    else:\n        return int(x[0])\n    \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x = str(n)\n    \n    if n <= 0 :\n        raise ValueError(\"Input cannot be negative or zero.\")\n    elif x[-1] == '0' and len(x) > 1:\n        return last_Digit(n // 10)\n    else:\n        return int(x[-1])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n / 100\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n < 0) :\n        print(\"Error!\")\n        return\n    print(n)\n    while n >= 10 :\n        n = n // 10\n    print(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\nprint(first_Digit(81248)) \n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if type(n)!= int and type(n)!= float:\n        return \"Argument should be a number\"\n    elif type(n) == float:\n        n = str(n)\n        if n[0]!= '.':\n            return n[0]\n        elif n[0] == '.':\n            n = n.split('.')\n            return n[0][0]\n    elif type(n) == int:\n        return int(n/10**(len(str(n))-1)) % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while(n>0) :\n        a = n%10\n        n = n//10\n        return a\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n = n / 10;\n    return n\nprint(first_Digit(12345))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for x in list:\n        if x%2!=0:\n            odd_list.append(x)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    \n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #return [list[i] for i in range(len(list)) if i % 2 == 0]\n    even_list = []\n    odd_list = []\n    for i in range(len(list)):\n        if i % 2!= 0:\n            odd_list.append(list[i])\n        else:\n            even_list.append(list[i])\n    return [odd_list,even_list]\n    \n        \nprint(Split([1,2,3,4,5,6,7,8,9]))"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = [] \n    for i in list: \n        if i % 2 == 1: \n            result.append(i) \n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!= 0] \n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    for x in list:\n        if x%2 == 0:\n            pass\n        else:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l = [] \n    for x in list: \n        if x%2!= 0: \n            l.append(x) \n    return l \n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0]\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n    difference = sum_of_numbers**3 - sum_of_cubes\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = (n * (n + 1) * (n + 2)) / 6\n    sum_of_numbers = n * (n + 1) / 2\n    return sum_of_numbers**3 - sum_of_cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # base cases\n    if n==1 :\n        return n\n    if n==2 :\n        return 1\n    # recursive cases\n    return difference(n-1) + (n*n*n) - n*n - difference(n-1)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        sum_of_nums += i\n    return sum_of_nums**3 - sum_of_cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = (n*(n+1)*(2*n+1))/6\n    sum_of_nums = (n*(n+1)/2)\n    return sum_of_cubes - sum_of_nums\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print('The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers:')\n    sum_cube = 0\n    sum_natural = 0\n    for i in range(1,n+1):\n        sum_natural = sum_natural + i**3\n    for i in range(1,n+1):\n        sum_cube = sum_cube + i**3\n    difference = sum_cube - sum_natural\n    print('Difference = ', difference)\n    \ndef difference_2(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print('The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers:')\n    sum_cube = 0\n    sum_natural = 0\n    for i in range(1,n+1):\n        sum_natural = sum_natural + i**3\n    for i in range(1,n+1):\n        sum_cube = sum_cube + i**3\n    difference = sum_cube - sum_natural\n    print('Difference = ', difference)\n    \ndifference(100)\ndifference_2(100)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s1 = 0\n    s2 = 0\n    for i in range(1, n + 1):\n        s1 += i**3\n        s2 += i\n    return s1 - s2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_number = 0\n    for i in range(n+1):\n        sum_of_cubes += i*i*i\n        sum_of_natural_number += i\n    return abs(sum_of_natural_number*sum_of_natural_number*sum_of_natural_number - sum_of_cubes)\n    \n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    first_sum = 0\n    second_sum = 0\n    for i in range(1, n+1):\n        first_sum += i**3\n    for j in range(1, n+1):\n        second_sum += j**3\n    return first_sum - second_sum\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    total_sum = sum(n) ** 3\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if((A[i]^A[j])&1) :\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if(A[i] ^ A[j] % 2 == 1) : \n                c += 1\n    return c\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if((A[i] ^ A[j]) % 2!= 0) : \n                count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if ((A[i]^A[j]) & 1) == 1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # A = [3,1,5,4,6]\n    # N = len(A)\n    # a = 0\n    # for i in range(N-1) :\n    #     for j in range(i+1,N) :\n    #         if (A[i] ^ A[j]) % 2!= 0:\n    #             a += 1\n    # return a \n    # A = [3,1,5,4,6]\n    # N = len(A)\n    # a = 0\n    # for i in range(N-1) :\n    #     for j in range(i+1,N) :\n    #         if (A[i] ^ A[j]) % 2!= 0:\n    #             a += 1\n    # return a \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    #step 1: initialize the dictionary for storing the pairs\n    dict = {} \n    for i in range(N) :\n        dict[i] = [0]\n    \n    #step 2: count the number of pairs whose xor value is odd\n    for i in range(0,N-1) : \n        for j in range(i+1, N) :\n            if (A[i] ^ A[j] ) in dict :\n                dict[A[i] ^ A[j]][0] += 1\n    count = 0\n    for i in dict : \n        if dict[i][0] % 2!= 0 :\n            count += dict[i][0]//2\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) :\n        for j in range(i+1, N) :\n            if ((A[i] ^ A[j]) & 1) == 1 : \n                count = count + 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    for i, char in enumerate(string):\n        if char.isalpha():\n            if char.isupper():\n                string[i] = char.lower()\n            else:\n                string[i] = char.upper()\n    return ''.join(string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    string = [s.lower() if s.isupper() else s.upper() for s in string]\n    return ''.join(string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Make a dict of the lowercase and uppercase letters\n    upper_lower_dict = {}\n    for letter in string:\n        if letter.isalpha():\n            if letter.isupper():\n                lower_case_letter = letter.lower()\n                upper_lower_dict[lower_case_letter] = letter.upper()\n            else:\n                upper_case_letter = letter.upper()\n                upper_lower_dict[upper_case_letter] = letter.lower()\n    new_string = \"\"\n    for letter in string:\n        if letter.isalpha():\n            new_letter = upper_lower_dict.get(letter, letter)\n            new_string += new_letter\n        else:\n            new_string += letter\n    return new_string\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(c.upper() if c.islower() else c.lower() for c in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #Using List Comprehension\n    return ''.join([ch.upper() if ch.islower() else ch.lower() for ch in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i].isupper():\n            string[i] = string[i].lower()\n        else:\n            string[i] = string[i].upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for character in string:\n        if character.islower():\n            new_string += character.upper()\n        elif character.isupper():\n            new_string += character.lower()\n        else:\n            new_string += character\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(d1) - int(d2) for d1, d2 in zip(str(n1), str(n2))])\n    "
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(n1[i]) - int(n2[i])) for i in range(0, len(n1))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    while n1 or n2:\n        total += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return total\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the inputs into strings\n    s1 = str(n1)\n    s2 = str(n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(ord(i) - ord(j)) for i, j in zip(str(n1), str(n2)))\n    \ndef string_rotation_nums(s1, s2):\n    '''\n    Write a python function to check if the first string is a rotation of the second string. \n    Rotation means that if the first string is changed by a certain offset, \n    the second string will be the same.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return s2 in s1 + s1\n    \ndef string_rotation_prefix(s1, s2):\n    '''\n    Write a python function to find the smallest string that has the same prefix as a given string. \n    Return the prefix.\n    '''\n    for i in range(len(s1)):\n        if s1[i:] + s1[:i] == s2:\n            return s1[i:]\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i,j in zip(str(n1),str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = str(n1), str(n2)\n    return sum([abs(ord(n1[i]) - ord(n2[i])) for i in range(len(n1))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(sum(map(int, str(n1)))-sum(map(int, str(n2))))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum >= max_sum:\n            max_sum = curr_sum\n    \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    temp_sum = 0\n    i = 0\n    while i < size:\n        temp_sum += a[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_start = i\n            max_end = i\n        if temp_sum < 0:\n            temp_sum = 0\n        i += 1\n    i = max_start\n    while i >= 0:\n        max_sum += a[i]\n        i -= 1\n    return (max_start, max_end, max_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Approach 1: Brute Force: Time Complexity O(n^2), Space Complexity O(1)\n    max_sum = -math.inf\n    for i in range(size):\n        curr_sum = 0\n        for j in range(i, size):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_sum_start_index = 0\n    max_sum_end_index = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -100000000\n    max_start = 0\n    max_end = 0\n    for i in range(size):\n        current_sum = 0\n        for j in range(i, size):\n            current_sum += a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_start = i\n                max_end = j\n    print(max_sum)\n    print(max_start, max_end)\n    return (max_sum, max_start, max_end)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    # Get the largest sum of sublist in the given list.\n    max_sum = 0\n    current_sum = 0\n    start_index = 0\n    for i in range(size):\n        current_sum = current_sum + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    cur_sum = 0\n    start = 0\n    end = 0\n    for i in range(size):\n        cur_sum += a[i]\n        if cur_sum < 0:\n            cur_sum = 0\n            start = i+1\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n            max_start = start\n            max_end = i\n    return max_sum, max_start, max_end\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start = i\n            max_end = i\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    union.extend(list(set(test_tup1) | set(test_tup2)))\n    return tuple(sorted(union))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    union_list = list1 + list2\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list()\n    for i in test_tup1:\n        if i not in union_list:\n            union_list.append(i)\n    for i in test_tup2:\n        if i not in union_list:\n            union_list.append(i)\n    return sorted(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1).union(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    union_list = list(set(test_tup1) | set(test_tup2))\n    return sorted(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set().union(test_tup1, test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    union = test_set1.union(test_set2)\n    union = list(union)\n    union = sorted(union)\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = ()\n    for i in test_tup1:\n        if i not in test_tup2:\n            union += (i,)\n    for i in test_tup2:\n        if i not in test_tup1:\n            union += (i,)\n    return sorted(union)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuples = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            union_tuples.append(item)\n    union_tuples.extend(test_tup2)\n    union_tuples.sort()\n    return union_tuples\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    lengths = []\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        temp = 1\n        for j in range(i+1, len(lst)):\n            if lst[j] > lst[i]:\n                temp +=1\n            else:\n                break\n        max_len = max(max_len,temp)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    res = 0\n    lst_len = len(lst)\n    for i in range(lst_len):\n        for j in range(i,lst_len):\n            if len(lst[i:j+1]) > res:\n                res = len(lst[i:j+1])\n    return res\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lengths = []\n    for sublist in lst:\n        lengths.append(len(sublist))\n    return max(lengths)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_max_len = []\n    for i in lst:\n        length = len(i)\n        lst_max_len.append(length)\n    return max(lst_max_len)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # res = 0\n    # for x in lst:\n    #     if res < len(x):\n    #         res = len(x)\n    # return res\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    def Find_Max_Length(lst):\n        maxlength = 0\n        lstlen = len(lst)\n        for i in range(0, lstlen):\n            for j in range(i, lstlen):\n                if len(lst[i:j+1]) > maxlength:\n                    maxlength = len(lst[i:j+1])\n        return maxlength\n    return Find_Max_Length(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length = 0\n    for i in lst:\n        if longest_length < len(i):\n            longest_length = len(i)\n    return longest_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublst in lst:\n        if len(sublst) > max_length:\n            max_length = len(sublst)\n    return max_length\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    list=re.findall('\"(.*)\"', text)\n    return list\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.search(\"(.*)\\'(.*)\\'\", text)\n    if result:\n        return result.groups()\n    else:\n        print('No values found')\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    # write regex code here!\n    \n    return value\n    # Example: if text is \"\\\"name\\\": \\\"Avery\\\"\", your function should return [\"name\", \"Avery\"].\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\"(.*?)\"', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #return [x.strip().lower() for x in text.split() if re.match(r'^[A-Za-z0-9_-]+$', x)]\n    #solution 2\n    match = re.findall(r'\\s*\\\"[^\\\"]*\\\"',text)\n    return match\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\\\"(.+?)\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\\\".*\\\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if type(text) is not str:\n        print('Error')\n        return\n    else:\n        regex = re.compile(r\"\\\".*\\\"\")\n        matches = regex.findall(text)\n        matches = [match.replace('\"', '') for match in matches]\n        return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search('\\\".+\\\"', text)\n    if match:\n        value = match.group()\n        value = value.replace('\"', '')\n    else:\n        value = None\n    return value\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    total = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if(arr[i]!=arr[j]):\n                total = total+1\n    return total\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]!= arr[j]):\n                sum +=1\n    return sum\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    def countUnorderedPairs(arr, n): \n        '''\n        Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n        '''\n        count = 0\n        for i in range(n): \n            for j in range(i + 1, n): \n                if (arr[i]!= arr[j]): \n                    count += 1\n        return count \n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    import itertools\n    output=0\n    for i in itertools.combinations(arr,2):\n        if (i[0]!=i[1]):\n            output+=1\n    return output\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0, n): \n        for j in range(0, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    x = [arr[i] - arr[j] for i in range(n) for j in range(i+1,n)]\n    return x.count(0)\nprint(count_Pairs([5,8,10,12,14],5))"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\ndef main():\n    '''\n    Write a python function to solve this question given below:\n    Write a python function to calculate factorial of a given number.\n    '''\n    number=int(input(\"Enter a number\"))\n    factorial=1\n    if number<0:\n        print(\"factorial cannot be found of negative number\")\n    elif number==0:\n        print(\"factorial of 0 is 1\")\n    else:\n        for i in range(1,number+1):\n            factorial=factorial*i\n        print(\"factorial of {} is {}\".format(number,factorial))\ndef main2():\n    '''\n    Write a python program to display a user entered name followed by Good Afternoon using input function.\n    '''\n    name=input(\"enter your name:\")\n    print(name,\"good afternoon\")\ndef main3():\n    '''\n    Write a python program to display the sum of two entered numbers and their average using input function.\n    '''\n    num1=int(input(\"enter num1:\"))\n    num2=int(input(\"enter num2:\"))\n    sum=num1+num2\n    avg=sum/2\n    print(\"sum of two nums is:\",sum)\n    print(\"average of two nums is:\",avg)\ndef main4():\n    '''\n    Write a python program to check a number is even or odd.\n    '''\n    number=int(input(\"enter a number\"))\n    if number%2==0:\n        print(\"{} is even\".format(number))\n    else:\n        print(\"{} is odd\".format(number))\ndef main5():\n    '''\n    Write a python program to accept a file name from the user and display the extension of the file.\n    '''\n    file=input(\"enter file name:\")\n    file_name,ext=file.split('.')\n    print(\"file extension is:\",ext)\ndef main6():\n    '''\n    Write a python program to accept a file name from the user and display the extension of the file.\n    '''\n    file=input(\"enter file name:\")\n    file_name,ext=file.split('.')\n    print(\"file extension is:\",ext)\n    if ext==\"py\":\n        print(\"python files\")\n    elif ext==\"cpp\":\n        print(\"c++ files\")\n    elif ext==\"java\":\n        print(\"java files\")\n    else:\n        print(\"no extension\")\ndef main7():\n    '''\n    Write a python program to accept a file name from the user and display the extension of the file.\n    '''\n    file=input(\"enter file name:\")\n    file_name,ext=file.split('.')\n    print(\"file extension is:\",ext)\n    if ext==\"py\":\n        print(\"python files\")\n    elif ext==\"cpp\":\n        print(\"c++ files\")\n    elif ext==\"java\":\n        print(\"java files\")\n    else:\n        print(\"no extension\")\ndef main8():\n    '''\n    Write a python program to check whether a file exists or not.\n    '''\n    try:\n        file=input(\"enter file name:\")\n        if(file.isalpha()):\n            raise Exception(\"file name should not contain alphabets\")\n        file_name,ext=file.split('.')\n        if(file_name.isalpha()):\n            raise Exception(\"file name should not contain alphabets\")\n        with open(file,'r') as f:\n            print(f.read())\n    except FileNotFoundError:\n        print(\"file does not exist\")\n    except Exception as e:\n        print(\"error:\",e)\ndef main9():\n    '''\n    Write a python program to find the sum of digits of a given number.\n    '''\n    num=input(\"enter a number:\")\n    sum=0\n    for i in num:\n        sum+=int(i)\n    print(\"the sum is:\",sum)\ndef main10():\n    '''\n    Write a python program to count the number of digits in a number.\n    '''\n    num=input(\"enter a number:\")\n    count=0\n    for i in num:\n        count+=1\n    print(\"the number of digits are:\",count)\ndef main11():\n    '''\n    Write a python program to count the number of digits in a number.\n    '''\n    num=input(\"enter a number:\")\n    count=0\n    for i in num:\n        count+=1\n    print(\"the number of digits are:\",count)\ndef main12():\n    '''\n    Write a python program to check whether a number is positive or negative using input.\n    '''\n    num=int(input(\"enter a number:\"))\n    if(num>0):\n        print(\"{} is positive\".format(num))\n    else:\n        print(\"{} is negative\".format(num))\ndef main13():\n    '''\n    Write a python program to check whether a number is prime or not.\n    '''\n    num=int(input(\"enter a number:\"))\n    if(num>1):\n        for i in range(2,num):\n            if(num%i==0):\n                print(\"{} is not a prime number\".format(num))\n                break\n        else:\n            print(\"{} is a prime number\".format(num))\n    else:\n        print(\"{} is not a prime number\".format(num))\ndef main14():\n    '''\n    Write a python program to check whether a number is even or odd.\n    '''\n    num=int(input(\"enter a number:\"))\n    if(num%2==0):\n        print(\"{} is even\".format(num))\n    else:\n        print(\"{} is odd\".format(num))\ndef main15():\n    '''\n    Write a python program to check whether a number is palindrome or not.\n    '''\n    num=int(input(\"enter a number:\"))\n    if(num==int(str(num)[::-1])):\n        print(\"{} is a palindrome number\".format(num))\n    else:\n        print(\"{} is not a palindrome number\".format(num))\ndef main16():\n    '''\n    Write a python program to check whether a number is a perfect number or not.\n    '''\n    num=int(input(\"enter a number:\"))\n    sum=0\n    for i in range(1,num):\n        if(num%i==0):\n            sum+=i\n    if(sum==num):\n        print(\"{} is a perfect number\".format(num))\n    else:\n        print(\"{} is not a perfect number\".format(num))\ndef main17():\n    '''\n    Write a python program to check whether a number is a strong number.\n    '''\n    num=int(input(\"enter a number:\"))\n    sum=0\n    temp=num\n    while(temp>0):\n        digit=temp%10\n        sum+=digit**3\n        temp=temp//10\n    if(sum==num):\n        print(\"{} is a strong number\".format(num))\n    else:\n        print(\"{} is not a strong number\".format(num))\ndef main18():\n    '''\n    Write a python program to find the sum of digits in an integer.\n    '''\n    num=int(input(\"enter a number:\"))\n    sum=0\n    while(num>0):\n        digit=num%10\n        sum+=digit\n        num=num//10\n    print(\"the sum of digits is:\",sum)\ndef main19():\n    '''\n    Write a python program to find the sum of digits in an integer.\n    '''\n    num=int(input(\"enter a number:\"))\n    sum=0\n    while(num>0):\n        digit=num%10\n        sum+=digit\n        num=num//10\n    print(\"the sum of digits is:\",sum)\ndef main20():\n    '''\n    Write a python program to find the sum of digits in an integer.\n    '''\n    num=int(input(\"enter a number:\"))\n    sum=0\n    while(num>0):\n        digit=num%10\n        sum+=digit\n        num=num//10\n    print(\"the sum of digits is:\",sum)\ndef main21():\n    '''\n    Write a python program to find the sum of digits in an integer.\n    '"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return 0 if n == 0 else n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(int(n/10))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(n % 10) + sum_digits(int(n/10))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(n) for n in str(n)])\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1==sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    return is_sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    l = len(list1)\n    for i in range(0,l-1):\n        if list1[i] >= list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #list1.sort()\n    #return list1 == sorted(list1)\n    #return sorted(list1) == list1\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # TODO: Check whether list1 is sorted.\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    if len(list1) == 1:\n        return True\n    if len(list1) > 1:\n        for i in range(0,len(list1)-1):\n            if list1[i] >= list1[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if (list1 == sorted(list1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n    \ndef populate_dictionary(name, age):\n    '''\n    Write a function to populate a dictionary with name and age\n    '''\n    return {'name':name, 'age':age}\n    \ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into one.\n    '''\n    return {**dict1, **dict2}\n    \ndef delete_dictionary_element(dict1, key):\n    '''\n    Write a function to delete an element from a dictionary\n    '''\n    dict1.pop(key)\n    return dict1\n    \ndef add_element_to_dictionary(dict1, key, value):\n    '''\n    Write a function to add a new element to a dictionary.\n    '''\n    dict1[key] = value\n    return dict1\n    \ndef get_value_from_dictionary(dict1, key):\n    '''\n    Write a function to return the value of a dictionary element\n    '''\n    return dict1[key]\n    \ndef is_key_in_dictionary(dict1, key):\n    '''\n    Write a function to determine whether a key is in a dictionary\n    '''\n    return key in dict1\n    \ndef join_dictionaries(dict1, dict2):\n    '''\n    Write a function to join two dictionaries\n    '''\n    return dict(dict1, **dict2)\n    \ndef length_dictionary(dict1):\n    '''\n    Write a function to return the length of a dictionary\n    '''\n    return len(dict1)\n    \ndef get_key_from_dictionary(dict1):\n    '''\n    Write a function to return all the keys of a dictionary\n    '''\n    return list(dict1.keys())\n    \ndef get_value_from_dictionary(dict1):\n    '''\n    Write a function to return all the values of a dictionary\n    '''\n    return list(dict1.values())\n    \ndef print_dictionary(dict1):\n    '''\n    Write a function to print all the keys and values of a dictionary\n    '''\n    for key,value in dict1.items():\n        print(key, 'is', value)\n    \ndef sort_dictionary(dict1):\n    '''\n    Write a function to sort a dictionary by its values in ascending order\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1])\n    \ndef get_count_of_values_from_dictionary(dict1, value):\n    '''\n    Write a function to count how many times a value appears in a dictionary\n    '''\n    return dict1.values().count(value)\n    \ndef remove_duplicates_from_dictionary(dict1):\n    '''\n    Write a function to remove duplicates from a dictionary\n    '''\n    return {k: v for k, v in dict1.items() if v not in dict1.values()}\n    \ndef remove_key_from_dictionary(dict1, key):\n    '''\n    Write a function to remove a key from a dictionary\n    '''\n    dict1.pop(key)\n    return dict1\n    \ndef remove_n_items_from_dictionary(dict1, n):\n    '''\n    Write a function to remove the first n items from a dictionary\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if n == 0:\n            break\n        new_dict[key] = value\n        n -= 1\n    return new_dict\n    \ndef get_all_keys_in_all_values(dict1):\n    '''\n    Write a function to get all the keys that are present in all the values of a dictionary\n    '''\n    for key,value in dict1.items():\n        return list(set.intersection(*map(set, value)))\n    \ndef get_all_keys_in_all_values_and_length_greater_than(dict1, n):\n    '''\n    Write a function to get all the keys that are present in all the values of a dictionary and are greater than n\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if n == 0:\n            break\n        new_dict[key] = value\n        n -= 1\n    return list(set.intersection(*map(set, new_dict.values())))\n    \ndef get_all_keys_with_n_or_more_value(dict1):\n    '''\n    Write a function to get all the keys that have more than 1 value from a dictionary\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if len(value) >= 1:\n            new_dict[key] = value\n    return list(new_dict.keys())\n    \ndef get_all_values_with_n_or_more_value(dict1):\n    '''\n    Write a function to get all the values that have more than 1 value from a dictionary\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if len(value) >= 1:\n            new_dict[key] = value\n    return list(new_dict.values())\n    \ndef get_all_keys_with_n_or_more_value_and_less_than_value(dict1, n):\n    '''\n    Write a function to get all the keys that have more than 1 value from a dictionary and value is less than n\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if len(value) >= n:\n            new_dict[key] = value\n    return list(new_dict.keys())\n    \ndef get_all_keys_with_value_in_any_order(dict1):\n    '''\n    Write a function to get all the keys that have any value in any order from a dictionary\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        new_dict[key] = value\n    return list(new_dict.keys())\n    \ndef get_all_keys_with_value_not_in_any_order(dict1):\n    '''\n    Write a function to get all the keys that have all the values not in any order from a dictionary\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        new_dict[key] = value\n    return list(new_dict.keys())\n    \ndef get_all_keys_with_value_in_any_order_but_last(dict1):\n    '''\n    Write a function to get all the keys that have any value in any order from a dictionary except the last one\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if len(value) > 1:\n            new_dict[key] = value\n    return list(new_dict.keys())\n    \ndef get_all_keys_with_value_in_any_order_except_last_three(dict1):\n    '''\n    Write a function to get all the keys that have any value in any order from a dictionary except the last three\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if len(value) > 3:\n            new_dict[key] = value\n    return list(new_dict.keys())\n    \ndef get_all_keys_with_value_that_are_not_in_any_other_value(dict1):\n    '''\n    Write a function to get all the keys that have all the values not in any other value from a dictionary\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if len(value) == 1:\n            new_dict[key] = value\n    return list(new_dict.keys())\n    \ndef get_all_keys_with_value_that_are_not_in_any_other_value_and_last_three_values(dict1):\n    '''\n    Write a function to get all the keys that have all the values not in any other value from a dictionary and the last three values\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if len(value) == 1 and len(value) < le"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    output = []\n    for i in range(length):\n        output.append({})\n    return output\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length <= 0:\n        return []\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    new_list = []\n    for i in range(length):\n        new_list.append({})\n    return new_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = [dict() for i in range(length)]\n    print(empty_list)\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == 0:\n        return []\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n    # return [{}] * length\n    \ndef assert_dict_keys_equal(dict1, dict2, keys):\n    '''\n    Write a function to check whether two dictionaries have the same keys.\n    '''\n    return all([key in dict1 and dict1[key] == dict2[key] for key in keys])\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list=[]\n    for elem in list1:\n        sub_list=sorted(elem)\n        new_list.append(sub_list)\n    print(new_list)\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(sorted(sublist, key=str.lower) for sublist in list1)\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(sorted(i))\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1 = [['D', 'B', 'E', 'C'], ['F', 'A', 'G', 'H'], ['J', 'K', 'I', 'L']]\n    result = [[sorted(word) for word in sublist] for sublist in list1]\n    print(result)\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n    \ndef concatenate_list_of_lists(list_of_lists):\n    '''\n    Write a function that concatenates the lists of integers of a given list of lists.\n    '''\n    concat_list = []\n    for list in list_of_lists:\n        for item in list:\n            concat_list.append(item)\n    return concat_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list_of_strings in list1:\n        list_of_strings.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n    \nprint(sort_sublists([]))\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h'], ['i', 'j'], ['k']]))\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list_item in list1:\n        list_item.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key = lambda x:x[0])\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_with_duplicates = []\n    for i in nums:\n        for j in i:\n            nums_with_duplicates.append(j)\n    nums_without_duplicates = list(dict.fromkeys(nums_with_duplicates))\n    return nums_without_duplicates\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Cleanup\n    if not nums:\n        return []\n    # Output\n    seen = set()\n    for item in nums:\n        for num in item:\n            if num not in seen:\n                seen.add(num)\n    return [list(seen)]\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_list = []\n    for i in nums:\n        for j in i:\n            num_list.append(j)\n    num_list = set(num_list)\n    return num_list\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = list(set(nums))\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set([x for x in nums if nums.count(x)==1]))\n    \nprint(two_unique_nums([5,5,5,5,8,8,8,8,8])) # [5,8]\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dupes = []\n    for num in nums:\n        if num not in dupes:\n            dupes.append(num)\n    return dupes\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return [list(set(nums)) for nums in zip(*nums)]\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_list = list(dict.fromkeys(nums))\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in nums:\n        if len(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    unique_numbers = set(list_data)\n    for element in unique_numbers:\n        product *= element\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce((lambda x, y: x * y), list(set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    unique_list.sort()\n    product = 1\n    for i in unique_list:\n        product = product * i\n    print(\"Unique List:\",unique_list)\n    print(\"Product:\",product)\n    \ndef unique_product2(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product = product * i\n    return product\n    \ndef unique_product3(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y:x*y,list(set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return 1 if len(list_data) == 1 else list_data[0]*unique_product(list_data[1:])\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 1, 3, 6, 3, 1, 3, 6, 7, 5]\n    print('unique numbers in the list:', list_data)\n    \n    list_data = set(list_data)\n    print('unique numbers:', list_data)\n    \n    product = 1\n    for i in list_data:\n        product *= i\n    \n    print('product of unique numbers:', product)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = set(list_data)\n    product = 1\n    for i in unique:\n        product = product * i\n    print(product)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_of_unique_number = 1\n    for each_item in list_data:\n        if list_data.count(each_item) == 1:\n            product_of_unique_number = product_of_unique_number * each_item\n    return product_of_unique_number\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    print('{} unique number in the list : {}'.format(len(list_data), set(list_data)))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    print('Product of the unique number in the list : {}'.format(product))\n    \n    list_data = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\n    product = 1\n    for i in se"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(operator.mul, list(set(list_data)), 1)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for data in list_data:\n        if data not in unique_list:\n            unique_list.append(data)\n    print(unique_list)\n    product = 1\n    for data in unique_list:\n        product *= data\n    print(product)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * (r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA=2*3.14*r*h\n    return SA\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    PI = 3.14159265359\n    SA = 2 * PI * r * (r + h)\n    return SA\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2) + 2*3.14*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.1415926535897931\n    return pi*(r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2 * math.pi * (r**2) + 2 * math.pi * r * h\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA = (2*3.14*r*h) + (2*3.14*(r**2))\n    return SA\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    \n    for i in range(0, len(B)):\n        if B[i] == A[0]:\n            j = 1\n            while j < len(A):\n                if B[i+j]!= A[j]:\n                    break\n                j += 1\n            if j == len(A):\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A_Len=len(A)\n    B_Len=len(B)\n    for i in range(A_Len):\n        flag=1\n        for j in range(B_Len):\n            if A[i]==B[j]:\n                flag=0\n                break\n        if flag==1:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # ListA is sublist of ListB if ListA and ListB have the same length and ListA is a permutation of ListB.\n    # so to check whether it is a permutation we sort the list and then compare the sorted list with the original list.\n    # And we just check whether the sorted list is equal or not.\n    # time complexity of this solution is O(n^2)\n    # we can improve the time complexity to O(n) by using hash map or some other data structure.\n    sorted_A = sorted(A)\n    if sorted_A == B:\n        print(f\"{A} is a sublist of {B}\")\n        return True\n    else:\n        print(f\"{A} is not a sublist of {B}\")\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        for i in range(0,len(B)):\n            if A[i] == B[i]:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A1=set(A)\n    B1=set(B)\n    return True if A1.issubset(B1) else False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    list2 = list(B)\n    #print(\"list2\",list2)\n    for sublist in A:\n        if sublist == list2:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    if len(B)>len(A):\n        return 0\n    else:\n        for i in range(len(A)):\n            if A[i]==B[i]:\n                flag=flag+1\n        if flag==len(A):\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    #Set the minimum and maximum index for the sublist.\n    start = 0\n    end = len(B) - 1\n    \n    #Checks whether the sublist is present in the list B.\n    while start <= end:\n        \n        #Checks whether the sublist is present in the list B.\n        if A[start:end+1] == B[start:end+1]:\n            return True\n            \n        #Checks whether the sublist is present in the list B.\n        if A[start] == B[start]:\n            start += 1\n            \n        #Checks whether the sublist is present in the list B.\n        if A[end] == B[end]:\n            end -= 1\n        else:\n            return False\n    \ndef bubble_sort(arr,n):\n    '''\n    Write a python function to sort an array by bubble sort.\n    '''\n    \n    #Checks whether the array is sorted or not.\n    is_sorted = False\n    \n    #Calculates the number of passes to be made.\n    passes = 0\n    while is_sorted is False:\n        is_sorted = True\n        \n        #Passes through the array.\n        for i in range(0,n-passes-1):\n            if arr[i] > arr[i+1]:\n                temp = arr[i+1]\n                arr[i+1] = arr[i]\n                arr[i] = temp\n                is_sorted = False\n        passes += 1\n        \ndef selection_sort(arr,n):\n    '''\n    Write a python function to sort an array by selection sort.\n    '''\n    \n    #Calculates the number of passes to be made.\n    passes = 0\n    \n    #Passes through the array.\n    for i in range(0,n-passes-1):\n        min_index = i\n        \n        #Finds the index of the minimum element.\n        for j in range(i+1,n-passes):\n            if arr[j] < arr[min_index]:\n                min_index = j\n                \n        #Swaps the minimum element with the element at the ith index.\n        if min_index!= i:\n            temp = arr[i]\n            arr[i] = arr[min_index]\n            arr[min_index] = temp\n        passes += 1\n        \ndef insertion_sort(arr,n):\n    '''\n    Write a python function to sort an array by insertion sort.\n    '''\n    \n    #Calculates the number of passes to be made.\n    passes = 0\n    \n    #Passes through the array.\n    for i in range(0,n-passes-1):\n        key = arr[i+1]\n        j = i\n        \n        #Swaps the element at the ith index with the element on the right if the element at the ith index is greater than the element at the jth index.\n        while j>=0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n        passes += 1\n    \ndef merge_sort(arr,n):\n    '''\n    Write a python function to sort an array by merge sort.\n    '''\n    \n    #Calculates the number of passes to be made.\n    passes = 0\n    \n    #Calculates the size of the subarrays to be divided further.\n    size = n//2\n    \n    #Divides the array into 2 subarrays.\n    left = arr[0:size]\n    right = arr[size:]\n    \n    #Recursive call for the subarrays.\n    merge_sort(left,size)\n    merge_sort(right,n-size)\n    \n    #Merges the two subarrays to form a sorted array.\n    merge(arr,left,right,size,n)\n    \ndef merge(arr,left,right,size,n):\n    '''\n    Write a python function to merge the 2 sorted subarrays.\n    '''\n    \n    #Sorts the left subarray.\n    i = 0\n    j = 0\n    k = 0\n    \n    #Merges the two subarrays until one is exhausted.\n    while i < size and j < n-size:\n        if left[i] < right[j]:\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    \n    #Adds the remaining elements of the unsorted subarray to the end of the sorted subarray.\n    if i == size:\n        while j < n-size:\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    else:\n        while i < size:\n            arr[k] = left[i]\n            i += 1\n            k += 1\n    \ndef partition(arr,low,high):\n    '''\n    Write a python function to partition the array.\n    '''\n    \n    #Sets the pivot element as the first element.\n    pivot = arr[low]\n    i = low\n    j = high\n    \n    #Swaps the pivot element with the element at the index i.\n    while i < j:\n        while arr[j] >= pivot and j >= 0:\n            j -= 1\n        \n        if j < i:\n            break\n        else:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n        \n    #Swaps the pivot element with the element at the index i.\n    if j!= i:\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n    \n    return j\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = False\n    l = len(A)\n    for i in range(0,len(B)):\n        if A[0] == B[i]:\n            flag = True\n            if A == B[i:i+l]:\n                return True\n    return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): return False\n    if B == A: return True\n    if len(A) == len(B):\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n    else:\n        for i in range(len(B)):\n            if B[i] not in A:\n                return False\n        return True\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    i = 0\n    while i < n: \n        factorial = factorial * (i+1) \n        i = i+1\n    return factorial%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def get_factorial(n):\n        '''\n        find factorial of a given number\n        '''\n        return 1 if n==1 or n==0 else n*get_factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n + 1): \n        fact = fact * i \n    print(\"The factorial of\",n,\"is:\",fact)\n    l = list(str(fact))\n    print(l)\n    return l[len(l)-1]\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    print(n)\n    return 0\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # method 1\n    # if n==1 or n==0:\n    #     return 1\n    # else:\n    #     return (n-1)*last_Digit_Factorial(n-1)\n    \n    # method 2\n    # if n==1 or n==0:\n    #     return 1\n    # else:\n    #     return n % 10 * last_Digit_Factorial(n//10)\n    \n    # method 3\n    # if n==1 or n==0:\n    #     return 1\n    # else:\n    #     last_digit = n % 10\n    #     return last_digit * last_Digit_Factorial(n//10)\n    \n    # method 4\n    # if n==1 or n==0:\n    #     return 1\n    # else:\n    #     return last_Digit_Factorial(n%10) * last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = n % 10\n    if last_digit == 0:\n        return last_digit\n    return last_digit*factorial(last_digit-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n>=0):\n        factorial = 1\n        for i in range(1,n+1):\n            factorial = factorial * i\n        factorial = str(factorial)\n        last_digit = factorial[len(factorial)-1]\n    else:\n        last_digit = \"Factorial of a negative number is not possible\"\n    return last_digit\n    \ndef first_Factorial(n):\n    '''\n    Write a python function to find the first digit in factorial of a given number.\n    '''\n    if(n>=0):\n        factorial = 1\n        for i in range(1,n+1):\n            factorial = factorial * i\n        factorial = str(factorial)\n        first_digit = factorial[0]\n    else:\n        first_digit = \"Factorial of a negative number is not possible\"\n    return first_digit\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to find sum of digits in a given number.\n    '''\n    if(n>=0):\n        sum = 0\n        for i in str(n):\n            sum = sum + int(i)\n    else:\n        sum = \"Sum of digits in a negative number is not possible\"\n    return sum\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return len(str(n))\n    "
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact=fact*i\n    return str(fact)[-1]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = []\n    i = 0\n    while i < len(list1):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n        i += 1\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for t in zip(list1,list2,list3) for x in t]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    # Create an empty list for the results\n    result = []\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = []\n    for i in range(0,len(list1)):\n        output.append(list1[i])\n        output.append(list2[i])\n        output.append(list3[i])\n    return output\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise Exception('Lists need to be the same length')\n    return [x for tup in zip(list1, list2, list3) for x in tup]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    result = []\n    while x < len(list1) and y < len(list2) and z < len(list3):\n        result.append(list1[x])\n        result.append(list2[y])\n        result.append(list3[z])\n        x += 1\n        y += 1\n        z += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    n = len(list1)\n    interleaved = [list1[i] for i in range(n)]\n    interleaved += [list2[i] for i in range(n)]\n    interleaved += [list3[i] for i in range(n)]\n    return interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [val1 for pair in zip(list1,list2,list3) for val1 in pair]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!=len(list2) or len(list1)!=len(list3):\n        return \"Not all lists have the same length, so can't interleave\"\n    return [a for t in zip(list1,list2,list3) for a in t]\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # use for loop\n    dissimilar_tups = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup1!= tup2:\n            dissimilar_tups.append(tup1)\n            dissimilar_tups.append(tup2)\n    return dissimilar_tups\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            dissimilar.append(j)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    if test_tup1 == test_tup2:\n        return None\n    else:\n        dissimilar_ele = []\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                dissimilar_ele.append(test_tup1[i])\n                dissimilar_ele.append(test_tup2[i])\n        return dissimilar_ele\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #find difference in two tuples and compare it with the length of the tuples\n    \n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    return set(test_tup1).difference(test_tup2).union(set(test_tup2).difference(test_tup1))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # (1, 2, 3, 4, 5, 6)\n    # (3, 4, 5, 6, 7, 8)\n    # dissimilar elements are: 1, 2\n    # return the dissimilar elements in a tuple\n    # return ()\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = [10, 20, 30, 40, 50]\n    test_tup2 = (10, 20, 30, 40, 50)\n    dissimilar_elements = []\n    for x, y in zip(test_tup1, test_tup2):\n        if x!= y:\n            dissimilar_elements.append(y)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples of unequal length\"\n    else:\n        dissim_dict = {}\n        for i, e1 in enumerate(test_tup1):\n            if e1!= test_tup2[i]:\n                dissim_dict[i] = e1\n    return dissim_dict\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    #Method 1:\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n            dissimilar.append(test_tup2[i])\n    return dissimilar\n    '''\n    \n    #Method 2:\n    return [a for a in test_tup1 + test_tup2 if test_tup1.count(a)!= test_tup2.count(a)]\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # loop through the nested tuple \n    # check the even elements \n    # if even append to a new list \n    new_list = []\n    for ele in test_tuple: \n        if(isinstance(ele, tuple)): \n            if(even_fnc(ele)): \n                new_list.append(ele)\n        elif(isinstance(ele, list)): \n            for sub_ele in ele: \n                if(isinstance(sub_ele, tuple)): \n                    if(even_fnc(sub_ele)): \n                        new_list.append(sub_ele)\n    return new_list\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for ele in test_tuple:\n        if type(ele) == tuple:\n            new_tuple = new_tuple + (even_fnc(ele),)\n        else:\n            new_tuple = new_tuple + (ele,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        test_list = list(test_tuple)\n        even_list = []\n        for x in test_list:\n            if even_fnc(x):\n                even_list.append(x)\n        return tuple(even_list)\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(even_fnc(elem) if not isinstance(elem, tuple) else even_ele(elem, even_fnc) for elem in test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a list of all the elements\n    li = [x for x in test_tuple]\n    # If the list contains an uneven element, remove it\n    if len(li) > 0:\n        if li[0] % 2!= 0:\n            return even_fnc(test_tuple[1:])\n        else:\n            return test_tuple\n    # If the list is empty, return an empty list\n    else:\n        return []\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    lst = []\n    for i in test_tuple:\n        if isinstance(i, tuple) and even_fnc(i):\n            lst += even_ele(i, even_fnc)\n        elif isinstance(i, tuple):\n            lst += even_ele(i, even_fnc)\n        else:\n            lst.append(i)\n    return tuple(lst)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = ()\n    for item in test_tuple:\n        if even_fnc(item):\n            even_tuple += (item, )\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #even_fnc = lambda x: x[0] % 2 == 0\n    #return [ ele for ele in test_tuple if even_fnc(ele) ]\n    return [ele for ele in test_tuple if ele[0] % 2 == 0]\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [i for i in test_tuple if even_fnc(i)]\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b*s)+(b*s))*2\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = pow(b,2) * (s/3)\n    return s\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (1/2)*b*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 2*(b**2) \n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return round((b*s)*0.5,2)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b*b)*s*1.5)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def rectangle_Area(a):\n        rectangle_surface_area = a * 4\n        return rectangle_surface_area\n    def trapezoid_Area(c,d):\n        trapezoid_surface_area = 0.5 * c * (d + c)\n        return trapezoid_surface_area\n    def square_Area(f):\n        square_surface_area = f ** 2\n        return square_surface_area\n    \n    \n    if s % 2 == 0:\n        print(\"surface area of the square pyramid is \" + str(square_Area(b) + rectangle_Area(s)))\n    else:\n        print(\"surface area of the square pyramid is \" + str(square_Area(b) + trapezoid_Area(b, s)))\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s/2\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def sa(b,h):\n        return (1/2)*b*h\n    return sa(b,h)\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict1 = {1:1, 2:2, 3:3}\n    if len(dict1.keys()) == 0:\n        return True\n    else:\n        return False\nprint(my_dict(dict1))\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict1 = {1:3,2:4,3:5}\n    if dict1:\n        return \"dict is not empty\"\n    else:\n        return \"dict is empty\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        print('The dictionary is empty')\n    else:\n        print('The dictionary is not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return True if len(dict1) == 0 else False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return \"Enter a positive number\"\n    if num == 0:\n        return 1\n    a = 1\n    b = 1\n    for i in range(1, num + 1):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    if num == 0 or num == 1:\n        return 1\n    return catalan_number(num - 1) * (4 * num - 2) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_dict = {0:1, 1:1}\n    def recursive_catalan(num, catalan_dict):\n        if num in catalan_dict:\n            return catalan_dict[num]\n        catalan_dict[num] = ((4 * num - 2) / 3) * catalan_dict[num - 1] + catalan_dict[num - 2]\n        return catalan_dict[num]\n    return recursive_catalan(num, catalan_dict)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = 1\n    for i in range(num):\n        res = res * (2*i + 1) / (i+1)\n    return int(res)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # catalan numbers are binomial coefficients.\n    # i.e catalan(n) = C(2n, n)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        a = catalan_number(num - 2)\n        b = catalan_number(num - 1)\n        return (2 * num - 1) * a // b\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        res = []\n        for i in range(num + 1):\n            res.append(0)\n        res[0] = res[1] = 1\n        for i in range(2, num + 1):\n            for j in range(i):\n                res[i] += res[j] * res[i - j - 1]\n        return res[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    if n <= 1:\n        return 1\n    cat = [0] * (n + 1)\n    cat[0] = 1\n    cat[1] = 1\n    for i in range(2, n + 1):\n        for j in range(0, i):\n            cat[i] += cat[j] * cat[i - 1 - j]\n    return cat[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num-i-1)\n    return res\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    first_regex = r\"\\w+ly\\b\"\n    first_match = re.findall(first_regex, text)\n    return first_match\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    # find all adverbs ending with ly\n    adverbs = re.findall(r'(?<![a-z])ly(?![a-z])', text)\n    # find all adverbs ending with ly and its positions\n    positions = [(m.start(0), m.end(0)) for m in re.finditer(r'(?<![a-z])ly(?![a-z])', text)]\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly = re.compile(r'\\w*ly\\b')\n    result = ly.findall(text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'[A-Za-z]+ly$'\n    result = re.findall(pattern,text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall('\\bly\\b', text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.finditer(r'\\w*ly\\b', text)\n    if result:\n        for match in result:\n            print(match.group(),match.span())\n    else:\n        print(\"no adverbs\")\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    results = re.findall(\"((?<=[\\.\\!\\?])ly)\", text)\n    if len(results) > 0:\n        for result in results:\n            print(result)\n    else:\n        print(\"No adverb found\")\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    #Find adverbs ending with ly\n    reg_exp = \"[a-zA-Z]*ly$\"\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result=[]\n    for i in range(len(text)):\n        m = re.search(\"ly$\", text[i:])\n        if m:\n            result.append((m.start(), m.end()))\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if len(text) < 2:\n        return 0,0,0\n    pattern = re.compile(r'\\w+ly\\b')\n    matches = pattern.finditer(text)\n    if len(matches) == 0:\n        return 0,0,0\n    pos = []\n    adverb = []\n    for match in matches:\n        pos.append(match.start())\n        adverb.append(match.group())\n    return adverb[0],pos[0],len(adverb)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Sorting items based on price and then iterating to get the top n items\n    expensive_items = heapq.nlargest(n,items,key=lambda x:x[1])\n    #Returning the top n items\n    return expensive_items\n    \nprint(expensive_items([('Item1', 35), ('Item2', 55), ('Item3', 75)], 2))\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the dictionary in decreasing order based on the values\n    sorted_dict = sorted(items, key=items.get, reverse=True)\n    # Return the top n items\n    return sorted_dict[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initialize a new empty list called top_items\n    top_items=[]\n    # For each item in items, append the item to top_items\n    for item in items:\n        top_items.append(item)\n    # Return the list of top n items\n    return top_items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items,key=lambda x: x[1],reverse=True)[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # sort\n    items_sorted=sorted(items,key=lambda x:x[1],reverse=True)\n    # return the top N\n    return items_sorted[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(len(items)):\n        if n < len(items):\n            heapq.heappush(heap, (-1*items[i][1],items[i][0]))\n        else:\n            if items[i][1] > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-1*items[i][1],items[i][0]))\n    return [i[1] for i in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #return sorted(items,key=lambda x:items[x],reverse=True)[:n]\n    return heapq.nlargest(n,items,key=items.get)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pq = []\n    heapq.heapify(pq)\n    for i in items:\n        heapq.heappush(pq,(i[1],i[0]))\n        if len(pq)>n:\n            heapq.heappop(pq)\n    return [x[1] for x in pq]\ndef top_pairs(items,n):\n    '''\n    Write a function to find the n most frequently occurring string pairs in a given dataset.\n    '''\n    count = {}\n    for i in items:\n        if i in count:\n            count[i]+=1\n        else:\n            count[i]=1\n    return heapq.nlargest(n, count.items(), key=lambda x: x[1])\ndef top_pairs_2(items,n):\n    '''\n    Write a function to find the n most frequently occurring string pairs in a given dataset.\n    '''\n    freq = {}\n    for i in items:\n        if (i[0],i[1]) in freq:\n            freq[(i[0],i[1])]+=1\n        else:\n            freq[(i[0],i[1])]=1\n    return heapq.nlargest(n, freq.items(), key=lambda x: x[1])\ndef top_pairs_3(items,n):\n    '''\n    Write a function to find the n most frequently occurring string pairs in a given dataset.\n    '''\n    freq = {}\n    for i in items:\n        if (i[0],i[1]) in freq:\n            freq[(i[0],i[1])]+=1\n        else:\n            freq[(i[0],i[1])]=1\n    return [x[0] for x in heapq.nlargest(n, freq.items(), key=lambda x: x[1])]\ndef min_list(items):\n    '''\n    Write a function that takes a list of numbers and returns the minimum value in the list.\n    '''\n    return min(items)\ndef max_list(items):\n    '''\n    Write a function that takes a list of numbers and returns the maximum value in the list.\n    '''\n    return max(items)\ndef min_list_2(items):\n    '''\n    Write a function that takes a list of numbers and returns the minimum value in the list.\n    '''\n    return min(items, key=lambda x: x[1])[1]\ndef max_list_2(items):\n    '''\n    Write a function that takes a list of numbers and returns the maximum value in the list.\n    '''\n    return max(items, key=lambda x: x[1])[1]\ndef min_list_3(items, n):\n    '''\n    Write a function that takes a list of numbers and returns the minimum value in the list.\n    '''\n    items.sort(key=lambda x: x[n])\n    return items[0][n]\ndef max_list_3(items, n):\n    '''\n    Write a function that takes a list of numbers and returns the maximum value in the list.\n    '''\n    items.sort(key=lambda x: x[n])\n    return items[-1][n]\ndef total_purchases(items):\n    '''\n    Write a function that takes a list of numbers and returns the total of the list.\n    '''\n    return sum(items)\ndef purchases_product(items):\n    '''\n    Write a function that takes a list of numbers and returns the product of the list.\n    '''\n    return reduce(lambda x,y: x*y,items)\ndef purchases_product_2(items):\n    '''\n    Write a function that takes a list of numbers and returns the product of the list.\n    '''\n    return reduce(lambda x,y: x*y,items,1)\ndef mean(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return float(sum(items))/len(items)\ndef mean_2(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return float(sum(items))/(len(items))\ndef mean_3(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return float(sum(items))/(len(items))\ndef mean_4(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return reduce(lambda x,y: x+y,items)/len(items)\ndef mean_5(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return reduce(lambda x,y: x+y,items)/len(items)\ndef mean_6(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return reduce(lambda x,y: x+y,items)/len(items)\ndef mean_7(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_8(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return reduce(lambda x,y: x+y,items)/len(items)\ndef mean_9(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_10(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_11(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_12(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_13(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_14(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_15(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_16(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_17(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_18(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_19(items):\n    '''\n    Write a function that takes a list of numbers and returns the average of the list.\n    '''\n    return (reduce(lambda x,y: x+y,items)/len(items))\ndef mean_20(items):\n    '''\n    Write a function that takes a list of numbers an"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # build max heap\n    max_heap=[]\n    for i in range(n):\n        max_heap.append(items[i][1])\n        heapq._siftdown_max(max_heap,0,len(max_heap)-1)\n    # pop the largest values\n    for i in range(n,len(items)):\n        if items[i][1]>max_heap[0]:\n            heapq._heapreplace_max(max_heap,items[i][1])\n    return [items[i][0] for i in max_heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    heap = []\n    # Push the n most expensive items in the min heap\n    for item in items:\n        heapq.heappush(heap, (-1 * item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the heap\n    return [item[1] for item in heap]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) > 0 and n>= 0:\n        try:\n            return l[0:n] + l[n:]\n        except:\n            return None\n    return None\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[0:n]\n    l2 = l[n:]\n    return l1 + l2\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[0:n]\n    second_part = l[n:]\n    list_as_tuple = (first_part, second_part)\n    return list_as_tuple\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    length = len(l)\n    if n < 0 or n >= length:\n        return l\n    else:\n        first = l[:n]\n        second = l[n:]\n        return second + first\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    elif n == 1:\n        return l[:1] + l[1:]\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n:], n-1)\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    n = n - 1\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if isinstance(listx, list):\n        return tuple(listx)\n    else:\n        return False\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # YOUR CODE HERE\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(tuple(listx))\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(max(nums)-min(nums))\n    \ndef big_diff2(nums):\n    '''\n    Write a python function to return the sum of the smallest and largest value in a given list.\n    '''\n    return max(nums)+min(nums)\n    \ndef big_diff3(nums):\n    '''\n    Write a python function to return the sum of the largest and smallest value in a given list.\n    '''\n    return sum(sorted(nums)[::2])\n    \ndef bigger_price(limit, data):\n    '''\n    Write a python function to extract the item price from a given dictionary and return the sum of it.\n    '''\n    return sum(data.values())\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    biggest = max(nums)\n    smallest = min(nums)\n    return biggest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = min(nums)\n    b = max(nums)\n    return b-a\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(\"Solution 1\")\n    print(max(nums) - min(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    biggest_num = nums[len(nums)-1]\n    smallest_num = nums[0]\n    biggest_diff = biggest_num - smallest_num\n    return biggest_diff\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return abs(max(nums) - min(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = nums\n    print(max(a) - min(a))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n    \ndef big_diff(nums):\n    min = nums[0]\n    max = nums[0]\n    for num in nums:\n        if num < min:\n            min = num\n        elif num > max:\n            max = num\n    return max-min\n    \ndef big_diff(nums):\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = []\n    for i in range(a, b + 1):\n        if i * i < b:\n            c.append(i * i)\n        elif i * i == b:\n            c.append(i * i)\n            break\n    return c\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a<1 or b<1:\n        return 'Please provide positive integers'\n    res=[]\n    i=a\n    while i>=1:\n        if i*i>b:\n            break\n        if i*i<=b:\n            res.append(i*i)\n        i-=1\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # print(b)\n    sqr_list = [i**2 for i in range(a, b+1) if i**2 < b]\n    print(sqr_list)\n    return sqr_list\n    \nif __name__ == \"__main__\":\n    a, b = 3, 5\n    # perfect_squares(a, b)\n    for i in perfect_squares(a, b):\n        print(i, end = \" \")\n        "
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = a\n    for i in range(a + 1, b + 1):\n        if i * i < b:\n            n += i\n        else:\n            break\n    return n\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # if a < 0:\n    #     return []\n    # if a > b:\n    #     return []\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    # 1.\n    # Time: O(n) | Space: O(n)\n    # n = min(abs(a), abs(b))\n    # i = 1\n    # while i * i <= n:\n    #     if (a + i * i <= b) and (a + i * i >= a):\n    #         yield a + i * i\n    #     i += 1\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    num_squares = []\n    for num in range(a, b + 1):\n        sqrt = round(num ** 0.5)\n        if sqrt ** 2 == num:\n            num_squares.append(num)\n    return num_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if i ** 2 == j ** 2:\n                res.append(j)\n    return sorted(res)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    while a < b:\n        b -= a\n        if a * a == b:\n            print(a)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Your code here\n    while a < b:\n        a += 1\n        if a ** 2 <= b:\n            yield a ** 2\n        else:\n            break\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #x = math.sqrt(a)\n    #y = math.sqrt(b)\n    r = math.sqrt(x**2 + y**2)\n    print(r)\n    t = math.atan(y/x)\n    return(r,t)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    #x = math.sqrt(a)\n    #y = math.sqrt(b)\n    r = math.sqrt(x**2 + y**2)\n    t = math.atan(y/x)\n    return(r,t)\ndef add(x,y):\n    '''\n    Write a function to add two numbers.\n    '''\n    return(x+y)\ndef subtract(x,y):\n    '''\n    Write a function to subtract two numbers.\n    '''\n    return(x-y)\ndef multiply(x,y):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return(x*y)\ndef divide(x,y):\n    '''\n    Write a function to divide two numbers.\n    '''\n    if y!= 0:\n        return(x/y)\n    else:\n        return('Error: Division by zero is not possible')\ndef square(x):\n    '''\n    Write a function to square a number.\n    '''\n    return(x**2)\ndef square_root(x):\n    '''\n    Write a function to compute the square root of a number.\n    '''\n    return(math.sqrt(x))\ndef power(x,y):\n    '''\n    Write a function to compute the power of a number.\n    '''\n    return(x**y)\ndef ceil(x):\n    '''\n    Write a function to compute the ceiling of a number.\n    '''\n    return(math.ceil(x))\ndef floor(x):\n    '''\n    Write a function to compute the floor of a number.\n    '''\n    return(math.floor(x))\ndef sine(x):\n    '''\n    Write a function to compute the sine of a number.\n    '''\n    return(math.sin(x))\ndef cosine(x):\n    '''\n    Write a function to compute the cosine of a number.\n    '''\n    return(math.cos(x))\ndef tangent(x):\n    '''\n    Write a function to compute the tangent of a number.\n    '''\n    return(math.tan(x))\ndef cosecant(x):\n    '''\n    Write a function to compute the cosecant of a number.\n    '''\n    return(1/math.sin(x))\ndef secant(x):\n    '''\n    Write a function to compute the secant of a number.\n    '''\n    return(1/math.cos(x))\ndef cotangent(x):\n    '''\n    Write a function to compute the cotangent of a number.\n    '''\n    return(1/math.tan(x))\ndef natural_log(x):\n    '''\n    Write a function to compute the natural log of a number.\n    '''\n    return(math.log(x))\ndef absolute_value(x):\n    '''\n    Write a function to compute the absolute value of a number.\n    '''\n    return(math.fabs(x))\ndef reduced_form(x,y):\n    '''\n    Write a function to compute the reduced form of a quadratic equation.\n    '''\n    a = x\n    b = y\n    return(a,b)\ndef discriminant(a,b,c):\n    '''\n    Write a function to compute the discriminant of a quadratic equation.\n    '''\n    return((b**2) - (4*a*c))\ndef quadratic_roots(a,b,c):\n    '''\n    Write a function to compute the roots of a quadratic equation.\n    '''\n    d = discriminant(a,b,c)\n    if d > 0:\n        root1 = (-b + math.sqrt(d))/(2*a)\n        root2 = (-b - math.sqrt(d))/(2*a)\n        return(root1,root2)\n    if d == 0:\n        root1 = root2 = -b/(2*a)\n        return(root1,root2)\n    if d < 0:\n        return('Complex Roots')\ndef quadratic_solutions(a,b,c):\n    '''\n    Write a function to compute the solutions of a quadratic equation.\n    '''\n    if discriminant(a,b,c) > 0:\n        root1 = (-b + math.sqrt(discriminant(a,b,c)))/(2*a)\n        root2 = (-b - math.sqrt(discriminant(a,b,c)))/(2*a)\n        return(root1,root2)\n    if discriminant(a,b,c) == 0:\n        root1 = root2 = -b/(2*a)\n        return(root1,root2)\n    if discriminant(a,b,c) < 0:\n        return('Complex Roots')\ndef inverse(a,m):\n    '''\n    Write a function to compute the multiplicative inverse of a number.\n    '''\n    return(a**(m-2))\ndef lcm(x,y):\n    '''\n    Write a function to compute the least common multiple of two numbers.\n    '''\n    greater = max(x,y)\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n    return(lcm)\ndef hcf(x,y):\n    '''\n    Write a function to compute the greatest common factor of two numbers.\n    '''\n    smaller = min(x,y)\n    while True:\n        if x % smaller == 0 and y % smaller == 0:\n            hcf = smaller\n            break\n        smaller -= 1\n    return(hcf)\ndef is_perfect_square(x):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if int(x**0.5)**2 == x:\n        return(True)\n    else:\n        return(False)\ndef is_prime(x):\n    '''\n    Write a function to check if a number is a prime number.\n    '''\n    if x > 1:\n        for y in range(2,x):\n            if x % y == 0:\n                return(False)\n    else:\n        return(False)\ndef is_palindrome(x):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    temp = x\n    rev = 0\n    while(x > 0):\n        dig = x % 10\n        rev = rev * 10 + dig\n        x = x // 10\n    if rev == temp:\n        return(True)\n    else:\n        return(False)\ndef is_pandigital(x):\n    '''\n    Write a function to check if a number is a pandigital number.\n    '''\n    if len(str(x)) == 9:\n        temp = [0] * 9\n        while x > 0:\n            dig = x % 10\n            temp[8-dig] = dig\n            x = x // 10\n        if temp == [1,2,3,4,5,6,7,8,9]:\n            return(True)\n        else:\n            return(False)\n    else:\n        return(False)\ndef factorial(x):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    if x == 0:\n        return(1)\n    elif x == 1:\n        return(1)\n    else:\n        return(x*factorial(x-1))\ndef fibonacci(n):\n    '''\n    Write a function to compute the nth fibonacci number.\n    '''\n    if n == 0:\n        return(0)\n    elif n == 1:\n        return(1)\n    else:\n        return(fibonacci(n-"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = x, y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\ndef rectangular_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = abs(x) + abs(y)\n    theta = cmath.atan2(y,x)\n    return r,theta\ndef area_of_circle(r):\n    '''\n    Write a function to compute the area of a circle of radius r.\n    '''\n    theta = cmath.pi * r ** 2\n    return theta\ndef area_of_rect(x,y):\n    '''\n    Write a function to compute the area of a rectangle of length x and breadth y.\n    '''\n    area = x * y\n    return area\ndef perimeter_of_rect(x,y):\n    '''\n    Write a function to compute the perimeter of a rectangle of length x and breadth y.\n    '''\n    perimeter = 2 * (x + y)\n    return perimeter\ndef intersection_of_circles(x1,y1,r1,x2,y2,r2):\n    '''\n    Write a function to compute the intersection of two circles. The circles are defined by their centers (x1,y1) and (x2,y2) and their radii r1 and r2, respectively. The function should return a tuple (x,y) with the coordinates of the intersection point.\n    '''\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    if d < (r1 + r2) ** 2:\n        a = (r1 ** 2 - r2 ** 2 + d) / 2\n        b = (r1 ** 2 - r2 ** 2 - d) / 2\n        x = a * (x2 - x1) / d + x1\n        y = a * (y2 - y1) / d + y1\n        return x,y\n    else:\n        return None\ndef area_of_triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to compute the area of a triangle, given its vertices.\n    '''\n    a = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    b = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    c = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    s = (a + b + c) / 2\n    area = cmath.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\ndef area_of_parallelogram(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to compute the area of a parallelogram, given its vertices.\n    '''\n    a = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    b = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    c = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    s = (a + b + c) / 2\n    area = cmath.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\ndef area_of_trapezoid(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of a trapezoid, given its vertices.\n    '''\n    a = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    b = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    c = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    d = (x3 - x4) ** 2 + (y3 - y4) ** 2\n    e = (x4 - x1) ** 2 + (y4 - y1) ** 2\n    s = (a + b + c + d + e) / 2\n    area = cmath.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e))\n    return area\ndef area_of_shape(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6):\n    '''\n    Write a function to compute the area of a shape, given its vertices.\n    '''\n    a = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    b = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    c = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    d = (x3 - x4) ** 2 + (y3 - y4) ** 2\n    e = (x4 - x5) ** 2 + (y4 - y5) ** 2\n    f = (x5 - x6) ** 2 + (y5 - y6) ** 2\n    g = (x6 - x1) ** 2 + (y6 - y1) ** 2\n    s = (a + b + c + d + e + f + g) / 2\n    area = cmath.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g))\n    return area\ndef perimeter_of_shape(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6):\n    '''\n    Write a function to compute the perimeter of a shape, given its vertices.\n    '''\n    a = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    b = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    c = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    d = (x3 - x4) ** 2 + (y3 - y4) ** 2\n    e = (x4 - x5) ** 2 + (y4 - y5) ** 2\n    f = (x5 - x6) ** 2 + (y5 - y6) ** 2\n    g = (x6 - x1) ** 2 + (y6 - y1) ** 2\n    s = (a + b + c + d + e + f + g) / 2\n    perimeter = cmath.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g))\n    return perimeter\ndef find_intersections(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the number of intersections between two lines. The lines are defined by their vertices (x1,y1) and (x2,y2) and (x3,y3) and (x4,y4), respectively.\n    '''\n    a = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    b = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    c = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    d = (x3 - x4) ** 2 + (y3 - y4) ** 2\n    e = (x4 - x1) ** 2 + (y4 - y1) ** 2\n    f = (x4 - x2) ** 2 + (y4 - y2) ** 2\n    g = (x4 - x3) ** 2 + (y4 - y3) ** 2\n    s = (a + b + c + d + e + f + g) / 2\n    area = cmath.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * ("
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,t = cmath.polar(complex(x,y))\n    x = r*cmath.cos(t)\n    y = r*cmath.sin(t)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x1 = x * cmath.rect(y,cmath.pi/2)\n    return x1\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(x,y)\n    return cmath.polar(z)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = math.hypot(x,y)\n    angle = math.atan(y/x)\n    return (round(r,2),round(math.degrees(angle),2))\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    angle = math.radians(y)\n    return (round(r,2),round(angle,2))\ndef get_nearest_point(point):\n    '''\n    Given a list of points, return the point that is nearest to the given point.\n    Return the point and its distance to the given point.\n    '''\n    #the distance between a point and another point is calculated using this formula\n    #sqrt((x1-x2)^2 + (y1-y2)^2)\n    #so, we will get the distance between the given point and all the points in the list,\n    #and then we will get the min distance in the list.\n    #We will return the point and its distance from the given point\n    #point is a tuple, so we will use math.hypot() to get the distance.\n    #And we will use the index method to get the minimum index value.\n    #If the distance from the given point to the min point is smaller,\n    #then return the min point and its distance.\n    #if the distance from the given point to the min point is same, then return the max point and its distance\n    #if the distance from the given point to the min point is larger, then return the min point and its distance\n    #else we will return nothing.\n    #We will not return the actual distance to the point, we will return the point.\n    #if we don't have any points in the list, then return None.\n    #if the distance is equal to 0, then we will return the point.\n    #if we don't have any points in the list, then return None.\n    nearest_point = None\n    distance = 100\n    for p in point:\n        d = math.hypot(p[0]-point[0],p[1]-point[1])\n        if d < distance:\n            distance = d\n            nearest_point = p\n    return nearest_point\ndef get_nearest_point_in_list(point,list_of_points):\n    '''\n    Given a point, and a list of points,\n    return the nearest point in the list to the given point.\n    '''\n    #we will use the min method to get the minimum index value, and return the minimum index value\n    #we will use the index method to get the minimum index value.\n    #if the distance from the given point to the min point is smaller,\n    #then return the min point and its distance.\n    #if the distance from the given point to the min point is same, then return the max point and its distance\n    #if the distance from the given point to the min point is larger, then return the min point and its distance\n    #else we will return nothing.\n    #we will not return the actual distance to the point, we will return the point.\n    #if we don't have any points in the list, then return None.\n    #if the distance is equal to 0, then we will return the point.\n    #if we don't have any points in the list, then return None.\n    if not list_of_points:\n        return None\n    min_index = list_of_points.index(min(list_of_points,key=lambda x:math.hypot(x[0]-point[0],x[1]-point[1])))\n    return list_of_points[min_index]\ndef get_polygon_intersection(polygon_list1,polygon_list2):\n    '''\n    Given two polygons, return the point of intersection of both polygons.\n    '''\n    #we will use the intersection method to get the intersection points.\n    #we will return the points.\n    #if the number of points in the intersection list is 0, then return None.\n    #if the number of points in the intersection list is 1, then return the point.\n    #if the number of points in the intersection list is more than 1, then return the points.\n    #we will use the get_nearest_point_in_list() function to get the nearest point in the list.\n    #if the nearest point is None, then return None.\n    #if the nearest point is not None, then return the nearest point.\n    #if the nearest point is same as the point, then return the point.\n    #if the nearest point is different than the point, then return the point and its distance from the point.\n    intersection_points = []\n    for p1 in polygon_list1:\n        for p2 in polygon_list2:\n            points = list(intersection(p1,p2))\n            if len(points)>0:\n                intersection_points += points\n    if len(intersection_points) == 0:\n        return None\n    elif len(intersection_points) == 1:\n        return intersection_points[0]\n    else:\n        nearest_point = get_nearest_point_in_list(intersection_points[0],intersection_points)\n        return nearest_point\ndef get_angle_between_points(p1,p2):\n    '''\n    Given two points, return the angle between both points.\n    '''\n    #we will use the angle between points formula to get the angle between two points.\n    #return the angle.\n    angle = math.atan2(p2[1]-p1[1],p2[0]-p1[0])\n    return angle\ndef get_polygon_area(polygon):\n    '''\n    Given a polygon, return its area.\n    '''\n    #we will use the shoelace method to get the area of the polygon.\n    #we will sum up all the values of x*y of the points in the list.\n    #and we will return the area.\n    #if the area is equal to 0, then return None.\n    #if the area is not equal to 0, then return the area.\n    area = 0\n    for i in range(len(polygon)):\n        x_1 = polygon[i][0]\n        y_1 = polygon[i][1]\n        if i == len(polygon)-1:\n            x_2 = polygon[0][0]\n            y_2 = polygon[0][1]\n        else:\n            x_2 = polygon[i+1][0]\n            y_2 = polygon[i+1][1]\n        area += x_1*y_2 - x_2*y_1\n    if area == 0:\n        return None\n    else:\n        return abs(area/2)\ndef polygon_intersection(polygon1,polygon2):\n    '''\n    Given two polygons, return the intersection points between the polygons.\n    '''\n    #we will use the get_polygon_intersection() function to get the intersection points.\n    #if the intersection points is None, then return None.\n    #if the intersection points is not None, then return the intersection points.\n    intersection_points = get_polygon_intersection(polygon1,polygon2)\n    if intersection_points is None:\n        return None\n    else:\n        return intersection_points\ndef get_polygon_point_distance(point,polygon):\n    '''\n    Given a point and a polygon, return the distance between the point and the polygon.\n    '''\n    #we will use the shoelace method to get the distance between the point and the polygon.\n    #we will use the get_polygon_area() function to get the area of the polygon.\n    #we will get the distance using the shoelace formula.\n    #if the point is not in the polygon, then return None.\n    #if the point is in the polygon, then return the distance.\n    if point not in polygon:\n        return None\n    else:\n        polygon_area = get_polygon_area(polygon)\n        distance = polygon_area/get_polygon_intersection(polygon,polygon).length\n        return distance\ndef polygon_point_distance(point,polygon):\n    '''\n    Given a point and a polygon, return the distance between the point and the polygon.\n    '''\n    #we will use the shoelace method to get the distance between the point and the polygon.\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x*cmath.cos(y),x*cmath.sin(y))\ndef polar_hyp(x,y):\n    '''\n    Write a function to convert polar coordinates to hyperbolic coordinates.\n    '''\n    return complex(x*cmath.cosh(y),x*cmath.sinh(y))\ndef polar_pow(x,y):\n    '''\n    Write a function to convert polar coordinates to power coordinate.\n    '''\n    return complex(x**y)\ndef polar_log(x,y):\n    '''\n    Write a function to convert polar coordinates to logarithmic coordinate.\n    '''\n    return complex(x*cmath.log(y))\ndef polar_asin(x,y):\n    '''\n    Write a function to convert polar coordinates to arc-sine coordinate.\n    '''\n    return complex(x*cmath.asin(y))\ndef polar_atan(x,y):\n    '''\n    Write a function to convert polar coordinates to arc-tangent coordinate.\n    '''\n    return complex(x*cmath.atan(y))\ndef polar_cos(x,y):\n    '''\n    Write a function to convert polar coordinates to cosine coordinate.\n    '''\n    return complex(x*cmath.cos(y))\ndef polar_sin(x,y):\n    '''\n    Write a function to convert polar coordinates to sine coordinate.\n    '''\n    return complex(x*cmath.sin(y))\ndef polar_tan(x,y):\n    '''\n    Write a function to convert polar coordinates to tangent coordinate.\n    '''\n    return complex(x*cmath.tan(y))\ndef polar_sqrt(x,y):\n    '''\n    Write a function to convert polar coordinates to square root coordinate.\n    '''\n    return complex(x*cmath.sqrt(y))\ndef polar_cbrt(x,y):\n    '''\n    Write a function to convert polar coordinates to cube root coordinate.\n    '''\n    return complex(x*cmath.cbrt(y))\ndef polar_abs(x,y):\n    '''\n    Write a function to convert polar coordinates to absolute coordinate.\n    '''\n    return complex(x*cmath.absolute(y))\ndef polar_conj(x,y):\n    '''\n    Write a function to convert polar coordinates to conjugate coordinate.\n    '''\n    return complex(x*cmath.conjugate(y))\ndef polar_soln(x,y):\n    '''\n    Write a function to convert polar coordinates to solution coordinate.\n    '''\n    return complex(x*y)\ndef polar_arg(x,y):\n    '''\n    Write a function to convert polar coordinates to argument coordinate.\n    '''\n    return complex(x*y.imag)\ndef polar_floor(x,y):\n    '''\n    Write a function to convert polar coordinates to floor coordinate.\n    '''\n    return complex(x*y.real)\ndef polar_ceil(x,y):\n    '''\n    Write a function to convert polar coordinates to ceiling coordinate.\n    '''\n    return complex(x*y.real)\ndef polar_int(x,y):\n    '''\n    Write a function to convert polar coordinates to integer coordinate.\n    '''\n    return complex(x*y.real)\ndef polar_round(x,y):\n    '''\n    Write a function to convert polar coordinates to round coordinate.\n    '''\n    return complex(x*y.real)\ndef polar_rem(x,y):\n    '''\n    Write a function to convert polar coordinates to remainder coordinate.\n    '''\n    return complex(x*y.real)\ndef polar_frac(x,y):\n    '''\n    Write a function to convert polar coordinates to fraction coordinate.\n    '''\n    return complex(x*y.real)\ndef polar_dec(x,y):\n    '''\n    Write a function to convert polar coordinates to decimal coordinate.\n    '''\n    return complex(x*y.real)\ndef polar_angle(x,y):\n    '''\n    Write a function to convert polar coordinates to angle coordinate.\n    '''\n    return complex(cmath.angle(y/x))\ndef polar_ratio(x,y):\n    '''\n    Write a function to convert polar coordinates to ratio coordinate.\n    '''\n    return complex(cmath.phase(y/x))\ndef polar_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to radian coordinate.\n    '''\n    return complex(cmath.phase(y/x))\ndef polar_deg(x,y):\n    '''\n    Write a function to convert polar coordinates to degree coordinate.\n    '''\n    return complex(cmath.phase(y/x))\ndef polar_complex(x,y):\n    '''\n    Write a function to convert polar coordinates to complex coordinate.\n    '''\n    return complex(x*y)\ndef polar_complex_pow(x,y):\n    '''\n    Write a function to convert polar coordinates to complex coordinate.\n    '''\n    return complex(x*y)\ndef polar_convert(x,y):\n    '''\n    Write a function to convert polar coordinates to other coordinate.\n    '''\n    return complex(x,y)\ndef polar_number(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_pow(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_abs(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_conj(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_soln(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_arg(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_round(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_frac(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_rem(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_dec(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_ceil(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_floor(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_round(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_ratio(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_complex(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_complex_pow(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_number_convert(x,y):\n    '''\n    Write a function to convert polar coordinates to number coordinate.\n    '''\n    return complex(x,y)\ndef polar_frac_pow(x"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x\n    b = y\n    n = 0\n    if(b < 0):\n        n = 1\n        b = -b\n    if(b >= 0):\n        n = 0\n    m = a/b\n    if(m == int(m)):\n        m = int(m)\n    z = (a*m)+(m*b)+(b*n)\n    return z\ndef is_prime(x):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    count = 0\n    if(x == 2):\n        count = 1\n        return count\n    for i in range(2,int(x/2)):\n        if(x%i == 0):\n            count = 0\n            return count\n        else:\n            count = 1\n            return count\ndef prime_factors(x):\n    '''\n    Write a Python function to print all Prime Factors of a given number.\n    '''\n    for i in range(2,int(x/2)+1):\n        if(x%i == 0):\n            print(i)\n            if(i!= int(x/i)):\n                print(int(x/i))\ndef is_palindrome(x):\n    '''\n    Write a Python function to check whether a given number is a palindrome or not.\n    '''\n    x = x\n    if(x == x[::-1]):\n        return 1\n    else:\n        return 0\ndef is_strong(x):\n    '''\n    Write a Python function to check whether a given number is strong or not.\n    '''\n    x = x\n    l = len(x)\n    i = 0\n    while(i < l):\n        sum1 = 0\n        sum2 = 0\n        sum1 = int(x[i])**5\n        sum2 = int(x[i])**4\n        i = i+1\n        if(sum1 + sum2 == int(x)):\n            return 1\n        else:\n            return 0\ndef is_perfect(x):\n    '''\n    Write a Python function to check whether a given number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1,x):\n        if(x%i == 0):\n            sum = sum + i\n    if(sum == x):\n        return 1\n    else:\n        return 0\ndef is_abundant(x):\n    '''\n    Write a Python function to check whether a given number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1,x):\n        if(x%i == 0):\n            sum = sum + i\n    if(sum > x):\n        return 1\n    else:\n        return 0\ndef is_amicable(x):\n    '''\n    Write a Python function to check whether a given number is amicable or not.\n    '''\n    sum = 0\n    for i in range(1,x):\n        if(x%i == 0):\n            sum = sum + i\n    if(sum == x):\n        return 0\n    sum = 0\n    for i in range(1,sum):\n        if(sum%i == 0):\n            if(x%i == 0):\n                if(sum == x):\n                    return 1\n                else:\n                    return 0\ndef amicable(x):\n    '''\n    Write a Python function to check whether a given number is amicable or not.\n    '''\n    sum = 0\n    for i in range(1,x):\n        if(x%i == 0):\n            sum = sum + i\n    return sum\ndef is_pythagorean(a,b,c):\n    '''\n    Write a Python function to check whether a given number is Pythagorean or not.\n    '''\n    x = a**2 + b**2\n    if(x == c**2):\n        return 1\n    else:\n        return 0\ndef is_perfect_square(x):\n    '''\n    Write a Python function to check whether a given number is perfect square or not.\n    '''\n    for i in range(2,int(x/2)):\n        if(x%i == 0):\n            if(i**2 == x):\n                return 1\n    return 0\ndef is_truncatable(x):\n    '''\n    Write a Python function to check whether a given number is truncatable or not.\n    '''\n    while(x!= 0):\n        if(x%10 == 0):\n            return 0\n        else:\n            x = x//10\n    return 1\ndef is_pandigital(x):\n    '''\n    Write a Python function to check whether a given number is pandigital or not.\n    '''\n    if(len(str(x)) == 9):\n        count = 0\n        for i in range(1,10):\n            if(str(i) not in str(x)):\n                return 0\n            else:\n                count = count + 1\n        if(count == 9):\n            return 1\n    else:\n        return 0\ndef fibonacci(x):\n    '''\n    Write a Python function to return nth Fibonacci Number.\n    '''\n    n = 1\n    n_2 = 0\n    while(n <= x):\n        if(n == 1):\n            n_2 = 0\n        elif(n == 2):\n            n_2 = 1\n        else:\n            n_2 = n_2 + n\n        n = n + 1\n    return n_2\ndef is_cyclic(x):\n    '''\n    Write a Python function to check whether a given number is cyclic or not.\n    '''\n    a = 1\n    b = 1\n    while(a!= 0 and b!= 0):\n        a = x%10\n        b = x//10\n        x = x%10\n        if(x == 0):\n            return 1\n    return 0\ndef cyclic_length(x):\n    '''\n    Write a Python function to return the length of the cycle of a given number.\n    '''\n    a = 1\n    b = 1\n    while(a!= 0 and b!= 0):\n        a = x%10\n        b = x//10\n        x = x%10\n        if(x == 0):\n            return (len(str(b))+1)\n    return 0\ndef factorial(x):\n    '''\n    Write a Python function to return the factorial of a given number.\n    '''\n    i = 1\n    fact = 1\n    while(i <= x):\n        fact = fact*i\n        i = i+1\n    return fact\ndef gcd(x,y):\n    '''\n    Write a Python function to return GCD of two numbers.\n    '''\n    if(x > y):\n        z = x\n        x = y\n        y = z\n    if(x%y == 0):\n        return y\n    else:\n        while(x%y!= 0):\n            x = x%y\n            z = y\n            y = x\n            x = z\n        return y\ndef lcm(x,y):\n    '''\n    Write a Python function to return LCM of two numbers.\n    '''\n    if(x > y):\n        z = x\n        x = y\n        y = z\n    if(x%y!= 0):\n        while(x%y!= 0):\n            x = x*(z//y)\n            z = y\n            y = x\n    return x\ndef sum_of_digits(x):\n    '''\n    Write a Python function to return the sum of all digits of a given number.\n    '''\n    sum = 0\n    while(x!= 0):\n        sum = sum + x%10\n        x = x//10\n    return sum\ndef sum_of_digits_in_factorial(x):\n    '''\n    Write a Python function to return the sum of digits in the factorial of a given number.\n    '''\n    sum = 0\n    for i in range(1,x):\n        sum = sum + (i*(i+1))\n    sum = sum + (x*(x+1))/2\n    return sum\ndef sum_of_digits_in_cycle(x):\n    '''\n    Write a Python function to return the sum of digits in the cycle of a given number.\n    '''\n    sum = 0\n    for i in rang"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta=x,y\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return (x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x * cmath.cos(y), x * cmath.sin(y)\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #l = len(newList)\n    #temp = newList[0]\n    #newList[0] = newList[l-1]\n    #newList[l-1] = temp\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n    \n    \ndef check_for_Reverse(newList): \n    '''\n    Write a python function to check if a list is in reverse or not.\n    '''\n    if newList == reversed(newList): \n        return True\n    return False\n    \n    \ndef create_list_from_string(string_list): \n    '''\n    Write a python function to create a list from a string, where each element of the string represents a word in a sentence.\n    '''\n    sentence = string_list.split()\n    return sentence\n    \n    \ndef check_for_duplicates(newList): \n    '''\n    Write a python function to check if a list contains duplicates or not.\n    '''\n    if len(newList) == len(set(newList)): \n        return False\n    return True\n    \n    \ndef create_list_of_tuples(list1, list2): \n    '''\n    Write a python function to create a list of tuples from two lists containing numbers.\n    '''\n    return list(zip(list1, list2))\n    \n    \ndef sort_list_of_tuples(list_of_tuples, index=0): \n    '''\n    Write a python function to sort a list of tuples based on the specified index of the tuple.\n    '''\n    return sorted(list_of_tuples, key=lambda tuple: tuple[index])\n    \n    \ndef get_value_from_tuple(tuple_list, index): \n    '''\n    Write a python function to access the value of a tuple based on the specified index.\n    '''\n    return tuple_list[index]\n    \n    \ndef get_first_two_elements(list_of_tuples): \n    '''\n    Write a python function to access the first two elements of a list of tuples.\n    '''\n    return [tuple[0] for tuple in list_of_tuples]\n    \n    \ndef remove_duplicates(list_of_tuples): \n    '''\n    Write a python function to remove duplicates from a list of tuples.\n    '''\n    return list(set(list_of_tuples))\n    \n    \ndef sum_of_tuples(tuple_list): \n    '''\n    Write a python function to sum up all the values in a list of tuples.\n    '''\n    return sum([tuple[0] for tuple in tuple_list])\n    \n    \ndef get_least_value_from_tuple(tuple_list): \n    '''\n    Write a python function to find the minimum value in a list of tuples.\n    '''\n    return min([tuple[0] for tuple in tuple_list])\n    \n    \ndef get_greatest_value_from_tuple(tuple_list): \n    '''\n    Write a python function to find the maximum value in a list of tuples.\n    '''\n    return max([tuple[0] for tuple in tuple_list])\n    \n    \ndef get_index_of_value_from_tuple(tuple_list, number): \n    '''\n    Write a python function to find the index of a value in a list of tuples.\n    '''\n    index_list = [index for index in range(len(tuple_list)) if tuple_list[index][0] == number]\n    return index_list[0]\n    \n    \ndef get_all_index_from_tuple(tuple_list, number): \n    '''\n    Write a python function to find the index of a value in a list of tuples.\n    '''\n    index_list = [index for index in range(len(tuple_list)) if tuple_list[index][0] == number]\n    return index_list\n    \n    \ndef convert_list_to_dict(list_of_tuples): \n    '''\n    Write a python function to convert a list of tuples into a dictionary.\n    '''\n    dict_of_tuples = {tuple[0]: tuple[1] for tuple in list_of_tuples}\n    return dict_of_tuples\n    \n    \ndef get_value_from_dict(dict_of_tuples, key): \n    '''\n    Write a python function to access the value of a tuple based on its key in a dictionary.\n    '''\n    return dict_of_tuples.get(key, 'Key is not found')\n    \n    \ndef get_first_n_items_from_list(list_of_items, n): \n    '''\n    Write a python function to get first n items from a list.\n    '''\n    return list_of_items[:n]\n    \n    \ndef get_last_n_items_from_list(list_of_items, n): \n    '''\n    Write a python function to get last n items from a list.\n    '''\n    return list_of_items[-n:]\n    \n    \ndef get_all_values_from_list(list_of_items): \n    '''\n    Write a python function to get all the items in a list.\n    '''\n    return list_of_items\n    \n    \ndef reverse_list_of_items(list_of_items): \n    '''\n    Write a python function to reverse the order of a list of items.\n    '''\n    list_of_items.reverse()\n    return list_of_items\n    \n    \ndef split_string_of_items(string_of_items): \n    '''\n    Write a python function to split a string of items into a list of items.\n    '''\n    return string_of_items.split()\n    \n    \ndef get_nth_item_from_list_of_tuples(list_of_tuples, n): \n    '''\n    Write a python function to get the nth item from a list of tuples.\n    '''\n    return [item[n] for item in list_of_tuples]\n    \n    \ndef check_if_item_exists(list_of_items, item): \n    '''\n    Write a python function to check if an item exists in a list of items.\n    '''\n    return item in list_of_items\n    \n    \ndef get_index_of_item_in_list(list_of_items, item): \n    '''\n    Write a python function to get the index of an item in a list of items.\n    '''\n    return list_of_items.index(item)\n    \n    \ndef get_value_based_on_index(list_of_items, index): \n    '''\n    Write a python function to get the value at index in a list of items.\n    '''\n    return list_of_items[index]\n    \n    \ndef get_all_items_based_on_index(list_of_items, index): \n    '''\n    Write a python function to get all the values at index in a list of items.\n    '''\n    return [item[index] for item in list_of_items]\n    \n    \ndef get_all_items_based_on_index_and_value(list_of_items, index, value): \n    '''\n    Write a python function to get all the values at index in a list of items.\n    '''\n    return [item for item in list_of_items if item[index] == value]\n    \n    \ndef swap_first_last_items(list_of_items): \n    '''\n    Write a python function to swap the first and last items in a list of items.\n    '''\n    list_of_items[-1], list_of_items[0] = list_of_items[0], list_of_items[-1]\n    return list_of_items\n    \n    \ndef get_first_and_last_items(list_of_items): \n    '''\n    Write a python function to get first and last items in a list of items.\n    '''\n    return list_of_items[0], list_of_items[-1]\n    \n    \ndef get_all_odd_items(list_of_items): \n    '''\n    Write a python function to get al"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    size = size - 1\n    temp = newList[0]\n    newList[0] = newList[size]\n    newList[size] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return sum([(n+1-i)*binomial(n,i) for i in range(k,n+1)])\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k>n):\n        return 0\n    elif(k==0 or k==n):\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    #using factorial.\n    if k == 0 or n == k:\n        return 1\n    elif k>n:\n        return 0\n    else:\n        return (n//k)*(binomial_Coeff(n-1,k-1)) + (binomial_Coeff(n-1,k))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base case \n    if k == 0 or k == n: \n        return 1\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    b = 1\n    while k >= 0:\n        b = b * (n-k+1)//k\n        k = k-1\n    return b\n    \n    \ndef binomial_Coeff_from_tuple(tup):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients from the tuple.\n    '''\n    b = 1\n    for i in range(len(tup)):\n        b = b * (tup[i]+1)/tup[i]\n    return b\n    \n    \ndef binomial_Coeff_from_tuple_with_index(tup):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients from the tuple with index of occurence.\n    '''\n    b = 1\n    for i in range(len(tup)):\n        b = b * (tup[i][1]+1)/tup[i][0]\n    return b\n    \n    \ndef get_sequence_from_tuple(tup):\n    '''\n    Write a python function to get the list of sequence from the tuple\n    '''\n    sequence = []\n    for i in range(len(tup)):\n        sequence.append(tup[i][1])\n    return sequence\n    \n    \ndef get_tuple_from_sequence(seq):\n    '''\n    Write a python function to get the tuple from the list\n    '''\n    tup = ()\n    for i in range(len(seq)):\n        tup = tup + (seq[i],)\n    return tup\n    \n    \ndef binomial_Coeff_from_tuple_with_index(tup):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients from the tuple with index of occurence.\n    '''\n    b = 1\n    for i in range(len(tup)):\n        b = b * (tup[i][1]+1)/tup[i][0]\n    return b\n    \n    \ndef binomial_Coeff_from_tuple_with_index_and_mod(tup, mod):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients from the tuple with index of occurence and mod.\n    '''\n    b = 1\n    for i in range(len(tup)):\n        b = b * (tup[i][1]+1)%mod/tup[i][0]\n    return b\n    \n    \ndef binomial_Coeff_from_tuple_with_index_and_mod_to_list(tup, mod):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients from the tuple with index of occurence and mod to list of numbers.\n    '''\n    b = []\n    for i in range(len(tup)):\n        b.append(tup[i][1]+1)\n    for i in range(len(b)):\n        b[i] = b[i]%mod/tup[i][0]\n    return b\n    \n    \ndef binomial_Coeff_from_tuple_with_index_and_mod_to_list_in_decimal(tup, mod):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients from the tuple with index of occurence and mod to list of numbers in decimal.\n    '''\n    b = []\n    for i in range(len(tup)):\n        b.append(tup[i][1]+1)\n    for i in range(len(b)):\n        b[i] = b[i]%mod/tup[i][0]\n    return [float(x) for x in b]\n    \n    \ndef get_index_with_greater_value(seq, value):\n    '''\n    Write a python function to get the index of the element with greater value from the list.\n    '''\n    greater_value = float('-inf')\n    greater_value_index = 0\n    for i in range(len(seq)):\n        if seq[i] > value:\n            greater_value = seq[i]\n            greater_value_index = i\n    return greater_value_index\n    \n    \ndef get_index_with_greater_value_2(seq, value):\n    '''\n    Write a python function to get the index of the element with greater value from the list.\n    '''\n    greater_value = float('-inf')\n    greater_value_index = 0\n    for i in range(len(seq)):\n        if seq[i] > value:\n            greater_value = seq[i]\n            greater_value_index = i\n            break\n    return greater_value_index\n    \n    \ndef get_index_with_greater_value_3(seq, value):\n    '''\n    Write a python function to get the index of the element with greater value from the list.\n    '''\n    greater_value = float('-inf')\n    greater_value_index = 0\n    for i in range(len(seq)):\n        if seq[i] > value:\n            greater_value = seq[i]\n            greater_value_index = i\n            break\n    return greater_value_index\n    \n    \ndef get_index_with_greater_value_4(seq, value):\n    '''\n    Write a python function to get the index of the element with greater value from the list.\n    '''\n    greater_value = float('-inf')\n    greater_value_index = 0\n    greater_value_index_2 = 0\n    for i in range(len(seq)):\n        if seq[i] > value:\n            greater_value = seq[i]\n            greater_value_index = i\n            greater_value_index_2 = i\n            break\n    return greater_value_index_2\n    \n    \ndef get_index_with_greater_value_5(seq, value):\n    '''\n    Write a python function to get the index of the element with greater value from the list.\n    '''\n    greater_value = float('-inf')\n    greater_value_index = 0\n    greater_value_index_2 = 0\n    greater_value_index_3 = 0\n    for i in range(len(seq)):\n        if seq[i] > value:\n            greater_value = seq[i]\n            greater_value_index = i\n            greater_value_index_2 = i\n            greater_value_index_3 = i\n            break\n    return greater_value_index_3\n    \n    \ndef get_index_with_greater_value_6(seq, value):\n    '''\n    Write a python function to get the index of the element with greater value from the list.\n    '''\n    greater_value = float('-inf')\n    greater_value_index = 0\n    greater_value_index_2 = 0\n    greater_value_index_3 = 0\n    greater_value_index_4 = 0\n    for i in range(len(seq)):\n        if seq[i] > value:\n            greater_value = seq[i]\n            greater_value_index = i\n            greater_value_index_2 = i\n            greater_value_index_3 = i\n            greater_value_index_4 = i\n            break\n    return greater_value_index_4\n    \n    \ndef get_index_with_greater_value_7(seq, value):\n    '''\n    Write a python function to get the index of the element with greater value from the list.\n    '''\n    greater_value = float('-inf')\n    greater_value_index = 0\n    greater_value_index_2 = 0\n    greater_value_index_3 = 0\n    greater_value_index_4 = 0\n    greater_value_index_5 = 0\n    for i in range(len(seq)):\n        if seq[i] > value:\n            greater_value = seq[i]\n            greater_value_index = i\n            grea"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0 or k == 0: \n        return 1\n    elif k > n: \n        return 0\n    else: \n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k) \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize coefficient list\n    coeff = []\n    # calculate binomial coefficient for n,k\n    n_factorial = 1\n    k_factorial = 1\n    for i in range(1,n+1):\n        n_factorial = n_factorial * i\n    for i in range(1,k+1):\n        k_factorial = k_factorial * i\n    for i in range(0,n-k+1):\n        coeff.append(int((n_factorial/k_factorial)))\n        n_factorial = n_factorial - (k_factorial * (i+1))\n    print(coeff)\n    return sum(coeff)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    list4 = []\n    list5 = []\n    list6 = []\n    list7 = []\n    list8 = []\n    list9 = []\n    list10 = []\n    for i in range(0, n+1):\n        list1.append(i)\n    for j in range(0, k+1):\n        list2.append(j)\n    for i in list1:\n        for j in list2:\n            if((i+j) == n):\n                list3.append(i)\n                list3.append(j)\n                list4.append(list3)\n                list3 = []\n    for i in list4:\n        list5.append(i[0])\n        list5.append(i[1])\n        list6.append(list5)\n        list5 = []\n    for i in list6:\n        list7.append(binomialCoeff(i[0],i[1]))\n        list8.append(list7)\n        list7 = []\n    for i in list8:\n        list9.append(i[0])\n        list10.append(sum(list9))\n        list9 = []\n    for i in list10:\n        print(i)\nn = int(input(\"Enter n: \"))\nk = int(input(\"Enter k: \"))\nbinomial_Coeff(n,k"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1,k+1):\n        result *= (n-i+1)//i\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #first create a list of the first k binomial coefficients\n    coeff_list = [math.factorial(n)//math.factorial(i)//math.factorial(n-i) for i in range(k+1)]\n    #now, find the sum of the product of these binomial coefficients\n    return sum(coeff_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # First we'll check to see if we have a string, if not we'll return false\n    if ip[0] == \"0\":\n        return False\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = \"\"\n    for x in ip:\n        if x!= \"0\":\n            new_ip += x\n    return new_ip\n    \ndef check_valid_ip(ip):\n    '''\n    Write a function to check if the ip address is valid\n    '''\n    \n    '''\n    The validation pattern has a 2 parts:\n    \n    part1:\n        A decimal numeral from 0 to 255, possibly separated from the right by a period.\n        \n        Example:\n            - 255.255.255.255\n            - 198.0.2.1\n            - 4.254.4.6\n            - 255.255.255.254\n        \n        No leading zeroes are allowed, but the period (.) is optional.\n        No more than 3 decimal numbers are allowed.\n        \n    part2:\n        A decimal numeral from 0 to 255, possibly separated from the right by a period, or by a number greater than 255, separated by a dash (-).\n        \n        Example:\n            - 255.0.0.0\n            - 192.168.0.1\n            - 10.0.3.5\n            - 192.0.2.3\n            \n        The dash (-) represents a range of numbers from (0-255)\n        The period (.) represents a range of numbers from (0-255), the last number is not included.\n        \n        No leading zeroes are allowed, but the period (.) is optional.\n        At most one dash (-) is allowed.\n        \n    '''\n    pattern = re.compile(r'^(([0-9])\\.){0,3}[0-9]{0,3}(\\.|\\/([0-9])\\.){0,3}[0-9]{0,3}$')\n    result = re.search(pattern, ip)\n    if result:\n        return True\n    else:\n        return False\n        \ndef check_valid_ip_with_mask(ip, mask):\n    '''\n    Write a function to check if the ip address with mask is valid\n    \n    All leading zeroes are allowed.\n    '''\n    \n    '''\n    First, remove all leading zeroes in the ip address.\n    '''\n    if ip.startswith(\"0.\"):\n        ip = removezero_ip(ip)\n    \n    '''\n    Second, split the ip address and the mask by dot.\n    '''\n    ip_split = ip.split(\".\")\n    mask_split = mask.split(\".\")\n    \n    '''\n    First part is a number from 0 to 255, possibly separated from the right by a period.\n    '''\n    first_part = \"\"\n    for x in ip_split:\n        first_part += x\n    \n    if first_part.isdigit() and len(first_part) < 4:\n        '''\n        If the number is a single digit, the leading zero is not valid.\n        '''\n        if len(first_part) == 1:\n            return False\n        \n        '''\n        If the number is a range, the leading zero is not valid.\n        '''\n        if \"-\" in first_part:\n            return False\n        \n    else:\n        '''\n        If the number is not a single digit, the leading zero is not valid.\n        '''\n        return False\n    \n    '''\n    Second part is a decimal numeral from 0 to 255, possibly separated from the right by a period.\n    '''\n    second_part = \"\"\n    for x in mask_split:\n        second_part += x\n    \n    if second_part.isdigit() and len(second_part) < 3:\n        if len(second_part) == 1:\n            return False\n        '''\n        If the number is a single digit, the leading zero is not valid.\n        '''\n        if len(second_part) == 2:\n            return False\n        \n        '''\n        If the number is a range, the leading zero is not valid.\n        '''\n        if \"-\" in second_part:\n            return False\n    \n    else:\n        '''\n        If the number is not a single digit, the leading zero is not valid.\n        '''\n        return False\n    \n    return True\n    \ndef check_mask_validity(mask):\n    '''\n    Write a function to check if the mask is valid\n    '''\n    '''\n    First, remove all leading zeroes in the mask.\n    '''\n    if mask.startswith(\"0.\"):\n        mask = removezero_ip(mask)\n    \n    '''\n    Second, split the mask by dot.\n    '''\n    mask_split = mask.split(\".\")\n    \n    '''\n    First part is a decimal numeral from 0 to 255, possibly separated from the right by a period.\n    '''\n    first_part = \"\"\n    for x in mask_split:\n        first_part += x\n    \n    if first_part.isdigit() and len(first_part) < 4:\n        '''\n        If the number is a single digit, the leading zero is not valid.\n        '''\n        if len(first_part) == 1:\n            return False\n        \n        '''\n        If the number is a range, the leading zero is not valid.\n        '''\n        if \"-\" in first_part:\n            return False\n        \n    else:\n        '''\n        If the number is not a single digit, the leading zero is not valid.\n        '''\n        return False\n    \n    '''\n    Second part is a decimal numeral from 0 to 255, possibly separated from the right by a period.\n    '''\n    second_part = \"\"\n    for x in mask_split:\n        second_part += x\n    \n    if second_part.isdigit() and len(second_part) < 3:\n        if len(second_part) == 1:\n            return False\n        '''\n        If the number is a single digit, the leading zero is not valid.\n        '''\n        if len(second_part) == 2:\n            return False\n        \n        '''\n        If the number is a range, the leading zero is not valid.\n        '''\n        if \"-\" in second_part:\n            return False\n    \n    else:\n        '''\n        If the number is not a single digit, the leading zero is not valid.\n        '''\n        return False\n    \n    return True\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list=ip.split(\".\")\n    if len(ip_list)<4:\n        return 0\n    for i in range(4):\n        if ip_list[i]==\"0\":\n            ip_list[i]=''\n        else:\n            break\n    return \".\".join(ip_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    result = re.sub('^0+', '', ip)\n    return result\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # mylist = []\n    # for i in ip:\n    #     if i!= \".\":\n    #         mylist.append(i)\n    #     else:\n    #         mylist.append(\"\")\n    # return \"\".join(mylist)\n    pattern = \"^0*\\d+\\.\"\n    return re.sub(pattern, '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('(0+)(\\.)',r'\\2',ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0(?P<ip>[0-9]{1,3}\\.){3}0(?P<ip>[0-9]{1,3})$', '\\g<ip>', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"\\.0+\",\".\",ip)\ndef add_numbers(nums):\n    '''\n    Write a function to add 2 numbers together.\n    '''\n    return sum(nums)\ndef reverse_string(str):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str[::-1]\ndef get_even_letters(str):\n    '''\n    Write a function to return a string made of its even indexed characters.\n    '''\n    return str[::2]\ndef get_odd_letters(str):\n    '''\n    Write a function to return a string made of its odd indexed characters.\n    '''\n    return str[1::2]\ndef move_zeros_end(arr):\n    '''\n    Write a function to move all zeros to the end of an array. The function should \n    return the array.\n    '''\n    return sorted(arr, key = lambda x: x!= 0 and x==x)\ndef remove_nth_last_char(str):\n    '''\n    Write a function to remove the nth last character from a string.\n    '''\n    return str[:-str[-1]]\ndef remove_vowels(str):\n    '''\n    Write a function to remove all vowels from a string.\n    '''\n    return \"\".join([i for i in str if i not in \"aeiouAEIOU\"])\ndef longest_substring(str, target):\n    '''\n    Write a function to return the longest substring of a string that doesn't contain the character target.\n    '''\n    return \"\".join([i for i in str if i!= target])\ndef multiply_string(str, n):\n    '''\n    Write a function to multiply a string by a number n.\n    '''\n    return str*n\ndef find_missing_number(arr):\n    '''\n    Write a function to find the missing number in a list.\n    '''\n    return sum(range(arr[0],arr[-1]+1)) - sum(arr)\ndef find_duplicate(arr):\n    '''\n    Write a function to find the duplicate number in a list.\n    '''\n    return [i for i in arr if arr.count(i) > 1][0]\ndef get_missing_letter(str):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    return chr(ord(str[0])+1) + ''.join([i for i in str[1:] if i.isalpha()])\ndef extract_url_params(url):\n    '''\n    Write a function to extract a dictionary of query parameters from a URL.\n    '''\n    params = re.compile(r\"\\?(.+)\").findall(url)\n    return params[0].split('&') if len(params) > 0 else []\ndef get_most_common_char(str):\n    '''\n    Write a function to get the most common character from a string.\n    '''\n    return Counter(str).most_common(1)[0][0]\ndef add_spaces(str):\n    '''\n    Write a function to add spaces between each letter in a string.\n    '''\n    return \" \".join(list(str))\ndef word_count(str):\n    '''\n    Write a function to count the number of times a word appears in a string.\n    '''\n    return len(re.findall('[a-zA-Z]+',str))\ndef shortest_string(str):\n    '''\n    Write a function to return the shortest word in a string.\n    '''\n    return min([i for i in str.split() if i!= ''], key=len)\ndef check_pwd(str):\n    '''\n    Write a function to check if the password is valid.\n    '''\n    if len(str) >= 10:\n        if str[0].isalpha():\n            return True\n    return False\ndef check_pwd_2(str):\n    '''\n    Write a function to check if the password is valid.\n    '''\n    if len(str) >= 10:\n        if re.search('[0-9]',str) and re.search('[a-z]',str) and re.search('[A-Z]',str):\n            return True\n    return False\ndef get_count_of_char(str, char):\n    '''\n    Write a function to return the count of a given character in a string.\n    '''\n    return str.count(char)\ndef remove_all_occurrence_of_char(str, char):\n    '''\n    Write a function to remove all occurrences of a given character in a string.\n    '''\n    return str.replace(char,'')\ndef generate_ip_from_range(ip, mask):\n    '''\n    Write a function to generate an IP address from a range.\n    '''\n    start_ip = int(ip.split('.')[:3])\n    end_ip = int(ip.split('.')[3:])\n    net_mask = int(mask.split('.')[0])\n    sub_mask = int(mask.split('.')[1])\n    oct1,oct2,oct3,oct4 = map(int, ip.split('.'))\n    start_ip_binary = \"{:08b}\".format(oct1) + \"{:08b}\".format(oct2) + \"{:08b}\".format(oct3) + \"{:08b}\".format(oct4)\n    end_ip_binary = \"{:08b}\".format(oct1) + \"{:08b}\".format(oct2) + \"{:08b}\".format(oct3) + \"{:08b}\".format(oct4)\n    start_ip_binary_bin = \"\".join(start_ip_binary)\n    end_ip_binary_bin = \"\".join(end_ip_binary)\n    bin_len = len(start_ip_binary_bin)\n    start_ip_binary_bin = start_ip_binary_bin[:bin_len-bin_len%8]\n    end_ip_binary_bin = end_ip_binary_bin[:bin_len-bin_len%8]\n    start_ip_dec = int(start_ip_binary_bin,2)\n    end_ip_dec = int(end_ip_binary_bin,2)\n    ip_list = []\n    ip_list.append(start_ip_dec)\n    ip_list.append(end_ip_dec)\n    ip_list = ip_list[1:]\n    for ip_num in range(start_ip_dec, end_ip_dec + 1):\n        ip_list.append(ip_num)\n    return ip_list\ndef get_count_of_vowels(str):\n    '''\n    Write a function to return the count of vowels in a string.\n    '''\n    return len([i for i in str if i in \"aeiouAEIOU\"])\ndef get_count_of_char_in_str(str, target):\n    '''\n    Write a function to return the count of a given character in a string.\n    '''\n    return str.count(target)\ndef get_length_of_longest_substring(str, k):\n    '''\n    Write a function to return the length of the longest substring of a string which is a palindrome.\n    '''\n    current_window = 0\n    max_window = 0\n    for i in range(len(str)):\n        current_window += 1\n        if current_window > k:\n            current_window -= 1\n            continue\n        if str[i]!= str[i-1]:\n            current_window = 1\n        if current_window > max_window:\n            max_window = current_window\n    return max_window\ndef reverse_string_1(str):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str) < 2:\n        return str\n    return str[len(str)-1] + reverse_string_1(str[:len(str)-1])\ndef reverse_string_2(str):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str) < 2:\n        return str\n    return str[len(str)-1] + reverse"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(\"0\", '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #return int(ip)\n    return re.sub('^0*','',ip)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    print(list1)\n    dif = abs(list1[0] - list1[1])\n    if list1[0] % 2 == 0:\n        print(\"Difference of first even number and first odd number is: \", dif)\n    else:\n        print(\"Difference of first even number and first odd number is: \", dif)\n        \ndef max_min(list1):\n    '''\n    Write a function to print the maximum and minimum of the given list without using built in functions.\n    '''\n    max1 = max(list1)\n    print(\"Maximum of the given list is: \", max1)\n    min1 = min(list1)\n    print(\"Minimum of the given list is: \", min1)\n    \ndef max_min_built_in(list1):\n    '''\n    Write a function to print the maximum and minimum of the given list using built in functions.\n    '''\n    print(\"Maximum of the given list is: \", max(list1))\n    print(\"Minimum of the given list is: \", min(list1))\n    \ndef list_comprehensions(list1, list2):\n    '''\n    Write a function to create a list of list which contains the multiplication of corresponding index of list1 and list2 without using for loop.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        list3 = []\n        for j in range(len(list2)):\n            list3.append(list1[i]*list2[j])\n        new_list.append(list3)\n    print(new_list)\n    \ndef list_comprehensions_built_in(list1, list2):\n    '''\n    Write a function to create a list of list which contains the multiplication of corresponding index of list1 and list2 using list comprehensions.\n    '''\n    new_list = [list1[i]*list2[j] for i in range(len(list1)) for j in range(len(list2))]\n    print(new_list)\n    \ndef list_comprehensions_and_dict(list1, list2):\n    '''\n    Write a function to create a dictionary from two lists. \n    Note: Use the list comprehension to perform this task.\n    '''\n    new_dict = {i:list1[i]*list2[i] for i in range(len(list1))}\n    print(new_dict)\n    \ndef list_comprehensions_and_dict_built_in(list1, list2):\n    '''\n    Write a function to create a dictionary from two lists using the built in function dict().\n    '''\n    new_dict = dict(zip(list1, list2))\n    print(new_dict)\n    \ndef convert_list_to_tuple(list1):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(tuple(list1))\n    \ndef convert_tuple_to_list(tuple1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    print(list(tuple1))\n    \ndef number_of_occurance(list1):\n    '''\n    Write a function to find the number of occurance of a given element of a list.\n    '''\n    print(\"Number of occurance of the given number in the list is: \", list1.count(8))\n    \ndef slicing(list1):\n    '''\n    Write a function to return the second last and second last element of a list.\n    '''\n    print(\"The second last element of the list is: \", list1[-2])\n    print(\"The second last element of the list is: \", list1[-2])\n    \ndef slicing_built_in(list1):\n    '''\n    Write a function to return the second last and second last element of a list using built in functions.\n    '''\n    print(\"The second last element of the list is: \", list1[-2])\n    print(\"The second last element of the list is: \", list1[-2])\n    \ndef list_access(list1):\n    '''\n    Write a function to access each element of a list one by one without using loop.\n    '''\n    for i in range(len(list1)):\n        print(list1[i])\n        \ndef list_access_built_in(list1):\n    '''\n    Write a function to access each element of a list one by one using built in functions.\n    '''\n    for i in list1:\n        print(i)\n        \ndef list_manipulation(list1):\n    '''\n    Write a function to concatenate two lists without using built in functions.\n    '''\n    list2 = [5,6,7]\n    list3 = list1 + list2\n    print(\"Concatenated list is: \", list3)\n    \ndef list_manipulation_built_in(list1, list2):\n    '''\n    Write a function to concatenate two lists using built in functions.\n    '''\n    print(\"Concatenated list is: \", list1+list2)\n    \ndef list_manipulation_built_in_two_lists(list1, list2):\n    '''\n    Write a function to concatenate two lists of two different length using built in functions.\n    '''\n    print(\"Concatenated list is: \", list1+list2)\n    \ndef list_manipulation_built_in_three_lists(list1, list2, list3):\n    '''\n    Write a function to concatenate three lists of two different length using built in functions.\n    '''\n    print(\"Concatenated list is: \", list1+list2+list3)\n    \ndef list_manipulation_built_in_four_lists(list1, list2, list3, list4):\n    '''\n    Write a function to concatenate four lists of two different length using built in functions.\n    '''\n    print(\"Concatenated list is: \", list1+list2+list3+list4)\n    \ndef list_access_from_one_list_to_another_list(list1, list2):\n    '''\n    Write a function to access each element of first list one by one and adding it to the second list.\n    '''\n    for i in list1:\n        list2.append(i)\n        \ndef list_access_from_one_list_to_another_list_built_in(list1, list2):\n    '''\n    Write a function to access each element of first list one by one and adding it to the second list using built in functions.\n    '''\n    list1.extend(list2)\n    \ndef list_access_from_one_list_to_another_list_built_in_two_lists(list1, list2, list3):\n    '''\n    Write a function to access each element of first list one by one and adding it to the second list and third list using built in functions.\n    '''\n    list1.extend(list2)\n    list3.extend(list2)\n    \ndef list_access_from_one_list_to_another_list_built_in_four_lists(list1, list2, list3, list4):\n    '''\n    Write a function to access each element of first list one by one and adding it to the second list and third list and fourth list using built in functions.\n    '''\n    list1.extend(list2)\n    list3.extend(list2)\n    list4.extend(list2)\n    \ndef list_access_from_one_list_to_another_list_built_in_five_lists(list1, list2, list3, list4, list5):\n    '''\n    Write a function to access each element of first list one by one and adding it to the second list and third list and fourth list and fifth list using built in functions.\n    '''\n    list1.extend(list2)\n    list3.extend(list2)\n    list4.extend(list2)\n    list5.extend(list2)\n    \ndef list_manipulation_from_one_list_to_another_list(list1, list2):\n    '''\n    Write a function to convert a list to a string and adding it to the second list"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return sum(odd_list) - sum(even_list)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even[0]-odd[0]\n    \n    \ndef diff_first_last(list1):\n    '''\n    Write a function to find the difference between the first and last number of a given list.\n    '''\n    return list1[-1]-list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    return even[0] - odd[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #use list comprehension\n    even = [i for i in list1 if i % 2 == 0]\n    odd = [i for i in list1 if i % 2!= 0]\n    return(even[0] - odd[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1_even = []\n    list1_odd = []\n    for i in list1:\n        if i % 2 == 0:\n            list1_even.append(i)\n        else:\n            list1_odd.append(i)\n    if len(list1_even) > len(list1_odd):\n        return abs(list1_even[0] - list1_odd[0])\n    else:\n        return abs(list1_odd[0] - list1_even[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #list1 = [3,4,5,8,2,6,1,0,9]\n    first_odd = 0\n    first_even = 0\n    for i in range(0,len(list1)):\n        if i % 2 == 0:\n            first_even = list1[i]\n            break\n    for j in range(0,len(list1)):\n        if j % 2!= 0:\n            first_odd = list1[j]\n            break\n    return abs(first_even-first_odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_index = 0\n    even_index = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index = i\n        else:\n            odd_index = i\n            break\n    diff = abs(list1[even_index] - list1[odd_index])\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #your code here\n    \n    i = 0\n    while i<len(list1):\n        if i%2==0:\n            list1[i] = list1[i]\n            i = i+1\n        else:\n            list1[i] = list1[i]\n            i = i+1\n    print(list1)\n    x = list1[0]\n    y = list1[1]\n    z = y-x\n    return z\n    \n    \n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[::2][0] - list1[1::2][0]\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    len1 = len(str1)\n    len2 = len(str2)\n    if len1!= len2:\n        return -1\n    swap = 0\n    for i in range(len1):\n        if str1[i]!= str2[i]:\n            swap = swap + 1\n    return swap\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    arr1 = [x for x in str1]\n    arr2 = [x for x in str2]\n    \n    arr1.sort()\n    arr2.sort()\n    \n    count = 0\n    \n    for i in range(len(arr1)) :\n        if arr1[i]!= arr2[i] :\n            count += 1\n    \n    return count\n    \nif __name__ == '__main__' :\n    \n    str1 = '101101'\n    str2 = '011010'\n    \n    print(min_Swaps(str1,str2))"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=list(str1)\n    str2=list(str2)\n    count=0\n    for i in range(len(str1)) :\n        if str1[i]!=str2[i] :\n            count+=1\n            str1[i],str2[i]=str2[i],str1[i]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return 'The minimum swaps required is :'+ str(str1.count('1') + str2.count('1'))\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1==str2 : return 0\n    m,n = len(str1),len(str2)\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1) :\n        dp[i][0] = i\n    for j in range(n+1) :\n        dp[0][j] = j\n    for i in range(1,m+1) :\n        for j in range(1,n+1) :\n            if str1[i-1]==str2[j-1] :\n                dp[i][j] = dp[i-1][j-1]\n            else :\n                dp[i][j] = 1 + min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])\n    return dp[m][n]\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def countSwap(str1,str2) :\n        n = len(str1) \n        m = len(str2) \n        if(n!= m): \n            return -1\n        str1 = \"0\" + str1\n        str2 = \"0\" + str2\n        count = 0\n        for i in range(0,n+1):\n            for j in range(0,m+1):\n                if(str1[i]!= str2[j]):\n                    temp = str1[i]\n                    str1[i] = str2[j]\n                    str2[j] = temp\n                    count += 1\n                    #print(str1,str2,count)\n                    if(str1 == str2):\n                        return count \n                    #swap(str1,str2,count)\n                    temp = str1[i]\n                    str1[i] = str2[j]\n                    str2[j] = temp\n        return -1\n    return countSwap(str1,str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return -1\n    str1 = str1.replace('0','a')\n    str2 = str2.replace('0','a')\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n    return count//2\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    #initialize the array\n    arr = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                arr[i][j] = j\n            elif j == 0:\n                arr[i][j] = i\n            elif str1[j-1] == str2[i-1]:\n                arr[i][j] = arr[i-1][j-1]\n            else:\n                arr[i][j] = 1 + min(arr[i-1][j],arr[i][j-1])\n    return arr[m][n]\ndef smallest_subsequence(s) : \n    '''\n    Write a python function to find smallest subsequence of a string which is a subsequence of the given string. \n    '''\n    n = len(s)\n    arr = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n+1):\n        for j in range(n+1):\n            if j == 0:\n                arr[i][j] = 0\n            elif i == 0:\n                arr[i][j] = j\n            elif s[i-1] == s[j-1]:\n                arr[i][j] = arr[i-1][j-1]\n            else:\n                arr[i][j] = 1 + min(arr[i-1][j],arr[i][j-1])\n    return arr[n][n]\ndef can_partition(num,sum1,sum2):\n    '''\n    Write a python function to check if a number can be partitioned into two parts such that the sum of both parts is equal. \n    '''\n    n = len(num)\n    if sum1 < sum2 or sum1!= sum2 :\n        return False\n    dp = [[False for i in range(sum2+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1,n+1):\n        for j in range(1,sum2+1):\n            if j-num[i-1] >= 0:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-num[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][sum2]\ndef count_ways(num,sum1,sum2):\n    '''\n    Write a python function to count the number of ways to partition a number into two parts such that the sum of both parts is equal. \n    '''\n    n = len(num)\n    dp = [[0 for i in range(sum2+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1,n+1):\n        for j in range(1,sum2+1):\n            if j-num[i-1] >= 0:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-num[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][sum2]\ndef number_of_substrings(str1,str2):\n    '''\n    Write a python function to find the number of substrings of a string, which is also a substring of the string in reverse order.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(n+1):\n        dp[0][i] = 1\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str2[i-1] == str1[j-1]:\n                dp[i][j] = dp[i-1][j-1] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    return dp[m][n]\ndef longest_substring(str1,str2):\n    '''\n    Write a python function to find the longest common substring of two strings. \n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(n+1):\n        dp[0][i] = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str2[i-1] == str1[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = 0\n    return dp[m][n]\ndef count_substrings(str1,str2,k):\n    '''\n    Write a python function to count the number of substrings of a string, which are also a substring of the string in reverse order. \n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(n+1):\n        dp[0][i] = 1\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str2[i-1] == str1[j-1]:\n                dp[i][j] = dp[i-1][j-1] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    return dp[m][n]\ndef longest_substring_with_k_distinct(str1,str2,k):\n    '''\n    Write a python function to find the longest common substring of two strings, where the substring can contain only k distinct characters.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(n+1):\n        dp[0][i] = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str2[i-1] == str1[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    return dp[m][n]\ndef can_partition_helper(num,sum1,sum2,dp):\n    if sum1 < sum2 or sum1!= sum2:\n        return False\n    if sum1 == 0:\n        return True\n    if dp[sum1][sum2]!= 0:\n        return dp[sum1][sum2]\n    if num[sum1-1] == sum2:\n        dp[sum1][sum2] = True\n        return True\n    if num[sum1-1] < sum2:\n        dp[sum1][sum2] = can_partition_helper(num,sum1-1,sum2-num[sum1-1],dp)\n    return dp[sum1][sum2]\ndef can_partition(num):\n    '''\n    Write a python function to check if a given number can be partitioned into two parts such that the sum of both parts is equal. \n    '''\n    n = len(num)\n    dp = ["
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    count = 0\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    if n1!= n2 :\n        return -1\n    \n    for i in range(0,n1):\n        if str1[i]!= str2[i] :\n            if str1[i] == \"0\" and str2[i] == \"1\" :\n                count = count + 1\n            if str1[i] == \"1\" and str2[i] == \"0\" :\n                count = count + 1\n    return count\n        \n    \n    \n    \n    \n    \nstr1 = input()\nstr2 = input()\nprint(min_Swaps(str1,str2)"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        if type(item) is tuple:\n            size += tuple_size(item)\n        else:\n            size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_list=[]\n    for item in tuple_list:\n        size=sys.getsizeof(item)\n        size_list.append(size)\n    return size_list\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    def get_size(tuple_value):\n        return sys.getsizeof(tuple_value)\n    return tuple([get_size(value) for value in tuple_list])\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        temp = arr1\n        arr1 = arr2\n        arr2 = temp\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    if not arr1:\n        return arr2[k - 1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    \n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m, n = len(arr1), len(arr2)\n    # arr1 is shorter\n    if m < n:\n        temp, arr1 = arr1, arr2\n        m, n = n, m\n    # arr1 has enough elements\n    if m == 0:\n        return arr2[k-1]\n    elif k == 1:\n        return min(arr1[0], arr2[0])\n    else:\n        i1 = 0\n        i2 = 0\n        # iterate while they have enough elements\n        while k > 1:\n            if i1 == m:\n                return arr2[k-1]\n            elif i2 == n:\n                return arr1[k-1]\n            if arr1[i1] < arr2[i2]:\n                i1 += 1\n            else:\n                i2 += 1\n            k -= 1\n        if i1 == m:\n            return arr2[k-1]\n        else:\n            return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k <= 0 or k > len(arr1) + len(arr2):\n        return None\n    elif len(arr1) == 0:\n        return arr2[k-1]\n    elif len(arr2) == 0:\n        return arr1[k-1]\n    elif k == 1:\n        return min(arr1[0], arr2[0])\n    else:\n        p1 = min(k//2, len(arr1))\n        p2 = k - p1\n        if arr1[p1-1] < arr2[p2-1]:\n            return find_kth(arr1[p1:], arr2, p2)\n        elif arr1[p1-1] > arr2[p2-1]:\n            return find_kth(arr1, arr2[p2:], p1)\n        else:\n            return arr1[p1-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[0] < arr2[0]:\n        return find_kth(arr2, arr1, k)\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = k // 2 - 1\n    j = k - 1 - i\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1[i + 1:], arr2, k - i - 1)\n    else:\n        return find_kth(arr1, arr2[j + 1:], k - j - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[0] < arr2[0]:\n        arr1, arr2 = arr2, arr1\n    elif arr1[0] == arr2[0]:\n        if len(arr1) == k:\n            return arr1[0]\n        elif len(arr1) > k:\n            arr1 = arr1[1:]\n        elif len(arr2) > k:\n            arr2 = arr2[1:]\n    if len(arr1) < k:\n        return arr2[k - len(arr1)]\n    elif len(arr2) < k:\n        return arr1[k - len(arr2)]\n    return arr1[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_pointer, arr2_pointer = 0, 0\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return get_kth(arr1, arr2, k, 0, len(arr1)-1, 0, len(arr2)-1)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong = 0\n    number = str(number)\n    for digit in number:\n        armstrong += int(digit) ** len(number)\n    return armstrong == int(number)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # write your code here\n    def digits_of_number(number):\n        number_string = str(number)\n        number_list = list(number_string)\n        return number_list\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum = 0\n    for i in str(number):\n        sum += int(i) ** length\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #method 1: with for loop\n    #number = int(number)\n    #sum = 0\n    #for i in str(number):\n    #    sum += int(i)**3\n    #return sum == number\n    \n    #method 2: without for loop\n    #return sum(int(i)**3 for i in str(number)) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong_check = 0\n    armstrong_value = number\n    while number > 0:\n        remainder = number % 10\n        armstrong_check += remainder ** 3\n        number = number // 10\n    if armstrong_value == armstrong_check:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_digits = len(str(number))\n    # total = 0\n    # number_copy = number\n    # while number_copy!= 0:\n    #     remainder = number_copy % 10\n    #     number_copy = number_copy // 10\n    #     total += remainder ** num_digits\n    # if total == number:\n    #     return True\n    # else:\n    #     return False\n    # OR\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    temp=number\n    while temp>0:\n        rem=temp%10\n        sum=sum+rem**3\n        temp=temp//10\n    if number==sum:\n        print(number,\"is an armstrong number.\")\n    else:\n        print(number,\"is not an armstrong number.\")\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum = 0\n    for i in str(number):\n        sum += int(i) ** length\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    number_string = str(number)\n    number_string_length = len(number_string)\n    for i in range(number_string_length):\n        total += int(number_string[i])**number_string_length\n    if total == number:\n        print('Given number is armstrong')\n    else:\n        print('Given number is not armstrong')\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    while(n>0):\n        a = n % 10\n        sum = sum + pow(a, 3)\n        n = int(n / 10)\n    if sum == number:\n        print(f'{number} is an armstrong number.')\n    else:\n        print(f'{number} is not an armstrong number.')\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for x in range(number + 1):\n        sum = sum + x\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for x in range(0,number+1):\n        sum += x\n    return sum\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Please enter number to calculate sum and average:\\n\"))\n    if n < 0:\n        print(\"Enter positive number\\n\")\n    else:\n        sum = n * (n + 1) / 2\n        average = sum / n\n        print(\"Sum is %.2f and average is %.2f\" % (sum, average))\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    average=0\n    for x in range(number):\n        sum+=x\n        average+=1\n    average=sum/average\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum = sum + i\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    avg=0\n    for i in range(1,number+1):\n        sum=sum+i\n        avg=sum/number\n    print(\"sum of first\",number,\"natural number is\",sum)\n    print(\"avg of first\",number,\"natural number is\",avg)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    for x in range(number+1):\n        sum+=x\n    average=sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = (number * (number + 1))/2\n    print(sum_num)\n    average = sum_num/number\n    print(average)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    sum, average = 0, 0\n    \n    for i in range(1, number + 1):\n        sum += i\n        average = sum/i\n    return sum, average\n    \n    \ndef highest_lowest(number):\n    '''\n    Write a function to find highest and lowest of n natural numbers.\n    '''\n    high, low = 0, 0\n    \n    for i in range(1, number + 1):\n        if i > high:\n            high = i\n        if i < low:\n            low = i\n    return high, low\n    \n    \ndef fibonacci(number):\n    '''\n    Write a function to find nth Fibonacci number.\n    '''\n    a, b = 0, 1\n    for i in range(number):\n        a, b = b, a + b\n    return a\n    \n    \ndef factorial(number):\n    '''\n    Write a function to find factorial of number.\n    '''\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial *= i\n    return factorial\n    \n    \ndef prime(number):\n    '''\n    Write a function to check whether given number is prime.\n    '''\n    if number == 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef palindrome(number):\n    '''\n    Write a function to check whether given number is palindrome or not.\n    '''\n    return str(number) == str(number)[::-1]\n    \n    \ndef prime_factors(number):\n    '''\n    Write a function to find prime factors of given number.\n    '''\n    prime_factors = []\n    for i in range(2, number + 1):\n        if number % i == 0:\n            if prime(i):\n                prime_factors.append(i)\n            else:\n                prime_factors += prime_factors(i)\n    return prime_factors\n    \n    \ndef is_pandigital(number):\n    '''\n    Write a function to check whether given number is pandigital or not.\n    '''\n    return set(str(number)) == set('123456789')\n    \n    \ndef fibonacci_sum_squares(number):\n    '''\n    Write a function to find fibonacci sum of squares of number.\n    '''\n    sum_squares = 0\n    \n    for i in range(2, number + 1):\n        sum_squares += (fibonacci(i) ** 2)\n    return sum_squares\n    \n    \ndef fibonacci_sum_squares_seq(number):\n    '''\n    Write a function to return fibonacci sum of squares of number using sequence.\n    '''\n    return sum(map(lambda x: (x ** 2), fibonacci_sequence(number)))\n    \n    \ndef fibonacci_sum_squares_numpy(number):\n    '''\n    Write a function to return fibonacci sum of squares of number using numpy.\n    '''\n    return numpy.sum(numpy.array(fibonacci_sequence(number)) ** 2)\n    \n    \ndef fibonacci_sum_cubes(number):\n    '''\n    Write a function to return fibonacci sum of cubes of number using sequence.\n    '''\n    return sum(map(lambda x: (x ** 3), fibonacci_sequence(number)))\n    \n    \ndef fibonacci_sum_cubes_numpy(number):\n    '''\n    Write a function to return fibonacci sum of cubes of number using numpy.\n    '''\n    return numpy.sum(numpy.array(fibonacci_sequence(number)) ** 3)\n    \n    \ndef fibonacci_sum_squares_numpy(number):\n    '''\n    Write a function to return fibonacci sum of squares of number using numpy.\n    '''\n    return numpy.sum(numpy.array(fibonacci_sequence(number)) ** 2)\n    \n    \ndef fibonacci_sum_cubes_numpy(number):\n    '''\n    Write a function to return fibonacci sum of cubes of number using numpy.\n    '''\n    return numpy.sum(numpy.array(fibonacci_sequence(number)) ** 3)\n    \n    \ndef nth_fibonacci_number(number):\n    '''\n    Write a function to find nth fibonacci number using sequence.\n    '''\n    return fibonacci(number)\n    \n    \ndef nth_fibonacci_number_numpy(number):\n    '''\n    Write a function to find nth fibonacci number using numpy.\n    '''\n    return numpy.sum(numpy.array(fibonacci_sequence(number)))\n    \n    \ndef nth_fibonacci_number_modulo(number, modulo):\n    '''\n    Write a function to find nth fibonacci number modulo using sequence.\n    '''\n    return fibonacci(number) % modulo\n    \n    \ndef nth_fibonacci_number_modulo_numpy(number, modulo):\n    '''\n    Write a function to find nth fibonacci number modulo using numpy.\n    '''\n    return numpy.sum(numpy.array(fibonacci_sequence(number))) % modulo\n    \n    \ndef fibonacci_sequence(number):\n    '''\n    Write a function to return fibonacci sequence of given number using sequence.\n    '''\n    fibonacci_sequence = []\n    a, b = 0, 1\n    for i in range(number):\n        fibonacci_sequence.append(a)\n        a, b = b, a + b\n    return fibonacci_sequence\n    \n    \ndef fibonacci_sequence_numpy(number):\n    '''\n    Write a function to return fibonacci sequence of given number using numpy.\n    '''\n    return numpy.array(fibonacci_sequence(number))\n    \n    \ndef fibonacci_sequence_modulo(number, modulo):\n    '''\n    Write a function to return fibonacci sequence of given number modulo using sequence.\n    '''\n    fibonacci_sequence = []\n    a, b = 0, 1\n    for i in range(number):\n        fibonacci_sequence.append(a)\n        a, b = b, a % modulo\n    return fibonacci_sequence\n    \n    \ndef fibonacci_sequence_modulo_numpy(number, modulo):\n    '''\n    Write a function to return fibonacci sequence of given number modulo using numpy.\n    '''\n    return numpy.array(fibonacci_sequence_modulo(number, modulo))\n    \n    \ndef fibonacci_sequence_sum_squares(number):\n    '''\n    Write a function to return fibonacci sum of squares of given number using sequence.\n    '''\n    fibonacci_sequence = []\n    a, b = 0, 1\n    for i in range(number):\n        fibonacci_sequence.append(a ** 2)\n        a, b = b, (a + b) ** 2\n    return fibonacci_sequence\n    \n    \ndef fibonacci_sequence_sum_squares_numpy(number):\n    '''\n    Write a function to return fibonacci sum of squares of given number using numpy.\n    '''\n    return numpy.array(fibonacci_sequence_sum_squares(number))\n    \n    \ndef fibonacci_sequence_sum_cubes(number):\n    '''\n    Write a function to return fibonacci sum of cubes of given number using sequence.\n    '''\n    fibonacci_sequence = []\n    a, b = 0, 1\n    for i in range(number):\n        fibonacci_sequence.append(a ** 3)\n        a, b = b, (a + b) ** 3\n    return fibonacci_sequence\n    \n    \ndef fibonacci_sequence_sum_cubes_numpy(number):\n    '''\n    Write a function to return fibonacci sum of cubes of given number using numpy.\n    '''\n    return numpy.array("
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0; \n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # for i in str1:\n    #     if str1.count(i) > 1:\n    #         return i\n    dict_ch = {}\n    for i in str1:\n        if i not in dict_ch:\n            dict_ch[i] = 1\n        else:\n            dict_ch[i] += 1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # if len(str1) > 0:\n    #     first_repeated_char = ''\n    #     for char in str1:\n    #         if str1.count(char) > 1:\n    #             first_repeated_char = char\n    #             break\n    #     return first_repeated_char\n    # else:\n    #     return None\n    first_repeated_char = ''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                first_repeated_char = str1[i]\n                break\n            if first_repeated_char!= '':\n                break\n    return first_repeated_char\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return [letter for letter in str1 if str1.count(letter) > 1]\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    unique_chars = set()\n    for i in str1:\n        if i in unique_chars:\n            return i\n        else:\n            unique_chars.add(i)\n    return \"No repeated character\"\nprint(first_repeated_char(\"abcd\"))\nprint(first_repeated_char(\"abcdabcd\"))\nprint(first_repeated_char(\"abcdabcdabde\"))\nprint(first_repeated_char(\"abcdee\"))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(\"-------------------\")\n    print(\"first_repeated_char\")\n    str2 = ''\n    for i in str1:\n        if str1.count(i)>1:\n            str2 = str2 + i\n    print(str2)\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    result = False\n    for i in set(str1):\n        if str1.count(i) == 1:\n            return i\n    return result\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if(str1.count(i) > 1):\n            return i\n    return -1\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        if len(str(i)) == len(set(str(i))):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [ludic(n) for n in range(1,n+1)]"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    for i in range(n):\n        ludic = []\n        for j in range(i):\n            if (i%(j+1)) == 0:\n                ludic.append(j+1)\n        if len(ludic) == i:\n            ludic.append(i)\n            return ludic\n    return ludic\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return []\n    res = [n]\n    k = 2\n    while n!= 1:\n        if n % k == 0:\n            n //= k\n            res.append(k)\n        else:\n            k += 1\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def count_adds(num):\n        n = list(str(num))\n        adds = 0\n        for i in range(len(n)):\n            if n[i] == '1':\n                adds += 1\n        return adds\n    ludic = []\n    for i in range(n):\n        if count_adds(i) < n - i:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(1, n):\n        if num == num_to_list(num):\n            ludic.append(num)\n            for n in range(1, num):\n                if num == num_to_list(n) or num_to_list(num_to_list(n)) == num:\n                    ludic.append(n)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if i**3 == i*i*i:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if str(i)[::-1] == str(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [0]\n    for i in range(1, n+1):\n        ludic.append(i)\n        for j in range(i-1, -1, -1):\n            if (ludic[i] == 0) and (ludic[j]*2 == i):\n                ludic[i] = j\n            elif (ludic[i] == 0) and (ludic[j]*2!= i):\n                ludic[i] = ludic[j]\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s=list(s)\n    l = len(s)\n    i = 0\n    while i<l:\n        if s[i]==\" \":\n            s[i]=\"\"\n            for j in range(i+1,l):\n                if s[j]==\" \":\n                    s[j]=\"\"\n                    i=j\n                    break\n                s[j]=\"\"\n                i=j\n        i+=1\n    s=\"\".join(s)\n    return s\nprint(reverse_words(\"the sky is blue\"))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_split = s.split(' ')\n    s_split.reverse()\n    return''.join(s_split)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word_list = s.split(\" \")\n    reversed_list = [word[::-1] for word in word_list]\n    return \" \".join(reversed_list)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return ''\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    list = s.split()\n    list.reverse()\n    return''.join(list)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    return''.join(s[::-1])"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) < 2:\n        return s\n    s = ''.join(reversed(s))\n    s = re.sub('(?<=\\S) ','', s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(words[::-1])\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    return s[::-1].casefold() == s.casefold()\n    \ndef is_pangram(s, alphabet='abcdefghijklmnopqrstuvwxyz'):\n    '''\n    Write a function to check whether a given string is a pangram or not.\n    '''\n    return set(alphabet) <= set(s.casefold())\n    \ndef in_range(nums, a, b):\n    '''\n    Write a function to check whether a given list of integers is within a given range or not.\n    '''\n    return all(a <= num <= b for num in nums)\n    \ndef non_decreasing(nums):\n    '''\n    Write a function to check whether a given list of integers is non-decreasing or not.\n    '''\n    return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\n    \ndef in_order(nums):\n    '''\n    Write a function to check whether a given list of integers is in ascending order or not.\n    '''\n    return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    \ndef is_unique(s):\n    '''\n    Write a function to check whether a given string has all unique characters or not.\n    '''\n    return len(set(s)) == len(s)\n    \ndef has_double(nums):\n    '''\n    Write a function to check whether a given list of integers has a pair of integers that adds up to a given number.\n    '''\n    return any(nums[i] + nums[j] == nums[j] + nums[i] for i in range(len(nums) - 1) for j in range(i + 1, len(nums)))\n    \ndef is_valid(s):\n    '''\n    Write a function to check whether a given string is a valid sequence of parentheses or not.\n    '''\n    m = {'(': ')', '{': '}', '[': ']'}\n    stack = []\n    for ch in s:\n        if ch in m:\n            stack.append(ch)\n        elif m[stack.pop()]!= ch:\n            return False\n    return len(stack) == 0\n    \ndef is_valid_braces(s):\n    '''\n    Write a function to check whether a given string is a valid sequence of parentheses or not.\n    '''\n    m = {'(': ')', '[': ']', '{': '}'}\n    stack = []\n    for ch in s:\n        if ch in m:\n            stack.append(ch)\n        elif m[stack.pop()]!= ch:\n            return False\n    return len(stack) == 0\n    \ndef valid_parentheses(s):\n    '''\n    Write a function to check whether a given string is a valid sequence of parentheses or not.\n    '''\n    count = 0\n    m = {')': '(', ']': '[', '}': '{'}\n    for ch in s:\n        if ch in m:\n            count += 1\n        elif m[ch]!= count:\n            return False\n        else:\n            count -= 1\n    return count == 0\n    \ndef all_divisible_by_k(nums, k):\n    '''\n    Write a function to check whether a given list of integers are all divisible by a given number.\n    '''\n    return all(n % k == 0 for n in nums)\n    \ndef max_consecutive_ones(nums):\n    '''\n    Write a function to find the longest subarray in the array that contains only 1s.\n    '''\n    max_len = 0\n    cur_len = 0\n    count = 0\n    for num in nums:\n        if num == 1:\n            cur_len += 1\n            count += 1\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n            cur_len = 0\n    return max(max_len, cur_len)\n    \ndef find_missing_element(nums, total):\n    '''\n    Write a function to find the missing number in a given array of integers, whose sum is equal to the given integer.\n    '''\n    if len(nums) == 0:\n        return total\n    return sum(nums) - (total * (len(nums) + 1)) // len(nums)\n    \ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a given number.\n    '''\n    if n < 0:\n        raise ValueError('Factorial of a negative number is not possible.')\n    return functools.reduce(lambda x, y: x * y, range(1, n + 1))\n    \ndef fib(n):\n    '''\n    Write a function to compute the Fibonacci number of a given number.\n    '''\n    return n if n in (0, 1) else fib(n - 1) + fib(n - 2)\n    \ndef get_fib_term(n):\n    '''\n    Write a function to compute the nth term in the Fibonacci sequence.\n    '''\n    return int(((1 + 5 ** 0.5) / 2) ** n / 5 ** 0.5)\n    \ndef get_fib_seq(n):\n    '''\n    Write a function to get a Fibonacci sequence of given length.\n    '''\n    return [get_fib_term(i) for i in range(n)]\n    \ndef get_input():\n    '''\n    Write a function to get a string input from the user.\n    '''\n    return input()\n    \ndef get_inputs(n):\n    '''\n    Write a function to get n inputs from the user.\n    '''\n    return input().split()\n    \ndef get_input_int(prompt):\n    '''\n    Write a function to get an input from the user where the input is an integer.\n    '''\n    return int(input(prompt))\n    \ndef print_grid(n):\n    '''\n    Write a function to print a grid of n * n.\n    '''\n    for i in range(n):\n        print(''.join(['#' for j in range(n)]))\n    \ndef get_coordinates(n):\n    '''\n    Write a function to get the coordinates of the given point within a grid of n * n.\n    '''\n    return [int(n) for n in input().split()]\n    \ndef find_missing_number(nums):\n    '''\n    Write a function to find the missing number in a given array of integers.\n    '''\n    return (1 + len(nums)) * len(nums) // 2 - sum(nums)\n    \ndef print_rangoli(size):\n    '''\n    Write a function to print a rangoli of a given size.\n    '''\n    alphabet = string.ascii_lowercase\n    for i in range(size):\n        row = '-'.join(alphabet[size - 1: i:-1] + alphabet[i:size])\n        print(row.center(4 * size - 3, '-'))\n    for i in range(size - 2, -1, -1):\n        row = '-'.join(alphabet[size - 1: i:-1] + alphabet[i:size])\n        print(row.center(4 * size - 3, '-'))\n    \ndef list_transformation(nums):\n    '''\n    Write a function to change the values of given numbers so that all the even numbers appear before the odd numbers in a given array.\n    '''\n    return sorted(nums, key=lambda n: n % 2)\n    \ndef is_subsequence(s, t):\n    '''\n    Write a function to check whether a given string is a subsequence of a given string.\n    '''\n    return all(ch in t for ch in s)\n    \ndef is_min_heap(nums):\n    '''\n    Write a function to check whether a given array o"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num % 2 == 0 and num > 2:\n        return False\n    for i in range(3,int(num**0.5)+1,2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num < 2 or num % 2 == 0:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number.\")\n                print(i, \"times\", num//i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2 and num % 2 == 0:\n        return False\n    else:\n        for n in range(3, num):\n            if num % n == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,\"is not a prime number\")\n                break\n        else:\n            print(num,\"is a prime number\")\n    else:\n        print(num,\"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number.\")\n                break\n        else:\n            print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,\"is not a prime number\")\n                print(i,\"times\",num//i,\"is\",num)\n                break\n        else:\n            print(num,\"is a prime number\")\n            \n    else:\n        print(num,\"is not a prime number\")\n    \n    \ndef factors_of_prime(num):\n    '''\n    Write a function to print all factors of a given prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(i)\n    \n    else:\n        print(\"Enter a prime number\")\n    \n    \ndef prime_factors(num):\n    '''\n    Write a function to return the prime factors of a given integer.\n    '''\n    factors = []\n    \n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                if i in factors:\n                    pass\n                else:\n                    factors.append(i)\n        if factors == []:\n            print(num,\"is a prime number\")\n        else:\n            print(num,\"is not a prime number\")\n            print(\"Factors of\",num,\"are\",end='')\n            print(factors)\n        \n    else:\n        print(\"Enter a prime number\")\n        \n        \ndef factorial_calc(num):\n    '''\n    Write a function to return the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,num+1):\n        fact = fact * i\n    print(num,\"! is\",fact)\n    \n    \ndef fibonacci(num):\n    '''\n    Write a function to return the nth fibonacci number.\n    '''\n    a,b = 0,1\n    for i in range(num):\n        a,b = b,a+b\n    print(num,\"th fibonacci number is\",a)\n    \n    \ndef fibonacci_list(num):\n    '''\n    Write a function to return the first n fibonacci numbers.\n    '''\n    a,b = 0,1\n    fibonacci_list = []\n    for i in range(num):\n        a,b = b,a+b\n        fibonacci_list.append(a)\n    print(num,\"fibonacci numbers are\",fibonacci_list)\n    \n    \ndef prime_in_list(num):\n    '''\n    Write a function to check if all elements of a list are prime numbers or not.\n    '''\n    if num > 1:\n        for i in num:\n            for j in range(2,i):\n                if i%j == 0:\n                    print(i,\"is not a prime number\")\n                    break\n            else:\n                print(i,\"is a prime number\")\n    else:\n        print(\"Enter at least two numbers\")\n    \n    \ndef reverse_number(num):\n    '''\n    Write a function to return the reversed number.\n    '''\n    rev = 0\n    while num:\n        rev = (rev * 10) + (num % 10)\n        num = num // 10\n    print(\"The reversed number is\",rev)\n    \n    \ndef palindrome(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    temp = num\n    rev = 0\n    while num:\n        rev = (rev * 10) + (num % 10)\n        num = num // 10\n    if temp == rev:\n        print(\"The number is palindrome\")\n    else:\n        print(\"The number is not palindrome\")\n        \n        \ndef print_table(num):\n    '''\n    Write a function to print a table of given number.\n    '''\n    for i in range(1,11):\n        print(num,\"x\",i,\"=\",num*i)\n    \n    \ndef max_num(num1,num2):\n    '''\n    Write a function to return the maximum of two numbers.\n    '''\n    if num1 > num2:\n        print(num1,\"is greater than\",num2)\n    elif num2 > num1:\n        print(num2,\"is greater than\",num1)\n    else:\n        print(\"Both numbers are equal\")\n    \n    \ndef min_num(num1,num2):\n    '''\n    Write a function to return the minimum of two numbers.\n    '''\n    if num1 < num2:\n        print(num1,\"is lesser than\",num2)\n    elif num2 < num1:\n        print(num2,\"is lesser than\",num1)\n    else:\n        print(\"Both numbers are equal\")\n    \n    \ndef sum_num(num1,num2):\n    '''\n    Write a function to return the sum of two numbers.\n    '''\n    print(num1,\"+\",num2,\"=\",num1+num2)\n    \n    \ndef sub_num(num1,num2):\n    '''\n    Write a function to return the subtraction of two numbers.\n    '''\n    print(num1,\"-\",num2,\"=\",num1-num2)\n    \n    \ndef mul_num(num1,num2):\n    '''\n    Write a function to return the multiplication of two numbers.\n    '''\n    print(num1,\"*\",num2,\"=\",num1*num2)\n    \n    \ndef div_num(num1,num2):\n    '''\n    Write a function to return the division of two numbers.\n    '''\n    print(num1,\"/\",num2,\"=\",num1/num2)\n    \n    \ndef power_num(num1,num2):\n    '''\n    Write a function to return the power of two numbers.\n    '''\n    print(num1,\"^\",num2,\"=\",num1**num2)\n    \n    \ndef sqr_num(num1):\n    '''\n    Write a function to return the square of a number.\n    '''\n    print(\"The square of\",num1,\"is\",num1**2)\n    \n    \ndef cube_num(num1):\n    '''\n    Write a function to return the cube of a number.\n    '''\n    print(\"The cube of\",num1,\"is\",num1**3)\n    \n    \ndef int_to_str(num):\n    '''\n    Write a function to return the string representation of the given integer.\n    '''\n    print(num,\"in string form is\",str(num))\n    \n    \ndef int_to_hex(num):\n    '''\n    Write a function to return the hexadecimal representation of the given integer.\n    '''\n    print(num,\"in hexadecimal form is\",hex(num))\n    \n    \ndef int_to_oct(num):\n    '''\n    Write a function to return the octal representation of the given integer.\n    '''\n    print(num,\"in octal form is\",oct(num))\n    \n    \ndef int_to_bin(num):\n    '''\n    Write a function to return the binary representation of the given integer.\n    '''\n    print(num,\"in binary form is\",bin(num))\n    \n    \ndef hex_to_int(num):\n    '''\n    Write a function to return the integer representation of the given hexadecimal number.\n    '''\n    print(num,\"in integer form is\",int(num,16))\n    \n    \ndef oct_to_int(num):\n    '''\n    Write a function to return the integer representation of the given octal number.\n    '''\n    print(num,\"in integer form is\",int(num,8))\n    \n    \ndef bin_to_int(num):\n    '''\n    Write a function to return the integer representation of the given binary number.\n    '''\n    print(num,\"in integer form is\",int(num,2))\n    \n    \ndef hex_to_float(num):\n    '''\n    Write a function to return the floating point representation of the given hexadecimal number.\n    '''\n    print(num,\"in floating point form is\",float.fromhex(num))\n    \n    \ndef oct_to_float(num):"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num % 2 == 0 and num!= 2:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = float(degree)\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.search(pattern, text)\n    return matches.group() if matches else None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    print(\"\\n[+]Literals:\", result)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    return None, -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find all matches of pattern in text\n    matches = re.finditer(pattern, text)\n    \n    # iterate matches\n    for match in matches:\n        # print match.start(), match.end(), match.group()\n        print(\"%s: %s\" % (match.group(), match.start()))\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    l_pattern = re.compile(pattern)\n    literal = l_pattern.search(text)\n    if literal:\n        sub = text[literal.start():literal.end()]\n        return sub\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    return matches\n    \nif __name__ == \"__main__\":\n    my_text = \"\"\"\n    One really nice feature of Python is polymorphism: using the same operation\n    on different types of objects.\n    Let's talk about an elegant feature: slicing.\n    You can use this on a string as well as a list for example\n    'pybites'[0:2] gives 'py'.\n     The first value is inclusive and the last one is exclusive so\n    here we grab indexes 0 and 1, the letter p and y.\n      When you have a 0 index you can leave it out so can write this as 'pybites'[:2]\n    but here is the kicker: you can use this on a list too!\n    ['pybites', 'teaches', 'you', 'Python'][-2:] would gives ['you', 'Python']\n    and now you know about slicing from the end as well.\n    keep enjoying our bites!\n    \"\"\"\n    str_pattern = r'\\b[pP]y\\b'\n    list_pattern = r'\\w+e[pP]y\\b'\n    print(find_literals(my_text, str_pattern))\n    print(find_literals(my_text, list_pattern)"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    for match in re.finditer(pattern, text):\n        match_text = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return match_text, start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matched_substring = re.search(pattern, text)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    if (n == 0):\n        return bell\n    \n    for i in range(1,n+1):\n        bell = bell + i\n    return bell\n    \nprint(bell_Number(1))\nprint(bell_Number(2))\nprint(bell_Number(3))\nprint(bell_Number(4))\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bells = [1]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1]\n    for i in range(2, n + 1):\n        bell.append(bell[i - 1] + bell[i - 2])\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell + (i)\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n    \ndef main():\n    bell_Number(4)\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1, 1]\n    for i in range(2, n + 1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]\ndef fib(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n]\ndef factorial(n):\n    '''\n    Write a python function to find the nth factorial.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact\ndef _nCr(n, r):\n    '''\n    Write a python function to find the number of ways to choose r elements from n elements.\n    '''\n    nCr = factorial(n) // factorial(r) // factorial(n-r)\n    return nCr\ndef binomial_coeff(n, r):\n    '''\n    Write a python function to find the binomial coefficient.\n    '''\n    bc = _nCr(n, r)\n    return bc\ndef harmonic(n):\n    '''\n    Write a python function to find the nth harmonic number.\n    '''\n    return (1/n)\ndef _partition(n, m, s):\n    '''\n    Write a python function to find the ways to partition n elements into m groups of equal sum s.\n    '''\n    dp = [[0 for i in range(s+1)] for j in range(m+1)]\n    for i in range(m+1):\n        dp[i][0] = 1\n    for i in range(1, m+1):\n        for j in range(1, s+1):\n            if j < s:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[m][s]\ndef partition(n, m, s):\n    '''\n    Write a python function to find the ways to partition n elements into m groups of equal sum s.\n    '''\n    return _partition(n, m, s)\ndef _combinations(n, r):\n    '''\n    Write a python function to find the combinations of r elements from n elements.\n    '''\n    dp = [[0 for i in range(r+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, r+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][r]\ndef combinations(n, r):\n    '''\n    Write a python function to find the combinations of r elements from n elements.\n    '''\n    return _combinations(n, r)\ndef _permutations(n, r):\n    '''\n    Write a python function to find the permutations of r elements from n elements.\n    '''\n    dp = [[0 for i in range(r+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, r+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][r]\ndef permutations(n, r):\n    '''\n    Write a python function to find the permutations of r elements from n elements.\n    '''\n    return _permutations(n, r)\ndef _combinations_with_replacement(n, r):\n    '''\n    Write a python function to find the combinations with replacement of r elements from n elements.\n    '''\n    dp = [[0 for i in range(r+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, r+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][r]\ndef combinations_with_replacement(n, r):\n    '''\n    Write a python function to find the combinations with replacement of r elements from n elements.\n    '''\n    return _combinations_with_replacement(n, r)\ndef _power(x, n):\n    '''\n    Write a python function to find the nth power of a number.\n    '''\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = dp[i-1]*x\n    return dp[n]\ndef power(x, n):\n    '''\n    Write a python function to find the nth power of a number.\n    '''\n    return _power(x, n)\ndef _power_two(x, n):\n    '''\n    Write a python function to find the nth power of a number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return x\n    half = _power_two(x, n//2)\n    if n % 2 == 0:\n        return half * half\n    else:\n        return half * half * x\ndef power_two(x, n):\n    '''\n    Write a python function to find the nth power of a number.\n    '''\n    return _power_two(x, n)\ndef _sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    if n == 0:\n        return 0\n    return n%10 + _sum_of_digits(int(n/10))\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return _sum_of_digits(n)\ndef _sum_of_digits_two(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    if n < 10:\n        return n\n    return (n%10) + _sum_of_digits_two(int(n/10))\ndef sum_of_digits_two(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return _sum_of_digits_two(n)\ndef _generate_palindromic_string(n):\n    '''\n    Write a python function to generate a palindromic string of length n.\n    '''\n    if n == 1:\n        return 'a'\n    if n == 2:\n        return 'ab'\n    if n == 3:\n        return 'aba'\n    dp = ['a', 'b', 'a', 'b']\n    for i in range(4, n+1):\n        s = ''\n        for j in range(i-1, 0, -1):\n            s += dp[j-1]\n        dp.append(s)\n    return dp[n-1]\ndef generate_palindromic_string(n):\n    '''\n    Write a python function to generate a palindromic string of length n.\n    '''\n    return _generate_palindromic_string(n)\ndef _generate_palindromic_string_two(n):\n    '''\n    Write a python function to generate a palindromic string of length n.\n    '''\n    if n == 1:\n        return 'a'\n    if n == 2:\n        return 'ab'\n    if n == 3:\n        return 'aba'\n    dp = ['a', 'b']\n    for i in range(4, n+1):\n        s = ''\n        j = len(dp)-1\n        while j >= "
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            b+=1/i\n        else:\n            b-=1/i\n    return b\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0 for i in range(n+1)] \n    bell[0] = bell[1] = 1\n    for i in range(2, n+1): \n        bell[i] = bell[i-1] + bell[i-2] \n    return bell[n] \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[1,1,2,5], \n            [1,2,7,16,31], \n            [1,3,9,31,90,155], \n            [1,4,11,54,233,385,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040],\n            [1,5,15,43,240,720,1560,30240,531441,101449,183631,354294,558751,1196158,1847218,3236365,5079302,8771634,16777276,3048883,5649734,2258514,7516389]]\n    return bell[n-1][-1] \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell * i\n    return bell\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L <= len(list1):\n        return list1[:L-1]+list1[L:]\n    else:\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    list2 = []\n    for i in list1:\n        if i!= L:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return [i for i in list1 if i!= list1[L - 1]]\n    else:\n        return [i for i in list1 if i!= list1[L - 1]] + remove_kth_element(list1, L - 1)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1.pop(L)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(count == (L-1)):\n            list1.pop(i)\n            break\n        else:\n            count = count + 1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Method 1: iterate through the list\n    # return [list1.pop(k)]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L==0:\n        return list1\n    else:\n        return [list1[i] for i in range(len(list1)) if i!=L]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L = L - 1\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_col = []\n    for row in test_list:\n        max_of_col.append(max(row))\n    return max_of_col[N]\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column = []\n    for i in range(len(test_list)):\n        column.append(test_list[i][N])\n    return max(column)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            new_list.append(test_list[i][j])\n    return(max(new_list[N]))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(lambda x: x[N], test_list))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    for i in range(len(test_list)):\n        print(test_list[i])\n    print(N)\n    nth_column = []\n    for i in range(len(test_list)):\n        nth_column.append(test_list[i][N-1])\n    print(nth_column)\n    return max(nth_column)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 0 or N > len(test_list):\n        raise ValueError\n    if not test_list:\n        return 0\n    if N == 0:\n        return max(list(map(lambda x: x[0], test_list)))\n    return max(map(lambda x: x[N-1], test_list))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    columns = [column[N] for column in test_list]\n    return max(columns)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[j][N] for j in range(len(test_list))])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 0:\n        return \"Invalid input. N is less than 0.\"\n    if N > len(test_list):\n        return \"Invalid input. N is greater than the number of lists in the matrix.\"\n    new_list = []\n    for row in test_list:\n        new_list.append(row[N-1])\n    return max(new_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N] for i in range(len(test_list))])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst == []:\n        return []\n    elif type(lst[0])!= list:\n        return [[lst[0]]]\n    else:\n        new_lst = []\n        for l in lst:\n            new_lst.append([l[0], l[1]])\n        return [new_lst] + merge(lst[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_with_first_element = []\n    for sublist in lst:\n        lst_with_first_element.append(sublist[0])\n    print(lst_with_first_element)\n    \n    lst_with_second_element = []\n    for sublist in lst:\n        lst_with_second_element.append(sublist[1])\n    print(lst_with_second_element)\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return list(map(list, zip(*lst)))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(zip(*lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(i) for i in zip(*lst)]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1=[]\n    lst2=[]\n    for sub in lst:\n        lst1.append(sub[0])\n        lst2.append(sub[1])\n    return [lst1,lst2]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append([lst[i][0],lst[i][1]])\n    return new_list\nprint(merge([[2,3],[5,6],[7,8]]))\nprint(merge([[1,2],[3,4],[5,6]]))\nprint(merge([[5,6],[1,2],[3,4]]))\nprint(merge([[1,2]]))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new=[]\n    new1=[]\n    for i in lst:\n        new.append(i[0])\n        new1.append(i[1])\n    return [new,new1]\nprint(merge([[1,2],[3,4],[5,6]]))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = [sum(test_list[:x+1]) for x in range(len(test_list))]\n    return cummulative_sum_list\n    \nprint(cummulative_sum([1, 2, 3, 4, 5]))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(1, len(test_list)):\n        test_list[i] = test_list[i]+test_list[i-1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n        print(i)\n    print(sum)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for n in range(0, len(test_list)):\n        if n == 0:\n            test_list[n] = test_list[n]\n        else:\n            test_list[n] = test_list[n] + test_list[n-1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    i = 0\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n        i += 1\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[0:i]) for i in range(0,len(test_list)+1)]\n    #or\n    #return list(np.cumsum(test_list))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if len(test_list) == 1:\n            new_list.append(test_list[i])\n        else:\n            new_list.append(test_list[i] + new_list[i-1])\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    temp_list = []\n    for i in test_list:\n        temp_list.append(sum(i))\n    return temp_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    cum_list = []\n    for i in test_list:\n        sum += i\n        cum_list.append(sum)\n    return cum_list\n    \nprint(cummulative_sum((1,2,3,4,5)))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for i in range(0, len(nums)):\n        for j in range(0, len(nums[i])):\n            sum += nums[i][j]\n    return sum / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x) / len(x), zip(*nums)))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t)/len(t) for t in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    print(sum(nums[0])/len(nums[0]), sum(nums[1])/len(nums[1]), sum(nums[2])/len(nums[2]))\n    \n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum += j\n        average = sum / len(i)\n        result.append(average)\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    lst = []\n    for i in nums:\n        x = sum(i) / len(i)\n        lst.append(x)\n    return lst\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for t in nums:\n        sum += t[0] + t[1]\n    return sum / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    for i in nums:\n        count = 0\n        tot = 0\n        for n in i:\n            count += 1\n            tot += n\n        print(tot/count)\n    return\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(num)/len(num))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(i % j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(tuple_modulo_helper(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    new_list = []\n    for item in test_list1:\n        new_list.append(item % test_list2[test_list1.index(item)])\n    return tuple(new_list)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(i%j for i,j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for (x, y) in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i in range(0, len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert test_tup1[0] % test_tup2[0] == test_tup1[1] % test_tup2[1] == test_tup1[2] % test_tup2[2]\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # The number of jumps will be the min of no. of jumps needed to move from (0, 0)\n    # to (d, 0), and min of no. of jumps needed to move from (d, 0) to (0, 0).\n    if d == 0:\n        return steps\n    else:\n        return min(steps, 1 + min_Jumps(steps+1, d-1))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    elif d < 0: \n        return -1\n    jumps = 0\n    for i in steps: \n        jumps += 1\n        if i == d: \n            return jumps\n        else: \n            jumps += min_Jumps(steps, i - 1)\n    return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # stores the amount of ways to reach a point (d, 0) from origin\n    # will be used to find the minimum number of jumps from origin to reach (d, 0)\n    dp = [[0 for x in range(steps + 1)] for y in range(d + 1)] \n    # initializing the table to 0 at all indices\n    # with index 0 and step 0, which is the same \n    # point, at index 0 also\n    dp[0][0] = 1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if(d==0):\n        return steps\n    elif(d>0):\n        return min(min_Jumps(steps+1, d-1), min_Jumps(steps+1, d//2) + steps)\n    else:\n        return min_Jumps(steps+1, d+1)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # If distance is 0, no jumps are needed.\n    if d == 0: \n        return 0\n    \n    # If distance is greater than 0, then there is at-least one jump needed.\n    if d > 0: \n        return 1\n    \n    # If distance is less than 0, then there are infinite number of possible jumps.\n    if d < 0: \n        return float('inf')\n    \n    # If the distance is a float, then there could be fractional number of jumps.\n    if type(d) == float: \n        return float('inf')\n    \n    # Initialize a minimum number of jumps required.\n    min_Jumps = float('inf')\n    \n    # Iterate for all possible values of d.\n    for i in range(steps): \n        \n        # If a particular value of d, is divisible by steps, then there is a solution.\n        if d % steps == 0: \n            min_Jumps = d // steps\n            break\n        \n        # Decrement the distance by one step.\n        d = d - 1\n    \n    # Return the minimum number of jumps needed.\n    return min_Jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return(min(abs(d-steps), abs(0 - steps)))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    if (steps == 0): return 0\n    if (steps == 1): return 1\n    if (steps == 2): return 2\n    if (steps == 3): return 3\n    if (steps == 4): return 4\n    if (steps == 5): return 5\n    if (steps == 6): return 6\n    if (steps == 7): return 7\n    if (steps == 8): return 8\n    if (steps == 9): return 9\n    if (steps == 10): return 10\n    if (steps == 11): return 11\n    if (steps == 12): return 12\n    if (steps == 13): return 13\n    if (steps == 14): return 14\n    if (steps == 15): return 15\n    if (steps == 16): return 16\n    if (steps == 17): return 17\n    if (steps == 18): return 18\n    if (steps == 19): return 19\n    if (steps == 20): return 20\n    if (steps == 21): return 21\n    if (steps == 22): return 22\n    if (steps == 23): return 23\n    if (steps == 24): return 24\n    if (steps == 25): return 25\n    if (steps == 26): return 26\n    if (steps == 27): return 27\n    if (steps == 28): return 28\n    if (steps == 29): return 29\n    if (steps == 30): return 30\n    if (steps == 31): return 31\n    if (steps == 32): return 32\n    if (steps == 33): return 33\n    if (steps == 34): return 34\n    if (steps == 35): return 35\n    if (steps == 36): return 36\n    if (steps == 37): return 37\n    if (steps == 38): return 38\n    if (steps == 39): return 39\n    if (steps == 40): return 40\n    if (steps == 41): return 41\n    if (steps == 42): return 42\n    if (steps == 43): return 43\n    if (steps == 44): return 44\n    if (steps == 45): return 45\n    if (steps == 46): return 46\n    if (steps == 47): return 47\n    if (steps == 48): return 48\n    if (steps == 49): return 49\n    if (steps == 50): return 50\n    if (steps == 51): return 51\n    if (steps == 52): return 52\n    if (steps == 53): return 53\n    if (steps == 54): return 54\n    if (steps == 55): return 55\n    if (steps == 56): return 56\n    if (steps == 57): return 57\n    if (steps == 58): return 58\n    if (steps == 59): return 59\n    if (steps == 60): return 60\n    if (steps == 61): return 61\n    if (steps == 62): return 62\n    if (steps == 63): return 63\n    if (steps == 64): return 64\n    if (steps == 65): return 65\n    if (steps == 66): return 66\n    if (steps == 67): return 67\n    if (steps == 68): return 68\n    if (steps == 69): return 69\n    if (steps == 70): return 70\n    if (steps == 71): return 71\n    if (steps == 72): return 72\n    if (steps == 73): return 73\n    if (steps == 74): return 74\n    if (steps == 75): return 75\n    if (steps == 76): return 76\n    if (steps == 77): return 77\n    if (steps == 78): return 78\n    if (steps == 79): return 79\n    if (steps == 80): return 80\n    if (steps == 81): return 81\n    if (steps == 82): return 82\n    if (steps == 83): return 83\n    if (steps == 84): return 84\n    if (steps == 85): return 85\n    if (steps == 86): return 86\n    if (steps == 87): return 87\n    if (steps == 88): return 88\n    if (steps == 89): return 89\n    if (steps == 90): return 90\n    if (steps == 91): return 91\n    if (steps == 92): return 92\n    if (steps == 93): return 93\n    if (steps == 94): return 94\n    if (steps == 95): return 95\n    if (steps == 96): return 96\n    if (steps == 97): return 97\n    if (steps == 98): return 98\n    if (steps == 99): return 99\n    if (steps == 100): return 100\n    if (steps == 101): return 101\n    if (steps == 102): return 102\n    if (steps == 103): return 103\n    if (steps == 104): return 104\n    if (steps == 105): return 105\n    if (steps == 106): return 106\n    if (steps == 107): return 107\n    if (steps == 108): return 108\n    if (steps == 109): return 109\n    if (steps == 110): return 110\n    if (steps == 111): return 111\n    if (steps == 112): return 112\n    if (steps == 113): return 113\n    if (steps == 114): return 114\n    if (steps == 115): return 115\n    if (steps == 116): return 116\n    if (steps == 117): return 117\n    if (steps == 118): return 118\n    if (steps == 119): return 119\n    if (steps == 120): return 120\n    if (steps == 121): return 121\n    if (steps == 122): return 122\n    if (steps == 123): return 123\n    if (steps == 124): return 124\n    if (steps == 125): return 125\n    if (steps == 126): return 126\n    if (steps == 127): return 127\n    if (steps == 128): return 128\n    if (steps == 129): return 129\n    if (steps == 130): return 130\n    if (steps == 131): return 131\n    if (steps == 132): return 132\n    if (steps == 133): return 133\n    if (steps == 134): return 134\n    if (steps == 135): return 135\n    if (steps == 136): return 136\n    if (steps == 137): return 137\n    if (steps == 138): return 138\n    if (steps == 139): return 139\n    if (steps == 140): return 140\n    if (steps == 141): return 141\n    if (steps == 142): return 142\n    if (steps == 143): return 143\n    if (steps == 144): return 144\n    if (steps == 145): return 145\n    if (steps == 146): return 146\n    if (steps == 147): return 147\n    if (steps == 148): return 148\n    if (steps == 149): return 149\n    if (steps == 150): return 150\n    if (steps == 151): return 151\n    if (steps == 152): return 152\n    if (steps == 153): return 153\n    if (steps == 154): return 154\n    if (steps == 155): return 155\n    if (steps == 156): return 156\n    if (steps == 157): return 157\n    if (steps == 158): return 158\n    if (steps == 159): return 159\n    if (steps == 160): return 160\n    if (steps == 161): return 161\n    if (steps == 162): return 162\n    if (steps == 163): return 163\n    if (steps == 164): return 164\n    if (steps == 165): return 165\n    if (steps == 166): return 166\n    if (steps == 167): return 167\n    if (steps == 168): return 168\n    if (steps == 169): return 169\n    if (steps == 170): return 170\n    if (steps == 171): return 171\n    if (steps == 172): return 172\n    if (steps == 173): return 173\n    if (steps == 174): return 174\n    if (steps == 175): return 175\n    if (steps == 176): return 176\n    if (steps == 177): return 177\n    if (steps == 178): return 178\n    if (steps == 179): return 179\n    if (steps == 180): return 180\n    if (steps == 181): return 181\n    if (steps == 182): return 182\n    if (steps == 183): return 183\n    if (steps == 184): return 184\n    if (steps == 185): return 185\n    if (steps == 186): return 186\n    if (steps == 187): return 187\n    if (steps == 188): return 188\n    if (steps == 189): return 189\n    if (steps == 190): return 190\n    if (steps == 191): return 191\n    if (steps == 192): return 192\n    if (steps == 193): return 193\n    if (steps == 194): return 194\n    if (steps == 195): return 195\n    if (steps == 196): return 196\n    if (steps == 197): return 197\n    if (steps == 198)"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 1 or d <= 0:\n        return -1\n    return min_Jumps_helper(steps, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d > steps:\n        return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # trivial case\n    if(d == 0):\n        return 0\n    # d is in (0, 1)\n    # 1. if d is even, d//2 jumps and (d//2, 0)\n    # 2. if d is odd, d//2 jumps and (d//2 + 1, 0)\n    else:\n        return min(d//2, min_Jumps(steps, d//2)) + 1 if d % 2 else min(d//2, min_Jumps(steps, d//2))\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert(len(nums1)==len(nums2))\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        if len(nums1)==len(nums2):\n            result=[]\n            for i in range(len(nums1)):\n                result.append(nums1[i]/nums2[i])\n            return result\n        else:\n            raise ValueError\n    except ValueError:\n        return 'Length of two lists does not match'\n        \ndef reverse_list(nums):\n    '''\n    Write a function to reverse the list element wise.\n    '''\n    try:\n        for i in range(len(nums)):\n            nums.append(nums.pop(0))\n        return nums\n    except ValueError:\n        return 'Error'\n        \ndef sum_of_list(nums):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    try:\n        for i in range(len(nums)):\n            nums.append(nums.pop(0))\n        return nums\n    except ValueError:\n        return 'Error'\n        \ndef sort_list(nums):\n    '''\n    Write a function to sort the list element wise.\n    '''\n    try:\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]>nums[j+1]:\n                    temp=nums[j]\n                    nums[j]=nums[j+1]\n                    nums[j+1]=temp\n        return nums\n    except ValueError:\n        return 'Error'\n        \ndef multiply_list(nums):\n    '''\n    Write a function to multiply the list element wise.\n    '''\n    try:\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]>nums[j+1]:\n                    temp=nums[j]\n                    nums[j]=nums[j+1]\n                    nums[j+1]=temp\n        return nums\n    except ValueError:\n        return 'Error'\n        \ndef count_div_numbers(nums):\n    '''\n    Write a function to count the number of divisors of each number in the list.\n    '''\n    try:\n        div_count=[0]*len(nums)\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[j]%nums[i]==0:\n                    div_count[i]+=1\n        return div_count\n    except ValueError:\n        return 'Error'\n        \ndef last_occurance_of_number(nums):\n    '''\n    Write a function to find the index of the last occurrence of a number in the list.\n    '''\n    try:\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]>nums[j+1]:\n                    temp=nums[j]\n                    nums[j]=nums[j+1]\n                    nums[j+1]=temp\n        return nums\n    except ValueError:\n        return 'Error'\n        \ndef last_occurance_of_number_index(nums,target):\n    '''\n    Write a function to find the index of the last occurrence of a number in the list.\n    '''\n    try:\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]>nums[j+1]:\n                    temp=nums[j]\n                    nums[j]=nums[j+1]\n                    nums[j+1]=temp\n        try:\n            return nums.index(target)\n        except ValueError:\n            return -1\n    except ValueError:\n        return 'Error'\n        \ndef min_of_list(nums):\n    '''\n    Write a function to find the minimum of the list.\n    '''\n    try:\n        min=nums[0]\n        for i in range(len(nums)):\n            if nums[i]<min:\n                min=nums[i]\n        return min\n    except ValueError:\n        return 'Error'\n        \ndef max_of_list(nums):\n    '''\n    Write a function to find the maximum of the list.\n    '''\n    try:\n        max=nums[0]\n        for i in range(len(nums)):\n            if nums[i]>max:\n                max=nums[i]\n        return max\n    except ValueError:\n        return 'Error'\n        \ndef check_pallindrome(nums):\n    '''\n    Write a function to check if the list is a pallindrome or not.\n    '''\n    try:\n        for i in range(len(nums)):\n            if nums[i]!=nums[len(nums)-1-i]:\n                return False\n        return True\n    except ValueError:\n        return 'Error'\n        \ndef check_pallindrome_index(nums):\n    '''\n    Write a function to find the index of the first occurrence of a palindrome in the list.\n    '''\n    try:\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]!=nums[len(nums)-1-j]:\n                    break\n                else:\n                    return j\n        return -1\n    except ValueError:\n        return 'Error'\n        \ndef check_pallindrome_list(nums):\n    '''\n    Write a function to find the list of palindromes in the list.\n    '''\n    try:\n        palindrome_list=[]\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]!=nums[len(nums)-1-j]:\n                    break\n                else:\n                    palindrome_list.append(nums[j])\n        return palindrome_list\n    except ValueError:\n        return 'Error'\n        \ndef remove_duplicates(nums):\n    '''\n    Write a function to remove the duplicates in the list.\n    '''\n    try:\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]>nums[j+1]:\n                    temp=nums[j]\n                    nums[j]=nums[j+1]\n                    nums[j+1]=temp\n        return nums\n    except ValueError:\n        return 'Error'\n        \ndef remove_duplicates_index(nums):\n    '''\n    Write a function to remove the duplicates in the list.\n    '''\n    try:\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]>nums[j+1]:\n                    temp=nums[j]\n                    nums[j]=nums[j+1]\n                    nums[j+1]=temp\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]==nums[j+1]:\n                    nums.pop(j+1)\n        return nums\n    except ValueError:\n        return 'Error'\n        \ndef rotate_array(nums):\n    '''\n    Write a function to rotate the list element wise by k number of elements.\n    '''\n    try:\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]>nums[j+1]:\n                    temp=nums[j]\n                    nums[j]=nums[j+1]\n                    nums[j+1]=temp\n        for i in range(len(nums)):\n            for j in range(len(nums)-1):\n                if nums[j]==nums[j+1]:\n                    nums.pop(j+1)\n        return nums\n    except ValueError:\n        return 'Error'\n    "
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == len(nums2):\n        return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n    else:\n        return False\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #first we will create a list of elements where the result of the element division will be the result\n    divlist=[]\n    #now we will loop over the lists to access the elements\n    for i in range(len(nums1)):\n        #here we are calculating the element division and storing the result in the divlist\n        divlist.append(nums1[i]/nums2[i])\n    #return the list to the calling function\n    return divlist\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    res = []\n    for i in range(n):\n        res.append(nums1[i] / nums2[i])\n    return res\n    \ndef max_list(nums):\n    '''\n    Write a function to get the max value of a list\n    '''\n    max_v = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max_v:\n            max_v = nums[i]\n    return max_v\n    \ndef min_list(nums):\n    '''\n    Write a function to get the min value of a list\n    '''\n    min_v = nums[0]\n    for i in range(len(nums)):\n        if nums[i] < min_v:\n            min_v = nums[i]\n    return min_v\n    \ndef avg_list(nums):\n    '''\n    Write a function to get the average value of a list\n    '''\n    n = len(nums)\n    avg = 0\n    for i in range(n):\n        avg += nums[i]\n    avg = avg / n\n    return avg\n    \ndef reverse_list(nums):\n    '''\n    Write a function to reverse a list\n    '''\n    nums.reverse()\n    return nums\n    \ndef sort_list(nums):\n    '''\n    Write a function to sort a list\n    '''\n    nums.sort()\n    return nums\n    \ndef rev_sort_list(nums):\n    '''\n    Write a function to reverse sort a list\n    '''\n    nums.sort(reverse=True)\n    return nums\n    \ndef sum_list(nums):\n    '''\n    Write a function to sum a list\n    '''\n    n = len(nums)\n    s = 0\n    for i in range(n):\n        s += nums[i]\n    return s\n    \ndef product_list(nums):\n    '''\n    Write a function to multiply a list\n    '''\n    n = len(nums)\n    prod = 1\n    for i in range(n):\n        prod *= nums[i]\n    return prod\n    \ndef rev_product_list(nums):\n    '''\n    Write a function to multiply a list\n    '''\n    n = len(nums)\n    prod = 1\n    for i in range(n):\n        prod *= nums[i]\n    prod = prod / n\n    return prod\n    \ndef dup_list(nums):\n    '''\n    Write a function to return a list with duplicate elements removed\n    '''\n    n = len(nums)\n    res = []\n    for i in range(n):\n        if nums[i] not in res:\n            res.append(nums[i])\n    return res\n    \ndef unique_list(nums):\n    '''\n    Write a function to return a list with only unique elements\n    '''\n    n = len(nums)\n    res = []\n    for i in range(n):\n        if nums[i] not in res:\n            res.append(nums[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    len_nums1 = len(nums1)\n    len_nums2 = len(nums2)\n    if len_nums1 == 0:\n        return False\n    elif len_nums2 == 0:\n        return False\n    else:\n        result = []\n        for i in range(len_nums1):\n            result.append(nums1[i]/nums2[i])\n        return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Code here\n    div = []\n    for i in range(0,len(nums1)):\n        div.append(nums1[i]/nums2[i])\n    return div\n    # pass\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        # print(len(nums1),len(nums2))\n        if len(nums1)>=len(nums2):\n            return [nums1[i]/nums2[i] for i in range(len(nums1))]\n        else:\n            return [nums1[i]/nums2[i] for i in range(len(nums2))]\n    except ZeroDivisionError:\n        return \"Division by zero is not possible\"\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            new_str += i\n    return new_str + test_str.translate(str.maketrans(dict.fromkeys(string.ascii_letters, '')))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list of numbers that can be found in the string\n    num_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    # iterate through the string and add all numbers found to a new list\n    num_list = [letter for letter in test_str if letter in num_list]\n    # create a new empty string\n    new_str = \"\"\n    # add all of the non-number letters to the new string\n    for i in test_str:\n        if i not in num_list:\n            new_str += i\n    # return the new string\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return \"\".join([i for i in test_str if not i.isdigit()]) + \"\".join([i for i in test_str if i.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(filter(lambda c: not c.isdigit(), test_str)) + \\\n           ''.join(map(lambda c: c if c.isdigit() else '', test_str))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(i for i in test_str if i.isdigit())+''.join(i for i in test_str if not i.isdigit())\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return re.sub('[a-zA-Z]+', '', test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for character in test_str:\n        if character.isdigit():\n            numbers.append(character)\n    numbers = ''.join(numbers)\n    return test_str.replace(numbers, \"\")\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])\n    \nprint(move_num(\"app12dw3~~~Hello 12345world!\"))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def dfs(i):\n        if i == N:\n            return 1\n        # skip i\n        t = 0\n        for j in range(i + 1, N):\n            if a[j] % a[i] == 0:\n                t = max(t, dfs(j) + 1)\n        return t\n    N = len(a)\n    return dfs(0)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a)<=1:\n        return len(a)\n    else:\n        for i in range(len(a)):\n            if a[i]%2==1:\n                a[i]+=1\n        return max(largest_subset(a[:i])+largest_subset(a[i+1:]) for i in range(len(a)))\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    '''\n    An O(n^2) algorithm is required to solve this problem.\n    '''\n    length = len(a)\n    if length < 2:\n        return length\n    largest_subset = 1\n    count_sets = 0\n    for i in range(length):\n        count_sets = 0\n        for j in range(i, length):\n            if int(a[i]) % int(a[j]) == 0:\n                count_sets += 1\n                if count_sets > largest_subset:\n                    largest_subset = count_sets\n    return largest_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    m = len(a)\n    # there are no numbers to check for a subset, so just return 0\n    if m == 0:\n        return 0\n    if m == 1:\n        return 1\n    # create an array of the same length as the list to hold the sizes of the subsets\n    # start it at 1 since we have to check the subsets with 0 elements\n    # the value of the index will be the size of the subset\n    s = [1] * m\n    # start at position 1 since it can't have more than 0 elements\n    for i in range(1, m):\n        for j in range(i):\n            # if a[i] % a[j] == 0:\n            if a[i] % a[j] == 0:\n                # if the current size of the subset is larger than the existing size of the subset at the position of the current i\n                # then overwrite the value at the position of the current i with the current size of the subset\n                # if not, then we can't have a larger subset, so just move on\n                if s[i] < s[j] + 1:\n                    s[i] = s[j] + 1\n    # return the largest size\n    return max(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pairs = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if is_divisible(a[i], a[j]):\n                pairs.append((a[i], a[j]))\n    if not pairs:\n        return 'There is no subset of numbers that meet this criteria.'\n    pairs.sort(key=lambda pair: len(str(pair[0])))\n    return pairs[-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    return 0\n    \nif __name__ == '__main__':\n    print(largest_subset([18,2,5,12,19,18,5,2]))\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if (a[i] % a[j] == 0 or a[j] % a[i] == 0):\n                size += 1\n    return size\n    \n    \n    \n    \n    \ndef count_subsets(a, n):\n    '''\n    Write a function to count the number of subsets of a given set having an odd number of elements.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        subset = []\n        for j in range(n):\n            if (i & (1 << j)):\n                subset.append(a[j])\n        if len(subset) % 2 == 1:\n            count += 1\n    return count\n    \n    \n    \n    \n    \ndef largest_element(a, n):\n    '''\n    Write a function to find the largest element in the set in the size of O(log n)\n    '''\n    return max(a)\n    \n    \n    \n    \n    \ndef frequency_array(a, n):\n    '''\n    Write a function to find the frequency of each element in the array in O(n) time and O(1) space.\n    '''\n    frequency = [0] * n\n    for x in a:\n        frequency[x] += 1\n    return frequency\n    \n    \n    \n    \n    \ndef n_most_frequent(a, n):\n    '''\n    Write a function to find the n most frequent elements in the array in O(n * log n) time and O(n) space\n    '''\n    frequency = frequency_array(a, n)\n    \n    max_heap = MaxHeap(n)\n    \n    for i in range(n):\n        max_heap.insert(frequency[i], i)\n    \n    for i in range(n, len(a)):\n        if frequency[a[i]] >= frequency[max_heap.peak()[0]]:\n            max_heap.insert(frequency[a[i]], a[i])\n        else:\n            max_heap.extract_max()\n            max_heap.insert(frequency[a[i]], a[i])\n    \n    return max_heap.extract_max()\n    \n    \n    \n    \n    \ndef n_most_frequent_no_heap(a, n):\n    '''\n    Write a function to find the n most frequent elements in the array in O(n * log n) time and O(n) space\n    '''\n    frequency = frequency_array(a, n)\n    \n    max_heap = MaxHeap(n)\n    \n    for i in range(n):\n        max_heap.insert(frequency[i], i)\n    \n    for i in range(n, len(a)):\n        if frequency[a[i]] >= frequency[max_heap.peak()[0]]:\n            max_heap.insert(frequency[a[i]], a[i])\n        else:\n            max_heap.extract_max()\n            max_heap.insert(frequency[a[i]], a[i])\n    \n    return max_heap.extract_max()\n    \n    \n    \n    \n    \ndef count_unique(a, n):\n    '''\n    Write a function to count the number of unique elements in the array in O(n) time and O(1) space.\n    '''\n    frequency = frequency_array(a, n)\n    unique = 0\n    for i in range(n):\n        if frequency[i] == 1:\n            unique += 1\n    return unique\n    \n    \n    \n    \n    \ndef first_non_unique(a, n):\n    '''\n    Write a function to find the first non-unique element in the array in O(n) time and O(1) space.\n    '''\n    frequency = frequency_array(a, n)\n    for i in range(n):\n        if frequency[i] > 1:\n            return i\n    return -1\n    \n    \n    \n    \n    \ndef three_largest_elements(a):\n    '''\n    Write a function to find the three largest elements in the array in O(n) time and O(1) space.\n    '''\n    max_heap = MaxHeap(3)\n    for i in range(len(a)):\n        if a[i] > max_heap.peak()[0]:\n            max_heap.extract_max()\n            max_heap.insert(a[i], i)\n    return max_heap.extract_max(), max_heap.extract_max(), max_heap.extract_max()\n    \n    \n    \n    \n    \ndef three_smallest_elements(a):\n    '''\n    Write a function to find the three smallest elements in the array in O(n) time and O(1) space.\n    '''\n    max_heap = MaxHeap(3)\n    for i in range(len(a)):\n        if a[i] < max_heap.peak()[0]:\n            max_heap.extract_max()\n            max_heap.insert(a[i], i)\n    return max_heap.extract_max(), max_heap.extract_max(), max_heap.extract_max()\n    \n    \n    \n    \n    \ndef smallest_subarray_with_given_sum(a, n, s):\n    '''\n    Write a function to find the smallest contiguous subarray which has a sum greater than or equal to a given number in O(n) time.\n    '''\n    max_heap = MaxHeap(n)\n    for i in range(n):\n        if s >= a[i]:\n            max_heap.insert(a[i], i)\n        else:\n            break\n    while max_heap.size() > 0:\n        if s >= (max_heap.peak()[0] * (max_heap.size() + 1)):\n            return max_heap.extract_max()[1] + 1\n        else:\n            max_heap.extract_max()\n            \n    return -1\n    \n    \n    \n    \n    \ndef min_difference_pair(a, n):\n    '''\n    Write a function to find the minimum difference between two elements in the array in O(n) time and O(1) space.\n    '''\n    max_heap = MaxHeap(n)\n    for i in range(n):\n        if a[i] <= max_heap.peak()[0]:\n            max_heap.insert(a[i], i)\n        else:\n            max_heap.extract_max()\n            max_heap.insert(a[i], i)\n    max_heap.extract_max()\n    return max_heap.peak()[0] - a[max_heap.peak()[1]]\n    \n    \n    \n    \n    \ndef smallest_subarray_with_given_sum_no_heap(a, n, s):\n    '''\n    Write a function to find the smallest contiguous subarray which has a sum greater than or equal to a given number in O(n) time and O(1) space.\n    '''\n    max_heap = MaxHeap(n)\n    for i in range(n):\n        if s >= a[i]:\n            max_heap.insert(a[i], i)\n        else:\n            break\n    while max_heap.size() > 0:\n        if s >= (max_heap.peak()[0] * (max_heap.size() + 1)):\n            return max_heap.extract_max()[1] + 1\n        else:\n            max_heap.extract_max()\n            \n    return -1\n    \n    \n    \n    \n    \ndef largest_cont_array(a, n):\n    '''\n    Write a function to find the largest contiguous subarray in the array in O(n) time and O(1) space.\n    '''\n    max_heap = MaxHeap(n)\n    for i in range(n):\n        if a[i] > max_hea"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sanity check, lists with only one element are trivially divisible\n    if len(a) == 1:\n        return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    import math\n    import time\n    from functools import reduce\n    from collections import defaultdict\n    from functools import lru_cache\n    from operator import add\n    from itertools import combinations\n    from itertools import combinations_with_replacement\n    from operator import itemgetter\n    from fractions import Fraction\n    from math import gcd\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #checking whether lists are of same size\n    if(n!=len(arr1)):\n        print(\"Error: List 1 and List 2 are not of same size\")\n        return -1\n    \n    #making copies of the lists to use them for sorting in ascending order\n    arr1_copy=arr1.copy()\n    arr2_copy=arr2.copy()\n    \n    #sorting the copied lists in ascending order\n    arr1_copy.sort()\n    arr2_copy.sort()\n    \n    #checking if the lengths of the two lists are odd or even\n    if(n%2==0):\n        median=(arr1_copy[int(n/2)]+arr2_copy[int(n/2)])/2\n    else:\n        median=arr1_copy[int((n-1)/2)]\n        \n    return(median)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        median = arr1[n//2]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize left_index and right_index\n    l = 0\n    r = n - 1\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    print(f\"arr1 {arr1}\")\n    print(f\"arr2 {arr2}\")\n    print(f\"n {n}\")\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    elif n == 0:\n        return max(arr1[0], arr2[0])\n    m1 = len(arr1)\n    m2 = len(arr2)\n    n = min(m1, m2)\n    if m1 == m2:\n        return arr1[n//2]\n    elif m1 < m2:\n        arr1, arr2 = arr2, arr1\n        m1, m2 = m2, m1\n    if n % 2 == 1:\n        return get_median(arr1[n//2], arr2[n//2], 1)\n    else:\n        return (get_median(arr1[n//2 - 1], arr2[n//2], 1) + get_median(arr1[n//2], arr2[n//2], 1))/2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    curr_median = -1\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return (get_median_helper(arr1, arr2, n) + get_median_helper(arr2, arr1, n)) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    start = 0\n    end = n\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if (mid == 0 or arr1[mid-1] <= arr2[mid]) and (mid == n-1 or arr2[mid+1] <= arr1[mid]):\n            break\n        elif arr1[mid] < arr2[mid]:\n            start = mid+1\n        else:\n            end = mid-1\n            \n    if mid == 0:\n        l1 = arr1[:mid]\n        l2 = arr2\n    elif mid == n:\n        l1 = arr1\n        l2 = arr2[:mid]\n    else:\n        l1 = arr1[:mid]\n        l2 = arr2[:mid]\n    \n    return (l1 + l2) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    m = n\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n            m -= 1\n    return arr1[i//2] if n % 2 == 0 else (arr1[i//2] + arr2[j//2])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    return arr1[n//2]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nth_pow = []\n    for x in nums:\n        nth_pow.append(x**n)\n    return nth_pow\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #method1\n    # for i in nums:\n    #     print(i**n)\n    #method2\n    nums_power=[]\n    for num in nums:\n        nums_power.append(num**n)\n    print(nums_power)\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\nprint(nth_nums([1, 2, 3, 4], 3))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==0:\n        return nums\n    else:\n        return [pow(num,n) for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #return str.upper(string)\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase_string = string.upper()\n    print(uppercase_string)\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        raise TypeError(string)\n    else:\n        return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[len(newList)-1]\n    newList[len(newList)-1]=temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    if len(newList)==0:\n        print (\"Given list is empty\")\n        return\n    \n    temp=newList[0]\n    newList[0]=newList[len(newList)-1]\n    newList[len(newList)-1]=temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return []\n    if len(newList) == 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    \ndef bubbleSort_List(newList):\n    '''\n    Write a python function to sort a given list of elements using Bubble Sort algorithm.\n    '''\n    if len(newList) == 0:\n        return []\n    if len(newList) == 1:\n        return newList\n    for i in range(len(newList)-1):\n        for j in range(i, len(newList)-1):\n            if newList[j] > newList[j+1]:\n                newList[j], newList[j+1] = newList[j+1], newList[j]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\ndef sortedList(newList): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    newList.sort() \n    return newList\ndef dictionaryList(newList): \n    '''\n    Write a python function to insert a given element at a given position in a list.\n    '''\n    newList.insert(1, 'one')\n    return newList\ndef deleteList(newList): \n    '''\n    Write a python function to delete a given element from a list.\n    '''\n    newList.remove('three')\n    return newList\ndef deletePos(newList): \n    '''\n    Write a python function to delete the first occurrence of a given element from a list.\n    '''\n    newList.remove('three')\n    return newList\ndef checkList(newList): \n    '''\n    Write a python function to check if the given element is present in a list.\n    '''\n    if 'two' in newList: \n        return 'true'\n    else:\n        return 'false'\ndef removeNth(newList, n): \n    '''\n    Write a python function to remove the nth element from a list.\n    '''\n    newList.pop(n)\n    return newList\ndef removeNth2(newList, n): \n    '''\n    Write a python function to remove the nth element from a list.\n    '''\n    del newList[n]\n    return newList\ndef clearList(newList): \n    '''\n    Write a python function to clear a given list.\n    '''\n    newList.clear() \n    return newList\ndef concatList(list1, list2): \n    '''\n    Write a python function to concatenate two lists.\n    '''\n    list1.extend(list2) \n    return list1\ndef reverseList(newList): \n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse() \n    return newList\ndef firstList(newList): \n    '''\n    Write a python function to get the first element from a list.\n    '''\n    print(newList[0]) \n    return newList[0]\ndef lastList(newList): \n    '''\n    Write a python function to get the last element from a list.\n    '''\n    print(newList[-1]) \n    return newList[-1]\ndef listSort(newList): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    newList.sort() \n    return newList\ndef listSearch(newList, n): \n    '''\n    Write a python function to search for the given element in a list.\n    '''\n    print(newList.index(n)) \n    return newList.index(n)\ndef listSplit(newList): \n    '''\n    Write a python function to split a given list into two lists.\n    '''\n    newList1 = newList[0:4] \n    newList2 = newList[4:] \n    return newList1, newList2\ndef listCopy(newList): \n    '''\n    Write a python function to copy a given list.\n    '''\n    newList2 = newList.copy() \n    return newList2\ndef listCopy2(newList): \n    '''\n    Write a python function to copy a given list.\n    '''\n    newList2 = list(newList) \n    return newList2\ndef listCopy3(newList): \n    '''\n    Write a python function to copy a given list.\n    '''\n    newList2 = list(newList) \n    return newList2\ndef listPop(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop2(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newList2\ndef listPop3(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop4(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newList2\ndef listPop5(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop6(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newList2\ndef listPop7(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop8(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newList2\ndef listPop9(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop10(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newList2\ndef listPop11(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop12(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newList2\ndef listPop13(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop14(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newList2\ndef listPop15(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop16(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newList2\ndef listPop17(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop18(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newList2\ndef listPop19(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop() \n    return newList2\ndef listPop20(newList): \n    '''\n    Write a python function to remove and return the last element from a list.\n    '''\n    newList2 = newList.pop(0) \n    return newLis"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n        return newList\n    \n    \ndef print_list(newList):\n    '''\n    Write a python function to print the second last element of the list in reverse order.\n    '''\n    print(newList[-2])\n    \n    \ndef insertion_sort_list(newList):\n    '''\n    Write a python function to sort the given list using insertion sort algorithm.\n    '''\n    if len(newList) == 0 or len(newList) == 1:\n        return newList\n    else:\n        # newList[0:0] = [newList[0]]\n        print(\"swap\",newList[0],newList[0])\n        newList.insert(0,newList[0])\n        print(\"swap\",newList[0],newList[0])\n        # newList[0:0] = [newList[0]]\n        del(newList[0])\n        return insertion_sort_list(newList)\n    \n    \ndef binary_search_list(newList, target):\n    '''\n    Write a python function to search the target element in the given list using binary search algorithm.\n    '''\n    if len(newList) == 0:\n        return -1\n    else:\n        low, high = 0, len(newList)\n        while(low < high):\n            mid = (low + high)//2\n            if newList[mid] == target:\n                return mid\n            elif newList[mid] > target:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n    \n    \ndef bubble_sort_list(newList):\n    '''\n    Write a python function to sort the given list using bubble sort algorithm.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        # print(\"swap\",newList[0],newList[0])\n        # newList.insert(0,newList[0])\n        # print(\"swap\",newList[0],newList[0])\n        # del(newList[0])\n        for i in range(0,len(newList)-1):\n            for j in range(0,len(newList)-1-i):\n                if newList[j] > newList[j+1]:\n                    newList[j], newList[j+1] = newList[j+1], newList[j]\n        return bubble_sort_list(newList)\n        \n    \ndef merge_sort_list(newList):\n    '''\n    Write a python function to sort the given list using merge sort algorithm.\n    '''\n    if len(newList) == 0:\n        return newList\n    elif len(newList) == 1:\n        return newList\n    else:\n        mid = len(newList)//2\n        leftList = newList[:mid]\n        rightList = newList[mid:]\n        merge_sort_list(leftList)\n        merge_sort_list(rightList)\n        leftIndex, rightIndex = 0, 0\n        for i in range(len(newList)):\n            if leftIndex < len(leftList) and rightIndex < len(rightList):\n                if leftList[leftIndex] <= rightList[rightIndex]:\n                    newList[i] = leftList[leftIndex]\n                    leftIndex = leftIndex + 1\n                else:\n                    newList[i] = rightList[rightIndex]\n                    rightIndex = rightIndex + 1\n            elif leftIndex < len(leftList):\n                newList[i] = leftList[leftIndex]\n                leftIndex = leftIndex + 1\n            else:\n                newList[i] = rightList[rightIndex]\n                rightIndex = rightIndex + 1\n        return newList\n    \n    \ndef quick_sort_list(newList):\n    '''\n    Write a python function to sort the given list using quick sort algorithm.\n    '''\n    if len(newList) == 0:\n        return newList\n    elif len(newList) == 1:\n        return newList\n    else:\n        pivot = newList[len(newList)//2]\n        leftList = []\n        rightList = []\n        for i in newList:\n            if i < pivot:\n                leftList.append(i)\n            elif i > pivot:\n                rightList.append(i)\n        if len(leftList)!= 0 and len(rightList)!= 0:\n            return quick_sort_list(leftList) + [pivot] + quick_sort_list(rightList)\n        elif len(leftList) == 0 and len(rightList)!= 0:\n            return [pivot] + quick_sort_list(rightList)\n        elif len(leftList)!= 0 and len(rightList) == 0:\n            return quick_sort_list(leftList) + [pivot]\n        elif len(leftList) == 0 and len(rightList) == 0:\n            return [pivot]\n        \n    \ndef radix_sort_list(newList):\n    '''\n    Write a python function to sort the given list using radix sort algorithm.\n    '''\n    maxValue = max(newList)\n    exponent = 1\n    while maxValue/exponent > 0:\n        counting_sort_list(newList, exponent)\n        exponent *= 10\n        \n        \ndef counting_sort_list(newList, exponent):\n    '''\n    Write a python function to sort the given list using counting sort algorithm.\n    '''\n    count = [0] * 10\n    for i in newList:\n        count[(i//exponent) % 10] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    for i in range(len(newList)-1, -1, -1):\n        newList[count[(newList[i]//exponent) % 10]-1] = newList[i]\n        count[(newList[i]//exponent) % 10] -= 1\n    \n    \ndef counting_sort_list_v2(newList):\n    '''\n    Write a python function to sort the given list using counting sort algorithm.\n    '''\n    count = [0] * 100\n    for i in newList:\n        count[i] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    for i in range(len(newList)-1, -1, -1):\n        newList[count[newList[i]]-1] = newList[i]\n        count[newList[i]] -= 1\n    \n    \ndef radix_sort_list_v2(newList):\n    '''\n    Write a python function to sort the given list using radix sort algorithm.\n    '''\n    maxValue = max(newList)\n    exponent = 1\n    while maxValue/exponent > 0:\n        counting_sort_list_v2(newList, exponent)\n        exponent *= 10\n        \n        \ndef radix_sort_list_v3(newList):\n    '''\n    Write a python function to sort the given list using radix sort algorithm.\n    '''\n    maxValue = max(newList)\n    exponent = 1\n    while maxValue/exponent > 0:\n        counting_sort_list_v3(newList, exponent)\n        exponent *= 10\n        \n        \ndef counting_sort_list_v3(newList, exponent):\n    '''\n    Write a python function to sort the given list using radix sort algorithm.\n    '''\n    count = [0] * 10\n    for i in newList:\n        count[i//exponent % 10] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    for i in range(len(newList)-1, -1, -1):\n        newList[count[i//exponent % 10]-1] = newList[i]\n        count[i//exponent % 10] -= 1\n        \n        \ndef bucket_sort_list(newList):\n    '''\n    Write a python function to sort the give"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    return pi*(r**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #first we get the circumfrence of the semicircle\n    circumference = 2 * math.pi * r\n    #now we get the length of the side of the triangle\n    side_length = circumference / math.sqrt(3)\n    #now we get the area by using the triangle area formula\n    area = (3 * side_length ** 2) / 4\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    pi = 3.14159265\n    s = 2*pi*r\n    s = s/2\n    a = (s*s)**0.5\n    a = a*a/2\n    a = a/2\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Formula for the area of a triangle with base A and height H is:\n    #A*H/2\n    #Your function should take one argument as a float, and return the triangle area.\n    return(r**2*3.14159/2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    print('Area of the largest triangle that can be inscribed in a semicircle with a given radius is: ', (3 * r * r) / 2)\n    \n    return 3 * r * r / 2\n    \ndef largest_triangle(r):\n    '''\n    Write a python function to find the largest triangle possible with a given radius.\n    '''\n    print('The largest possible triangle is: ', r * r * math.sqrt(3) / 2)\n    \n    return r * r * math.sqrt(3) / 2\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2) * math.asin(1/2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    print('A function that takes radius r as an input and outputs the area of the largest triangle that can be inscribed in a semicircle with a radius r.')\n    # for circle: r = a\n    # area of circle = pi*a**2\n    # area of triangle = 1/2*base*height = 1/2*b*h\n    # where b = r, h = sqrt(r**2 - b**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)*3.1415/(2**0.5)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area=0\n    for i in range(1,r+1):\n        if(i**2+i-2*r<=0):\n            break\n        a=i**2+i-2*r\n        if(a>area):\n            area=a\n            a=i**2+i-2*r\n            c=i\n    return(2*r-a,2*r+a,2*r+a,2*r-a,2*r+a,2*r+c,2*r-c,2*r-c)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r>0:\n        return 2*3.1415926535*r**2*0.5\n    else:\n        return 0\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return 0\n    if start==end:\n        return array[start]\n    mid=(start+end)//2\n    if array[mid]==mid+1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start < end:\n        mid = start + ((end - start) // 2)\n        if array[mid] == mid:\n            return find_First_Missing(array,start=mid+1,end=end)\n        if array[mid] < mid:\n            return find_First_Missing(array,start=mid+1,end=end)\n        else:\n            return find_First_Missing(array,start=start,end=mid-1)\n    else:\n        return start\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    if end < start:\n        return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)-1\n    # start = 0\n    # end = len(array)-1\n    # print(start,end)\n    if end < start:\n        return end+1\n    guess = (start + end) // 2\n    print(guess)\n    if guess==array[guess]:\n        return find_First_Missing(array,guess+1,end)\n    elif guess>array[guess]:\n        return find_First_Missing(array,start,guess-1)\n    else:\n        return find_First_Missing(array,guess+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end <= start:\n        return None\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end == 0:\n        return 1\n    if array[start]!= start + 1:\n        return start+1\n    else:\n        return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not isinstance(array,list) or array==[]:\n        return\n    if end==None:\n        end=len(array)-1\n    if start<0 or end>len(array)-1:\n        return\n    if start>end:\n        return\n    if start==end:\n        return array[start]+1\n    mid=int((start+end)/2)\n    if array[mid]==mid+1:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid,end)\n    \ndef merge_Two_Sorted_List(list1,list2):\n    '''\n    Write a python program to merge two sorted lists into a single sorted list.\n    '''\n    if list1==None or list2==None:\n        return\n    if len(list1)==0:\n        return list2\n    if len(list2)==0:\n        return list1\n    len_list1=len(list1)\n    len_list2=len(list2)\n    if len_list1>len_list2:\n        list1,list2=list2,list1\n        len_list1,len_list2=len_list2,len_list1\n    j=0\n    for i in range(0,len_list1):\n        if j>=len_list2:\n            return list1\n        if list1[i]>list2[j]:\n            list1.insert(i,list2[j])\n            j=j+1\n    if j<len_list2:\n        list1.extend(list2[j:])\n    return list1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    for i in range(start,end):\n        if array[i] - 1!= i:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    # i = start\n    # while i<= end:\n    #     if array[i]!= i+1:\n    #         return i+1\n    #     i+=1\n    # if array[i]==i+1:\n    #     return i+2\n    # else:\n    #     return i+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if array[start] == start + 1:\n        return start + 1\n    if array[end - 1] == end:\n        return end\n    mid = (start + end) // 2\n    if array[mid] == mid + 1:\n        return find_First_Missing(array,mid,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in string:\n        if i == \" \":\n            string = string.replace(i, \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if not string:\n        return ''\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    print(even_list)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = list[1::2]\n    print(even_list)\n    \n    \nSplit([12,8,17,5,6,7,9])\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i%2==0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # empty list to store odd numbers\n    odd_list = []\n    # iterating over list of numbers and\n    # checking for even numbers\n    for number in list:\n        if number % 2!= 0:\n            odd_list.append(number)\n    return odd_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd = []\n    even = []\n    for x in list:\n        if x%2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    output = [even, odd]\n    return output\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for x in list:\n        if x % 2 == 0:\n            even.append(x)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # return [list[i] for i in range(len(list)) if list[i]%2 == 0]\n    return [i for i in list if i%2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even=[]\n    for x in list:\n        if x%2==0:\n            list_even.append(x)\n    return list_even\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in list:\n        if(i % 2 == 0):\n            print(i)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    result = []\n    if(ele[0] == 0):\n        result.append([(ele[0], ele[1]+1), (ele[0]+1, ele[1]+1), (ele[0]+1, ele[1])])\n    if(ele[0] == 1):\n        result.append([(ele[0], ele[1]+1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1), (ele[0], ele[1]+1)])\n    if(ele[0] == 2):\n        result.append([(ele[0], ele[1]+1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1), (ele[0], ele[1])])\n    if(ele[1] == 0):\n        result.append([(ele[0], ele[1]+1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)])\n    if(ele[1] == 1):\n        result.append([(ele[0], ele[1]+1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]+1), (ele[0], ele[1])])\n    if(ele[1] == 2):\n        result.append([(ele[0], ele[1]+1), (ele[0]+1, ele[1]+1), (ele[0], ele[1]), (ele[0], ele[1]+1)])\n    result.append([(ele[0], ele[1]+1), (ele[0], ele[1]), (ele[0], ele[1]+1)])\n    return result\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(3):\n        for j in range(3):\n            if i!=j:\n                sub.append((ele[0]+i-1,ele[1]+j-1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global L\n    if ele not in L:\n        return []\n    if sub == []:\n        sub = [ele]\n    temp = L[ele]\n    for x in temp:\n        if x not in sub:\n            sub.append(x)\n            return adjac(x, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    list_ = []\n    for i in range(3):\n        temp = tuple(sub[:] + [ele[i]])\n        list_.append(temp)\n        list_ += adjac(ele, temp)\n    return list_\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #Set x1, y1, z1 to x, y, z\n    x1, y1, z1 = ele[0], ele[1], ele[2]\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + y, ele[1] + x) for x, y in [(-1, 0), (1, 0), (0, -1), (0, 1)]]\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if (ele[0] - sub[0]) % 2 == 0:\n        return (ele[0] - sub[0], ele[1])\n    else:\n        return (ele[0] - sub[0], ele[1] - sub[1])\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple):\n        for x,y in [(ele[0]-1,ele[1]),(ele[0]+1,ele[1]),(ele[0],ele[1]-1),(ele[0],ele[1]+1)]:\n            if x in range(8) and y in range(8):\n                sub.append((x,y))\n    else:\n        print(\"Input is not a tuple\")\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele) == tuple:\n        if len(sub) == 0:\n            sub.append(ele)\n            return sub\n        for i in range(len(sub)):\n            if type(sub[i]) == tuple:\n                sub[i] = adjac(ele, sub[i])\n            else:\n                sub[i] = adjac(ele, sub[i])\n                break\n        return sub\n    else:\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    lst = [] \n    x, y = ele[0], ele[1] \n    # moves towards right \n    for i in range(x+1, 9): \n        if i in range(1, 9):\n            lst.append([i, y]) \n            break\n    # moves towards left \n    for i in range(x-1, 0, -1): \n        if i in range(1, 9):\n            lst.append([i, y]) \n            break\n    # moves towards down \n    for i in range(y+1, 9): \n        if i in range(1, 9):\n            lst.append([x, i]) \n            break\n    # moves towards up \n    for i in range(y-1, 0, -1): \n        if i in range(1, 9):\n            lst.append([x, i]) \n            break\n    # moves towards down right \n    for i in range(1, min(8-x, 8-y)+1): \n        if x+i in range(1, 9) and y+i in range(1, 9):\n            lst.append([x+i, y+i]) \n            break\n    # moves towards down left \n    for i in range(1, min(x, y)+1): \n        if x-i in range(1, 9) and y-i in range(1, 9):\n            lst.append([x-i, y-i]) \n            break\n    # moves towards up right \n    for i in range(1, min(8-x, y)+1): \n        if x+i in range(1, 9) and y-i in range(1, 9):\n            lst.append([x+i, y-i]) \n            break\n    # moves towards up left \n    for i in range(1, min(x, 8-y)+1): \n        if x-i in range(1, 9) and y+i in range(1, 9):\n            lst.append([x-i, y+i]) \n            break\n    # removes the coordinate itself \n    lst.remove(ele) \n    # appends sub to lst \n    for i in sub:\n        lst.remove(i)\n    return lst \n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    for ch in ['_','']:\n        text = text.replace(ch, ch.replace('_',''))\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #return text.replace(\" \", \"_\").replace(\"_\", \" \")\n    return text.replace(\"_\", \" \").replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n    \n    \ndef is_anagram(word1, word2):\n    '''\n    Write a function that returns True if the two words are anagrams of each other.\n    '''\n    return sorted(word1) == sorted(word2)\n    \n    \ndef is_palindrome(text):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return text.replace(' ', '') == text.replace(' ', '')[::-1]\n    \n    \ndef replace_vowels(text):\n    '''\n    Write a function to replace all vowels in a string with another character.\n    '''\n    for vowel in 'aeiouAEIOU':\n        text = text.replace(vowel, '*')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = text.replace(' ', '_')\n    result = result.replace('_','')\n    return result\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_') if '_' in text else text.replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.append(0)\n    i = 0\n    while i < len(num_list) - 1:\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i = i + 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    c = num_list.count(0)\n    while num_list.count(0):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    list_len = len(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_pos=[]\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            zero_pos.append(i)\n    for i in range(len(zero_pos)):\n        num_list.pop(zero_pos[i]-i)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i=0\n    j=0\n    while(i<len(num_list)):\n        if num_list[i]==0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i+=1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    num_list.sort()\n    while(i<len(num_list)):\n        if(num_list[i]==0):\n            num_list.pop(i)\n            num_list.append(0)\n            j += 1\n        else:\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    a = num_list[:]\n    i=0\n    count=0\n    while i < len(num_list):\n        if num_list[i]==0:\n            count=count+1\n        i=i+1\n    i=0\n    while i < count:\n        a.pop(a.index(0))\n        a.append(0)\n        i=i+1\n    return a\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count_zero = 0\n    for i in num_list:\n        if i == 0:\n            count_zero += 1\n    # print(count_zero)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    counter = 0\n    zero_list = []\n    for i in num_list:\n        if i == 0:\n            zero_list.append(i)\n            num_list.pop(counter)\n        counter += 1\n    num_list.extend(zero_list)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 1 :\n        return arr[0]\n    else :\n        return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            result = result ^ (arr[i] ^ arr[j])\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum = sum ^ arr[i] ^ arr[j] \n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum=sum^arr[i]^arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            sum = sum ^ (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    sum = 0\n    for i in range(n-1) :\n        for j in range(i+1,n) :\n            sum += arr[i] ^ arr[j]\n    return sum \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    arr.sort()\n    for i in range(n) :\n        for j in range(i+1,n) :\n            ans = ans^arr[i]^arr[j]\n    return ans \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            xor ^= arr[i] ^ arr[j] \n    return xor \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            res = res ^ arr[i] ^ arr[j]\n    return res\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    for value in iterable:\n        hq.heappush(h, value)\n    for i in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\ndef _merge_sort(array):\n    '''\n    Write a function to sort the given list using merge sort algorithm.\n    '''\n    if len(array) < 2:\n        return array[:]\n    else:\n        middle = len(array)//2\n        left = _merge_sort(array[:middle])\n        right = _merge_sort(array[middle:])\n        return merge(left, right)\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    h=[]\n    for i in range(0,len(iterable)):\n        hq.heappush(h,iterable[i])\n    result=[]\n    while len(h)!=0:\n        result.append(hq.heappop(h))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a list to store the sorted elements\n    sorted_list = []\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)==1:\n        return iterable\n    mid=len(iterable)//2\n    left=iterable[:mid]\n    right=iterable[mid:]\n    left=merge_sort(left)\n    right=merge_sort(right)\n    return merge(left,right)\ndef merge(left,right):\n    '''\n    Write a function to merge the given two sorted list.\n    '''\n    n=len(left)+len(right)\n    l=[]\n    i=0\n    j=0\n    while(i<len(left) and j<len(right)):\n        if(left[i]<=right[j]):\n            l.append(left[i])\n            i+=1\n        else:\n            l.append(right[j])\n            j+=1\n    if(i==len(left)):\n        l.extend(right[j:])\n    else:\n        l.extend(left[i:])\n    return l\ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(1,len(iterable)):\n        key=iterable[i]\n        j=i-1\n        while(j>=0 and key<iterable[j]):\n            iterable[j+1]=iterable[j]\n            j-=1\n        iterable[j+1]=key\n    return iterable\ndef selection_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        k=i\n        for j in range(i,len(iterable)):\n            if(iterable[k]>iterable[j]):\n                k=j\n        iterable[i],iterable[k]=iterable[k],iterable[i]\n    return iterable\ndef bubble_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    flag=True\n    n=len(iterable)\n    while(flag):\n        flag=False\n        for i in range(0,n-1):\n            if(iterable[i]>iterable[i+1]):\n                iterable[i],iterable[i+1]=iterable[i+1],iterable[i]\n                flag=True\n        n=n-1\n    return iterable\ndef quick_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def q_s(iterable,l,r):\n        if(r-l>1):\n            p=partition(iterable,l,r)\n            q_s(iterable,l,p)\n            q_s(iterable,p+1,r)\n    def partition(iterable,l,r):\n        pivot=iterable[r]\n        i=l\n        for j in range(l,r):\n            if(iterable[j]<=pivot):\n                iterable[i],iterable[j]=iterable[j],iterable[i]\n                i+=1\n        iterable[i],iterable[r]=iterable[r],iterable[i]\n        return i\n    q_s(iterable,0,len(iterable)-1)\n    return iterable\ndef shell_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def ss(iterable,d):\n        if(d>=len(iterable)):\n            return\n        d=d//2\n        for i in range(d,len(iterable)):\n            p=i\n            while(p>=d and iterable[p-d]>iterable[p]):\n                iterable[p],iterable[p-d]=iterable[p-d],iterable[p]\n                p-=d\n        ss(iterable,d)\n    d=len(iterable)//2\n    ss(iterable,d)\n    return iterable\ndef radix_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def r_s(iterable,p):\n        if(len(iterable)==0):\n            return\n        max_value=iterable[0]\n        for i in iterable:\n            if(i>max_value):\n                max_value=i\n        if(p>=len(str(max_value))):\n            return\n        bucket=[[0,0,0] for i in range(10)]\n        for i in iterable:\n            temp=bucket[(i//(10**p))%10][2]\n            bucket[(i//(10**p))%10][2]=bucket[(i//(10**p))%10][1]\n            bucket[(i//(10**p))%10][1]=bucket[(i//(10**p))%10][0]\n            bucket[(i//(10**p))%10][0]=temp+1\n        iterable=[]\n        for i in bucket:\n            iterable.extend([i[0]]*i[2])\n            iterable.extend([i[1]]*i[1])\n    for i in range(len(str(max(iterable)))):\n        r_s(iterable,i)\n    return iterable\ndef gnome_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    p=0\n    while(p<len(iterable)):\n        if(p==0 or iterable[p]>=iterable[p-1]):\n            p+=1\n        else:\n            iterable[p],iterable[p-1]=iterable[p-1],iterable[p]\n            p-=1\n    return iterable\ndef cocktail_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    flag=True\n    while(flag):\n        flag=False\n        for i in range(0,n-1):\n            if(iterable[i]>iterable[i+1]):\n                iterable[i],iterable[i+1]=iterable[i+1],iterable[i]\n                flag=True\n        for i in range(n-1,0,-1):\n            if(iterable[i]<iterable[i-1]):\n                iterable[i],iterable[i-1]=iterable[i-1],iterable[i]\n                flag=True\n    return iterable\ndef pancake_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    for i in range(n-1,0,-1):\n        k=0\n        while(k<i):\n            if(iterable[k]>iterable[i]):\n                iterable=iterable[k+1:i+1]+iterable[k:i][::-1]+iterable[i+1:]\n                break\n            k+=1\n    return iterable\ndef counting_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    m=max(iterable)+1\n    n=len(iterable)\n    k=iterable.copy()\n    for i in range(n):\n        iterable[i]=k.index(i+1)+1\n    return iterable\ndef bucket_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    m=max(iterable)+1\n    k=[0 for i in range(m)]\n    for i in iterable:\n        k[i]+=1\n    j=0\n    for i in range(m):\n        if(k[i]!=0):\n            for j in range(k[i]):"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<=actual_cost:\n        print('No Profit')\n    else:\n        print('No Loss')\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount :\n        return 'True'\n    else :\n        return 'False'\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n    else:\n        return (sale_amount < actual_cost)\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        print(\"\\nThe sale amount is less than the actual cost. Profit cannot be made.\")\n    else:\n        print(\"\\nNo profit or loss!\")\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost == 0) and (sale_amount == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount==actual_cost:\n        print('No profit or loss')\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 120 or t < -12 or t > 50:\n        return 'Invalid input'\n    else:\n        wind_chill_index = 13.12 + 0.6215*t + 0.3965*t*math.pow(t,-1) - 0.1633*t*math.pow(t,-1)*math.pow(v,0.16) + 0.3965*t*math.pow(v,0.16) - 0.0771*t*math.pow(v,0.16)*math.pow(t,-1)\n        return math.ceil(wind_chill_index)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = 13.12 + (0.6215*t) - (11.37*(v**0.16)) + (0.3965*t*(v**0.16))\n    return int(round(chill))\n    \n    \n    \ndef to_celsius(x):\n    \"\"\"\n    Write a function to convert a given temperature in fahrenheit to celsius.\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(13.12 + 0.6215*t - 11.37 * v**0.16 + 0.3965 * t * v**0.16)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # if v < 3:\n    #     v = 3\n    # if t < -10:\n    #     t = -10\n    # if t > 40:\n    #     t = 40\n    \n    return round((13.12 + (0.6215*v) - (11.37*math.pow(t, 0.16)) + (0.3965*math.pow(t,0.16)*v))*1.15)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(0.4*v*(math.sqrt(t)),0)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    # v = input(\"Enter the wind speed (km/h): \")\n    # t = input(\"Enter the temperature (C): \")\n    # print(v)\n    # print(t)\n    if t > 50:\n        print(\"The temperature is too high\")\n    else:\n        if v >= 3:\n            print(\"The wind speed is too high\")\n        else:\n            v = v * 3.6\n            t = t + 273\n            wci = 13.12 + (0.6215 * t) - (11.37 * v**0.16) + (0.3965 * t * v**0.16)\n            wci = int(round(wci))\n            return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    try:\n        wind_chill_index = 35.74 + (0.6215*t) - (35.75*(v**0.16)) + (0.4275*t*(v**0.16))\n        wind_chill_index = int(round(wind_chill_index))\n    except:\n        wind_chill_index = -1\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    numerator = a+ (b*t) - (c*v**0.16) + (d*t*v**0.16)\n    return round(numerator)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #t = 32\n    #v = int(input(\"Enter the wind speed in km/h: \"))\n    #v = 16\n    #print(v)\n    if t >= 15:\n        if v >= 3.0:\n            c = 35.74 + (0.6215 * t) + ((0.4275 * t) - 35.75) * (math.pow(v,0.16))\n            print(c)\n        else:\n            print(\"The value of speed is less than 3.0 km/h\")\n    else:\n        print(\"The temperature is less than 15 degrees C\")\n    \nwind_chill(16,12)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    v2 = (v*1.8) + 0.621\n    wci = 13.12 + (0.6215*t) - (11.37*math.pow(v2,0.16)) + (0.3965*t*math.pow(v2,0.16))\n    wci = math.floor(wci)\n    return wci\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lst = []\n    for i in sample_names:\n        if i.islower():\n            lst.append(i)\n    print(\"\\nThe names of the sample provided start with lowercase: \")\n    print(lst)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(x) for x in sample_names if not x[0].islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(x) for x in sample_names if x.islower())\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    l=[]\n    for i in sample_names:\n        if i[0].isupper()==True:\n            pass\n        else:\n            l.append(i)\n    print(l)\n    return len(''.join(l))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names.split(',')\n    counter = 0\n    for name in sample_names:\n        if name[0].islower():\n            counter += len(name)\n    return counter\n    \nsample_names = 'Ab, cd, Z, ab'\nprint(sample_names)\nprint(sample_names.split(','))\nprint(sample_nam(sample_names))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name)-name.count('a') for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['Peter', 'Tony', 'Ana', 'Kelly', 'Bill']\n    # sample_names = ['Peter', 'Tony', 'Ana', 'Kelly', 'Bill']\n    \n    # METHOD 1: remove names that start with a lowercase letter\n    # lowercase_names = []\n    # for name in sample_names:\n    #     if name[0].islower():\n    #         lowercase_names.append(name)\n    \n    # print(lowercase_names)\n    # sample_names.remove(lowercase_names[0])\n    # sample_names.remove(lowercase_names[1])\n    # sample_names.remove(lowercase_names[2])\n    # sample_names.remove(lowercase_names[3])\n    \n    # METHOD 2: remove names that start with a lowercase letter and set to lowercase\n    # lowercase_names = []\n    # for name in sample_names:\n    #     if name[0].islower():\n    #         lowercase_names.append(name.lower())\n    \n    # sample_names.remove(lowercase_names[0])\n    # sample_names.remove(lowercase_names[1])\n    # sample_names.remove(lowercase_names[2])\n    # sample_names.remove(lowercase_names[3])\n    \n    # METHOD 3: check if the name is lowercase, if it is, then remove it\n    lowercase_names = [name for name in sample_names if name[0].islower()]\n    for name in lowercase_names:\n        sample_names.remove(name)\n    \n    print(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    res = list(filter(lambda x: x[0].isupper(), sample_names))\n    print(f'names after removing names starting with lowercase: {res}')\n    return len(''.join(res))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].islower():\n            names.append(name.upper())\n        else:\n            names.append(name)\n    return sum([len(name) for name in names])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in sample_names:\n        if i[0].islower():\n            sample_names.remove(i)\n    return sum(len(i) for i in sample_names)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if '(' in item:\n            index = item.find('(')\n            item = item[:index]\n        if ')' in item:\n            index = item.find(')')\n            item = item[:index+1]\n        print(item, end=' ')\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    # replace parentheses with nothing\n    string_without_parenthesis = pattern.sub('',items)\n    return string_without_parenthesis\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\([^)]*\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def remove_parenthesis(items):\n        if type(items) == list:\n            for item in items:\n                if type(item) == list:\n                    remove_parenthesis(item)\n                else:\n                    if re.search(r'\\(.*\\)', item):\n                        new_item = re.sub(r'\\(.*\\)', '', item)\n                        items.append(new_item)\n        elif type(items) == str:\n            items = re.sub(r'\\(.*\\)', '', items)\n        return items\n    return remove_parenthesis(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        for sub_item in item:\n            for i in range(len(sub_item)):\n                if sub_item[i] == \"(\":\n                    start_index = i\n                if sub_item[i] == \")\":\n                    end_index = i\n            sub_item = sub_item[0:start_index] + sub_item[end_index+1:]\n        print(sub_item)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[()]','',item)\n        new_items.append(x)\n        \n    return new_items\n        \ndef string_formatting(items):\n    '''\n    Write a function to replace the 3rd and 4th letter of every word, and combine them into a single string. \n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'\\b[a-z]{3}\\b', r'c', item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef add_parenthesis(items):\n    '''\n    Write a function to add parenthesis to a string, so it is correctly formatted as mathematical notation. \n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[\\d.]+','(',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef add_spaces(items):\n    '''\n    Write a function to add spaces between words so it is correctly formatted as mathematical notation.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[A-Za-z]',' \\g<0>',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_spaces(items):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'\\s','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_dots(items):\n    '''\n    Write a function to remove all dots from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[.]','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_letters(items):\n    '''\n    Write a function to remove all letters from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[A-Za-z]','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_non_letters(items):\n    '''\n    Write a function to remove all non-letters from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[^A-Za-z]+','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_capitalization(items):\n    '''\n    Write a function to remove all capitalization from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[A-Z]+','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_spaces(items):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'\\s','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_punctuation(items):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[^\\w\\s]+','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_duplicate_spaces(items):\n    '''\n    Write a function to remove all duplicate spaces from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'\\s+',' ',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_non_alphabetical(items):\n    '''\n    Write a function to remove all non-alphabetical characters from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[^A-Za-z]+','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_non_numeric(items):\n    '''\n    Write a function to remove all non-numeric characters from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[^\\d]+','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_numbers(items):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[\\d]+','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_spaces_dots(items):\n    '''\n    Write a function to remove all spaces and dots from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[\\s\\.]','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef reverse_string(items):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[A-Za-z]','',item)\n        x = x[::-1]\n        new_items.append(x)\n        \n    return new_items\n    \ndef remove_non_letters_numbers(items):\n    '''\n    Write a function to remove all non-letters and non-numbers from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[^A-Za-z\\d]+','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef replace_punctuation_with_space(items):\n    '''\n    Write a function to replace all punctuation with a space.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[?!,.]',' ',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef lowercase_characters(items):\n    '''\n    Write a function to lowercase all letters in a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[A-Z]+','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef uppercase_characters(items):\n    '''\n    Write a function to uppercase all letters in a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'[a-z]+','',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef uppercase_first_letter(items):\n    '''\n    Write a function to uppercase the first letter of every word in a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        x = re.sub(r'(\\w)([A-Z])','\\g<1> \\g<2>',item)\n        new_items.append(x)\n        \n    return new_items\n    \ndef capitalize_first_letters(items):\n    '''\n    Write a function to capitalize the first letters of every word in a string.\n    '"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        i = str(i)\n        a = re.sub('[()]', '', i)\n        print(a)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        item = re.sub(r'\\([^)]*\\)', '', item)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\(.*?\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return [remove_parenthesis_helper(item) for item in items]\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Recursion\n    return n*n + is_nonagonal(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 1):\n        return 0\n    return n*(n+1) + n*(n-1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_nonagonal_helper(n, curr_num):\n        if curr_num % 4 == 3:\n            return n == 1\n        return is_nonagonal_helper(n - 1, curr_num + 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((1 + 2*n) ** 2 - n) // 6\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    return n * (n+1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return sum(i for i in range(n+1))\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n**2+n)//2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def n_num(n):\n        return n*n + (n-1)*(n+1)\n    def nonagonal(n):\n        return n_num(n) - n_num(n-1)\n    return nonagonal(n)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) * 2 + 1\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search(r'\\b[^\\W][zZ]\\b', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #Text = 'The quick brown fox jumped over the lazy dog. The dog slept over the verandah.'\n    text = 'The quick brown fox jumped over the lazy dog.'\n    pattern = re.compile(r'\\b[^z]*z[^z]*\\b')\n    #text_match = pattern.search(text)\n    print(pattern.findall(text))\n    print(text)\n    #for match in text_match:\n    #    print(match)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # return re.search('z\\w+z',text)!= None\n    # return re.search('z\\w+z',text)\n    # return re.search('\\bz\\w+z\\b',text)\n    return re.search('z\\w+z',text) and re.search('\\bz\\w+z\\b',text)\n    # return re.search('z\\w+z',text) and not re.search('z\\w+z',text)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'z')\n    result = re.search(pattern, text)\n    return bool(result)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz\\b', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    text = text.lower()\n    return re.search(r'^z\\w+z$', text) and re.search(r'\\bz\\w+z\\b', text)\n    \nprint(text_match_wordz_middle('a zz ZZ zz Zz'))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    print(\"\\n--- Match wordz middle ---\")\n    wordz = re.compile(r'(\\w+z\\w+)')\n    result = wordz.finditer(text)\n    print(result)\n    for match in result:\n        print(match.group())\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = '(\\b[a-z]{1}[a-z]{0,}z[a-z]{1})\\b'\n    if re.search(regex, text):\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = \".*z.*\"\n    pattern2 = \".*z.*$\"\n    pattern3 = \"^z.*\"\n    pattern4 = \"z.*$\"\n    if re.search(pattern, text):\n        if re.search(pattern2, text):\n            if re.search(pattern3, text):\n                if re.search(pattern4, text):\n                    return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?<!\\A)z(?!\\b)')\n    #pattern = re.compile(r'\\b(?!\\A)z(?!\\b)')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input)-1\n    i = 0\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        i += 1\n        if i == k:\n            break\n        start += 1\n        end -= 1\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Approach: \n    # Reverse the array starting from 0 to k - 1.\n    # Reverse the array starting from k to n - 1.\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    L=len(input)\n    new=[]\n    if L<k:\n        print(input)\n    else:\n        #k=k%L\n        for i in range(L-k,L):\n            new.append(input[i])\n        for i in range(0,L-k):\n            new.append(input[i])\n        print(new)\nreverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10],5)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    new_list = input[k:]\n    new_list.reverse()\n    input = input[:k] + new_list\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input): \n        return input\n    else: \n        input[0 : k+1] = input[-1 : k-1 : -1] \n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print(\"Given array: \", input)\n    print(\"Reversed array upto k: \")\n    \n    # Traverse the entire array\n    for i in range(0,len(input)):\n        # If current position is smaller than or equal to k, then reverse the subarray from 0 to k\n        if(i <= k):\n            print(input[i],end=\" \")\n        else:\n            # If current position is greater than k, then reverse the subarray from k to last element\n            print(input[len(input)-i-1],end=\" \")\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input)<=1:\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #reversing the input array using slicing. \n    print(input[:k][::-1]+ input[k:])\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_array_upto_k(input, k):\n        i = 0\n        j = len(input) -1\n        while i < k//2:\n            input[i], input[j] = input[j], input[i]\n            i +=1\n            j -= 1\n        return input\n    return reverse_array_upto_k(input, k)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def array_reverse(input, k):\n        start = 0\n        end = k - 1\n        while(start < end):\n            input[start], input[end] = input[end], input[start]\n            start += 1\n            end -= 1\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict.update(test_tup)\n    return test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.items())\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup[0] = test_tup[0] + 1\n    test_tup = tuple([test_dict, test_tup])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Type your code here\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # return (test_tup + (test_dict,))\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 1:\n        return 0\n    r = [[0] * N for i in range(N)]\n    for i in range(N):\n        for j in range(N):\n            r[i][j] = cost[i][j]\n    for i in range(1, N):\n        for j in range(i, N):\n            if i == 1:\n                r[i][j] = max(r[i][j - 1], r[i - 1][j])\n            else:\n                r[i][j] = max(r[i][j - 1], r[i - 1][j], r[i - 1][j - 1]) + cost[i][j]\n    return int(r[N - 1][N - 1] / (N - 1))\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    total_cost = 0\n    num_of_cells = 0\n    max_avg = 0\n    \n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            total_cost += cost[i][j]\n            num_of_cells += 1\n            if i == len(cost)-1 and j == len(cost[i])-1:\n                continue\n            else:\n                max_avg = max(max_avg, (total_cost/num_of_cells))\n                if j == len(cost[i])-1:\n                    continue\n                else:\n                    total_cost -= cost[i][j]\n                    num_of_cells -= 1\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def max_avg_of_path(cost, i, j, path_cost=0, path_len=1):\n        if i >= len(cost) or j >= len(cost) or i < 0 or j < 0 or cost[i][j] == 0:\n            return 0, 0\n        \n        path_cost += cost[i][j]\n        path_len += 1\n        ans1, ans2 = max_avg_of_path(cost, i+1, j, path_cost, path_len)\n        ans3, ans4 = max_avg_of_path(cost, i, j+1, path_cost, path_len)\n        return path_cost+ans1+ans2, path_len+ans3+ans4\n    \n    return max_avg_of_path(cost, 0, 0)[0] / max_avg_of_path(cost, 0, 0)[1]\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    if rows == 1:\n        return min(cost[0])\n    elif cols == 1:\n        return min(cost[0])\n    \n    def get_max_avg_path(cost, row, col, curr_sum, num_elem, max_avg, all_paths):\n        # if current row and col are out of bound\n        if row < 0 or row >= rows or col < 0 or col >= cols:\n            return 0\n        # if current row and col is already visited\n        if cost[row][col] == 0:\n            return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    columns = len(cost[0])\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    global N\n    N = len(cost)\n    A = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(N):\n            A[i][j] = cost[i][j]\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m,n = len(cost), len(cost[0])\n    # preprocessing step to obtain the minimum cost for each cell from the top left cell\n    # and the minimum cost from the bottom right cell\n    for i in range(1,m):\n        for j in range(1,n):\n            cost[i][j] = min(cost[i-1][j], cost[i][j-1]) + cost[i][j]\n    # for each cell in the matrix we compute the min average cost for the path\n    # from the top left to current cell and from the bottom right to current cell\n    # and then we choose the maximum of these two averages\n    return max(sum(cost[i][j]//(i*j) for i in range(m))//m for j in range(n))\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxAverageOfPath(cost):\n        global N, matrix, visited, path, answer, curr_sum, prev_sum\n        def dfs(i, j, curr_sum, prev_sum):\n            global N, visited, path, answer, curr_sum, prev_sum\n            if visited[i][j] == 1:\n                return\n            \n            if i == N-1 and j == N-1:\n                if answer[0] < curr_sum:\n                    answer[0] = curr_sum\n                    answer[1] = len(path)\n                return\n            \n            if i+1 < N:\n                curr_sum += cost[i][j]\n                visited[i][j] = 1\n                path.append([i, j])\n                dfs(i+1, j, curr_sum, prev_sum)\n                curr_sum -= cost[i][j]\n                visited[i][j] = 0\n                path.pop()\n            \n            if j+1 < N:\n                curr_sum += cost[i][j]\n                visited[i][j] = 1\n                path.append([i, j])\n                dfs(i, j+1, curr_sum, prev_sum)\n                curr_sum -= cost[i][j]\n                visited[i][j] = 0\n                path.pop()\n            \n            curr_sum = prev_sum\n        \n        if cost == []:\n            return 0\n        \n        N = len(cost)\n        answer = [0, 0]\n        curr_sum, prev_sum = 0, 0\n        \n        visited = [[0 for _ in range(N)] for _ in range(N)]\n        path = [[0 for _ in range(N)] for _ in range(N)]\n        dfs(0, 0, curr_sum, prev_sum)\n        \n        return answer[0]/answer[1]"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def findMaxAverage(cost):\n        m, n = len(cost), len(cost[0])\n        cost = [[0] * m] + cost\n        dp = [[0] * m for _ in range(n + 1)]\n        dp[1][0] = cost[1][0]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[j + 1][i] = cost[j + 1][i] + max(dp[j][i - 1], dp[j + 1][i - 1])\n        return max(dp[-1])\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def findPath(cost, path, idx, visited, total_cost, max_avg):\n        if idx == len(cost):\n            return\n        if (idx, len(cost)) in visited:\n            return\n        if idx == len(cost) - 1:\n            total_cost += cost[idx][len(cost) - 1]\n            visited.add((idx, len(cost)))\n            if total_cost / len(visited) > max_avg:\n                max_avg = total_cost / len(visited)\n            return\n        if idx < len(cost) - 1:\n            path.append((idx, len(cost) - 1))\n            findPath(cost, path, idx + 1, visited, total_cost, max_avg)\n            path.pop()\n        if idx < len(cost) - 1:\n            path.append((idx, idx))\n            findPath(cost, path, idx + 1, visited, total_cost, max_avg)\n            path.pop()\n        visited.add((idx, len(cost)))\n        total_cost += cost[idx][len(cost) - 1]\n        if total_cost / len(visited) > max_avg:\n            max_avg = total_cost / len(visited)\n        return\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    print(filtered_students)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {\n        student: student_info\n        for student, student_info in students.items()\n        if student_info[0]>=h and student_info[1]>=w\n    }\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student, (h,w) in students.items():\n        if h<h and w>w:\n            students.pop(student)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # check for None values in the dictionary\n    if len(students) == 0:\n        return\n    \n    for key in students:\n        # check for None values\n        if (students[key][0] is None) or (students[key][1] is None):\n            students.pop(key)\n            continue\n        \n        if students[key][0] < h or students[key][1] < w:\n            students.pop(key)\n            continue\n            \n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    return {k:v for k,v in students.items() if v[0]>h and v[1]>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_data[student] = students[student]\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_data = {}\n    for s in students:\n        if students[s][0] < h and students[s][1] < w:\n            filter_data[s] = students[s]\n    return filter_data\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = {}\n    for student,values in students.items():\n        if values[0] >= h and values[1] >= w:\n            res[student] = values\n    return res\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filtered = {}\n    for s in students:\n        if students[s][0] < h and students[s][1] < w:\n            students_filtered[s] = students[s]\n    return students_filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {x: y for x,y in students.items() if y[0] > h and y[1] > w}\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(eq(nums1[i], nums2[i]) for i in range(len(nums1)))\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2)\n    num_same_pair = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            num_same_pair += 1\n    return num_same_pair\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_count += 1\n    return same_count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert(len(nums1) == len(nums2))\n    count = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    count=0\n    for i in range(0, len(nums1)):\n        if nums1[i]==nums2[i]:\n            count+=1\n    return count\n    \ndef count_same_number(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same value.\n    '''\n    \n    count=0\n    for i in range(0, len(nums1)):\n        if nums1[i]==nums2[i]:\n            count+=1\n    return count\n    \ndef sum_two_arrays(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to sum the values of each element.\n    '''\n    \n    sum=0\n    for i in range(0, len(nums1)):\n        sum=sum+nums1[i]+nums2[i]\n    return sum\n    \ndef sum_two_arrays(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to sum the values of each element.\n    '''\n    \n    sum=0\n    for i in range(0, len(nums1)):\n        sum=sum+nums1[i]+nums2[i]\n    return sum\n    \ndef largest_value_in_array(nums):\n    '''\n    Write a function to find the largest value in an array.\n    '''\n    \n    max=nums[0]\n    for i in range(0, len(nums)):\n        if nums[i]>max:\n            max=nums[i]\n    return max\n    \ndef smallest_value_in_array(nums):\n    '''\n    Write a function to find the smallest value in an array.\n    '''\n    \n    min=nums[0]\n    for i in range(0, len(nums)):\n        if nums[i]<min:\n            min=nums[i]\n    return min\n    \ndef is_member(item, nums):\n    '''\n    Write a function to check if an item is a member of a list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i]==item:\n            return True\n    return False\n    \ndef is_member(item, nums):\n    '''\n    Write a function to check if an item is a member of a list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i]==item:\n            return True\n    return False\n    \ndef is_member(item, nums):\n    '''\n    Write a function to check if an item is a member of a list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i]==item:\n            return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if nums[i]==nums[j]:\n                return True\n    return False\n    \ndef contains_duplicate(nums):\n    '''\n    Write a function to check if an array contains duplicate values.\n    '''\n    \n    for i in range(0, len(nums)):\n        for j in range(0, i):\n            if num"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if(nums1[i] == nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    output = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            output += 1\n    return output\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_digit_sum = 0\n    while base > 0:\n        base_digit_sum += base % 10\n        base //= 10\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    count = 0\n    for i in range(1, base + 1):\n        count += i ** power\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += base\n        base *= base\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) for x in str(base**power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert strings to ints\n    base, power = int(base), int(power)\n    # Make sure power is positive\n    if power < 0:\n        print(\"Please input a positive number for power.\")\n        return 0\n    # Recursive function to calculate sum of digits of base to the power\n    return sum([int(i) for i in str(base ** power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if isinstance(base, int) and isinstance(power, int):\n        if power == 0:\n            return 1\n        elif power < 0:\n            return power_base_sum(base, power * -1) * 1 / base\n        elif power > 0:\n            return power_base_sum(base, power - 1) + base\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) ** power for i in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while(power > 0):\n        total += base\n        power -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        sum_of_digits += base\n        power -= 1\n    return sum_of_digits\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    result = 0\n    for index, digit in enumerate(base_str):\n        result += int(digit)**power\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = '\"Sunday morning, Val is preparing for his assignment\" and \"I\\'m only working on Monday\" and \"I\\'m free on Tuesday\"'\n    #pattern = re.compile('(.*)\\s(\\'(.*)\\')(.*)')\n    #print(re.search(pattern, text1).groups())\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print(\"Text1: \"+text1)\n    #regex = re.compile(r'\"[a-zA-Z0-9#@%_!.,()|=+*/\\-]*\"')\n    #match = regex.findall(text1)\n    #print(\"Values between quotation marks : \"+ str(match))\n    #print(re.findall(r'\"[a-zA-Z0-9#@%_!.,()|=+*/\\-]*\"', text1))\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"(.*?)\"', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    '''\n    Output should be in the form of a list.\n    '''\n    p = re.compile(r'\"([^\"]+)\"')\n    a = p.findall(text1)\n    return a\n    # a = re.findall(r'\"([^\"]+)\"', text1)\n    # a = re.findall(r'\"([^\"]+)\"', text1)\n    # return a\n    \n    \ndef remove_comma(text2):\n    '''\n    Write a function to remove all commas in a given string.\n    '''\n    p = re.compile(r'[,]')\n    a = p.sub('',text2)\n    return a\n    # a = re.sub(r'[,]', '', text2)\n    # return a\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=text1[0]\n    #print(text1)\n    l=text1.split('\"')\n    #print(l)\n    r=len(l)-1\n    #print(r)\n    x=l[r]\n    #print(x)\n    return x\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = input('Enter the string:')\n    p1 = re.compile(r'\"(.*?)\"')\n    res1 = p1.findall(text1)\n    print(\"Results of extract_quotation function: \")\n    print(res1)\n    return\nextract_quotation('\"Hello\", how are you?\"')\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_list=re.findall('\"\\w+\"',text1)\n    return quotation_list\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\"[^\"]+\"', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # text1=\"IT'S ME, Rohan. IT'S ME, Rohan. IT'S ME, Rohan.\"\n    # text2=\"it's me, rohan.\"\n    # text3=\"it's me, rohan\"\n    # text4=\"IT'S ME, Rohan.\"\n    # text5=\"IT'S ME, Rohan.\"\n    # text6=\"it's me, rohan.\"\n    # text7=\"it's me, rohan\"\n    # text8=\"it's me, rohan\"\n    # text9=\"IT'S ME, Rohan.\"\n    # text10=\"IT'S ME, Rohan. It's me, Rohan.\"\n    # text11=\"IT'S ME, Rohan.\"\n    # text12=\"It's me, Rohan.\"\n    # text13=\"It's me, Rohan. It's me, Rohan.\"\n    # text14=\"It's me, Rohan. It's me, Rohan.\"\n    # text15=\"It's me, Rohan.\"\n    # text16=\"It's me, Rohan.\"\n    # text17=\"It's me, Rohan. It's me, Rohan.\"\n    # text18=\"IT'S ME, Rohan.\"\n    # text19=\"It's me, Rohan.\"\n    # text20=\"It's me, Rohan.\"\n    # text21=\"It's me, Rohan. It's me, Rohan.\"\n    # text22=\"It's me, Rohan. It's me, Rohan.\"\n    # text23=\"It's me, Rohan.\"\n    # text24=\"It's me, Rohan.\"\n    # text25=\"It's me, Rohan.\"\n    # text26=\"It's me, Rohan.\"\n    # text27=\"It's me, Rohan.\"\n    # text28=\"It's me, Rohan.\"\n    # text29=\"It's me, Rohan.\"\n    # text30=\"It's me, Rohan.\"\n    # text31=\"It's me, Rohan.\"\n    # text32=\"It's me, Rohan.\"\n    # text33=\"It's me, Rohan.\"\n    # text34=\"It's me, Rohan.\"\n    # text35=\"It's me, Rohan.\"\n    # text36=\"It's me, Rohan.\"\n    # text37=\"It's me, Rohan.\"\n    # text38=\"It's me, Rohan.\"\n    # text39=\"It's me, Rohan.\"\n    # text40=\"It's me, Rohan.\"\n    # text41=\"It's me, Rohan.\"\n    # text42=\"It's me, Rohan.\"\n    # text43=\"It's me, Rohan.\"\n    # text44=\"It's me, Rohan.\"\n    # text45=\"It's me, Rohan.\"\n    # text46=\"It's me, Rohan.\"\n    # text47=\"It's me, Rohan.\"\n    # text48=\"It's me, Rohan.\"\n    # text49=\"It's me, Rohan.\"\n    # text50=\"It's me, Rohan.\"\n    # text51=\"It's me, Rohan.\"\n    # text52=\"It's me, Rohan.\"\n    # text53=\"It's me, Rohan.\"\n    # text54=\"It's me, Rohan.\"\n    # text55=\"It's me, Rohan.\"\n    # text56=\"It's me, Rohan.\"\n    # text57=\"It's me, Rohan.\"\n    # text58=\"It's me, Rohan.\"\n    # text59=\"It's me, Rohan.\"\n    # text60=\"It's me, Rohan.\"\n    # text61=\"It's me, Rohan.\"\n    # text62=\"It's me, Rohan.\"\n    # text63=\"It's me, Rohan.\"\n    # text64=\"It's me, Rohan.\"\n    # text65=\"It's me, Rohan.\"\n    # text66=\"It's me, Rohan.\"\n    # text67=\"It's me, Rohan.\"\n    # text68=\"It's me, Rohan.\"\n    # text69=\"It's me, Rohan.\"\n    # text70=\"It's me, Rohan.\"\n    # text71=\"It's me, Rohan.\"\n    # text72=\"It's me, Rohan.\"\n    # text73=\"It's me, Rohan.\"\n    # text74=\"It's me, Rohan.\"\n    # text75=\"It's me, Rohan.\"\n    # text76=\"It's me, Rohan.\"\n    # text77=\"It's me, Rohan.\"\n    # text78=\"It's me, Rohan.\"\n    # text79=\"It's me, Rohan.\"\n    # text80=\"It's me, Rohan.\"\n    # text81=\"It's me, Rohan.\"\n    # text82=\"It's me, Rohan.\"\n    # text83=\"It's me, Rohan.\"\n    # text84=\"It's me, Rohan.\"\n    # text85=\"It's me, Rohan.\"\n    # text86=\"It's me, Rohan.\"\n    # text87=\"It's me, Rohan.\"\n    # text88=\"It's me, Rohan.\"\n    # text89=\"It's me, Rohan.\"\n    # text90=\"It's me, Rohan.\"\n    # text91=\"It's me, Rohan.\"\n    # text92=\"It's me, Rohan.\"\n    # text93=\"It's me, Rohan.\"\n    # text94=\"It's me, Rohan.\"\n    # text95=\"It's me, Rohan.\"\n    # text96=\"It's me, Rohan.\"\n    # text97=\"It's me, Rohan.\"\n    # text98=\"It's me, Rohan.\"\n    # text99=\"It's me, Rohan.\"\n    # text100=\"It's me, Rohan.\"\n    # text101=\"It's me, Rohan.\"\n    # text102=\"It's me, Rohan.\"\n    # text103=\"It's me, Rohan.\"\n    # text104=\"It's me, Rohan.\"\n    # text105=\"It's me, Rohan.\"\n    # text106=\"It's me, Rohan.\"\n    # text107=\"It's me, Rohan.\"\n    # text108=\"It's me, Rohan.\"\n    # text109=\"It's me, Rohan.\"\n    # text110=\"It's me, Rohan.\"\n    # text111=\"It's me, Rohan.\"\n    # text112=\"It's me, Rohan.\"\n    # text113=\"It's me, Rohan.\"\n    # text114=\"It's me, Rohan.\"\n    # text115=\"It's me, Rohan.\"\n    # text116=\"It's me, Rohan.\"\n    # text117=\"It's me, Rohan.\"\n    # text118=\"It's me, Rohan.\"\n    # text119=\"It's me, Rohan.\"\n    # text120=\"It's me, Rohan.\"\n    # text121=\"It's me, Rohan.\"\n    # text122=\"It's me, Rohan.\"\n    # text123=\"It's me, Rohan.\"\n    # text124=\"It's me, Rohan.\"\n    # text125=\"It's me, Rohan.\"\n    # text126=\"It's me, Rohan.\"\n    # text127=\"It's me, Rohan.\"\n    # text128=\"It's me, Rohan.\"\n    # text129=\"It's me, Rohan.\"\n    # text130=\"It's me, Rohan.\"\n    # text131=\"It's me, Rohan.\"\n    # text132=\"It's me, Rohan.\"\n    # text133=\"It's me, Rohan.\"\n    # text134=\"It's me, Rohan.\"\n    # text135=\"It's me, Rohan.\"\n    # text136=\"It's me, Rohan.\"\n    # text137=\"It's me, Rohan.\"\n    # text138=\"It's me, Rohan.\"\n    # text139=\"It's me, Rohan.\"\n    # text140=\"It's me, Rohan.\"\n    # text141=\"It's me, Rohan.\"\n    # text142=\"It's me, Rohan.\"\n    # text143=\"It's me, Rohan.\"\n    # text144=\"It's me, Rohan.\"\n    # text145=\"It's me, Rohan.\"\n    # text146=\"It's me, Rohan.\"\n    # text147=\"It's me, Rohan.\"\n    # text148=\"It's me, Rohan.\"\n    # text149=\"It's me, Rohan.\"\n    # text150=\"It'"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_list = re.findall(r'\"([^\"]*)\"', text1)\n    return quotation_list\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_list = list()\n    for index in range(len(test_tup)-1):\n        value = test_tup[index] * test_tup[index + 1]\n        new_list.append(value)\n    return tuple(new_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup) - 1):\n        new_tuple += (test_tup[i] * test_tup[i + 1],)\n    return new_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize a list with N+1 zeros \n    # multiply each element with its subsequent element\n    # add together each multiplication and store in list\n    # return list\n    multiply = lambda x,y: x * y\n    return reduce(multiply, test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert type(test_tup)==tuple, \"Input type needs to be a tuple\"\n    assert len(test_tup)>1, \"At least two elements needed\"\n    result_tup = ()\n    for index, item in enumerate(test_tup):\n        if index == len(test_tup)-1:\n            break\n        result_tup += (item*test_tup[index+1],)\n    return result_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = test_tup[:-1]\n    for i in range(len(test_tup)):\n        test_tup[i] = test_tup[i] * test_tup[i+1]\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)-1):\n        res += (test_tup[i]*test_tup[i+1],)\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # base case - empty tuple\n    if test_tup == ():\n        return ()\n    else:\n        # extract first element and recurse with rest\n        first_el = test_tup[0]\n        rest = test_tup[1:]\n        return (first_el * rest)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup) - 1):\n        new_tuple = new_tuple + (test_tup[i] * test_tup[i + 1],)\n    return new_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    x = test_tup\n    y = []\n    for i in range(len(x)):\n        z = x[i]*x[i+1]\n        y.append(z)\n    y.append(x[-1])\n    return tuple(y)\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1) + sum(lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    \ndef sum_list2(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) >= len(lst2) else [lst2[i]+lst1[i] for i in range(min(len(lst1),len(lst2)))]\n    \n    \ndef sum_list3(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) >= len(lst2) else [lst2[i]+lst1[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) < len(lst2) else [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    \n    \ndef sum_list4(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) >= len(lst2) else [lst2[i]+lst1[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) < len(lst2) else [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    \n    \n    \ndef sum_list5(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) >= len(lst2) else [lst2[i]+lst1[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) < len(lst2) else [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    \n    \n    \ndef sum_list6(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) >= len(lst2) else [lst2[i]+lst1[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) < len(lst2) else [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    \n    \ndef sum_list7(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) >= len(lst2) else [lst2[i]+lst1[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) < len(lst2) else [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    \n    \ndef sum_list8(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) >= len(lst2) else [lst2[i]+lst1[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) < len(lst2) else [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    \n    \ndef sum_list9(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) >= len(lst2) else [lst2[i]+lst1[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) < len(lst2) else [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    \n    \ndef sum_list10(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) >= len(lst2) else [lst2[i]+lst1[i] for i in range(min(len(lst1),len(lst2)))] if len(lst1) < len(lst2) else [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    \n    \ndef sum_list11(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(min(len(lst1)"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #return sum_list(lst1,lst2)[0] if len(lst1)==len(lst2) else [sum(x) for x in zip(lst1,lst2)]\n    return sum_list(lst1,lst2)[0] if len(lst1)==len(lst2) else sum_list(lst1,lst2)[0] if len(lst1)>len(lst2) else sum_list(lst2,lst1)[0] if len(lst1)<len(lst2) else list(map(lambda x,y:x+y,lst1,lst2))\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise IndexError('Lists must have equal length')\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    n = len(lst1)\n    m = len(lst2)\n    if n==m:\n        return [lst1[i]+lst2[i] for i in range(n)]\n    else:\n        print('Input lists must be of equal size.')\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print('Error: lists must have the same length!')\n    else:\n        return [a + b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return \"Input lists must be the same length.\"\n    else:\n        return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] = lst1[i] + lst2[i]\n    return lst1\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    sorted_list = []\n    for key,group in groupby(nums):\n        sorted_list.append(key)\n    return sorted_list\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = [x for x in nums if x!= nums[-1]]\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = []\n    for key, group in groupby(nums):\n        lst.append(key)\n    return lst\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i in nums:\n        if nums.count(i)>1:\n            nums.remove(i)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for (k, g) in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return len(nums)==len(set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Using loop for removing duplicates\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i=0\n    for j in range(len(nums)):\n        if nums[i]!=nums[j]:\n            i+=1\n            nums[i]=nums[j]\n    return nums[:i+1]\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #return 2*math.pi*r**2 + 2*math.pi*r*h\n    return 3.14*r**2 + 3.14*r*h\ndef lateralsurface_pyramid(a,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the base a and the height h.\n    '''\n    return 2*a*h + 2*a**2\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given the radius r.\n    '''\n    return 2*math.pi*r**2\ndef lateralsurface_square(side):\n    '''\n    Write a function to find the lateral surface area of a square given the side length.\n    '''\n    return 4*side**2\ndef lateralsurface_rectangle(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the width and height.\n    '''\n    return 2*sidea*sideb\ndef lateralsurface_triangle(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a triangle given the sides.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_parallelogram(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the sides.\n    '''\n    return sidea*sideb\ndef lateralsurface_trapezium(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezium given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_parallelogram(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the sides.\n    '''\n    return sidea*sideb\ndef lateralsurface_trapezium(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezium given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_isosceles_triangle(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a isosceles triangle given the sides.\n    '''\n    return sidea*sideb\ndef lateralsurface_isosceles_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a isosceles rhombus given the sides.\n    '''\n    return sidea*sideb\ndef lateralsurface_isosceles_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a isosceles trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rectangle(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the width and height.\n    '''\n    return 2*sidea*sideb\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n    '''\n    return ((sidea+sideb)/2)*sidec\ndef lateralsurface_rhombus(sidea,sideb):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the diagonals.\n    '''\n    return sidea*sideb/2\ndef lateralsurface_trapezoid(sidea,sideb,sidec):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the sides.\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r + math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3.14159 * (r ** 2)) + (3.14159 * (r ** 2))\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi*r*r\n    S = A*h + (math.pi*r*r)\n    return S\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    result=math.pi*r*(r+math.sqrt((r**2)+h**2))\n    return result\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*(r**2 + r*h)\ndef lateralsurface_vol(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*(r**2 + r*h) * h/3\ndef vol_vs_radius(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return 3*pi/2 * r**2\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if type(r) == str:\n        print(\"The radius cannot be a string.\")\n        return False\n    if type(h) == str:\n        print(\"The height cannot be a string.\")\n        return False\n    surface_area = ((3.14 * r * r) + (3.14 * r * h)) * 2\n    return surface_area\ndef lateralsurface_cone2(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = (3.14 * r * r) + (3.14 * r * h) * 2\n    return surface_area\ndef sum_two_integers(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    if type(a) == str:\n        print(\"The first number cannot be a string.\")\n        return False\n    if type(b) == str:\n        print(\"The second number cannot be a string.\")\n        return False\n    return a + b\ndef sum_two_integers2(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers3(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    if type(a) == int and type(b) == int:\n        return a + b\n    else:\n        print(\"You must enter two integers.\")\n        return False\ndef sum_two_integers4(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    if type(a) == int and type(b) == int:\n        return a + b\n    else:\n        return a + b\ndef sum_two_integers5(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers6(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers7(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers8(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers9(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers10(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers11(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers12(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers13(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers14(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers15(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers16(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers17(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers18(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers19(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers20(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers21(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers22(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers23(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers24(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers25(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers26(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers27(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers28(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers29(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers30(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers31(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers32(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers33(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers34(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers35(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers36(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers37(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers38(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers39(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers40(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers41(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integers42(a, b):\n    '''\n    Write a function to return the sum of two integers.\n    '''\n    return a + b\ndef sum_two_integer"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*h/3\ndef verticalsurface_cone(r,h):\n    '''\n    Write a function to find the vertical surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*(h/3)\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*(h/3)\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    return lateralsurface_cone(r,h)+verticalsurface_cone(r,h)\ndef lateralvolume_cone(r,h):\n    '''\n    Write a function to find the lateral volume of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return lateralvolume_cone(r,h)+math.pi*r*r*r/3\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given side b and the height h.\n    '''\n    return b*h\ndef verticalsurface_cuboid(b,h):\n    '''\n    Write a function to find the vertical surface area of a cuboid given side b and the height h.\n    '''\n    return 2*b*h\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given side b and the height h.\n    '''\n    return 2*b*h\ndef surface_cuboid(b,h):\n    '''\n    Write a function to find the surface area of a cuboid given side b and the height h.\n    '''\n    return lateralsurface_cuboid(b,h)+verticalsurface_cuboid(b,h)\ndef lateralvolume_cuboid(b,h):\n    '''\n    Write a function to find the lateral volume of a cuboid given side b and the height h.\n    '''\n    return b*h\ndef volume_cuboid(b,h):\n    '''\n    Write a function to find the volume of a cuboid given side b and the height h.\n    '''\n    return lateralvolume_cuboid(b,h)+b*h*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h\ndef verticalsurface_cylinder(r,h):\n    '''\n    Write a function to find the vertical surface area of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r*r\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and the height h.\n    '''\n    return lateralsurface_cylinder(r,h)+verticalsurface_cylinder(r,h)\ndef lateralvolume_cylinder(r,h):\n    '''\n    Write a function to find the lateral volume of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r*r*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    return lateralvolume_cylinder(r,h)+math.pi*r*r*r/3\ndef lateralsurface_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere given radius r.\n    '''\n    return 4*math.pi*r*r\ndef surface_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere given radius r.\n    '''\n    return lateralsurface_hemisphere(r)+4*math.pi*r*r\ndef lateralvolume_hemisphere(r):\n    '''\n    Write a function to find the lateral volume of a hemisphere given radius r.\n    '''\n    return 4/3*math.pi*r*r*r\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere given radius r.\n    '''\n    return lateralvolume_hemisphere(r)+4/3*math.pi*r*r*r\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r*r\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    return lateralsurface_sphere(r)+4*math.pi*r*r\ndef lateralvolume_sphere(r):\n    '''\n    Write a function to find the lateral volume of a sphere given radius r.\n    '''\n    return 4/3*math.pi*r*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    return lateralvolume_sphere(r)+4/3*math.pi*r*r*r\ndef lateralsurface_kettle(b,h):\n    '''\n    Write a function to find the lateral surface area of a kettle given base b and height h.\n    '''\n    return 2*math.pi*b*h+2*math.pi*b*(h/2)\ndef verticalsurface_kettle(b,h):\n    '''\n    Write a function to find the vertical surface area of a kettle given base b and height h.\n    '''\n    return math.pi*b*b\ndef lateralsurface_kettle(b,h):\n    '''\n    Write a function to find the lateral surface area of a kettle given base b and height h.\n    '''\n    return 2*math.pi*b*h+2*math.pi*b*(h/2)\ndef surface_kettle(b,h):\n    '''\n    Write a function to find the surface area of a kettle given base b and height h.\n    '''\n    return lateralsurface_kettle(b,h)+verticalsurface_kettle(b,h)\ndef lateralvolume_kettle(b,h):\n    '''\n    Write a function to find the lateral volume of a kettle given base b and height h.\n    '''\n    return math.pi*b*b*h\ndef volume_kettle(b,h):\n    '''\n    Write a function to find the volume of a kettle given base b and height h.\n    '''\n    return lateralvolume_kettle(b,h)+b*b*h\ndef lateralsurface_prism(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a prism given base a, b, and height c.\n    '''\n    return 2*math.pi*a*b+2*math.pi*a*c\ndef verticalsurface_prism(a,b,c):\n    '''\n    Write a function to find the vertical surface area of a prism given base a, b, and height c.\n    '''\n    return 2*math.pi*a*c\ndef lateralsurface_prism(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a prism given base a, b, and height c.\n    '''\n    return 2*math.pi*a*b+2*math.pi*a*c\ndef surface_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a prism given base a, b, and height c"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=3.14*r*r\n    B=3.14*r*h\n    C=3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    A=2*3.14*r*r\n    B=2*3.14*r*h\n    C=2*3.14*h*h\n    surfacearea=A+B+C\n    return surfacearea\ndef lateralsurface_cone(r"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)*h/3\ndef lateralarea_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)*(h/3)\ndef lateralarealateral_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)*h\ndef lateralarearadius_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)*(3*h/8)\ndef lateralareahoe_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)*(h/8)\ndef lateralareashoe_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)*(3*h/8)\ndef lateralarea_choe(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)*(h/3)\ndef lateralareahoe_choe(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)*(h/8)\ndef lateralareashoe_choe(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)*(3*h/8)\ndef lateral_surface_area_of_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\ndef lateral_surface_area_of_cylinder_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\ndef lateral_surface_area_of_cylinder_surface_cylinder(r1,h1,r2,h2):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return 2*math.pi*(r1+r2)*(r1+h1+h2)\ndef lateral_surface_area_of_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*r*r*h\ndef lateral_surface_area_of_cone_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\ndef lateral_surface_area_of_cone_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*r*math.sqrt(r**2+h**2)\ndef lateral_surface_area_of_conicylinder_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\ndef lateral_surface_area_of_conicylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*r*r*h\ndef lateral_surface_area_of_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return 2*a*b+2*a*c+2*b*c\ndef lateral_surface_area_of_rectangular_prism_volume(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return a*b*c\ndef lateral_surface_area_of_triangular_prism(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return 2*a*b+2*b*c+2*c*a\ndef lateral_surface_area_of_triangular_prism_volume(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.sqrt(a**2+b**2+c**2)\ndef lateral_surface_area_of_parabolic_prism(a,b):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(a+b)\ndef lateral_surface_area_of_parabolic_prism_volume(a,b):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*a*b\ndef lateral_surface_area_of_cone(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2)\ndef lateral_surface_area_of_cone_volume(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*r*r\ndef lateral_surface_area_of_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return 2*a*b+2*a*c+2*b*c\ndef lateral_surface_area_of_rectangular_prism_volume(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return a*b*c\ndef lateral_surface_area_of_triangular_prism(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return 2*a*b+2*b*c+2*c*a\ndef lateral_surface_area_of_triangular_prism_volume(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.sqrt(a**2+b**2+c**2)\ndef lateral_surface_area_of_parabolic_prism(a,b):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('( |,|\\.)','::',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(\"\\s\", \":\", text)\n    text = re.sub(\"\\.\", \":\", text)\n    text = re.sub(\",\", \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    output = text.replace('.', ':')\n    output = output.replace(',', ':')\n    output = output.replace(' ', ':')\n    return output\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = re.sub(r'[ ]', ':', text)\n    # text = re.sub(r'[.]', ':', text)\n    # text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[ ]', ':', text)\n    text = re.sub(r'[.]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace(',',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = \"replace all occurrences of spaces, commas, or dots with a colon\"\n    text = re.sub(r\"[,.]\", \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace('.',':').replace(',','::')\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # your code here\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    text = text.replace(' ', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', ':', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start, end = 0, len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = 0\n    last = len(A) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if x == A[mid]:\n            if (mid - 1 < 0 or x!= A[mid - 1]) and (mid + 1 > len(A) - 1 or x!= A[mid + 1]):\n                return mid\n            elif mid - 1 >= 0 and x == A[mid - 1]:\n                last = mid - 1\n            else:\n                first = mid + 1\n        elif x > A[mid]:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] > x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or A[mid-1]!= A[mid]:\n                return mid\n            else:\n                right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    first_occurrence = -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    return binary_search(A, x, start, end)\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # subarray_prod = 1\n    # l = len(arr)\n    # for i in range(l):\n    #     subarray_prod *= arr[i]\n    # prod_of_subarray = [subarray_prod]\n    # for j in range(i+1, l):\n    #     subarray_prod = subarray_prod * arr[j]\n    #     prod_of_subarray.append(subarray_prod)\n    # print(sum(prod_of_subarray))\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    prod = 1\n    summ = 0\n    for i in range(n):\n        prod = prod * arr[i]\n        summ = summ + prod\n    \n    prod = 1\n    for i in range(n-1,-1,-1):\n        prod = prod * arr[i]\n        summ = summ + prod\n    return summ\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        curr_prod = 1\n        for j in range(i, n):\n            curr_prod = curr_prod * arr[j]\n            sum += curr_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n    prod = 1\n    sum = 0\n    for i in arr:\n        prod *= i\n    for i in range(len(arr)):\n        sum += (prod/arr[i])\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    if l == 0:\n        return 0\n    temp = [1 for i in range(l)]\n    for i in range(1,l):\n        temp[i] = temp[i-1]*arr[i-1]\n    sum1 = 0\n    for i in range(l):\n        sum1 += temp[i]*(temp[l-i-1]/(arr[i]*arr[l-1]))\n    return sum1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            product = 1\n            for k in range(i,j+1):\n                product *= arr[k]\n            sum+=product\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_so_far=1\n    sum_prod=0\n    n=len(arr)\n    for i in range(n):\n        sum_prod=sum_prod+arr[i]\n        sum_so_far=sum_so_far*sum_prod\n    \n    for i in range(n):\n        for j in range(i,n):\n            sum_so_far=sum_so_far//sum_prod\n            sum_prod=sum_prod*arr[j]\n    \n    return sum_so_far\n    \ndef sum_Of_Subarray_Prod_opt(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_so_far=1\n    sum_prod=0\n    n=len(arr)\n    for i in range(n):\n        sum_prod=sum_prod+arr[i]\n        sum_so_far=sum_so_far*sum_prod\n    \n    return sum_so_far\n    \ndef find_Max_Subarray_Sum(arr):\n    '''\n    Write a python function to find maximum contiguous subarray sum.\n    '''\n    max_sum=arr[0]\n    sum_so_far=0\n    for i in range(0,len(arr)):\n        sum_so_far=sum_so_far+arr[i]\n        if max_sum<sum_so_far:\n            max_sum=sum_so_far\n        if sum_so_far<0:\n            sum_so_far=0\n    return max_sum\n    \ndef find_Max_Subarray_Sum_opt(arr):\n    '''\n    Write a python function to find maximum contiguous subarray sum.\n    '''\n    max_sum=arr[0]\n    sum_so_far=0\n    for i in range(0,len(arr)):\n        sum_so_far=sum_so_far+arr[i]\n        if sum_so_far>max_sum:\n            max_sum=sum_so_far\n        if sum_so_far<0:\n            sum_so_far=0\n    return max_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod = prod * arr[k]\n            sum = sum + prod\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    i = 0\n    sumOfProd = 0\n    while i < len(arr):\n        prod *= arr[i]\n        # print(\"prod \" + str(prod) + \" in loop \" + str(i))\n        j = i\n        while j < len(arr):\n            # print(\"i \" + str(i) + \" j \" + str(j))\n            prod *= arr[j]\n            # print(\"prod \" + str(prod) + \" in loop \" + str(j))\n            sumOfProd += prod\n            j += 1\n        i += 1\n    return sumOfProd\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    size = len(arr)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(n):\n        return n ^ (1 << ((len(bin(n)))-2))\n    return toggle_bits(n)\n    \ndef reverse_int(n):  \n    '''\n    Write a python function to reverse the integer.\n    '''\n    return int(str(n)[::-1])\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0xFFFFFFFF\n    return (n ^ mask)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_mask = 1 << 31\n    bit_mask = bit_mask - 1\n    n &= bit_mask\n    n |= (1 << 30)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n & 0xAAAAAAAA) ^ (n & 0x55555555)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n >> 1 #First bit is 0, so it must be toggled\n    n = n << 1 #Last bit is 1, so it must be toggled\n    n = n ^ n>>16 #All bits between first and last bit will be toggled\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(bin(n))\n    print(bin(n & (~(1 << 0) | 1 << len(bin(n)) - 1))))\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = int(n)\n    x = 1\n    n |= x << 1\n    x = x << 1\n    n &= ~x\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)  \n    n = n ^ (n >> 2)  \n    n = n ^ (n >> 4)  \n    n = n ^ (n >> 8)  \n    n = n ^ (n >> 16)  \n    return n \n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    for i in range(n):\n        n = ~(1<<i)\n    print(n)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n<=0:\n        return 0\n    else:\n        n=n^(n>>1)\n        n=n^(n<<1)\n        return n\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # bisect.bisect_left(seq, x, lo, hi)\n    # bisect_left(seq, x, lo, hi)\n    # Return the index where to insert item x in list a, assuming a is sorted.\n    # The return value i is such that all e in a[:i] have e <= x, and all e in a[i:] have e > x.\n    # seq is an iterable sequence.\n    # hi defaults to len(a).\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] >= x:\n            return i\n    return n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(n-1, -1, -1):\n        if a[i] <= x:\n            return i\n    return 0\ndef bin_search(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Implement binary search\n    n = len(a)\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if x == a[mid]:\n            return mid\n        elif x > a[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\ndef binary_search(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Implement binary search\n    n = len(a)\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\ndef insertion_sort(a):\n    '''\n    Write a function to sort a specified list of data using insertion sort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    for i in range(1, len(a)):\n        x = a[i]\n        j = i - 1\n        while j >= 0 and a[j] > x:\n            a[j+1] = a[j]\n            j -= 1\n        a[j+1] = x\ndef merge_sort(a):\n    '''\n    Write a function to sort a specified list of data using merge sort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    n = len(a)\n    if n < 2:\n        return\n    mid = n // 2\n    l = a[:mid]\n    r = a[mid:]\n    merge_sort(l)\n    merge_sort(r)\n    i = j = k = 0\n    while i < len(l) and j < len(r):\n        if l[i] < r[j]:\n            a[k] = l[i]\n            i += 1\n        else:\n            a[k] = r[j]\n            j += 1\n        k += 1\n    while i < len(l):\n        a[k] = l[i]\n        i += 1\n        k += 1\n    while j < len(r):\n        a[k] = r[j]\n        j += 1\n        k += 1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # we should be inserting if we get to this point\n    # we have to know where to start\n    if x < a[0]:\n        return 0\n    # a[-1] is the last element in the array\n    # and it always contains the greatest element\n    if x > a[-1]:\n        return len(a)\n    # a[i] is the element being inserted\n    # search a[0] to a[i]\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    return bisect.bisect_left(a, x)\n    \n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(0, len(a)):\n        if x == a[i]:\n            if i == 0 or x!= a[i-1]:\n                return i\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    n=len(a)\n    i=bisect.bisect_left(a,x)\n    if i < n and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x in a:\n        return a.index(x)\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if x < a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        print(\"String is starting with vowel\")\n    else:\n        print(\"String is not starting with vowel\")\n        "
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # pass # Remove pass after writing code\n    string=string.lower()\n    print(string)\n    pattern=re.compile(regex)\n    print(pattern)\n    if pattern.match(string) is None:\n        return False\n    else:\n        return True\n    # result=pattern.match(string)\n    # if result is None:\n    #     return False\n    # else:\n    #     return True\n    \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = str(string)\n    matches = re.findall(regex,string)\n    for word in matches:\n        if word.startswith(('a','e','i','o','u','A','E','I','O','U')):\n            return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # return re.match(regex, string)\n    return bool(re.match(regex, string))\nprint(check_str(\"AeB\"))\nprint(check_str(\"AE\"))\nprint(check_str(\"Io\"))\nprint(check_str(\"aeiou\"))\nprint(check_str(\"AEIOU\"))\nprint(check_str(\"IoU\"))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string): \n        return \"The given string is starting with a vowel.\"\n    else:\n        return \"The given string is not starting with a vowel.\"\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex,string))\nprint(check_str(\"oqwjqwwwqwjqw\"))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex) \n    result = pattern.match(string) \n    if result: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pass\n    return re.search(regex, string) is None\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # n = int(input(\"Enter the value of n:\"))\n    if n == 1:\n        return 1\n    else:\n        return 2 * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 1\n    return geometric_sum(n-1) + 1/n\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum_helper(n, a):\n        if n == 0:\n            return a\n        else:\n            return geometric_sum_helper(n - 1, a * 2)\n    return geometric_sum_helper(n - 1, 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # return (n + 1) / 2\n    return int(math.log(n + 1, 2))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = math.floor(0.5 * math.sqrt(2 * n + 0.25) - 0.5) \n    x = (k * (k + 1)) / 2\n    return int(x) - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize starting number as 0 \n    i = 1\n    \n    # Calculate the sum of the series. \n    while math.pow(10, i) <= n: \n        i += 1\n    \n    # Initialize sum \n    sum = 0\n    \n    # Calculate the sum of the series \n    for j in range(i): \n        sum = sum + math.pow(10, j)\n    \n    # Return sum \n    return sum\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,10000):\n        if len(str(i)) == n:\n            print(i, end=' ')\n            break\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    while True:\n        count += 1\n        if ((10**(n-1))*count) < (10**(n-1))+1:\n            return count\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #initialize value to 0 \n    sum = 0 \n    #loop through range 1 to n and calculate \n    #sum of i*(i+1) for each i \n    for i in range(1,n): \n        sum += i*(i+1) \n    return sum "
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef num_to_index(n): \n    '''\n    Write a python function to convert a number to index in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    \n    return int((1/2)*math.sqrt((n*(n+1))/((math.factorial(3)))))\ndef find_index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): \n    '''\n    Write a python function to find the index of a number in trinomial series. https://www.geeksforgeeks.org/index-of-a-number-in-trinomial-series/\n    '''\n    t=0\n    for i in range(1,n):\n        t+=i\n    return t\ndef find_Index(n): "
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for i in range(1, n+1):\n        index += i\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1): \n        sum=0\n        for j in range(1,i+1): \n            sum+=j\n        if(i==sum): \n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    # Find the sum of the first n-1 integers. \n    while i <= n: \n        i = i + 1\n    return (n * (n + 1) / 2) - (i - 1) "
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # return dict(zip(test_tup,test_tup[1:]))\n    return dict(list(zip(test_tup, test_tup[1:])))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if not isinstance(test_tup, tuple):\n        raise Exception(\"Not a tuple\")\n    if not len(test_tup) == 3:\n        raise Exception(\"Tuple does not have 3 elements\")\n    \n    return {test_tup[0]: test_tup[1], test_tup[2]: test_tup[0]}\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Invalid tuple\")\n    else:\n        lst = []\n        for i in range(0, len(test_tup)):\n            if i % 2 == 0:\n                lst.append(test_tup[i] + test_tup[i+1])\n        print(dict(lst))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(\"\\n\\nTuple to dict: \")\n    print(test_tup)\n    dict = {test_tup[i]:test_tup[i+1] for i in range(0, len(test_tup),2)}\n    print(dict)\n    \ndef string_from_list(test_list):\n    '''\n    Write a function to convert the given list to a string using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(\"\\n\\nList to string: \")\n    print(test_list)\n    list_to_string = ''.join(test_list)\n    print(list_to_string)\n    \ndef dictionary_from_list(test_list):\n    '''\n    Write a function to convert the given list to a dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(\"\\n\\nDictionary from list: \")\n    print(test_list)\n    test_list.pop(0)\n    dict_from_list = dict(test_list)\n    print(dict_from_list)\n    \ndef dictionary_from_tuple(test_tup):\n    '''\n    Write a function to convert the given tuple to a dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(\"\\n\\nTuple to dictionary: \")\n    print(test_tup)\n    test_tup.pop(0)\n    dict_from_tuple = dict(test_tup)\n    print(dict_from_tuple)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    for i in test_tup:\n        yield dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for x, y in test_tup:\n        d[x] = y\n        d[y] = x\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i: test_tup[i] for i in range(0,len(test_tup))}\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = dict()\n    for x in range(0, len(test_tup) - 1, 2):\n        res[test_tup[x]] = test_tup[x+1]\n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_temp = dict()\n    count = 0\n    for each in test_tup:\n        if count % 2 == 0:\n            dict_temp[each] = test_tup[count + 1]\n        count += 1\n    return dict_temp\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    if(len(s) > 1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    length = len(s)\n    s_arr = list(s)\n    count = 0\n    for i in range(0, length-1) :\n        if s_arr[i] == s_arr[i+1] :\n            count += 1\n    if count == length - 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #O(n)\n    #c = s[0]\n    #for i in s :\n    #    if i!= c :\n    #        return False\n    #return True\n    return all(x==s[0] for x in s)\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # code here\n    for i in range(len(s)):\n        if(s[i]!=s[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        for i in range(0, len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (all([c==s[0] for c in s]))\n    \ndef is_palindrome(s) :\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return (all([c==s[len(s)-1-i] for i,c in enumerate(s)]))\n    \ndef longest_consec_same(s) :\n    '''\n    Write a python function to find the longest consecutive same character in a string.\n    '''\n    return (max([len(list(group)) for char, group in itertools.groupby(s)]))\n    \ndef max_consec_same(s) :\n    '''\n    Write a python function to find the longest consecutive same character in a string.\n    '''\n    return (max([len(list(group)) for char, group in itertools.groupby(s)]))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        return all_Characters_Same(s[1:])\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # s = 'a'\n    # s = 'aa'\n    # s = 'aaa'\n    # s = 'aaaa'\n    # s = 'aaab'\n    # s = 'aaabcc'\n    # s = 'aaabc'\n    # s = 'aaabcccc'\n    # s = 'aabbcc'\n    # s = 'aabcc'\n    # s = 'aabc'\n    # s = 'aabbcccc'\n    # s = 'aabbcc'\n    # s = 'aabb'\n    # s = 'aabbccc'\n    # s = 'aabbcc'\n    # s = 'aabb'\n    # s = 'aabbcccc'\n    # s = 'aaabb'\n    # s = 'aaabbcc'\n    # s = 'aaabbcccc'\n    # s = 'aaabbcccccc'\n    # s = 'aabbcccccc'\n    # s = 'aaabcccccc'\n    # s = 'aaabbccccccc'\n    # s = 'aaabbcccccccc'\n    # s = 'aabbcccccccccc'\n    # s = 'aabbccccccccccc'\n    # s = 'aabbcccccccccccc'\n    # s = 'aaabbccccccccccc'\n    # s = 'aaabbcccccccccccc'\n    # s = 'aaabbccccccccccccc'\n    # s = 'aaabbcccccccccccccc'\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(i == s[0] for i in s)\nprint(all_Characters_Same('abcd'))\nprint(all_Characters_Same('abccd'))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2*math.sqrt(1/4)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2*math.sqrt(2)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**3) / (6 * math.sqrt(2))\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3) / 4) * (side ** 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((3*math.sqrt(3))/4)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*(3**(1/2))/4\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (side**3)/(6**(1/2))\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side**2\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\ndef area_rectangle(length,breadth):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return length*breadth\ndef volume_rectangle(length,breadth):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return length*breadth\ndef area_parallelogram(length,breadth):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    return length*breadth\ndef volume_parallelogram(length,breadth):\n    '''\n    Write a function to caluclate the volume of a parallelogram.\n    '''\n    return length*breadth\ndef area_triangle(length,breadth):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return length*breadth\ndef volume_triangle(length,breadth):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return length*breadth/2\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi*radius**2\ndef volume_circle(radius):\n    '''\n    Write a function to caluclate the volume of a circle.\n    '''\n    return math.pi*radius**3/3\ndef area_square(length):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return length*length\ndef volume_square(length):\n    '''\n    Write a function to caluclate the volume of a square.\n    '''\n    return length*length\ndef area_rectangle_prism(length,breadth,height):\n    '''\n    Write a function to caluclate the area of a rectangle prism.\n    '''\n    return area_rectangle(length,breadth)+length*height\ndef volume_rectangle_prism(length,breadth,height):\n    '''\n    Write a function to caluclate the volume of a rectangle prism.\n    '''\n    return volume_rectangle(length,breadth)+length*breadth*height\ndef area_cube_prism(length,breadth,height):\n    '''\n    Write a function to caluclate the area of a cube prism.\n    '''\n    return area_cube(length)+area_rectangle_prism(length,breadth,height)\ndef volume_cube_prism(length,breadth,height):\n    '''\n    Write a function to caluclate the volume of a cube prism.\n    '''\n    return volume_cube(length)+volume_rectangle_prism(length,breadth,height)\ndef area_square_prism(length,breadth,height):\n    '''\n    Write a function to caluclate the area of a square prism.\n    '''\n    return area_square(length)+area_rectangle_prism(length,breadth,height)\ndef volume_square_prism(length,breadth,height):\n    '''\n    Write a function to caluclate the volume of a square prism.\n    '''\n    return volume_square(length)+volume_rectangle_prism(length,breadth,height)\ndef area_hexagon(radius):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return 1.5*math.sqrt(3)*radius*radius\ndef volume_hexagon(radius):\n    '''\n    Write a function to caluclate the volume of a hexagon.\n    '''\n    return (3**(1/2))*radius*radius/3\ndef area_rectangle_pyramid(length,breadth,height):\n    '''\n    Write a function to caluclate the area of a rectangle pyramid.\n    '''\n    return area_rectangle(length,breadth)+area_rectangle(length,breadth)\ndef volume_rectangle_pyramid(length,breadth,height):\n    '''\n    Write a function to caluclate the volume of a rectangle pyramid.\n    '''\n    return volume_rectangle(length,breadth)+volume_rectangle(length,breadth)\ndef area_cube_pyramid(length,breadth,height):\n    '''\n    Write a function to caluclate the area of a cube pyramid.\n    '''\n    return area_cube(length)+area_rectangle_pyramid(length,breadth,height)\ndef volume_cube_pyramid(length,breadth,height):\n    '''\n    Write a function to caluclate the volume of a cube pyramid.\n    '''\n    return volume_cube(length)+volume_rectangle_pyramid(length,breadth,height)\ndef area_square_pyramid(length,breadth,height):\n    '''\n    Write a function to caluclate the area of a square pyramid.\n    '''\n    return area_square(length)+area_rectangle_pyramid(length,breadth,height)\ndef volume_square_pyramid(length,breadth,height):\n    '''\n    Write a function to caluclate the volume of a square pyramid.\n    '''\n    return volume_square(length)+volume_rectangle_pyramid(length,breadth,height)\ndef area_ellipsoid(radius_x,radius_y,radius_z):\n    '''\n    Write a function to caluclate the area of an ellipsoid.\n    '''\n    return 4*math.pi*radius_x*radius_y*radius_z\ndef volume_ellipsoid(radius_x,radius_y,radius_z):\n    '''\n    Write a function to caluclate the volume of an ellipsoid.\n    '''\n    return (4/3)*math.pi*radius_x*radius_y*radius_z\ndef area_cylinder(radius,height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return math.pi*radius*radius+math.pi*radius*height\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return math.pi*radius*radius*height\ndef area_cone(radius,height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi*radius*radius+math.pi*radius*height\ndef volume_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (1/3)*math.pi*radius*radius*height\ndef area_square_pyramid_from_base(base,height):\n    '''\n    Write a function to caluclate the area of a square pyramid from base.\n    '''\n    return area_square(base)+area_rectangle(base,base)\ndef volume_square_pyramid_from_base(base,height):\n    '''\n    Write a function to caluclate the volume of a square pyramid from base.\n    '''\n    return volume_square(base)+volume_rectangle(base,base)\ndef area_rhombus(length,breadth):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    return 1/2*length*breadth\ndef volume_rhombus(length,breadth):\n    '''\n    Write a function to caluclate the volume of a rhombus.\n    '''\n    return (1/2)*length*breadth\ndef area_rectangle_sphere(radius):\n    '''\n    Write a function to caluclate the area of a rectangl"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3/12\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side / 2) ** 2\n    return (s * (s + side ** 2) ** 0.5) / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((3 * math.sqrt(3)) / 4) * math.pow(side, 2)\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    count = 0\n    for i in range(m, len(list)):\n        list[count] = list[i]\n        count += 1\n    for i in range(0, m):\n        list[count] = list[i]\n        count += 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # list = [1,2,3,4,5,6,7,8,9]\n    # m = 1\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    x = list[-m:] #To get last m elements of list.\n    y = list[:-m] # To get first m elements of list.\n    z = x + y\n    print(z)\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # if list is empty\n    if len(list) == 0:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # if list is None or m <= 0 or m >= len(list):\n    #     return\n    # for i in range(0, m):\n    #     list.append(list.pop(0))\n    list[:] = list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    rotate_length = m % length\n    rotate_list = list[rotate_length:] + list[:rotate_length]\n    return rotate_list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # reverse the list\n    list.reverse()\n    # reverse the list upto m (index)\n    list[:m] = list[:m][::-1]\n    # reverse the list\n    list.reverse()\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = []\n    for i in range(m, n):\n        temp.append(list[i])\n    for j in range(0, m):\n        list[j] = list[i]\n        i = i - 1\n    for k in range(0, len(temp)):\n        list[k] = temp[k]\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(not i for i in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(isinstance(i, type(None)) for i in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if not test_tup else False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if (test_tup[0] is None) or (test_tup[1] is None) or (test_tup[2] is None):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # for i in range(len(test_tup)):\n    #     if test_tup[i] == None:\n    #         return True\n    # return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(None in i for i in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for x in range(startnum, endnum+1):\n        if x%10!= 0:\n            if x%1!= 0:\n                if x%2!= 0:\n                    if x%3!= 0:\n                        if x%4!= 0:\n                            if x%5!= 0:\n                                if x%6!= 0:\n                                    if x%7!= 0:\n                                        if x%8!= 0:\n                                            if x%9!= 0:\n                                                result.append(x)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    import math\n    def divisible_by_digit(n):\n        return all([int(digit) % n == 0 for digit in str(n)])\n    return filter(divisible_by_digit, range(startnum, endnum+1))\n    # or\n    return filter(lambda n: all([int(digit) % n == 0 for digit in str(n)]), range(startnum, endnum+1))\n    # or\n    return filter(lambda n: all(map(lambda digit: int(digit) % n == 0, str(n))), range(startnum, endnum+1))\n    # or\n    return filter(lambda n: all([(n % int(digit)) == 0 for digit in str(n)]), range(startnum, endnum+1))\n    # or\n    return filter(lambda n: all([(n % int(digit)) == 0 for digit in str(n)]), range(startnum, endnum+1))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(d) == 0 for d in str(num)):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all([x % int(i) == 0 for i in str(x)]), range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n    \ndef word_lengths(words):\n    '''\n    Given a list of words, return a dictionary with the key as the word and the value as the length of the word. https://www.w3resource.com/python-exercises/dictionary/python-data-type-dictionary-exercise-8.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    # def is_divisible_by_digit(num):\n    #     return all(int(i) == 0 or num % int(i) == 0 for i in str(num))\n    # is_divisible_by_digit = lambda num: all(int(i) == 0 or num % int(i) == 0 for i in str(num))\n    \n    def is_divisible_by_digit(num):\n        return num % 9 == 0\n    \n    return [num for num in range(startnum, endnum + 1) if all(int(i) == 0 or num % int(i) == 0 for i in str(num))]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        if all([num % int(i) == 0 for i in str(num)]):\n            result.append(num)\n    return result\n    "
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #loop through every number in the range\n    for num in range(startnum, endnum + 1):\n        #check to see if the number is divisible by all digits it has\n        if num % sum([int(char) for char in str(num)]) == 0:\n            print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = []\n    for i in range(startnum, endnum + 1):\n        s = str(i)\n        for j in s:\n            if int(j) == 0:\n                break\n            elif i % int(j)!= 0:\n                break\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x%i==0 for i in range(1,10)))\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*math.radians(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<=360:\n        return r**2*a/360\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return r*r*math.sin(math.radians(a))/2\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (r**2)*(math.sin(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*math.acos(r/a)*(a/r)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    return math.pi*(r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return ((math.pi*(r**2))/2)*a\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        print('No sector can be found for this radius and angle')\n    else:\n        print('The area of the sector is:', math.pi*r**2*a/360)"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360\ndef area_of_sector(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * (a / 360)\ndef angular_speed(r,a):\n    '''\n    Write a function to find angular speed. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r * a\ndef distance_between(x1,y1,x2,y2):\n    '''\n    Write a function to find distance between points (x1,y1) and (x2,y2). The function takes the x and y coordinates as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(x1,(int,float)),isinstance(x2,(int,float)),isinstance(y1,(int,float)),isinstance(y2,(int,float))]):\n        return None\n    else:\n        return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\ndef bearing_between(x1,y1,x2,y2):\n    '''\n    Write a function to find the bearing between points (x1,y1) and (x2,y2). The function takes the x and y coordinates as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(x1,(int,float)),isinstance(x2,(int,float)),isinstance(y1,(int,float)),isinstance(y2,(int,float))]):\n        return None\n    else:\n        return math.atan2(y1 - y2, x1 - x2)\ndef slope(x1,y1,x2,y2):\n    '''\n    Write a function to find slope between points (x1,y1) and (x2,y2). The function takes the x and y coordinates as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(x1,(int,float)),isinstance(x2,(int,float)),isinstance(y1,(int,float)),isinstance(y2,(int,float))]):\n        return None\n    else:\n        return (y1 - y2) / (x1 - x2)\ndef intercept(x1,y1,x2,y2):\n    '''\n    Write a function to find the y-intercept of a line between points (x1,y1) and (x2,y2). The function takes the x and y coordinates as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(x1,(int,float)),isinstance(x2,(int,float)),isinstance(y1,(int,float)),isinstance(y2,(int,float))]):\n        return None\n    else:\n        return y1 - (slope(x1,y1,x2,y2) * x1)\ndef add_angle(a1,a2):\n    '''\n    Write a function to find the sum of angle a1 and angle a2. The function takes the two angles as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(a1,(int,float)),isinstance(a2,(int,float))]):\n        return None\n    else:\n        return a1 + a2\ndef subtract_angle(a1,a2):\n    '''\n    Write a function to find the difference between angle a1 and angle a2. The function takes the two angles as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(a1,(int,float)),isinstance(a2,(int,float))]):\n        return None\n    else:\n        return a1 - a2\ndef divide_angle(a1,a2):\n    '''\n    Write a function to find the division of angle a1 and angle a2. The function takes the two angles as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(a1,(int,float)),isinstance(a2,(int,float))]):\n        return None\n    else:\n        return a1 / a2\ndef multiply_angle(a1,a2):\n    '''\n    Write a function to find the product of angle a1 and angle a2. The function takes the two angles as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(a1,(int,float)),isinstance(a2,(int,float))]):\n        return None\n    else:\n        return a1 * a2\ndef x_rotate(x1,y1,theta):\n    '''\n    Write a function to rotate x coordinates around an origin point. The function takes the x and y coordinates of the point and the rotation angle as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(x1,(int,float)),isinstance(y1,(int,float)),isinstance(theta,(int,float))]):\n        return None\n    else:\n        return x1 * math.cos(theta) - y1 * math.sin(theta)\ndef y_rotate(x1,y1,theta):\n    '''\n    Write a function to rotate y coordinates around an origin point. The function takes the x and y coordinates of the point and the rotation angle as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(x1,(int,float)),isinstance(y1,(int,float)),isinstance(theta,(int,float))]):\n        return None\n    else:\n        return x1 * math.sin(theta) + y1 * math.cos(theta)\ndef translate(x1,y1,dx,dy):\n    '''\n    Write a function to translate x coordinates around an origin point. The function takes the x and y coordinates of the point and the translation distance as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(x1,(int,float)),isinstance(y1,(int,float)),isinstance(dx,(int,float)),isinstance(dy,(int,float))]):\n        return None\n    else:\n        return x1 + dx, y1 + dy\ndef x_reflect(x1,y1,px,py):\n    '''\n    Write a function to reflect x coordinates around a line. The function takes the x and y coordinates of the point and the reflection point as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(x1,(int,float)),isinstance(y1,(int,float)),isinstance(px,(int,float)),isinstance(py,(int,float))]):\n        return None\n    else:\n        return 2 * px - x1, y1\ndef y_reflect(x1,y1,px,py):\n    '''\n    Write a function to reflect y coordinates around a line. The function takes the x and y coordinates of the point and the reflection point as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance(x1,(int,float)),isinstance(y1,(int,float)),isinstance(px,(int,float)),isinstance(py,(int,float))]):\n        return None\n    else:\n        return x1, 2 * py - y1\ndef x_scale(x1,y1,px,py):\n    '''\n    Write a function to scale x coordinates around a line. The function takes the x and y coordinates of the point and the scaling point as inputs. Function should return None if the inputs are not numbers.\n    '''\n    if not all([isinstance"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = r**2*a/360\n        return area\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X)\n    n2 = len(Y)\n    n3 = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(l+1):\n                if(i==0 or j==0 or k==0):\n                    L[i][j][k] = 0\n                elif(X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][l]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z)\n    L = [[[0 for i in range(l + 1)] for j in range(n + 1)] for k in range(m + 1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None]*(n+1) for i in range(m+1)] for j in range(l+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None]*(n+1) for i in range(m+1)] for j in range(l+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(l+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    return L[m][n][l]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    \n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)] \n    \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    \n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    # Create a table to store results of subproblems \n    L = [[[None]*(o+1) for i in range(n+1)] for j in range(m+1)] \n    \n    '''Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note: L[i][j][k] contains length of LCS of \n    X[0..i-1] and Y[0..j-1] and Z[0..k-1]'''\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                \n                # Base case \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                        \n                # If last characters of X, Y, Z match \n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n        \n    return L[m][n][o] \n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r\"\\b[A-Z][a-z]*\\b\")\n    result = pattern.findall(str1)\n    return \" \".join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern=r'(?<=\\w)([A-Z])'\n    result = re.sub(pattern, r' \\1', str1)\n    return result\nprint(capital_words_spaces(\"Python Exercises\"))\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"([A-Z])\", r\" \\1\", str1)\ndef capital_words_capitals(str1):\n    '''\n    Write a function to replace each word with its first letter capitalized.\n    '''\n    return re.sub(r\"\\w{1}\", lambda x: x.group(0).capitalize(), str1)\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all the spaces in a string.\n    '''\n    return str1.replace(\" \", \"\")\ndef remove_spaces_front(str1):\n    '''\n    Write a function to remove the spaces at the beginning of the string.\n    '''\n    return re.sub(r\"^\\s+\", \"\", str1)\ndef remove_spaces_back(str1):\n    '''\n    Write a function to remove the spaces at the end of the string.\n    '''\n    return re.sub(r\"\\s+$\", \"\", str1)\ndef remove_spaces_both(str1):\n    '''\n    Write a function to remove the spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\s+$\", \"\", str1)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the numbers from a string.\n    '''\n    return re.sub(r\"\\d+\", \"\", str1)\ndef remove_spaces_numbers(str1):\n    '''\n    Write a function to remove the spaces and numbers in a string.\n    '''\n    return re.sub(r\"\\s+|\\d+\", \"\", str1)\ndef remove_numbers_spaces(str1):\n    '''\n    Write a function to remove all the numbers from a string.\n    '''\n    return re.sub(r\"\\d+\", \"\", str1)\ndef remove_spaces_numbers_spaces(str1):\n    '''\n    Write a function to remove the spaces and numbers in a string.\n    '''\n    return re.sub(r\"\\s+|\\d+\", \"\", str1)\ndef remove_spaces_front_numbers_spaces(str1):\n    '''\n    Write a function to remove the spaces and numbers at the beginning of the string.\n    '''\n    return re.sub(r\"^\\s+|\\s+\\d+\", \"\", str1)\ndef remove_spaces_front_numbers_spaces_back(str1):\n    '''\n    Write a function to remove the spaces and numbers at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\s+\\d+|$\\s+\", \"\", str1)\ndef remove_all_numbers(str1):\n    '''\n    Write a function to remove all the numbers in a string.\n    '''\n    return re.sub(r\"\\d+\", \"\", str1)\ndef remove_all_numbers_spaces(str1):\n    '''\n    Write a function to remove all the numbers in a string.\n    '''\n    return re.sub(r\"\\d+\", \"\", str1)\ndef remove_all_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces in a string.\n    '''\n    return re.sub(r\"\\d+|\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_front(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning of the string.\n    '''\n    return re.sub(r\"^\\d+|^\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_front_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\d+|^\\s+|$\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_front_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\d+|^\\s+|$\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_front_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\d+|^\\s+|$\\s+\", \"\", str1)\ndef remove_all_spaces_front_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the spaces and numbers at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\d+|$\\s+\", \"\", str1)\ndef remove_all_spaces_front_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the spaces and numbers at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\d+|$\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the end of the string.\n    '''\n    return re.sub(r\"\\d+|\\s+$\", \"\", str1)\ndef remove_all_numbers_spaces_back_front(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\s+$\", \"\", str1)\ndef remove_all_numbers_spaces_back_front_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\s+$|$\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_back_front_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\s+$|$\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_back_front_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\s+$|$\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_front_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\s+$|$\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_back_numbers_spaces_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the end of the string.\n    '''\n    return re.sub(r\"\\d+|\\s+$\", \"\", str1)\ndef remove_all_numbers_spaces_back_numbers_spaces_back_front(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re.sub(r\"^\\s+|\\d+|$\\s+\", \"\", str1)\ndef remove_all_numbers_spaces_back_numbers_spaces_back_front_back(str1):\n    '''\n    Write a function to remove all the numbers and spaces at the beginning and end of the string.\n    '''\n    return re"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # https://stackoverflow.com/questions/15357422/python-regex-to-find-capital-letters-and-non-letters-for-capital-word-s\n    reg = re.compile(r'([A-Z][^A-Z]+)')\n    return reg.sub(r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # s1 = re.findall(r'[A-Z][a-z]+\\b',str1)\n    s1 = re.findall(r'[A-Z][a-z]+[A-Z]',str1)\n    print(s1)\n    str2 =''.join(s1)\n    print(str2)\n    return str2\nstr1 = \"This is a sample string. This is another. This is the last.\"\ncapital_words_spaces(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(\\s\\w+)',r' \\1',str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result=''\n    for i in str1:\n        if i.isalpha()==True and i.islower()==True:\n            result+=' '+i\n        else:\n            result+=i\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern=r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern,lambda x:x.group(0)[0].lower()+' '+x.group(0)[1:],str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = \"Write a function to put spaces between words starting with capital letters in a given string.\"\n    # str1 = re.sub(r'(?<=[\\s.,:?])[A-Z]{1}([\\w.]+)', r' \\1', str1)\n    # print(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = []\n    for x in list1:\n        if x.isalpha() and x[0].isupper():\n            list2.append(' ')\n            list2.append(x)\n        else:\n            list2.append(x)\n    return ''.join(list2)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = []\n    sorted_nums.sort(key=lambda x: int(''.join(filter(str.isdigit, x))))\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted([float(n) if n.isdecimal() else n for n in nums_str], key = lambda n: n)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # case1: if nums_str is '', then return an empty list\n    if nums_str == '':\n        return ''\n    # case2: if nums_str is not '', then split each element of the list into two numbers\n    else:\n        nums = []\n        for i in nums_str.split():\n            num1, num2 = i[:i.find('-')], i[i.find('-')+1:]\n            # case3: if the number does not have a '-' in it, then replace the '-' with a''\n            if num1.find('-') == -1:\n                num1 = num1.replace('-','')\n            # case4: if the number has a '-' in it, then replace the '-' with a'' and then strip the leading and trailing spaces\n            else:\n                num1 = num1.replace('-','').strip()\n            # case5: append each number to the new list, then return the new list\n            nums.append(num1)\n            nums.append(num2)\n        return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) if x.isdigit() else x for x in nums_str]\n    nums.sort(reverse=True)\n    print(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) if i.isdigit() else i for i in nums_str]\n    nums.sort()\n    return [str(i) for i in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: int(x.split(\" \")[0]))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    nums_str.sort(key=lambda x: [int(i) if i.isdigit() else i\n                                 for i in re.split(\"(\\d+)\", x)])\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda s: int(''.join(x for x in s if x.isdigit())))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    nums.sort()\n    nums_str = [str(i) for i in nums]\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # loop for each element\n    for i in range(len(nums_str)):\n        # to avoid cases of single number like 1, 2, 10 instead of 1, 2, 10, 0, 0,....\n        # loop for each digit of each number\n        for j in range(len(nums_str[i])):\n            # get each digit of each number in str\n            digit = nums_str[i][j]\n            # check if the digit is numeric\n            if digit.isdigit():\n                # sort the number\n                nums_str[i] = ''.join(sorted(nums_str[i]))\n                break\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \n    \n    \n    "
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef add_two_tuples(test_list, test_tup, test_tup2):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    test_list.append(test_tup2)\n    return test_list\n    \ndef add_tuple_to_list(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef remove_tuple_from_list(test_list, test_tup):\n    '''\n    Write a function to remove the given tuple from the given list.\n    '''\n    test_list.remove(test_tup)\n    return test_list\n    \ndef print_tuples_from_list(test_list):\n    '''\n    Write a function to print the list of tuples.\n    '''\n    for tup in test_list:\n        print(tup)\n    return\n    \ndef print_tuples_from_list_in_range(test_list, start, end):\n    '''\n    Write a function to print the list of tuples in a given range.\n    '''\n    for i in range(start, end+1):\n        print(test_list[i])\n    return\n    \ndef print_tuples_from_list_in_range_with_sum(test_list, start, end, sum):\n    '''\n    Write a function to print the list of tuples in a given range that adds up to sum.\n    '''\n    for i in range(start, end+1):\n        if test_list[i][0]+test_list[i][1] == sum:\n            print(test_list[i])\n    return\n    \ndef main():\n    # 1\n    test_list = []\n    test_tup = (1,2)\n    print(add_tuple(test_list, test_tup))\n    \n    # 2\n    test_list = [('1', '2')]\n    test_tup = ('3', '4')\n    print(add_two_tuples(test_list, test_tup, test_tup))\n    \n    # 3\n    test_list = [('1', '2')]\n    test_tup = ('3', '4')\n    print(add_tuple_to_list(test_list, test_tup))\n    \n    # 4\n    test_list = [('1', '2'), ('3', '4')]\n    print(remove_tuple_from_list(test_list, test_tup))\n    \n    # 5\n    test_list = [('1', '2'), ('3', '4')]\n    print(print_tuples_from_list(test_list))\n    \n    # 6\n    test_list = [('1', '2'), ('3', '4')]\n    print(print_tuples_from_list_in_range(test_list, 0, 1))\n    \n    # 7\n    test_list = [('1', '2'), ('3', '4')]\n    print(print_tuples_from_list_in_range_with_sum(test_list, 0, 1, '1'))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_list is None:\n        return None\n    if test_tup is None:\n        return None\n    for i in test_tup:\n        test_list.append(i)\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    # set up a loop\n    \n    # add the tuple to the list\n    \n    # return the list\n    \n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the index of the node is greater than the number of elements, return True\n    if i >= len(arr):\n        return True\n    left_child = arr[i]*2\n    right_child = arr[i]*2+1\n    \n    if left_child < len(arr):\n        if arr[i] > arr[left_child]:\n            return False\n        return check_min_heap_helper(arr, left_child)\n    if right_child < len(arr):\n        if arr[i] > arr[right_child]:\n            return False\n        return check_min_heap_helper(arr, right_child)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i] >= arr[int((i-1)/2)]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i <= len(arr)-1:\n        if (2*i+1 < len(arr) and arr[2*i+1] > arr[i]) or (2*i+2 < len(arr) and arr[2*i+2] > arr[i]):\n            return False\n        check_min_heap_helper(arr, 2*i+1)\n        check_min_heap_helper(arr, 2*i+2)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return\n    if 2 * i + 1 < n and arr[2 * i + 1] < arr[i]:\n        return False\n    if 2 * i + 2 < n and arr[2 * i + 2] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1) or check_min_heap_helper(arr, 2 * i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if (2 * i + 1 < len(arr)) and (arr[i] >= arr[2 * i + 1]):\n        return False\n    if (2 * i + 2 < len(arr)) and (arr[i] >= arr[2 * i + 2]):\n        return False\n    return check_min_heap_helper(arr, i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i <= len(arr)-1:\n        # Check if the element satisfies the heap property at index i\n        if arr[i] > arr[(i-1)//2]:\n            return False\n        return check_min_heap_helper(arr, (i*2)+1) and check_min_heap_helper(arr, (i*2)+2)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if we have no elements, then it is a min heap\n    if i >= 0:\n        # if the current index is not greater than the length of the array\n        # it means that the index is out of bound. Check the children of\n        # current index\n        if i < len(arr):\n            left_child = arr[i] * 2 + 1\n            right_child = arr[i] * 2 + 2\n            # if the left child is not out of bound, and less than\n            # the current index, then the array is not a min heap\n            if left_child < len(arr) and arr[left_child] < arr[i]:\n                return False\n            # if the right child is not out of bound, and less than\n            # the current index, then the array is not a min heap\n            if right_child < len(arr) and arr[right_child] < arr[i]:\n                return False\n            # if we have not returned false, then we have a min heap\n            return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i] >= arr[(i-1)//2]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # The first element must be parent of last element\n    # so, for last element, we check with arr[-1]\n    # for all other cases we check with both elements\n    if i == 0:\n        if arr[i] >= arr[2 * i + 1]:\n            return False\n    elif i == len(arr) - 1:\n        if arr[i] >= arr[2 * i - 1]:\n            return False\n    else:\n        if arr[i] >= arr[2 * i + 1] or arr[i] >= arr[2 * i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 1\n    elif n == 1: return 1\n    elif n == 2: return 3\n    else:\n        return (2*jacobsthal_num(n-1)+jacobsthal_num(n-2))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a, b = 0, 1\n    for i in range(0, n):\n        a, b = b, a+b\n    return a\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Base case \n    if n == 1: \n        return 0\n    # n is even \n    if n == 2: \n        return 1\n    # If n is odd \n    if n > 2: \n        return (4 * jacobsthal_num(n - 1)) + (2 * jacobsthal_num(n - 2)) \n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def f(x, n): \n        if (x==0 or x==1): \n            return x \n        return ((x<<1) ^ n) \n    \n    if(n<1): \n        print(\"Invalid\") \n    \n    result = 0\n    for i in range(n): \n        result = result ^ f(result, i) \n    \n    return result \n    "
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 0\n    j = 1\n    while i < n:\n        j = j + (j * 3)\n        i += 1\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 0\n    for k in range(n):\n        j += (k * 2)\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    a = 0\n    b = 1\n    c = 1\n    for _ in range(2, n):\n        a, b, c = b, c, (b + c)\n    return b\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    sum = 1\n    j = 2\n    while j <= n:\n        sum = sum + j*(j-1)/2\n        j += 1\n    return int(sum)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    records = tuple(test_list)\n    count = 0\n    for row in records:\n        if count == K:\n            break\n        count += 1\n    return row\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    from heapq import *\n    if len(test_list) <= K:\n        return test_list\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key=lambda x: x[1])[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = [\n    (1, 'a'),\n    (2, 'b'),\n    (3, 'c'),\n    (4, 'd'),\n    (5, 'e'),\n    (6, 'f'),\n    (7, 'g')\n]\n    K = 3\n    return [i for i in test_list if len(i) >= K][0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result_list = []\n    for i in range(0, len(test_list)):\n        if len(test_list[i]) < K:\n            result_list.append(test_list[i])\n    return result_list\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    try:\n        # sort the list and pick first K elements\n        result = sorted(test_list, key = lambda x: x[0])[:K]\n        # sort the list and pick last K elements\n        result += sorted(test_list, key = lambda x: x[0])[-K:]\n        return result\n    except Exception as e:\n        print('Something went wrong when executing min_k')\n        print(e)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp = []\n    for i in test_list:\n        temp.append(i[0])\n    temp.sort()\n    return temp[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return None\n    test_list = sorted(test_list, key = lambda x : x[1])\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    tmp = []\n    for i in test_list:\n        if len(i) >= K:\n            tmp.append(i)\n    print(tmp)\n    tmp.sort(key = lambda i: sum(i))\n    return tmp[0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #return [list(i) for i in test_list] #I think this is just a py2 thing.\n    return test_list #does this work?\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            result.append(l1[index])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [value for i, value in enumerate(l1) if value in l2 and value in l3 and value == l2[i] and value == l3[i]]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    return [l1[i] for i in range(len(l1)) if i in range(len(l1)) and i in range(len(l1)) and i in range(len(l1))]\n    \n    \ndef extract_index_dict(d1, d2, d3):\n    '''\n    Write a function to extract common elements from dictionaries d1, d2, d3. The function should return a list.\n    '''\n    \n    return [d1[i] for i in d1.keys() if i in d2.keys() and i in d3.keys()]\n    \n    \ndef change_char(s, p, r):\n    '''\n    Write a function to change all occurrences of a character in a string to another character.\n    '''\n    \n    return s.replace(p, r)\n    \n    \ndef change_string(s):\n    '''\n    Write a function to change a string to a new string where the first and last chars have been exchanged.\n    '''\n    \n    s = list(s)\n    \n    return s[-1] + s[1:-1] + s[0]\n    \n    \ndef reverse_string(s):\n    '''\n    Write a function to return a new string where the case of all characters is reversed.\n    '''\n    \n    s = list(s)\n    \n    s = [s[i].upper() if s[i].islower() else s[i].lower() for i in range(len(s))]\n    \n    return \"\".join(s)\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    \n    s = list(s)\n    \n    for i in range(len(s) // 2):\n        if s[i]!= s[-1 - i]:\n            return False\n            \n    return True\n    \n    \ndef longest_common_substring(s1, s2):\n    '''\n    Write a function to find the longest common substring in two strings.\n    '''\n    \n    def longest_common_substring_helper(s1, s2, mem):\n        if (s1, s2) in mem:\n            return mem[(s1, s2)]\n        if s1 == '' or s2 == '':\n            return ''\n        elif s1[0] == s2[0]:\n            result = s1[0] + longest_common_substring_helper(s1[1:], s2[1:], mem)\n        else:\n            result = max(longest_common_substring_helper(s1, s2[1:], mem), longest_common_substring_helper(s1[1:], s2, mem), key=len)\n        mem[(s1, s2)] = result\n        return result\n    \n    mem = {}\n    return longest_common_substring_helper(s1, s2, mem)\n    \n    \ndef is_rotation(s1, s2):\n    '''\n    Write a function to check whether one string is a rotation of another string.\n    '''\n    \n    if len(s1)!= len(s2):\n        return False\n    \n    s1 = list(s1)\n    s2 = list(s2)\n    \n    s1.sort()\n    s2.sort()\n    \n    return s1 == s2\n    \n    \ndef sum_of_lists(l1, l2):\n    '''\n    Write a function to sum two lists and return the result.\n    '''\n    \n    return [l1[i] + l2[i] for i in range(len(l1))]\n    \n    \ndef matrix_addition(m1, m2):\n    '''\n    Write a function to add two matrices and return the result.\n    '''\n    \n    m1 = [[m1[i][j] for j in range(len(m1[0]))] for i in range(len(m1))]\n    m2 = [[m2[i][j] for j in range(len(m1[0]))] for i in range(len(m2))]\n    \n    return [[m1[i][j] + m2[i][j] for j in range(len(m1[0]))] for i in range(len(m1))]\n    \n    \ndef matrix_subtraction(m1, m2):\n    '''\n    Write a function to subtract two matrices and return the result.\n    '''\n    \n    m1 = [[m1[i][j] for j in range(len(m1[0]))] for i in range(len(m1))]\n    m2 = [[m2[i][j] for j in range(len(m1[0]))] for i in range(len(m2))]\n    \n    return [[m1[i][j] - m2[i][j] for j in range(len(m1[0]))] for i in range(len(m1))]\n    \n    \ndef matrix_multiplication(m1, m2):\n    '''\n    Write a function to multiply two matrices and return the result.\n    '''\n    \n    m1 = [[m1[i][j] for j in range(len(m1[0]))] for i in range(len(m1))]\n    m2 = [[m2[i][j] for j in range(len(m2[0]))] for i in range(len(m2))]\n    \n    return [[sum([m1[i][k] * m2[k][j] for k in range(len(m2[0]))]) for j in range(len(m2[0]))] for i in range(len(m1))]\n    \n    \ndef rotate_list(l, k):\n    '''\n    Write a function to rotate a list to the right by k places.\n    '''\n    \n    return l[k:] + l[:k]\n    \n    \ndef smallest_num(l):\n    '''\n    Write a function to find the smallest number in a list.\n    '''\n    \n    return min(l)\n    \n    \ndef remove_duplicates(l):\n    '''\n    Write a function to remove duplicate items in a list.\n    '''\n    \n    return list(set(l))\n    \n    \ndef get_unique_chars(s):\n    '''\n    Write a function to get unique characters from a string.\n    '''\n    \n    return list(set(s))\n    \n    \ndef contains_duplicate(l):\n    '''\n    Write a function to check whether a list contains duplicate items.\n    '''\n    \n    return len(l)!= len(set(l))\n    \n    \ndef contains_duplicate_dict(d):\n    '''\n    Write a function to check whether a dictionary contains duplicate keys.\n    '''\n    \n    return len(d)!= len(set(d.keys()))\n    \n    \ndef check_sublist(l1, l2):\n    '''\n    Write a function to check whether one list is a sublist of another list.\n    '''\n    \n    return set(l1) <= set(l2)\n    \n    \ndef check_for_string(s, sub):\n    '''\n    Write a function to check whether a string contains a given substring.\n    '''\n    \n    return sub in s\n    \n    \ndef check_for_string_dict(s, sub):\n    '''\n    Write a function to check whether a string contains a given substring. This function should work for a string and a substring that may be empty.\n    '''\n    \n    return (s in sub) or (sub in s)\n    \n    \ndef check_for_string_set(s, sub):\n    '''\n    Write a function to check whether a string contains a given substring. This function should work for a string and a substring that may be empty.\n    '''\n    \n    return (sub in s) or (s in sub)\n    \n    \ndef check_for_string_se"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    if len(l1) < len(l2) and len(l1) < len(l3):\n        for i in range(len(l1)):\n            if l1[i] in l2 and l1[i] in l3:\n                result.append(l1[i])\n    elif len(l2) < len(l1) and len(l2) < len(l3):\n        for i in range(len(l2)):\n            if l2[i] in l1 and l2[i] in l3:\n                result.append(l2[i])\n    elif len(l3) < len(l1) and len(l3) < len(l2):\n        for i in range(len(l3)):\n            if l3[i] in l1 and l3[i] in l2:\n                result.append(l3[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if (l1[i] in l2) and (l1[i] in l3):\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            res.append(l1[i])\n    return res\n    \ndef extract_index_list_2(l1, l2, l3):\n    '''\n    You are given three lists of numbers of the same size representing elements of the sequence of Fibonacci numbers. Write a function that returns the index of the number in the sequence of Fibonacci numbers\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    \n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            return i\n    return -1\n    \ndef extract_fibonacci_numbers(l1, l2, l3):\n    '''\n    Write a function that takes three lists of numbers and returns a list of the Fibonacci numbers that appear in all three lists.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    new_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l1[i] in l3:\n            new_list.append(l1[i])\n    return new_list\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = list(set(numbers))\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return list(set(numbers))[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first = second = float('inf')\n    for x in numbers:\n        if x > first:\n            second = first\n            first = x\n        elif x < first and x > second:\n            second = x\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min_num = None\n    second_min_num = None\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = list(numbers)\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass # replace with your implementation\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list\n    numbers.sort()\n    # print('\\n'.join(map(str, numbers)))\n    # Find the smallest 2nd item\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #sort the list\n    numbers.sort()\n    #return the 2nd element\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"ab*\"\n    result = re.search(pattern, text)\n    if result:\n        print(\"Match found: \", result)\n    else:\n        print(\"No match was found.\")\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab+'\n    result = re.findall(pattern, text)\n    print(result)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{1,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_one_two_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{1,}|a.b{0,1}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_one_more_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{1,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_two_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{2,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_two_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{2,}|a.b{0,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_two_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{2,}|a.b{1,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_two_more_or_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{2,}|a.b{0,1}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_two_more_or_one_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{2,}|a.b{1,}|a.b{0,1}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_two_more_or_one_or_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{2,}|a.b{1,}|a.b{0,1}|a.b{0,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_two_more_or_one_or_zero_or_one_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{2,}|a.b{1,}|a.b{0,1}|a.b{0,}|a.b{0,1}|a.b{0,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_three_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{3,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_three_or_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{3,}|a.b{0,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_three_or_more_or_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{3,}|a.b{0,1}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_three_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{3,}\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    return result!= None\n    # return result!= None\ndef text_match_three_or_more_or_one_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{3,}|a.b{1,}|a.b{0,1}\"\n    result = re.search"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(a)+(b)\", re.IGNORECASE)\n    result = pattern.search(text) is not None\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r'a+b*', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_match = re.findall(r'a.*b', text)\n    if text_match:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile('a[b]*')\n    if regex.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    match = pattern.search(text)\n    if match:\n        return 'Match was found!'\n    else:\n        return 'No match was found!'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\wb*\", text)\n    return pattern\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = '^a.*b'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    return False\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    i = 0\n    for _ in range(len(test_list)):\n        if _!= i:\n            if test_list[i] == test_list[i][::-1]:\n                count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) == 1:\n        return 0\n    else:\n        pairs = 0\n        for i in range(len(test_list) - 1):\n            for j in range(i + 1, len(test_list)):\n                if test_list[i] == test_list[j][::-1]:\n                    pairs += 1\n        return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                print(test_list[i], test_list[j])\n                counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = ['abc', 'tuv', 'xyz', 'aba', '1221', '1232']\n    #start writing your code here\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                pairs += 1\n    print(pairs)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum(len(t) > len(t[::-1]) for t in test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in test_list:\n        for j in test_list:\n            if i[::-1] == j[::-1]:\n                print(i[::-1])\n                print(j[::-1])\n                print(\"======\")\n                #print(i)\n                #print(j)\n                #print(\"======\")\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return test_list.count('ab')\n    # you can replace for with len(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                reverse_pairs += 1\n    return reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    string_list = test_list.split()\n    print(string_list)\n    pairs = 0\n    for i in range(0, len(string_list)):\n        for j in range(i + 1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                print(string_list[i], string_list[j])\n                pairs += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(set(list1))\n    count = {}\n    for i in list1:\n        count[tuple(i)] = list1.count(i)\n    return count\n    \ndef count_words(text):\n    '''\n    Write a function that receives a string and returns a dictionary where the key is a word and the value is the frequency of its occurrence in the text.\n    '''\n    list1 = text.lower().split()\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \ndef count_chars(text):\n    '''\n    Write a function that receives a string and returns a dictionary where the key is a character and the value is the frequency of its occurrence in the text.\n    '''\n    count = {}\n    for i in text:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \ndef count_upper(text):\n    '''\n    Write a function that receives a string and returns a dictionary where the key is a character and the value is the number of times that character has occurred in the text.\n    '''\n    count = {}\n    for i in text:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \ndef create_phone_number(n):\n    '''\n    Write a function that receives a string and returns a string with each group of three digits separated by a dash.\n    '''\n    return '-'.join([str(i) for i in n[::3]])\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for element in list1:\n        temp = tuple(element)\n        if temp in dict1:\n            dict1[temp] += 1\n        else:\n            dict1[temp] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique = {}\n    for l in list1:\n        l = tuple(l)\n        if l in unique:\n            unique[l] += 1\n        else:\n            unique[l] = 1\n    return unique\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = dict()\n    for list_element in list1:\n        tuple_key = tuple(list_element)\n        if tuple_key in list_dict:\n            list_dict[tuple_key] += 1\n        else:\n            list_dict[tuple_key] = 1\n    return list_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return({tuple(i):list1.count(i) for i in list1})\n    \ndef reverse_a_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef sum_digits(number):\n    '''\n    Write a function that returns the sum of all digits of a number.\n    '''\n    return sum([int(i) for i in str(number)])\n    \ndef int_to_roman(number):\n    '''\n    Write a function that converts an integer into a roman number.\n    '''\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // values[i]):\n            roman += numerals[i]\n            number -= values[i]\n        i += 1\n    return roman\n    \ndef get_uniq_sum_factors(number):\n    '''\n    Write a function to return the sum of all factors of a number, except for the number itself.\n    '''\n    factors = [1]\n    i = 2\n    while i**2 < number:\n        if number % i == 0:\n            factors.append(i)\n            factors.append(int(number / i))\n        i += 1\n    factors.append(number)\n    return sum([factor for factor in set(factors) if factors.count(factor) == 1])\n    \ndef get_odd_squares_up_to(limit):\n    '''\n    Write a function to return all odd squares less than a given limit.\n    '''\n    return [number**2 for number in range(1, limit) if number % 2!= 0]\n    \ndef two_consecutive_squares(n):\n    '''\n    Write a function to return True if the given number contains two consecutive squares and False otherwise.\n    '''\n    return any(True for _ in range(n//2) if (n - (_ + 1)) % (_ + 3) == 0)\n    \ndef palindromes(string):\n    '''\n    Write a function to return True if the given string is a palindrome and False otherwise.\n    '''\n    return string == string[::-1]\n    \ndef is_prime(number):\n    '''\n    Write a function to return True if the given number is prime and False otherwise.\n    '''\n    if number <= 1:\n        return False\n    elif number <= 3:\n        return True\n    elif number % 2 == 0 or number % 3 == 0:\n        return False\n    i = 5\n    while i * i <= number:\n        if number % i == 0 or number % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n    \ndef one_away(string1, string2):\n    '''\n    Write a function to check if there's a single change to make in a string to make it a palindrome.\n    '''\n    diff = 0\n    if len(string1) == len(string2):\n        for i in range(len(string1)):\n            if string1[i]!= string2[i]:\n                diff += 1\n    elif len(string1) - len(string2) == 1:\n        string2 += string2[:len(string1)-len(string2)]\n        for i in range(len(string1)):\n            if string1[i]!= string2[i]:\n                diff += 1\n    elif len(string1) - len(string2) == -1:\n        string1 += string1[:len(string2)-len(string1)]\n        for i in range(len(string1)):\n            if string1[i]!= string2[i]:\n                diff += 1\n    return diff == 1\n    \ndef palindromic_string(string):\n    '''\n    Write a function to check if a given string is palindrome.\n    '''\n    return string == string[::-1]\n    \ndef get_missing_number(nums):\n    '''\n    Write a function to return the missing number from a list of numbers.\n    '''\n    return sum(range(1, len(nums)+1)) - sum(nums)\n    \ndef prime_factorization(n):\n    '''\n    Write a function to return the prime factorization of a number.\n    '''\n    numbers = [2, 3, 5, 7]\n    i = 8\n    while len(numbers) < n:\n        if is_prime(i):\n            numbers.append(i)\n        i += 1\n    return numbers[n-1]\n    \ndef get_longest_consec(string, n):\n    '''\n    Write a function to return the longest substring of n consecutive characters of a string.\n    '''\n    return max(string[i:i + n] for i in range(len(string) - n + 1))\n    \ndef max_repeating_char(string):\n    '''\n    Write a function to return the character that appears the most times in a string.\n    '''\n    return max(string, key=string.count)\n    \ndef get_largest_prime_below(n):\n    '''\n    Write a function to return the largest prime less than a given number.\n    '''\n    numbers = []\n    i = 2\n    while i <= n:\n        numbers.append(i)\n        i += 1\n    return max(numbers)\n    \ndef get_primes(n):\n    '''\n    Write a function to return the n first prime numbers.\n    '''\n    numbers = []\n    i = 2\n    while len(numbers) < n:\n        if is_prime(i):\n            numbers.append(i)\n        i += 1\n    return numbers\n    \ndef get_max_number(nums):\n    '''\n    Write a function to return the maximum number from a list.\n    '''\n    return max(nums)\n    \ndef get_sum_of_digits(number):\n    '''\n    Write a function to return the sum of the digits of a number.\n    '''\n    return sum([int(i) for i in str(number)])\n    \ndef get_sum_of_squares(n):\n    '''\n    Write a function to return the sum of the squares of the first n numbers.\n    '''\n    return sum([n ** 2 for n in range(1, n+1)])\n    \ndef get_sum_of_even_fibonacci(n):\n    '''\n    Write a function to return the sum of the even-indexed Fibonacci numbers.\n    '''\n    fibonacci = [1, 2]\n    for i in range(n - 2):\n        fibonacci.append(fibonacci[i] + fibonacci[i+1])\n    return sum([fibonacci[i] for i in range(0, len(fibonacci), 2)])\n    \ndef get_sorted_pairs(nums):\n    '''\n    Write a function to return all pairs that sum to n.\n    '''\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n    \ndef is_valid(s):\n    '''\n    Write a function to check if the brackets in a given string are balanced or not.\n    '''\n    brackets = {'}': '{', ')': '(', ']': '['}\n    stack = []\n    for bracket in s:\n        if bracket in brackets.values():\n            stack.append(bracket)\n        elif bracket in brackets.keys():\n            if len(stack) > 0 and brackets[bracket] == stack[-1]:\n                stack.pop()"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in list1:\n        list1 = i\n        if tuple(list1) in dict1:\n            dict1[tuple(list1)] += 1\n        else:\n            dict1[tuple(list1)] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    list_to_tuple = [tuple(i) for i in list1]\n    count = Counter(list_to_tuple)\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if type(list1)!= list:\n        return 'list1 must be a list'\n    for x in list1:\n        if type(x)!= list:\n            return 'list1 must contain only lists'\n    res = dict()\n    for x in list1:\n        res[tuple(x)] = list1.count(x)\n    return res\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for element in list1:\n        element = tuple(element)\n        list_dict[element] = list_dict.get(element,0) + 1\n    return list_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique(lst):\n        x = []\n        for a in lst:\n            if a not in x:\n                x.append(a)\n        return x\n    def count_list(lst):\n        x = {}\n        for a in lst:\n            t = tuple(unique(a))\n            if t in x:\n                x[t] += 1\n            else:\n                x[t] = 1\n        return x\n    return count_list(list1)\n    \n    \ndef count_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def count_list(lst):\n        x = {}\n        for a in lst:\n            t = tuple(a)\n            if t in x:\n                x[t] += 1\n            else:\n                x[t] = 1\n        return x\n    return count_list(list1)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return isinstance(num,float) or isinstance(num,int)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if(num[-2:]=='.0'):\n        return True\n    if(num[-1]=='.'):\n        if(num[-3] in ['0','1','2','3','4','5','6','7','8','9']):\n            return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, int) or isinstance(num, float):\n        return True\n    else:\n        if not num[0].isdigit():\n            return False\n        else:\n            for i in range(1, len(num)):\n                if num[i] == '.':\n                    break\n                if num[i]!= '0':\n                    return False\n            else:\n                return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if isinstance(num, str):\n        if num[0] in ('+', '-'):\n            num = num[1:]\n        return num.replace('.', '').isdecimal()\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    for char in num:\n        if not char in \"0123456789\":\n            return False\n    if num[0]!= '0':\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    nums = [str(x) for x in range(10)]\n    for i, char in enumerate(num):\n        if i == 0 and char == '-':\n            pass\n        elif char not in nums:\n            return False\n    if num[-1] == '.' and num[-2] in nums:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if len(arr) == len(set(arr)):\n            return \"Array contains only one distinct element\"\n        else:\n            return \"Array contains more than one distinct element\"\nprint(unique_Element([1,2,3,4,4]))\nprint(unique_Element([1,2,3,4,5]))\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    res = set(arr)\n    return len(res) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    element = arr[0]\n    for i in range(1,len(arr)):\n        if element!= arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    if (len(arr) == 1):\n        return arr[0]\n    else:\n        for i in range(len(arr)):\n            if (arr[i] not in arr[:i] + arr[i+1:]):\n                return arr[i]\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_list = set(arr)\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = list(set(arr))\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    if arr[0]==arr[len(arr)-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    try:\n        arr=list(map(int,arr))\n        arr.sort()\n        arr=set(arr)\n        if len(arr)==1:\n            return True\n        return False\n    except Exception as e:\n        print(e)\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n == 0:\n        return False\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        monthnum3 = int(monthnum3)\n    except ValueError:\n        return \"Input month number is not number\"\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Input month number is out of range\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Something is wrong\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    import math\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        print(f\"{monthnum3} month has 31 days\")\n    elif monthnum3 == 2:\n        print(f\"{monthnum3} month has 28 days\")\n    elif monthnum3 == 4 or 6 or 9 or 11:\n        print(f\"{monthnum3} month has 30 days\")\n    else:\n        print(\"error\")\n        return\n    return\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return \"Month Number is {} and it has {} days\".format(monthnum3, \"28/29\")\n    elif monthnum3 in (4,6,9,11):\n        return \"Month Number is {} and it has {} days\".format(monthnum3, \"30\")\n    else:\n        return \"Month Number is {} and it has {} days\".format(monthnum3, \"31\")\n        \n        \ncheck_monthnumber_number(6)\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in (4,6,9,11):\n        return True\n    elif monthnum3 in (1,3,5,7,8,10,12):\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"You gave a valid number for months. 30 days\")\n    else:\n        print(\"You gave an invalid number for months. 31 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        print(\"Yes\")\n    elif monthnum3 == 4 or 6 or 9 or 11:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return month_number_number.get(monthnum3)\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"30 days\")\n    elif monthnum3 == 2:\n        print(\"28/29 days\")\n    else:\n        print(\"error\")\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    diff = arr[1] - arr[0] \n    for i in range(n-1): \n        diff = min(diff, arr[i+1] - arr[i]) \n    return diff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array \n    arr.sort() \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # array of all numbers \n    arr.sort() \n    # first element \n    min_diff = arr[1] - arr[0] \n    # last element \n    max_num = arr[n - 1] \n    for i in range(1, n): \n        if (arr[i] - arr[i - 1] < min_diff): \n            min_diff = arr[i] - arr[i - 1] \n            # second element \n    min_diff = max_num - min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Initialize difference as infinite \n    diff = -1\n    \n    # Traverse all pairs of array \n    for i in range(n-1): \n        for j in range(i+1, n): \n            # Update the minimum difference \n            if arr[j] - arr[i] < diff: \n                diff = arr[j] - arr[i] \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = 9999999\n    for i in range(n - 1):\n        if (arr[i + 1] - arr[i]) < diff:\n            diff = arr[i + 1] - arr[i]\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 10**9\n    arr.sort()\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    min_diff = arr[1] - arr[0] \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < min_diff: \n            min_diff = arr[i+1] - arr[i] \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr[i] - arr[j] for i in range(n) for j in range(i+1,n))\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 10**9\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                min_diff = min(min_diff, abs(arr[i] - arr[j]))\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit()==True:\n            count+=1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num=0\n    for i in str:\n        if(i.isdigit()):\n            num=num+1\n    return num\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len([char for char in str if char.isdigit()])\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # your code here\n    t=int(math.sqrt(n))\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 7\n    if n==5:\n        return 10\n    if n==6:\n        return 12\n    if n==7:\n        return 14\n    if n==8:\n        return 16\n    if n==9:\n        return 19\n    if n==10:\n        return 21\n    if n==11:\n        return 25\n    if n==12:\n        return 28\n    if n==13:\n        return 30\n    if n==14:\n        return 33\n    if n==15:\n        return 36\n    if n==16:\n        return 40\n    if n==17:\n        return 43\n    if n==18:\n        return 48\n    if n==19:\n        return 52\n    if n==20:\n        return 55\n    if n==21:\n        return 60\n    if n==22:\n        return 64\n    if n==23:\n        return 69\n    if n==24:\n        return 75\n    if n==25:\n        return 80\n    if n==26:\n        return 84\n    if n==27:\n        return 91\n    if n==28:\n        return 95\n    if n==29:\n        return 100\n    if n==30:\n        return 102\n    if n==31:\n        return 107\n    if n==32:\n        return 111\n    if n==33:\n        return 116\n    if n==34:\n        return 121\n    if n==35:\n        return 125\n    if n==36:\n        return 132\n    if n==37:\n        return 139\n    if n==38:\n        return 147\n    if n==39:\n        return 155\n    if n==40:\n        return 160\n    if n==41:\n        return 166\n    if n==42:\n        return 175\n    if n==43:\n        return 182\n    if n==44:\n        return 188\n    if n==45:\n        return 195\n    if n==46:\n        return 202\n    if n==47:\n        return 208\n    if n==48:\n        return 215\n    if n==49:\n        return 221\n    if n==50:\n        return 232\n    if n==51:\n        return 239\n    if n==52:\n        return 245\n    if n==53:\n        return 252\n    if n==54:\n        return 259\n    if n==55:\n        return 267\n    if n==56:\n        return 275\n    if n==57:\n        return 283\n    if n==58:\n        return 290\n    if n==59:\n        return 297\n    if n==60:\n        return 304\n    if n==61:\n        return 311\n    if n==62:\n        return 318\n    if n==63:\n        return 325\n    if n==64:\n        return 332\n    if n==65:\n        return 340\n    if n==66:\n        return 347\n    if n==67:\n        return 354\n    if n==68:\n        return 362\n    if n==69:\n        return 370\n    if n==70:\n        return 378\n    if n==71:\n        return 386\n    if n==72:\n        return 393\n    if n==73:\n        return 400\n    if n==74:\n        return 408\n    if n==75:\n        return 415\n    if n==76:\n        return 422\n    if n==77:\n        return 430\n    if n==78:\n        return 437\n    if n==79:\n        return 445\n    if n==80:\n        return 452\n    if n==81:\n        return 460\n    if n==82:\n        return 467\n    if n==83:\n        return 475\n    if n==84:\n        return 482\n    if n==85:\n        return 490\n    if n==86:\n        return 497\n    if n==87:\n        return 504\n    if n==88:\n        return 512\n    if n==89:\n        return 520\n    if n==90:\n        return 527\n    if n==91:\n        return 535\n    if n==92:\n        return 542\n    if n==93:\n        return 550\n    if n==94:\n        return 557\n    if n==95:\n        return 565\n    if n==96:\n        return 572\n    if n==97:\n        return 580\n    if n==98:\n        return 587\n    if n==99:\n        return 595\n    if n==100:\n        return 602\n    if n==101:\n        return 610\n    if n==102:\n        return 617\n    if n==103:\n        return 625\n    if n==104:\n        return 632\n    if n==105:\n        return 639\n    if n==106:\n        return 646\n    if n==107:\n        return 654\n    if n==108:\n        return 661\n    if n==109:\n        return 670\n    if n==110:\n        return 678\n    if n==111:\n        return 685\n    if n==112:\n        return 692\n    if n==113:\n        return 700\n    if n==114:\n        return 707\n    if n==115:\n        return 715\n    if n==116:\n        return 722\n    if n==117:\n        return 730\n    if n==118:\n        return 737\n    if n==119:\n        return 745\n    if n==120:\n        return 752\n    if n==121:\n        return 760\n    if n==122:\n        return 767\n    if n==123:\n        return 775\n    if n==124:\n        return 782\n    if n==125:\n        return 790\n    if n==126:\n        return 797\n    if n==127:\n        return 805\n    if n==128:\n        return 812\n    if n==129:\n        return 820\n    if n==130:\n        return 827\n    if n==131:\n        return 835\n    if n==132:\n        return 842\n    if n==133:\n        return 850\n    if n==134:\n        return 857\n    if n==135:\n        return 865\n    if n==136:\n        return 872\n    if n==137:\n        return 880\n    if n==138:\n        return 887\n    if n==139:\n        return 895\n    if n==140:\n        return 902\n    if n==141:\n        return 910\n    if n==142:\n        return 917\n    if n==143:\n        return 925\n    if n==144:\n        return 932\n    if n==145:\n        return 939\n    if n==146:\n        return 947\n    if n==147:\n        return 955\n    if n==148:\n        return 962\n    if n==149:\n        return 970\n    if n==150:\n        return 977\n    if n==151:\n        return 985\n    if n==152:\n        return 992\n    if n==153:\n        return 1000\n    if n==154:\n        return 1007\n    if n==155:\n        return 1015\n    if n==156:\n        return 1022\n    if n==157:\n        return 1030\n    if n==158:\n        return 1037\n    if n==159:\n        return 1045\n    if n==160:\n        return 1052\n    if n==161:\n        return 1060\n    if n==162:\n        return 1067\n    if n==163:\n        return 1075\n    if n==164:\n        return 1082\n    if n==165:\n        return 1090\n    if n==166:\n        return 1097\n    if n==167:\n        return 1105\n    if n==168:\n        return 1112\n    if n==169:\n        return 1120\n    if n==170:\n        return 1128\n    if n==171:\n        return 1135\n    if n==172:\n        return 1142\n    if n==173:\n    "
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=1:\n        return n\n    else:\n        cnt = 1\n        prime = 1\n        while(prime<=n):\n            prime = 2*cnt+1\n            if(prime>=n):\n                return cnt\n            cnt = cnt+1\n    return 0\ndef find_permutation(num): \n    '''\n    Given an integer, find all permutations of it.\n    '''\n    global cnt \n    global total\n    global total_perm\n    if num<0: \n        return \n    elif num==0: \n        print(total)\n    else: \n        total_perm[num] = 1\n        for i in range(1,num+1): \n            cnt+=1\n            total = num\n            find_permutation(num-i) \n            cnt = 1\n            total = num\n            total_perm[num] = 1\n    return\ndef find_prime(num): \n    '''\n    Write a function to find all primes from 1 to num. \n    '''\n    global cnt\n    if num<=1: \n        return \n    else:\n        if (num%2==0): \n            return \n        else:\n            find_prime(num-1) \n            prime[num] = 1\n            cnt+=1\n    return\ndef find_factors(num): \n    '''\n    Write a function to find all factors of a number. \n    '''\n    global cnt\n    if num<=1: \n        return \n    else:\n        if (prime[num]==1): \n            prime[num] = 0\n            factors[num] = 1\n            return\n        else:\n            prime[num] = 0\n            factors[num] = 1\n            cnt+=1\n            find_factors(num//2) \n            if(num%2==0): \n                factors[num] = 1\n            return\ndef find_fibonacci(num): \n    '''\n    Write a function to find nth Fibonacci number. \n    '''\n    global cnt\n    if num<=0: \n        return 0\n    else:\n        if(fibonacci[num]!=0): \n            return fibonacci[num]\n        else:\n            cnt+=1\n            fibonacci[num] = find_fibonacci(num-1)+find_fibonacci(num-2)\n            return fibonacci[num]\ndef find_combination(num, den): \n    '''\n    Write a function to find nth harmonic combination. \n    '''\n    global cnt\n    if(num<=0):\n        return 0\n    else:\n        if(combination[num][den]!=0):\n            return combination[num][den]\n        else:\n            cnt+=1\n            combination[num][den] = (find_combination(num-1,den)+find_combination(num-1,den-1))/(den)\n            return combination[num][den]\ndef find_factorial(num): \n    '''\n    Write a function to find n! \n    '''\n    global cnt\n    if num<=0: \n        return 1\n    else:\n        if(factorial[num]!=0): \n            return factorial[num]\n        else:\n            cnt+=1\n            factorial[num] = num*find_factorial(num-1)\n            return factorial[num]\ndef find_euclid_gcd(a,b): \n    '''\n    Write a function to find GCD of two numbers using Euclidean algorithm. \n    '''\n    global cnt\n    if a<0 and b<0: \n        return find_euclid_gcd(a,b)\n    elif b==0: \n        return a \n    elif a<0: \n        return find_euclid_gcd(a,b)\n    else:\n        cnt+=1\n        return find_euclid_gcd(b, a%b)\ndef find_nth_root(num, n): \n    '''\n    Write a function to find nth root of a number. \n    '''\n    global cnt\n    if num<0:\n        return 0\n    else:\n        if(nth_root[num][n]!=0):\n            return nth_root[num][n]\n        else:\n            cnt+=1\n            nth_root[num][n] = find_nth_root(num, n-1)**(1/n)\n            return nth_root[num][n]\ndef find_number_of_divisors(num): \n    '''\n    Write a function to find number of divisors of a number. \n    '''\n    global cnt\n    if num<0: \n        return 0\n    else:\n        if(number_of_divisors[num]!=0): \n            return number_of_divisors[num]\n        else:\n            cnt+=1\n            for i in range(2,int(math.sqrt(num)+1)):\n                if(num%i==0): \n                    number_of_divisors[num]+=1\n                    return number_of_divisors[num]\n            number_of_divisors[num]+=1\n            return number_of_divisors[num]\ndef find_armstrong_number(num): \n    '''\n    Write a function to check whether a number is an Armstrong number or not. \n    '''\n    global cnt\n    if num<0: \n        return False\n    elif num==0: \n        return False\n    else:\n        if(armstrong_number[num]!=0): \n            return armstrong_number[num]\n        else:\n            cnt+=1\n            sum = 0\n            for i in range(len(str(num))):\n                sum += int(str(num)[i])**3\n            if sum==num: \n                armstrong_number[num] = True\n            else:\n                armstrong_number[num] = False\n            return armstrong_number[num]\ndef find_perfect_number(num): \n    '''\n    Write a function to check whether a number is perfect or not. \n    '''\n    global cnt\n    if num<0: \n        return False\n    elif num==0: \n        return False\n    else:\n        if(perfect_number[num]!=0): \n            return perfect_number[num]\n        else:\n            cnt+=1\n            sum = 0\n            for i in range(1, num//2+1):\n                if num%i==0: \n                    sum+=i\n            if sum==num: \n                perfect_number[num] = True\n            else:\n                perfect_number[num] = False\n            return perfect_number[num]\ndef find_strong_number(num): \n    '''\n    Write a function to check whether a number is strong or not. \n    '''\n    global cnt\n    if num<0: \n        return False\n    elif num==0: \n        return False\n    else:\n        if(strong_number[num]!=0): \n            return strong_number[num]\n        else:\n            cnt+=1\n            sum = 0\n            for i in range(len(str(num))):\n                sum += int(str(num)[i])**len(str(num))\n            if sum==num: \n                strong_number[num] = True\n            else:\n                strong_number[num] = False\n            return strong_number[num]\ndef find_palindromic_number(num): \n    '''\n    Write a function to check whether a number is palindromic or not. \n    '''\n    global cnt\n    if num<0: \n        return False\n    elif num==0: \n        return False\n    else:\n        if(palindromic_number[num]!=0): \n            return palindromic_number[num]\n        else:\n            cnt+=1\n            if str(num)==str(num)[::-1]"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    max_div = math.ceil(math.sqrt(n))\n    count = 0\n    for i in range(1, max_div): \n        if n % i == 0: \n            count = i \n        if count > n: \n            return n \n        return n \n  "
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = abs(n) \n    if n < 2: \n        return False \n    # all even numbers are not polite \n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    num = 3\n    while (num * num <= n): \n        if n % num == 0: \n            return False \n        num += 2\n    return True \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (2*n)-1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = int(math.sqrt(n))\n    b = 0 \n    for i in range(2, a+1):\n        if n % i == 0:\n            b += i + n/i \n    return b == n\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def prime_factors(n): \n        '''\n        Write a function that returns all the prime factors of a number.\n        '''\n        factors = []\n        while n % 2 == 0: \n            factors.append(2)\n            n = n / 2\n        for i in range(3,int(math.sqrt(n))+1,2): \n            while n % i== 0: \n                factors.append(i)\n                n = n / i\n        if n > 2: \n            factors.append(n)\n        return factors\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 2 \n    else: \n        return (2 * is_polite(n - 1)) + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count=0\n    num=0\n    while(count<=n):\n        num+=1\n        if(is_polite_number(num)):\n            count+=1\n    return num\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def d(n):\n        '''\n        Function to find sum of factorials of digits of a number n. \n        '''\n        return sum([math.factorial(int(i)) for i in str(n)])\n    \n    def count_digits(n):\n        '''\n        Function to count the number of digits in a number n.\n        '''\n        return math.floor(math.log10(n))+1\n    \n    polite = 1\n    count = 0\n    while polite < n:\n        polite = d(polite)\n        count += 1\n    return count\n    \n    \ndef find_smallest(lst):\n    '''\n    Write a function to find smallest element in the list.\n    '''\n    min_ = lst[0]\n    for i in lst:\n        if i < min_:\n            min_ = i\n    return min_\n    \n    \ndef make_chocolate(small, big, x):\n    '''\n    Write a function to make chocolate.\n    '''\n    return min([i for i in [big*5,small*2,x] if i > 0])\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if l1 == []:\n        return []\n    if len(l1) == 1:\n        return [(l1[0], l1[0])]\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)] + pair_wise(l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = [1,2,3,4,5]\n    return [(l1[i],l1[i+1]) for i in range(0,len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #l1 = [1,2,3,4,5,6]\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i],l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1) if l1[i]+1 == l1[i+1]]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1_len = len(l1)\n    return [[l1[i], l1[i+1]] for i in range(l1_len-1)]\n    \ndef find_all_two_sum(nums, target):\n    '''\n    Write a function to return a list of two element lists, where the first element is the sum of the two elements from the given list and the second element is the pair of elements in the list that add up to the sum.\n    '''\n    result = []\n    #create a set of the nums list so that duplicates aren't added to the result\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            result.append([num, complement])\n    return result\n    \ndef get_shortest_unique_substring(s):\n    '''\n    Write a function to return the shortest unique substring that contains all unique characters in the given string.\n    '''\n    #dictionary to store the count of each character\n    char_count = {}\n    result = []\n    substring = ''\n    #loop through the given string and add the character to the dictionary if it is unique\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    #find the character with the most occurences\n    max_count = max(char_count.values())\n    #loop through the dictionary and add characters to the substring until there are no more characters with the same count as the max count\n    for char in char_count.keys():\n        if char_count[char] == max_count:\n            substring += char\n            char_count[char] -= 1\n    #loop through the substring and find the first character that is not in the given string.\n    for i in range(len(substring)):\n        if substring[i] not in s:\n            result.append(substring[:i])\n    #return the shortest substring if there is one, else return an empty string\n    result.sort(key=len)\n    return result[0]\n    \ndef find_valid_substrings(s):\n    '''\n    Write a function to return a list of all possible substrings in the given string that are valid date formats.\n    '''\n    import re\n    #create a dictionary with the number of times each day is used\n    days = {'sunday':0,'monday':0, 'tuesday':0, 'wednesday':0, 'thursday':0, 'friday':0,'saturday':0}\n    #create a list of all possible substrings in the given string\n    result = []\n    for i in range(len(s)):\n        #loop through the given string and find all possible substrings that start at the current index and end at the next index\n        substring = s[i:]\n        #check if the substring matches the format in the regex\n        if re.match(r'^(((0|1)?\\d)|(2[0-3])|(0?[1-9]|1[0-2])|[1-9]|0?[1-9]|[1-9])[- /.](((0|1)?\\d)|(2[0-3])|(0?[1-9]|1[0-2])|[1-9]|0?[1-9]|[1-9])[- /.](\\d{2,4}|\\d{4})$', substring):\n            #add the substring to the list of results\n            result.append(substring)\n            #split the substring into the day, month and year and store each day as its own key in the days dictionary\n            day, month, year = substring.split(' ')\n            days[day] += 1\n    #loop through the days dictionary and append all days that appear at least twice in the given string\n    result.extend([day for day in days if days[day] >= 2])\n    return result\n    \ndef reverse_string(s):\n    '''\n    Write a function to return the reverse of a string\n    '''\n    return s[::-1]\n    \ndef is_palindrome(s):\n    '''\n    Write a function to return True if the given string is a palindrome, False otherwise\n    '''\n    return s == reverse_string(s)\n    \ndef get_longest_palindrome(s):\n    '''\n    Write a function to return the longest palindrome in the given string.\n    '''\n    #create a dictionary with the length of the longest palindrome substring that starts at each index\n    result = {0: ''}\n    #loop through the string and check each substring starting at each index\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            #check if the substring is a palindrome and if the length of the substring is greater than the current length of the longest palindrome substring\n            if s[i:j+1] == s[i:j+1][::-1] and len(s[i:j+1]) > len(result[0]):\n                #store the length of the substring as the length of the longest palindrome substring and the substring as the longest palindrome substring\n                result = {0:s[i:j+1], 1:len(s[i:j+1])}\n    #return the substring\n    return result[0]\n    \ndef get_longest_substring_without_repeating_characters(s):\n    '''\n    Write a function to return the longest substring in the given string that contains no repeating characters.\n    '''\n    char_count = {}\n    result = {}\n    #loop through the string and count the number of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    #loop through the dictionary and find the character with the most occurences\n    max_count = max(char_count.values())\n    #loop through the dictionary and add characters to the substring if they appear the max number of times\n    for char in char_count.keys():\n        if char_count[char] == max_count:\n            result[char] = char_count[char]\n            char_count[char] -= 1\n    #find the substring that contains the most characters and store that as the result\n    return ''.join(sorted(result.keys(), key=len)[0])\n    \ndef common_characters(s1, s2):\n    '''\n    Write a function to return the common characters between the given two strings\n    '''\n    char_count = {}\n    #loop through the two strings and count the number of each character\n    for char in s1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s2:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    #loop through the dictionary and find the character with the most occurences\n    max_count = max(char_count.values())\n    #loop through the dictionary and add characters to the substring if they appear the max number of times\n    result = []\n    for char in char_count.keys():\n        if char_count[char] == max_count:\n            result.append(char)\n            char_count[char] -= 1\n    return result\n    \ndef get_greatest_common_factor(l1, l2):\n    '''\n    Write a function to return the greatest common factor of the two integers in a list\n    '''\n    #check that all elements in the list are integers\n    if all(isinstance(i, int) for i in l1):\n        if all(isinstance(i, int) for i in l2):\n            #sort the lists\n            l1.sort()\n            l2.sort()\n            #loop through the two lists until one of them is empty\n            for i in range(len(l1)):\n                #check if the lists are equal\n                if l1 == l2:\n                    return l1[0]\n                #check if the lists are not equal and if the first list element is greater than the second list element\n            "
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return None\n    newl = []\n    for i in range(len(l1)-1):\n        newl.append((l1[i], l1[i+1]))\n    return newl\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        l.append((l1[i],l1[i+1]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1) - 1):\n        l2.append((l1[i], l1[i + 1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    new_list = []\n    for i in range(0,len(l1)):\n        for j in range(i+1,len(l1)):\n            new_list.append((l1[i],l1[j]))\n    return new_list\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(0, len(l1)-1):\n        l.append((l1[i], l1[i+1]))\n    return l\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict = {}\n    for i in range(len(arr)):\n        key = arr[i]\n        dict[key] = dict.get(key, 0) + 1\n    pairs = 0\n    for i in range(len(arr)):\n        key = sum - arr[i]\n        if dict.get(key, 0) > 0:\n            pairs += 1\n            if key!= arr[i]:\n                dict[key] -= 1\n            if key!= arr[i]:\n                dict[arr[i]] -= 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    new_dict = {}\n    for i in range(len(arr)):\n        if arr[i] not in new_dict.keys():\n            new_dict[sum-arr[i]] = 1\n        else:\n            new_dict[sum-arr[i]] = new_dict[sum-arr[i]] + 1\n    return new_dict[sum]\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # A pair (i, j) is defined as (arr[i], arr[j]), where 0 \u2264 i < j \u2264 n-1, and we want to count the number of such pairs that satisfy the given\n    # condition.\n    \n    # Python program to count pairs in an array\n    # pair(arr[], sum) function that takes an array and\n    # a sum as input and return the count of pairs that\n    # sum to the given sum\n    \n    # Initialize count\n    count = 0\n    \n    # Traverse through all possible pairs\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # Check if pair found\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j and arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr_size = len(arr)\n    for i in range(0, arr_size):\n        for j in range(i + 1, arr_size):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = dict()\n    for i in range(len(arr)):\n        if (sum - arr[i]) in d:\n            return d[sum-arr[i]]\n        d[arr[i]] = d.get(arr[i], 0) + 1\n    return -1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    hashTable = dict()\n    count = 0\n    for i in range(0, n):\n        count = count + hashTable.get(arr[i])\n        hashTable[sum - arr[i]] = hashTable.get(sum - arr[i], 0) + 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    list_diff = []\n    for el in li1:\n        if not el in li2:\n            list_diff.append(el)\n    return list_diff\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1 = []\n    l2 = []\n    for i in li1:\n        if i not in li2:\n            l1.append(i)\n    for i in li2:\n        if i not in li1:\n            l2.append(i)\n    return l1,l2\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    l = []\n    for i in range(1,n+1) :\n        if i % 2!= 0 :\n            l.append(i**4)\n    return sum(l)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n*(n+1)*(n+2)*(n+3)/(4*n*(n+1)*(n+2))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while(i <= n) :\n        sum = sum + i*i*i*i\n        i = i + 2\n    return sum\n    \nprint(odd_num_sum(4))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1 : \n        return \"n must be greater than 0\"\n    return sum(map(lambda x: x**4, range(1, n, 2)))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if (i%2!=0) :\n            sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum( (i+1)*(i+2)*(i+3)*(i+4) for i in range(n) if (i+1)%2!=0)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum += (i * i * i * i)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum = sum + (i ** 4) \n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1, n+1) if i % 2 == 1])\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1,2) :\n        total += (i**4)\n    return total\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_braces = ['(','[','{']\n    close_braces = [')','}',']']\n    for brace in exp:\n        if brace in open_braces:\n            stack.append(brace)\n        elif brace in close_braces:\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == open_braces[close_braces.index(brace)]:\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    queue = deque()\n    for i in exp:\n        if i == '(' or i == '{' or i == '[' or i == ')':\n            queue.append(i)\n        elif i == '}' or i == ']' or i == ')':\n            if len(queue) > 0:\n                if (i == ')' and queue[-1] == '(') or (i == '}' and queue[-1] == '{') or (i == ']' and queue[-1] == '['):\n                    queue.pop()\n                else:\n                    return False\n            else:\n                return False\n    if len(queue) == 0:\n        return True\n    else:\n        return False\ndef get_summands(exp):\n    '''\n    Write a program to get the summation of first n terms of a summation series.https://www.geeksforgeeks.org/sum-first-n-terms-summation-series/\n    '''\n    n = int(input('Enter the number of terms: '))\n    first_term, second_term = 0, 1\n    count = 0\n    if check_expression(exp):\n        for i in range(1, n+1):\n            count += 1\n            if count == 1:\n                first_term = eval(exp)\n            elif count == 2:\n                second_term = eval(exp)\n            print(i, ':', first_term + second_term)\n    else:\n        print('Invalid Expression')\ndef is_balanced(exp):\n    stack = []\n    for i in exp:\n        if i == '(' or i == '{' or i == '[' or i == ')':\n            stack.append(i)\n        elif i == '}' or i == ']' or i == ')':\n            if len(stack) > 0:\n                if (i == ')' and stack[-1] == '(') or (i == '}' and stack[-1] == '{') or (i == ']' and stack[-1] == '['):\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef get_minimum_count_of_operations(exp):\n    if not is_balanced(exp):\n        print('Expression is not balanced')\n        return\n    l, r = 0, 0\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            l += 1\n        elif exp[i] == ')':\n            r += 1\n        elif exp[i] == '{':\n            l += 1\n        elif exp[i] == '}':\n            r += 1\n        elif exp[i] == '[':\n            l += 1\n        elif exp[i] == ']':\n            r += 1\n        elif exp[i] == '+':\n            if l == r:\n                print('Minimum number of operations needed is:', 2*(r))\n                return\n            elif l < r:\n                print('Minimum number of operations needed is:', r - l)\n                return\n            else:\n                print('Minimum number of operations needed is:', l - r)\n                return\n    print('Minimum number of operations needed is:', l + r)\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if len(stack) > 0:\n                last = stack.pop()\n                if char == \")\" and last!= \"(\":\n                    return False\n                if char == \"}\" and last!= \"{\":\n                    return False\n                if char == \"]\" and last!= \"[\":\n                    return False\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    exp = exp + \")\"\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if char == \")\" and stack[-1]!= \"(\":\n                return False\n            if char == \"}\" and stack[-1]!= \"{\":\n                return False\n            if char == \"]\" and stack[-1]!= \"[\":\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    mapping = {'(':')', '{':'}', '[':']'}\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == mapping[char]:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if ((char == ')' and stack[-1]!= '(') or\n                (char == '}' and stack[-1]!= '{') or\n                (char == ']' and stack[-1]!= '[')):\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            popped = stack.pop()\n            if (popped == \"(\" and i == \")\") or (popped == \"{\" and i == \"}\") or (popped == \"[\" and i == \"]\"):\n                continue\n            else:\n                return False\n    if len(stack) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    paren_map = {'}':'{', ')':'(', ']':'['}\n    open_paren = set(paren_map.values())\n    close_paren = set(paren_map.keys())\n    for char in exp:\n        if char in open_paren:\n            stack.append(char)\n        elif char in close_paren:\n            if len(stack) == 0 or paren_map[char]!= stack.pop():\n                return False\n    if len(stack) == 0:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    bracket_list = ['(', ')', '{', '}', '[', ']']\n    for i in exp:\n        if i in bracket_list:\n            stack.append(i)\n        else:\n            if i == ')':\n                try:\n                    if stack[-1] == '(':\n                        stack.pop()\n                    else:\n                        return False\n                except:\n                    return False\n            elif i == '}':\n                try:\n                    if stack[-1] == '{':\n                        stack.pop()\n                    else:\n                        return False\n                except:\n                    return False\n            elif i == ']':\n                try:\n                    if stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n                except:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # get all the words in the given string\n    test_str = test_str.split(' ')\n    # iterate through each word in the list of words\n    new_list = []\n    for word in test_str:\n        if len(word)!= K:\n            new_list.append(word)\n    return''.join(new_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    s = test_str.split()\n    return \" \".join([x for x in s if len(x)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    i = 0\n    while i < len(words):\n        word = words[i]\n        if len(word) == K:\n            words.pop(i)\n        else:\n            i += 1\n    print(' '.join(words))\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join([x for x in test_str.split(\" \") if len(x)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    string_length = len(test_str)\n    new_str = \"\"\n    for i in range(0, string_length):\n        if(len(test_str[i])!= K):\n            new_str += test_str[i]\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    output = test_str\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            output = output.replace(word,'')\n    return output\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    import re\n    \n    test_str = \" \".join(test_str.split())\n    test_str = re.sub(\" {2,}\", \" \", test_str)\n    \n    arr = test_str.split(\" \")\n    arr = list(filter(lambda x: len(x)!= K, arr))\n    \n    return \" \".join(arr)\n    \n    \ndef remove_character(test_str, char):\n    '''\n    Write a function to remove all the characters in the given string except a specified character.\n    '''\n    import re\n    \n    test_str = \" \".join(test_str.split())\n    test_str = re.sub(\" \" + char + \" \", \" \", test_str)\n    \n    return test_str\n    \n    \ndef reverse_words(test_str):\n    '''\n    Write a function to reverse all the words in a given string.\n    '''\n    import re\n    \n    test_str = \" \".join(test_str.split())\n    test_str = re.sub(\" \", \" \", test_str)\n    test_str = test_str[::-1]\n    \n    return test_str\n    \n    \ndef str_match(test_str, pattern):\n    '''\n    Write a function to check if the given string matches with the given pattern.\n    '''\n    import re\n    \n    test_str = \" \".join(test_str.split())\n    pattern = \" \".join(pattern.split())\n    \n    return re.search(pattern, test_str)\n    \n    \ndef rotate_list(arr, d):\n    '''\n    Write a function to rotate the given list of length d.\n    '''\n    \n    import copy\n    arr = copy.deepcopy(arr)\n    \n    if d == 0 or len(arr) == 0 or d >= len(arr):\n        return arr\n    \n    for i in range(d):\n        last = arr.pop()\n        arr = [last] + arr\n    \n    return arr\n    \n    \ndef sum_matrix(m):\n    '''\n    Write a function to sum up all the elements in the given matrix.\n    '''\n    \n    return sum([sum(row) for row in m])\n    \n    \ndef str_compress(test_str):\n    '''\n    Write a function to perform string compression by replacing multiple\n    consecutive identical characters in a string with their count and a\n    single character. If the count is 1, then leave the character as it is.\n    For example: if given the string: \"aabccc\", the function should return: \"a2bc3c\".\n    '''\n    \n    import re\n    import string\n    \n    test_str = \" \".join(test_str.split())\n    test_str = \"\".join(list(filter(lambda x: x in string.ascii_letters or x in string.digits, test_str)))\n    test_str = \"\".join(test_str.split())\n    test_str = re.sub(r\"(.)\\1+\", r\"\\1\\1\", test_str)\n    \n    return test_str\n    \n    \ndef longest_substring(s):\n    '''\n    Write a function to return the longest substring with the longest repeating letters.\n    '''\n    import collections\n    \n    longest = \"\"\n    char_counts = collections.Counter(s)\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if len(longest) < j - i + 1:\n                temp_count = char_counts[s[i]]\n                \n                for k in range(i, j):\n                    temp_count -= char_counts[s[k]]\n                    if temp_count <= 0:\n                        break\n                \n                if len(longest) < j - i + 1:\n                    longest = s[i:j+1]\n    \n    return longest\n    \n    \ndef longest_prefix(s):\n    '''\n    Write a function to find the longest prefix string that is also a suffix\n    string for the given string s.\n    '''\n    \n    longest = \"\"\n    \n    for i in range(len(s)):\n        if len(longest) < i + 1:\n            if s.startswith(s[:i+1]):\n                longest = s[:i+1]\n    \n    return longest\n    \n    \ndef str_rotation(s1, s2):\n    '''\n    Write a function to check if the given string s1 is a rotation of the given\n    string s2.\n    '''\n    \n    import re\n    \n    s1 = \"\".join(s1.split())\n    s2 = \"\".join(s2.split())\n    \n    return s2 in \"\".join([s1, s1])\n    \n    \ndef str_transpose(s):\n    '''\n    Write a function to return the transpose of a given string.\n    '''\n    import re\n    import itertools\n    \n    s = \" \".join(s.split())\n    s = re.sub(\" +\", \" \", s)\n    s = s.split()\n    s = list(map(\"\".join, itertools.zip_longest(*[iter(s)]*len(s[0]), fillvalue=\"\")))\n    \n    return \" \".join(s)\n    \n    \ndef str_swap_case(s):\n    '''\n    Write a function to swap the case of all the letters in the given string.\n    '''\n    import string\n    \n    s = \" \".join(s.split())\n    s = \"\".join(list(map(lambda x: x.lower() if x in string.ascii_lowercase else x.upper(), s)))\n    \n    return s\n    \n    \ndef str_ends_with(test_str, suffix):\n    '''\n    Write a function to check whether a string ends with the given suffix.\n    '''\n    \n    return test_str.endswith(suffix)\n    \n    \ndef str_compression(s):\n    '''\n    Write a function to perform basic string compression using the counts\n    of repeated characters. For example: if given the string aabccc, the\n    function should return a2b1c3. If the compressed string is not smaller\n    than the original string, return the original string.\n    '''\n    import re\n    import collections\n    \n    s = \"\".join(s.split())\n    s = \"\".join(list(filter(lambda x: x in string.ascii_letters or x in string.digits, s)))\n    s = \"\".join(s.split())\n    s = re.sub(r\"(.)\\1+\", r\"\\1\\1\", s)\n    \n    counts = collections.Counter(s)\n    \n    compressed = []\n    for char, count in counts.items():\n        compressed.append(char * count)\n    \n    return \"\".join(compressed) if len(s) < len(\"\".join(compressed)) else s\n    \n    \ndef palindrome_permutation(s):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    import re\n    \n    s = \"\".join(s.split())\n    s = \"\".join(list(filter(lambda x: x in string.ascii_letters or x in string.digits, s)))\n    s = \"\".join(s.split())\n    \n    counts = collections.Counter(s)\n    \n    return len([count for count in counts.values() if count % 2]) <= 1\n    \n    \ndef find_min_window(s, t):\n    '''\n    Write a function to find the smallest substring of a given string s\n    that contains all the characters in the given string t.\n    '''\n    import collections\n    \n    s, t = \"\".join(s.split()), \"\".join(t.split())\n    \n    for i in range(len(s)):\n        if collections.Counter(t) <= collections.Counter(s[i:]):\n            return s[i:]\n            \n    return \"\"\n    \n    \ndef group_anagrams(strs):\n    '''\n    Write a function that takes in an array of strings and groups anagrams togethe"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return_list = []\n    test_str = test_str.split(\" \")\n    for i in range(0, len(test_str)):\n        if len(test_str[i]) == K:\n            return_list.append(test_str[i])\n    return \" \".join(return_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    tokens = test_str.split()\n    print(tokens)\n    for t in tokens:\n        if len(t) == K:\n            tokens.remove(t)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    out_list = []\n    for x in test_str:\n        if len(x) == K:\n            out_list.append(x)\n    return out_list\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern not in text:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index = None\n    if pattern in text:\n        index = re.search(pattern, text).span()\n    return index\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p=re.compile(pattern)\n    match=p.search(text)\n    if match==None:\n        print('pattern not present')\n    else:\n        print(f'{match.group()} occurs {match.count()} times')\n        print(f'it occurs at positions {match.span()}')\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = []\n    index = 0\n    while index < len(text):\n        index = text.find(pattern, index)\n        if index > -1:\n            result.append(index)\n            index += len(pattern)\n        else:\n            break\n    return result if len(result) > 0 else None\n    \ndef count_vowels(text):\n    '''\n    Write a program to count the number of vowels in a given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for c in text:\n        if c.lower() in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub_string=r'[\\w]+[\\s]+[\\w]+'\n    sub_string=re.findall(sub_string,text)\n    if len(sub_string)==0:\n        return None\n    else:\n        return sub_string\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.search(pattern, text):\n        print('occurance substrings:',text,'\\n','occurance substrings pattern:',pattern,'\\n')\n        return 'occurance substrings:',text,'\\n','occurance substrings pattern:',pattern,'\\n'\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.strip()\n    pattern = pattern.strip()\n    search_result = re.search(pattern,text)\n    if search_result:\n        start_index = search_result.start()\n        end_index = search_result.end()\n        # print(start_index,end_index)\n        occurance = text[start_index:end_index]\n        # print(occurance)\n        return start_index, end_index, occurance\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # print(re.match(pattern,text))\n    if re.match(pattern,text):\n        print('Match')\n    else:\n        print('Not matched')\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text=text.lower()\n    pattern=pattern.lower()\n    for i in range(len(text)-len(pattern)+1):\n        if text[i] == pattern[0]:\n            flag=0\n            for j in range(len(pattern)):\n                if text[i+j]!= pattern[j]:\n                    flag=1\n                if flag==1:\n                    break\n            if flag==0:\n                print(\"Occurance\",pattern,\"in the string\",\"Position:\",i)\n            else:\n                print(\"No Occurance\",pattern,\"in the string\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Declaring a pattern\n    # pattern = r\"ab\"\n    # Declaring a text string\n    # text = \"ababab\"\n    # Pattern matching\n    # match = re.match(pattern,text)\n    # if match is not None:\n    #     print (\"Match is found\")\n    # else:\n    #     print(\"Match is not found\")\n    # print(match.group())\n    # print(match.span())\n    # search = re.search(pattern,text)\n    # print(search.group())\n    # print(search.span())\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i]%2==1 for i in range(0,len(nums),2))\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    i=0\n    flag=0\n    while i<len(nums):\n        if i%2!=0:\n            if nums[i]%2!=0:\n                flag=flag+1\n        i=i+1\n    if flag==len(nums):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        for num in nums:\n            if num%2 == 0:\n                result = False\n                break\n            else:\n                result = True\n    return result\n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        for num in nums:\n            if num%2!= 0:\n                result = False\n                break\n            else:\n                result = True\n    return result\n    \ndef check_odd_even_position(nums):\n    '''\n    Write a python function to check whether a list contains odd numbers followed by even numbers,\n    and if a list contains odd numbers followed by even numbers, the order of odd and even numbers \n    must change. \n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        for i in range(len(nums)):\n            if (i+1)%2 == 0:\n                if nums[i]%2!= 0:\n                    result = False\n                    break\n                elif nums[i]%2 == 0:\n                    result = True\n                    break\n            elif (i+1)%2!= 0:\n                if nums[i]%2 == 0:\n                    result = False\n                    break\n                elif nums[i]%2!= 0:\n                    result = True\n                    break\n    return result\n    \ndef max_occurrence(nums):\n    '''\n    Write a python function to return the maximum occurence of an element in a list.\n    '''\n    result = ''\n    if not nums:\n        result = None\n    else:\n        maxOcc = 0\n        for num in nums:\n            if nums.count(num) > maxOcc:\n                maxOcc = nums.count(num)\n                result = num\n        return result\n        \ndef create_list_from_string(string):\n    '''\n    Write a python function to create a list from a given string.\n    '''\n    result = ''\n    if not string:\n        result = False\n    else:\n        list1 = string.split()\n        result = list(list1)\n    return result\n    \ndef swap_number(nums):\n    '''\n    Write a python function to swap the first and last element of a list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        list1 = nums[0:-1]\n        list2 = nums[-1:]\n        list1.append(list2[0])\n        result = list1\n    return result\n    \ndef find_number(nums):\n    '''\n    Write a python function to find the number of times a given number occurs in a list.\n    '''\n    result = ''\n    if not nums:\n        result = None\n    else:\n        counter = 0\n        for num in nums:\n            if num == 24:\n                counter = counter + 1\n        result = counter\n    return result\n    \ndef duplicate_number(nums):\n    '''\n    Write a python function to find the duplicate number of a list.\n    '''\n    result = ''\n    if not nums:\n        result = None\n    else:\n        nums_set = set(nums)\n        nums_list = list(nums_set)\n        for num in nums_list:\n            if nums.count(num) > 1:\n                result = num\n                break\n    return result\n    \ndef delete_duplicate_number(nums):\n    '''\n    Write a python function to delete the duplicate number of a list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        nums_set = set(nums)\n        nums_list = list(nums_set)\n        result = nums_list\n    return result\n    \ndef remove_specific_string(nums, string):\n    '''\n    Write a python function to remove a given string from a list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        if string in nums:\n            nums.remove(string)\n            result = nums\n    return result\n    \ndef remove_non_string(nums, string):\n    '''\n    Write a python function to remove a given string from a list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        if string not in nums:\n            result = nums\n    return result\n    \ndef remove_duplicates(nums):\n    '''\n    Write a python function to remove duplicate elements of a given list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        nums_set = set(nums)\n        nums_list = list(nums_set)\n        result = nums_list\n    return result\n    \ndef remove_numbers(nums, n1, n2):\n    '''\n    Write a python function to remove all the elements from a list that is not in a given range.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        if n1 in nums and n2 in nums:\n            nums = [i for i in nums if (i >= n1 and i <= n2)]\n            result = nums\n        else:\n            result = nums\n    return result\n    \ndef reverse_list(nums):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        nums.reverse()\n        result = nums\n    return result\n    \ndef sort_list(nums):\n    '''\n    Write a python function to sort a given list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        nums.sort()\n        result = nums\n    return result\n    \ndef rotate_list(nums):\n    '''\n    Write a python function to rotate a given list.\n    '''\n    result = ''\n    if not nums:\n        result = False\n    else:\n        list1 = nums[-1:]\n        list1.extend(nums[0:-1])\n        result = list1\n    return result\n    \ndef sum_of_lists(nums1, nums2):\n    '''\n    Write a python function to sum up two given lists.\n    '''\n    result = ''\n    if not nums1:\n        result = nums2\n    elif not nums2:\n        result = nums1\n    else:\n        nums1.extend(nums2)\n        result = nums1\n    return result\n    \ndef min_max_list(nums):\n    '''\n    Write a python function to return the minimum and maximum values of a list.\n    '''\n    result = ''\n    if not nums:\n        result = None\n    else:\n        min_value = min(nums)\n        max_value = max(nums)\n        result = (min_value, max_value)\n    return result\n    \ndef print_tuple_list(tuple_list):\n    '''\n    Write a python function to print a given list of tuples.\n    '''\n    result = ''\n    if not tuple_list:\n        result = False\n    else:\n        for tuple_ in tuple_list:\n            print(tuple_)\n            result = True\n    return result\n    \ndef reverse_tuples_list(tuple_list):\n    '''\n    Write a python function to reverse a given list of tuples.\n    '''\n    result = ''\n    if not tuple_list:\n        result = False\n    else:\n        nums = tuple_list[::-1]\n        result = nums\n    return result\n    \ndef tuples_list_in_list(tuple_list):\n    '''\n    Write a python function to check if a given list of tuples contains another list of tuples.\n    ''"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums==[]:\n        return True\n    for index in range(1,len(nums),2):\n        if nums[index]%2==0:\n            return False\n    return True\nprint(odd_position([]))\nprint(odd_position([2,4,6]))\nprint(odd_position([1,2,3,4,5]))\nprint(odd_position([2,4,6,1,10,5,7,8]))\nprint(odd_position([2,4,6,1,10,5,7,8,3]))"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_num = []\n    for i in nums:\n        if (i % 2)!= 0:\n            odd_num.append(i)\n    if len(nums) == len(odd_num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums_flag = True\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                odd_nums_flag = False\n        else:\n            if nums[i] % 2 == 0:\n                odd_nums_flag = False\n    if odd_nums_flag == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = []\n    for index in range(0, len(nums), 2):\n        result.append(nums[index] % 2!= 0)\n    return all(result)\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    flag = False\n    for i in range(1,len(nums) + 1):\n        if i%2!= 0 and nums[i - 1] % 2 == 1:\n            flag = True\n        elif i%2 == 0 and nums[i - 1] % 2 == 0:\n            flag = True\n        else:\n            flag = False\n            break\n    if flag == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in ('a', 'e', 'i', 'o', 'u') and test_str[i+1] in ('a', 'e', 'i', 'o', 'u'):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i, char in enumerate(test_str):\n        if char == 'a':\n            if i == 0:\n                if test_str[1] in ['e', 'i', 'o', 'u', 'y']:\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in ['e', 'i', 'o', 'u', 'y']:\n                    count += 1\n            else:\n                if test_str[i-1] in ['e', 'i', 'o', 'u', 'y'] or test_str[i+1] in ['e', 'i', 'o', 'u', 'y']:\n                    count += 1\n        elif char == 'e':\n            if i == 0:\n                if test_str[1] in ['a', 'i', 'o', 'u', 'y']:\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in ['a', 'i', 'o', 'u', 'y']:\n                    count += 1\n            else:\n                if test_str[i-1] in ['a', 'i', 'o', 'u', 'y'] or test_str[i+1] in ['a', 'i', 'o', 'u', 'y']:\n                    count += 1\n        elif char == 'i':\n            if i == 0:\n                if test_str[1] in ['a', 'e', 'o', 'u', 'y']:\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in ['a', 'e', 'o', 'u', 'y']:\n                    count += 1\n            else:\n                if test_str[i-1] in ['a', 'e', 'o', 'u', 'y'] or test_str[i+1] in ['a', 'e', 'o', 'u', 'y']:\n                    count += 1\n        elif char == 'o':\n            if i == 0:\n                if test_str[1] in ['a', 'e', 'i', 'u', 'y']:\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in ['a', 'e', 'i', 'u', 'y']:\n                    count += 1\n            else:\n                if test_str[i-1] in ['a', 'e', 'i', 'u', 'y'] or test_str[i+1] in ['a', 'e', 'i', 'u', 'y']:\n                    count += 1\n        elif char == 'u':\n            if i == 0:\n                if test_str[1] in ['a', 'e', 'i', 'o', 'y']:\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'y']:\n                    count += 1\n            else:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'y'] or test_str[i+1] in ['a', 'e', 'i', 'o', 'y']:\n                    count += 1\n        elif char == 'y':\n            if i == 0:\n                if test_str[1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n            else:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'u'] or test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n        else:\n            if i == 0:\n                if test_str[1] in ['a', 'e', 'i', 'o', 'u', 'y']:\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'u', 'y']:\n                    count += 1\n            else:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'u', 'y'] or test_str[i+1] in ['a', 'e', 'i', 'o', 'u', 'y']:\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    cnt = 0\n    for i in test_str:\n        if i in vowel:\n            if i in test_str[:test_str.index(i)] and i in test_str[test_str.index(i)+1:]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.replace(' ', '')\n    vowels = 'aeiou'\n    neighbours = 0\n    \n    for i in range(len(test_str)):\n        if i > 0:\n            if (test_str[i-1] in vowels) and (test_str[i] in vowels):\n                neighbours += 1\n        if i < len(test_str)-1:\n            if (test_str[i+1] in vowels) and (test_str[i] in vowels):\n                neighbours += 1\n    return neighbours\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    cnt = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u' or test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if i - 1 >= 0 and (test_str[i - 1] == 'a' or test_str[i - 1] == 'e' or test_str[i - 1] == 'i' or test_str[i - 1] == 'o' or test_str[i - 1] == 'u' or test_str[i - 1] == 'A' or test_str[i - 1] == 'E' or test_str[i - 1] == 'I' or test_str[i - 1] == 'O' or test_str[i - 1] == 'U'):\n                cnt += 1\n            if i + 1 < len(test_str) and (test_str[i + 1] == 'a' or test_str[i + 1] == 'e' or test_str[i + 1] == 'i' or test_str[i + 1] == 'o' or test_str[i + 1] == 'u' or test_str[i + 1] == 'A' or test_str[i + 1] == 'E' or test_str[i + 1] == 'I' or test_str[i + 1] == 'O' or test_str[i + 1] == 'U'):\n                cnt += 1\n        if test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if i - 1 >= 0 and (test_str[i - 1] == 'a' or test_str[i - 1] == 'e' or test_str[i - 1] == 'i' or test_str[i - 1] == 'o' or test_str[i - 1] == 'u' or test_str[i - 1] == 'A' or test_str[i - 1] == 'E' or test_str[i - 1] == 'I' or test_str[i - 1] == 'O' or test_str[i - 1] == 'U'):\n                cnt += 1\n            if i + 1 < len(test_str) and (test_str[i + 1] == 'a' or test_str[i + 1] == 'e' or test_str[i + 1] == 'i' or test_str[i + 1] == 'o' or test_str[i + 1] == 'u' or test_str[i + 1] == 'A' or test_str[i + 1] == 'E' or test_str[i + 1] == 'I' or test_str[i + 1] == 'O' or test_str[i + 1] == 'U'):\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_neighbor_count = 0\n    vowels = set('aeiouAEIOU')\n    for i in range(len(test_str)):\n        if i == 0:\n            if test_str[i+1] in vowels:\n                vowels_neighbor_count += 1\n        elif i == len(test_str) - 1:\n            if test_str[i-1] in vowels:\n                vowels_neighbor_count += 1\n        else:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                vowels_neighbor_count += 1\n    return vowels_neighbor_count\n    \ndef count_vowels_with_constraints(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string, while the character must be less than 5 letters and more than 3 letters.\n    '''\n    vowels_neighbor_count = 0\n    vowels = set('aeiouAEIOU')\n    for i in range(len(test_str)):\n        if i == 0:\n            if test_str[i+1] in vowels:\n                vowels_neighbor_count += 1\n        elif i == len(test_str) - 1:\n            if test_str[i-1] in vowels:\n                vowels_neighbor_count += 1\n        else:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels and len(test_str[i-1]) < 5 and len(test_str[i+1]) < 5:\n                vowels_neighbor_count += 1\n    return vowels_neighbor_count\n    \ndef count_vowels_with_constraints_in_array(test_array):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string, while the character must be less than 5 letters and more than 3 letters.\n    '''\n    vowels_neighbor_count = 0\n    vowels = set('aeiouAEIOU')\n    for i in range(len(test_array)):\n        if i == 0:\n            if test_array[i+1] in vowels:\n                vowels_neighbor_count += 1\n        elif i == len(test_array) - 1:\n            if test_array[i-1] in vowels:\n                vowels_neighbor_count += 1\n        else:\n            if test_array[i-1] in vowels and test_array[i+1] in vowels and len(test_array[i-1]) < 5 and len(test_array[i+1]) < 5:\n                vowels_neighbor_count += 1\n    return vowels_neighbor_count\n    \ndef count_vowels_with_constraints_with_set(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string, while the character must be less than 5 letters and more than 3 letters.\n    '''\n    vowels_neighbor_count = 0\n    vowels = set('aeiouAEIOU')\n    for i in range(len(test_str)):\n        if i == 0:\n            if test_str[i+1] in vowels:\n                vowels_neighbor_count += 1\n        elif i == len(test_str) - 1:\n            if test_str[i-1] in vowels:\n                vowels_neighbor_count += 1\n        else:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels and len(test_str[i-1]) < 5 and len(test_str[i+1]) < 5:\n                vowels_neighbor_count += 1\n    return vowels_neighbor_count\n    \ndef count_vowels_with_constraints_with_set_in_array(test_array):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string, while the character must be less than 5 letters and more than 3 letters.\n    '''\n    vowels_neighbor_count = 0\n    vowels = set('aeiouAEIOU')\n    for i in range(len(test_array)):\n        if i == 0:\n            if test_array[i+1] in vowels:\n                vowels_neighbor_count += 1\n        elif i == len(test_array) - 1:\n            if test_array[i-1] in vowels:\n                vowels_neighbor_count += 1\n        else:\n            if test_array[i-1] in vowels and test_array[i+1] in vowels and len(test_array[i-1]) < 5 and len(test_array[i+1]) < 5:\n                vowels_neighbor_count += 1\n    return vowels_neighbor_count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    num_vowels = 0\n    for char in test_str:\n        if char in vowel_list:\n            num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            if (i-1 >= 0 and test_str[i-1] == 'a') or (i-1 >= 0 and test_str[i-1] == 'e') or (i-1 >= 0 and test_str[i-1] == 'i') or (i-1 >= 0 and test_str[i-1] == 'o') or (i-1 >= 0 and test_str[i-1] == 'u') or (i-1 >= 0 and test_str[i-1] == 'A') or (i-1 >= 0 and test_str[i-1] == 'E') or (i-1 >= 0 and test_str[i-1] == 'I') or (i-1 >= 0 and test_str[i-1] == 'O') or (i-1 >= 0 and test_str[i-1] == 'U'):\n                count += 1\n            if (i+1 < len(test_str) and test_str[i+1] == 'a') or (i+1 < len(test_str) and test_str[i+1] == 'e') or (i+1 < len(test_str) and test_str[i+1] == 'i') or (i+1 < len(test_str) and test_str[i+1] == 'o') or (i+1 < len(test_str) and test_str[i+1] == 'u') or (i+1 < len(test_str) and test_str[i+1] == 'A') or (i+1 < len(test_str) and test_str[i+1] == 'E') or (i+1 < len(test_str) and test_str[i+1] == 'I') or (i+1 < len(test_str) and test_str[i+1] == 'O') or (i+1 < len(test_str) and test_str[i+1] == 'U'):\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a','e','i','o','u'])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i >= 1 and test_str[i-1] in vowels:\n                count += 1\n            if i < len(test_str) - 1 and test_str[i+1] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel = 'aeiou'\n    l = []\n    for i in test_str:\n        if i in vowel:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    print(\"The sum of non repeated elements in given list is\", sum(set(arr)))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Approach 1\n    # arr = list(dict.fromkeys(arr))\n    # print(arr)\n    # return sum(arr)\n    # Approach 2\n    return sum([x for x in set(arr) if arr.count(x)==1])\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if i not in arr[1:]:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1]\n    # arr = [1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1]\n    \n    # The first method\n    # elements = set(arr)\n    # sum = 0\n    # for i in elements:\n    #     sum += i\n    # print(sum)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dict of num:frequency pair\n    freq_dict = {}\n    for i in arr:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    # print(freq_dict)\n    # print(sorted(freq_dict.keys()))\n    total_sum = 0\n    for i in sorted(freq_dict.keys()):\n        if freq_dict[i] == 1:\n            total_sum += i\n    return total_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #start writing your code here\n    l=[]\n    for i in arr:\n        if i not in l:\n            l.append(i)\n    return sum(l)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    sum = 0\n    for i in arr: \n        if arr.count(i) == 1: \n            sum = sum + i \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    # Write your code here\n    for i in arr:\n        if arr.count(i) == 1:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    temp_dict = {}\n    for i in range(len(arr)):\n        if arr[i] not in temp_dict:\n            temp_dict[arr[i]] = 1\n        else:\n            temp_dict[arr[i]] += 1\n    temp_list = []\n    for key,value in temp_dict.items():\n        if value == 1:\n            temp_list.append(key)\n    return temp_list\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_set = set(arr)\n    sum = 0\n    for elem in arr_set:\n        sum += elem\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    list2=[]\n    count=0\n    for k,v in groupby(list1):\n        if k==count:\n            list2.append(list(v))\n            count+=1\n        else:\n            count=0\n            list2.append(list(v))\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for _, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = [1,2,2,3,3,4,4,5,5,6,6,6]\n    print(\"List is:\\n\",list1)\n    for key, group in groupby(list1):\n        print(\"{} --> {}\".format(key, list(group)))\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp_list=[]\n    for key,group in groupby(list1):\n        temp_list.append(list(group))\n    print(temp_list)\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = [[list(g) for _, g in groupby(list1)]]\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    import itertools\n    for element,group in groupby(list1):\n        group = list(group)\n        if(len(group) > 1):\n            for i in range(1,len(group)):\n                list1[list1.index(group[i])] = group[0]\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    sub_list = [list(g) for k, g in groupby(list1)]\n    return sub_list\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for ele, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_elements = []\n    for key, group in groupby(list1):\n        list1_elements.append(list(group))\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_of_lists = []\n    for i in range(0,len(list1)):\n        if type(list1[i]) == list:\n            list_of_lists.append(tuple(list1[i]))\n    if len(list_of_lists)!= 0:\n        print(len(list_of_lists))\n    dict_of_lists = {}\n    for i in range(0, len(list_of_lists)):\n        dict_of_lists[list_of_lists[i]] = dict_of_lists.get(list_of_lists[i], 0)+1\n    return dict_of_lists\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return [tuple(sorted(set(i))) for i in list1]\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return_dict = {}\n    for sublist in list1:\n        if tuple(sublist) in return_dict:\n            return_dict[tuple(sublist)] += 1\n        else:\n            return_dict[tuple(sublist)] = 1\n    return return_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def dict_generator(list1):\n        output_dict = {}\n        for i in list1:\n            try:\n                output_dict[i] += 1\n            except KeyError:\n                output_dict[i] = 1\n        return output_dict\n    return dict_generator(list1)\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    l1 = [1, 2, 3, 4, 5, 2, 3, 4, 5]\n    l2 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l3 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l4 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l5 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l9 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l10 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l11 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l12 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l13 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l14 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l16 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l17 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l18 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l19 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l20 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l21 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l22 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l23 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l24 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l25 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l26 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l27 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l28 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l29 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l30 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l31 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l32 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l33 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l34 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l35 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l36 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l37 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l38 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l39 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l40 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l41 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l42 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l43 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l44 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l45 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l46 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l47 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l48 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l49 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l50 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l51 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l52 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l53 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l54 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l55 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l56 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l57 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l58 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l59 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l60 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l61 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l62 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l63 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l64 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l65 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l66 = [7, 8, 9, 7, 8, 9, 7, 8]\n    l67 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l68 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l69 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l70 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l71 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 7, 8, 9, 7, 8, 9]\n    l72 = [5, 6, 7, 8, 5, 6, 7, 8]\n    l73 = [5, 6, 7, 8, 5, "
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = list(set(list1))\n    newlist = []\n    for i in list1:\n        newlist.append((i, list1.count(i)))\n    return dict(newlist)\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for item in list1:\n        if tuple(item) not in dictionary.keys():\n            dictionary[tuple(item)] = 1\n        else:\n            dictionary[tuple(item)] += 1\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists = []\n    count = 0\n    for lst in list1:\n        for sublist in lst:\n            count += 1\n            unique_sublists.append(sublist)\n    unique_sublists = list(set(unique_sublists))\n    return dict((list(t), unique_sublists.count(list(t))) for t in set(tuple(element) for element in unique_sublists))\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for x in list1:\n        if type(x) == list:\n            count.setdefault(tuple(x), 0)\n            count[tuple(x)] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = 0\n    new_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list1[j] and list1[i] not in new_list:\n                count += 1\n                new_list.append(list1[i])\n    return count\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    combination_list = []\n    result_list = []\n    for i in test_list:\n        sum_list.append(sum(i))\n    for i in range(len(sum_list)):\n        for j in range(i+1, len(sum_list)):\n            if sum_list[i]+sum_list[j] not in result_list:\n                combination_list.append([i,j])\n                result_list.append(sum_list[i]+sum_list[j])\n    return combination_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return (list(sum(i) for i in combinations(test_list,2)))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print(\"Given Tuple list: \", test_list)\n    # test_list = [('a', 3), ('b', 7), ('c', 4), ('d', 6), ('e', 5), ('f', 2), ('g', 3)]\n    for item in test_list:\n        print(\"Item: \", item)\n        print(\"Item first element: \", item[0])\n        print(\"Item second element: \", item[1])\n    '''\n    The above code to print the tuples from the list is not necessary. The combination of sum can also be obtained by using below code.\n    '''\n    # sum_of_combination = []\n    # for i in range(0, len(test_list)):\n    #     test_list[i] = list(test_list[i])\n    #     for j in range(1, len(test_list)):\n    #         test_list[0].append(test_list[j][0])\n    #     sum_of_combination.append(tuple(test_list[0]))\n    # print(\"Combinations of sum with tuples in the given tuple list: \", sum_of_combination)\n    # print(\"Combinations of sum with tuples in the given tuple list: \", [tuple(sorted(comb)) for comb in sum_of_combination])\n    # print(\"Combinations of sum with tuples in the given tuple list: \", [sorted(comb) for comb in sum_of_combination])\n    # print(\"Combinations of sum with tuples in the given tuple list: \", [tuple(sorted(comb)) for comb in [sorted(comb) for comb in sum_of_combination]])\n    # return [tuple(sorted(comb)) for comb in sum_of_combination]\n    return [tuple(sorted(comb)) for comb in [sorted(comb) for comb in [list(tuple(comb)) for comb in combinations(test_list, 2)]]]\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_comb = list(combinations(test_list,2))\n    print(sum_comb)\n    \n    \n    '''\n    Write a function to find the minimum difference of sum in a list of tuples.\n    '''\n    test_list = [(1,1), (2,8), (3,9), (4,6), (5,9), (6,7)]\n    # test_list = [(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5), (6, 6, 6), (7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10)]\n    # test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    print(min(sum(x) - sum(y) for x, y in combinations(test_list, 2)))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if j!= i:\n                combs.append((test_list[i], test_list[j]))\n    return combs\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list=[]\n    for i in range(len(test_list)+1):\n        temp_list=list(combinations(test_list,i))\n        for j in temp_list:\n            if sum(j) not in final_list:\n                final_list.append(sum(j))\n    return final_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list1 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list2 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list3 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list4 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list5 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list6 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list7 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list8 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list9 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list10 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list11 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list12 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list13 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list14 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list15 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list16 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list17 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list18 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list19 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list20 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list21 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list22 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list23 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list24 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list25 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list26 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list27 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list28 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list29 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list30 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list31 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list32 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list33 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list34 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list35 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list36 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list37 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list38 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list39 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list40 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list41 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list42 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list43 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list44 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list45 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list46 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list47 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list48 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list49 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list50 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list51 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list52 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list53 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list54 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list55 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list56 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list57 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list58 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list59 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list60 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list61 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list62 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list63 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list64 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list65 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list66 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list67 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list68 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list69 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list70 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list71 = [(1, 2), (2, 3), (3, 5), (5, 6)]\n    test_list72 = [(1, 2), (2, 3), (3, 5), (5, 6)"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Using itertools.combinations() \n    # getting all the combinations \n    # of sums from the given list \n    result = [sum(i) for i in combinations(test_list, 2)] \n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        tuple_list.append(list(combinations(test_list, i)))\n    return tuple_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [list(i) for i in list(combinations(test_list, 2))]\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # The prime factors of 13195 are 5, 7, 13 and 29.\n    #   13195 = 5*7*13*29\n    \n    # Find the number of divisors of 13195\n    # If the number of divisors is even, then return True\n    # If the number of divisors is odd, then return False\n    \n    # Write your logic here\n    \n    x = n \n    count = 0\n    for i in range(1, x+1): \n        if (n % i == 0): \n            count += 1\n    if (count % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            count += 1\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            divisors = divisors + 1\n    if divisors%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            count += 1\n    if count % 2 == 0 :\n        print(True)\n    else :\n        print(False)\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                count = count + 1\n            else: \n                count = count + 2\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n    \n    \ndef is_prime(n) :\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n>1 :\n        if count_divisors(n)==2:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \ndef palindrome_check(n) :\n    '''\n    Write a python function to check whether the number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n_new=n\n    rev=0\n    while(n>0):\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if rev==n_new:\n        return True\n    else:\n        return False\n    \ndef is_perfect_number(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum=0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    if sum==n:\n        return True\n    else:\n        return False\n    \ndef is_perfect_square(n) :\n    '''\n    Write a python function to check whether the number is perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    root=math.sqrt(n)\n    if root==int(root):\n        return True\n    else:\n        return False\n    \ndef smallest_divisor(n) :\n    '''\n    Write a python function to find the smallest divisor of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    low=1\n    high=n\n    ans=0\n    while low<=high:\n        mid=(low+high)//2\n        if mid*mid<=n:\n            ans=mid\n            low=mid+1\n        else:\n            high=mid-1\n    return ans\n    \ndef is_fibonacci(n) :\n    '''\n    Write a python function to check whether the number is Fibonacci number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a=0\n    b=1\n    c=1\n    if n==1:\n        return True\n    while c<n:\n        a=b\n        b=c\n        c=a+b\n        if c==n:\n            return True\n    return False\n    \ndef reverse_number(n) :\n    '''\n    Write a python function to reverse the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    rev=0\n    while(n>0):\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    return rev\n    \n    \ndef is_cyclic_number(n) :\n    '''\n    Write a python function to check whether the number is cyclic or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a=n\n    b=n\n    c=n\n    while a!=0:\n        a=a//10\n    while b!=0:\n        b=b%10\n        b=b*10\n        b=b//10\n    while c!=0:\n        c=c%10\n        c=c*10\n        c=c%10\n    if b==c:\n        return True\n    else:\n        return False\n    \ndef factorial(n) :\n    '''\n    Write a python function to check whether the number is factorial or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=1\n    f=1\n    if n<0:\n        return -1\n    elif n==0:\n        return 1\n    while i<=n:\n        f=f*i\n        i=i+1\n    return f\n    \ndef is_strong_number(n) :\n    '''\n    Write a python function to check whether the number is strong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=n\n    sum=0\n    while(i!=0):\n        dig=i%10\n        sum=sum+factorial(dig)\n        i=i//10\n    if n==sum:\n        return True\n    else:\n        return False\n    \ndef smallest_multiple(n) :\n    '''\n    Write a python function to check whether the number is smallest multiple or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=1\n    f=1\n    while i<=n:\n        f=f*i\n        i=i+1\n    return f\n    \ndef find_highest_digit(n) :\n    '''\n    Write a python function to find the highest digit of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=1\n    while i<=n:\n        if n%i==0:\n            n=n//i\n        else:\n            i=i+1\n    return n\n    \ndef find_prime_factors(n) :\n    '''\n    Write a python function to find the prime factor of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=2\n    prime_factors=[]\n    while i<=n:\n        if n%i==0:\n            prime_factors.append(i)\n            n=n//i\n        else:\n            i=i+1\n    return prime_factors\n    \ndef is_leap_year(year) :\n    '''\n    Write a python function to check whether the year is leap year or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if year%4==0:\n        if year%100==0:\n            if year%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef find_gcd(a,b) :\n    '''\n    Write a python function to find the gcd of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if b==0:\n        return a\n    else:\n        return find_gcd(b,a%b)\n    \ndef find_lcm(a,b) :\n    '''\n    Write a python function to find the lcm of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if a==0 or b==0:\n        return 0\n    else:\n        return (a*b)//find_gcd(a,b)\n    \ndef i"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==1: \n        return False\n    elif n%2==0:\n        if n/2 == 1:\n            return True\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef digits_sum(n):\n    '''\n    Write a python function to find the sum of digits. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-14.php\n    '''\n    digits_sum=0\n    if (n < 0): \n        n = -n \n    while(n!=0):\n        digits_sum += n % 10\n        n = int(n/10)\n    return digits_sum\ndef is_perfect_number(n):\n    '''\n    Write a python function to check whether the given number is a perfect number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-13.php\n    '''\n    factors=0\n    for i in range(1,n):\n        if n % i == 0:\n            factors += 1\n    return factors == n\ndef factorial(n):\n    '''\n    Write a python function to compute n factorial using for loop. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-12.php\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact\ndef prime_factors(n):\n    '''\n    Write a python function to compute prime factors of a given number using while loop. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-11.php\n    '''\n    i = 2\n    while(i * i <= n):\n        if n % i == 0:\n            n = n/i\n            print(i)\n        else:\n            i += 1\n    if n > 1:\n        print(int(n))\ndef prime_number_list(l):\n    '''\n    Write a python function to check whether the given list contains only prime numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-10.php\n    '''\n    for i in l:\n        if i == 1:\n            continue\n        elif i == 2:\n            continue\n        else:\n            for i in range(2, i):\n                if(i % 2 == 0):\n                    break\n            else:\n                print(i)\ndef count_ascending_digits(n):\n    '''\n    Write a python function to check whether the given number contains the same digits in ascending order. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-9.php\n    '''\n    count=0\n    while(n!=0):\n        count += 1\n        n = int(n/10)\n    return count\ndef reverse_number(n):\n    '''\n    Write a python function to compute the reverse of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-8.php\n    '''\n    x = str(n)\n    rev = x[::-1]\n    return int(rev)\ndef palindrome_number(n):\n    '''\n    Write a python function to check whether the given number is palindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-7.php\n    '''\n    if(n<0):\n        return False\n    else:\n        n = str(n)\n        rev = n[::-1]\n        return int(n)==int(rev)\ndef Armstrong_number(n):\n    '''\n    Write a python function to check whether the given number is an armstrong number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-6.php\n    '''\n    n=str(n)\n    sum=0\n    l=len(n)\n    for i in n:\n        sum += int(i)**l\n    return sum == int(n)\ndef sum_of_squares(n):\n    '''\n    Write a python function to compute the sum of squares of first n natural numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-5.php\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\ndef sum_of_odd_squares(n):\n    '''\n    Write a python function to compute the sum of odd squares of first n natural numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-4.php\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 1:\n            sum += i**2\n    return sum\ndef sum_of_even_squares(n):\n    '''\n    Write a python function to compute the sum of even squares of first n natural numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-3.php\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\ndef find_greater_number(n):\n    '''\n    Write a python function to check whether the given number is greater than all the numbers in the list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-2.php\n    '''\n    l=[]\n    while n!=0:\n        l.append(n%10)\n        n = int(n/10)\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i] < l[j]:\n                return False\n    return True\ndef reverse_order(n):\n    '''\n    Write a python function to check whether the given number is in reverse order. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-1.php\n    '''\n    x = str(n)\n    rev = x[::-1]\n    return int(x)==int(rev)\ndef factorial_division(n):\n    '''\n    Write a python function to find the quotient and remainder using floor division and modulo operation. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-15.php\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact = fact*i\n    return int(fact/n), int(fact%n)\ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-18.php\n    '''\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether the given number is a perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-17.php\n    '''\n    root = n**0.5\n    return int(root) == root\ndef is_special_number(n):\n    '''\n    Write a python function to check whether the given number is a special number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-16.php\n    '''\n    s=0\n    for i in range(1,n+1):\n        s += i**2\n    return n == s\ndef binomial_coefficient(n,k):\n    '''\n    Write a python function to compute the binomia"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    ctr = 0\n    for i in range(1, n+1) : \n        if(n % i == 0) : \n            ctr = ctr + 1\n    if(ctr % 2 == 0) : \n        print(n, \"is even\")\n    else : \n        print(n, \"is odd\")\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    if (count % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if ((j - i + 1) % 2!= 0):\n                sum_odd = sum_odd + arr[i:j+1]\n    return sum_odd\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1)%2!= 0:\n                sum += arr[j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    i = 0\n    sum = 0\n    while i < len(arr):\n        j = i\n        while j < len(arr):\n            if len(arr[i:j]) % 2 == 1:\n                sum += sum(arr[i:j])\n            j += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            sum += sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if((j - i) % 2!= 0):\n                for k in range(i, j + 1):\n                    sum += arr[k]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(j-i+1)%2!= 0:\n                sum += sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(arr[i:i+i]) for i in range(len(arr)) if len(arr[i:i+i])%2!=0])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    def subArraySum(arr, n, sum): \n      \n        # Pick a starting point \n        for i in range(n): \n      \n            # Find the sum of odd length subarray \n            # ending with arr[i] \n            s = 0\n            for j in range(i, n): \n                s = s + arr[j] \n      \n                # If the sum is equal to'sum' we print  \n                # the starting and ending index \n                if s == sum: \n                    print(\"Sum found between\") \n                    print(\"indexes % d and % d\"%(i, j-1)) \n      \n                    return 1\n      \n        # If no subarray found,return -1 \n        return 0\n    \n    res = subArraySum(arr, len(arr), sum) \n    if res == 0: \n        print(\"No subarray found\") \n    return 0\n    \ndef subarray_sum(arr, N, sum):\n    cur_sum = arr[0]\n    start = 0\n    i = 1\n    while i <= N:\n        while cur_sum > sum and start < i - 1:\n            cur_sum = cur_sum - arr[start]\n            start += 1\n        if cur_sum == sum:\n            print(\"%d %d\" %(start, i - 1))\n        if i < N:\n            cur_sum = cur_sum + arr[i]\n        i += 1\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return sum([arr[i] for i in range(len(arr)) if len(arr[i:i+1])%2==1])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # iterate over all elements in array\n    # for each element, iterate over all possible subarray with length k + 1\n    # the subarray starting from ith element with odd length and ending in ith element with odd length \n    # the subarray starting from ith element with odd length and ending in jth element with odd length \n    # subarray = [i, j)\n    # (a + b) mod k = a mod k + b mod k - a mod k\n    def sum_subarray(arr, k):\n        # sum of all array elements\n        total = 0\n        for i in range(len(arr)):\n            # sum of all possible subarrays with length k\n            total += sum(arr[i:i+k])\n        return total\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_v = max(r, g, b)\n    min_v = min(r, g, b)\n    if max_v == min_v:\n        h = 0\n    elif max_v == r:\n        h = 60 * (((g - b) / (max_v - min_v)) % 6)\n    elif max_v == g:\n        h = 60 * (((b - r) / (max_v - min_v)) + 2)\n    elif max_v == b:\n        h = 60 * (((r - g) / (max_v - min_v)) + 4)\n    v = max_v\n    s = 0 if max_v == 0 else (v - min_v) / v\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    diff = max_value - min_value\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # define a min() function to avoid computational error\n    def min(x, y):\n        if x < y:\n            return x\n        else:\n            return y\n    r, g, b = r/255.0, g/255.0, b/255.0\n    v = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = v - min_val\n    if delta == 0:\n        h = 0\n    elif v == r:\n        h = 60.0 * (((g - b)/delta) % 6)\n    elif v == g:\n        h = 60.0 * (((b - r)/delta) + 2)\n    elif v == b:\n        h = 60.0 * (((r - g)/delta) + 4)\n    s = 0 if delta == 0 else delta/v\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = h/360.0\n    return (h, s, v)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    return multiply(even_list) * multiply(odd_list)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_mul = 1\n    odd_mul = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_mul *= i\n        else:\n            odd_mul *= i\n    return even_mul,odd_mul\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=1\n    odd=1\n    for x in list1:\n        if x%2==0:\n            even*=x\n        else:\n            odd*=x\n    return even,odd\n    \nlist1=list(map(int,input().split()))\nprint(mul_even_odd(list1))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    e,o=[],[]\n    for i in list1:\n        if i%2==0:\n            e.append(i)\n        else:\n            o.append(i)\n    if len(e)>=1 and len(o)>=1:\n        return e[0]*o[0]\n    elif len(e)>=1:\n        return e[0]\n    elif len(o)>=1:\n        return o[0]\n    else:\n        return 0\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_nums = []\n    odd_nums = []\n    for num in list1:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i % 2 == 0:\n            result = result * i\n        else:\n            pass\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod=1\n    odd_prod=1\n    for i in list1:\n        if i%2==0:\n            even_prod=even_prod*i\n        else:\n            odd_prod=odd_prod*i\n    return even_prod*odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product1 = 1\n    product2 = 1\n    for item in list1:\n        if item % 2 == 0:\n            product1 = product1 * item\n        else:\n            product2 = product2 * item\n    return product1, product2\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # even_product = 0\n    # odd_product = 0\n    # for num in list1:\n    #     if num % 2 == 0:\n    #         even_product = even_product * num\n    #     else:\n    #         odd_product = odd_product * num\n    # return even_product, odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Write your code here\n    product=1\n    for i in list1:\n        if(i%2==0):\n            product=product*i\n        else:\n            product=product*i\n    return product\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = list()\n    for s in test_str:\n        test_list.append(int(s))\n    return tuple(test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def str_to_int(test_str):\n        test_str = test_str.strip()\n        test_str = test_str.split(',')\n        test_str = [int(i) for i in test_str]\n        return test_str\n    test_str = str_to_int(test_str)\n    return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        list_1 = test_str.split('(')\n        list_2 = list_1[1].split(')')\n        list_3 = list_2[0].split(',')\n        return tuple(int(i) for i in list_3)\n    except ValueError:\n        return None\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        str_list = test_str.split(',')\n        int_list = [int(i) for i in str_list]\n        return int_list\n    except:\n        print('Invalid input')\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(s) for s in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str.startswith('('):\n        if test_str.endswith(')'):\n            test_str = test_str[1:-1]\n            str_list = test_str.split(',')\n            return tuple(int(x) for x in str_list)\n    return False\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = test_str[1:-1]\n    test_list = test_tuple.split(',')\n    test_list_new = []\n    for i in test_list:\n        test_list_new.append(int(i))\n    return tuple(test_list_new)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.split(\",\")\n    test_tup = tuple(test_str)\n    test_tup = list(map(int, test_tup))\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l=0\n    r=len(a)-1\n    while l<=r:\n        mid=(l+r)//2\n        if x>=a[mid]:\n            l=mid+1\n        else:\n            r=mid-1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\ndef right_insertion_bisect(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order using bisect.\n    '''\n    return bisect.bisect_right(a, x)\ndef right_insertion_recursive(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order using recursive.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        if a[0] == x:\n            return 1\n        else:\n            return 0\n    if a[len(a) // 2] < x:\n        return right_insertion_recursive(a[len(a) // 2:], x) + len(a) // 2 + 1\n    else:\n        return right_insertion_recursive(a[:len(a) // 2], x)\ndef right_insertion_linear_search(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order using linear search.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        if a[0] == x:\n            return 1\n        else:\n            return 0\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\ndef test_right_insertion():\n    a = [1, 3, 4, 6, 7]\n    assert right_insertion(a, 1) == 1\n    assert right_insertion(a, 3) == 3\n    assert right_insertion(a, 4) == 4\n    assert right_insertion(a, 6) == 5\n    assert right_insertion(a, 7) == 6\n    assert right_insertion(a, 9) == 6\n    assert right_insertion(a, 0) == 0\n    assert right_insertion(a, 2) == 1\n    assert right_insertion(a, 5) == 5\n    assert right_insertion(a, 8) == 6\n    print('passed')\ndef test_right_insertion_bisect():\n    a = [1, 3, 4, 6, 7]\n    assert right_insertion_bisect(a, 1) == 1\n    assert right_insertion_bisect(a, 3) == 3\n    assert right_insertion_bisect(a, 4) == 4\n    assert right_insertion_bisect(a, 6) == 5\n    assert right_insertion_bisect(a, 7) == 6\n    assert right_insertion_bisect(a, 9) == 6\n    assert right_insertion_bisect(a, 0) == 0\n    assert right_insertion_bisect(a, 2) == 1\n    assert right_insertion_bisect(a, 5) == 5\n    assert right_insertion_bisect(a, 8) == 6\n    print('passed')\ndef test_right_insertion_recursive():\n    a = [1, 3, 4, 6, 7]\n    assert right_insertion_recursive(a, 1) == 1\n    assert right_insertion_recursive(a, 3) == 3\n    assert right_insertion_recursive(a, 4) == 4\n    assert right_insertion_recursive(a, 6) == 5\n    assert right_insertion_recursive(a, 7) == 6\n    assert right_insertion_recursive(a, 9) == 6\n    assert right_insertion_recursive(a, 0) == 0\n    assert right_insertion_recursive(a, 2) == 1\n    assert right_insertion_recursive(a, 5) == 5\n    assert right_insertion_recursive(a, 8) == 6\n    print('passed')\ndef test_right_insertion_linear_search():\n    a = [1, 3, 4, 6, 7]\n    assert right_insertion_linear_search(a, 1) == 1\n    assert right_insertion_linear_search(a, 3) == 3\n    assert right_insertion_linear_search(a, 4) == 4\n    assert right_insertion_linear_search(a, 6) == 5\n    assert right_insertion_linear_search(a, 7) == 6\n    assert right_insertion_linear_search(a, 9) == 6\n    assert right_insertion_linear_search(a, 0) == 0\n    assert right_insertion_linear_search(a, 2) == 1\n    assert right_insertion_linear_search(a, 5) == 5\n    assert right_insertion_linear_search(a, 8) == 6\n    print('passed')\ndef test():\n    test_right_insertion()\n    test_right_insertion_bisect()\n    test_right_insertion_recursive()\n    test_right_insertion_linear_search()\n    print('passed')\nif __name__ == '__main__':\n    test()\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Given a sorted array of numbers, return the index where the value should be inserted to maintain the sort.\n    #  If the array is already sorted, return 0.\n    #  If the element is already in the array, return its index.\n    #  If the element is greater than any element in the array, return the array length.\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        if a[0] < x:\n            return 1\n        else:\n            return 0\n    else:\n        low = 0\n        high = len(a) - 1\n        mid = (low + high) // 2\n        while low <= high:\n            if a[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n            mid = (low + high) // 2\n        return mid + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a, x)\n    right = bisect.bisect_right(a, x)\n    return right\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    elif a[0] > x:\n        return 0\n    elif a[-1] <= x:\n        return len(a)\n    else:\n        l = 0\n        r = len(a) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if a[m] == x:\n                return m + 1\n            elif a[m] < x:\n                l = m + 1\n            else:\n                r = m - 1\n        return l\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x >= a[-1]:\n        return len(a)\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    if pattern.search(text):\n        return \"Match found\"\n    else:\n        return \"No Match found\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    reg = re.findall(r'a.{3}b', text)\n    if reg:\n        return reg\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r'ab{3}', text):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall(r'ab{3}', text, re.MULTILINE)\n    if match:\n        for i in match:\n            print(i)\n    else:\n        return('No Match')\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'ab{3}', text)\n    if result:\n        return result.group()\n    return None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '(ab){3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    match = pattern.search(text)\n    return match!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    print('\\n')\n    result = re.findall('a.{3}b', text)\n    if result:\n        print('match')\n    else:\n        print('no match')\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.b.b')\n    if pattern.search(text):\n        return \"Match!\"\n    else:\n        return \"No match!\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    string = text\n    if re.match(\"^[ab]{3}\",string):\n        return True\n    return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    string = text\n    if re.match(\"^[ab]{2}\",string):\n        return True\n    return False\n        \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    string = text\n    if re.match(\"^[ab]{1}\",string):\n        return True\n    return False\n        \ndef text_match_first_two(text):\n    '''\n    Write a function that matches the first two characters of a string.\n    '''\n    string = text\n    if re.match(\"^[ab]{2}\",string):\n        return True\n    return False\n    \ndef text_match_last_two(text):\n    '''\n    Write a function that matches the last two characters of a string.\n    '''\n    string = text\n    if re.match(\"[ab]{2}$\",string):\n        return True\n    return False\n    \ndef text_match_first_three(text):\n    '''\n    Write a function that matches the first three characters of a string.\n    '''\n    string = text\n    if re.match(\"^[ab]{3}\",string):\n        return True\n    return False\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = []\n    for i in test_str:\n        new_tuple.append(i)\n    for i in test_list:\n        new_tuple.append(i)\n    return tuple(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str, )\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print(test_str.split(test_list))\n    print(tuple(test_str.split(test_list)))\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = list(test_list)\n    str_list = list(test_str)\n    print(tuple(tuple_list))\n    print(tuple(str_list))\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        tuple_str = ''\n        tuple_list = []\n        if test_str.isalpha() == True:\n            if test_str.islower() == True:\n                for char in test_str:\n                    tuple_str = tuple_str + char\n                new_tuple = (tuple_str, tuple_list)\n                return new_tuple\n            else:\n                for char in test_str:\n                    tuple_str = tuple_str + char.lower()\n                new_tuple = (tuple_str, tuple_list)\n                return new_tuple\n        else:\n            if test_str.isnumeric() == True:\n                for num in test_str:\n                    if num!='':\n                        tuple_list.append(int(num))\n                new_tuple = (test_list, tuple_list)\n                return new_tuple\n            else:\n                return 'Invalid input.'\n    except TypeError:\n        return 'Invalid input.'\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # implement this function\n    return (test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_str)\n    # print(new_tup)\n    new_tup = tuple(test_list)\n    # print(new_tup)\n    return new_tup\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return None\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple = new_tuple + (test_str, )\n    return new_tuple\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for x in range(0, len(nums)):\n        if nums[x] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return nums[0::2].count(0) == 0\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums)<1:\n        return False\n    for i in range(len(nums)):\n        if i%2==0 and nums[i]%2==1:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\nprint(even_position([2,2,1,3]))\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                pass\n            else:\n                return False\n        else:\n            pass\n        i = i + 1\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # test_tup = (1, 2, (1, 2, 3, (4, 5)))\n    # test_tup = (1, 2, (1, 2, 3, (4, 5)))\n    print(test_tup)\n    # for i in test_tup:\n    #     if type(i) == tuple:\n    #         test_tup = remove_nested(i)\n    # return test_tup\n    \n    if test_tup[0] == 1:\n        test_tup = test_tup[2]\n        return test_tup\n    else:\n        return test_tup\n        # return (1, 2, (1, 2, 3, (4, 5)))\n        \n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_tup.append(j)\n        else:\n            new_tup.append(i)\n    return tuple(new_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    r = []\n    for tup in test_tup:\n        if not isinstance(tup, tuple):\n            r.append(tup)\n        else:\n            r.extend(remove_nested(tup))\n    return tuple(r)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tups = []\n    test_tup = tuple(test_tup)\n    for t in test_tup:\n        if isinstance(t, tuple):\n            nested_tups.append(t)\n    nested_tups = set(nested_tups)\n    new_tup = []\n    for tup in test_tup:\n        if tup not in nested_tups:\n            new_tup.append(tup)\n    new_tup = tuple(new_tup)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return list(filter(lambda x: x == test_tup[0], test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = list(test_tup)\n    new_list = [test_tup[0]]\n    i = 0\n    while i < len(test_tup):\n        if type(test_tup[i]) == tuple:\n            test_tup[i] = test_tup[i][0]\n            new_list.append(test_tup[i])\n            i += 1\n        else:\n            new_list.append(test_tup[i])\n            i += 1\n    return tuple(new_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            new_tup.extend(remove_nested(item))\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = []\n    for i in test_tup:\n        if type(i) == type(()):\n            continue\n        else:\n            res.append(i)\n    return tuple(res)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #test_tup = (1,2,3,1,2,3,4,5,6)\n    return tuple(set(test_tup))\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += 1\n    return count\n    \nprint(count_list([1, 2, 3]))\nprint(count_list([[],[1,2,3]]))\nprint(count_list([[],[1,2,3],[4,5,6]]))\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    input_list = [1, 2, [3,4], [5,6], [7,8,9], [[10,11],[12,13]]] \n    count = 0\n    for i in input_list:\n        if isinstance(i,list):\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    def is_list(l):\n        return type(l) == list\n    return sum([is_list(i) for i in input_list])\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if isinstance(x, list): \n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list: \n        if type(x) == type([]): \n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output_list = []\n    for x in input_list:\n        if type(x) == list:\n            output_list.append(x)\n    return len(output_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    if input_list == []:\n        return 0\n    else:\n        return 1 + count_list(input_list[0])\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list)!= type([]):\n        return 0\n    else:\n        count = 0\n        for item in input_list:\n            if type(item) == type([]):\n                count = count + 1\n        return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list) == list and len(input_list)!= 0:\n        return len(input_list),type(input_list)\n    else:\n        return 'Enter a valid list', type(input_list)\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low, high = 0, len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid]==x and (mid==0 or arr[mid-1]!=x):\n            return mid\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while(l<r):\n        m=(l+r)//2\n        if arr[m]>x:\n            r=m-1\n        elif arr[m]<x:\n            l=m+1\n        else:\n            if m==len(arr)-1:\n                return m\n            if arr[m+1]!=x:\n                return m+1\n            l=m+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == None:\n        return -1\n    elif len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if x == arr[i]:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==x and (mid==len(arr)-1 or x<arr[mid+1]):\n            return mid\n        elif arr[mid]>x:\n            high=mid-1\n        else:\n            low=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1] > x):\n            return mid\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lower = 0\n    upper = len(arr)-1\n    while lower <= upper:\n        mid = (lower+upper)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            lower = mid+1\n        elif arr[mid] > x:\n            upper = mid-1\n        else:\n            lower = mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while(start<=end):\n        mid = (start+end)//2\n        if arr[mid]>x:\n            end = mid-1\n        elif arr[mid]<x:\n            start = mid+1\n        else:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                start = mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    for i in range(n):\n        if arr[i]==x:\n            if i==n-1:\n                return \"Not Found\"\n            return i\n    return \"Not Found\"\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a.*?b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\".*a.*b\"\n    if re.match(pattern, text):\n        print(\"Match 1\")\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    match = re.search('a[\\w]+b$', text)\n    if match:\n        return match.group()\n    else:\n        return False\n        \nassert text_starta_endb('abc') == False\nassert text_starta_endb('azcbob') == 'azcbob'\nassert text_starta_endb('cazaza') == False\nassert text_starta_endb('a') == False\nassert text_starta_endb('aaabbbb') == 'aaabbbb'\nassert text_starta_endb('abbb') == 'abbb'\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_endb_string = 'a.*?b$'\n    if re.search(a_endb_string, text, flags=re.DOTALL)!= None:\n        return True\n    else:\n        return False\nprint(text_starta_endb('apple'))\nprint(text_starta_endb('a'))\nprint(text_starta_endb('azcbobobegghakl'))\nprint(text_starta_endb('b'))\nprint(text_starta_endb('b'))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return bool(re.search(r'a.*?b$', text))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match('a.b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    starta = re.search(r'a+b', text)\n    endb = re.search(r'a+b$', text)\n    print(starta.group(), endb.group())\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\ndef text_has_key_words(text):\n    '''\n    Write a function that takes a string. If the string 'contains' a certain word return True, if it does not return False.\n    '''\n    pass\ndef text_between(text):\n    '''\n    Write a function that returns a list of strings that are found in a string between two other strings.\n    '''\n    pass\ndef text_replace(text):\n    '''\n    Write a function that replaces all instances of one substring in a string with another substring.\n    '''\n    pass\ndef text_is_list(text):\n    '''\n    Write a function that returns True if a string is a list of comma-separated values (e.g. 'a,b,c,d'), and False otherwise.\n    '''\n    pass\ndef text_overlap(text):\n    '''\n    Write a function that returns True if a string contains any overlapping substrings, and False otherwise.\n    '''\n    pass\ndef text_has_substring(text):\n    '''\n    Write a function that takes two strings as arguments, and returns True if the second string appears in the first string, and False otherwise.\n    '''\n    pass\ndef text_is_divisble_by(text):\n    '''\n    Write a function that takes two integers, and returns True if the first is divisible by the second, and False otherwise.\n    '''\n    pass\ndef text_words_count(text):\n    '''\n    Write a function that takes a string as input, and returns a dictionary that has all of the distinct words as keys, and the number of times that word appears in the string as values.\n    '''\n    pass\ndef text_sum_numbers(text):\n    '''\n    Write a function that takes a string as input, and returns the sum of all of the digits that appear in the string.\n    '''\n    pass\ndef text_match_ends(text):\n    '''\n    Write a function that takes a string as input, and returns True if the string begins and ends with the same letter, and False otherwise.\n    '''\n    pass\ndef text_remove_all_before(text):\n    '''\n    Write a function that takes a string as input, and returns a version without the characters before the first space.\n    '''\n    pass\ndef text_reversed(text):\n    '''\n    Write a function that returns the reversed version of a string.\n    '''\n    pass\ndef text_replace_char(text):\n    '''\n    Write a function that replaces all of the spaces in a string with '%20'. You may assume that the string has sufficient space at the end to hold the additional characters, and that you are given the \"true\" length of the string.\n    '''\n    pass\ndef text_remove_char_count(text):\n    '''\n    Write a function that removes all instances of a character from a string.\n    '''\n    pass\ndef text_alternative_caps(text):\n    '''\n    Write a function that capitalizes the first and fourth letters of a name. The other letters will be lowercase.\n    '''\n    pass\ndef text_add_number(text):\n    '''\n    Write a function that takes a string as input, and returns that string, where each character is repeated once.\n    '''\n    pass\ndef text_replace_last(text):\n    '''\n    Write a function that takes a list of numbers and strings and returns a new list with the strings filtered out.\n    '''\n    pass\ndef text_swap_case(text):\n    '''\n    Write a function that takes a string as input and returns a new string where all lowercase letters have been replaced with uppercase letters and vice versa.\n    '''\n    pass\ndef text_closest_bracket(text):\n    '''\n    Write a function that finds the position of the closing bracket that matches the opening bracket at the same position in a string.\n    '''\n    pass\ndef text_capitalize_word(text):\n    '''\n    Write a function that takes a string as input and returns a new string that is the original string, but with the first letter of each word capitalized.\n    '''\n    pass\ndef text_end_other(text):\n    '''\n    Write a function that takes two strings as input and returns the string that is a concatenation of the last n characters of the first string and the first n characters of the second string, where n is the smaller of the lengths of the two strings.\n    '''\n    pass\ndef text_check_permutation(text):\n    '''\n    Write a function that takes two strings as input and returns True if they are permutations of each other, and False otherwise.\n    '''\n    pass\ndef text_text_justify(text):\n    '''\n    Write a function that takes a list of words and a width, and returns a list of strings that are the number of characters in each string up to the width. If the final string is shorter than the width it should be left justified, with no extra spaces.\n    '''\n    pass\ndef text_sounds_like(text):\n    '''\n    Write a function that takes two strings as input and returns True if they sound the same, and False otherwise.\n    '''\n    pass\ndef text_short_to_long(text):\n    '''\n    Write a function that takes two strings as input and returns True if the first string is a substring of the second string, and False otherwise.\n    '''\n    pass\ndef text_split_to_length(text):\n    '''\n    Write a function that takes a string and an integer as input and returns a list of strings of length N with each string having N characters from the original string.\n    '''\n    pass\ndef text_round_to_multiple_of_10(text):\n    '''\n    Write a function that takes a number as input, and returns the nearest number that is divisible by 10.\n    '''\n    pass\ndef text_smallest_factor(text):\n    '''\n    Write a function that takes a number as input, and returns the smallest number that is evenly divisible by the given number.\n    '''\n    pass\ndef text_strip_punctuation(text):\n    '''\n    Write a function that takes a string as input and returns the string with all punctuation removed.\n    '''\n    pass\ndef text_decode_string(text):\n    '''\n    Write a function that takes a string as input and returns the string encoded using base64.\n    '''\n    pass\ndef text_convert_morse_code(text):\n    '''\n    Write a function that takes a string that is a sentence encoded in Morse Code as input, and returns the Morse Code encoded sentence.\n    '''\n    pass\ndef text_factorial(text):\n    '''\n    Write a function that takes a positive integer as input, and returns the factorial of that integer.\n    '''\n    pass\ndef text_is_palindrome(text):\n    '''\n    Write a function that takes a string as input and returns True if that string is a palindrome (the same string backwards).\n    '''\n    pass\ndef text_fibonacci_sequence(text):\n    '''\n    Write a function that takes an integer as input, and returns the fibonacci sequence as a list, starting with the number 0 and 1.\n    '''\n    pass\ndef text_transpose(text):\n    '''\n    Write a function that takes a two-dimensional list as input and returns the transpose of that list.\n    '''\n    pass\ndef text_multiply_lists(text):\n    '''\n    Write a function that takes two lists of numbers of the same length, and returns a new list consisting of the pairwise multiplication of the two lists.\n    '''\n    pass\ndef text_print_uppercase(text):\n    '''\n    Write a function that takes a string as input and returns a new string with all the uppercase letters converted to lowercase and vice versa.\n    '''\n    pass\ndef text_trim_left(text):\n    '''\n    Write a function that takes a string as input and returns the same string with any leading (white space characters) removed.\n    '''\n    pass\ndef text_is_palindrome_permutation(text):\n    '''\n    Write a function that takes a string as input and returns True if that string is a palindrome or a permutation of a palindrome, and False otherwise.\n    '''\n    pass\ndef text_pr"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'a.*b$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_start_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*a\\w*b\\w*$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_start_end_non_capture(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*(a\\w*)?b\\w*$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_start_end_non_capture_non_greedy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*?(a\\w*)?b\\w*?$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_start_end_non_capture_non_greedy_match_all(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*?(a\\w*)?b\\w*?$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_exclamation_mark_question_mark(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'!.*?\\?'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_any_char_any_amount(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'a.*b'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_any_char_any_amount_non_greedy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'a.*?b'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_start(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*a\\w*b\\w*'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'a\\w*b\\w*$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_end_non_capture(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'a\\w*?b\\w*?'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_start_non_capture(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*a\\w*b\\w*'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_start_non_capture_non_greedy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*?a\\w*b\\w*?'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_end_non_capture_non_greedy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'a\\w*?b\\w*?$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_start_non_capture_non_greedy_match_all(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*?a\\w*b\\w*?$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_end_non_capture_non_greedy_match_all(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'a\\w*?b\\w*?$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_start_and_end_non_capture_non_greedy_match_all(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*?a\\w*?b\\w*?$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_start_end_non_capture_non_greedy_match_all(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*a\\w*?b\\w*?$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_start_end_non_capture_non_greedy_match_all(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*a\\w*b\\w*?$'\n    match = re.findall(regex, text, re.M|re.I)\n    print(match)\n    \ndef text_word_wildcard_at_start_non_capture_non_greedy_match_all(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'^\\w*a\\w*b\\w*?$'\n    match = re.findall"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r\"a.*?b$\"\n    if re.match(regex, text):\n        return True\n    return False\n    \nprint(text_starta_endb(\"ab\"))\nprint(text_starta_endb(\"abc\"))\nprint(text_starta_endb(\"aaaab\"))\nprint(text_starta_endb(\"aaabbb\"))\nprint(text_starta_endb(\"acaaab\"))\nprint(text_starta_endb(\"aaabbbbbbb\"))\nprint(text_starta_endb(\"aab\"))\nprint(text_starta_endb(\"acaaabbbbbbb\"))\nprint(text_starta_endb(\"aabbcc\"))\nprint(text_starta_endb(\"\"))\nprint(text_starta_endb(\"zzzab\"))\nprint(text_starta_endb(\"zzzba\"))\nprint(text_starta_endb(\"zzzaa\"))\nprint(text_starta_endb(\"zzzbb\"))\nprint(text_starta_endb(\"zzzcc\"))\nprint(text_starta_endb(\"zzzccc\"))\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict:\n        sum += dict[x]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum = sum + value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for num in dict:\n        sum += dict[num]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for key in dict:\n        summ += dict[key]\n    return summ\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n) if i%2!=0)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # l=int(input(\"enter the starting value: \"))\n    # r=int(input(\"enter the ending value: \"))\n    odd_sum=0\n    for i in range(l,r):\n        if i%2!=0:\n            odd_sum=odd_sum+i\n    print(\"the sum of odd natural numbers is: \",odd_sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1)[1::2])\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower range: \"))\n    r = int(input(\"Enter the upper range: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i%2!= 0:\n            sum += i\n    print(\"Sum of odd natural numbers between\", l, \"and\", r, \"is\", sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n==1:\n        return 1\n    elif n>1:\n        return n + sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #take input from user\n    l=int(input(\"enter lower limit \"))\n    r=int(input(\"enter upper limit \"))\n    #check if the number is even or odd\n    def isodd(n):\n        return n%2!=0\n    #create a sum of odd numbers\n    def sumodd(l,r):\n        s=0\n        for i in range(l,r):\n            if isodd(i):\n                s=s+i\n        return s\n    print(\"sum of odd natural numbers between\",l,\"and\",r,\"is\",sumodd(l,r))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #Base case\n    if n==1:\n        return 0\n    else:\n        return n+sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of range: \"))\n    r = int(input(\"Enter the upper limit of range: \"))\n    sum_odd = 0\n    for i in range(l,r):\n        if i % 2!= 0:\n            sum_odd += i\n    print(sum_odd)\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    return sum([x for x in range(n) if x % 2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n%2==0:\n        return n\n    else:\n        return n+1\nprint(sum_odd(15))\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr_sum = 0\n    for i in range(len(arr)):\n        arr_sum += arr[i]\n    return arr_sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    _sum = 0\n    for num in arr:\n        _sum = _sum + num\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not len(arr):\n        return 0\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for elem in arr:\n        total += elem\n    return total\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    n1 = n >> d\n    n2 = n << (32 - d)\n    return n2 | n1\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #the solution to this problem is to first reverse the number to reverse all the bits (a bit operation)\n    #Then we rotate the number left by d bits (logical shift, this operation will only apply to the bits that aren't zeros and so on). \n    #Lastly, we reverse the number again.\n    a = bin(n)[2:]  #a represents the binary version of the input number\n    b = len(a)     #b represents the length of the binary version of the number\n    a = a[::-1]     #reverses the binary number\n    d = d % b     #d represents the number of bits to rotate left\n    a = a[d:] + a[:d] #performing the rotation\n    a = a[::-1]\n    return int(a,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if not isinstance(n,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(d,int):\n        raise TypeError('Number must be integer')\n    n = bin(n)[2:]\n    while len(n)<32:\n        n = '0'+n\n    n = n[-d:]+n[:-d]\n    return int(n,2)\ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if not isinstance(n,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(d,int):\n        raise TypeError('Number must be integer')\n    n = bin(n)[2:]\n    while len(n)<32:\n        n = '0'+n\n    n = n[:d]+n[d:]\n    return int(n,2)\ndef xor(a,b):\n    '''\n    Write a function to get the xor of two numbers.\n    '''\n    return a^b\ndef xor_list(lst):\n    '''\n    Write a function to get the xor of all elements in a list.\n    '''\n    if not isinstance(lst,list):\n        raise TypeError('List must be a list')\n    return reduce(xor,lst)\ndef sum_list(lst):\n    '''\n    Write a function to get the sum of all elements in a list.\n    '''\n    if not isinstance(lst,list):\n        raise TypeError('List must be a list')\n    return reduce(lambda x,y:x+y,lst)\ndef mul_list(lst):\n    '''\n    Write a function to get the product of all elements in a list.\n    '''\n    if not isinstance(lst,list):\n        raise TypeError('List must be a list')\n    return reduce(lambda x,y:x*y,lst)\ndef ext_gcd(a,b):\n    '''\n    Write a function to get the greatest common divisor of two numbers.\n    '''\n    if not isinstance(a,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(b,int):\n        raise TypeError('Number must be integer')\n    x = 1\n    y = 0\n    r = a%b\n    q = a//b\n    if r == 0:\n        return b,x,y\n    else:\n        return ext_gcd(b,r)\ndef div_mod(a,b):\n    '''\n    Write a function to get the modulus of two numbers.\n    '''\n    if not isinstance(a,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(b,int):\n        raise TypeError('Number must be integer')\n    x = a//b\n    y = a%b\n    return x,y\ndef bin_gcd(a,b):\n    '''\n    Write a function to get the greatest common divisor of two numbers in binary.\n    '''\n    if not isinstance(a,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(b,int):\n        raise TypeError('Number must be integer')\n    if a==0 or b==0:\n        return max(a,b)\n    if a==b:\n        return a\n    if a>b:\n        return bin_gcd(a-b,b)\n    else:\n        return bin_gcd(a,b-a)\ndef power(a,b):\n    '''\n    Write a function to get the power of a number by binary method.\n    '''\n    if not isinstance(a,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(b,int):\n        raise TypeError('Number must be integer')\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    x = power(a,b//2)\n    if b%2==0:\n        return x*x\n    else:\n        return x*x*a\ndef modulo_power(a,b,m):\n    '''\n    Write a function to get the power of a number by binary method with modulo.\n    '''\n    if not isinstance(a,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(b,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(m,int):\n        raise TypeError('Number must be integer')\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    x = modulo_power(a,b//2,m)\n    if b%2==0:\n        return x*x%m\n    else:\n        return x*x*a%m\ndef power_modulo(a,b,m):\n    '''\n    Write a function to get the power of a number by binary method with modulo.\n    '''\n    if not isinstance(a,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(b,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(m,int):\n        raise TypeError('Number must be integer')\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    x = power_modulo(a,b//2,m)\n    if b%2==0:\n        return x*x%m\n    else:\n        return (x*x*a)%m\ndef modulo_power_list(a,b,m,lst):\n    '''\n    Write a function to get the power of a list by binary method with modulo.\n    '''\n    if not isinstance(a,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(b,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(m,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(lst,list):\n        raise TypeError('List must be a list')\n    if b==0:\n        return [1]*len(lst)\n    if b==1:\n        return lst\n    x = modulo_power_list(a,b//2,m,lst)\n    if b%2==0:\n        return [i*j%m for i,j in zip(x,lst)]\n    else:\n        return [(i*j)%m for i,j in zip(x,lst)]\ndef power_modulo_list(a,b,m,lst):\n    '''\n    Write a function to get the power of a list by binary method with modulo.\n    '''\n    if not isinstance(a,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(b,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(m,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(lst,list):\n        raise TypeError('List must be a list')\n    if b==0:\n        return lst\n    if b==1:\n        return [a]*len(lst)\n    x = power_modulo_list(a,b//2,m,lst)\n    if b%2==0:\n        return [(i*j)%m for i,j in zip(x,lst)]\n    else:\n        return [(i*j)%m for i,j in zip(x,lst)]\ndef power_list(a,b,lst):\n    '''\n    Write a function to get the power of a list by binary method.\n    '''\n    if not isinstance(a,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(b,int):\n        raise TypeError('Number must be integer')\n    if not isinstance(lst,list):\n        raise TypeError('List must be a list')\n    if b==0:\n        return [1]*len(lst)\n    if b==1:\n        return lst\n    x = power_list(a,"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    left = n << d\n    right = n >> 32 - d\n    return left | right\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n | (n >> 32-d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert d >= 0 and d < 32\n    n = n << d\n    n = n | (n >> (32 - d))\n    return n & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**d) - 1\n    mask_bits = '{0:032b}'.format(mask)\n    left_bits = '{0:032b}'.format(n << d)\n    return int(left_bits + mask_bits,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n & 0x80000000:\n        n = (n << d) | (n >> (32 - d))\n        n = n & 0xffffffff\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # print(bin(n),bin(n<<d),bin(n>>(32-d)))\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert n.bit_length() <= 32\n    return ((n << d) | (n >> (32 - d))) & ((1 << 32) - 1)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Method 1:\n    # return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '')\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    text =''.join(text.split())\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    if type(text) == str:\n        text = re.sub(r\"\\s+\", \"\", text)\n        return text\n    else:\n        return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \", \"\")\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for x in text:\n        if x in punctuation:\n            text = text.replace(x,\"\")\n    return text\ndef remove_non_ascii(text):\n    '''\n    Write a function to remove all non-ASCII characters from a string.\n    '''\n    non_ascii = re.sub(r'[^\\x00-\\x7F]',r'', text)\n    return non_ascii\ndef remove_non_alphanumeric(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    non_alphanumeric = re.sub(r'[^A-Za-z0-9]',r'', text)\n    return non_alphanumeric\ndef remove_non_alphanumerics(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    non_alphanumerics = re.sub(r'[^A-Za-z0-9]',r'', text)\n    return non_alphanumerics\ndef replace_with_space(text):\n    '''\n    Write a function to replace every non-alphanumeric character with a space.\n    '''\n    replace_with_space = re.sub(r'[^A-Za-z0-9]', \" \", text)\n    return replace_with_space\ndef reverse(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    reverse = text[::-1]\n    return reverse\ndef find_word_count(text):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    words = text.split()\n    num_words = len(words)\n    return num_words\ndef find_word_lengths(text):\n    '''\n    Write a function to return a list of the lengths of the words in a given text.\n    '''\n    words = text.split()\n    word_lengths = []\n    for word in words:\n        word_lengths.append(len(word))\n    return word_lengths\ndef find_longest_word(text):\n    '''\n    Write a function to return the longest word in a given text.\n    '''\n    words = text.split()\n    word_lengths = []\n    for word in words:\n        word_lengths.append(len(word))\n    return max(word_lengths)\ndef find_shortest_word(text):\n    '''\n    Write a function to return the shortest word in a given text.\n    '''\n    words = text.split()\n    word_lengths = []\n    for word in words:\n        word_lengths.append(len(word))\n    return min(word_lengths)\ndef is_palindrome(text):\n    '''\n    Write a function which returns True if a string is a palindrome, False if it is not.\n    '''\n    word = text.lower()\n    text = text.replace(\" \", \"\")\n    word = word.replace(\" \", \"\")\n    reversed_word = word[::-1]\n    if word == reversed_word:\n        return True\n    else:\n        return False\ndef is_palindrome_two(text):\n    '''\n    Write a function which returns True if a string is a palindrome, False if it is not.\n    '''\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]\ndef replace_last(text, old, new):\n    '''\n    Write a function to replace the last occurrence of a string in a text.\n    '''\n    text = text.replace(old,new)\n    return text\ndef move_last(text, num_chars):\n    '''\n    Write a function to move all the characters in a string to the end of the string.\n    '''\n    last_characters = text[-num_chars:]\n    text = text[:-num_chars]\n    text = text + last_characters\n    return text\ndef replace_all(text, old, new):\n    '''\n    Write a function to replace all occurrences of a character in a string with a different character.\n    '''\n    text = text.replace(old, new)\n    return text\ndef remove_characters(text, num):\n    '''\n    Write a function to remove a given number of characters from a string.\n    '''\n    if num < 0:\n        text = text[num:]\n        return text\n    else:\n        text = text[:num]\n        return text\ndef replace_with_number(text, num):\n    '''\n    Write a function to replace all occurrences of non-digit characters in a string with the given number.\n    '''\n    number = \"0123456789\"\n    replace_with_number = \"\"\n    for character in text:\n        if character in number:\n            replace_with_number = replace_with_number + character\n        else:\n            replace_with_number = replace_with_number + num\n    return replace_with_number\ndef find_factors(num):\n    '''\n    Write a function to return all factors of a given number.\n    '''\n    factors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\ndef find_fibonacci(num):\n    '''\n    Write a function that returns the `n`th number in the fibonacci series (starting with zero index).\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return find_fibonacci(num - 1) + find_fibonacci(num - 2)\ndef remove_duplicates(arr):\n    '''\n    Write a function to remove all duplicate items from a list.\n    '''\n    arr = list(dict.fromkeys(arr))\n    return arr\ndef remove_first_and_last(arr):\n    '''\n    Write a function to remove the first and last items of a list.\n    '''\n    del arr[0]\n    del arr[-1]\n    return arr\ndef max_min_avg(arr):\n    '''\n    Write a function to find the maximum, minimum and average of a list.\n    '''\n    maximum = max(arr)\n    minimum = min(arr)\n    total = 0\n    for x in arr:\n        total += x\n    average = total / len(arr)\n    return [maximum, minimum, average]\ndef find_common(arr1, arr2):\n    '''\n    Write a function to find common items between two lists.\n    '''\n    common = []\n    for item in arr1:\n        if item in arr2:\n            common.append(item)\n    return common\ndef reverse_string(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    return text[::-1]\ndef find_quadruplets(arr, sum):\n    '''\n    Write a function to find the number of quadruplets in an array that sum to a certain value.\n    '''\n    quadruplets = []\n    for i in range(len(arr) - 3):\n        for j in range(i + 1, len(arr) - 2):\n            for k in range(j + 1, len(arr) - 1):\n                for l in range(k + 1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == sum:\n                        quadruplets.append([arr[i], arr[j], arr[k], arr[l]])\n    return quadruplets\ndef find_largest_word(text):\n    '''\n    Write a function to find the longest word in a text.\n    '''\n    words = text.split()\n    longest = \"\"\n    for word in words:\n        if len(word) > len(longest):\n            longest "
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    space =''\n    if space not in text:\n        return text\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x==y and x==z:\n        count += 1\n    elif y==z:\n        count += 1\n    else:\n        count += 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y or y == z or x == z:\n        counter += 1\n    if x == y or x == z or y == z:\n        counter += 1\n    if x == y or x == z or z == y:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if (i+j+k) == x:\n                    count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in [x,y,z]:\n        for j in [x,y,z]:\n            for k in [x,y,z]:\n                if i == j == k:\n                    count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count +=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if(x==y):\n        if(y==z):\n            count=3\n        else:\n            count=2\n    elif(x==z):\n        if(y==z):\n            count=3\n        else:\n            count=2\n    elif(y==z):\n        if(x==z):\n            count=3\n        else:\n            count=2\n    else:\n        count=0\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print(3)\n    elif x == y or y == z or z == x:\n        print(2)\n    else:\n        print(0)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    arr.sort()\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        return 0\n    if arr[0] < arr[-1]:\n        return -1\n    n = 1\n    while n < l:\n        if arr[n] < arr[n-1]:\n            return n\n        n += 1\n    return -1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    cnt = 0\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        if arr[low] <= arr[high]:\n            break\n        mid = (low + high)//2\n        next_low = (mid + 1)%len(arr)\n        prev_high = (high - 1 + len(arr))%len(arr)\n        if arr[mid] <= arr[next_low] and arr[mid] <= arr[prev_high]:\n            return cnt\n        if arr[mid] >= arr[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n        cnt += 1\n    return cnt\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # print(arr)\n    n=len(arr)\n    i = 0\n    for j in range(0, n):\n        if (arr[j] < arr[i]):\n            i = j\n    return (i)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # brute force, O(N^2)\n    rotations = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                rotations += 1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    low,high=0,n-1\n    while low<=high:\n        mid=low+(high-low)//2\n        if arr[mid]<arr[mid-1]:\n            return mid\n        elif arr[mid]<arr[high]:\n            high=mid-1\n        else:\n            low=mid+1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n):\n        if (arr[i] >= arr[i+1]):\n            break\n    if i == n-1:\n        return 0\n    else:\n        count = n - i - 1\n        return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    i = 0\n    while (i < n-1):\n        if arr[i] > arr[i+1]:\n            break\n        i += 1\n    if i == 0:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    print(\"Write a python function to count the number of rotations required to generate a sorted array.\")\n    n=len(arr)\n    low=0\n    high=n-1\n    count=0\n    while(low<high):\n        mid=(low+high)//2\n        if(arr[mid]>arr[mid+1]):\n            high=mid\n            count+=1\n        elif(arr[mid]<arr[mid+1]):\n            low=mid\n            count+=1\n        elif(arr[mid]==arr[mid+1]):\n            high=mid\n            count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[start] <= arr[mid] and arr[mid] <= arr[end]:\n            return mid\n        elif arr[mid] > arr[end]:\n            start = mid + 1\n        elif arr[mid] < arr[start]:\n            end = mid - 1\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # let's check if n is in range [0,1,4,9,16,...]\n    if (n > 0) and ((n & (n - 1)) == 0): # if n is a power of 2\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n // 2\n    while x * x > n :\n        x = (x + (n // x)) // 2\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if x <= 1:\n        return True\n    s = int(x/2)\n    for i in range(s):\n        if ((x % 2) == 0):\n            return False\n        x = x - 1\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    \n    low = 1\n    high = n//2\n    \n    while low <= high:\n        mid = low + (high - low)//2\n        if (mid*mid == n):\n            return True\n        elif (mid*mid < n):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n    \n    \ndef is_perfect_square_binary_search(n) :\n    '''\n    Binary search.\n    '''\n    if n < 0:\n        return False\n    \n    low = 1\n    high = n\n    \n    while low <= high:\n        mid = low + (high - low)//2\n        if (mid*mid == n):\n            return True\n        elif (mid*mid < n):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    # Check if x is even.\n    # If yes, then n cannot be a prime\n    if (x % 2 == 0) :\n         return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n; \n    if (x == 1) :\n        return True;\n    while (x % 2 == 0) : \n        x = x / 2; \n    \n    for i in range(3,int(math.sqrt(x))+1,2) :\n        \n        if (x % i == 0) :\n            return False;\n    return True;\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # The is_perfect_square() function returns true if the passed number is a perfect square otherwise it returns false.\n    # # If n is not a perfect square then n < 0, if n is not less than zero then it is not a perfect square.\n    # # To check if n is a perfect square, we need to find the square root of n.\n    # # Square root of a number can be found using the sqrt() function of the math module.\n    #\n    # import math\n    #\n    # # Let us first take a look at the different ways to compute the square root of n.\n    # print(math.sqrt(n))\n    # print(math.sqrt(n) + 1)\n    # print(math.sqrt(n) - 1)\n    #\n    # # Note that in each case the square root of n is rounded off to a number which is the greatest possible divisor of n.\n    # # The number which is to the left of the decimal point is considered to be the greatest possible divisor of n.\n    #\n    # # The sqrt() function is not recommended for use by Python.\n    #\n    # # The math.sqrt() function is safe for square roots of negative numbers.\n    #\n    # # In the following example, if n = -100, the square root of -100 is equal to -5.93219511820585.\n    # # The reason being that the decimal part (the 4th part) of the solution is an irrational number.\n    # # However, if we run this program, the output will be 0.0.\n    # # The output shows that the decimal part of the solution is equal to 0.0.\n    #\n    # print(math.sqrt(n))\n    #\n    # # The below function returns true if the number passed is a perfect square and false if it is not a perfect square.\n    # # If n is not less than zero, the function also returns false.\n    #\n    # # n = 17\n    # #\n    # # The logic behind this solution is as follows:\n    # # 1. Take the absolute value of the number.\n    # # 2. Find the square root of the absolute value of the number\n    # # 3. If the square root of the absolute value of the number is an integer, then the number passed is a perfect square.\n    # # 4. If the square root of the absolute value of the number is not an integer, then the number passed is not a perfect square.\n    #\n    # # This function has a complexity of O(sqrt(n))\n    #\n    # def is_perfect_square(n) :\n    #     '''\n    #     Returns true if n is a perfect square\n    #     '''\n    #     if abs(n) < 0 :\n    #         return False\n    #\n    #     x = round(math.sqrt(n))\n    #     return x * x == n\n    #\n    # print(is_perfect_square(81))\n    # print(is_perfect_square(5))\n    # print(is_perfect_square(12))\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    x = 1\n    while (x * x) < n:\n        x = x + 1\n    if (x * x) == n:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n; // Initialize result \n    \n    // Apply Babylonian square root algorithm \n    while (x * x > n)\n        x = (x + n / x) / 2; \n    \n    // Check for perfect square \n    return (x * x == n);\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n<0):\n        return False;\n    if(n==0 or n==1):\n        return True;\n    low=1;\n    high=n/2;\n    while(low<=high):\n        mid=low+(high-low)/2;\n        if(mid*mid==n):\n            return True;\n        elif(mid*mid<n):\n            low=mid+1;\n        else:\n            high=mid-1;\n    return False;\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n    \n    \ndef is_product_even2(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return 0 if len(arr) == 0 else reduce(lambda a,b: a*b, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for ele in arr: \n        prod *= ele\n    if prod % 2 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        product = 1\n        for j in range(len(arr)):\n            if (i == j):\n                continue\n            product = product * arr[j]\n        if (product % 2 == 0):\n            return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    res = False\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    if prod%2==0:\n        res = True\n    return res\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_of_lists = []\n    for l in lists:\n        l.sort(reverse=True)\n        list_of_lists.append(l)\n    largest_sum = sum(list_of_lists[0])\n    largest_list = list_of_lists[0]\n    for i in list_of_lists:\n        if sum(i) > largest_sum:\n            largest_sum = sum(i)\n            largest_list = i\n    return largest_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=lambda l: sum(l))\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    max_sum = 0\n    for l in lists:\n        current_sum = 0\n        for n in l:\n            current_sum += n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = l\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max([sum(x) for x in lists])\n    \n    \ndef to_weird_case(string):\n    '''\n    Write a function that returns a weird case version of a string.\n    '''\n    return \"\".join([x.lower() if i % 2 == 0 else x.upper() for i,x in enumerate(string)])\n    \n    \ndef find_short(s):\n    '''\n    Write a function that returns the length of the shortest word in a sentence.\n    '''\n    return min([len(word) for word in s.split()])\n    \n    \ndef create_matrix(rows, cols, val):\n    '''\n    Write a function that creates a matrix.\n    '''\n    return [[val for x in range(cols)] for y in range(rows)]\n    \n    \ndef snail_sums(arr):\n    '''\n    Write a function that returns an array of the sums of the snail's path.\n    '''\n    return sum([sum(arr[i]) for i in range(len(arr))])\n    \n    \ndef matrix_bombing_plan(matrix):\n    '''\n    Write a function that returns a dictionary of (row, column) pairs with each \n    pair having a value of the product of all the elements in that row and column.\n    '''\n    d = {}\n    for row in range(len(matrix)):\n        for col in range(len(matrix[row])):\n            d[(row, col)] = matrix[row][col] * \\\n            sum([matrix[row][j] for j in range(len(matrix[row]))]) * \\\n            sum([matrix[i][col] for i in range(len(matrix))])\n    return d\n    \n    \ndef split_sentence(s, words):\n    '''\n    Write a function that returns a list of all possible sentence fragments that can be \n    made by splitting the string s into words.\n    '''\n    return [s[i:j] for i in range(len(s)+1) for j in range(i+1, len(s)+1)]\n    \n    \ndef find_uniq(arr):\n    '''\n    Write a function that returns the first non-repeated character in an array of \n    strings. If there is no unique character, return an empty string.\n    '''\n    s = \"\".join(arr)\n    return \"\".join([x for x in set(s) if s.count(x) == 1])\n    \n    \ndef find_uniq_sort(arr):\n    '''\n    Write a function that returns the first non-repeated character in an array of \n    strings in ascending order of their lengths. If there is no unique character, \n    return an empty string.\n    '''\n    return sorted(arr, key=len)[0]\n    \n    \ndef decode_morse(code):\n    '''\n    Write a function that takes in an array of strings, each corresponding to a \n    morse code of a letter, and returns a string with all the letters in the array \n    replaced by their corresponding morse code.\n    '''\n    morse = {'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.',\n    'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--',\n    'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-',\n    'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '.':'.-.-.-',\n    ',':'--..--', '?':'..--..', '/':'-..-.', '-':'-....-', '1':'.----', '2':'..---',\n    '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..',\n    '9':'----.', '0':'-----','':' '}\n    return ''.join([morse[x] for x in code])\n    \n    \ndef count_chars(s):\n    '''\n    Write a function that takes in a string s and returns a dictionary with the \n    key as each character and the value as the number of times it appears in the string.\n    '''\n    d = {}\n    for c in s:\n        d[c] = d.get(c, 0) + 1\n    return d\n    \n    \ndef is_isogram(string):\n    '''\n    Write a function that returns True if a string is an isogram, otherwise False.\n    '''\n    return len(count_chars(string)) == len(set(string))\n    \n    \ndef is_isogram_2(string):\n    '''\n    Write a function that returns True if a string is an isogram, otherwise False.\n    '''\n    return len(string) == len(set(string.lower()))\n    \n    \ndef has_duplicates(arr):\n    '''\n    Write a function that returns True if an array contains any duplicate values, \n    otherwise False.\n    '''\n    return len(arr)!= len(set(arr))\n    \n    \ndef has_duplicates_2(arr):\n    '''\n    Write a function that returns True if an array contains any duplicate values, \n    otherwise False.\n    '''\n    return len(arr)!= len(set(arr))\n    \n    \ndef find_missing_letter(chars):\n    '''\n    Write a function that takes a string of letters and returns a character that \n    is not in the string.\n    '''\n    s = \"\".join(chars)\n    return [x for x in set(string.ascii_lowercase) if x not in s][0]\n    \n    \ndef find_missing_letter_2(chars):\n    '''\n    Write a function that takes a string of letters and returns a character that \n    is not in the string.\n    '''\n    return [x for x in set(string.ascii_lowercase) if x not in chars][0]\n    \n    \ndef solve(s):\n    '''\n    Write a function that takes in a string and returns a list of strings that can \n    be created by reversing the letters in the string.\n    '''\n    return [x for x in s[::-1]]\n    \n    \ndef string_compression(s):\n    '''\n    Write a function that takes in a string and returns a compressed string using the \n    run-length encoding algorithm.\n    '''\n    return \"\".join([str(len(list(group))) + letter for letter, group in itertools.groupby(s)])\n    \n    \ndef get_corr_index(mat):\n    '''\n    Write a function that takes in a matrix and returns the index of the row \n    containing the largest sum of elements.\n    '''\n    return mat.index(max(mat, key=sum))\n    \n    \ndef count_primes(num):\n    '''\n    Write a function that returns the number of prime numbers that are less than or \n    equal to a given number.\n    '''\n    primes = [2]\n    x = 3\n    if num < 2:\n        return 0\n    while x <= num:\n        for y in primes:\n            if x % y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    return len(primes)\n    \n    \ndef count_primes_s(num):\n    '''\n    Write a function that returns the number of prime numbers that are less than or \n    equal to a given number.\n    '''\n    return len([x for x in range(2, num) if num % x == 0])\n    \n    \ndef is_pangram(s):\n    '''\n    Write a function that takes in a string and returns a boolean value representing \n    whether or not the string is a pangram."
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return None\n    max_sum = sum(lists[0])\n    max_sum_list = lists[0]\n    for sublist in lists:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            max_sum_list = sublist\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return None\n    elif len(lists) == 1:\n        return lists[0]\n    else:\n        return max_sum_list([[sum(elem)] for elem in lists] + max_sum_list(lists[1:]),)\n    \ndef max_sum_of_columns(matrix):\n    '''\n    Write a function that returns the list in a matrix whose sum of elements is the highest.\n    '''\n    if len(matrix) == 0:\n        return None\n    else:\n        return max_sum_list([matrix[i][j] for j in range(len(matrix[0])) for i in range(len(matrix))])\n    \ndef sum_of_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return sum(lists, [])\n    \ndef max_sum_of_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, [])\n    \ndef max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return None\n    elif len(lists) == 1:\n        return lists[0]\n    else:\n        return max_sum_list([[sum(elem)] for elem in lists] + max_sum_list(lists[1:]),)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    for list_ in lists:\n        sum_ = 0\n        for elt in list_:\n            sum_ += elt\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_list = list_\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    for x in lists:\n        sum_of_list = sum(x)\n        if sum_of_list > max_sum:\n            max_sum = sum_of_list\n            max_list = x\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    result = list()\n    \n    for i in range(len(lists)):\n        if max(lists[i]) == sum(lists[i]):\n            result.append(lists[i])\n        else:\n            pass\n            \n    if len(result) == 0:\n        print('The list with the highest sum of elements is not in the list')\n    else:\n        return result\n        \n        \n        \n        \ndef max_sum_list_not_in_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest, but it does not appear in the list of lists.\n    '''\n    \n    result = list()\n    \n    for i in range(len(lists)):\n        if max(lists[i]) == sum(lists[i]):\n            result.append(lists[i])\n        else:\n            pass\n            \n    if len(result) == 0:\n        print('The list with the highest sum of elements is not in the list')\n    else:\n        return result\n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    "
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    high_sum = 0\n    high_list = None\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 0\n    for i in range(1, len(test_str)):\n        if(test_str[i].isupper() and test_str[i-1].isupper()):\n            count = count + 1\n        else:\n            count = 1\n        if(count > max_count):\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    current_count = 0\n    for i in test_str:\n        if i.isupper():\n            current_count += 1\n            if current_count > max_count:\n                max_count = current_count\n        else:\n            current_count = 0\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    for index, char in enumerate(test_str):\n        count = 0\n        for i in test_str[index:]:\n            if i.isupper():\n                count += 1\n            else:\n                break\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #check if input is valid\n    if not isinstance(test_str, str):\n        raise TypeError(\"Invalid input\")\n    #if empty string return 0\n    if len(test_str) == 0:\n        return 0\n    #store the current maximum\n    cur_max = 0\n    #cur_run is the current run of uppercase characters\n    cur_run = 0\n    #iterate through the string\n    for char in test_str:\n        #check if it is an uppercase character\n        if char.isupper():\n            #increment the current run\n            cur_run += 1\n            #if the current run is greater than the current max, set current max to cur_run\n            if cur_run > cur_max:\n                cur_max = cur_run\n        #if not uppercase, reset the cur_run and increment cur_run\n        else:\n            cur_run = 0\n    return cur_max\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    cur_run = 0\n    for i in range(len(test_str)):\n        cur_char = test_str[i]\n        if cur_char.isupper():\n            cur_run += 1\n        else:\n            cur_run = 0\n        if cur_run > max_run:\n            max_run = cur_run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = str(test_str)\n    max_count = 0\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count +=1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    else:\n        max_count = 0\n        count = 0\n        for i in test_str:\n            if i.isupper():\n                count += 1\n            else:\n                count = 0\n            if count > max_count:\n                max_count = count\n        return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = test_str.lower()\n    max_run = 0\n    curr_run = 0\n    prev = None\n    for char in test_str:\n        if char == prev:\n            curr_run += 1\n        else:\n            if prev is not None:\n                if curr_run > max_run:\n                    max_run = curr_run\n                curr_run = 1\n            prev = char\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n            \n            \ndef largest_number(nums):\n    '''\n    Write a python function to find the largest number in a given list of numbers.\n    '''\n    return max(nums)\n        \n        \ndef smallest_number(nums):\n    '''\n    Write a python function to find the smallest number in a given list of numbers.\n    '''\n    return min(nums)\n    \n    \ndef is_prime(nums):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    nums.sort()\n    if nums[0] == 1:\n        return False\n    elif nums[0] == 2:\n        return True\n    for i in range(2,nums[-1]):\n        if nums[0]%i == 0:\n            return False\n    return True\n    \n    \ndef is_even(nums):\n    '''\n    Write a python function to check whether a given number is even or not.\n    '''\n    if nums%2 == 0:\n        return True\n    else:\n        return False\n        \n    \ndef factorial(nums):\n    '''\n    Write a python function to return the factorial of a given number.\n    '''\n    nums = int(nums)\n    if nums == 1:\n        return nums\n    else:\n        return nums*factorial(nums-1)\n        \n    \ndef is_palindrome(nums):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    Palindrome - a string which reads the same backward as forward.\n    '''\n    nums = str(nums)\n    if nums == nums[::-1]:\n        return True\n    else:\n        return False\n        \n        \ndef is_power(nums1,nums2):\n    '''\n    Write a python function to check whether a given number is a power of a given base.\n    '''\n    if nums1/nums2 == nums1/nums2:\n        return True\n    else:\n        return False\n    \n    \ndef remove_duplicates(nums):\n    '''\n    Write a python function to remove duplicates from a given list of numbers.\n    '''\n    return list(set(nums))\n    \n    \ndef remove_element(nums,nums1):\n    '''\n    Write a python function to remove a given element from a list of numbers.\n    '''\n    if nums.count(nums1) > 0:\n        return list(filter((nums1).__ne__,nums))\n    else:\n        return nums\n        \n        \ndef sum_all(nums):\n    '''\n    Write a python function to sum all the elements of a given list of numbers.\n    '''\n    return sum(nums)\n    \n    \ndef find_missing_number(nums):\n    '''\n    Write a python function to find the missing number from a given list of numbers.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if i+1!= nums[i]:\n            return i+1\n    \n    \ndef find_missing_number_xor(nums):\n    '''\n    Write a python function to find the missing number from a given list of numbers using XOR.\n    '''\n    x = nums[0]\n    for i in range(1,len(nums)):\n        x = x^nums[i]\n    return x\n    \n    \ndef find_missing_number_sum(nums):\n    '''\n    Write a python function to find the missing number from a given list of numbers using the sum of the list.\n    '''\n    num = 0\n    for i in nums:\n        num = num + i\n    num = num + 1\n    return num\n    \n    \ndef reverse(nums):\n    '''\n    Write a python function to reverse a given list of numbers.\n    '''\n    return list(reversed(nums))\n    \n    \ndef rotate_array(nums,n):\n    '''\n    Write a python function to rotate a given list of numbers to the left by n places.\n    '''\n    return nums[n:] + nums[:n]\n    \n    \ndef get_pairs_with_given_difference(nums,n):\n    '''\n    Write a python function to return the pairs of numbers from a given list of numbers whose difference is equal to a given number.\n    '''\n    dic = {}\n    for i in nums:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return [[i,i+n] for i in dic if i+n in dic]\n        \n        \ndef find_minimum_and_maximum_in_a_list(nums):\n    '''\n    Write a python function to find minimum and maximum number from a given list of numbers.\n    '''\n    return min(nums),max(nums)\n    \n    \ndef append_n_times(nums,n):\n    '''\n    Write a python function to append n times the value to the given list of numbers.\n    '''\n    for i in range(n):\n        nums.append(n)\n    return nums\n    \n    \ndef check_if_list_is_sorted(nums):\n    '''\n    Write a python function to check whether a given list of numbers is sorted or not.\n    '''\n    return nums == sorted(nums)\n    \n    \ndef remove_nth_occurence(nums,n):\n    '''\n    Write a python function to remove the nth occurence of a given element from a given list of numbers.\n    '''\n    nums.remove(nums[n])\n    return nums\n    \n    \ndef product_of_all_other_numbers(nums):\n    '''\n    Write a python function to return the product of all the elements of a given list of numbers except the first and last element.\n    '''\n    nums = list(map(int,nums))\n    product = nums[0]\n    for i in range(1,len(nums)-1):\n        product = product*nums[i]\n    return product\n    \n    \ndef find_missing_number_sum_without_extra_space(nums):\n    '''\n    Write a python function to find the missing number from a given list of numbers using the sum of the list.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if i+1!= nums[i]:\n            return i+1\n            \n            \ndef find_missing_number_sum_without_extra_space_xor(nums):\n    '''\n    Write a python function to find the missing number from a given list of numbers using the XOR of the list.\n    '''\n    x = nums[0]\n    for i in range(1,len(nums)):\n        x = x^nums[i]\n    return x\n    \n    \ndef find_missing_number_sum_without_extra_space_2(nums):\n    '''\n    Write a python function to find the missing number from a given list of numbers using the sum of the list.\n    '''\n    num = 0\n    for i in nums:\n        num = num + i\n    num = num + 1\n    return num\n    \n    \ndef find_missing_number_sum_without_extra_space_3(nums):\n    '''\n    Write a python function to find the missing number from a given list of numbers using the XOR of the list.\n    '''\n    x = nums[0]\n    for i in range(1,len(nums)):\n        x = x^nums[i]\n    return x\n    \n    \ndef rotate_list_left(nums,n):\n    '''\n    Write a python function to rotate a given list of numbers to the left by n places.\n    '''\n    return nums[n:] + nums[:n]\n    \n    \ndef remove_element_by_swapping(nums,num"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #start writing your code here\n    for i in nums:\n        if i%2==1:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            continue\n        else:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if type(nums) is not list:\n        return -1\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # for num in nums:\n    #     if num % 2!= 0:\n    #         return num\n    # return \"No odd numbers found\"\n    # return next(num for num in nums if num % 2!= 0)\n    return next((num for num in nums if num % 2!= 0), \"No odd numbers found\")\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n        else:\n            continue\n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return -1\n    \ndef largest_palindrome(n):\n    '''\n    Write a Python function to find the largest palindrome made from the product of two n-digit numbers.\n    '''\n    max_num = 10**n - 1\n    max_num_reverse = int(str(max_num)[::-1])\n    \n    palindromes = []\n    for i in range(max_num, max_num_reverse, -1):\n        for j in range(max_num, max_num_reverse, -1):\n            number = i * j\n            if number == int(str(number)[::-1]):\n                palindromes.append(number)\n    \n    return max(palindromes)\n    \ndef nth_power(b, n):\n    '''\n    Write a Python function to calculate the value of b to the nth power.\n    '''\n    if n == 0:\n        return 1\n    return b * nth_power(b, n - 1)\n    \ndef sum_of_squares(n):\n    '''\n    Write a Python function to calculate the sum of squares of numbers from 1 to n.\n    '''\n    if n == 0:\n        return 0\n    return n ** 2 + sum_of_squares(n-1)\n    \ndef is_prime(n):\n    '''\n    Write a Python function to check whether a given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef nth_prime(n):\n    '''\n    Write a Python function to return the nth prime number.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 2\n    i = 1\n    nth = 1\n    while nth < n:\n        i += 1\n        if is_prime(i):\n            nth += 1\n    return i\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print(\"in check K\")\n    print(\"K is:\",K)\n    #print(\"test_tup is:\",test_tup)\n    #print(\"length of test_tup is:\",len(test_tup))\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print(test_tup, K)\n    # Your code here\n    if len(test_tup) == K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check = False\n    for x,y in K:\n        if x == test_tup[0] and y == test_tup[1]:\n            check = True\n    return check\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0]>=K or test_tup[1]>=K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #pass\n    K_tuple = test_tup[K - 1]\n    if K_tuple in test_tup:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for elem in test_tup:\n        if elem[0] == K:\n            return elem[1]\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # YOUR CODE HERE\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n        \ndef find_K_sum(list_of_tuples, K):\n    '''\n    Write a function that finds the smallest number of a list of tuples \n    that contain the given k.\n    '''\n    # YOUR CODE HERE\n    for test_tup in list_of_tuples:\n        if check_K(test_tup, K):\n            return test_tup\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # return False if tuple does not contain k\n    for item in test_tup:\n        if item[0]!= K:\n            return False\n    return True\n    \ndef all_tuples_with_k(n,k):\n    '''\n    Write a function that generates all the tuples with k as the first element.\n    '''\n    # in order to generate all the tuples of size n, use combinatorics.\n    # if n == 1, there is only 1 tuple, [k]\n    # if n == 2, there are 2 tuples, [k, k] and [k, k + 1]\n    # if n == 3, there are 3 tuples, [k, k, k], [k, k, k + 1], [k, k, k + 2] and [k, k + 1, k + 1]\n    # if n == 4, there are 5 tuples, [k, k, k, k], [k, k, k, k + 1], [k, k, k, k + 2], [k, k, k, k + 3] and [k, k, k + 1, k + 1]\n    # and so on\n    # (you can only add the next element to the front of a tuple)\n    \n    # To generate all tuples of a given size, use itertools.product\n    # The following code generates all tuples of size 3.\n    import itertools\n    tuples = itertools.product(range(k), repeat = n)\n    #print(list(tuples))\n    \n    # using list comprehension, this is equivalent to the above.\n    # tuples = [tuple(range(k)) for x in range(n)]\n    return list(tuples)\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tuple_ in K:\n        if test_tup[0] == tuple_[0] and test_tup[1] == tuple_[1]:\n            return tuple_\n    return 0\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n        elif test_tup2[i] > test_tup1[i]:\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    flag = False\n    if len(test_tup1)!= len(test_tup2):\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    \n    is_smaller = []\n    for i in range(len(tup1)):\n        if tup1[i] < tup2[i]:\n            is_smaller.append(True)\n        else:\n            is_smaller.append(False)\n    return tuple(is_smaller)\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if test_tup1[1] < test_tup2[1]:\n        return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup2[i] < test_tup1[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]:\n    #    return True\n    #return False\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]:\n        return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    if test_tup1[0] < test_tup2[0]:\n        return False\n    if test_tup1[1] > test_tup2[1]:\n        return True\n    if test_tup1[1] < test_tup2[1]:\n        return False\n    if test_tup1[2] > test_tup2[2]:\n        return True\n    if test_tup1[2] < test_tup2[2]:\n        return False\n    if test_tup1[3] > test_tup2[3]:\n        return True\n    if test_tup1[3] < test_tup2[3]:\n        return False\n    if test_tup1[4] > test_tup2[4]:\n        return True\n    if test_tup1[4] < test_tup2[4]:\n        return False\n    if test_tup1[5] > test_tup2[5]:\n        return True\n    if test_tup1[5] < test_tup2[5]:\n        return False\n    if test_tup1[6] > test_tup2[6]:\n        return True\n    if test_tup1[6] < test_tup2[6]:\n        return False\n    if test_tup1[7] > test_tup2[7]:\n        return True\n    if test_tup1[7] < test_tup2[7]:\n        return False\n    if test_tup1[8] > test_tup2[8]:\n        return True\n    if test_tup1[8] < test_tup2[8]:\n        return False\n    if test_tup1[9] > test_tup2[9]:\n        return True\n    if test_tup1[9] < test_tup2[9]:\n        return False\n    if test_tup1[10] > test_tup2[10]:\n        return True\n    if test_tup1[10] < test_tup2[10]:\n        return False\n    if test_tup1[11] > test_tup2[11]:\n        return True\n    if test_tup1[11] < test_tup2[11]:\n        return False\n    if test_tup1[12] > test_tup2[12]:\n        return True\n    if test_tup1[12] < test_tup2[12]:\n        return False\n    if test_tup1[13] > test_tup2[13]:\n        return True\n    if test_tup1[13] < test_tup2[13]:\n        return False\n    if test_tup1[14] > test_tup2[14]:\n        return True\n    if test_tup1[14] < test_tup2[14]:\n        return False\n    if test_tup1[15] > test_tup2[15]:\n        return True\n    if test_tup1[15] < test_tup2[15]:\n        return False\n    if test_tup1[16] > test_tup2[16]:\n        return True\n    if test_tup1[16] < test_tup2[16]:\n        return False\n    if test_tup1[17] > test_tup2[17]:\n        return True\n    if test_tup1[17] < test_tup2[17]:\n        return False\n    if test_tup1[18] > test_tup2[18]:\n        return True\n    if test_tup1[18] < test_tup2[18]:\n        return False\n    if test_tup1[19] > test_tup2[19]:\n        return True\n    if test_tup1[19] < test_tup2[19]:\n        return False\n    if test_tup1[20] > test_tup2[20]:\n        return True\n    if test_tup1[20] < test_tup2[20]:\n        return False\n    if test_tup1[21] > test_tup2[21]:\n        return True\n    if test_tup1[21] < test_tup2[21]:\n        return False\n    if test_tup1[22] > test_tup2[22]:\n        return True\n    if test_tup1[22] < test_tup2[22]:\n        return False\n    if test_tup1[23] > test_tup2[23]:\n        return True\n    if test_tup1[23] < test_tup2[23]:\n        return False\n    if test_tup1[24] > test_tup2[24]:\n        return True\n    if test_tup1[24] < test_tup2[24]:\n        return False\n    if test_tup1[25] > test_tup2[25]:\n        return True\n    if test_tup1[25] < test_tup2[25]:\n        return False\n    if test_tup1[26] > test_tup2[26]:\n        return True\n    if test_tup1[26] < test_tup2[26]:\n        return False\n    if test_tup1[27] > test_tup2[27]:\n        return True\n    if test_tup1[27] < test_tup2[27]:\n        return False\n    if test_tup1[28] > test_tup2[28]:\n        return True\n    if test_tup1[28] < test_tup2[28]:\n        return False\n    if test_tup1[29] > test_tup2[29]:\n        return True\n    if test_tup1[29] < test_tup2[29]:\n        return False\n    if test_tup1[30] > test_tup2[30]:\n        return True\n    if test_tup1[30] < test_tup2[30]:\n        return False\n    if test_tup1[31] > test_tup2[31]:\n        return True\n    if test_tup1[31] < test_tup2[31]:\n        return False\n    if test_tup1[32] > test_tup2[32]:\n        return True\n    if test_tup1[32] < test_tup2[32]:\n        return False\n    if test_tup1[33] > test_tup2[33]:\n        return True\n    if test_tup1[33] < test_tup2[33]:\n        return False\n    if test_tup1[34] > test_tup2[34]:\n        return True\n    if test_tup1[34] < test_tup2[34]:\n        return False\n    if test_tup1[35] > test_tup2[35]:\n        return True\n    if test_tup1[35] < test_tup2[35]:\n        return False\n    if test_tup1[36] > test_tup2[36]:\n        return True\n    if test_tup1[36] < test_tup2[36]:\n        return False\n    if test_tup1[37] > test_tup2[37]:\n        return True\n    if test_tup1[37] < test_tup2[37]:\n        return False\n    if test_tup1[38] > test_tup2[38]:\n        return True\n    if test_tup1[38] < test_tup2[38]:\n        return False\n    if test_tup1[39] > test_tup2[39]:\n        return True\n    if test_tup1[39] < test_tup2[39]:\n        return False\n    if test_tup1[40] > test_tup2[40]:\n        return True\n    if test_tup1[40] < test_tup2[40]:\n        return False\n    if test_tup1[41] > test_tup2[41]:\n        return True\n    if test_"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    output = True\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup1 > tup2:\n            output = False\n    return output\n"
    }
]