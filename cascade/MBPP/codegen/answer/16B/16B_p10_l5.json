[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result_tup = ()\n    if len(test_tup1) < len(test_tup2):\n        result_tup = compare_elements(test_tup2, test_tup1)\n    elif len(test_tup2) < len(test_tup1):\n        result_tup = compare_elements(test_tup1, test_tup2)\n    else:\n        result_tup = compare_elements(test_tup1, test_tup2)\n    return result_tup\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [e for e in test_tup1 if e in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    return tuple1[0] in tuple2 or tuple1[1] in tuple2 or tuple1[2] in tuple2\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_dict1 = {}\n    test_dict2 = {}\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_dict1:\n            test_dict1[test_tup1[i]] += 1\n        else:\n            test_dict1[test_tup1[i]] = 1\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return sorted(list(set(test_tup1) & set(test_tup2)))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # need to loop through list and compare each element\n    shared_elements = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j and i not in shared_elements:\n                shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #print('[DEBUG] in similar_elements()')\n    print('[DEBUG] in similar_elements()')\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n==2:\n        return False\n    elif n==3:\n        return False\n    elif n==4:\n        return False\n    elif n==5:\n        return False\n    elif n==6:\n        return False\n    elif n==7:\n        return False\n    elif n==8:\n        return False\n    elif n==9:\n        return False\n    elif n==10:\n        return False\n    elif n==11:\n        return False\n    elif n==12:\n        return False\n    elif n==13:\n        return False\n    elif n==14:\n        return False\n    elif n==15:\n        return False\n    elif n==16:\n        return False\n    elif n==17:\n        return False\n    elif n==18:\n        return False\n    elif n==19:\n        return False\n    elif n==20:\n        return False\n    elif n==21:\n        return False\n    elif n==22:\n        return False\n    elif n==23:\n        return False\n    elif n==24:\n        return False\n    elif n==25:\n        return False\n    elif n==26:\n        return False\n    elif n==27:\n        return False\n    elif n==28:\n        return False\n    elif n==29:\n        return False\n    elif n==30:\n        return False\n    elif n==31:\n        return False\n    elif n==32:\n        return False\n    elif n==33:\n        return False\n    elif n==34:\n        return False\n    elif n==35:\n        return False\n    elif n==36:\n        return False\n    elif n==37:\n        return False\n    elif n==38:\n        return False\n    elif n==39:\n        return False\n    elif n==40:\n        return False\n    elif n==41:\n        return False\n    elif n==42:\n        return False\n    elif n==43:\n        return False\n    elif n==44:\n        return False\n    elif n==45:\n        return False\n    elif n==46:\n        return False\n    elif n==47:\n        return False\n    elif n==48:\n        return False\n    elif n==49:\n        return False\n    elif n==50:\n        return False\n    elif n==51:\n        return False\n    elif n==52:\n        return False\n    elif n==53:\n        return False\n    elif n==54:\n        return False\n    elif n==55:\n        return False\n    elif n==56:\n        return False\n    elif n==57:\n        return False\n    elif n==58:\n        return False\n    elif n==59:\n        return False\n    elif n==60:\n        return False\n    elif n==61:\n        return False\n    elif n==62:\n        return False\n    elif n==63:\n        return False\n    elif n==64:\n        return False\n    elif n==65:\n        return False\n    elif n==66:\n        return False\n    elif n==67:\n        return False\n    elif n==68:\n        return False\n    elif n==69:\n        return False\n    elif n==70:\n        return False\n    elif n==71:\n        return False\n    elif n==72:\n        return False\n    elif n==73:\n        return False\n    elif n==74:\n        return False\n    elif n==75:\n        return False\n    elif n==76:\n        return False\n    elif n==77:\n        return False\n    elif n==78:\n        return False\n    elif n==79:\n        return False\n    elif n==80:\n        return False\n    elif n==81:\n        return False\n    elif n==82:\n        return False\n    elif n==83:\n        return False\n    elif n==84:\n        return False\n    elif n==85:\n        return False\n    elif n==86:\n        return False\n    elif n==87:\n        return False\n    elif n==88:\n        return False\n    elif n==89:\n        return False\n    elif n==90:\n        return False\n    elif n==91:\n        return False\n    elif n==92:\n        return False\n    elif n==93:\n        return False\n    elif n==94:\n        return False\n    elif n==95:\n        return False\n    elif n==96:\n        return False\n    elif n==97:\n        return False\n    elif n==98:\n        return False\n    elif n==99:\n        return False\n    elif n==100:\n        return False\n    elif n==101:\n        return False\n    elif n==102:\n        return False\n    elif n==103:\n        return False\n    elif n==104:\n        return False\n    elif n==105:\n        return False\n    elif n==106:\n        return False\n    elif n==107:\n        return False\n    elif n==108:\n        return False\n    elif n==109:\n        return False\n    elif n==110:\n        return False\n    elif n==111:\n        return False\n    elif n==112:\n        return False\n    elif n==113:\n        return False\n    elif n==114:\n        return False\n    elif n==115:\n        return False\n    elif n==116:\n        return False\n    elif n==117:\n        return False\n    elif n==118:\n        return False\n    elif n==119:\n        return False\n    elif n==120:\n        return False\n    elif n==121:\n        return False\n    elif n==122:\n        return False\n    elif n==123:\n        return False\n    elif n==124:\n        return False\n    elif n==125:\n        return False\n    elif n==126:\n        return False\n    elif n==127:\n        return False\n    elif n==128:\n        return False\n    elif n==129:\n        return False\n    elif n==130:\n        return False\n    elif n==131:\n        return False\n    elif n==132:\n        return False\n    elif n==133:\n        return False\n    elif n==134:\n        return False\n    elif n==135:\n        return False\n    elif n==136:\n        return False\n    elif n==137:\n        return False\n    elif n==138:\n        return False\n    elif n==139:\n        return False\n    elif n==140:\n        return False\n    elif n==141:\n        return False\n    elif n==142:\n        return False\n    elif n==143:\n        return False\n    elif n==144:\n        return False\n    elif n==145:\n        return False\n    elif n==146:\n        return False\n    elif n==147:\n        return False\n    elif n==148:\n        return False\n    elif n==149:\n        return False\n    elif n==150:\n        return False\n    elif n==151:\n        return False\n    elif n==152:\n        return False\n    elif n==153:\n        return False\n    elif n==154:\n        return False\n    elif n==155:\n        return False\n    elif n==156:\n        return False\n    elif n==157:\n        return False\n    elif n==158:\n        return False\n    elif n==159:\n        return False\n    elif n==160:\n        return False\n    elif n==161:\n        return False\n    elif n==162:\n        return False\n    elif n==163:\n        return False\n    elif n==164:\n        return False\n    elif n==165:\n        return False\n    elif n==166:\n        return False\n    elif n==167:\n        return False\n    elif n==168:\n        return Fals"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n < 2):\n        return True\n    if (n % 2 == 0):\n        return True\n    if (n == 3):\n        return False\n    if ((n % 6 == 1) or (n % 6 == 5)):\n        return True\n    if ((n % 3 == 0) or (n % 3 == 2)):\n        return True\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if (n % i == 0) or (n % (i + 2) == 0):\n            return True\n    return False\n    #code here\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    else:\n        for i in range(2,math.ceil(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n    pass\ndef get_primes(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    l=[]\n    for i in range(2,n+1):\n        if is_not_prime(i)==False:\n            l.append(i)\n    return l\n    pass\ndef get_prime_factors(n):\n    '''\n    Write a python function to identify prime factors of a number.\n    '''\n    l=[]\n    for i in range(2,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                l.append(i)\n    return l\n    pass\ndef get_number_of_factors(n):\n    '''\n    Write a python function to identify number of factors of a number.\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                l.append(i)\n    return len(l)\n    pass\ndef get_largest_prime_factor(n):\n    '''\n    Write a python function to identify largest prime factor of a number.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return i\n    return 1\n    pass\ndef get_smallest_prime_factor(n):\n    '''\n    Write a python function to identify smallest prime factor of a number.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return i\n    return 1\n    pass\ndef get_sum_of_all_factors(n):\n    '''\n    Write a python function to identify sum of all factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                sum+=i\n    return sum\n    pass\ndef get_sum_of_prime_factors(n):\n    '''\n    Write a python function to identify sum of prime factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                sum+=i\n    return sum\n    pass\ndef get_sum_of_all_prime_factors(n):\n    '''\n    Write a python function to identify sum of all prime factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                sum+=i\n    return sum\n    pass\ndef get_sum_of_all_prime_factors_except_prime_number(n):\n    '''\n    Write a python function to identify sum of all prime factors of a number except the number itself.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                sum+=i\n    return sum\n    pass\ndef get_greatest_product_of_prime_factors(n):\n    '''\n    Write a python function to identify the greatest product of prime factors of a number.\n    '''\n    product=1\n    for i in range(1,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                product*=i\n    return product\n    pass\ndef get_greatest_product_of_prime_factors_except_prime_number(n):\n    '''\n    Write a python function to identify the greatest product of prime factors of a number excluding the number itself.\n    '''\n    product=1\n    for i in range(1,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                product*=i\n    return product\n    pass\ndef get_least_product_of_prime_factors(n):\n    '''\n    Write a python function to identify the least product of prime factors of a number.\n    '''\n    product=1\n    for i in range(1,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                product*=i\n    return product\n    pass\ndef get_least_product_of_prime_factors_except_prime_number(n):\n    '''\n    Write a python function to identify the least product of prime factors of a number excluding the number itself.\n    '''\n    product=1\n    for i in range(1,n+1):\n        if is_not_prime(i)==False:\n            if n%i==0:\n                product*=i\n    return product\n    pass\ndef get_greatest_common_divisor(a,b):\n    '''\n    Write a python function to identify the greatest common divisor of two numbers.\n    '''\n    while a!=b:\n        if a>b:\n            a-=b\n        else:\n            b-=a\n    return a\n    pass\ndef get_greatest_common_divisor_of_prime_factors(a,b):\n    '''\n    Write a python function to identify the greatest common divisor of the prime factors of two numbers.\n    '''\n    while a!=b:\n        if a>b:\n            a=a%b\n        else:\n            b=b%a\n    return a\n    pass\ndef get_greatest_common_divisor_of_prime_factors_except_prime_number(a,b):\n    '''\n    Write a python function to identify the greatest common divisor of the prime factors of two numbers excluding the number itself.\n    '''\n    while a!=b:\n        if a>b:\n            a=a%b\n        else:\n            b=b%a\n    return a\n    pass\ndef get_least_common_multiple(a,b):\n    '''\n    Write a python function to identify the least common multiple of two numbers.\n    '''\n    return a*b/get_greatest_common_divisor(a,b)\n    pass\ndef get_least_common_multiple_of_prime_factors(a,b):\n    '''\n    Write a python function to identify the least common multiple of the prime factors of two numbers.\n    '''\n    return a*b/get_greatest_common_divisor_of_prime_factors(a,b)\n    pass\ndef get_least_common_multiple_of_prime_factors_except_prime_number(a,b):\n    '''\n    Write a python function to identify the least common multiple of the prime factors of two numbers excluding the number itself.\n    '''\n    return a*b/get_greatest_common_divisor_of_prime_factors_except_prime_number(a,b)\n    pass\ndef get_lcm_of_2_numbers(a,b):\n    '''\n    Write a python function to identify the least common multiple of two numbers.\n    '''\n    greatest_common_divisor=get_greatest_common_divisor(a,b)\n    lcm_of_a_b=greatest_common_divisor\n    if a%greatest_common_divisor==0 and b%greatest_common_divisor==0:\n        lcm_of_a_b=greatest_common_divisor\n    else:\n        lcm_of_a_b=greatest_common_divisor*(a/greatest_common_divisor)*(b/greatest_common_divisor)\n    return int(lcm_of_a_b)\n    pass\ndef get_lcm_of_2_numbers_of_prime_factors(a,b):\n    '''\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n > 2 and n % 2 == 0:\n        return True\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(3, 1 + max_divisor, 2):\n        if n % d == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return \"Not a prime number.\"\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return \"Not a prime number.\"\n    return \"It's a prime number.\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return \"1 is the only non-prime number\"\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return n, \"is not a prime number\"\n    return n, \"is a prime number\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    hq.heapify(nums)\n    return nums[0:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)==0 or n<0:\n        return None\n    heap = []\n    for num in nums:\n        hq.heappush(heap,(-num,num))\n        if len(heap)>n:\n            hq.heappop(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap)[1])\n    return sorted_list[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # nlargest from heapq\n    # my_list = [1,5,2,6,7,4,1,3]\n    # n = 3\n    # hq.nlargest(3,my_list)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #Function to create a heap from a list of numbers\n    def heapify(nums):\n        heap = []\n        for i in nums:\n            hq.heappush(heap,i)\n        return heap\n    #Function to extract the largest element from the heap and return it.\n    def extract_largest(heap):\n        largest = hq.heappop(heap)\n        return largest\n    #Function to push an element in a heap\n    def push(heap,element):\n        hq.heappush(heap,element)\n    #Function to return the n largest elements in descending order.\n    def largest(heap,n):\n        largest = []\n        for i in range(n):\n            largest.append(extract_largest(heap))\n        return largest\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    ret=[]\n    for i in range(n):\n        ret.append(hq.heappop(nums))\n    return ret\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    result = []\n    for i in nums:\n        hq.heappush(heap, i)\n        if len(heap) > n:\n            hq.heappop(heap)\n    while heap:\n        result.append(hq.heappop(heap))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    print([hq.heappop(nums) for _ in range(n)])\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # max_heap = []\n    # for num in nums:\n    #     hq.heappush(max_heap,(-num,num))\n    # res = []\n    # for _ in range(n):\n    #     res.append(hq.heappop(max_heap)[1])\n    # return res[::-1]\n    return sorted(nums,reverse=True)[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    maxheap = []\n    hq.heapify(maxheap)\n    for i in range(0,n):\n        hq.heappush(maxheap,nums[i])\n    return maxheap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    l=[]\n    for i in range(n):\n        hq.heappush(l,nums[i])\n    return l\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x > 0):\n        while (x & 1 == 0): \n            x = x >> 1\n        return x == 1\n    else:\n        return False\n    # return (x!=0) and (x & (x-1))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        while x:\n            if x%2:\n                return False\n            x = x//2\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        else:\n            x = x / 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x!= 1) : \n            if (x % 2) == 0 : \n                x = x // 2\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x % 2) == 0 : \n                x = x // 2\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_3 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x & 1) == 0 : \n                x = x >> 1\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_4 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x % 2) == 0 : \n                x = x // 2\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_5 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x & 1) == 0 : \n                x = x >> 1\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_6 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x & 1) == 0 : \n                x = x >> 1\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_7 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x % 2) == 0 : \n                x = x // 2\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_8 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x & 1) == 0 : \n                x = x >> 1\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_9 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x & 1) == 0 : \n                x = x >> 1\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_10(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x & 1) == 0 : \n                x = x >> 1\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_11(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x & 1) == 0 : \n                x = x >> 1\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_12(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x % 2) == 0 : \n                x = x // 2\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_13(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x & 1) == 0 : \n                x = x >> 1\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : \n        return True\n    return False\n    \ndef is_Power_Of_Two_14(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo (x) : \n        if x == 1 : \n            return True\n        if x == 0 : \n            return False\n        while (x) : \n            if (x & 1) == 0 : \n                x = x >> 1\n            else : \n                return False\n        return True\n    if (x > 0 and isPowerOfTwo (x)) : "
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    if x!= 0 and (x & (x - 1)) == 0: \n        return True\n    return False\n    \ndef is_Power_Of_Two_2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x > 0): \n        if x == 0: \n            return False\n        if x!= 0 and (x & (x - 1)) == 0: \n            return True\n        x = x >> 1\n    return False\n    \ndef is_Power_Of_Two_3 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    if x!= 0 and (x & (x - 1)) == 0: \n        return True\n    return False\n    \ndef is_Power_Of_Two_4 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    if x!= 0 and (x & (x - 1)) == 0: \n        return True\n    return False\n    \nprint (\"1: \",is_Power_Of_Two (0))\nprint (\"1: \",is_Power_Of_Two (1))\nprint (\"1: \",is_Power_Of_Two (2))\nprint (\"1: \",is_Power_Of_Two (3))\nprint (\"1: \",is_Power_Of_Two (7))\nprint (\"1: \",is_Power_Of_Two (10))\nprint (\"1: \",is_Power_Of_Two (14))\nprint (\"1: \",is_Power_Of_Two (15))\nprint (\"1: \",is_Power_Of_Two (16))\nprint (\"1: \",is_Power_Of_Two (32))\nprint (\"1: \",is_Power_Of_Two (64))\nprint (\"1: \",is_Power_Of_Two (128))\nprint (\"1: \",is_Power_Of_Two (256))\nprint (\"1: \",is_Power_Of_Two (512))\nprint (\"1: \",is_Power_Of_Two (1024))\nprint (\"1: \",is_Power_Of_Two (2048))\nprint (\"1: \",is_Power_Of_Two (4096))\nprint (\"1: \",is_Power_Of_Two (8192))\nprint (\"1: \",is_Power_Of_Two (16384))\nprint (\"1: \",is_Power_Of_Two (65536))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    n = 0\n    while (x > 0): \n        n = n + 1\n        x = x>>1\n    if n == 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0 :\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    for i in range(32):\n        if (1<<i) & x == 0 and (1<<i) & y!= 0:\n            return False\n        elif (1<<i) & x!= 0 and (1<<i) & y == 0:\n            return False\n    return True\ndef is_Power_Of_Two_Bits (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    for i in range(32):\n        if (1<<i) & x == 0 and (1<<i) & y!= 0:\n            return False\n        elif (1<<i) & x!= 0 and (1<<i) & y == 0:\n            return False\n    return True\ndef is_Power_Of_Two_Exhaustive (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Exhaustive (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Bitwise (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Bitwise (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Exhaustive (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Exhaustive (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Bitwise (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Bitwise (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Exhaustive (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Exhaustive (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Bitwise (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Bitwise (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Exhaustive (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Exhaustive (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Bitwise (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Bitwise (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Exhaustive (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= 0:\n            if x == y:\n                return True\n            else:\n                return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two_Exhaustive (x,y):\n    '''\n    Write a python program that takes two numbers and checks if they differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & "
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    i = 0\n    while (x!= 0): \n        x = x & (x - 1) \n        i = i + 1\n    if i == 1: \n        print(\"Yes\") \n    else: \n        print(\"No\") \nis_Power_Of_Two(10)\nis_Power_Of_Two(7)\nis_Power_Of_Two(11)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    #i = 1\n    #while(i < x):\n    #    if(i == x):\n    #        return True\n    #    i = i*2\n    \n    #return False\n    \n    return x & (x-1) == 0\n    \n    \n    \ndef reverse_Binary_Number (x): \n    '''\n    Write a python function to get the reverse of a binary number. \n    '''\n    \n    binary = bin(x)\n    \n    return int(binary[2:])\n    \n    \n    \ndef reverse_Binary_Number_V2 (x): \n    '''\n    Write a python function to get the reverse of a binary number. \n    '''\n    \n    binary = bin(x)\n    \n    binary = binary[2:].zfill(32)\n    \n    binary = binary[::-1]\n    \n    return int(binary, 2)\n    \n    \n    \ndef add_Binary_Numbers (x,y): \n    '''\n    Write a python function to get the sum of two binary numbers.\n    '''\n    \n    # print(x,y,bin(x),bin(y))\n    \n    # print(x ^ y,bin(x ^ y))\n    \n    return int(bin(x ^ y), 2)\n    \n    \n    \ndef add_Binary_Numbers_V2 (x,y): \n    '''\n    Write a python function to get the sum of two binary numbers.\n    '''\n    \n    # print(x,y,bin(x),bin(y))\n    \n    # print(x ^ y,bin(x ^ y))\n    \n    return int('0' + bin(x)[2:] + bin(y)[2:], 2)\n    \n    \n    \ndef add_Binary_Numbers_V3 (x,y): \n    '''\n    Write a python function to get the sum of two binary numbers.\n    '''\n    \n    binary_x = bin(x)[2:].zfill(32)\n    binary_y = bin(y)[2:].zfill(32)\n    \n    binary_sum = ''\n    carry = 0\n    \n    for i in range(len(binary_x)-1,-1,-1):\n        binary_sum = str((int(binary_x[i])+int(binary_y[i])+carry)%2) + binary_sum\n        carry = (int(binary_x[i])+int(binary_y[i])+carry)//2\n    \n    return int(binary_sum + ('0' * (len(binary_x) - len(binary_sum))), 2)\n    \n    \n    \ndef add_Binary_Numbers_V4 (x,y): \n    '''\n    Write a python function to get the sum of two binary numbers.\n    '''\n    \n    binary_x = bin(x)[2:].zfill(32)\n    binary_y = bin(y)[2:].zfill(32)\n    \n    binary_sum = ''\n    carry = 0\n    \n    for i in range(len(binary_x)-1,-1,-1):\n        binary_sum = str((int(binary_x[i])+int(binary_y[i])+carry)%2) + binary_sum\n        carry = (int(binary_x[i])+int(binary_y[i])+carry)//2\n    \n    return int(binary_sum + ('0' * (len(binary_x) - len(binary_sum))), 2)\n    \n    \n    \ndef add_Binary_Numbers_V5 (x,y): \n    '''\n    Write a python function to get the sum of two binary numbers.\n    '''\n    \n    binary_x = bin(x)[2:].zfill(32)\n    binary_y = bin(y)[2:].zfill(32)\n    \n    binary_sum = ''\n    carry = 0\n    \n    for i in range(len(binary_x)-1,-1,-1):\n        binary_sum = str((int(binary_x[i])+int(binary_y[i])+carry)%2) + binary_sum\n        carry = (int(binary_x[i])+int(binary_y[i])+carry)//2\n    \n    return int(binary_sum + ('0' * (len(binary_x) - len(binary_sum))), 2)\n    \n    \n    \ndef add_Binary_Numbers_V6 (x,y): \n    '''\n    Write a python function to get the sum of two binary numbers.\n    '''\n    \n    binary_x = bin(x)[2:].zfill(32)\n    binary_y = bin(y)[2:].zfill(32)\n    \n    binary_sum = ''\n    carry = 0\n    \n    for i in range(len(binary_x)-1,-1,-1):\n        binary_sum = str((int(binary_x[i])+int(binary_y[i])+carry)%2) + binary_sum\n        carry = (int(binary_x[i])+int(binary_y[i])+carry)//2\n    \n    return int(binary_sum + ('0' * (len(binary_x) - len(binary_sum))), 2)\n    \n    \n    \ndef add_Binary_Numbers_V7 (x,y): \n    '''\n    Write a python function to get the sum of two binary numbers.\n    '''\n    \n    binary_x = bin(x)[2:].zfill(32)\n    binary_y = bin(y)[2:].zfill(32)\n    \n    binary_sum = ''\n    carry = 0\n    \n    for i in range(len(binary_x)-1,-1,-1):\n        binary_sum = str((int(binary_x[i])+int(binary_y[i])+carry)%2) + binary_sum\n        carry = (int(binary_x[i])+int(binary_y[i])+carry)//2\n    \n    return int(binary_sum + ('0' * (len(binary_x) - len(binary_sum))), 2)\n    \n    \n    \ndef add_Binary_Numbers_V8 (x,y): \n    '''\n    Write a python function to get the sum of two binary numbers.\n    '''\n    \n    binary_x = bin(x)[2:].zfill(32)\n    binary_y = bin(y)[2:].zfill(32)\n    \n    binary_sum = ''\n    carry = 0\n    \n    for i in range(len(binary_x)-1,-1,-1):\n        binary_sum = str((int(binary_x[i])+int(binary_y[i])+carry)%2) + binary_sum\n        carry = (int(binary_x[i])+int(binary_y[i])+carry)//2\n    \n    return int(binary_sum + ('0' * (len(binary_x) - len(binary_sum))), 2)\n    \n    \n    \ndef add_Binary_Numbers_V9 (x,y): \n    '''\n    Write a python function to get the sum of two binary numbers.\n    '''\n    \n    binary_x = bin(x)[2:].zfill(32)\n    binary_y = bin(y)[2:].zfill(32)\n    \n    binary_sum = ''\n    carry = 0\n    \n    for i in range(len(binary_x)-1,-1,-1):\n        binary_sum = str((int(binary_x[i])+int(binary_y[i])+carry)%2) + binary_sum\n        carry = (int(binary_x[i])+int(binary_y[i])+carry)//2\n    \n    return int(binary_sum + ('0' * (len(binary_x) - len(binary_sum))), 2)\n    \n    \n    \ndef add_Binary_Numbers_V10 "
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    count = 0\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            count += 1\n    return count\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Write your code here\n    for word in text:\n        if len(word) >= 4:\n            print(word, end=\" \")\n            \n    return(text)\n    \n    \ndef merge_the_tools(string, k):\n    '''\n    Given a string and a number k, you have to return an array of all possible substrings of the string that have exactly k distinct characters.\n    '''\n    # Write your code here\n    # if k <= 0:\n    #     return []\n    # if len(string) == k:\n    #     return [string]\n    # substrings = []\n    # for i in range(0, len(string)-k+1):\n    #     substrings.append(string[i:i+k])\n    # print(substrings)\n    # return substrings\n    substrings = []\n    for i in range(0, len(string), k):\n        substrings.append(string[i:i+k])\n    return substrings\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    def is_char_long(word):\n        if len(word) >= 4:\n            return True\n        else:\n            return False\n    return list(filter(is_char_long, text.split()))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    print(\"Input text: {}\".format(text))\n    return [word for word in text.split() if len(word) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(r'\\b\\w{4,}\\b')\n    l = regex.findall(text)\n    print(l)\n    return len(l)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b\\w{4,}\\b', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a=re.findall(r'\\b\\w{4,}\\b',text)\n    return a\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\S{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in text.split():\n        if(len(word) >= 4):\n            yield word\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        yield (i ** 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # return [num ** 2 for num in nums]\n    # return [num ** 2 for num in nums if num % 2 == 0]\n    return list(map(lambda num: num ** 2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num ** 2)\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # result = [num * num for num in nums]\n    result = list(map(lambda num: num * num, nums))\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**2)\n    return new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**2)\n    return new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        yield i**2\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)):\n        if(str == str[i:]+str[:i]):\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    left_rotations = 0\n    right_rotations = 0\n    for i in range(1, len(str)):\n        if(str[:i] == str[i:]):\n            left_rotations = i\n            break\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotate_n = 0\n    n = len(str)\n    if n == 1 or n == 0:\n        return 0\n    for i in range(n):\n        if str[i:]+str[:i] == str:\n            return rotate_n\n        rotate_n += 1\n    return rotate_n\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    for i in range(0,len(str)-1):\n        if str[i]!=str[i+1]:\n            rotations+=1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = [str]\n    for i in range(n):\n        rotations.append(str[n-i-1:] + str[0:n-i-1])\n    print(rotations)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    l1 = (len(str) // 2)\n    l2 = (len(str) // 2) + 1\n    l3 = (len(str) // 2) + 2\n    s1 = str[0:l1]\n    s2 = str[l1:l2]\n    s3 = str[l2:l3]\n    if l1 == 0 and l2 == len(str) and l3 == len(str):\n        return 0\n    elif s1 == s2 and s2 == s3:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    no_rotations = 0\n    if len(str) == 0: \n        return no_rotations\n    for i in range(1, len(str)): \n        if str[i]!= str[i-1]: \n            return len(str) - i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    res = 0\n    for i in range(n):\n        if str[i:]+str[:i]==str:\n            return res+1\n        res+=1\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)):\n        if str[i:]+str[:i] == str:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str) \n    rotations = 0\n    for i in range(1, len(str)): \n        if (str[i]!= str[i - 1]): \n            rotations += 1\n    return rotations \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = \"\"\n    for i in s: \n        if i not in ch: \n            s1 += i\n    return s1\ndef remove_Occ2(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\ndef remove_Occ3(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    lst=list(s)\n    lst.remove(ch)\n    return ''.join(lst)\ndef remove_Occ4(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s[:s.rfind(ch)] + s[s.rfind(ch)+1:]\n    return s1\ndef remove_Occ5(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s[:s.rfind(ch)] + s[s.rfind(ch)+1:]\n    return s1\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s[::-1]\n        i = s.index(ch)\n        return s[:i+1]+s[i+1:-1]+s[-1]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    s = s.replace(ch, \"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.find(ch)]+s[s.find(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # return s.replace(ch,\"\")\n    return s[:s.find(ch)] + s[s.find(ch)+1:]\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.index(ch)] + s[s.index(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # create a substring with first and last characters \n    # change it to the required string\n    # return the new string \n    s = s.replace(ch, \"\") \n    s = s[:-1] \n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        return s[:s.find(ch)]+s[s.find(ch)+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s.replace(ch, '', 1)\n    s2 = s1.replace(ch, '')\n    return s2\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_sorted = M[:] # make a copy of the list\n    for i in range(len(M_sorted)):\n        M_sorted[i] = sorted(M_sorted[i], key=sum)\n    return M_sorted\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) <= 1:\n        return M\n    if len(M[0]) == 1:\n        return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize the array\n    A = []\n    \n    # loop over all the rows\n    for i in range(len(M)):\n        # initialize the row sum for current row\n        rowSum = 0\n        # loop over all the columns\n        for j in range(len(M[i])):\n            rowSum += M[i][j]\n        # append the sum to the array\n        A.append(rowSum)\n    \n    # sort the array\n    A.sort()\n    \n    # initialize a new matrix\n    newMatrix = []\n    \n    # loop over all the columns\n    for i in range(len(M[0])):\n        # initialize a row\n        row = []\n        # loop over all the rows\n        for j in range(len(M)):\n            # append the entry to the row\n            row.append(M[j][i])\n        # append the row to the new matrix\n        newMatrix.append(row)\n    \n    # return the new matrix\n    return newMatrix\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    M = sorted(M, key=lambda a: sum(a))\n    return M\n    \n    \ndef matrix_sums(matrix, m, n):\n    '''\n    Write a function to return a list of the sum of each row and column in a given m*n matrix.\n    '''\n    M = []\n    for i in range(m):\n        M.append(sum(matrix[i]))\n    for i in range(m):\n        for j in range(n):\n            M[i] += matrix[j][i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for row in range(len(M)):\n        M[row] = sorted(M[row])\n        M[row] = sum(M[row])\n    return sorted(M)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = copy.deepcopy(M)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sum = [0] * len(M)\n    for i in range(len(M)):\n        row_sum[i] = sum(M[i])\n    sort = sorted(zip(row_sum, range(len(M))))\n    new_matrix = [list(x) for x in zip(*M)]\n    new_matrix = [[new_matrix[i][row_sum[i]] for i in range(len(new_matrix))]]\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    for i in range(len(M)):\n        min_sum = M[i][0]\n        min_row = i\n        for j in range(len(M[i])):\n            if min_sum > M[i][j]:\n                min_sum = M[i][j]\n                min_row = i\n        temp = M[i]\n        M[i] = M[min_row]\n        M[min_row] = temp\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (1/3) * b * h * l \n    return Volume \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*(l*b*h)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h) / 3\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/6)*(l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return round((1/2)*l*b*h,1)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    print(\"The volume of the prism is: \" + str(V))\n    \ndef find_Tribonacci(n): \n    '''\n    Write a python function to calculate the nth tribonacci number.\n    '''\n    if n <= 0 :\n        return 0\n    elif n == 1 or n == 2 :\n        return 1\n    else :\n        return find_Tribonacci(n-1) + find_Tribonacci(n-2) + find_Tribonacci(n-3)\n    \ndef find_Square(n): \n    '''\n    Write a python function to calculate the square of a number n.\n    '''\n    if n<0 :\n        return n * -1\n    else :\n        return n ** 2\n    \ndef find_Prime(n): \n    '''\n    Write a python function to check if a number n is a prime number.\n    '''\n    if n < 2: \n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/6) * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    print(volume)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # If the string is empty, return false\n    if text == \"\":\n        return False\n    \n    # If the string doesn't start with an underscore, return false\n    elif re.match(\"^_\", text) == None:\n        return False\n        \n    # If the string starts with an underscore, return true\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r\"_.*_\"\n    match_results = re.findall(regex, text, re.MULTILINE)\n    return len(match_results) > 0\nprint(text_lowercase_underscore(\"Hello_World\"))\nprint(text_lowercase_underscore(\"good_boy\"))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_\\w{2,}_', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # match = re.match(r'^[a-z]+_[a-z]+', text)\n    # return match\n    # OR\n    match = re.match(r'^[a-z]+_[a-z]+', text, flags=re.I)\n    return match\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # REPLACE THE PREVIOUS LINE WITH YOUR CODE\n    # Hint: Remember that you can join strings with the '+' operator.\n    # Use re.findall to find all the lowercase letters followed by an underscore in the input string.\n    # Use re.sub to replace the lowercase letters with a space.\n    # Use re.findall to find all the lowercase letters followed by an underscore in the modified string.\n    # If the length of the string is zero then return True otherwise return False.\n    return True if re.findall(r'_+[a-z]+_', text.lower()) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'(_+)', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search('_[a-z]*_', text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r\"^[a-z]+_[a-z]+$\", text, re.IGNORECASE)\n    \nprint(text_lowercase_underscore(\"the_camel_is_over_the_hill\"))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # print(re.sub('[A-Z]','_',text))\n    return re.sub('[A-Z]','_',text)\n    "
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'_[a-z]', text) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \ndef rectangle_perimeter(a, b):\n    '''\n    Write a function that returns the perimeter of a rectangle given its side lengths as input.\n    '''\n    return (2*a)+b\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a >= 0:\n        return a * 4\n    else:\n        return 'Invalid Input'\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass # your code goes here\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string) \n    l2 = list(string) \n    for i in range(len(l2)): \n        l1.remove(l2[i]) \n    return l1 \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for x in string:\n        list1.append(x)\n    for x in list1:\n        if x not in list2:\n            list2.append(x)\n    return list2\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return string\n    i = 0\n    while(i < len(string)):\n        if string[i] in string[i+1:]:\n            string = string[:i] + string[i+1:]\n        else:\n            i += 1\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string)\n    for ch in string:\n        if ch in l1:\n            l1.remove(ch)\n    return l1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str1 = []\n    list_str2 = []\n    for i in string:\n        list_str1.append(i)\n    for i in string:\n        list_str2.append(i)\n    for i in string:\n        list_str1.remove(i)\n    for i in string:\n        list_str2.remove(i)\n    str_to_list_int = []\n    for i in list_str1:\n        str_to_list_int.append(ord(i))\n    for i in list_str2:\n        str_to_list_int.append(ord(i))\n    return str_to_list_int\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dummy = list(string)\n    for i in dummy:\n        if i in string2:\n            dummy.remove(i)\n    return dummy\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not string:\n        return string\n    new_str = \"\"\n    for char in string:\n        if char not in new_str:\n            new_str+=char\n    return new_str\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = list(string)\n    for char in string:\n        if char in result:\n            result.remove(char)\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = []\n    for i in string:\n        if i not in l1:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for x in string:\n        string_list.append(x)\n    return string_list\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums))!= len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(set(arraynums)) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #\n    # WRITE YOUR CODE HERE\n    #\n    #\n    return None\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i])>1:\n            print('Duplicate found')\n            break\n    else:\n        print('No duplicates')\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) > len(set(arraynums)):\n        return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)-1):\n            if arraynums[i] == arraynums[j+1]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # O(n^2) time complexity\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n    \ndef test_duplicate2(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n    \nif __name__ == '__main__':\n    arraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(test_duplicate(arraynums))\n    print(test_duplicate2(arraynums))"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if arraynums == []:\n        return False\n    for i in range(0,len(arraynums)):\n        if arraynums[i] in arraynums[i+1:]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) == len(arraynums)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return len(str(x)) == len(set(str(x)))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x % 3 == 0) or (x % 5 == 0):\n        return True\n    return False\n    \ndef is_sum_of_any_pair(x):\n    '''\n    Write a function to check if the given number is a sum of any pair of the numbers 3, 4, 5 or 6.\n    '''\n    if x % 3 == 0 or x % 4 == 0 or x % 5 == 0 or x % 6 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 3 == 0 or x % 5 == 0 or x % 7 == 0 or x % 11 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import math\n    a = math.sqrt(2)\n    b = (math.sqrt(5)-1)/2\n    c = (math.sqrt(5)+1)/2\n    if x>=a and x<=b:\n        return 'Woodball'\n    elif x>=c:\n        return 'Woodball'\n    elif x<=a:\n        return 'Not Woodball'\n    elif x>b and x<c:\n        return 'Not Woodball'\n    elif x==a:\n        return 'Woodball'\n    elif x==b:\n        return 'Woodball'\n    elif x==c:\n        return 'Woodball'\n    else:\n        return 'No Woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #Write your code here\n    x = str(x)\n    return x.isdigit() and len(x) == 6 and x[0] == \"1\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = set([1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36])\n    if x in s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    elif x % 3 == 0:\n        return True\n    elif x % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 15 or x == 16 or x == 17:\n        return \"woodball\"\n    else:\n        return \"not woodball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(1,x):\n        if (x%i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Fill your code here\n    if x % 5 == 0 and x % 3 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = (rev * 10) + (num % 10)\n        num //= 10\n    return num == rev * 2\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num + num == num * 2\n    \ndef main():\n    #print(rev(64))\n    #print(rev(4))\n    print(rev(15))\n    print(rev(1523))\n    print(rev(156))\n    print(rev(1564))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    r = 0\n    while num!= 0:\n        r = r * 10 + num % 10\n        num = num // 10\n    return r\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = num[::-1]\n    if int(rev) == int(num) - 1:\n        return True\n    else:\n        return False\n    \n    \nprint(rev(19))\nprint(rev(21))\nprint(rev(2))\nprint(rev(3))\nprint(rev(4))\nprint(rev(6))\nprint(rev(10))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == 2 * int(str(num)[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = int(str(num)[::-1])\n    return num*2 == rev+1\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    x = str(num)\n    rev = str(num)[::-1]\n    return int(x) == int(rev) * 2\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num=num\n    rev=0\n    while(num>0):\n        rem=num%10\n        rev=rev*10+rem\n        num=num//10\n    return(rev)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = int(num[::-1])\n    return num == str(rev-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    for i in range(num):\n        if(i == (num-i)-1):\n            print(i,num-i)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    n = len(arr)\n    for i in range(0, n) : \n        for j in range(i + 1, n) : \n            temp = arr[i] * 10 + arr[j]\n            if (temp > max_num) : \n                max_num = temp\n    return max_num\n    \ndef print_Max_Num(arr) : \n    '''\n    Write a python function to print all the possible number in a list of digits.\n    '''\n    n = len(arr)\n    max_num = find_Max_Num(arr)\n    print(\"Max number can be formed by the given digits :\", max_num)\n    for i in range(0, n) : \n        for j in range(i + 1, n) : \n            temp = arr[i] * 10 + arr[j]\n            if (temp < 10) : \n                print(temp)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_list = list(arr)\n    num_list.sort(reverse = True)\n    return ''.join(num_list)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n) : \n        if arr[i] > max_num : \n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) : \n        num = int(''.join(str(x) for x in arr[i:]))\n        if num > max_num : \n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == [0] :\n        return 0\n    ans = -10**9\n    for i in range(1, (1<<len(arr))):\n        temp = 0\n        for j in range(len(arr)):\n            if i & (1<<j) :\n                temp += arr[j]\n        if ans < temp :\n            ans = temp\n    return ans\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    i = 0\n    max_num = 0\n    while(i < len(arr)):\n        sum_num = 0\n        j = i\n        while(j < len(arr)):\n            sum_num += arr[j] * (10**(len(arr)-j-1))\n            if(sum_num > max_num):\n                max_num = sum_num\n            j+=1\n        i+=1\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort() \n    max_num = 0\n    for i in arr : \n        max_num = max_num * 10 + i \n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = [1,9,3,5,2,6,5,7,8,9,8,1,3,5]\n    # sort the array\n    arr.sort()\n    print (arr)\n    \n    # store the length of the array\n    n = len(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    res = arr[-1]\n    for i in range(len(arr) - 1) : \n        if arr[i] < 9 and (arr[i] + 1) == arr[i + 1] : \n            res += 1\n        else : \n            break\n    return res \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        return True\n    elif x < 0 and y < 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    return False\n    \ndef nearest_palindrome(x): \n    '''\n    Write a Python function to get the nearest palindrome number for a given number.\n    '''\n    if x < 0:\n        return -1\n    if x % 10 == 0:\n        return x - 1\n    return x + (10 - (x % 10))\n    \ndef maximum_product(x,y): \n    '''\n    Write a Python function to get the maximum product of two numbers.\n    '''\n    if x > y:\n        return x * y\n    return y * x\n    \ndef max_product_digits(x,y): \n    '''\n    Write a Python function to get the maximum product of three numbers.\n    '''\n    if x > y:\n        x, y = y, x\n    return x * y * (10 ** len(str(x)) - 1)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n    \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return 1\n    elif x>0 and y>0:\n        return 1\n    elif x>0 and y<0:\n        return 1\n    elif x<0 and y>0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    def check(x,y):\n        if x*y > 0:\n            return False\n        elif x*y < 0:\n            return True\n        else:\n            return 'error'\n    return check(x,y)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=abs(x)\n    y=abs(y)\n    if(x<0 and y<0):\n        return 1\n    else:\n        return 0\n        \ndef reverse(n):\n    '''\n    Write a python function that takes a number as a parameter and returns the number reversed.\n    '''\n    r=0\n    while(n>0):\n        d=n%10\n        r=r*10+d\n        n=n//10\n    return r\n        \ndef palindrome(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    r=reverse(n)\n    if(n==r):\n        return 1\n    else:\n        return 0\n        \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth term of fibonacci series.\n    '''\n    if(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n        \ndef isArmstrong(n):\n    '''\n    Write a python function to check whether the given number is armstrong or not.\n    '''\n    l=len(str(n))\n    r=n\n    s=0\n    while(r>0):\n        d=r%10\n        r=r//10\n        s=s+d**l\n    if(s==n):\n        return 1\n    else:\n        return 0\n        \ndef fibonacci_Sum(n):\n    '''\n    Write a python function to return the sum of first n terms of fibonacci series.\n    '''\n    if(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n)\n        \ndef factorial_Sum(n):\n    '''\n    Write a python function to return the sum of first n terms of factorial series.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return n*factorial(n)\n        \ndef Lcm(x,y):\n    '''\n    Write a python function to return the least common multiple of two given numbers.\n    '''\n    m=max(x,y)\n    while(True):\n        if(m%x==0 and m%y==0):\n            return m\n        m+=1\n        \ndef Gcd(x,y):\n    '''\n    Write a python function to return the greatest common divisor of two given numbers.\n    '''\n    if(x==0):\n        return y\n    elif(y==0):\n        return x\n    else:\n        return Gcd(y,x%y)\n        \ndef Hcf(x,y):\n    '''\n    Write a python function to return the highest common factor of two given numbers.\n    '''\n    return Gcd(x,y)\n        \ndef Prime(n):\n    '''\n    Write a python function to return whether the given number is prime or not.\n    '''\n    if(n<2):\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n%i==0):\n            return False\n    return True\n        \ndef Prime_Range(n1,n2):\n    '''\n    Write a python function to return a list of prime numbers between two given numbers (both inclusive).\n    '''\n    l=[]\n    for i in range(n1,n2+1):\n        if(Prime(i)):\n            l.append(i)\n    return l\n        \ndef Prime_Factors(n):\n    '''\n    Write a python function to return a list of prime factors of a given number.\n    '''\n    l=[]\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n%i==0):\n            if(Prime(i)):\n                l.append(i)\n            else:\n                l.extend(Prime_Factors(i))\n    return l\n        \ndef Factors(n):\n    '''\n    Write a python function to return a list of factors of a given number.\n    '''\n    l=[]\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i==0):\n            l.append(i)\n            l.append(int(n/i))\n    return l\n        \ndef Unique_Factors(n):\n    '''\n    Write a python function to return the number of unique factors of a given number.\n    '''\n    l=Factors(n)\n    u=set(l)\n    return len(u)\n        \ndef Count_Divisors(n):\n    '''\n    Write a python function to return the number of divisors of a given number.\n    '''\n    l=[]\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i==0):\n            if(Prime(i)):\n                l.append(i)\n            else:\n                l.extend(Factors(i))\n    return len(l)\n        \ndef Sum_Divisors(n):\n    '''\n    Write a python function to return the sum of divisors of a given number.\n    '''\n    l=[]\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i==0):\n            if(Prime(i)):\n                l.append(i)\n            else:\n                l.extend(Factors(i))\n    s=0\n    for i in l:\n        s+=i\n    return s\n        \ndef Sum_Divisors_Unique(n):\n    '''\n    Write a python function to return the sum of divisors of a given number.\n    '''\n    return n+Unique_Factors(n)\n        \ndef Amicable_Number(n):\n    '''\n    Write a python function to check whether the given number is amicable or not.\n    '''\n    return Sum_Divisors(n)==n and Sum_Divisors(Sum_Divisors(n))==n\n        \ndef Amicable_Numbers(n):\n    '''\n    Write a python function to return a list of all amicable numbers between 1 and n (both inclusive).\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if(Amicable_Number(i)):\n            l.append(i)\n    return l\n        \ndef Sum_Amicable_Numbers(n):\n    '''\n    Write a python function to return the sum of all amicable numbers between 1 and n (both inclusive).\n    '''\n    l=Amicable_Numbers(n)\n    s=0\n    for i in l:\n        s+=i\n    return s\n        \ndef is_Perfect(n):\n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    return Sum_Divisors(n)==n\n        \ndef Perfect_Numbers(n):\n    '''\n    Write a python function to return a list of all perfect numbers between 1 and n (both inclusive).\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if(is_Perfect(i)):\n            l.append(i)\n    return l\n        \ndef Sum_Perfect_Numbers(n):\n    '''\n    Write a python function to return the sum of all perfect numbers between 1 and n (both inclusive).\n    '''\n    l=Perfect_Numbers(n)\n    s=0\n    for i in l:\n        s+=i\n    return s\n        \ndef is_Abundant(n):\n    '''\n    Write a python function to check whether the given number is abundant or not.\n    '''\n    return Sum_Divisors(n)>n\n        \ndef Abundant_Numbers(n):\n    '"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=int(input())\n    y=int(input())\n    if x>0 and y>0:\n        print(\"The two numbers have opposite signs\")\n    elif x<0 and y<0:\n        print(\"The two numbers have opposite signs\")\n    else:\n        print(\"The two numbers do not have opposite signs\")\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    print(x,y)\n    if x>0 and y<0 or x<0 and y>0: \n        print(\"Yes\")\n    else:\n        print(\"No\")\nopposite_Signs(-4,-6)\nopposite_Signs(4,6)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8*n+1)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_triangular(n):\n    '''\n    Write a function to find the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_pentagonal(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_hexagonal(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n):\n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2\ndef is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 8\n    else:\n        return n * 8 + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    pass\n    \ndef is_prime(n):\n    '''\n    Write a function that returns whether or not a number is prime.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    \n    if n == 1:\n        return 1\n    \n    elif n%2 == 0:\n        return n*(3*n-1)/2\n        \n    else:\n        return n*(3*n-2)/2 + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct = []\n    def count_oct():\n        for i in range(n):\n            oct.append(i)\n        return oct\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_even(n):\n        return n % 2 == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    c = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 <= len(str(sum(map(int, s[i:j+1])))):\n                c += 1\n    return c\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    chars = [c for c in s]\n    n = len(chars)\n    i, j, cnt = 0, 0, 0\n    while j < n:\n        if j > i:\n            cnt += 1\n            sum_chars = sum([int(chars[i]) for i in range(i, j)])\n            if sum_chars == j - i + 1:\n                cnt += 1\n        i += 1\n        j += 1\n    return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # for i in range(len(s)):\n    #     for j in range(len(s)-1):\n    #         if(sum(map(int, s[i:j+1])) == j+1):\n    #             print(s[i:j+1], end = \" \")\n    #             print(\"Sum = \" + str(j+1))\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if(sum(map(int, s[i:j+1])) == j+1):\n                print(s[i:j+1], end = \" \")\n                print(\"Sum = \" + str(j+1))\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def solve(s):\n        #print(s)\n        n = len(s)\n        prefix = defaultdict(int)\n        prefix[0] = 1\n        pre_sum = 0\n        count = 0\n        for i in range(n):\n            pre_sum += int(s[i])\n            prefix[pre_sum] += 1\n            #print(prefix)\n            count += prefix[pre_sum - n]\n            #print(count)\n        return count\n    return solve(s)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            subs[s[i:j+1]] += 1\n    print(subs)\n    count = 0\n    for s in subs:\n        count += (subs[s] * (subs[s] - 1)) // 2\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    result = 0\n    for i in range(0, length):\n        j = i\n        sum = 0\n        while(j < length):\n            sum += int(s[j])\n            j += 1\n            if(sum == length):\n                result += 1\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(i) for i in s[i:j + 1]) == len(s[i:j + 1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            d[s[i:j+1]] += 1\n    return len([k for k,v in d.items() if len(k) == v])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subStrings = defaultdict(int)\n    subStrings[0] = 1\n    for index in range(1, len(s)):\n        subStrings[index] = subStrings[index - 1]\n        if index > 1:\n            subStrings[index] += subStrings[index - 2]\n        subStrings[index] += 1 if s[index - 1] == '1' else 0\n        subStrings[index] += 1 if s[index - 1] == '2' else 0\n        subStrings[index] += 1 if s[index - 1] == '3' else 0\n        subStrings[index] += 1 if s[index - 1] == '4' else 0\n        subStrings[index] += 1 if s[index - 1] == '5' else 0\n        subStrings[index] += 1 if s[index - 1] == '6' else 0\n        subStrings[index] += 1 if s[index - 1] == '7' else 0\n        subStrings[index] += 1 if s[index - 1] == '8' else 0\n        subStrings[index] += 1 if s[index - 1] == '9' else 0\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(\"smallest_num:\", min(xs))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for x in xs:\n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(min(xs))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n    \n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    return max(xs)\n    \n    \ndef list_check(lst):\n    '''\n    Write a python function that takes a list as input and return True if list is empty and False if list is not empty.\n    '''\n    return len(lst) == 0\n    \n    \ndef sum_list(lst):\n    '''\n    Write a python function that takes a list as input and return the sum of all items in list.\n    '''\n    return sum(lst)\n    \n    \ndef average(lst):\n    '''\n    Write a python function that takes a list as input and return the average of all items in list.\n    '''\n    return sum(lst) / len(lst)\n    \n    \ndef multiply_list(lst):\n    '''\n    Write a python function that takes a list as input and returns all items in list multiplied by the same number.\n    '''\n    x = 1\n    for i in lst:\n        x = x * i\n    return x\n    \n    \ndef list_strings(lst):\n    '''\n    Write a python function that takes a list as input and return a new list with strings in list are converted to uppercase.\n    '''\n    return [x.upper() for x in lst]\n    \n    \ndef find_common(lst1, lst2):\n    '''\n    Write a python function that takes 2 lists as input and returns a new list with common items between 2 lists.\n    '''\n    return list(set(lst1) & set(lst2))\n    \n    \ndef myfunc(x, lst=[]):\n    '''\n    Write a python function that takes a number x as input and returns a list with number x to the power of i for i = 1 to x.\n    '''\n    return [x ** i for i in range(1, x + 1)]\n    \n    \ndef find_max(lst):\n    '''\n    Write a python function that takes a list as input and return the largest element in list.\n    '''\n    return max(lst)\n    \n    \ndef find_min(lst):\n    '''\n    Write a python function that takes a list as input and return the smallest element in list.\n    '''\n    return min(lst)\n    \n    \ndef remove_duplicates(lst):\n    '''\n    Write a python function that takes a list as input and return a new list with no duplicate values.\n    '''\n    return list(dict.fromkeys(lst))\n    \n    \ndef remove_values_from_list(lst, xs):\n    '''\n    Write a python function that takes a list and remove the items from list.\n    '''\n    for i in lst:\n        if i in xs:\n            lst.remove(i)\n    return lst\n    \n    \ndef reverse_list(lst):\n    '''\n    Write a python function that takes a list as input and return a new list with items in list in reverse order.\n    '''\n    return lst[::-1]\n    \n    \ndef find_element(lst):\n    '''\n    Write a python function that takes a list as input and return the index of the last occurrence of the specified element in list.\n    '''\n    return lst.index(5)\n    \n    \ndef main():\n    '''\n    Write a python function to test all python functions written above.\n    '''\n    print(\"smallest_num: \", smallest_num([5, 4, 3]))\n    print(\"largest_num: \", largest_num([5, 4, 3]))\n    print(\"list_check: \", list_check([]))\n    print(\"list_check: \", list_check([1]))\n    print(\"sum_list: \", sum_list([5, 4, 3]))\n    print(\"sum_list: \", sum_list([1]))\n    print(\"average: \", average([5, 4, 3]))\n    print(\"average: \", average([1]))\n    print(\"multiply_list: \", multiply_list([5, 4, 3]))\n    print(\"multiply_list: \", multiply_list([1]))\n    print(\"list_strings: \", list_strings([\"hello\", \"world\"]))\n    print(\"list_strings: \", list_strings([\"apple\", \"banana\"]))\n    print(\"find_common: \", find_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7]))\n    print(\"find_common: \", find_common([], [1, 2, 3, 4, 5]))\n    print(\"find_common: \", find_common([1, 2, 3, 4, 5], []))\n    print(\"find_max: \", find_max([5, 4, 3]))\n    print(\"find_max: \", find_max([1]))\n    print(\"find_max: \", find_max([1, 5, 5]))\n    print(\"find_min: \", find_min([5, 4, 3]))\n    print(\"find_min: \", find_min([1]))\n    print(\"find_min: \", find_min([1, 5, 5]))\n    print(\"remove_duplicates: \", remove_duplicates([1, 1, 1, 1]))\n    print(\"remove_duplicates: \", remove_duplicates([5, 4, 3, 5]))\n    print(\"remove_values_from_list: \", remove_values_from_list([1, 2, 3], [1, 2]))\n    print(\"remove_values_from_list: \", remove_values_from_list([1, 2, 1, 2, 3], [1, 2]))\n    print(\"reverse_list: \", reverse_list([1, 2, 3, 4, 5, 6]))\n    print(\"reverse_list: \", reverse_list([1]))\n    print(\"reverse_list: \", reverse_list([]))\n    print(\"find_element: \", find_element([1, 2, 3, 4, 5, 4]))\n    print(\"find_element: \", find_element([1]))\n    print(\"find_element: \", find_element([1, 2, 3, 4, 5, 6]))\n    print(\"find_element: \", find_element([]))\n    \n    \nif __name__ == \"__main__\":\n    main()\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    \n    min = xs[0]\n    for x in xs:\n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)-1):\n        diff_list.append((test_list[i+1] - test_list[i]))\n    return max(diff_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([test_list[i] - test_list[i-1] for i in range(1, len(test_list))])\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list of tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[len(sorted_list)-1][1] - sorted_list[0][1]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = [1,5,9,3,2]\n    test_list = [9,7,4,2,1]\n    print(max_difference(test_list))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    def difference_max_min(data_list):\n        max_diff = []\n        for i in range(len(data_list)-1):\n            difference = data_list[i+1] - data_list[i]\n            max_diff.append(difference)\n        return max(max_diff)\n    return difference_max_min(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i]!= test_list[j] and abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return None\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #Initializing a minimum and a maximum difference variable\n    min_diff = 0\n    max_diff = 0\n    #Iterating through all pairs in the tuple list\n    for i in range(len(test_list)):\n        #Comparing all pairs\n        if i < len(test_list) - 1:\n            for j in range(i+1, len(test_list)):\n                #Updating the minimum and maximum difference\n                if (test_list[i][0] - test_list[j][0]) < min_diff:\n                    min_diff = (test_list[i][0] - test_list[j][0])\n                if (test_list[i][1] - test_list[j][1]) > max_diff:\n                    max_diff = (test_list[i][1] - test_list[j][1])\n    #Returning the maximum difference\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(list(map(lambda x: abs(x[0] - x[1]), combinations(test_list, 2))))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks,key=lambda x:x[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(sorted(subjectmarks,key=lambda x:x[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = []\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(len(subjectmarks)):\n            if subjectmarks[j][1]>subjectmarks[i][1]:\n                temp=subjectmarks[i]\n                subjectmarks[i]=subjectmarks[j]\n                subjectmarks[j]=temp\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    print(subjectmarks)\n    \nsubject_marks(marks)\n    \n    \n'''\nTuples and Dictionaries\n'''"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if type(element) is list:\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum([data for sub_list in data_list for data in sub_list])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return sum(data_list)\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n    \nif __name__ == '__main__':\n    data_list = [1,2,[3,4],[4,5,[6,7]]]\n    print(recursive_list_sum(data_list))\n    "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_list = 0\n    for elem in data_list:\n        if isinstance(elem, list):\n            sum_list += recursive_list_sum(elem)\n        else:\n            sum_list += elem\n    return sum_list\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], int):\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        raise ValueError('Input list element not valid')\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == int:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        \nprint(recursive_list_sum([[1, 2], [3, 4]])"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case\n    if len(data_list) == 1:\n        return data_list[0]\n    # recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for i in range(len(data_list)):\n        if type(data_list[i]) == list:\n            result += recursive_list_sum(data_list[i])\n        else:\n            result += data_list[i]\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # count = 0\n    # for i in list:\n    #     if i > 0:\n    #         count += 1\n    # return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([i for i in list if i > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list(filter(lambda x:x>0,list)))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    #find the sum of bell numbers up to n\n    bell_sum=0\n    for i in range(1,n+1):\n        bell_sum+=i\n    \n    #list of partitions of n\n    partition_list=[]\n    \n    #find all ways to partition the sum of n into sum/2 partitions\n    for i in range(1, int(n/2)+1):\n        \n        #find the number of ways to partition the remaining sum of n into 2 partitions\n        num_ways_to_partition_remaining_sum=0\n        for j in range(1, int(n/2)+1):\n            if i+j==n:\n                num_ways_to_partition_remaining_sum+=1\n        \n        #add the number of ways to partition the remaining sum to the list of partitions\n        partition_list.append(num_ways_to_partition_remaining_sum)\n    \n    #find the number of ways to partition the sum of n into 2 partitions\n    num_ways_to_partition_sum=0\n    for i in range(1, int(n/2)+1):\n        num_ways_to_partition_sum+=partition_list[i-1]\n    \n    return bell_sum, partition_list, num_ways_to_partition_sum\n    \ndef bell_number_sequence(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers\n    where the largest Bell number in the set is smaller than a given value n.\n    '''\n    \n    #find the sum of bell numbers up to n\n    bell_sum=0\n    for i in range(1,n+1):\n        bell_sum+=i\n    \n    #list of partitions of n\n    partition_list=[]\n    \n    #find all ways to partition the sum of n into sum/2 partitions\n    for i in range(1, int(n/2)+1):\n        \n        #find the number of ways to partition the remaining sum of n into 2 partitions\n        num_ways_to_partition_remaining_sum=0\n        for j in range(1, int(n/2)+1):\n            if i+j==n:\n                num_ways_to_partition_remaining_sum+=1\n        \n        #add the number of ways to partition the remaining sum to the list of partitions\n        partition_list.append(num_ways_to_partition_remaining_sum)\n    \n    #find the number of ways to partition the sum of n into 2 partitions\n    num_ways_to_partition_sum=0\n    for i in range(1, int(n/2)+1):\n        num_ways_to_partition_sum+=partition_list[i-1]\n    \n    return bell_sum, partition_list, num_ways_to_partition_sum\n    \ndef partition_bell_number(n):   \n    '''\n    Write a function to partition a set of Bell numbers in such a way that\n    all partitions with a sum equal to n are used.\n    '''\n    \n    #find the sum of bell numbers up to n\n    bell_sum=0\n    for i in range(1,n+1):\n        bell_sum+=i\n    \n    #list of partitions of n\n    partition_list=[]\n    \n    #find all ways to partition the sum of n into sum/2 partitions\n    for i in range(1, int(n/2)+1):\n        \n        #find the number of ways to partition the remaining sum of n into 2 partitions\n        num_ways_to_partition_remaining_sum=0\n        for j in range(1, int(n/2)+1):\n            if i+j==n:\n                num_ways_to_partition_remaining_sum+=1\n        \n        #add the number of ways to partition the remaining sum to the list of partitions\n        partition_list.append(num_ways_to_partition_remaining_sum)\n    \n    #find the number of ways to partition the sum of n into 2 partitions\n    num_ways_to_partition_sum=0\n    for i in range(1, int(n/2)+1):\n        num_ways_to_partition_sum+=partition_list[i-1]\n    \n    return bell_sum, partition_list, num_ways_to_partition_sum\n    \n    \n    \n    \n    \ndef bell_number_set(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers\n    where the largest Bell number in the set is smaller than a given value n.\n    '''\n    \n    #find the sum of bell numbers up to n\n    bell_sum=0\n    for i in range(1,n+1):\n        bell_sum+=i\n    \n    #list of partitions of n\n    partition_list=[]\n    \n    #find all ways to partition the sum of n into sum/2 partitions\n    for i in range(1, int(n/2)+1):\n        \n        #find the number of ways to partition the remaining sum of n into 2 partitions\n        num_ways_to_partition_remaining_sum=0\n        for j in range(1, int(n/2)+1):\n            if i+j==n:\n                num_ways_to_partition_remaining_sum+=1\n        \n        #add the number of ways to partition the remaining sum to the list of partitions\n        partition_list.append(num_ways_to_partition_remaining_sum)\n    \n    #find the number of ways to partition the sum of n into 2 partitions\n    num_ways_to_partition_sum=0\n    for i in range(1, int(n/2)+1):\n        num_ways_to_partition_sum+=partition_list[i-1]\n    \n    return bell_sum, partition_list, num_ways_to_partition_sum\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = set()\n    bell_set.add(1)\n    bell_set.add(2)\n    for i in range(3,n+1):\n        bell_set.add(i)\n    bell_set.add(n+1)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 4\n    if n == 4: return 7\n    if n == 5: return 42\n    \n    count = 0\n    for i in range(1, n):\n        count += bell_number(i) * bell_number(n-i)\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_nums = [1,1,2,5,15,42,132,429,1430,4368,16796,58786,2329614,14302512,5765830,29523450,143017672,58804400,295024930,143019736,587877440,295212300,143017632,587888000,295112050,143017584,587891600,295140830,143015552,587969600,295026430,143017264,587979520,295025280,143015416,587985200,295020450,143014018,588064900,295023480,143013056,588067800,295024780,143011904,588082400,295023500,143011396,588088400,295021350,143010376,588087800,295024860,143010552,588089900,295026160,143010128,588094200,295024120,143010376,588097700,295026980,143010176,588097400,295027280,143010396,588098400,295028150,143010596,588098800,295029340,143010380,588098400,295029340,143010380,588098400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295030320,143010380,588099400,295"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    \n    def get_bell_number(n):\n        def bell_partition(partitions):\n            '''\n            partitions = list of partitions of length n, with each partition being\n            a list of integers [1,2,...,n]\n            '''\n            if len(partitions) == 1:\n                return 1\n            elif len(partitions) == 2:\n                return bell_partition([partitions[0][1:], partitions[1][1:]])\n            else:\n                return bell_partition([partitions[0][1:], partitions[1]]) + bell_partition(partitions[2:])\n        \n        bell_list = [list(range(i+1)) for i in range(n)]\n        return bell_partition(bell_list)\n    \n    return get_bell_number(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1]\n    \n    for i in range(n):\n        bells.append(0)\n    for i in range(n):\n        for j in range(i, n):\n            bells[j+1] += bells[i]\n    return bells[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Base Case\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n        \n    # Second base case\n    if n == 2:\n        return 1\n        \n    # Third base case\n    if n == 3:\n        return 2\n        \n    # 4th base case\n    if n == 4:\n        return 4\n        \n    # Recursion\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3) + bell_number(n-4)\n    \ndef partition(num):\n    '''\n    Write a function to partition a set of numbers.\n    '''\n    \n    # Base Case\n    if num < 1:\n        return 0\n    if num == 1:\n        return 1\n        \n    # Recursion\n    else:\n        return partition(num-1) + partition(num-2) + partition(num-3) + partition(num-4)\n    \ndef list_partition(num_list):\n    '''\n    Write a function to partition a set of numbers.\n    '''\n    \n    # Base Case\n    if len(num_list) < 1:\n        return 0\n    if len(num_list) == 1:\n        return 1\n        \n    # Recursion\n    else:\n        return partition(len(num_list) - 1) + list_partition(num_list[1:])\n        "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    Bell = [0]*(n+1)\n    Bell[0] = 1\n    Bell[1] = 1\n    for i in range(2, n+1):\n        Bell[i] = Bell[i-1] + Bell[i-2]\n    return Bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bells = {}\n    bells[0] = bell_series(0)\n    bells[1] = bell_series(1)\n    bells[2] = bell_series(2)\n    bells[3] = bell_series(3)\n    bells[4] = bell_series(4)\n    bells[5] = bell_series(5)\n    bells[6] = bell_series(6)\n    bells[7] = bell_series(7)\n    bells[8] = bell_series(8)\n    bells[9] = bell_series(9)\n    bells[10] = bell_series(10)\n    bells[11] = bell_series(11)\n    bells[12] = bell_series(12)\n    bells[13] = bell_series(13)\n    bells[14] = bell_series(14)\n    bells[15] = bell_series(15)\n    bells[16] = bell_series(16)\n    bells[17] = bell_series(17)\n    bells[18] = bell_series(18)\n    bells[19] = bell_series(19)\n    bells[20] = bell_series(20)\n    bells[21] = bell_series(21)\n    bells[22] = bell_series(22)\n    bells[23] = bell_series(23)\n    bells[24] = bell_series(24)\n    bells[25] = bell_series(25)\n    bells[26] = bell_series(26)\n    bells[27] = bell_series(27)\n    bells[28] = bell_series(28)\n    bells[29] = bell_series(29)\n    bells[30] = bell_series(30)\n    bells[31] = bell_series(31)\n    bells[32] = bell_series(32)\n    bells[33] = bell_series(33)\n    bells[34] = bell_series(34)\n    bells[35] = bell_series(35)\n    bells[36] = bell_series(36)\n    bells[37] = bell_series(37)\n    bells[38] = bell_series(38)\n    bells[39] = bell_series(39)\n    bells[40] = bell_series(40)\n    bells[41] = bell_series(41)\n    bells[42] = bell_series(42)\n    bells[43] = bell_series(43)\n    bells[44] = bell_series(44)\n    bells[45] = bell_series(45)\n    bells[46] = bell_series(46)\n    bells[47] = bell_series(47)\n    bells[48] = bell_series(48)\n    bells[49] = bell_series(49)\n    bells[50] = bell_series(50)\n    bells[51] = bell_series(51)\n    bells[52] = bell_series(52)\n    bells[53] = bell_series(53)\n    bells[54] = bell_series(54)\n    bells[55] = bell_series(55)\n    bells[56] = bell_series(56)\n    bells[57] = bell_series(57)\n    bells[58] = bell_series(58)\n    bells[59] = bell_series(59)\n    bells[60] = bell_series(60)\n    bells[61] = bell_series(61)\n    bells[62] = bell_series(62)\n    bells[63] = bell_series(63)\n    bells[64] = bell_series(64)\n    bells[65] = bell_series(65)\n    bells[66] = bell_series(66)\n    bells[67] = bell_series(67)\n    bells[68] = bell_series(68)\n    bells[69] = bell_series(69)\n    bells[70] = bell_series(70)\n    bells[71] = bell_series(71)\n    bells[72] = bell_series(72)\n    bells[73] = bell_series(73)\n    bells[74] = bell_series(74)\n    bells[75] = bell_series(75)\n    bells[76] = bell_series(76)\n    bells[77] = bell_series(77)\n    bells[78] = bell_series(78)\n    bells[79] = bell_series(79)\n    bells[80] = bell_series(80)\n    bells[81] = bell_series(81)\n    bells[82] = bell_series(82)\n    bells[83] = bell_series(83)\n    bells[84] = bell_series(84)\n    bells[85] = bell_series(85)\n    bells[86] = bell_series(86)\n    bells[87] = bell_series(87)\n    bells[88] = bell_series(88)\n    bells[89] = bell_series(89)\n    bells[90] = bell_series(90)\n    bells[91] = bell_series(91)\n    bells[92] = bell_series(92)\n    bells[93] = bell_series(93)\n    bells[94] = bell_series(94)\n    bells[95] = bell_series(95)\n    bells[96] = bell_series(96)\n    bells[97] = bell_series(97)\n    bells[98] = bell_series(98)\n    bells[99] = bell_series(99)\n    bells[100] = bell_series(100)\n    bells[101] = bell_series(101)\n    bells[102] = bell_series(102)\n    bells[103] = bell_series(103)\n    bells[104] = bell_series(104)\n    bells[105] = bell_series(105)\n    bells[106] = bell_series(106)\n    bells[107] = bell_series(107)\n    bells[108] = bell_series(108)\n    bells[109] = bell_series(109)\n    bells[110] = bell_series(110)\n    bells[111] = bell_series(111)\n    bells[112] = bell_series(112)\n    bells[113] = bell_series(113)\n    bells[114] = bell_series(114)\n    bells[115] = bell_series(115)\n    bells[116] = bell_series(116)\n    bells[117] = bell_series(117)\n    bells[118] = bell_series(118)\n    bells[119] = bell_series(119)\n    bells[120] = bell_series(120)\n    bells[121] = bell_series(121)\n    bells[122] = bell_series(122)\n    bells[123] = bell_series(123)\n    bells[124] = bell_series(124)\n    bells[125] = bell_series(125)\n    bells[126] = bell_series(126)\n    bells[127] = bell_series(127)\n    bells[128] = bell_series(128)\n    bells[129] = bell_series(129)\n    bells[130] = bell_series(130)\n    bells[131] = bell_series(131)\n    bells[132] = bell_series(132)\n    bells[133] = bell_series(133)\n    bells[134] = bell_series(134)\n    bells[135] = bell_series(135)\n    bells[136] = bell_series(136)\n    bells[137] = bell_series(137)\n    bells[138] = bell_series(138)\n    bells[139] = bell_series(139)\n    bells[140] = bell_series(140)\n    bells[141] = bell_series(141)\n    bells[142] = bell_series(142)\n    bel"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # note: the following line was added because the test case was not working:\n    # n = int(n)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sum([bell_number(i)*bell_number(n-i-1) for i in range(n)])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    if A[0] <= A[1]:\n        flag = 1\n    else:\n        flag = 0\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or \n            all(A[i] >= A[i+1] for i in range(len(A)-1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A:\n        n = len(A)\n        # If there is not any element left in the array, then return true.\n        if n == 1:\n            return True\n        # If all the elements are the same, then return true.\n        elif len(set(A)) == 1:\n            return True\n        # If all the elements are not the same, then we will do a linear scan of the array to find a change.\n        else:\n            # If there is no change in the array, then it is a monotonic array.\n            for i in range(n-1):\n                if A[i] > A[i+1]:\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n > 2:\n        if A[0] < A[1]:\n            for i in range(0,n-1):\n                if A[i] >= A[i+1]:\n                    return False\n        else:\n            for i in range(0,n-1):\n                if A[i] <= A[i+1]:\n                    return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    check = False\n    if len(s) == 1:\n        if s[0] in l:\n            check = True\n    else:\n        for i in range(len(l)-len(s)+1):\n            check = True\n            for j in range(len(s)):\n                if l[i+j]!= s[j]:\n                    check = False\n                    break\n            if check:\n                break\n    return check\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    l2 = l[:]\n    l2.pop(0)\n    return l2 == s\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    # print(l, s, [l[i] == s[i] for i in range(len(s))])\n    return all([l[i] == s[i] for i in range(len(s))])\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if l == s:\n        return True\n    for i in range(len(l)):\n        if i+len(s) <= len(l):\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_length = len(l)\n    s_length = len(s)\n    if s_length > l_length:\n        return False\n    for i in range(0, l_length - s_length + 1):\n        if l[i:i + s_length] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    print(l, s)\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple_length = len(Input)\n    List_of_tuple = []\n    for i in range(0,Tuple_length):\n        List_of_tuple.append(tuple(Input[i]))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(Input) == len(set(map(len, Input)))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = True\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                Output = False\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for index,tuple_num in enumerate(Input):\n        if len(tuple_num)!= len(Input[0]):\n            print(\"All tuples must have equal length\")\n            return False\n    print(\"All tuples have equal length\")\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    x=len(Input[0])\n    for i in Input:\n        if(len(i)!=x):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_l = len(Input)\n    result = {}\n    for i in range(tuple_l):\n        result[i] = len(Input[i])\n    return result == {0:tuple_l}\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(Input)) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Solution:\n    \n    def fun(Input):\n        if len(Input) == 0:\n            return True\n        else:\n            s = Input[0]\n            for i in Input:\n                if len(i)!= len(s):\n                    return False\n            return fun(Input[1:])\n    return fun(Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all([len(Input[0]) == len(i) for i in Input])\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = None\n    if len(Input) == len(set(Input)) :\n        Output = True\n    else :\n        Output = False\n    return Output\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    gap = len(nums)\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(a, b):\n        nums[a], nums[b] = nums[b], nums[a]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize swapped as True so the loop starts.\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    gap = len(nums)\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25)) # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n                \nif __name__ == '__main__':\n    import sys\n    nums = [int(i) for i in sys.argv[1:]]\n    comb_sort(nums)\n    print(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    gap = len(nums)\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0: \n        return False \n    for i in range(1, n): \n        if i * i == n: \n            return True\n        elif i * i > n: \n            break\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if n%i==0:\n            if (i*i)==n:\n                print(i)\n            elif (n-(i*i))==0:\n                print(i,n)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=1\n    while i*i <= n:\n        if i*i==n:\n            print(\"The number can be represented as the difference of two squares\")\n            break\n        i+=1\n    else:\n        print(\"The number can not be represented as the difference of two squares\")\n        \ndif_Square(5)"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<=0:\n        return(False)\n    for i in range(int(n**0.5)+1):\n        if i**2==n:\n            return(True)\n    return(False)\ndef dif_Squares(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    for i in range(n):\n        for j in range(i,n):\n            if i**2+j**2==n:\n                print(i,j)\n    return(None)\ndef dif_squares(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_1(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_2(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_3(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_4(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_5(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_6(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_7(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_8(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_9(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_10(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_11(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_12(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+1\n    return(None)\ndef dif_squares_13(n):\n    '''\n    Write a python function to print all the possible pairs of integers whose difference is equal to given number.\n    '''\n    if n<=0:\n        return(None)\n    i=1\n    while (i**2)<n:\n        j=1\n        while (j**2)+i**2<n:\n            if (j**2)+i**2==n:\n                print((i,j))\n            j=j+1\n        i=i+"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    for i in range(1,sqrt_n+1):\n        x = n - i*i\n        sqrt_x = int(math.sqrt(x))\n        if sqrt_x*sqrt_x == x:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the difference of two squares or not \n    while (i * i <= n): \n        if ((n - i * i) == 0 or (n - i * i) % 2 == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_Power(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two cubes or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the difference of two cubes or not \n    while (i * i * i <= n): \n        if ((n - i * i * i) == 0 or (n - i * i * i) % 2 == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_Prime(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of two prime numbers or not.\n    '''\n    # varible to store the number \n    i = 2\n    # check whether the number can be represented as the sum of two prime numbers or not \n    while (i <= n): \n        if (n % i == 0): \n            count = 0\n            for j in range(2, i): \n                if (i % j == 0): \n                    count = count + 1\n            if (count == 0): \n                print(\"Yes\") \n                return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_Sum(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of two cubes or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the sum of two cubes or not \n    while (i * i * i <= n): \n        if ((n - i * i * i) == 0 or (n - i * i * i) % 2 == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_Cube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of two squares or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the sum of two squares or not \n    while (i * i <= n): \n        if ((n - i * i) == 0 or (n - i * i) % 2 == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_Fibonacci(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of two Fibonacci numbers or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the sum of two Fibonacci numbers or not \n    while (i <= n): \n        if ((n - i) == 0 or (n - i) % 2 == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_Primes(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of two prime numbers or not.\n    '''\n    # varible to store the number \n    i = 2\n    # check whether the number can be represented as the sum of two prime numbers or not \n    while (i <= n): \n        if ((n - i) == 0 or (n - i) % 2 == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_PrimesNum(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of prime numbers or not.\n    '''\n    # varible to store the number \n    i = 2\n    # check whether the number can be represented as the sum of prime numbers or not \n    while (i <= n): \n        if (isPrime(i)): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_EvenNum(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of even numbers or not.\n    '''\n    # varible to store the number \n    i = 2\n    # check whether the number can be represented as the sum of even numbers or not \n    while (i <= n): \n        if (n % i == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_OddNum(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of odd numbers or not.\n    '''\n    # varible to store the number \n    i = 2\n    # check whether the number can be represented as the sum of odd numbers or not \n    while (i <= n): \n        if ((n - i) % 2 == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_Divisors(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of divisors or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the sum of divisors or not \n    while (i <= n): \n        if (n % i == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_DivisorsNum(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of divisors or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the sum of divisors or not \n    while (i <= n): \n        if (isPrime(i)): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_DivisorsNum_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of divisors or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the sum of divisors or not \n    while (i <= n): \n        if (isPrime(n)): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_DivisorsNum_3(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of divisors or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the sum of divisors or not \n    while (i <= n): \n        if (n % i == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_DivisorsNum_4(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of divisors or not.\n    '''\n    # varible to store the number \n    i = 1\n    # check whether the number can be represented as the sum of divisors or not \n    while (i <= n): \n        if (n % i == 0): \n            print(\"Yes\") \n            return\n        i = i + 1\n    print(\"No\") \n    return\ndef dif_Di"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    def check_square(n, s):\n        if math.sqrt(n) % 1 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    for i in range(1,n):\n        if math.sqrt(i) == int(math.sqrt(i)):\n            continue\n        if math.sqrt(i)**2 == n:\n            return True\n        if math.sqrt(n - i)**2 == n:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if (((i*i) + (n-i)*(n-i)) == n):\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(n**0.5)**2 == n:\n        return 'Square'\n    elif int(n**0.5)**2 < n:\n        return 'Two Squares'\n    else:\n        return 'No'\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    \n    if patterns[0] == 'any':\n        return True\n    \n    if patterns[0] == 'all' or patterns[0] =='single':\n        return all([colors[0] in patterns[1:]]) and is_samepatterns(colors[1:], patterns[1:])\n    \n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not colors or not patterns:\n        return False\n    for i in range(len(colors)):\n        if colors[i] =='shinygold':\n            if i == len(colors)-1:\n                return True\n            for j in range(i+1, len(colors)):\n                if patterns[j] in [child for child in patterns[i].children]:\n                    return True\n    return False\n        \nclass Node:\n    def __init__(self, color):\n        self.color = color\n        self.children = []\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i == 0:\n            if patterns[i] == patterns[i+1]:\n                continue\n            else:\n                return False\n        elif i == len(colors)-1:\n            if patterns[i] == patterns[i-1]:\n                continue\n            else:\n                return False\n        else:\n            if (patterns[i] == patterns[i-1] and patterns[i]!= patterns[i+1]) or (patterns[i]!= patterns[i-1] and patterns[i] == patterns[i+1]):\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # col_len = len(colors)\n    # pattern_len = len(patterns)\n    # count = 0\n    # for i in range(pattern_len):\n    #     col_index = 0\n    #     for j in range(pattern_len):\n    #         if patterns[i][j] == colors[col_index]:\n    #             col_index = col_index + 1\n    #         else:\n    #             break\n    #     if col_index == col_len:\n    #         count = count + 1\n    # if count == pattern_len:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if we are passed an empty list\n    if not colors:\n        return False\n    # else\n    i = 0\n    for color in colors:\n        # get the length of pattern list\n        n = len(patterns)\n        # check if our current color matches the first color in the pattern list\n        if i < n and color == patterns[i][0]:\n            i += 1\n        # else if our current color doesn't match the first color in the pattern list then we are done\n        else:\n            return False\n    # if we make it this far then we have a valid sequence\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i,j in zip(colors, patterns):\n        if i == 'R':\n            if j!= 'G':\n                return False\n        elif i == 'G':\n            if j!= 'R':\n                return False\n    return True\n        "
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all([c in patterns.keys() for c in colors])\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(colors[i] == patterns[i] for i in range(len(colors)))\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not colors or not patterns:\n        return False\n    if len(colors)!= len(patterns):\n        return False\n    # TODO: Write your code here\n    for i in range(len(colors)):\n        if not has_color_pattern(colors[i], patterns[i]):\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        num = 1\n        for j in range(len(test_list[i])):\n            num = num * test_list[i][j]\n        if num % K == 0:\n            new_list.append(test_list[i])\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if not any([x%K for x in test_list[i]+test_list[j]]):\n                result_list.append(test_list[i] + test_list[j])\n    return result_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i, j in enumerate(test_list):\n        if len(j) == K and all(map(lambda x: x % K == 0, j)):\n            result.append(j)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all([i%K == 0 for i in t])]\n    \nprint(find_tuples(test_list, K))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    import itertools\n    \n    return list(itertools.permutations(test_list, K))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[i][2] % K == 0:\n            result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = list()\n    for x in test_list:\n        if all([y % K == 0 for y in x]):\n            result_list.append(x)\n    return result_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all([j%K==0 for j in i]):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return filter(lambda a: all(i%K==0 for i in a), test_list)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # brute force\n    if K == 1:\n        tuple_list = list()\n        for tup in test_list:\n            for el in tup:\n                if el % K == 0:\n                    tuple_list.append(tup)\n                    break\n        return tuple_list\n    # divisibility by K of each element in the tuple\n    else:\n        tuple_list = list()\n        for tup in test_list:\n            flag = True\n            for el in tup:\n                if el % K!= 0:\n                    flag = False\n                    break\n            if flag:\n                tuple_list.append(tup)\n        return tuple_list\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def is_divisible_by_n(n):\n        return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\nn=int(input(\"Enter a number:\"))\nprint(is_Diff(n))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print (\"The given number is divisible by 11\") \n    else: \n        print (\"The given number is not divisible by 11\") \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n % 11 == 0): \n        return True\n    else: \n        return False\nprint(is_Diff(6))\nprint(is_Diff(44))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\nn = int(input(\"Enter a number to be checked: \"))\nif is_Diff(n) == True: \n    print(n, \"is divisible by 11\")\nelse: \n    print(n, \"is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n    \n    \ndef is_DivisibleBy7(n): \n    '''\n    Write a Python function to check whether a number is divisible by 7 or not. \n    Note : A number is divisible by 7 if remainder of the division is 0.\n    For example, numbers divisible by 7 are :\n    1, 14, 70, 105, 140, 175, 210, etc.\n    '''\n    if (n % 7 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0): \n        print(\"The number is divisible by 11\")\n    else:\n        print(\"The number is not divisible by 11\")\nis_Diff(int(input(\"Enter the number: \")))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s) % 2) \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    return length%2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s)%2==1)\nprint(word_len('PYTHON'))\nprint(word_len('MARSHMALLOW'))\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(3*n-1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    tetrahedral_number_nminus1 = tetrahedral_number(n-1)\n    tetrahedral_number_nminus2 = tetrahedral_number(n-2)\n    return 3*tetrahedral_number_nminus1 + tetrahedral_number_nminus2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2))/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if type(n)!= int:\n        raise TypeError('The input must be an integer')\n    if n <= 0:\n        raise ValueError('The input must be a positive integer')\n    if n == 1:\n        return 1\n    return n*(n+1)*(n+2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_number_list = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105]\n    if n <=0: \n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else: \n        for i in range(1, n+1): \n            tetrahedral_number_list.append(tetrahedral_number_list[i]+tetrahedral_number_list[i-1])\n        return tetrahedral_number_list[-1]\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi * (r**2)) * h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * (r**2) * h\n    \ndef volume_prism(r,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return (1/3) * r**2 * h\n    \ndef volume_pyramid(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (1/3) * math.pi * (r**2) * h\n    \ndef volume_spherical_cup(r,h):\n    '''\n    Write a function to find the volume of a spherical cup.\n    '''\n    return (1/3) * (math.pi * (r**2)) * (h**2 + r**2)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # <your code here>\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\nprint(volume_sphere(3))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # r is the radius of the sphere\n    v = (4.0/3.0)*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4/3)*math.pi*(r**3))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi*(r**3)/6\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*(r+h)\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*h/3\ndef volume_cuboid(a, b, c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef volume_cuboid_lateral_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a cuboid.\n    '''\n    return 2*(a*b+a*c+b*c)\ndef volume_cuboid_top_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a cuboid.\n    '''\n    return a*b*c\ndef volume_rectangular_prism(a, b, c):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a*b*c\ndef volume_rectangular_prism_lateral_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a rectangular prism.\n    '''\n    return 2*(a+b+c)\ndef volume_rectangular_prism_top_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a rectangular prism.\n    '''\n    return a*b*c\ndef volume_triangular_prism(a, b, c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return (a*b*c)/3\ndef volume_triangular_prism_lateral_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a triangular prism.\n    '''\n    return a+b+c\ndef volume_triangular_prism_top_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a triangular prism.\n    '''\n    return (a*b*c)/2\ndef volume_triangular_prism_base(a, b, c):\n    '''\n    Write a function to find the lateral surface of a triangular prism.\n    '''\n    return (a*b*c)/6\ndef volume_trapezoidal_prism(a, b, c, d):\n    '''\n    Write a function to find the volume of a trapezoidal prism.\n    '''\n    return (a+b)*(c+d)/2\ndef volume_trapezoidal_prism_lateral_surface(a, b, c, d):\n    '''\n    Write a function to find the lateral surface of a trapezoidal prism.\n    '''\n    return (a+b)*(c+d)\ndef volume_trapezoidal_prism_top_surface(a, b, c, d):\n    '''\n    Write a function to find the lateral surface of a trapezoidal prism.\n    '''\n    return (a*b+b*c+c*d+a*d)\ndef volume_pyramid(a, b, c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (a*b*c)/3\ndef volume_pyramid_lateral_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a pyramid.\n    '''\n    return a+b+c\ndef volume_pyramid_top_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a pyramid.\n    '''\n    return a*b*c/3\ndef volume_wedge(r, h):\n    '''\n    Write a function to find the volume of a wedge.\n    '''\n    return math.pi*(r*h)/3\ndef volume_wedge_lateral_surface(r, h):\n    '''\n    Write a function to find the lateral surface of a wedge.\n    '''\n    return 2*r+2*h\ndef volume_wedge_top_surface(r, h):\n    '''\n    Write a function to find the lateral surface of a wedge.\n    '''\n    return r*h\ndef volume_cone_lateral_surface(r, h):\n    '''\n    Write a function to find the lateral surface of a cone.\n    '''\n    return math.pi*r*(r+h)\ndef volume_cone_base(r, h):\n    '''\n    Write a function to find the lateral surface of a cone.\n    '''\n    return math.pi*r*r\ndef volume_cone_top_surface(r, h):\n    '''\n    Write a function to find the lateral surface of a cone.\n    '''\n    return math.pi*r*h/3\ndef volume_cylinder_lateral_surface(r, h):\n    '''\n    Write a function to find the lateral surface of a cylinder.\n    '''\n    return 2*r*(r+h)\ndef volume_cylinder_base(r, h):\n    '''\n    Write a function to find the lateral surface of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_cylinder_top_surface(r, h):\n    '''\n    Write a function to find the lateral surface of a cylinder.\n    '''\n    return math.pi*r*r\ndef volume_cuboid_lateral_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a cuboid.\n    '''\n    return 2*(a*b+a*c+b*c)\ndef volume_cuboid_top_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a cuboid.\n    '''\n    return a*b*c\ndef volume_cube_lateral_surface(a):\n    '''\n    Write a function to find the lateral surface of a cube.\n    '''\n    return 6*a\ndef volume_cube_top_surface(a):\n    '''\n    Write a function to find the lateral surface of a cube.\n    '''\n    return a**3\ndef volume_cube_base(a):\n    '''\n    Write a function to find the lateral surface of a cube.\n    '''\n    return 6\ndef area_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return a**2\ndef area_square_lateral_surface(a):\n    '''\n    Write a function to find the lateral surface of a square.\n    '''\n    return 4*a\ndef area_square_top_surface(a):\n    '''\n    Write a function to find the lateral surface of a square.\n    '''\n    return 4*a\ndef area_rectangular_prism(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2*(a+b+c)\ndef area_rectangular_prism_lateral_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a rectangular prism.\n    '''\n    return 2*(a+b+c)\ndef area_rectangular_prism_top_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a rectangular prism.\n    '''\n    return a*b*c\ndef area_rectangular_prism_lateral_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a rectangular prism.\n    '''\n    return a*b*c\ndef area_triangular_prism(a, b, c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    return a*b*c/3\ndef area_triangular_prism_lateral_surface(a, b, c):\n    '''\n    Write a function to find the lateral surface of a triangular prism.\n    ''"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum+=ord(i)\n    print(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #code here\n    return(sum([ord(i) for i in strr])%26)\n    \n    \n    \n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return chr(sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a = 0\n    for i in strr:\n        a = a + ord(i)\n    a = a % 26\n    print(chr(a))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum = sum + ord(strr[i])\n    return(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr)>0:\n        return sum([ord(i) for i in strr])%26\n    return None\n    \ndef get_Char_Sum(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(i) for i in strr])%26\n    \ndef get_Char_Sum_Bruteforce(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum(ord(i) for i in strr)%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in range(len(strr)):\n        sum+=ord(strr[i])\n    return(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(i) for i in strr]) % 26\n    \n    # code here\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)%26\n    return sum\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    for i in strr:\n        if i not in string.ascii_lowercase:\n            print(\"Please enter only lowercase alphabets\")\n            return\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    else: \n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    try:\n        if n == 0:\n            return 0\n        else:\n            return sequence(n-1) + 2*sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n<1:\n        raise ValueError\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return sequence(n-1)+sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return\n    if n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 34\n    elif n == 8:\n        return 55\n    elif n == 9:\n        return 89\n    else:\n        return None\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def helper(n, nums): \n        if n == 1: \n            return nums[0]\n        if n == 2: \n            return nums[0] + nums[1]\n        else: \n            return helper(n-1, nums) + nums[n-2]\n    return helper(n, [0,1])\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return [1, 2, 3]\n    else:\n        prev = sequence(n-1)\n        return prev + [1, 1]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        return sequence(n-3) + sequence(n-2) + sequence(n-1)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=math.pi\n    surface=4*pi*r**2\n    return surface\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r**2\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return sa\ndef perimeter_rectangle(length,breadth):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter=2*(length+breadth)\n    return perimeter\ndef maximum_number(num1,num2,num3,num4):\n    '''\n    Write a function to find the maximum of 4 numbers.\n    '''\n    max_number=max(num1,num2,num3,num4)\n    return max_number\ndef is_leap_year(year):\n    '''\n    Write a function to check whether a year is a leap year or not.\n    '''\n    if year%4==0:\n        return True\n    else:\n        return False\ndef median_number(num1,num2,num3,num4):\n    '''\n    Write a function to find the median of 4 numbers.\n    '''\n    sorted_list=[num1,num2,num3,num4]\n    sorted_list.sort()\n    if len(sorted_list)%2!=0:\n        median=sorted_list[len(sorted_list)//2]\n    else:\n        median=(sorted_list[(len(sorted_list)//2)-1]+sorted_list[(len(sorted_list)//2)])/2\n    return median\ndef is_palindrome(num):\n    '''\n    Write a function to check whether a number is palindrome or not.\n    '''\n    if str(num)==str(num)[::-1]:\n        return True\n    else:\n        return False\ndef armstrong_number(num):\n    '''\n    Write a function to check whether a number is an Armstrong number or not.\n    '''\n    temp=num\n    sum=0\n    while num>0:\n        rem=num%10\n        sum+=rem**3\n        num=num//10\n    if sum==temp:\n        return True\n    else:\n        return False\ndef digital_root(num):\n    '''\n    Write a function to calculate the digital root of a number.\n    '''\n    num=str(num)\n    root=0\n    for i in num:\n        root+=int(i)\n    if root>9:\n        return digital_root(root)\n    else:\n        return root\ndef factors_of_num(num):\n    '''\n    Write a function to find the factors of a number.\n    '''\n    factors=[]\n    for i in range(1,num+1):\n        if num%i==0:\n            factors.append(i)\n    return factors\ndef armstrong_number_in_list(list):\n    '''\n    Write a function to check whether a list contains armstrong numbers or not.\n    '''\n    for i in list:\n        if armstrong_number(i)==False:\n            return False\n    return True\ndef greatest_common_factor(num1,num2):\n    '''\n    Write a function to find the greatest common factor of 2 numbers.\n    '''\n    if num1>num2:\n        greater=num1\n    else:\n        greater=num2\n    for i in range(1,greater+1):\n        if num1%i==0 and num2%i==0:\n            greatest_common_factor=i\n    return greatest_common_factor\ndef gcd(num1,num2):\n    '''\n    Write a function to find the greatest common divisor of 2 numbers.\n    '''\n    if num1>num2:\n        smaller=num2\n    else:\n        smaller=num1\n    for i in range(1,smaller+1):\n        if num1%i==0 and num2%i==0:\n            gcd=i\n    return gcd\ndef fibonacci(num):\n    '''\n    Write a function to generate the nth Fibonacci number.\n    '''\n    fibo=[0,1]\n    if num==0:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        for i in range(2,num+1):\n            fibo.append(fibo[i-2]+fibo[i-1])\n        return fibo[num]\ndef sum_of_digits(num):\n    '''\n    Write a function to sum of digits of a number.\n    '''\n    num=str(num)\n    sum=0\n    for i in num:\n        sum+=int(i)\n    return sum\ndef remove_duplicates(list):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    sorted_list=sorted(list)\n    new_list=[]\n    for i in sorted_list:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\ndef factorial(num):\n    '''\n    Write a function to compute factorial of a number.\n    '''\n    factorial=1\n    if num==0:\n        return 1\n    elif num<0:\n        return \"Factorial of a negative number does not exist\"\n    else:\n        for i in range(1,num+1):\n            factorial*=i\n        return factorial\ndef prime_factors(num):\n    '''\n    Write a function to find the prime factors of a number.\n    '''\n    factors=[]\n    for i in range(2,num+1):\n        if num%i==0:\n            factors.append(i)\n    return factors\ndef is_perfect_square(num):\n    '''\n    Write a function to check whether a number is a perfect square or not.\n    '''\n    root=int(num**0.5)\n    if root*root==num:\n        return True\n    else:\n        return False\ndef print_numbers(num1,num2):\n    '''\n    Write a function to print the numbers from num1 to num2.\n    '''\n    for i in range(num1,num2+1):\n        print(i)\ndef print_odd_numbers(num1,num2):\n    '''\n    Write a function to print the odd numbers from num1 to num2.\n    '''\n    for i in range(num1,num2+1):\n        if i%2==0:\n            pass\n        else:\n            print(i)\ndef print_square_numbers(num1,num2):\n    '''\n    Write a function to print the square numbers from num1 to num2.\n    '''\n    for i in range(num1,num2+1):\n        if i**0.5==int(i**0.5):\n            print(i)\ndef print_numbers_list(list):\n    '''\n    Write a function to print the numbers from a list.\n    '''\n    for i in list:\n        print(i)\ndef prime_numbers_list(num):\n    '''\n    Write a function to print prime numbers from a list of numbers.\n    '''\n    for i in range(num):\n        if i<=1:\n            pass\n        else:\n            for j in range(2,i+1):\n                if i%j==0:\n                    break\n            else:\n                print(i)\ndef print_prime_factors(num):\n    '''\n    Write a function to print prime factors of a number.\n    '''\n    prime_factors=prime_factors(num)\n    for i in prime_factors:\n        print(i)\ndef print_multiply_table(num):\n    '''\n    Write a function to print multiplication table of a number.\n    '''\n    for i in range(1,num+1):\n        for j in range(1,num+1):\n            print(i*j,end=\"\\t\")\n        print()\ndef print_prime_factors_of_number(num):\n    '''\n    Write a function to print prime factors of a number.\n    '''\n    prime_factors=prime_factors(num)\n    for i in prime_factors:\n        print(i)\ndef print_multiply_table_of_number(num):\n    '''\n    Write a function to print multiplication table of "
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r * r * r\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * l * l\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return l * l * l\ndef volume_of_rectangular_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l * w * h\ndef surfacearea_rectangular_prism(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2 * (l * w + l * h + w * h)\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5 * a * b\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (1.0/3.0) * a * b * c\ndef area_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return 0.5 * (a + b) * c\ndef volume_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return (1.0/3.0) * (a + b) * c * d\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi * r * r\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2 * math.pi * r\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1.0/3.0 * math.pi * r * r * h\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (1.0/3.0) * math.pi * r * r + math.pi * r * h\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2.0 * math.pi * r * (r + h)\ndef perimeter_cylinder(r,h):\n    '''\n    Write a function to find the perimeter of a cylinder.\n    '''\n    return 2 * math.pi * r + 2 * math.pi * r * h\ndef volume_cone_section(r,h,angle):\n    '''\n    Write a function to find the volume of a cone section.\n    '''\n    return 1.0/3.0 * math.pi * r * r * h * (1 - math.cos(angle))\ndef surfacearea_cone_section(r,h,angle):\n    '''\n    Write a function to find the surface area of a cone section.\n    '''\n    return (1.0/3.0) * math.pi * r * r * h * (math.sin(angle))\ndef area_rightcircularcone(r):\n    '''\n    Write a function to find the area of a right circular cone.\n    '''\n    return math.pi * r * r\ndef volume_rightcircularcone(r):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    return 1.0/3.0 * math.pi * r * r * r\ndef perimeter_rightcircularcone(r):\n    '''\n    Write a function to find the perimeter of a right circular cone.\n    '''\n    return 2 * math.pi * r\ndef volume_rightcircularcylinder(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    return 1.0/3.0 * math.pi * r * r * h\ndef surfacearea_rightcircularcylinder(r,h):\n    '''\n    Write a function to find the surface area of a right circular cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef perimeter_rightcircularcylinder(r,h):\n    '''\n    Write a function to find the perimeter of a right circular cylinder.\n    '''\n    return 2 * math.pi * r + 2 * math.pi * r * h\ndef area_rectangular_prism_barrier(l,w,h):\n    '''\n    Write a function to find the area of a rectangular prism.\n    '''\n    return 2 * (l * w + l * h + w * h)\ndef volume_rectangular_prism_barrier(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l * w * h\ndef area_rectangular_prism_covering(l,w,h):\n    '''\n    Write a function to find the area of a rectangular prism.\n    '''\n    return 2 * (l * w + l * h + w * h)\ndef volume_rectangular_prism_covering(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l * w * h\ndef area_rectangular_prism_gate(l,w,h):\n    '''\n    Write a function to find the area of a rectangular prism.\n    '''\n    return 2 * (l * w + l * h + w * h)\ndef volume_rectangular_prism_gate(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l * w * h\ndef volume_rectangular_prism_slab(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l * w * h\ndef surfacearea_rectangular_prism_covering(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2 * (l * w + l * h + w * h)\ndef surfacearea_rectangular_prism_gate(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2 * (l * w + l * h + w * h)\ndef surfacearea_rectangular_prism_slab(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2 * (l * w + l * h + w * h)\ndef volume_rectangular_prism_barrier(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l * w * h\ndef surfacearea_rectangular_prism_barrier(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2 * (l * w + l * h + w * h)\ndef area_rectangular_pyramid(l,w,h):\n    '''\n    Write a function to find the area of a rectangular pyramid.\n    '''\n    return 2 * (l * w + l * h + w * h)\ndef volume_rectangular_pyramid(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular pyramid.\n    '''\n    return l * w * h\ndef surfacearea_rectangular_pyramid(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular pyramid.\n    '''\n    return 2 * (l * w + l * h + w * h"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if type(r) == int or type(r) == float:\n        surfacearea = 4 * math.pi * r ** 2\n        print(surfacearea)\n    else:\n        print('The radius is not an integer or float.')\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((1 + 5**.5) / 2 * n - 3**.5 / 4 * n**2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def triangle_number(n):\n        return (n * (2*n - 1)) // 2\n    def hexagon_number(n):\n        return (n * (2*n - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError('Please enter a positive integer greater than or equal to 1.')\n    else:\n        for i in range(1,n):\n            print(i)\n        return None\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n -= 1\n    if n % 2 == 0:\n        return n * (n + 1) // 2\n    else:\n        return (n + 1) * n // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    s = 1\n    for x in range(0, n):\n        s += 1 + 6 * x\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Get the hexagonal number of the first layer\n    hexagonal_num = hexagonal_number(1)\n    # Return the first layer's hexagonal number\n    return hexagonal_num * n\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    return ((2*n) + 1)**2 - 1\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n) + hexagonal_number(n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #return dict(dict1, **dict2, **dict3) #works only in python 3.5+\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merge_dict = {}\n    merge_dict = dict1.copy()\n    merge_dict.update(dict2)\n    merge_dict.update(dict3)\n    return merge_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2) and dict1.update(dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    dict4={}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    \n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    dict_out = dict1\n    return dict_out\ndict1 = {\n    \"1\": \"Ethan\",\n    \"2\": \"Jackson\",\n    \"3\": \"Brian\"\n}\ndict2 = {\n    \"4\": \"Pablo\",\n    \"5\": \"Gibson\",\n    \"6\": \"Thomas\"\n}\ndict3 = {\n    \"7\": \"Rodney\",\n    \"8\": \"Wade\",\n    \"9\": \"Jett\"\n}\nprint(merge_dictionaries_three(dict1,dict2,dict3))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1.keys():\n        if key in dict2.keys() and key in dict3.keys():\n            dict4[key] = (dict1[key],dict2[key],dict3[key])\n        elif key in dict2.keys() and key not in dict3.keys():\n            dict4[key] = (dict1[key],dict2[key],None)\n        elif key in dict3.keys() and key not in dict2.keys():\n            dict4[key] = (dict1[key],None,dict3[key])\n        elif key not in dict2.keys() and key not in dict3.keys():\n            dict4[key] = (dict1[key],None,None)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #Write your code here\n    final = ct.defaultdict(list)\n    for key in dict1.keys():\n        final[key].extend(dict1[key])\n    for key in dict2.keys():\n        final[key].extend(dict2[key])\n    for key in dict3.keys():\n        final[key].extend(dict3[key])\n    return final\n    "
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = dict()\n    for ele in list1:\n        counts[ele] = counts.get(ele, 0) + 1\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = dict()\n    for elem in list1:\n        count[elem] = list1.count(elem)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1=collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # initialize a dictionary\n    # return a dict\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict.keys():\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic={}\n    for i in list1:\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return dict(collections.Counter(list1))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if type(N)!= int:\n        return \"Error: please enter a valid number\"\n    if N <= 0:\n        return \"Error: please enter a positive number\"\n    n = abs(N)\n    smallest_num = n\n    for i in range(1, n):\n        if n % i == 0:\n            if abs(n / i - i) < abs(n / i - smallest_num):\n                smallest_num = n / i\n    return int(smallest_num)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num_rec(n, closest_so_far=None):\n        if closest_so_far is None:\n            closest_so_far = n\n        if n - closest_so_far == 1:\n            return closest_so_far\n        return closest_num_rec(n, closest_so_far-1)\n    return closest_num_rec(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(range(n), key=lambda x: abs(x-n))\n    \nprint(closest_num(19))"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = abs(N)\n    i = 0\n    j = 0\n    while True:\n        if N % 2 == 0:\n            if N//2!= N:\n                i = N//2\n                break\n            else:\n                j = N//2\n                break\n        elif N % 3 == 0:\n            if N//3!= N:\n                i = N//3\n                break\n            else:\n                j = N//3\n                break\n        elif N % 5 == 0:\n            if N//5!= N:\n                i = N//5\n                break\n            else:\n                j = N//5\n                break\n        N += 1\n    if N - i >= j - N:\n        return i\n    else:\n        return j\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    def all_nums(n):\n        '''\n        Generate all numbers up to N.\n        '''\n        nums = []\n        for i in range(1, N + 1):\n            nums.append(i)\n        return nums\n    \n    def closest_num_gen(n, nums):\n        '''\n        Generate all numbers which are smaller than n.\n        '''\n        for i in nums:\n            if i < n:\n                yield i\n    \n    return next(closest_num_gen(N, all_nums(N)))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return None\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n    else:\n        digits = [int(x) for x in str(N)]\n        digit = digits[-1]\n        new_digit = 0\n        if digit == 1:\n            new_digit = 9\n        elif digit == 9:\n            new_digit = 1\n        else:\n            new_digit = digit-1\n        # find the smallest number greater than N\n        # if no such number exist, return N\n        num_i = N + 10**(len(digits)-1)\n        while True:\n            num_i -= 10**(len(digits)-1)\n            digits = [int(x) for x in str(num_i)]\n            if digits[-1] < new_digit:\n                return num_i\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    global_min = N\n    if N < 10:\n        return 0\n    for i in range(N//10):\n        if int(N%(10**(i+1)))/(10**i) < global_min:\n            global_min = int(N%(10**(i+1)))/(10**i)\n        elif int(N%(10**(i+1)))/(10**i) == global_min:\n            global_min = int(N%(10**(i+1)))/(10**i)\n            for j in range(i+1, N//(10**i)):\n                if int(N%(10**(j+1)))/(10**j) < global_min:\n                    global_min = int(N%(10**(j+1)))/(10**j)\n                elif int(N%(10**(j+1)))/(10**j) == global_min:\n                    global_min = int(N%(10**(j+1)))/(10**j)\n        elif int(N%(10**(i+1)))/(10**i) > global_min:\n            return int(N%(10**(i+1)))/(10**i)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = []\n    for i in range(1, N+1):\n        num_list.append(i)\n    num_list.sort()\n    ans = []\n    for num in num_list:\n        ans.append(abs(num-N))\n    return num_list[ans.index(min(ans))]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = n // 2 + 1\n    return n\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1=list1.split()\n    max1=0\n    for i in list1:\n        if len(i)>max1:\n            max1=len(i)\n    return max1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max1 = len(list1[0])\n    for i in list1:\n        if len(i) > max1:\n            max1 = len(i)\n    return max1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = []\n    for i in list1:\n        length.append(len(i))\n    print(length)\n    print(\"The length of the longest word is \", max(length))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    print(length)\n    \n    #Alternate method\n    # list1 = ['hello','world']\n    # max(list1, key=len)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max=0\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n    \n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1, key = len)))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0,len(str1)-len(sub_str)+1):\n        if sub_str==str1[i:len(sub_str)+i]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    flag = False\n    for string in str1:\n        if sub_str in string:\n            flag = True\n            break\n    return flag\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    flag = False\n    for i in range(len(str1)):\n        if str1[i: i + len(sub_str)] == sub_str:\n            flag = True\n            break\n    return flag\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    res = []\n    for i in range(0, len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_str = str1.split(\" \")\n    for str_val in list_str:\n        if str_val == sub_str:\n            return True\n        else:\n            pass\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1.find(sub_str)!= -1:\n        return str1.find(sub_str)\n    else:\n        return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_count = 0\n    for str in str1:\n        if sub_str in str:\n            sub_str_count += 1\n    return sub_str_count\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return [str for str in str1 if str.find(sub_str) > -1]\n    \ndef replace_substring(str1, old_str, new_str):\n    '''\n    Write a function to replace a substring in a string to another substring.\n    '''\n    return str1.replace(old_str, new_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i:]:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Get the number of digits\n    digit_count = len(str(n))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return not (n-sum_of_digits(n) in sum_of_digits(n))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sum = 0; \n    for i in range(1, n+1): \n        sum = sum + i; \n    if (sum % n == 0): \n        print(\"Yes\"); \n    else: \n        print(\"No\"); \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s=str(n)\n    if(s==s[::-1]):\n        for i in range(1,len(s)):\n            if(s[i]!=s[i-1] and s[i]!=s[i+1]):\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n // 2 + 1): \n        if (n % i == 0): \n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    previous = n[0]\n    l = len(n)\n    result = False\n    if (l%2 == 0):\n        for i in range(1,(l//2)+1):\n            if (int(n[i]) - int(previous))!= int(n[l-i]) - int(previous):\n                return False\n            previous = n[i]\n        return True\n    else:\n        for i in range(1,(l//2)+1):\n            if (int(n[i]) - int(previous))!= int(n[l-i]) - int(previous):\n                return False\n            previous = n[i]\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    \n    for i in range(len(n) - 1):\n        if n[i] == n[i+1]:\n            return False\n            \n    if n[0] > n[1] and n[1] > n[2]:\n        return True\n    \n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Given a number, check whether it is undulating or not. \n    # An undulating number is defined as a number which has an odd frequency of digits. \n    # If the number is undulating, then we will have two distinct digits which will be alternating. \n    # For example, the number 123456 will have only two distinct digits (1 and 2) which are alternated.\n    # For example, the number 123852 has two distinct digits (1 and 2) which are alternated.\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Code here\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    i = 1\n    while(n / i >= 1):\n        i *= 10\n    while(n % i == 0):\n        return True\n    i /= 10\n    while(n % i == 0):\n        return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        a, b = float(a), int(b)\n        return pow(a, b)\n    except:\n        return \"Error\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==1:\n        return power(a,b-1)*a\n    else:\n        return power(a*a,b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    elif(b==1):\n        return a\n    elif(b%2==0):\n        return power(a,b//2)*power(a,b//2)\n    else:\n        return a*power(a,b//2)*power(a,b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(type(a) is not int or type(b) is not int):\n        raise TypeError\n    elif(a<0 or b<0):\n        raise ValueError\n    elif(b==0):\n        return 1\n    elif(b==1):\n        return a\n    elif(b%2==0):\n        return power(a,b//2)**2\n    elif(b%2==1):\n        return a*power(a,b//2)**2\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        return 1/power(a,-b)\n    elif b==0:\n        return 1\n    elif b==1:\n        return a\n    elif b%2==0:\n        return power(a*a,b//2)\n    else:\n        return a*power(a*a,b//2)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = sorted(test_list, key=itemgetter(1))[0]\n    return minimum\nprint index_minimum(test_list)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    print(sorted_list)\n    minimum_value = sorted_list[0]\n    return minimum_value[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for i in range(len(test_list)):\n        #print(test_list[i][1])\n        if i == 0:\n            index_min = 0\n            min_value = test_list[i][1]\n        else:\n            if test_list[i][1] < min_value:\n                index_min = i\n                min_value = test_list[i][1]\n    return test_list[index_min]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))[1]\n    for i in range(len(test_list)):\n        if test_list[i][1] == minimum:\n            return test_list[i][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #make a list of the lengths\n    lens = []\n    for i in range(len(lst)):\n        lens.append(len(lst[i]))\n    # return the index of the shortest list \n    return lens.index(min(lens))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    small_len = 999999999\n    for lst_item in lst:\n        if small_len > len(lst_item):\n            small_len = len(lst_item)\n    return small_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=len(lst[0])\n    for i in range(0,len(lst)):\n        if(len(lst[i])<min_len):\n            min_len=len(lst[i])\n    return(min_len)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    return 1 + min(Find_Min_Length(sublst) for sublst in lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum = len(lst[0])\n    for item in lst:\n        if len(item) < minimum:\n            minimum = len(item)\n    return minimum\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            \n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_list = min(lst, key=len)\n    print(\"length of min_list = \", len(min_list))\n    return(len(min_list))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return 1 + Find_Min_Length(Min_Length(lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=0\n    for elem in lst:\n        if(min_len==0 or len(elem)<min_len):\n            min_len=len(elem)\n    return min_len\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len=0\n    for elem in lst:\n        if(max_len==0 or len(elem)>max_len):\n            max_len=len(elem)\n    return max_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return len(min(lst, key = len))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    def count_divisor(n, i=2):\n        if n == 1:\n            return 1\n        if n % i == 0:\n            return 1 + count_divisor(n/i, i)\n        else:\n            return count_divisor(n, i+1)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 1 + divisor(n//2)\n    else:\n        return 1 + divisor(n+1)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        number_of_factors = 1\n        sqrt_n = int(n**(1/2))\n        for i in range(1, sqrt_n + 1):\n            if n % i == 0:\n                number_of_factors += 1\n        return number_of_factors * 2\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    try:\n        assert(n >= 0)\n    except AssertionError:\n        print('Error: Input must be non-negative')\n    else:\n        n_factors = 0\n        for i in range(1, n+1):\n            if n%i == 0:\n                n_factors += 1\n        return n_factors\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if(n % i == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        return divisor(n - 1) + 1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for value in list1:\n        if value in frequency:\n            frequency[value] += 1\n        else:\n            frequency[value] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = {}\n    for each_item in list1:\n        if each_item in my_dict:\n            my_dict[each_item] += 1\n        else:\n            my_dict[each_item] = 1\n    return my_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = flatten_list(list1)\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for x in list1:\n        if x in freq_dict:\n            freq_dict[x] += 1\n        else:\n            freq_dict[x] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_list = {}\n    for i in list1:\n        if i in frequency_list:\n            frequency_list[i] += 1\n        else:\n            frequency_list[i] = 1\n    return frequency_list\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Your code here\n    my_dictionary = {}\n    flattened_list = [item for sublist in list1 for item in sublist]\n    for i in flattened_list:\n        my_dictionary[i] = flattened_list.count(i)\n    return my_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_freq = {}\n    for list_item in list1:\n        for item in list_item:\n            list_freq[item] = list_freq.get(item, 0) + 1\n    print(list_freq)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_1 = []\n    for i in list1:\n        list_1.extend(i)\n    freq_dict = {}\n    for i in list_1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply(num1, num2):\n        '''\n        Multiply 2 numbers\n        '''\n        return num1 * num2\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    multiplied_list = 1\n    for i in numbers:\n        multiplied_list *= i\n    return int(multiplied_list/length)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result = result * n\n    return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    result = result / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y:x*y,numbers)//len(numbers)\n    \ndef sum_numbers(numbers):\n    '''\n    Write a function to return the sum of all the numbers in the list.\n    '''\n    return sum(numbers)\n    \ndef reverse_string(strings):\n    '''\n    Write a function to reverse a given string and return the string.\n    '''\n    return strings[::-1]\n    \ndef check_palindrome(strings):\n    '''\n    Write a function to check if a given string is palindrome.\n    '''\n    return strings == strings[::-1]\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply(numbers):\n        product = 1\n        for i in numbers:\n            product *= i\n        return product\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product = product * i\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(list(map(lambda x: x*2, numbers)))\n    print(len(numbers))\n    print(list(map(lambda x: x/len(numbers), numbers)))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary += str(n%2)\n        n //= 2\n    return binary[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary += str(n%2)\n        n = n//2\n    return binary[::-1]\n    \ndef list_of_palindromes(n):\n    '''\n    Write a function to return a list of all the palindromic numbers between 1 and n.\n    '''\n    my_list = []\n    for i in range(n+1):\n        j = i\n        k = decimal_to_binary(j)\n        if k[0] == k[-1]:\n            my_list.append(j)\n    return my_list\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:] \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = int(n / 2)\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    num = n\n    binary = \"\"\n    while num > 0:\n        binary = str(num%2) + binary\n        num = num // 2\n        \n    return binary\n    \ndef binary_to_decimal(b):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    n = len(b) - 1\n    decimal = 0\n    for digit in b:\n        decimal = decimal + int(digit) * (2 ** n)\n        n -= 1\n    return str(decimal)\n    \ndef string_to_list(s):\n    '''\n    Write a function to convert a binary string into a list.\n    '''\n    l = list()\n    for i in range(0, len(s)):\n        l.append(s[i])\n    return l\n    \ndef list_to_string(l):\n    '''\n    Write a function to convert a list into a binary string.\n    '''\n    s = \"\"\n    for i in range(0, len(l)):\n        s = s + l[i]\n    return s\n    \ndef decimal_to_hexadecimal(n):\n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string with no leading zeros.\n    '''\n    num = n\n    hexadecimal = \"\"\n    hex_digits = '0123456789ABCDEF'\n    while num > 0:\n        digit = num % 16\n        if digit > 9:\n            hexadecimal = hex_digits[digit] + hexadecimal\n        else:\n            hexadecimal = str(digit) + hexadecimal\n        num = num // 16\n        \n    return hexadecimal\n    \ndef hexadecimal_to_decimal(h):\n    '''\n    Write a function to convert the given hexadecimal number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    num = 0\n    hex_digits = '0123456789ABCDEF'\n    for digit in h:\n        num = num * 16\n        if digit in hex_digits:\n            num = num + hex_digits.index(digit)\n    return str(num)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n    # return \"\".join(map(lambda x: str(x), list(bin(n)[2:])))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    while True:\n        if num_str == num_str[::-1]:\n            return int(num_str)\n        else:\n            num_str = str(int(num_str) + 1)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    str_num = str(num)\n    for i in range(len(str_num)):\n        if str_num[i]!= str_num[-1 - i]:\n            return int(str_num[:i] + str_num[i] + str_num[i:] + str_num[-1 - i])\n    return int(str_num + str_num[-2:0:-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if '0' not in num_str:\n        return num + 1\n    if num < 10:\n        return num + 1\n    length = len(num_str)\n    mid = length//2\n    if length % 2 == 0:\n        temp = int(num_str[:mid][::-1])\n        if temp <= num:\n            return int(num_str[:mid-1] + str(int(num_str[:mid-1]) + 1))\n        else:\n            return int(num_str[:mid-1] + str(int(num_str[:mid-1]) + 2))\n    else:\n        temp = int(num_str[:mid][::-1])\n        if temp <= num:\n            return int(num_str[:mid] + str(int(num_str[:mid]) + 1))\n        else:\n            return int(num_str[:mid] + str(int(num_str[:mid]) + 2))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num = num + 1\n        num_str = str(num)\n        if len(num_str) == 1:\n            num_str = '0' + num_str\n        if is_palindrome(num_str):\n            return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_rev = num_str[::-1]\n    num_rev_list = list(num_rev)\n    for i in range(0, len(num_rev_list)):\n        if num_rev_list[i]!= '9':\n            num_rev_list[i] = str(int(num_rev_list[i]) + 1)\n            break\n        else:\n            num_rev_list[i] = '0'\n    num_rev = ''.join(num_rev_list)\n    num_rev = int(num_rev)\n    return num_rev\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Checking if the input is a palindrome\n    if num == reverse(num):\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        num = num*-1\n    if num%10 == 0:\n        return num\n    else:\n        while True:\n            num+=1\n            lst = []\n            num_lst = list(str(num))\n            for i in range(len(num_lst)):\n                lst.append(num_lst[i])\n            if len(lst)%2!= 0:\n                lst.append(lst[len(lst)//2])\n            for i in range(len(lst)//2):\n                if lst[i]!= lst[len(lst)-1-i]:\n                    break\n            else:\n                return num\n                break\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    if len(s) < 2:\n        return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if num_str[0] == \"1\":\n        num_str = \"9\" + num_str[1:]\n    else:\n        num_str = num_str[:-1] + str(int(num_str[-1])-1)\n    return int(num_str)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        middle = low + (high-low)//2\n        if k-1 < middle:\n            high = middle - 1\n        elif k-1 > middle:\n            low = middle + 1\n        else:\n            return arr[middle]\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l, r = 0, len(arr)-1\n    while True:\n        idx = l + (r-l)//2\n        if arr[idx] == k:\n            return arr[idx]\n        elif idx == len(arr)-1:\n            return arr[idx]\n        elif k > arr[idx]:\n            l = idx + 1\n        else:\n            r = idx - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    def swap(arr, x, y):\n        temp = arr[x]\n        arr[x] = arr[y]\n        arr[y] = temp\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        j = get_j(low, high, k)\n        if arr[j] == k:\n            return k\n        elif arr[j] < k:\n            low = j + 1\n        else:\n            high = j - 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[len(arr)-k]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    pivot = 0\n    while low <= high:\n        pivot = partition(arr, low, high)\n        if pivot == k - 1:\n            return arr[pivot]\n        elif pivot < k - 1:\n            low = pivot + 1\n        else:\n            high = pivot - 1\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pivot = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] <= arr[right]:\n            left += 1\n            pivot += 1\n        else:\n            right -= 1\n        \n    #return arr[left - 1]\n    if pivot == k:\n        return arr[left - 1]\n    elif k > pivot:\n        return kth_element(arr[left:], k - pivot)\n    else:\n        return kth_element(arr[:right], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, low, high, pivot_index):\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[high] = arr[high], arr[pivot_index]\n        i = low\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[high] = arr[high], arr[i]\n        return i\n    def kth_element_rec(arr, low, high, k):\n        if low <= high:\n            pivot_index = partition(arr, low, high, (high+low)//2)\n            if pivot_index == k-1:\n                return\n            elif pivot_index > k-1:\n                kth_element_rec(arr, low, pivot_index-1, k)\n            else:\n                kth_element_rec(arr, pivot_index+1, high, k)\n    if k <= 0 or k > len(arr):\n        return None\n    kth_element_rec(arr, 0, len(arr)-1, k)\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(map(lambda x: x.capitalize(), word.split('_')))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w if i == 0 else w.capitalize() for i, w in enumerate(word.split('_')))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into a list\n    # loop through the list\n        # if the index is 0\n        #     return word[0].upper() + word[1:]\n        # else\n        #     return word[0] + word[1].upper() + word[2:]\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # put your code here\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # return ''.join(word.title().split('_'))\n    # return word[0].upper() + word[1:].lower() if len(word) > 1 else word.lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n    \n    \ndef is_all_upper(text):\n    '''\n    Write a function to check whether a string is all upper or all lower.\n    '''\n    return text.islower() or text.isupper()\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Use list comprehension\n    # new_word = []\n    # for w in word.split('_'):\n    #     new_word.append(w.capitalize())\n    # return ''.join(new_word)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # first I'm gonna make a list of the chars in the snake string\n    snake_chars = []\n    for char in word:\n        if char == \"_\":\n            continue\n        snake_chars.append(char)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    return word.title().replace(\"_\", \"\")\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n * m + n * (m-1) + m * (n-1)) / 2\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = 0\n    for i in range(n):\n        for j in range(m):\n            if n*i + j == n*(i+1) - 1:\n                num += 1\n    return num\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if n == 1: \n        return 1\n    if m == 1: \n        return 2\n    \n    if m == 2: \n        return 4\n    \n    if m == 3: \n        return 8\n    \n    if m == 4: \n        return 15\n    \n    if m == 5: \n        return 24\n    \n    if m == 6: \n        return 35\n    \n    if m == 7: \n        return 56\n    \n    if m == 8: \n        return 70\n    \n    if m == 9: \n        return 126\n    \n    if m == 10: \n        return 252\n    \n    return (n - 1) * eulerian_num(n, m - 1) + eulerian_num(n - 1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    eulerian_num = 0\n    for i in range(1, n+1):\n        eulerian_num += (m**i)/i\n    return eulerian_num\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    elif n > 1:\n        return eulerian_num(n-1, m) + eulerian_num(n-2, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        return eulerian_num(m, n)\n    else:\n        return n * m + eulerian_num(n+1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0: return 1\n    if m == 0: return eulerian_num(n-1, 1)\n    elif n == 0: return eulerian_num(1, m-1)\n    else: return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n    \ndef eulerian_num_fast(n, m):\n    '''\n    Use dynamic programming to find the Eulerian number a(n, m).\n    '''\n    a = [[0 for j in range(m)] for i in range(n+1)]\n    for i in range(n+1):\n        a[i][0] = 1\n    for j in range(m):\n        a[0][j] = 1\n    for i in range(1, n+1):\n        for j in range(1, m):\n            a[i][j] = a[i-1][j] + a[i][j-1]\n    return a[n][m]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        return 0\n    if n == 0 or m == 0:\n        return 0\n    if n == 1 and m == 1:\n        return 1\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # a(n, m) = sum(f(n, m, i)*f(n, m, i) for i in range(1, n + m + 1))\n    if n == m:\n        return 2\n    elif n < m:\n        return 0\n    else:\n        return (n - 1) * (m - 1) + eulerian_num(n - 1, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    if n > m:\n        return 0\n    if m == 0:\n        return 1\n    return eulerian_num(n, m-1) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort(reverse=True)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = []\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            sublist.append(input_list[i][j])\n        sublist.sort()\n    return sublist\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        output_list.append(sorted_sublist)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for each_list in input_list:\n        each_list.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_sorted = list()\n    for list_sublist in input_list:\n        list_sublist.sort()\n        list_sorted.append(list_sublist)\n    return list_sorted\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: complete the function\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_list = [sorted(i) for i in input_list]\n    for i in range(len(input_list)):\n        input_list[i] = \"\".join(sort_list[i])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for ele in lst:\n        if ele:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in lst:\n        if i == True:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    print(test_list + test_tup)\n    return None\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] += test_list[i]\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for test in test_tup:\n        print(\"Test 1\")\n        test_list.append(test)\n    return test_list\n    \ntest_list = []\ntest_tup = (\"a\", \"b\", \"c\", \"d\", \"e\")\nprint(add_lists(test_list, test_tup))"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"The list is:\", test_list)\n    print(\"The tuple is:\", test_tup)\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return [x + y for x, y in zip(test_list, test_tup)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + test_tup\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a=num1+num2+num3\n    a.sort()\n    return a\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.merge(num1,num2,num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result=[]\n    for i in num1:\n        result.append(i)\n    for j in num2:\n        result.append(j)\n    for k in num3:\n        result.append(k)\n    result.sort()\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in num1:\n        l1.append(i)\n    for i in num2:\n        l2.append(i)\n    for i in num3:\n        l3.append(i)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    return l1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    result = []\n    for n in [num1,num2,num3]:\n        heapq.heappush(heap,n)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for num in num1:\n        heapq.heappush(heap,num)\n    for num in num2:\n        heapq.heappush(heap,num)\n    for num in num3:\n        heapq.heappush(heap,num)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #store all nums in a list and sort it\n    nums=[num1,num2,num3]\n    nums.sort()\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_len,num2_len,num3_len = len(num1),len(num2),len(num3)\n    list1,list2,list3 = [],[],[]\n    i,j,k = 0,0,0\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    sorted_list = []\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            sorted_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            sorted_list.append(num2[j])\n            j += 1\n        elif num3[k] < num1[i] and num3[k] < num2[j]:\n            sorted_list.append(num3[k])\n            k += 1\n    if i < len(num1):\n        sorted_list.extend(num1[i:])\n    if j < len(num2):\n        sorted_list.extend(num2[j:])\n    if k < len(num3):\n        sorted_list.extend(num3[k:])\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # result = []\n    # for i in range(len(num1)):\n    #     result.append(min(num1[i],num2[i],num3[i]))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def countOdds(s):\n        count = 0\n        for i in s:\n            if i == \"0\" or i == \"1\":\n                count += 1\n        return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #Your code goes here\n    \n    \n    #{ \n    #Driver Code Starts.\n    \n    def check(n):\n        cnt=0\n        for i in range(0,n):\n            if s[i]=='1':\n                cnt+=1\n        return cnt\n    \n    def rotate(s,n):\n        l=len(s)\n        return s[n:l]+s[0:n]\n    s=str(input())\n    n=int(input())\n    print(check(n))\n    \n    #} Driver Code Ends"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def generate_even_rotation(s):\n        l=list(s)\n        if l[0]=='0':\n            l[0]='1'\n        else:\n            l[0]='0'\n        for i in range(1,len(s)):\n            if l[i-1]=='0':\n                l[i]='1'\n            else:\n                l[i]='0'\n        return \"\".join(l)\n    def is_odd(s):\n        if len(s)%2==0:\n            return True\n        return False\n    def even_rotation(s,n):\n        l=len(s)\n        n=n%l\n        return generate_even_rotation(s)[:l-n]\n    def odd_rotation(s,n):\n        l=len(s)\n        n=n%l\n        if is_odd(s):\n            return generate_even_rotation(s)[:l-n]\n        return generate_even_rotation(s)[n:]\n    if is_odd(s):\n        return odd_rotation(s,n)\n    return even_rotation(s,n)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.replace(\"0\", \"1\").replace(\"1\", \"0\")\n    s = s[::-1]\n    return n - len(s)\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if s[0] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    num = 0\n    s = s.lower()\n    for i in range(n):\n        if(s[0] == '1'):\n            num += 1\n        s = s[1:] + s[0]\n    return num\n    \n    \ndef power_of_2(n):\n    '''\n    Write a python function to find the number of powers of 2 that are less than the given number.\n    '''\n    c = 0\n    while(n!= 0):\n        n = n & (n-1)\n        c += 1\n    return c\n    \ndef add_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    if(n == 0):\n        return 0\n    return n % 10 + add_digits(n//10)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def countOdds(rotations, n):\n        count = 0\n        for i in range(rotations):\n            curr_string = s[n:] + s[:n]\n            curr_binary = bin(int(curr_string, 2))[2:]\n            curr_binary = curr_binary[::-1]\n            count += curr_binary.count('1')\n        return count\n    return countOdds(n, n)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    count = 0\n    rotate = n%len(s)\n    for i in range(len(s)):\n        if i+rotate < len(s):\n            if s[i+rotate]=='0' and s[i]=='1':\n                count = count + 1\n            elif s[i+rotate]=='1' and s[i]=='0':\n                count = count + 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    '''\n    Example:\n    Input:\n    s = \"01010\"\n    n = 4\n    Output: 2\n    Explanation: \n    After rotating the string \"01010\" 4 times, we have \"10110\" which has an odd number of 1s,\n    '''\n    def find_total_number_of_1s(s):\n        number_of_1s = 0\n        for char in s:\n            if char == \"1\":\n                number_of_1s+=1\n        return number_of_1s\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum([1 for i in s if i in ['0','1']])%2==1\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [x for x in nestedlist[0] if x in nestedlist[1] and x in nestedlist[2]]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #convert each element in nestedlist to a set\n    #concatenate all sets to a single set\n    #return intersection of all sets\n    setlist = []\n    for lst in nestedlist:\n        setlist.append(set(lst))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist is None:\n        return\n    nestedlist = flatten(nestedlist)\n    common = []\n    for i in nestedlist:\n        if nestedlist.count(i) == len(nestedlist) and i not in common:\n            common.append(i)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def count(n):\n        nonlocal common\n        if type(n) == list:\n            for i in n:\n                count(i)\n        else:\n            common.add(n)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    temp = nestedlist[0]\n    for i in range(1,len(nestedlist)):\n        for j in range(len(temp)):\n            if temp[j] not in nestedlist[i]:\n                temp[j] = None\n    return temp\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # convert list to dictionary\n    list_dict = {}\n    for each_list in nestedlist:\n        for each_element in each_list:\n            list_dict[each_element] = each_element\n    print(list_dict)\n    # find common elements in the dictionary\n    common = set(list_dict.keys())\n    for key in list_dict:\n        for each_key in list_dict:\n            if each_key == key:\n                common.remove(key)\n    return list(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_in_nested_lists_helper(sublist):\n        common = set(sublist[0])\n        for item in sublist:\n            common = common & set(item)\n        return list(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    #if list is not empty and its not nested:\n    if not isinstance(nestedlist[0], list):\n        return [nestedlist[0]]\n    #if list is not empty and is nested:\n    else:\n        res = common_in_nested_lists(nestedlist[0])\n        for x in nestedlist[1:]:\n            if isinstance(x, list):\n                res = [y for y in res if y in common_in_nested_lists(x)]\n            else:\n                res.append(x)\n        return res\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def get_list_unique(nestedlist):\n        unique_list = []\n        for list_ in nestedlist:\n            for item in list_:\n                if item not in unique_list:\n                    unique_list.append(item)\n        return unique_list\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    if isinstance(nestedlist[0], list):\n        return common_in_nested_lists(nestedlist[0]) + common_in_nested_lists(nestedlist[1:])\n    return [nestedlist[0]] + common_in_nested_lists(nestedlist[1:])\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        print(f'The value is an integer: {text}')\n    else:\n        print(f'The value is not an integer: {text}')\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text[0] in ('-','+'):\n        if text[1].isdigit():\n            return True\n        else:\n            return False\n    else:\n        if text.isdigit():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # for i in range(len(text)):\n    if text[0] in ('+', '-'):\n        text = text[1:]\n    return text.isdigit()\n    # return text.replace('.','',1).isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # checks if input is integer\n    if text.isdigit():\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        for key, value in d.items():\n            if value:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1==[]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(list1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list=[]\n    for i in list1:\n        if len(i)==0:\n            empty_list.append(i)\n    return empty_list\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = 0\n    for i in list1:\n        if i == {}:\n            flag += 1\n    if flag == len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count=0\n    for i in list1:\n        if bool(i)==False:\n            count+=1\n    if count==len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        for i in list1:\n            if len(i)==0:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda x,y: x*10+y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(lambda x:str(x), nums))))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in range(0, len(nums)):\n        res += nums[i] * (10**i)\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in nums:\n        res = res*10 + i\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    return int(''.join([str(num) for num in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(num) for num in nums]))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    floating_list = []\n    for inner_list in test_list:\n        try:\n            floating_list.append([float(el) for el in inner_list])\n        except ValueError:\n            pass\n    return floating_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if type(test_list[i]) is list:\n            new_list.append(list_to_float(test_list[i]))\n        else:\n            try:\n                new_list.append(float(test_list[i]))\n            except ValueError:\n                new_list.append(test_list[i])\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            try:\n                j = float(j)\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(i) for i in test_list]\n    except:\n        return 'List not converted to float.'\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(value) if (value[0]!= '-') else float(value[1:]) for value in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(el) for el in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # For each list in the list:\n    for i in range(len(test_list)):\n        # If the list is empty, return an empty list\n        if len(test_list[i]) == 0:\n            return []\n        # For each element in the list:\n        for j in range(len(test_list[i])):\n            # If the element is a float, pass\n            try:\n                float(test_list[i][j])\n            except ValueError:\n                # If the element is not convertible to a float, return an empty list\n                return []\n            # If the element is convertible to a float, set it to a float and continue\n            else:\n                test_list[i][j] = float(test_list[i][j])\n    # Return the list\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [i.strip() for i in string.split(\" \")]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split(' ')\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n    \ndef get_all_paths(graph, start, end, path=[]):\n    '''\n    Write a function to get all paths between two nodes in a graph.\n    '''\n    path = path + [start]\n    if start == end:\n        return [path]\n    if not start in graph.keys():\n        return []\n    paths = []\n    for node in graph[start]:\n        if node not in path:\n            newpaths = get_all_paths(graph, node, end, path)\n            for newpath in newpaths:\n                paths.append(newpath)\n    return paths\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = []\n    if string.count(' ') > 0:\n        string_list = string.split(' ')\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split()\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.strip('[')\n    string = string.strip(']')\n    string = string.split(' ', 1)\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # search for the number that occurs only once\n    # for i in range(1, len(arr)):\n    #     if arr[i] == arr[i-1]:\n    #         return arr[i]\n    # for i in range(len(arr)):\n    #     if arr[i] not in arr[:i] and arr[i] not in arr[i+1:]:\n    #         return arr[i]\n    # return -1\n    # return sum(arr) - 2 * sum(set(arr))\n    # return 2 * sum(set(arr)) - sum(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    counter = 0\n    for element in arr:\n        counter ^= element\n    return counter\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # edge case\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n    left_val = search(left_arr)\n    right_val = search(right_arr)\n    print(left_arr)\n    print(right_arr)\n    print(f\"Left:{left_val}, Right:{right_val}\")\n    return left_val + right_val\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = [i for i in arr]\n    l.sort()\n    l.append(l[0])\n    print(l)\n    return l.index(l[1])\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        s1 = 0\n        s2 = len(arr) - 1\n        while s1 < s2:\n            m = s1 + (s2 - s1)//2\n            if arr[m] == arr[m+1]:\n                s1 = m + 2\n            else:\n                s2 = m\n        return arr[s1]\n        \n        \n    # return None if not a single element is unique\n    if len(arr) == len(set(arr)):\n        return None\n    #else\n    s1 = 0\n    s2 = len(arr) - 1\n    while s1 < s2:\n        m = s1 + (s2 - s1)//2\n        if arr[m] == arr[m+1]:\n            s1 = m + 2\n        else:\n            s2 = m\n    return arr[s1]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    res = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i]!= res:\n            return res\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        middle = len(arr) // 2\n        left_side = search(arr[0:middle])\n        right_side = search(arr[middle:])\n        return left_side if left_side == right_side else right_side\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # time complexity = O(n)\n    # space complexity = O(1)\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 0:\n        return None\n    \n    # initialize variables\n    left = 0\n    right = len(arr)-1\n    \n    while left <= right:\n        \n        mid = (left+right)//2\n        \n        # check if current element is the only element that appears once\n        if arr[mid] == arr[mid-1]:\n            left = mid+1\n        elif arr[mid] == arr[mid+1]:\n            right = mid-1\n        else:\n            # if element appears only once, return it\n            return arr[mid]\n    \n    return None\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = list1[0][0] * list1[0][1]\n    for i in list1:\n        for j in list1:\n            if j[0] * j[1] > result:\n                result = j[0] * j[1]\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import math\n    def check_list(list1):\n        max_tuple_product = 0\n        length_list = len(list1)\n        for i in range(0,length_list,2):\n            list1[i],list1[i+1] = list1[i+1],list1[i]\n            if abs(list1[i]*list1[i+1]) > max_tuple_product:\n                max_tuple_product = abs(list1[i]*list1[i+1])\n            list1[i],list1[i+1] = list1[i+1],list1[i]\n        return max_tuple_product\n    return check_list(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import math\n    def absolute_product(num1,num2):\n        num1=abs(num1)\n        num2=abs(num2)\n        if(num1>num2):\n            return(num1)\n        else:\n            return(num2)\n    def max_absolute_product(tup):\n        return(math.prod([absolute_product(tup[0],tup[1]),absolute_product(tup[2],tup[3])]))\n    return(max([max_absolute_product(tuple) for tuple in list1]))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list_max = []\n    for index, item in enumerate(list1):\n        if index % 2!= 0:\n            list_max.append(list1[index] * list1[index-1])\n    return max(list_max)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # This function works for a list of tuples\n    # It returns a tuple of the maximum pair with the largest product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1)\n    list2 = [list1[i]*list1[i+1] for i in range(0,len(list1),2)]\n    return max(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_tuple = 0\n    for num_tuple in list1:\n        if len(num_tuple) == 2:\n            if num_tuple[0] * num_tuple[1] > max_tuple:\n                max_tuple = num_tuple[0] * num_tuple[1]\n        elif len(num_tuple) == 3:\n            if (num_tuple[0] * num_tuple[1]) > max_tuple:\n                max_tuple = num_tuple[0] * num_tuple[1]\n            if num_tuple[0] * num_tuple[2] > max_tuple:\n                max_tuple = num_tuple[0] * num_tuple[2]\n            if num_tuple[1] * num_tuple[2] > max_tuple:\n                max_tuple = num_tuple[1] * num_tuple[2]\n    return max_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_prod(list2):\n        max_prod = 0\n        for x in list2:\n            for y in x:\n                if abs(y[0] * y[1]) > max_prod:\n                    max_prod = abs(y[0] * y[1])\n        return max_prod\n    \n    list2 = []\n    for x in list1:\n        for y in x:\n            tup = (y[0], y[1])\n            list2.append(tup)\n    return max_prod(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tup_list = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            tup_list.append((list1[i], list1[j]))\n    product = 0\n    for i in range(len(tup_list)):\n        product = max(product, tuple_product(tup_list[i]))\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    \n    max_product = 0\n    \n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n                \n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1, limit):\n        if amicable_number(i):\n            result += i\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(n for n in range(1, limit+1) if is_amicable(n))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        sum1 = sum(map(int, str(num)))\n        sum2 = sum(map(int, str(sum1)))\n        if sum1 == sum2 and num!= sum1:\n            return True\n        else:\n            return False\n    return sum(x for x in range(1, limit + 1) if is_amicable(x))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    # I've started this function with a simple brute force approach.\n    # It will be easy to optimize by using a caching mechanism, and by using\n    # a dictionary of amicable numbers.\n    \n    # A number is amicable if it has an other number which is the sum of the \n    # first number and the second.\n    \n    # In this approach, I've iterated through every number.\n    # And for each number, I've found every other number which is an amicable \n    # number with it.\n    \n    # To minimize the number of iterations, I've set the limit to the \n    # largest of the primes below the limit, and found all the amicable \n    # numbers which are below that limit.\n    \n    # I've created two lists which will contain the sum of the amicable numbers.\n    \n    # The first list will contain the sum of the amicable numbers.\n    # The second list will contain the sum of the amicable numbers.\n    \n    # These two lists are needed because I'm using them in a loop.\n    \n    # The loop will store the sum of the amicable numbers in the first list.\n    \n    # The loop will sum the amicable numbers in the second list.\n    \n    # These two lists will be used to count the number of amicable numbers.\n    \n    # The first list will contain the amicable numbers, which will be used to \n    # sum them later.\n    \n    # The second list will contain the sum of the amicable numbers, which will\n    # be summed later.\n    \n    # The loops are set to start with the first amicable number.\n    \n    # The count of the amicable numbers is set to zero, because there is no \n    # amicable number below 2.\n    \n    # The first loop will iterate through every number.\n    \n    # The loop will check if the number is an amicable number.\n    # If it is, then the count of the amicable numbers will increase by one.\n    \n    # The loop will add the number to the list of amicable numbers.\n    \n    # The first loop will end after all the numbers have been checked.\n    \n    # The second loop will sum all the amicable numbers.\n    \n    # The second loop will end after all the amicable numbers have been summed.\n    \n    # The results of the first loop will be stored in the first list.\n    # The results of the second loop will be stored in the second list.\n    \n    # The number of amicable numbers will be the length of the first list.\n    \n    # The sum of amicable numbers will be the sum of the second list.\n    \n    # These two lists will be returned at the end of the function.\n    \n    # The first list will be returned as a list of integers.\n    \n    # The second list will be returned as a list of integers.\n    \n    # These lists will contain the sum of the amicable numbers.\n    \n    # The first list will contain the amicable numbers, which will be used to \n    # sum them later.\n    \n    # The second list will contain the sum of the amicable numbers, which will\n    # be summed later.\n    \n    # The loops are set to start with the first amicable number.\n    \n    # The count of the amicable numbers is set to zero, because there is no \n    # amicable number below 2.\n    \n    # The first loop will iterate through every number.\n    \n    # The loop will check if the number is an amicable number.\n    # If it is, then the count of the amicable numbers will increase by one.\n    \n    # The loop will add the number to the list of amicable numbers.\n    \n    # The first loop will end after all the numbers have been checked.\n    \n    # The second loop will sum all the amicable numbers.\n    \n    # The second loop will end after all the amicable numbers have been summed.\n    \n    # The results of the first loop will be stored in the first list.\n    # The results of the second loop will be stored in the second list.\n    \n    # The number of amicable numbers will be the length of the first list.\n    \n    # The sum of amicable numbers will be the sum of the second list.\n    \n    # These two lists will be returned at the end of the function.\n    \n    # The first list will be returned as a list of integers.\n    \n    # The second list will be returned as a list of integers.\n    \n    # These lists will contain the sum of the amicable numbers.\n    \n    # The first list will contain the amicable numbers, which will be used to \n    # sum them later.\n    \n    # The second list will contain the sum of the amicable numbers, which will\n    # be summed later.\n    \n    # The loops are set to start with the first amicable number.\n    \n    # The count of the amicable numbers is set to zero, because there is no \n    # amicable number below 2.\n    \n    # The first loop will iterate through every number.\n    \n    # The loop will check if the number is an amicable number.\n    # If it is, then the count of the amicable numbers will increase by one.\n    \n    # The loop will add the number to the list of amicable numbers.\n    \n    # The first loop will end after all the numbers have been checked.\n    \n    # The second loop will sum all the amicable numbers.\n    \n    # The second loop will end after all the amicable numbers have been summed.\n    \n    # The results of the first loop will be stored in the first list.\n    # The results of the second loop will be stored in the second list.\n    \n    # The number of amicable numbers will be the length of the first list.\n    \n    # The sum of amicable numbers will be the sum of the second list.\n    \n    # These two lists will be returned at the end of the function.\n    \n    # The first list will be returned as a list of integers.\n    \n    # The second list will be returned as a list of integers.\n    \n    # These lists will contain the sum of the amicable numbers.\n    \n    # The first list will contain the amicable numbers, which will be used to \n    # sum them later.\n    \n    # The second list will contain the sum of the amicable numbers, which will\n    # be summed later.\n    \n    # The loops are set to start with the first amicable number.\n    \n    # The count of the amicable numbers is set to zero, because there is no \n    # amicable number below 2.\n    \n    # The first loop will iterate through every number.\n    \n    # The loop will check if the number is an amicable number.\n    # If it is, then the count of the amicable numbers will increase by one.\n    \n    # The loop will add the number to the list of amicable numbers.\n    \n    # The first loop will end after all the numbers have been checked.\n    \n    # The second loop will sum all the amicable numbers.\n    \n    # The second loop will end after all the amicable numbers have summed.\n    \n    # The results of the first loop will be stored in the first list.\n    # The results of the second loop will be stored in the second list.\n    \n    # The number of amicable numbers will be the length of the first list.\n    \n    # The sum of amicable numbers will be the sum of the second list.\n    \n    # These two lists will be returned at the end of the function.\n    \n    # The first list will be returned as a list of integers.\n    \n    # The second list will be returned as a list of integers.\n    \n    # These lists will contain the sum of the amicable numbers.\n    \n    # The first list will contain the amicable numbers, which will be used to \n    # sum them later.\n    \n    # The second list will contain the sum of the amicable numbers, which will\n    # be summed later.\n    \n    # The loops are set to start with the first amicable number.\n    \n    # The count of the amicable numbers is set to zero, because there is no \n    # amicable number below 2.\n    \n    # The first loop will iterate through every number.\n    \n    # The loop will check if the number is an amicable number.\n    # If it is, then the count of the amicable numbers will increase by one.\n    \n    # The loop will add the number to the list of amicable numbers.\n    \n    # The first loop will end after all the numbers have been checked.\n    \n    # The second loop will sum all the amicable number"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # numbers_to_check = [num for num in range(1, limit + 1)]\n    total = 0\n    for num in range(1, limit + 1):\n        if num == get_factors(num) + get_factors(get_factors(num)):\n            total += num\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to store sum of amicable numbers\n    sum = 0\n    # Initialize variable to store number of amicable numbers\n    count = 0\n    # Create list to store the numbers in the range\n    list = []\n    # Check each number in the range\n    for x in range(limit):\n        # Check if the number is a multiple of another number\n        if x % 2 == 0:\n            for y in range(3, int(x/2)):\n                if x % y == 0:\n                    # Check if the sum of the two factors is a multiple of the other number\n                    if (y + x/y) % 2 == 0:\n                        if (x + y/x) == x:\n                            sum += x\n                            count += 1\n                            list.append(x)\n    print('Sum of amicable numbers from 1 to {} is {}'.format(limit, sum))\n    print('Number of amicable numbers from 1 to {} is {}'.format(limit, count))\n    print('List of amicable numbers from 1 to {} is {}'.format(limit, list))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == sum_amicable_numbers(i):\n            if i == sum_amicable_numbers(sum_amicable_numbers(i)):\n                amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    # first is 1 so we skip it\n    for x in range(1, limit):\n        first = sum_factors(x)\n        second = sum_factors(first)\n        # sum_factors returns a list, so we get the first and second element of that list\n        if x == second and x!= first:\n            result += x\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(amicable_numbers(limit))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(cmath.phase(complex(a,b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (a,b)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (180*abs(a)/cmath.pi)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(a,b)\n    c = complex(a,b)\n    print(c)\n    a = cmath.phase(c)\n    print(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x=complex(a)\n    y=complex(b)\n    print(cmath.phase(y/x))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (a == 0) and (b == 0):\n        return 0\n    else:\n        return cmath.phase(complex(a,b))\n        \ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif (s[0] == s[-1]) and is_palindrome(s[1:-1]):\n        return True\n    else:\n        return False\n        \ndef is_palindrome_stack(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        s = list(s)\n        stack = []\n        while len(s)!= 0:\n            stack.append(s.pop())\n        while len(stack)!= 0:\n            if stack.pop()!= s.pop(0):\n                return False\n    return True\n        \ndef convert_decimal(b):\n    '''\n    Write a function to convert a binary string to its decimal equivalent.\n    '''\n    if b == '':\n        return 0\n    else:\n        return int(b,2)\n        \ndef convert_binary(d):\n    '''\n    Write a function to convert a decimal number to its binary equivalent.\n    '''\n    if d == 0:\n        return ''\n    else:\n        return bin(d)[2:]\n        \ndef is_power_of_two(n):\n    '''\n    Write a function to check whether a given positive integer is a power of two or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2!= 0:\n        return False\n    else:\n        return is_power_of_two(n/2)\n        \ndef next_greater_power_of_2(n):\n    '''\n    Write a function to find and return the next largest power of 2 greater than a given number n.\n    '''\n    if n < 1:\n        return -1\n    else:\n        return 2**n.bit_length()\n        \ndef reverse_string(s):\n    '''\n    Write a function to reverse a given string.\n    '''\n    if len(s) == 0:\n        return ''\n    else:\n        return s[-1] + reverse_string(s[0:-1])\n        \ndef max_contig_sum(arr):\n    '''\n    Write a function to return the maximum sum of a contiguous subsequence in the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        max_sum = arr[0]\n        curr_sum = arr[0]\n        for i in range(1,len(arr)):\n            curr_sum = max(arr[i],curr_sum + arr[i])\n            max_sum = max(max_sum,curr_sum)\n        return max_sum\n        \ndef max_contig_sum_dp(arr):\n    '''\n    Write a function to return the maximum sum of a contiguous subsequence in the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_sum_pre = [arr[0]]\n        max_sum_curr = [arr[0]]\n        for i in range(1,len(arr)):\n            max_sum_pre.append(max(max_sum_pre[i-1]+arr[i],arr[i]))\n            max_sum_curr.append(max(max_sum_curr[i-1],max_sum_pre[i]))\n        return max_sum_curr[len(arr)-1]\n        \ndef reverse_words_in_a_string(s):\n    '''\n    Write a function to reverse words in a given string.\n    '''\n    if len(s) == 0:\n        return ''\n    elif len(s) == 1:\n        return s\n    else:\n        words = []\n        start = 0\n        end = 0\n        while end < len(s):\n            while end < len(s) and s[end]!='':\n                end += 1\n            words.append(s[start:end])\n            start = end + 1\n            end = start\n        if start < len(s):\n            words.append(s[start:])\n        s =''.join(words[::-1])\n        return s\n        \ndef reverse_words_in_a_string_no_space(s):\n    '''\n    Write a function to reverse words in a given string.\n    '''\n    if len(s) == 0:\n        return ''\n    elif len(s) == 1:\n        return s\n    else:\n        words = []\n        start = 0\n        end = 0\n        while end < len(s):\n            while end < len(s) and s[end]!='':\n                end += 1\n            words.append(s[start:end])\n            start = end + 1\n            end = start\n        words.append(s[start:])\n        s = ''.join(words[::-1])\n        return s\n        \ndef str_to_int(s):\n    '''\n    Write a function to convert a string to an integer without using the built in int() function.\n    '''\n    if s == '':\n        return 0\n    else:\n        total = 0\n        mult = 1\n        neg = False\n        if s[0] == '-':\n            neg = True\n            s = s[1:]\n        for c in s:\n            if c.isdigit():\n                total += (ord(c) - ord('0')) * mult\n                mult *= 10\n            else:\n                return 'Illegal character'\n        if neg == True:\n            total *= -1\n        return total\n        \ndef is_unique(arr):\n    '''\n    Write a function to check whether an array is unique or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        return len(set(arr)) == len(arr)\n        \ndef is_unique_dict(arr):\n    '''\n    Write a function to check whether an array is unique or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        d = {}\n        for i in range(len(arr)):\n            if arr[i] in d:\n                return False\n            else:\n                d[arr[i]] = 1\n        return True\n        \ndef is_unique_no_buffer(arr):\n    '''\n    Write a function to check whether an array is unique or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True\n        \ndef longest_run(s):\n    '''\n    Write a function to return the longest run of repeating character in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    else:\n        d = {}\n        max_len = 0\n        curr_len = 1\n        for i in range(len(s)):\n            if s[i] in d:\n                curr_len += 1\n            else:\n                d[s[i]] = 1\n                if curr_len > max_len:\n                    max_len = curr_len\n                curr_len = 1\n        if curr_len > max_len:\n            max_len = curr_len\n        return max_len\n        \ndef longest_run_dict(s):\n    '''\n    Write a function to return the longest run of repeating character in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    else:\n        d = {}\n        max_len = 0\n        curr_len = 1"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return(angle)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if(a.imag==0):\n        angle=0\n    elif(a.real==0):\n        if(a.imag>0):\n            angle=90\n        else:\n            angle=270\n    else:\n        angle=cmath.phase(a)/cmath.pi*180\n    return angle\n    \ndef count_steps(a,b):\n    '''\n    Write a function to count the number of steps that a robot takes to reach the destination\n    '''\n    if(a[0]>b[0] and a[1]>b[1]):\n        if(a[1]-b[1]>a[0]-b[0]):\n            return abs(a[0]-b[0])+1\n        else:\n            return abs(a[1]-b[1])+1\n    elif(a[0]<b[0] and a[1]>b[1]):\n        if(a[0]-b[0]>b[1]-a[1]):\n            return abs(a[0]-b[0])+1\n        else:\n            return abs(b[1]-a[1])+1\n    elif(a[0]>b[0] and a[1]<b[1]):\n        if(a[0]-b[0]>a[1]-b[1]):\n            return abs(a[0]-b[0])+1\n        else:\n            return abs(b[1]-a[1])+1\n    else:\n        if(a[0]-b[0]>b[1]-a[1]):\n            return abs(a[0]-b[0])+1\n        else:\n            return abs(b[1]-a[1])+1\n            \ndef count_steps_in_lists(a,b):\n    '''\n    Write a function to count the number of steps that a robot takes to reach the destination\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if(a[i]>b[i]):\n            if(a[i]-b[i]>abs(a[i]-b[i-1])):\n                count=count+1\n            else:\n                count=count+2\n        else:\n            if(a[i]-b[i]>abs(a[i-1]-b[i])):\n                count=count+1\n            else:\n                count=count+2\n    return count\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #cmath.phase(z)\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string = ''.join(sorted(string))\n    print(string)\n    count_1 = 0\n    count_0 = 0\n    for c in string:\n        if c == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n    return(max(count_0,count_1))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return len([0 for i in range(len(string)) if string[i] == '1']) - len([0 for i in range(len(string)) if string[i] == '0'])\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in string:\n        if i == '0':\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max(max_length, current_length)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return len([i for i in string if i == '0']) - len([i for i in string if i == '1'])\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # create a dictionary\n    count = {}\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    maxDiff = 0\n    currDiff = 0\n    for i in range(n): \n        if string[i] == '0': \n            currDiff += 1\n        else: \n            currDiff -= 1\n        if currDiff < 0: \n            currDiff = 0\n        if currDiff > maxDiff: \n            maxDiff = currDiff\n    return maxDiff \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    substring_list = []\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            substring_list.append(string[i:j+1])\n    max_length = 0\n    for substring in substring_list:\n        length = len([1 for x in substring if x=='1'])\n        length_diff = length - len([1 for x in substring if x=='0'])\n        if length_diff>max_length:\n            max_length = length_diff\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string) \n    count0 = 0\n    count1 = 0\n    for i in range(n): \n        if string[i] == '0': \n            count0 += 1\n        else: \n            count1 += 1\n    Max = min(count0, count1) \n    for i in range(n): \n        if (string[i] == '0'): \n            count0 -= 1\n        else: \n            count1 -= 1\n        if ((count0 < 0) or (count1 < 0)): \n            break\n        Max = max(count0, count1, Max) \n    return Max \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return(max(len([i for i in string if i=='0'])-len([i for i in string if i=='1']), len([i for i in string if i=='1'])-len([i for i in string if i=='0'])))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = min(a,b)\n    for i in range(2,x+1):\n        if a%i==0 and b%i==0:\n            x = i\n    return x\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=1\n    div=[]\n    while(i<=b):\n        if(b%i==0):\n            if(a%i==0):\n                div.append(i)\n        i+=1\n    return sum(div)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return min(a,b)\ndef sum_of_multiples(num,limit):\n    '''\n    Write a python function to find the sum of all the multiples of a given number below a given limit.\n    '''\n    sum=0\n    for i in range(num,limit):\n        if(i%num==0):\n            sum+=i\n    return sum\ndef sum_all(limit):\n    '''\n    Write a python function to find the sum of all the numbers between 1 and a given limit.\n    '''\n    sum=0\n    for i in range(0,limit):\n        sum+=i\n    return sum\ndef is_leap(year):\n    '''\n    Write a python function to check if a year is leap or not.\n    '''\n    return year%4==0 and year%100!=0 or year%400==0\ndef is_consecutive(s):\n    '''\n    Write a python function to check if a list of numbers is consecutive or not.\n    '''\n    for i in range(0,len(s)-1):\n        if(s[i+1]-s[i]!=1):\n            return False\n    return True\ndef is_sorted(s):\n    '''\n    Write a python function to check if a list of numbers is sorted or not.\n    '''\n    for i in range(0,len(s)-1):\n        if(s[i+1]<s[i]):\n            return False\n    return True\ndef is_unique(s):\n    '''\n    Write a python function to check if a list of numbers is unique or not.\n    '''\n    for i in range(0,len(s)-1):\n        for j in range(i+1,len(s)):\n            if(s[i]==s[j]):\n                return False\n    return True\ndef is_valid(s):\n    '''\n    Write a python function to check if a given string is valid or not.\n    '''\n    if(len(s)<8):\n        return False\n    else:\n        count=0\n        for i in range(0,len(s)):\n            if(s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o' or s[i]=='u' or s[i]=='A' or s[i]=='E' or s[i]=='I' or s[i]=='O' or s[i]=='U'):\n                count+=1\n        if(count>=3):\n            return True\n        else:\n            return False\ndef mult_table(num):\n    '''\n    Write a python function to create a multiplication table of a given number.\n    '''\n    for i in range(1,11):\n        print(num,\"*\",i,\"=\",num*i)\ndef max_n(s):\n    '''\n    Write a python function to find the maximum number in a given list of numbers.\n    '''\n    max=0\n    for i in range(0,len(s)):\n        if(s[i]>max):\n            max=s[i]\n    return max\ndef palindrome(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    if(len(s)<1):\n        return True\n    else:\n        if(s[0]==s[-1]):\n            return palindrome(s[1:-1])\n        else:\n            return False\ndef remove_duplicates(s):\n    '''\n    Write a python function to remove all the duplicate characters from a given string.\n    '''\n    for i in range(0,len(s)-1):\n        if(s[i]==s[i+1]):\n            s=s.replace(s[i],'')\n    return s\ndef common_element(s1,s2):\n    '''\n    Write a python function to find the common elements in two given strings.\n    '''\n    s=[]\n    for i in range(0,len(s1)):\n        for j in range(0,len(s2)):\n            if(s1[i]==s2[j]):\n                if(s1[i] not in s):\n                    s.append(s1[i])\n                break\n    return s\ndef add_unique(s1,s2):\n    '''\n    Write a python function to add two given lists of numbers but don't add duplicates.\n    '''\n    s=[]\n    for i in range(0,len(s1)):\n        for j in range(0,len(s2)):\n            if(s1[i]==s2[j]):\n                break\n        else:\n            s.append(s1[i])\n    for i in range(0,len(s2)):\n        for j in range(0,len(s1)):\n            if(s2[i]==s1[j]):\n                break\n        else:\n            s.append(s2[i])\n    return s\ndef remove_odd(s):\n    '''\n    Write a python function to remove all the odd numbers from a given list of numbers.\n    '''\n    for i in range(0,len(s)):\n        if(s[i]%2!=0):\n            s.remove(s[i])\n    return s\ndef common_ele(s1,s2):\n    '''\n    Write a python function to find the common elements in two given lists of numbers.\n    '''\n    s=[]\n    for i in range(0,len(s1)):\n        for j in range(0,len(s2)):\n            if(s1[i]==s2[j]):\n                if(s1[i] not in s):\n                    s.append(s1[i])\n                break\n    return s\ndef common_ele_all(s1,s2):\n    '''\n    Write a python function to find the common elements in all the lists in a given list of lists.\n    '''\n    s=[]\n    for i in range(0,len(s1)):\n        for j in range(0,len(s2)):\n            for k in range(0,len(s1[i])):\n                if(s1[i][k]==s2[j][k]):\n                    if(s1[i][k] not in s):\n                        s.append(s1[i][k])\n    return s\ndef replace_char(s):\n    '''\n    Write a python function to replace all the uppercase letters in a given string with their corresponding lowercase letters.\n    '''\n    for i in range(0,len(s)):\n        if(s[i].isupper()):\n            s=s.replace(s[i],s[i].lower())\n    return s\ndef check_palindrome(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    if(s[0:len(s)-1]==s[-1:len(s):-1]):\n        return True\n    else:\n        return False\ndef rotations(s):\n    '''\n    Write a python function to find all the possible rotations of a string and return them in a list.\n    '''\n    r=[]\n    s=s+s[0:1]\n    r.append(s)\n    for i in range(0,len(s)-1):\n        s=s[1:]+s[0:1]\n        r.append(s)\n    return r\ndef rotate_string(s):\n    '''\n    Write a python function to rotate a string by a given number.\n    '''\n    if(len(s)==0):\n        return ''\n    else:\n        l=rotations(s)\n        for i in range(0,len(l)):\n            if(l[i]==s):\n                return l[(i+n)%len(l)]\ndef remove_duplicates_using_map(s):\n    '''\n    Write a python function to remove all the duplicate characters from a given string.\n    '''\n    d={}\n    for i in range(0,len(s)):\n    "
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Your code here\n    return 1\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = max(a, b)\n    y = min(a, b)\n    z = 1\n    for i in range(2, x+1):\n        if x % i == 0 and y % i == 0:\n            z = z+i\n    return z\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(1, min(a, b) + 1): \n        if (a % i == 0) and (b % i == 0): \n            sum = sum + i \n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        if a==0:\n            return b\n        return gcd(b%a,a)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = min(a,b)\n    y = max(a,b)\n    s = 1\n    for i in range(2,x+1):\n        if a%i==0 and b%i==0:\n            s = s * i\n    print(s)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x=[]\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            x.append(i)\n    return sum(x)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    assert isinstance(a,int)\n    assert isinstance(b,int)\n    if a>b:\n        a,b=b,a\n    c=0\n    while b!=0:\n        a,b=b,a%b\n        c+=1\n    return c\ndef sum_mod(a,b): \n    '''\n    Write a python function to find the sum of modulo of two given numbers.\n    '''\n    assert isinstance(a,int)\n    assert isinstance(b,int)\n    if a>b:\n        a,b=b,a\n    c=0\n    while b!=0:\n        a,b=b,a%b\n        c+=1\n    return c%a\ndef sum_mod2(a,b): \n    '''\n    Write a python function to find the sum of modulo of two given numbers.\n    '''\n    assert isinstance(a,int)\n    assert isinstance(b,int)\n    if a>b:\n        a,b=b,a\n    c=0\n    while b!=0:\n        a,b=b,a%b\n        c+=1\n    return c%a\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list = str.split()\n    new = [i for i in list if len(i) > n]\n    return new\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for i in range(len(str)):\n        word = str[i]\n        if len(word) > n:\n            output.append(word)\n    return output\n    \n    \ndef count_unique(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the amount of unique values in the array.\n    '''\n    return len(set(arr))\n    \ndef list_difference(a, b):\n    '''\n    Write a function that takes in two arrays and returns an array containing all the values that are in the first array but not in the second.\n    '''\n    return list(set(a) - set(b))\n    \n    \ndef find_all_duplicates(arr):\n    '''\n    Write a function that takes in an array and returns an array with all duplicates removed.\n    '''\n    return list(dict.fromkeys(arr))\n    \n    \ndef get_even_indexes(arr):\n    '''\n    Write a function that takes in an array and returns an array with all even index values.\n    '''\n    return arr[::2]\n    \n    \ndef get_odd_indexes(arr):\n    '''\n    Write a function that takes in an array and returns an array with all odd index values.\n    '''\n    return arr[1::2]\n    \n    \ndef capitalize_array(arr):\n    '''\n    Write a function that takes in an array of strings and capitalizes all letters of each word in the array.\n    '''\n    for i in range(len(arr)):\n        arr[i] = arr[i].capitalize()\n    return arr\n    \n    \ndef sum_of_positive_even_indexes(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of all positive even numbers in the array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] > 0:\n            sum += arr[i]\n    return sum\n    \n    \ndef make_all_upper(arr):\n    '''\n    Write a function that takes in an array of strings and returns an array with each string in the array capitalized.\n    '''\n    for i in range(len(arr)):\n        arr[i] = arr[i].upper()\n    return arr\n    \n    \ndef return_long_words(arr):\n    '''\n    Write a function that takes in an array of strings and returns an array with strings that have more than 4 characters.\n    '''\n    output = []\n    for i in range(len(arr)):\n        word = arr[i]\n        if len(word) > 4:\n            output.append(word)\n    return output\n    \n    \ndef return_greater_than_index(arr, n):\n    '''\n    Write a function that takes in an array of numbers and returns the amount of values greater than n.\n    '''\n    output = []\n    for i in range(len(arr)):\n        if arr[i] > n:\n            output.append(arr[i])\n    return len(output)\n    \n    \ndef return_array_count_values(arr, n):\n    '''\n    Write a function that takes in an array of strings and returns an array of the count of each string's characters.\n    '''\n    output = []\n    for i in range(len(arr)):\n        output.append(arr[i].count(n))\n    return output\n    \n    \ndef return_max_of_array(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the max value.\n    '''\n    return max(arr)\n    \n    \ndef return_same_index_values(arr):\n    '''\n    Write a function that takes in an array of numbers and returns an array of the first index values where the value is equal to its index value.\n    '''\n    output = []\n    for i in range(len(arr)):\n        if arr[i] == i:\n            output.append(i)\n    return output\n    \n    \ndef make_array_of_counts(arr):\n    '''\n    Write a function that takes in an array of numbers and returns an array of the count of each number's index.\n    '''\n    output = []\n    for i in range(len(arr)):\n        output.append(arr.index(i))\n    return output\n    \n    \ndef remove_middle_element(arr):\n    '''\n    Write a function that takes in an array of numbers and removes the middle element.\n    '''\n    return arr[:len(arr)//2] + arr[len(arr)//2+1:]\n    \n    \ndef sum_array_of_indexes(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of all of its index values.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += i\n    return sum\n    \n    \ndef sum_array_of_indexes_plus_middle_value(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of all its index values plus the middle number.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += i + arr[len(arr)//2]\n    return sum\n    \n    \ndef sum_of_even_indexes(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of all of its even index values.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n    \n    \ndef sum_of_odd_indexes(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of all of its odd index values.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            sum += arr[i]\n    return sum\n    \n    \ndef sort_array_of_indexes(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the sorted version of the array of its index values.\n    '''\n    return sorted(arr)\n    \n    \ndef sum_of_all_other_values(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of all of the values in the array, except for the middle number.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += i\n    return sum - arr[len(arr)//2]\n    \n    \ndef single_number(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the number that occurs only once.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n    \n    \ndef sum_of_multiples(arr, n):\n    '''\n    Write a function that takes in an array of numbers and a number and returns the sum of all values in the array that are multiples of n.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % n == 0:\n            sum += arr[i]\n    return sum\n    \n    \ndef make_even_indexes_greater_than_other_values(arr):\n    '''\n    Write a function that takes in an array of numbers and returns an array with its even indexes greater than its odd indexes.\n    '''\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] < arr[i+1]:\n            arr[i] = arr[i+1]\n    return arr\n    \n    \ndef sort_array_of_strings(arr):\n    '''\n    Write a function that takes in an array of strings and returns the sorted version of the array of strings with a space between each string.\n    '''\n    return''.join(sorted(arr))\n    \n    \ndef sum_of_all_other_values_2(arr):\n    '''\n    Write a function that takes in an array of numbers and returns the sum o"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str.split(' '):\n        if len(word) > n:\n            print(word)\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = [word for word in str.split() if len(word) > n]\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # write your code here\n    if len(my_matrix)!= 9:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n=len(my_matrix)\n    if n==0:\n        return False\n    col=set()\n    row=set()\n    diagonal=set()\n    anti_diagonal=set()\n    for i in range(n):\n        row.add(my_matrix[i][0])\n        col.add(my_matrix[0][i])\n        diagonal.add(my_matrix[i][i])\n        anti_diagonal.add(my_matrix[i][n-i-1])\n    if len(col)!=n or len(row)!=n or len(diagonal)!=n or len(anti_diagonal)!=n:\n        return False\n    for i in range(1,n+1):\n        col.add(i)\n        row.add(i)\n        diagonal.add(i)\n        anti_diagonal.add(i)\n    if col==row and row==diagonal and diagonal==anti_diagonal:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_test_list = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(9):\n        for j in range(9):\n            magic_test_list[my_matrix[i][j]-1] += 1\n    for j in range(9):\n        magic_test_list[j] = magic_test_list[j] % 2\n    for i in range(8):\n        if magic_test_list[i]!= 1 or magic_test_list[i+1]!= 1 or magic_test_list[i+2]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_of_rows = []\n    sum_of_columns = []\n    if len(my_matrix) == 3:\n        for row in range(0, 3):\n            sum_of_rows.append(sum(my_matrix[row]))\n        for column in range(0, 3):\n            sum_of_columns.append(sum([my_matrix[row][column] for row in range(0, 3)]))\n        if sum_of_rows[0] == sum_of_rows[1] == sum_of_rows[2] == sum_of_columns[0] == sum_of_columns[1] == sum_of_columns[2]:\n            return True\n        else:\n            return False\n    elif len(my_matrix) == 4:\n        for row in range(0, 4):\n            sum_of_rows.append(sum(my_matrix[row]))\n        for column in range(0, 4):\n            sum_of_columns.append(sum([my_matrix[row][column] for row in range(0, 4)]))\n        if sum_of_rows[0] == sum_of_rows[1] == sum_of_rows[2] == sum_of_rows[3] == sum_of_columns[0] == sum_of_columns[1] == sum_of_columns[2] == sum_of_columns[3]:\n            return True\n        else:\n            return False\n    elif len(my_matrix) == 5:\n        for row in range(0, 5):\n            sum_of_rows.append(sum(my_matrix[row]))\n        for column in range(0, 5):\n            sum_of_columns.append(sum([my_matrix[row][column] for row in range(0, 5)]))\n        if sum_of_rows[0] == sum_of_rows[1] == sum_of_rows[2] == sum_of_rows[3] == sum_of_rows[4] == sum_of_columns[0] == sum_of_columns[1] == sum_of_columns[2] == sum_of_columns[3] == sum_of_columns[4]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Checking rows, columns, and diagonals\n    for i in range(len(my_matrix)):\n        sum_row = sum(my_matrix[i])\n        if sum_row!= 15:\n            return False\n        else:\n            sum_column = 0\n            for j in range(len(my_matrix)):\n                sum_column += my_matrix[j][i]\n            if sum_column!= 15:\n                return False\n    diag_1 = 0\n    diag_2 = 0\n    for i in range(len(my_matrix)):\n        diag_1 += my_matrix[i][i]\n        diag_2 += my_matrix[i][-i - 1]\n    if diag_1!= 15 or diag_2!= 15:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = 0\n    # my_matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    # print(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # count the magic squares of different sizes\n    my_count = 0\n    # Add in the other sizes later\n    my_matrix = my_matrix[0:3]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 4:\n        return False\n    s = 0\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= 4:\n            return False\n        s = s + sum(my_matrix[i])\n    s = s - 16\n    if s!= 0:\n        return False\n    #now, let's check row and col summ\n    r = 0\n    c = 0\n    for i in range(len(my_matrix)):\n        r = r + my_matrix[i][i]\n        c = c + my_matrix[i][len(my_matrix) - 1 - i]\n    if r!= 16 or c!= 16:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #1. Create a list of zeroes to use for the magic sum.\n    sum_list = [0] * 10\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if it is a square matrix\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Create a dictionary to store the sum of each row, column, and diagonal\n    sum_of_rows = {i:0 for i in range(1, n+1)}\n    sum_of_cols = {i:0 for i in range(1, n+1)}\n    sum_of_diag = 0\n    sum_of_diag2 = 0\n    \n    # Sum up the elements in the rows, columns, and diagonals\n    for i in range(n):\n        for j in range(n):\n            sum_of_rows[i+1] += my_matrix[i][j]\n            sum_of_cols[j+1] += my_matrix[i][j]\n            if i == j:\n                sum_of_diag += my_matrix[i][j]\n            if (n-1)-i == j:\n                sum_of_diag2 += my_matrix[i][j]\n            \n    # Check whether the sum of each row, column, and diagonal are all the same\n    for v in sum_of_rows.values():\n        if v!= sum_of_cols[v]:\n            return False\n    for v in sum_of_cols.values():\n        if v!= sum_of_rows[v]:\n            return False\n    if sum_of_diag!= sum_of_diag2:\n        return False\n    \n    # If we pass all the tests, we return True\n    return True\n    \ndef magic_square_test2(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test3(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test4(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test5(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test6(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test7(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test8(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test9(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test10(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test11(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test12(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(my_matrix[i][j:j+2] + my_matrix[i+1][j:j+2])!= sum(my_matrix[i+1][j:j+2] + my_matrix[i][j:j+2]):\n                return False\n    return True\n    \ndef magic_square_test13(my_matrix):\n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            if sum(m"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_dict = {}\n    for i in nums:\n        if i in num_dict:\n            num_dict[i]+=1\n        else:\n            num_dict[i]=1\n    print(num_dict)\n    max_key = max(num_dict, key=num_dict.get)\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums.sort()\n    freq_count = defaultdict(int)\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        freq_count[nums[i]] = count\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_item = max(d, key=d.get)\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    max_frequency = max(d.values())\n    for key in d:\n        if d[key] == max_frequency:\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        # Initialise dictionary\n        occur = defaultdict(int)\n        for item in nums:\n            occur[item] += 1\n        \n        # Retrieve key with maximum value\n        result = max(occur, key=occur.get)\n        \n        # Return result\n        return result\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # to get all the unique values from list\n    # nums = set(nums)\n    # for each number in list, we check if its a duplicate or not, if its not, we add it in the dictionary\n    # if its duplicate, we increase the value by 1\n    # iterate over each element in list and check for the maximum value\n    my_dict = defaultdict(int)\n    for i in nums:\n        my_dict[i] += 1\n    \n    # print(my_dict)\n    # now we iterate over the dictionary and print the keys with maximum values\n    # print(my_dict.keys()[my_dict.values().index(max(my_dict.values()))])\n    maximum_occurrences = max(my_dict, key=my_dict.get)\n    return maximum_occurrences\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #TODO: IMPLEMENT ME\n    if not nums: return None\n    d = defaultdict(int)\n    for i in nums:\n        d[i]+=1\n    m = max(d.values())\n    l = [k for k,v in d.items() if v == m]\n    return l[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for i in nums:\n        dic[i] += 1\n    return max(dic, key=dic.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_item = None\n    max_count = 0\n    count = defaultdict(int)\n    for i in nums:\n        count[i] += 1\n    for k,v in count.items():\n        if v > max_count:\n            max_item = k\n            max_count = v\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for num in nums:\n        if num not in d.keys():\n            d[num] = 1\n        else:\n            d[num] += 1\n    max = 0\n    item = None\n    for key, value in d.items():\n        if value > max:\n            max = value\n            item = key\n    return item\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1 = list(str1)\n    i,j = 0,len(str1) - 1\n    while(i < j):\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i],str1[j] = str1[j],str1[i]\n            i += 1\n            j -= 1\n        if str1[i] not in vowels:\n            i += 1\n        if str1[j] not in vowels:\n            j -= 1\n    return \"\".join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            new_str += str1[i]\n    print(new_str)\n    new_str = new_str[::-1]\n    print(new_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=[]\n    vowels_list=['a','e','i','o','u','A','E','I','O','U']\n    for i in range(0,len(str1)):\n        if str1[i] in vowels_list:\n            vowels.append(str1[i])\n            print(vowels)\n            vowels.append(str1[i])\n            str1=str1.replace(str1[i],' ')\n            print(str1)\n    print(str1)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_list = []\n    for i in str1:\n        if i in 'AEIOUaeiou':\n            vowel_list.append(i)\n    vowel_list = vowel_list[::-1]\n    for i in range(len(str1)):\n        if str1[i] in 'AEIOUaeiou':\n            str1 = str1[:i] + vowel_list[i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=[]\n    for i in str1:\n        if i.lower() in \"aeiou\":\n            vowels.append(i)\n    return ''.join(vowels[::-1])\n    \ndef anagrams(word, words):\n    '''\n    Write a Python function to check whether two words are anagrams or not.\n    '''\n    if len(word)==len(words):\n        l1=list(word)\n        l2=list(words)\n        return sorted(l1)==sorted(l2)\n    return False\n    \ndef sum_digits(n):\n    '''\n    Write a Python function to sum all the digits of a given number.\n    '''\n    s=str(n)\n    sum=0\n    for i in s:\n        sum+=int(i)\n    return sum\n    \ndef rotate_matrix(matrix, n):\n    '''\n    Write a Python function to rotate a given square matrix by 90 degrees (clockwise) in linear time and constant space.\n    '''\n    if len(matrix)==0:\n        return None\n    elif len(matrix)==1:\n        return matrix[0][0]\n    else:\n        new=[]\n        for i in range(n):\n            new.append([])\n        for i in range(n):\n            for j in range(n):\n                new[j].append(matrix[i][j])\n        new_matrix=[]\n        for i in range(n):\n            new_matrix.append(new[i])\n        return new_matrix\n    \ndef validate(text, key):\n    '''\n    Write a Python function that takes a string and a key as input and encrypts it using the key as the shift value.\n    '''\n    encrypted=\"\"\n    for i in text:\n        if i.isalpha():\n            encrypted+=chr(ord('A')+(ord(i)-ord('A')+key)%26)\n        elif i.isnumeric():\n            encrypted+=str(int(i)+key)\n        else:\n            encrypted+=i\n    return encrypted\n    \ndef check_palindrome(n):\n    '''\n    Write a Python function to check whether a given number is a palindrome or not.\n    '''\n    x=str(n)\n    for i in range(len(x)//2):\n        if x[i]!=x[len(x)-1-i]:\n            return False\n    return True\n    \ndef get_lengths(words):\n    '''\n    Write a Python function to get the length of the last word of a given array of words.\n    '''\n    lengths=[]\n    for i in words:\n        lengths.append(len(i))\n    return lengths\n    \ndef find_missing_number(arr):\n    '''\n    Write a Python function to find the missing number from a given non-decreasing array.\n    '''\n    n=len(arr)+1\n    return sum(arr)-(n*(n+1)/2)\n    \ndef minimum_swaps(arr):\n    '''\n    Write a Python function to find the minimum number of swaps required to sort an array.\n    '''\n    swaps=0\n    for i in range(len(arr)):\n        if arr[i]!=i+1:\n            for j in range(len(arr)):\n                if arr[i]==j+1 and arr[j]==i+1:\n                    arr[i],arr[j]=arr[j],arr[i]\n                    swaps+=1\n    return swaps\n    \ndef factorial(n):\n    '''\n    Write a Python function to return the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef get_unique_characters(str1):\n    '''\n    Write a Python function to get unique characters in a given string.\n    '''\n    s=list(str1)\n    l=[]\n    for i in s:\n        if i not in l:\n            l.append(i)\n    return len(l)\n    \ndef count_occurences(str1, ch):\n    '''\n    Write a Python function to count the number of occurrences of a character in a given string.\n    '''\n    s=list(str1)\n    count=0\n    for i in s:\n        if i==ch:\n            count+=1\n    return count\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a Python function to check whether two given strings are anagrams or not.\n    '''\n    if len(str1)==len(str2):\n        s1=list(str1)\n        s2=list(str2)\n        return sorted(s1)==sorted(s2)\n    return False\n    \ndef generate_substrings(s):\n    '''\n    Write a Python function to generate all possible substrings from a given string.\n    '''\n    if len(s)==1:\n        return [s]\n    l=[]\n    for i in range(len(s)):\n        l.append(s[i])\n        l.append(s[i:])\n    return l\n    \ndef find_max_substring(s):\n    '''\n    Write a Python function to find the longest substring present in a given string.\n    '''\n    maxi=0\n    for i in range(len(s)):\n        for j in range(i,len(s)+1):\n            temp=s[i:j]\n            if len(temp)>maxi:\n                maxi=len(temp)\n    return maxi\n    \ndef get_input(limit=10):\n    '''\n    Write a Python function to get user input of a list of string.\n    '''\n    print(\"Enter words, press 'Enter' to finish: \")\n    n=0\n    l=[]\n    while(True):\n        temp=input(\"\")\n        if temp==\"\":\n            break\n        else:\n            l.append(temp)\n            n+=1\n            if n==limit:\n                break\n    return l\n    \ndef get_common_chars(str1, str2):\n    '''\n    Write a Python function to get common characters between two strings.\n    '''\n    s1=list(str1)\n    s2=list(str2)\n    l=[]\n    for i in s1:\n        if i in s2:\n            l.append(i)\n    return l\n    \ndef find_longest_common_substring(str1, str2):\n    '''\n    Write a Python function to find the longest common substring between two given strings.\n    '''\n    length1=len(str1)\n    length2=len(str2)\n    temp=[]\n    for i in range(length1):\n        for j in range(length2):\n            if str1[i]==str2[j]:\n                if str1[i:i+1] in str2[j:j+1]:\n                    temp.append(str1[i:i+1])\n                break\n    maxi=0\n    for i in range(len(temp)):\n        if len(temp[i])>maxi:\n            maxi=len(temp[i])\n    return maxi\n    \ndef get_ascii_values(str1):\n    '''\n    Write a Python function to get ASCII values of all characters in a given string.\n    '''\n    s=list(str1)\n    l=[]\n    for i in s:\n        l.append(ord(i))\n    return l\n    \ndef check_valid_parenthesis(str1):\n    '''\n    Write a Python function to check whether a given string is a valid parenthesis or not.\n    '''\n    if str1==\"\":\n        return True\n    else:\n        i=0\n        while(True):\n            if str1[i]==\"(\" and str1[i+1]==\")\":\n                return True\n            elif str1[i]==\"(\" and str1[i+1]==\"(\":\n                str1=str1[:i]+str1[i+2:]\n            elif str1[i]==\")"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str1 = [i for i in str1]\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    vowel_list = []\n    str1 = list(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouyAEIOUY\"\n    reversed_string = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_string = reversed_string + char\n    return reversed_string[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    list1 = list(str1)\n    list2 = []\n    for i in list1:\n        if i.lower() in vowels:\n            list2.append(i)\n    list1.reverse()\n    for i in list1:\n        if i.lower() in vowels:\n            list1.remove(i)\n            list1.append(i)\n    list1.reverse()\n    str2 = ''.join(list1)\n    print(str2)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for item in tup1:\n        string += str(item) + ','\n    return string[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \ntuple_example = ('abc', 'def', 'ghi')\nstring_example = tup_string(tuple_example)\nprint(string_example)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    print(\"The tuple is:\",tup1)\n    tup_to_str = ''.join(map(str, tup1))\n    print(\"The tuple as a string is:\", tup_to_str)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return(str(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for item in tup1:\n        s += str(item)\n        s += ','\n    return s[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + str(tup1[0]) + ','+ str(tup1[1]) + ')'\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    sum = 0\n    for i in range(0,len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n    \nprint(sum_negativenum([1, -2, 3, 4, -5]))\nprint(sum_negativenum([1, 2, -3, 4]))\nprint(sum_negativenum([-1, 2, 3, -4]))\nprint(sum_negativenum([-1]))\nprint(sum_negativenum([-2]))\nprint(sum_negativenum([-3]))\nprint(sum_negativenum([0]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = []\n    for number in nums:\n        if number < 0:\n            negatives.append(number)\n    return sum(negatives)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum=0\n    for x in nums:\n        if x<0:\n            sum+=x\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 / 2 * n * (2 * n - 1)\n    \n    \ndef dn(n):\n    '''\n    Write a function that returns the nth odd number in the spiral\n    sequence.\n    '''\n    return int(round((n*(3*n-1)/2)**0.5))\n    \n    \ndef pn(n):\n    '''\n    Write a function to return the nth Pell number.\n    '''\n    # A function that checks if a number is even or odd.\n    def is_even(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    \n    # The first two numbers in the sequence are 1 and 1.\n    if n == 1 or n == 2:\n        return 1\n    else:\n        # Calculate the values of m and p.\n        m = 1\n        p = 1\n        \n        # The initial value of n is n = 3.\n        n = 3\n        while n > 2:\n            # Increment n by 1 until it reaches a number greater than the\n            # next value in the sequence.\n            n = n + 1\n            # Calculate the next value in the sequence by finding the sum of\n            # the previous two values and multiplying by the next value in the\n            # sequence.\n            p = m + p\n            # Increment m by 1.\n            m = m + 1\n            \n            # The answer is the nth number in the sequence.\n            if n == nth_num:\n                return p\n                \n    \ndef pn_sequences(n):\n    '''\n    Write a function to return the nth value in the Pell sequence.\n    '''\n    # The first two values in the sequence are 1 and 1.\n    if n == 1 or n == 2:\n        return 1\n    else:\n        # Calculate the values of m and p.\n        m = 1\n        p = 1\n        \n        # The initial value of n is n = 3.\n        n = 3\n        while n > 2:\n            # Increment n by 1 until it reaches a number greater than the\n            # next value in the sequence.\n            n = n + 1\n            # Calculate the next value in the sequence by finding the sum of\n            # the previous two values and multiplying by the next value in the\n            # sequence.\n            p = m + p\n            # Increment m by 1.\n            m = m + 1\n            \n            # The answer is the nth number in the sequence.\n            if n == nth_num:\n                return p\n                \n                \ndef pn_segments(n):\n    '''\n    Write a function that returns the nth value in the Pell sequence.\n    '''\n    # The first two values in the sequence are 1 and 1.\n    if n == 1 or n == 2:\n        return 1\n    else:\n        # Calculate the values of m and p.\n        m = 1\n        p = 1\n        \n        # The initial value of n is n = 3.\n        n = 3\n        while n > 2:\n            # Increment n by 1 until it reaches a number greater than the\n            # next value in the sequence.\n            n = n + 1\n            # Calculate the next value in the sequence by finding the sum of\n            # the previous two values and multiplying by the next value in the\n            # sequence.\n            p = m + p\n            # Increment m by 1.\n            m = m + 1\n            \n            # The answer is the nth number in the sequence.\n            if n == nth_num:\n                return p\n                \n    \ndef pn_recursion(n):\n    '''\n    Write a function that returns the nth value in the Pell sequence.\n    '''\n    # A function that checks if a number is even or odd.\n    def is_even(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    \n    # The first two values in the sequence are 1 and 1.\n    if n == 1 or n == 2:\n        return 1\n    else:\n        # The value of m is the previous value in the sequence.\n        m = 1\n        # The value of p is the previous value in the sequence.\n        p = 1\n        \n        # The initial value of n is n = 3.\n        n = 3\n        while n > 2:\n            # Increment n by 1 until it reaches a number greater than the\n            # next value in the sequence.\n            n = n + 1\n            # Calculate the next value in the sequence by finding the sum of\n            # the previous two values and multiplying by the next value in the\n            # sequence.\n            p = m + p\n            # Increment m by 1.\n            m = m + 1\n            \n            # The answer is the nth number in the sequence.\n            if n == nth_num:\n                return p\n                \n    \ndef pn_recursion_segments(n):\n    '''\n    Write a function that returns the nth value in the Pell sequence.\n    '''\n    # The first two values in the sequence are 1 and 1.\n    if n == 1 or n == 2:\n        return 1\n    else:\n        # The value of m is the previous value in the sequence.\n        m = 1\n        # The value of p is the previous value in the sequence.\n        p = 1\n        \n        # The initial value of n is n = 3.\n        n = 3\n        while n > 2:\n            # Increment n by 1 until it reaches a number greater than the\n            # next value in the sequence.\n            n = n + 1\n            # Calculate the next value in the sequence by finding the sum of\n            # the previous two values and multiplying by the next value in the\n            # sequence.\n            p = m + p\n            # Increment m by 1.\n            m = m + 1\n            \n            # The answer is the nth number in the sequence.\n            if n == nth_num:\n                return p\n                \n    \ndef pn_recursion_verify(n):\n    '''\n    Write a function that returns the nth value in the Pell sequence.\n    '''\n    # A function that checks if a number is even or odd.\n    def is_even(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    \n    # The first two values in the sequence are 1 and 1.\n    if n == 1 or n == 2:\n        return 1\n    else:\n        # The value of m is the previous value in the sequence.\n        m = 1\n        # The value of p is the previous value in the sequence.\n        p = 1\n        \n        # The initial value of n is n = 3.\n        n = 3\n        while n > 2:\n            # Increment n by 1 until it reaches a number greater than the\n            # next value in the sequence.\n            n = n + 1\n            # Calculate the next value in the sequence by finding the sum of\n            # the previous two values and multiplying by the next value in the\n            # sequence.\n            p = m + p\n            # Increment m by 1.\n            m = m + 1\n            \n            # The answer is the nth number in the sequence.\n            if n == nth_num:\n                return p\n                \n    \ndef pn_recursion_segments_verify(n):\n    '''\n    Write a function that returns the nth value in the Pell sequence.\n    '''\n    # The first two values in the sequence are 1 and 1.\n    if n == 1 or n == 2:\n        return 1\n    else:\n        # The value of m is the previous value in the sequence.\n        m = 1\n        # The value of p is the previous value in the sequence.\n        p = 1\n        \n        # The initial value of n is n = 3.\n        n = 3\n        while n > 2:\n            # Increment n by 1 until it reaches a number greater than the\n            # next value in the sequence.\n            n = n + 1\n            # Calculate the next value in the sequence by finding the sum of\n            # the previous two values and multiplying by the next value in the\n            # sequence.\n            p = m + p\n            # Increment m by 1.\n            m = m + 1\n            \n            # The answer is the nth number in the sequence.\n            if n == nth_num:\n                return p\n                \n    "
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = (1/2) * (2 * n - 1) * n\n    return int(x)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    \n    first = 1\n    seq = 1\n    i = 0\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        return \"n must be positive\"\n    if n == 0:\n        return 0\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (1 / 2) * n ** 2 * (2 * n - 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero = 0\n    for num in nums:\n        if num == 0:\n            non_zero += 1\n    ratio = non_zero / len(nums)\n    print(ratio)\n    \n    \ndef key_count(nums):\n    '''\n    Write a function to count the number of times each value occurs in a given list.\n    '''\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    print(counts)\n    \n    \ndef key_count_array(nums):\n    '''\n    Write a function to count the number of times each value occurs in a given list.\n    '''\n    counts = array('i', [0]*10)\n    for num in nums:\n        counts[num] += 1\n    print(counts)\n    \n    \ndef key_count_array2(nums):\n    '''\n    Write a function to count the number of times each value occurs in a given list.\n    '''\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    print(counts)\n    \n    \ndef key_count_dictionary(nums):\n    '''\n    Write a function to count the number of times each value occurs in a given list.\n    '''\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    print(counts)\n    \n    \ndef merge_count(nums1, nums2):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    count = 0\n    for num in nums1:\n        if num in nums2:\n            count += 1\n    print(count)\n    \n    \ndef merge_count_array(nums1, nums2):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    count = 0\n    nums1_dict = {}\n    for num in nums1:\n        if num in nums1_dict:\n            nums1_dict[num] += 1\n        else:\n            nums1_dict[num] = 1\n    for num in nums2:\n        if num in nums1_dict:\n            nums1_dict[num] -= 1\n            if nums1_dict[num] == 0:\n                nums1_dict.pop(num)\n        else:\n            count += 1\n    print(count)\n    \n    \ndef merge_count_array2(nums1, nums2):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums1:\n        if num in nums1_dict:\n            nums1_dict[num] += 1\n        else:\n            nums1_dict[num] = 1\n    nums2_dict = {}\n    for num in nums2:\n        if num in nums2_dict:\n            nums2_dict[num] += 1\n        else:\n            nums2_dict[num] = 1\n    count = 0\n    for num in nums1_dict:\n        if num in nums2_dict:\n            count += min(nums1_dict[num], nums2_dict[num])\n        else:\n            count += nums1_dict[num]\n    print(count)\n    \n    \ndef key_count_count(nums):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums:\n        if num in nums1_dict:\n            nums1_dict[num] += 1\n        else:\n            nums1_dict[num] = 1\n    count = 0\n    for num in nums1_dict:\n        count += nums1_dict[num]\n    print(count)\n    \n    \ndef key_count_count2(nums):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums:\n        nums1_dict[num] = nums1_dict.get(num, 0) + 1\n    count = 0\n    for num in nums1_dict:\n        count += nums1_dict[num]\n    print(count)\n    \n    \ndef key_count_count3(nums):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums:\n        nums1_dict[num] = nums1_dict.get(num, 0) + 1\n    count = 0\n    for num in nums1_dict:\n        count += nums1_dict[num]\n    print(count)\n    \n    \ndef key_count_count4(nums):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums:\n        nums1_dict[num] = nums1_dict.get(num, 0) + 1\n    count = 0\n    for num in nums1_dict:\n        count += nums1_dict[num]\n    print(count)\n    \n    \ndef key_count_count5(nums):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums:\n        nums1_dict[num] = nums1_dict.get(num, 0) + 1\n    count = 0\n    for num in nums1_dict:\n        count += nums1_dict[num]\n    print(count)\n    \n    \ndef key_count_count6(nums):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums:\n        nums1_dict[num] = nums1_dict.get(num, 0) + 1\n    count = 0\n    for num in nums1_dict:\n        count += nums1_dict[num]\n    print(count)\n    \n    \ndef key_count_count7(nums):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums:\n        nums1_dict[num] = nums1_dict.get(num, 0) + 1\n    count = 0\n    for num in nums1_dict:\n        count += nums1_dict[num]\n    print(count)\n    \n    \ndef key_count_count8(nums):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums:\n        nums1_dict[num] = nums1_dict.get(num, 0) + 1\n    count = 0\n    for num in nums1_dict:\n        count += nums1_dict[num]\n    print(count)\n    \n    \ndef key_count_count9(nums):\n    '''\n    Write a function to count the number of ways two lists can be merged to form a given list.\n    '''\n    nums1_dict = {}\n    for num in nums:\n        nums1_dict[num] = nums1_dict.get(num, 0) + 1\n    count = 0\n    for num in nums1_dict:\n        count += nums1_dict[nu"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    counter = 0\n    for num in nums:\n        if num == 0:\n            counter += 1\n    return counter / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums_count = 0\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            nums_count += 1\n            zero_count += 1\n        elif num!= 0:\n            nums_count += 1\n    \n    print(zero_count/nums_count)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for n in nums:\n        if n == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros, non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    for i in nums:\n        if i == 0:\n            nums.remove(0)\n    print(len(nums) / len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if not nums:\n        return 0\n    numbers = array('b', nums)\n    c = 0\n    for n in nums:\n        if n == 0:\n            c += 1\n    return c/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    sum = 0\n    while n > 0:\n        r = n % 2\n        sum += r\n        n = n // 2\n    return sum == 1\n  \ndef is_Sum_Of_Powers_Of_Two_v2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    while n > 0:\n        if n % 2!= 0:\n            return False\n        n = n // 2\n    return True\n  \ndef is_Sum_Of_Powers_Of_Two_v3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    return (n & (n-1)) == 0\n  \nprint(is_Sum_Of_Powers_Of_Two(5))\nprint(is_Sum_Of_Powers_Of_Two_v2(5))\nprint(is_Sum_Of_Powers_Of_Two_v3(5)"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2:\n        return False\n    \n    while n % 2 == 0:\n        n = n // 2\n    \n    if n == 1:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Iterate from 1 to root(n)\n    for x in range(1, int(n**0.5)+1):\n        # Check if n can be expressed as 2^k * (2 * x + 1)^j\n        # x is 1 to the root of n\n        if n == 2**x * (2 * x + 1)**(n - x - 1):\n            return True\n        # Check if n can be expressed as 2^k * (2 * x + 2)^j\n        if n == 2**x * (2 * x + 2)**(n - x - 1):\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n!= 0):\n        p = 2\n        while (p <= n):\n            if (p == n):\n                return 1\n            p = p * 2\n        n = n - 1\n    return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = False\n    i = 1\n    while i < n: \n        if n == 2**i: \n            return True\n        i += 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n > 0): \n        while (n % 2 == 0): \n            n = n / 2\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while (n > 0):\n        if ((n % 2) == 1):\n            return False\n        else:\n            n = n//2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    return sum(x.bit_length() for x in bin(n).split('b')[1:]) % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    m = n;\n    s = 0\n    while (m > 0): \n        \n        s += m % 2; \n        m = m // 2; \n    return s == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n==0): \n        return False\n    elif (n==1): \n        return True\n    else: \n        \n        while(n): \n            sum=0\n            while (n): \n                sum+=1\n                n>>=1\n            if (sum==1): \n                return True\n            else: \n                return False\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    print(2*math.pi*r)\n    #return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * 2 * math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    if not isinstance(r, int):\n        raise ValueError(\"Input must be an integer.\")\n    else:\n        return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2*3.14*r\n    return c\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = [num for sublist in test_list for num in sublist]\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(itertools.chain(*test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for item in test_list:\n        if isinstance(item,list):\n            for item2 in item:\n                test_list.append(item2)\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set(sum(test_list, [])))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for x in test_list:\n        if type(x) == list:\n            singly_list.extend(x)\n        else:\n            singly_list.append(x)\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for element in test_list:\n        if isinstance(element, int):\n            return element\n        if isinstance(element, list):\n            return extract_singly(element)\n    \nif __name__ == '__main__':\n    list_1 = [1,2,3,4,[5,[6,7,[8,9],10],11],12]\n    list_2 = [[[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]],16,17],18,19,20,21,[22,23,24,[25,26,27,28,29],30]]\n    list_3 = [[[1, [2, 3, [4, 5], 6], 7], 8], 9, [10, 11, 12], 13, 14, 15]\n    assert extract_singly(list_1) == 12\n    assert extract_singly(list_2) == 39\n    assert extract_singly(list_3) == 36\n    print(\"Test Success!\")\n    "
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, int):\n            result.append(item)\n        else:\n            result.extend(extract_singly(item))\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # I will flatten the list of lists by flattening the first sublist\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    #print(\"flattened_list:\", flattened_list)\n    return flattened_list\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    length = len(nums)\n    if length == 1:\n        return nums\n    \n    for i in range(length - 1, 0, -1):\n        max_idx = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        max_index = len(nums) - i - 1\n        for j in range(0, max_index):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return nums\n    nums_len = len(nums)\n    # Start with the last item in the list\n    for current_idx in range(nums_len - 1, 0, -1):\n        current_item = nums[current_idx]\n        current_idx = nums_len - 1\n        while current_idx >= 0 and current_item < nums[current_idx]:\n            nums[current_idx + 1] = nums[current_idx]\n            current_idx -= 1\n        nums[current_idx + 1] = current_item\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    sorted_nums = []\n    for i in range(size):\n        nums.sort()\n        nums.reverse()\n        sorted_nums.append(nums.pop())\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swaps = 0\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    nums = nums[:]\n    for i in range(len(nums)):\n        max_idx = i\n        for j in range(i + 1, len(nums)):\n            if nums[max_idx] < nums[j]:\n                max_idx = j\n        if max_idx!= i:\n            nums[max_idx], nums[i] = nums[i], nums[max_idx]\n            pancake_sort(nums[:i + 1])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return\n    def flip(nums, i):\n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            if nums[l]!= i and nums[r]!= i:\n                break\n            l += 1\n            r -= 1\n        nums[l], nums[r] = nums[r], nums[l]\n        return l\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    count+=1\n                    break\n    return count\n    \n    \nlist1=[2,3,4,4,4,5,6]\nlist2=[7,7,7,6,5,4,2]\nlist3=[8,6,4,8,6,4,3]\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            samepair +=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n        else:\n            count += 0\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]==list2[i] and list2[i]==list3[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            samepair += 1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_count = 0\n    for item1,item2,item3 in zip(list1,list2,list3):\n        if item1 == item2 == item3:\n            same_count +=1\n    return same_count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            num+=1\n        else:\n            pass\n    return num\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Lists = []\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count = count +1\n            Lists.append(i)\n    return Lists, count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in Input:\n        if type(i) == list:\n            list_count = list_count + 1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in range(len(Input)):\n        if type(Input[i])==list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if type(i) is list:\n            count+=1\n    return count\ndef tuple_count(Input): \n    '''\n    Write a function to count the number of occurences of each element of the tuple.\n    '''\n    count = dict()\n    for i in Input:\n        count[i] = count.get(i,0)+1\n    return count\ndef tuple_rep(Input): \n    '''\n    Write a function to find element(s) that occured more than once in the tuple.\n    '''\n    count = tuple_count(Input)\n    res = []\n    for i in count:\n        if count[i] > 1:\n            res.append(i)\n    return res\ndef search_list(Input,num): \n    '''\n    Write a function to check if a given element is present in the list or not.\n    '''\n    flag=0\n    for i in Input:\n        if i==num:\n            flag=1\n    return flag\ndef search_tuple(Input,num): \n    '''\n    Write a function to check if a given element is present in the tuple or not.\n    '''\n    flag=0\n    for i in Input:\n        if i==num:\n            flag=1\n    return flag\ndef search_dict(Input,num): \n    '''\n    Write a function to check if a given element is present in the dictionary or not.\n    '''\n    flag=0\n    for key in Input:\n        if key==num:\n            flag=1\n    return flag\ndef search_set(Input,num): \n    '''\n    Write a function to check if a given element is present in the set or not.\n    '''\n    flag=0\n    for i in Input:\n        if i==num:\n            flag=1\n    return flag\ndef set_max(Input): \n    '''\n    Write a function to find maximum element of the set.\n    '''\n    count = dict()\n    for i in Input:\n        count[i] = count.get(i,0)+1\n    maxx = []\n    for key in count:\n        if count[key] == max(count.values()):\n            maxx.append(key)\n    return maxx\ndef set_min(Input): \n    '''\n    Write a function to find minimum element of the set.\n    '''\n    count = dict()\n    for i in Input:\n        count[i] = count.get(i,0)+1\n    minn = []\n    for key in count:\n        if count[key] == min(count.values()):\n            minn.append(key)\n    return minn\ndef set_diff(Input,num): \n    '''\n    Write a function to find elements that are present in the set but not in the tuple.\n    '''\n    flag = 0\n    for i in Input:\n        if i in num:\n            flag = 1\n    if flag == 1:\n        return num\n    else:\n        return -1\ndef set_intersection(Input,num): \n    '''\n    Write a function to find common elements present in the sets.\n    '''\n    flag = 0\n    for i in num:\n        if i in Input:\n            flag = 1\n    if flag == 1:\n        return num\n    else:\n        return -1\ndef set_union(Input,num): \n    '''\n    Write a function to find union of two sets.\n    '''\n    count = dict()\n    for i in Input:\n        count[i] = count.get(i,0)+1\n    for i in num:\n        count[i] = count.get(i,0)+1\n    un = []\n    for key in count:\n        if count[key] == max(count.values()):\n            un.append(key)\n    return un\ndef set_difference(Input,num): \n    '''\n    Write a function to find difference between two sets.\n    '''\n    flag = 0\n    for i in num:\n        if i in Input:\n            flag = 1\n    if flag == 1:\n        return Input\n    else:\n        return -1\ndef set_symmetric_difference(Input,num): \n    '''\n    Write a function to find symmetric difference between two sets.\n    '''\n    flag = 0\n    for i in num:\n        if i in Input:\n            flag = 1\n    if flag == 1:\n        return num\n    else:\n        return Input\ndef set_issubset(Input,num): \n    '''\n    Write a function to check whether a given set is a subset of another set or not.\n    '''\n    flag = 0\n    for i in num:\n        if i in Input:\n            flag = 1\n    if flag == 1:\n        return num\n    else:\n        return -1\ndef set_issuperset(Input,num): \n    '''\n    Write a function to check whether a given set is a superset of another set or not.\n    '''\n    flag = 0\n    for i in Input:\n        if i in num:\n            flag = 1\n    if flag == 1:\n        return Input\n    else:\n        return -1\ndef set_subset(Input,num): \n    '''\n    Write a function to check whether a given set is a subset of another set or not.\n    '''\n    flag = 0\n    for i in num:\n        if i in Input:\n            flag = 1\n    if flag == 1:\n        return num\n    else:\n        return -1\ndef set_superset(Input,num): \n    '''\n    Write a function to check whether a given set is a subset of another set or not.\n    '''\n    flag = 0\n    for i in num:\n        if i in Input:\n            flag = 1\n    if flag == 1:\n        return Input\n    else:\n        return -1\ndef set_clear(Input): \n    '''\n    Write a function to clear the set.\n    '''\n    Input.clear()\ndef set_copy(Input): \n    '''\n    Write a function to make a copy of the set.\n    '''\n    return Input.copy()\ndef set_remove(Input,num): \n    '''\n    Write a function to remove a given element from set.\n    '''\n    if num in Input:\n        Input.remove(num)\ndef set_discard(Input,num): \n    '''\n    Write a function to remove a given element from set.\n    '''\n    Input.discard(num)\ndef set_pop(Input): \n    '''\n    Write a function to remove and return an arbitrary element from the set.\n    '''\n    return Input.pop()\ndef set_add(Input,num): \n    '''\n    Write a function to add an element to set.\n    '''\n    Input.add(num)\ndef set_union_update(Input,num): \n    '''\n    Write a function to update the set with the union of a given set.\n    '''\n    Input.update(num)\ndef set_intersection_update(Input,num): \n    '''\n    Write a function to update the set with the intersection of a given set.\n    '''\n    Input.intersection_update(num)\ndef set_difference_update(Input,num): \n    '''\n    Write a function to update the set with the difference between two sets.\n    '''\n    Input.difference_update(num)\ndef set_symmetric_difference_update(Input,num): \n    '''\n    Write a function to update the set with the symmetric difference of two sets.\n    '''\n    Input.symmetric_difference_update(num)\ndef set_update(Input,num): \n    '''\n    Write a function to update the set with the union, intersection, difference and symmetric difference of two sets.\n    '''\n    Input.update(num)\ndef set_pop_update(Input): \n    '''\n    Write a function to remove and update the set with the union of a given set.\n    '''\n    return Input.pop()\ndef set_clear_update(Input): \n    '''\n    Write a function to clear the set and update with the union of a given set.\n    '''\n    Input.clear()\n    Inpu"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for i in Input:\n        lists += i.split(';')\n    return len(list(set(lists)))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_num = 0\n    for item in Input:\n        if type(item) == list:\n            list_num = list_num + 1\n    return list_num\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) == list:\n        return 1\n    if type(Input) == tuple:\n        return 1 + sum([find_lists(item) for item in Input])\n    return 0\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    min_el = min(arr)\n    arr = [el-min_el for el in arr]\n    return max(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # sort the array in order to find max diff between two elements\n    arr.sort()\n    # first element of the array - min, second - max\n    return abs(arr[0] - arr[1])\n    \n    \ndef find_short_window_sum(arr):\n    '''\n    Write a python function to find the maximum subarray sum in a given array.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum >= max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return max(arr[i] - arr[i-1] for i in range(1, len(arr)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Declare a variable to store the maximum difference \n    max_diff = -1\n    # Traverse through all the array elements \n    for i in range(len(arr)): \n        # Find the maximum element in the array \n        # with the index 'i' \n        min_num = min(arr[i:]) \n        max_num = max(arr[i:]) \n        # Find the difference between the minimum and maximum elements \n        max_diff = max((max_num - min_num), max_diff) \n        # Return the maximum difference \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr) - min(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # start with first element \n    max_diff = arr[1] - arr[0] \n    # iterate over the array \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            # store the difference \n            diff = abs(arr[i] - arr[j]) \n            # update the max_diff \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff\n    \n    \ndef Count_Unique_In_An_Array(arr): \n    '''\n    Write a python function to find the number of unique values in a given array.\n    '''\n    # sort the array \n    arr.sort() \n    # iterate over the array \n    for i in range(len(arr)): \n        if arr[i] == arr[i - 1]: \n            return i \n    return len(arr)\n    \ndef Find_Max_Occuring_Character_in_A_String(str): \n    '''\n    Write a python function to find the character that occurs the most number of times in a given string.\n    '''\n    # check if the string is empty \n    if len(str) == 0: \n        return \"Empty String\"\n    # initialise a dictionary \n    count_dict = {} \n    # iterate over the string \n    for i in str: \n        # check if the character is not present in the dictionary \n        if i not in count_dict: \n            # add the character to the dictionary \n            count_dict[i] = 0\n        # increment the character count \n        count_dict[i] += 1\n    # find the character that occurs the most number of times \n    max_count = 0\n    max_char = None\n    for key, value in count_dict.items(): \n        if value > max_count: \n            max_count = value \n            max_char = key \n    return max_char\n    \n    \ndef Reverse_A_String(str): \n    '''\n    Write a python function to reverse a given string.\n    '''\n    if len(str) == 0: \n        return \"\"\n    # intialise a variable \n    reverse_str = \"\" \n    # iterate over the string \n    for i in range(len(str) - 1, -1, -1): \n        reverse_str += str[i] \n    return reverse_str\n    \n    \ndef Check_If_String_Is_Subset(str1, str2): \n    '''\n    Write a python function to check if one string is a subset of another string.\n    '''\n    # check if the length of str2 is greater than the length of str1 \n    if len(str1) > len(str2): \n        return False\n    # iterate over str1 \n    for i in range(len(str1)): \n        # check if str1 is a substring of str2 \n        if str1[i] in str2: \n            return True\n    # if not a substring \n    return False\n    \ndef Check_If_String_Is_Subset_2(str1, str2): \n    '''\n    Write a python function to check if one string is a subset of another string.\n    '''\n    # check if the length of str2 is greater than the length of str1 \n    if len(str2) > len(str1): \n        return False\n    # iterate over str1 \n    for i in range(len(str1)): \n        # check if str1 is a substring of str2 \n        if str1[i] in str2: \n            return True\n    # if not a substring \n    return False\n    \ndef Max_Occuring_Char_In_String(str): \n    '''\n    Write a python function to find the character that occurs the most number of times in a given string.\n    '''\n    # check if the string is empty \n    if len(str) == 0: \n        return None\n    # intialise a dictionary \n    count_dict = {} \n    # iterate over the string \n    for i in str: \n        # check if the character is not present in the dictionary \n        if i not in count_dict: \n            # add the character to the dictionary \n            count_dict[i] = 0\n        # increment the character count \n        count_dict[i] += 1\n    # find the character that occurs the most number of times \n    max_count = 0\n    max_char = None\n    for key, value in count_dict.items(): \n        if value > max_count: \n            max_count = value \n            max_char = key \n    return max_char\n    \ndef Left_Rotation_String(str, n): \n    '''\n    Write a python function to find the character that occurs the most number of times in a given string.\n    '''\n    # check if the string is empty \n    if len(str) == 0: \n        return None\n    # intialise a dictionary \n    count_dict = {} \n    # iterate over the string \n    for i in str: \n        # check if the character is not present in the dictionary \n        if i not in count_dict: \n            # add the character to the dictionary \n            count_dict[i] = 0\n        # increment the character count \n        count_dict[i] += 1\n    # find the character that occurs the most number of times \n    max_count = 0\n    max_char = None\n    for key, value in count_dict.items(): \n        if value > max_count: \n            max_count = value \n            max_char = key \n    # iterate over the str \n    for i in range(n): \n        # find the index \n        index = 0\n        for j in str: \n            # check if the current character is the max character \n            if j == max_char: \n                # return the index \n                return index\n            # increment the index \n            index += 1\n    # if the string is empty \n    return None\n    \ndef Reverse_Pallindrome_String(str): \n    '''\n    Write a python function to reverse a given string.\n    '''\n    # check if the string is empty \n    if len(str) == 0: \n        return None\n    # intialise a variable \n    reverse_str = \"\" \n    # iterate over the string \n    for i in range(len(str) - 1, -1, -1): \n        reverse_str += str[i] \n    return reverse_str\n    \ndef Check_If_Substring_Exists(str1, str2): \n    '''\n    Write a python function to check if one string is a substring of another string.\n    '''\n    # check if the length of str2 is greater than the length of str1 \n    if len(str1) < len(str2): \n        return False\n    # iterate over str1 \n    for i in range(len(str1)): \n        # check if str1 is a substring of str2 \n        if str1[i] in str2: \n            return True\n    # if not a substring \n    return False\n    \ndef Check_If_Substring_Exists_2(str1, str2): \n    '''\n    Write a python function to check if one string is a substring of another string.\n    '''\n    # check if the length of str2 is greater than the length of str1 \n    if len(str1) < len(str2): \n        return False\n    # iterate over str1 \n    for i in range(len(str1)): \n        # check if str1 is a substring of str2 \n        if str1[i] == str2[i]: \n            return True\n    # if not a substring \n    return False\n    \ndef Reverse_Pallindrome_String_2(str): \n    '''\n    Write a python function to reverse a given string.\n    '''\n    # check if the string is empty \n    if len(str) == 0: \n        return None\n    # intialise a variable \n    reverse_str = \"\" \n    # iterate over the string \n    fo"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = -99999\n    n = len(arr) \n    arr.sort() \n    \n    for i in range(0,n-1):\n        max = max + arr[i+1] - arr[i]\n        \n    return max\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return (max(arr) - min(arr)) \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # initialize difference with first element of the array\n    diff = abs(arr[0] - arr[1])\n    # iterate over the array\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            # difference between the current element and the next element\n            curr_diff = abs(arr[i] - arr[j])\n            # compare with max_diff\n            diff = curr_diff if curr_diff > diff else diff\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # variable to store the difference \n    maxDiff = 0\n    # variable to store the elements in the array \n    arr = sorted(arr)\n    # loop through the array \n    for i in range(0, len(arr)-1): \n        diff = arr[i+1] - arr[i] \n        # check if the difference is greater than the current max \n        if (maxDiff < diff): \n            maxDiff = diff\n    return maxDiff\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        for j in range(1, n):\n            if i*a + j*b == n:\n                return (i, j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        if (a*i + b)%n == 0:\n            return (i, (n-(b))//a)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = 0, 0\n    while x < n:\n        if (a * x + b) % n == 0:\n            return x, (n - x) % n\n        x += 1\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def gcd(a, b):\n        a, b = abs(a), abs(b)\n        if a < b:\n            a, b = b, a\n        while b > 0:\n            a, b = b, a % b\n        return a\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if (a*x + b*y == n):\n                return (x,y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if i == j:\n                continue\n            if a * i + b * j == n:\n                return i, j\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a*i + b*j == n:\n                return i, j\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Handle easy cases.\n    if a == 1 and b == 1 and n == 1:\n        return (1, 1)\n    if a == 1 and b == 1 and n == 2:\n        return (2, 2)\n    if a == 1 and b == 1 and n == 3:\n        return (3, 3)\n    if a == 1 and b == 1 and n == 4:\n        return (4, 4)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if (a * x) % n == 1:\n            for y in range(1, n):\n                if (a * x + b * y) % n == 0:\n                    return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) < len(list2):\n        list1 = [element for element in list1 if element not in list2]\n    else:\n        list2 = [element for element in list2 if element not in list1]\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    try:\n        list1_copy = list1.copy()\n        list2_copy = list2.copy()\n        \n        for i in list2_copy:\n            if i in list1_copy:\n                list1_copy.remove(i)\n        return list1_copy\n    except:\n        return None\n    \ndef unique_elements(list1):\n    '''\n    Write a function to find and return the unique elements from a given list.\n    '''\n    try:\n        unique_list = []\n        for i in list1:\n            if i not in unique_list:\n                unique_list.append(i)\n        return unique_list\n    except:\n        return None\n    \ndef multiply_elements(list1):\n    '''\n    Write a function to multiply all elements from a given list.\n    '''\n    try:\n        multiplication = 1\n        for i in list1:\n            multiplication *= i\n        return multiplication\n    except:\n        return None\n    \ndef even_elements(list1):\n    '''\n    Write a function to return all the even elements from a given list.\n    '''\n    try:\n        even_list = []\n        for i in list1:\n            if i % 2 == 0:\n                even_list.append(i)\n        return even_list\n    except:\n        return None\n        \ndef is_member(list1, list2):\n    '''\n    Write a function to check if a given element is present in a list or not.\n    '''\n    try:\n        for i in list2:\n            if i in list1:\n                return True\n            else:\n                return False\n    except:\n        return None\n    \ndef get_index(list1, list2):\n    '''\n    Write a function to get the index of a given element in a list.\n    '''\n    try:\n        for i, j in enumerate(list1):\n            if j == list2:\n                return i\n        return -1\n    except:\n        return None\n    \ndef get_highest_index(list1, list2):\n    '''\n    Write a function to get the highest index of a given element in a list.\n    '''\n    try:\n        index = 0\n        for i, j in enumerate(list1):\n            if j == list2:\n                if index < i:\n                    index = i\n        return index\n    except:\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        while elem in list1:\n            list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in list2:\n        list1.remove(i)\n        \n    return list1\n    \ndef replace_elements(list1, list2):\n    '''\n    Write a function to replace all elements of list1 with the first element of list2. \n    '''\n    \n    for i in range(0, len(list1)):\n        list1[i] = list2[0]\n    \n    return list1\n    \ndef replace_elements_v2(list1, list2):\n    '''\n    Write a function to replace all elements of list1 with the first element of list2. \n    Do this without creating a new list.\n    '''\n    \n    list1[:] = [list2[0]] * len(list1)\n    \n    return list1\n    \n    \ndef list_from_string(string):\n    '''\n    Write a function to take a string and return a list of strings.\n    '''\n    \n    return string.split(\" \")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list2.remove(item)\n    return list2\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return \"Error: enter a number greater than or equal to 0\"\n    elif n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n > 0:\n        return (n * (n+1) // 2)\n    elif n == 0:\n        return 0\n    else:\n        return sum_series(n + 1) - sum_series(n - 1)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #while n >= 0:\n    #    n -= 2\n    #    print(n)\n    #    n = n + 1\n    return 1 + 2 + 4 + 8 + 16 + 32 + 64\n    \ndef sum_series2(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n + 1) // 2\n    \ndef sum_series3(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n*(n + 1)/2\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #sum_series(4) # 10\n    #sum_series(5) # 15\n    #sum_series(6) # 21\n    #sum_series(7) # 28\n    #sum_series(8) # 36\n    #sum_series(9) # 45\n    #sum_series(10) # 55\n    #sum_series(11) # 66\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n    \n    \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    while n >= 0:\n        total += (n-2*n)\n        n -= 2\n    return total\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2 * tan(pi/l))/4\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 3:\n        return ((s*l**2)/(4*tan(pi/s)))\n    else:\n        return ((s*l**2)/(2*tan(pi/s)))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * (l ** 2)) / (tan(pi / l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s ** 2) * ((tan(pi / l) / 2)) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = (s ** 2) * (tan(pi / l) / 2)\n    return A\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/2\n    print(f\"\\nThe area of the polygon with {l} sides is {round(area, 2)}\")\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l*(0.25*(tan(pi/s)))\n    "
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l**2) / (4*tan(pi/l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0:\n        return None\n    else:\n        return round((l * s ** 2)/(4 * tan(pi/s)), 2)"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((s*l)/2)*(1/tan(pi/s))\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            d.append(i)\n    return sum(d)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_d=[]\n    sum_d.append(1)\n    for i in range(2,n+1):\n        sum_d.append(i)\n        for j in range(i,n+1):\n            if i*j<=n:\n                sum_d[i*j] = 0\n    return sum_d\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 1\n    sum1 = 0\n    sum2 = 0\n    for i in range(2,n):\n        if n%i == 0:\n            div_sum += i\n    sum1 = div_sum\n    n = div_sum\n    for j in range(2,n):\n        if n%j == 0:\n            div_sum += j\n    sum2 = div_sum\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    num_1 = n // 2\n    num_2 = n // 3\n    sum_1 = sum_2 = 0\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i=0 \n    j=n\n    s1=0 \n    s2=0\n    for i in range(1,n+1): \n        if n%i==0:\n            s1=s1+i\n    for j in range(1,n+1):\n        if j<=math.sqrt(n):\n            if n%j==0:\n                s2=s2+j+n//j\n    if s1==s2:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def div(n):\n        div_list=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                div_list.append(i)\n        return(div_list)\n    div1=div(n)\n    div2=div(n+1)\n    if sum(div1)==sum(div2):\n        print(\"The sum of divisors for\",n,\"and\",n+1,\"are equal\")\n    else:\n        print(\"The sum of divisors for\",n,\"and\",n+1,\"are not equal\")\n        \ndef all_primes(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    def prime(n):\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return(\"The number is not prime\")\n                break\n        else:\n            return(\"The number is prime\")\n    prime(n)\n    \ndef digits(n):\n    '''\n    Write a function to determine how many digits a number has.\n    '''\n    def digits(n):\n        count=0\n        while n!=0:\n            n=n//10\n            count+=1\n        return(count)\n    print(digits(n))\n    \ndef prime_list(n):\n    '''\n    Write a function to determine the list of prime numbers between 1 and a given number.\n    '''\n    def prime(n):\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return(\"The number is not prime\")\n                break\n        else:\n            return(\"The number is prime\")\n    \n    def list_primes(n):\n        primelist=[]\n        for i in range(2,n+1):\n            prime(i)\n            if prime(i)==\"The number is prime\":\n                primelist.append(i)\n        print(primelist)\n    list_primes(n)\n    \ndef all_factors(n):\n    '''\n    Write a function to determine the list of factors of a given number.\n    '''\n    def factors(n):\n        factlist=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                factlist.append(i)\n        return(factlist)\n    factors(n)\n    \ndef n_factors(n):\n    '''\n    Write a function to determine how many factors a given number has.\n    '''\n    def factors(n):\n        factlist=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                factlist.append(i)\n        return(factlist)\n    print(len(factors(n)))\n    \ndef factors(n):\n    '''\n    Write a function to determine the list of factors of a given number.\n    '''\n    factlist=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factlist.append(i)\n    return(factlist)\n    \ndef prime_factors(n):\n    '''\n    Write a function to determine the list of prime factors of a given number.\n    '''\n    def factors(n):\n        factlist=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                factlist.append(i)\n        return(factlist)\n    def prime(n):\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return(\"The number is not prime\")\n                break\n        else:\n            return(\"The number is prime\")\n    def prime_factors(n):\n        factlist=[]\n        for i in factors(n):\n            prime(i)\n            if prime(i)==\"The number is prime\":\n                factlist.append(i)\n        return(factlist)\n    print(prime_factors(n))\n    \ndef gcd(n,m):\n    '''\n    Write a function to determine the greatest common divisor of two numbers.\n    '''\n    def gcd(n,m):\n        if m==0:\n            return(n)\n        else:\n            return(gcd(m,n%m))\n    print(gcd(n,m))\n    \ndef factors(n):\n    '''\n    Write a function to determine the list of factors of a given number.\n    '''\n    def factors(n):\n        factlist=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                factlist.append(i)\n        return(factlist)\n    factors(n)\n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    def prime(n):\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return(\"The number is not prime\")\n                break\n        else:\n            return(\"The number is prime\")\n    prime(n)\n    \ndef prime_factors(n):\n    '''\n    Write a function to determine the list of prime factors of a given number.\n    '''\n    def factors(n):\n        factlist=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                factlist.append(i)\n        return(factlist)\n    def prime(n):\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return(\"The number is not prime\")\n                break\n        else:\n            return(\"The number is prime\")\n    def prime_factors(n):\n        factlist=[]\n        for i in factors(n):\n            prime(i)\n            if prime(i)==\"The number is prime\":\n                factlist.append(i)\n        return(factlist)\n    print(prime_factors(n))\n    \ndef all_primes(n):\n    '''\n    Write a function to determine the list of prime numbers between 1 and a given number.\n    '''\n    def prime(n):\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return(\"The number is not prime\")\n                break\n        else:\n            return(\"The number is prime\")\n    \n    def list_primes(n):\n        primelist=[]\n        for i in range(2,n+1):\n            prime(i)\n            if prime(i)==\"The number is prime\":\n                primelist.append(i)\n        print(primelist)\n    list_primes(n)\n    \ndef all_factors(n):\n    '''\n    Write a function to determine the list of factors of a given number.\n    '''\n    def factors(n):\n        factlist=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                factlist.append(i)\n        return(factlist)\n    factors(n)\n    \ndef n_factors(n):\n    '''\n    Write a function to determine how many factors a given number has.\n    '''\n    def factors(n):\n        factlist=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                factlist.append(i)\n        return(factlist)\n    print(len(factors(n)))\n    \ndef prime_factors(n):\n    '''\n    Write a function to determine the list of prime factors of a given number.\n    '''\n    def factors(n):\n        factlist=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                factlist.append(i)\n        return(factlist)\n    def prime(n):\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return(\"The number is not prime\")\n                break\n        else:\n            return(\"The number is prime\")\n    def prime_factors(n):"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = [1]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            div_list.append(n//i)\n    div_list = list(set(div_list))\n    div_list.remove(1)\n    if sum(div_list) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    sum1 = 0\n    sum2 = 0\n    \n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum1 += i\n            \n    for j in range(1, int(math.sqrt(n))+1):\n        if n % j == 0:\n            sum2 += j\n    \n    if sum1 == sum2:\n        return True\n    else:\n        return False\n    \ndef perfect_square(n):\n    '''\n    Write a function to determine if a number is a perfect square.\n    '''\n    \n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False\n    \ndef letter_count(s):\n    '''\n    Write a function to determine the number of times each letter appears in a given string.\n    '''\n    \n    count = dict()\n    \n    for i in s:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    \n    return count\n    \ndef palindrome(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    \n    rev = s[::-1]\n    if s == rev:\n        return True\n    else:\n        return False\n        \ndef get_factors(n):\n    '''\n    Write a function to return all the factors of an integer.\n    '''\n    \n    factors = []\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    \n    return factors\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Function that determines if the sum of the divisors of two numbers are the same.\n    #Input: Integer n\n    #Output: Boolean True or False\n    \n    if (n % 2!= 0): \n        return False \n    else: \n        l = []\n        for i in range(1,n+1): \n            if n % i == 0: \n                l.append(i) \n        if (sum(l) - n) == n: \n            return True \n        else: \n            return False \ndef pairs(arr, k): \n    '''\n    Write a function to return the number of pairs of integers in a given array whose difference is equal to a given value.\n    '''\n    #Function that returns the number of pairs of integers in an array whose difference is equal to a given value\n    #Input: Array arr, Integer k\n    #Output: Integer\n    count = 0 \n    for i in range(0,len(arr)): \n        for j in range(i+1,len(arr)): \n            if arr[i] - arr[j] == k: \n                count += 1 \n    return count \ndef minimum(arr, n): \n    '''\n    Write a function that returns the minimum element in an array.\n    '''\n    #Function that returns the minimum element in an array.\n    #Input: Array arr, Integer n\n    #Output: Integer\n    \n    return min(arr)\ndef three_sum(arr): \n    '''\n    Write a function that returns the number of ways in which three elements of an array can be added up to the sum of the array.\n    '''\n    #Function that returns the number of ways in which three elements of an array can be added up to the sum of the array.\n    #Input: Array arr\n    #Output: Integer\n    \n    count = 0 \n    for i in range(0,len(arr)): \n        for j in range(i+1,len(arr)): \n            for k in range(j+1,len(arr)): \n                if (arr[i] + arr[j] + arr[k]) == sum(arr): \n                    count += 1 \n    return count \ndef three_sum_brute(arr): \n    '''\n    Write a function that returns the number of ways in which three elements of an array can be added up to the sum of the array.\n    '''\n    #Function that returns the number of ways in which three elements of an array can be added up to the sum of the array.\n    #Input: Array arr\n    #Output: Integer\n    \n    count = 0 \n    for i in range(0,len(arr)): \n        for j in range(i+1,len(arr)): \n            for k in range(j+1,len(arr)): \n                if (arr[i] + arr[j] + arr[k]) == sum(arr): \n                    count += 1 \n    return count \ndef two_sum(arr, k): \n    '''\n    Write a function that returns the number of ways in which two elements of an array can be added up to the sum of the array.\n    '''\n    #Function that returns the number of ways in which two elements of an array can be added up to the sum of the array.\n    #Input: Array arr, Integer k\n    #Output: Integer\n    \n    count = 0 \n    for i in range(0,len(arr)): \n        for j in range(i+1,len(arr)): \n            if (arr[i] + arr[j]) == k: \n                count += 1 \n    return count \ndef product(arr): \n    '''\n    Write a function that returns the product of all the elements in an array.\n    '''\n    #Function that returns the product of all the elements in an array.\n    #Input: Array arr\n    #Output: Integer\n    \n    return math.prod(arr) \ndef max_product(arr): \n    '''\n    Write a function that returns the maximum product of two elements in an array.\n    '''\n    #Function that returns the maximum product of two elements in an array.\n    #Input: Array arr\n    #Output: Integer\n    \n    arr.sort() \n    return arr[-1] * arr[-2]\ndef max_product_brute(arr): \n    '''\n    Write a function that returns the maximum product of two elements in an array.\n    '''\n    #Function that returns the maximum product of two elements in an array.\n    #Input: Array arr\n    #Output: Integer\n    \n    arr.sort() \n    return arr[-1] * arr[-2]\ndef find_longest(arr, n): \n    '''\n    Write a function that returns the longest substring that contains all unique letters.\n    '''\n    #Function that returns the longest substring that contains all unique letters.\n    #Input: Array arr, Integer n\n    #Output: String\n    \n    c = [] \n    for i in range(0, len(arr)): \n        c.append(arr[i]) \n    c.sort() \n    for i in range(0, len(arr)): \n        if (c[i] - c[i-1])!= 1: \n            break \n    return arr[0:i] \ndef lexicographical_sorting(arr): \n    '''\n    Write a function that returns the lexicographically sorted array of integers.\n    '''\n    #Function that returns the lexicographically sorted array of integers.\n    #Input: Array arr\n    #Output: Array\n    \n    return sorted(arr) \ndef divisibility_sum(n): \n    '''\n    Write a function that returns the sum of all positive integers that can be divided by each of the numbers from 1 to N.\n    '''\n    #Function that returns the sum of all positive integers that can be divided by each of the numbers from 1 to N.\n    #Input: Integer n\n    #Output: Integer\n    \n    sum = 0 \n    for i in range(1,n+1): \n        if n % i == 0: \n            sum += i \n    return sum \ndef find_max_subarray(arr): \n    '''\n    Write a function that returns the maximum subarray sum in an array.\n    '''\n    #Function that returns the maximum subarray sum in an array.\n    #Input: Array arr\n    #Output: Integer\n    \n    return max(arr) \ndef subarray_divisibility(arr): \n    '''\n    Write a function that returns the sum of all positive integers that can be divided by each of the numbers in the subarray that has the largest sum.\n    '''\n    #Function that returns the sum of all positive integers that can be divided by each of the numbers in the subarray that has the largest sum.\n    #Input: Array arr\n    #Output: Integer\n    \n    return sum(arr) \ndef find_palindrome_subarrays(arr): \n    '''\n    Write a function that returns the number of palindromes in the array.\n    '''\n    #Function that returns the number of palindromes in the array.\n    #Input: Array arr\n    #Output: Integer\n    \n    return len(set(arr))\ndef largest_rect_perimeter(arr): \n    '''\n    Write a function that returns the largest rectangle that fits inside a rectangle formed by the given set of points.\n    '''\n    #Function that returns the largest rectangle that fits inside a rectangle formed by the given set of points.\n    #Input: Array arr\n    #Output: Integer\n    \n    return len(arr) \ndef reverse_arr(arr): \n    '''\n    Write a function that reverses the elements of an array.\n    '''\n    #Function that reverses the elements of an array.\n    #Input: Array arr\n    #Output: Array\n    \n    return arr[::-1]\ndef factorial(n): \n    '''\n    Write a function that returns the factorial of a number.\n    '''\n    #Function that returns the factorial of a number.\n    #Input: Integer n\n    #Output: Integer\n    \n    return math.factorial(n) \ndef fibonacci(n): \n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    #Function that returns the nth Fibonacci numbe"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<1:\n        return False\n    else:\n        sum_of_divisors = 0\n        for i in range(1,n//2+1): \n            if n%i == 0:\n                sum_of_divisors = sum_of_divisors + i\n        return (sum_of_divisors*2 == n)\nprint(div_sum(0))\nprint(div_sum(1))\nprint(div_sum(2))\nprint(div_sum(3))\nprint(div_sum(4))\nprint(div_sum(5))\nprint(div_sum(6))\nprint(div_sum(7))\nprint(div_sum(8))\nprint(div_sum(9))\nprint(div_sum(10))\nprint(div_sum(11))\nprint(div_sum(12))\nprint(div_sum(13))\nprint(div_sum(14))\nprint(div_sum(15))\nprint(div_sum(16))\nprint(div_sum(17))\nprint(div_sum(18))\nprint(div_sum(19))\nprint(div_sum(20))\nprint(div_sum(21))\nprint(div_sum(22))\nprint(div_sum(23))\nprint(div_sum(24))\nprint(div_sum(25))\nprint(div_sum(26))\nprint(div_sum(27))\nprint(div_sum(28))\nprint(div_sum(29))\nprint(div_sum(30))\nprint(div_sum(31))\nprint(div_sum(32))\nprint(div_sum(33))\nprint(div_sum(34))\nprint(div_sum(35))\nprint(div_sum(36))\nprint(div_sum(37))\nprint(div_sum(38))\nprint(div_sum(39))\nprint(div_sum(40))\nprint(div_sum(41))\nprint(div_sum(42))\nprint(div_sum(43))\nprint(div_sum(44))\nprint(div_sum(45))\nprint(div_sum(46))\nprint(div_sum(47))\nprint(div_sum(48))\nprint(div_sum(49))\nprint(div_sum(50))\nprint(div_sum(51))\nprint(div_sum(52))\nprint(div_sum(53))\nprint(div_sum(54))\nprint(div_sum(55))\nprint(div_sum(56))\nprint(div_sum(57))\nprint(div_sum(58))\nprint(div_sum(59))\nprint(div_sum(60))\nprint(div_sum(61))\nprint(div_sum(62))\nprint(div_sum(61))\nprint(div_sum(60))\nprint(div_sum(59))\nprint(div_sum(58))\nprint(div_sum(57))\nprint(div_sum(56))\nprint(div_sum(55))\nprint(div_sum(54))\nprint(div_sum(53))\nprint(div_sum(52))\nprint(div_sum(51))\nprint(div_sum(50))\nprint(div_sum(49))\nprint(div_sum(48))\nprint(div_sum(47))\nprint(div_sum(46))\nprint(div_sum(45))\nprint(div_sum(44))\nprint(div_sum(43))\nprint(div_sum(42))\nprint(div_sum(41))\nprint(div_sum(40))\nprint(div_sum(39))\nprint(div_sum(38))\nprint(div_sum(37))\nprint(div_sum(36))\nprint(div_sum(35))\nprint(div_sum(34))\nprint(div_sum(33))\nprint(div_sum(32))\nprint(div_sum(31))\nprint(div_sum(30))\nprint(div_sum(29))\nprint(div_sum(28))\nprint(div_sum(27))\nprint(div_sum(26))\nprint(div_sum(25))\nprint(div_sum(24))\nprint(div_sum(23))\nprint(div_sum(22))\nprint(div_sum(21))\nprint(div_sum(20))\nprint(div_sum(19))\nprint(div_sum(18))\nprint(div_sum(17))\nprint(div_sum(16))\nprint(div_sum(15))\nprint(div_sum(14))\nprint(div_sum(13))\nprint(div_sum(12))\nprint(div_sum(11))\nprint(div_sum(10))\nprint(div_sum(9))\nprint(div_sum(8))\nprint(div_sum(7))\nprint(div_sum(6))\nprint(div_sum(5))\nprint(div_sum(4))\nprint(div_sum(3))\nprint(div_sum(2))\nprint(div_sum(1))\nprint(div_sum(0))\nprint(div_sum(-1))\nprint(div_sum(-2))\nprint(div_sum(-3))\nprint(div_sum(-4))\nprint(div_sum(-5))\nprint(div_sum(-6))\nprint(div_sum(-7))\nprint(div_sum(-8))\nprint(div_sum(-9))\nprint(div_sum(-10))\nprint(div_sum(-11))\nprint(div_sum(-12))\nprint(div_sum(-13))\nprint(div_sum(-14))\nprint(div_sum(-15))\nprint(div_sum(-16))\nprint(div_sum(-17))\nprint(div_sum(-18))\nprint(div_sum(-19))\nprint(div_sum(-20))\nprint(div_sum(-21))\nprint(div_sum(-22))\nprint(div_sum(-23))\nprint(div_sum(-24))\nprint(div_sum(-25))\nprint(div_sum(-26))\nprint(div_sum(-27))\nprint(div_sum(-28))\nprint(div_sum(-29))\nprint(div_sum(-30))\nprint(div_sum(-31))\nprint(div_sum(-32))\nprint(div_sum(-33))\nprint(div_sum(-34))\nprint(div_sum(-35))\nprint(div_sum(-36))\nprint(div_sum(-37))\nprint(div_sum(-38))\nprint(div_sum(-39))\nprint(div_sum(-40))\nprint(div_sum(-41))\nprint(div_sum(-42))\nprint(div_sum(-43))\nprint(div_sum(-44))\nprint(div_sum(-45))\nprint(div_sum(-46))\nprint(div_sum(-47))\nprint(div_sum(-48))\nprint(div_sum(-49))\nprint(div_sum(-50))\nprint(div_sum(-51))\nprint(div_sum(-52))\nprint(div_sum(-53))\nprint(div_sum(-54))\nprint(div_sum(-55))\nprint(div_sum(-56))\nprint(div_sum(-57))\nprint(div_sum(-58))\nprint(div_sum(-59))\nprint(div_sum(-60))\nprint(div_sum(-61))\nprint(div_sum(-62))\nprint(div_sum(-61))\nprint(div_sum(-60))\nprint(div_sum(-59))\nprint(div_sum(-58))\nprint(div_sum(-57))\nprint(div_sum(-56))\nprint(div_sum(-55))\nprint(div_sum(-54))\nprint(div_sum(-53))\nprint(div_sum(-52))\nprint(div_sum(-51))\nprint(div_sum(-50))\nprint(div_sum(-49))\nprint(div_sum(-48))\nprint(div_sum(-47))\nprint(div_sum(-46))\nprint(div_sum(-45))\nprint(div_sum(-44))\nprint(div_sum(-43))\nprint(div_sum(-42))\nprint(div_sum(-41))\nprint(div_sum(-40))\nprint(div_sum(-39))\nprint(div_sum(-38))\nprint(div_sum(-37))\nprint(div_sum(-36))\nprint"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].upper() == str(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    count = 0\n    for character in str1.lower():\n        if character in string.ascii_lowercase:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1=str1.lower()\n    count=0\n    for i in range(len(str1)):\n        if(str1[i]>='a' and str1[i]<='z'):\n            count=count+1\n    return count\nprint(count_char_position(\"nikhil\"))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([ch for ch in str1.lower() if ch.isalpha() and ch == chr(ord(ch) - ord(\"a\") + ord(\"a\"))])\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count_pos = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count_pos += 1\n            \n    return count_pos\n    \nprint(count_char_position(\"The man, who was born in 1857, did things to try to avoid a catastrophe.\"))"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(alphabet)):\n            if str1[i].lower() == alphabet[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    count = 0\n    for i in range(0,len(str1)):\n        for j in range(0,len(letters)):\n            if str1[i].lower() == letters[j]:\n                count = count + 1\n                break\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([x for x in str1 if str.lower(x) in \"abcdefghijklmnopqrstuvwxyz\"])\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in str1:\n        if(i.lower()>=\"a\" and i.lower()<=\"z\"):\n            count=count+1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26} \n    str1 = str1.lower()\n    dict1 = {}\n    for ch in str1:\n        if ch in char_dict:\n            if ch in dict1:\n                dict1[ch] += 1\n            else:\n                dict1[ch] = 1\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    total_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                total_pairs += 1\n    return total_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A:\n        return 0\n    sum = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i]^A[j])%2 == 0:\n                sum += 1\n    return sum\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i]^A[j])%2 == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # create a counter to count the pairs\n    count = 0\n    # loop through the list\n    for i in range(len(A)-1):\n        # loop through the rest of the list\n        for j in range(i+1, len(A)):\n            # xor the two numbers\n            xor = A[i]^A[j]\n            # check if it's even\n            if xor%2 == 0:\n                # if it is, increment the counter\n                count += 1\n    # return the count\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for a in A:\n        for b in A:\n            if a^b==(a+b)%2:\n                count+=1\n    return count/2\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i]^A[j])%2==0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if A == []:\n        return 0\n    \n    count = 0\n    for i in range(0, len(A)-1):\n        for j in range(i+1, len(A)):\n            if ((A[i] ^ A[j]) % 2) == 0:\n                count += 1\n    return count\n    "
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # base case: n is less than 2\n    if n == 0:\n        return 1\n    # base case: n is greater than 2\n    elif n > 1:\n        # if n is odd, return the next even number\n        if n % 2!= 0:\n            return n + 1\n        # if n is even, divide it by 2\n        else:\n            return n // 2\n    # if n is 1, return 1\n    else:\n        return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n == 0): \n        return 1\n    else: \n        x = 2\n        while(x < n): \n            x = x * 2\n        return x \n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return math.ceil(math.log(n, 2))\n    \n    \ndef list_of_powers(n): \n    '''\n    Write a python function to return a list of all powers of 2 from 1 to n.\n    '''\n    return [2 ** i for i in range(1, n + 1)]\n    \n    \ndef get_odd_sum(n): \n    '''\n    Write a python function to return the sum of all odd numbers from 1 to n.\n    '''\n    return sum([i for i in range(1, n + 1) if i % 2 == 1])\n    \n    \ndef even_sum(n): \n    '''\n    Write a python function to return the sum of all even numbers from 1 to n.\n    '''\n    return sum([i for i in range(1, n + 1) if i % 2 == 0])\n    \n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to return the sum of the digits of the given number.\n    '''\n    return sum([int(x) for x in str(n)])\n    \n    \ndef sum_of_divisors(n): \n    '''\n    Write a python function to return the sum of the divisors of the given number.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result += i\n    return result\n    \n    \ndef prime_factors(n): \n    '''\n    Write a python function to return a list of prime factors of the given number.\n    '''\n    prime_factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            n = n / i\n            prime_factors.append(i)\n    return prime_factors\n    \n    \ndef sum_of_prime_factors(n): \n    '''\n    Write a python function to return the sum of the prime factors of the given number.\n    '''\n    return sum([int(i) for i in str(prime_factors(n))])\n    \n    \ndef list_of_numbers(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n.\n    '''\n    return [i for i in range(1, n + 1)]\n    \n    \ndef list_of_odd_numbers(n): \n    '''\n    Write a python function to return a list of all odd numbers between 1 and n.\n    '''\n    return [i for i in range(1, n + 1) if i % 2 == 1]\n    \n    \ndef list_of_even_numbers(n): \n    '''\n    Write a python function to return a list of all even numbers between 1 and n.\n    '''\n    return [i for i in range(1, n + 1) if i % 2 == 0]\n    \n    \ndef list_of_numbers_divisible_by_3(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 3.\n    '''\n    return [i for i in range(1, n + 1) if i % 3 == 0]\n    \n    \ndef list_of_numbers_divisible_by_5(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 5.\n    '''\n    return [i for i in range(1, n + 1) if i % 5 == 0]\n    \n    \ndef list_of_numbers_divisible_by_6(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 6.\n    '''\n    return [i for i in range(1, n + 1) if i % 6 == 0]\n    \n    \ndef list_of_numbers_divisible_by_7(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 7.\n    '''\n    return [i for i in range(1, n + 1) if i % 7 == 0]\n    \n    \ndef list_of_numbers_divisible_by_10(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 10.\n    '''\n    return [i for i in range(1, n + 1) if i % 10 == 0]\n    \n    \ndef list_of_numbers_divisible_by_14(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 14.\n    '''\n    return [i for i in range(1, n + 1) if i % 14 == 0]\n    \n    \ndef list_of_numbers_divisible_by_15(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 15.\n    '''\n    return [i for i in range(1, n + 1) if i % 15 == 0]\n    \n    \ndef list_of_numbers_divisible_by_17(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 17.\n    '''\n    return [i for i in range(1, n + 1) if i % 17 == 0]\n    \n    \ndef list_of_numbers_divisible_by_19(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 19.\n    '''\n    return [i for i in range(1, n + 1) if i % 19 == 0]\n    \n    \ndef list_of_numbers_divisible_by_23(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 23.\n    '''\n    return [i for i in range(1, n + 1) if i % 23 == 0]\n    \n    \ndef list_of_numbers_divisible_by_27(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 27.\n    '''\n    return [i for i in range(1, n + 1) if i % 27 == 0]\n    \n    \ndef list_of_numbers_divisible_by_32(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 32.\n    '''\n    return [i for i in range(1, n + 1) if i % 32 == 0]\n    \n    \ndef list_of_numbers_divisible_by_36(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 36.\n    '''\n    return [i for i in range(1, n + 1) if i % 36 == 0]\n    \n    \ndef list_of_numbers_divisible_by_49(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 49.\n    '''\n    return [i for i in range(1, n + 1) if i % 49 == 0]\n    \n    \ndef list_of_numbers_divisible_by_52(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 52.\n    '''\n    return [i for i in range(1, n + 1) if i % 52 == 0]\n    \n    \ndef list_of_numbers_divisible_by_63(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 63.\n    '''\n    return [i for i in range(1, n + 1) if i % 63 == 0]\n    \n    \ndef list_of_numbers_divisible_by_73(n): \n    '''\n    Write a python function to return a list of all numbers between 1 and n that are divisible by 73.\n    '''\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Base case \n    if (n and not(n & (n - 1))): \n        return n \n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    import math\n    return int(math.pow(2, math.ceil(math.log(n, 2))))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 0\n    while(n & n-1):\n        n &= (n-1)\n        count += 1\n    return 2**count\n    \ndef next_power_of_2_alt(n):\n    count = 0\n    while(n & n-1):\n        n &= (n-1)\n        count += 1\n    return 2**count\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n<0:\n        return None\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    power=1\n    while power<n:\n        power=power<<1\n    return power\ndef next_power_of_2_optimized(n):\n    if n<0:\n        return None\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    power=0\n    while n>=pow(2,power):\n        power+=1\n    return pow(2,power)\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2 if n == 1 else 2 ** (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n<2 else next_power_of_2(n//2) << 1\n    \ndef next_power_of_2_array(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n and return it as an array.\n    '''\n    lst = [0]\n    while lst[-1] < n:\n        lst.append(next_power_of_2(lst[-1]))\n    return lst\n    \ndef next_power_of_2_constant(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n and return it.\n    '''\n    return next_power_of_2(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if (i == x):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a == []:\n        return 0\n    if x in a:\n        return a.count(x)\n    else:\n        return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    ctr = 0\n    for ele in a:\n        if ele == x:\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a==[] or x not in a:\n        return 0\n    else:\n        return (a.count(x))\n    \ndef length(a): \n    '''\n    Write a function to find the length of the longest word in a given list of words. \n    '''\n    if a==[]:\n        return 0\n    else:\n        return(len(max(a,key=len)))\n    \ndef reverse(a): \n    '''\n    Write a function to reverse the order of elements in a given list.\n    '''\n    if a==[]:\n        return []\n    else:\n        return a[::-1]\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1) or n > len(list1):\n        print('Error: index out of range')\n    else:\n        if m > n:\n            print('Error: wrong index order')\n        else:\n            return sum(list1[m-1:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    try:\n        m = int(m)\n        n = int(n)\n        if m < 0:\n            return None\n        if n < 0:\n            return None\n        if m >= len(list1):\n            return None\n        if n >= len(list1):\n            return None\n        s = 0\n        for i in list1[m:n+1]:\n            s += i\n        return s\n    except:\n        return None\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list_sum
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    res = 0\n    for x in list1[m:n+1]:\n        res = res + x\n    return res\n    \ndef delete_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to delete a range of numbers in a list.\n    '''\n    for x in range(m, n):\n        list1.pop(m)\n    return list1\n    \ndef copy_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to copy a range of numbers in a list to another list.\n    '''\n    res = []\n    for x in range(m, n):\n        res.append(list1[x])\n    return res\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    output = 0                                                                                                                                                                                                            \n    for i in list1[m:n]:                                                                                                                                                                                        \n        output += i\n    return output                                                                                                                                                                                        \n                                                                                                                                                                                        \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nm = int(input(\"Enter the starting index of list to be summed: \"))\nn = int(input(\"Enter the ending index of list to be summed: \"))\nprint(sum_range_list(list1, m, n))"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in list1:\n        if m <= list1.index(x) and list1.index(x) <= n:\n            sum += x\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        t = m\n        m = n\n        n = t\n    if n - m > len(list1) - 1:\n        n = len(list1)\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        "
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n > len(list1) or n < 0 or m < 0 or m > len(list1):                                                                                                                                                                                                                        \n        return \"Invalid Input\"\n    elif m == n:                                                                                                                                                                                                                                                            \n        return list1[m]\n    elif m > n:\n        return sum_range_list(list1, m - 1, n) + sum_range_list(list1, m, n - 1)\n    else:\n        return sum_range_list(list1, m - 1, n - 1) + list1[m]\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a>=0:\n        return 5*a\n    return 'The length of sides must be positive number.'\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        print(\"Invalid side length\")\n    elif a == 0:\n        print(\"Invalid side length\")\n    else:\n        return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = ((5*a)**2)/(4*math.tan(math.pi/5))\n    print('The perimeter of a regular pentagon with side length', a,'is:')\n    print(perimeter)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5*a)\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    num_occurences = 0\n    for i in range(len(s) - 1):\n        if s[i:i+3] =='std':\n            num_occurences += 1\n    return num_occurences\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    print(s.count('std'))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == len(test_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #test_tuple = (1,2,3,4,5,6)\n    first_type = type(test_tuple[0])\n    for num in test_tuple:\n        if first_type!= type(num):\n            print(\"False\")\n            return False\n    else:\n        print(\"True\")\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for t in test_tuple:\n        if type(t)==type(test_tuple[0]):\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return None\n    elif len(test_tuple) == 1:\n        return type(test_tuple[0])\n    else:\n        return type(test_tuple[0]) == type(test_tuple[1])\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) in result:\n            continue\n        result.append(type(i))\n    if len(result) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = tuple(test_tuple)\n    \n    if len(test_tuple) > 0:\n        first_element = test_tuple[0]\n        for i in test_tuple:\n            if type(i)!= type(first_element):\n                print(\"Not all elements have same data type\")\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    new_list = []\n    for tup in test_tuple:\n        new_list.append(type(tup))\n    print(new_list)\n    return(all(x==new_list[0] for x in new_list))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return (type(test_tuple[0]) == type(test_tuple[1]) == type(test_tuple[2]) == type(test_tuple[3]) == type(test_tuple[4]) == type(test_tuple[5]))\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if (n / 2) < 1:\n        return False\n    \n    if x not in arr:\n        return False\n        \n    cnt = 0\n    for i in arr:\n        if i == x:\n            cnt += 1\n    return True if cnt > (n / 2) else False\n        \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef find_duplicate(arr):\n    '''\n    Write a function that takes in a sorted array and returns the duplicate element. The duplicated element is the element that has a duplicate index in the array. In other words, if there is a duplicate element in the given array, return the first duplicate element in the array.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n    \n    for i in range(len(arr)):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n            \n    return False\n    \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef remove_duplicate(arr):\n    '''\n    Write a function that takes in an unsorted array, and returns a new array with no duplicates.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n        \n    lst = []\n    \n    for i in arr:\n        if i not in lst:\n            lst.append(i)\n    \n    return lst\n    \n    #time complexity: O(n)\n    #space complexity: O(n)\n    \n    \n    \ndef is_palindrome(string):\n    '''\n    Write a function that takes in a string and returns whether or not that string is a palindrome. A palindrome is a string that is the same forwards and backwards.\n    '''\n    \n    if string is None:\n        return False\n    \n    if len(string) < 2:\n        return True\n    \n    #if we only have one character, the string is a palindrome\n    if len(string) == 1:\n        return True\n        \n    start = 0\n    end = len(string) - 1\n    \n    while start <= end:\n        if string[start]!= string[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n        \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef remove_min(arr):\n    '''\n    Write a function that takes in an unsorted array and returns a new array with the minimum value removed.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n        \n    lst = []\n    \n    for i in arr:\n        if i < arr[0]:\n            lst.append(i)\n        else:\n            lst.append(arr[0])\n            \n    return lst\n    \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef max_product(arr):\n    '''\n    Write a function that takes in an unsorted array and returns the maximum product that can be obtained by multiplying 2 array elements.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n        \n    left = 1\n    right = 1\n    \n    for i in arr:\n        left *= i\n        right *= i\n        \n    return max(left, right)\n        \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef find_missing_nums(arr):\n    '''\n    Write a function that takes in an array of positive integers and returns a new array with all the missing positive integers.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n    \n    lst = []\n    \n    for i in range(len(arr) + 1):\n        if i not in arr:\n            lst.append(i)\n    return lst\n        \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef find_missing_nums_2(arr):\n    '''\n    Write a function that takes in an array of positive integers and returns a new array with all the missing positive integers.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n        \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        if arr[start] == arr[end]:\n            start += 1\n            end -= 1\n        elif arr[start] > arr[end]:\n            start += 1\n        else:\n            arr[start], arr[end] = arr[end], arr[start]\n    \n    lst = []\n    \n    for i in range(start, len(arr)):\n        if i + 1 not in arr:\n            lst.append(i + 1)\n    return lst\n        \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef make_fair(arr):\n    '''\n    Write a function that takes in an array of numbers and returns whether or not the array is fair. A fair array is an array where the even index is the sum of the odd index, and the odd index is the sum of the even index.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n    \n    if arr[0] % 2 == 0 and arr[len(arr) - 1] % 2 == 0:\n        return False\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2!= 0:\n                return False\n        else:\n            if arr[i] % 2 == 0:\n                return False\n    \n    return True\n        \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef reverse_array(arr):\n    '''\n    Write a function that takes in an array of numbers and returns a new array of the same length with all the numbers reversed.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n        \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n        \n    return arr\n        \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef reverse_array_2(arr):\n    '''\n    Write a function that takes in an array of numbers and returns a new array of the same length with all the numbers reversed.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n    \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        if start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n        \n    return arr\n        \n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    \n    \ndef has_alternating_signs(arr):\n    '''\n    Write a function that takes in an array of numbers and returns true if the sequence of numbers contains an alternating sequence of positive and negative numbers.\n    '''\n    \n    if arr is None:\n        return False\n    \n    if len(arr) < 2:\n        return False\n    \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        if start < end:\n            if arr[start] * arr"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if n%2 == 0:\n    #     if arr[n//2] == x:\n    #         return True\n    #     else:\n    #         return False\n    # else:\n    #     if arr[n//2+1] == x:\n    #         return True\n    #     else:\n    #         return False\n    return (arr[n//2] == x) if n%2 == 0 else (arr[n//2+1] == x)\n    \ndef max_sum_subarray(arr, n):\n    '''\n    Given an array of positive integers, find the subarray with the largest sum. Return the sum of that subarray.\n    '''\n    best = arr[0]\n    cur = arr[0]\n    for i in range(1, n):\n        cur = max(arr[i], cur + arr[i])\n        best = max(best, cur)\n    return best\n    \ndef subarray_sum(arr, n, k):\n    '''\n    Given an array, an integer k and an integer n. Find the sum of the largest subarray with sum k.\n    '''\n    best = 0\n    cur = 0\n    for i in range(n):\n        cur += arr[i]\n        cur = cur % k\n        if cur == 0:\n            best = i+1\n    return best\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if x == arr[n//2]:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    elif n == 2:\n        return arr[0] == arr[1] and arr[0] == x\n    else:\n        return (arr[n//2] == x) and is_majority(arr[:n//2], n//2, x) and is_majority(arr[n//2:], n - n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in range(n):\n        if arr[i] == x:\n            counter += 1\n        else:\n            counter -= 1\n        if counter == 0:\n            break\n    return counter > 0\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge cases\n    if n == 0 or arr == None:\n        return False\n    # setup variables to track\n    count_x = 0\n    i = 0\n    j = n - 1\n    # if first element is x, then its a majority element\n    if arr[0] == x:\n        return True\n    # otherwise, keep going through and find the majority element\n    else:\n        # keep going through while incrementing count_x\n        while count_x < n/2 and i < j:\n            if arr[i] == x:\n                count_x += 1\n                i += 1\n            elif arr[j] == x:\n                count_x += 1\n                j -= 1\n            # if not the majority element, check if the next element is a majority element\n            elif arr[j]!= x and arr[i]!= x:\n                # if not a majority element, remove the element at j\n                j -= 1\n            # if not the majority element, remove the element at i\n            else:\n                i += 1\n        # if count_x is not equal to n/2, then it is not a majority element\n        if count_x!= n/2:\n            return False\n        # if count_x is equal to n/2, then it is a majority element\n        else:\n            return True\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x not in arr:\n        return False\n    if arr.count(x) > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case:\n    if n == 1:\n        return True if arr[0] == x else False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    start = 0\n    end = len(arr) - 1\n    count = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if x == arr[mid]:\n            if mid > 0:\n                if x == arr[mid-1]:\n                    count += 1\n                    if count > (len(arr) // 2):\n                        return True\n                    else:\n                        start = mid + 1\n                        count = 0\n                else:\n                    count += 1\n                    if count > (len(arr) // 2):\n                        return True\n                    else:\n                        start = mid + 1\n                        count = 0\n            else:\n                count += 1\n                if count > (len(arr) // 2):\n                    return True\n                else:\n                    start = mid + 1\n                    count = 0\n        elif x < arr[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # print(f\"arr={arr}, n={n}, x={x}\")\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return sum([int(i) for i in bin(n)[2:]])\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if (n < 0): \n        return -1\n    if (n == 0): \n        return 0\n    while (n): \n        n &= (n-1)\n        setBits += 1\n    return setBits\nn = 12\nprint(count_Set_Bits(n))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count \nprint(count_Set_Bits(11))"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            string += str[i]\n    return string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''\n    for i in range(0,len(str)):\n        if i%2 == 0:\n            res += str[i]\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([s for i, s in enumerate(str) if i % 2 == 0])\n    \ndef check_pallindrome(number):\n    '''\n    Write a function that checks whether the given number is a palindrome or not.\n    '''\n    return str(number) == str(number)[::-1]\n    \ndef factorial(number):\n    '''\n    Write a function that computes the factorial of a number.\n    '''\n    factorial = 1\n    while number > 0:\n        factorial *= number\n        number -= 1\n    return factorial\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(0, len(str)):\n        if i % 2!= 0:\n            str = str.replace(str[i], \"\")\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string=[]\n    for i in range(0,len(str)):\n        if i%2==0:\n            string.append(str[i])\n    return \"\".join(string)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([char for i,char in enumerate(str) if i%2==0])\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([char for i,char in enumerate(str) if i%2==0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([str[i] for i in range(len(str)) if i%2==0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i%2 == 0:\n            result = result+str[i]\n    return result\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    #return(min(a,b,c))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a\n    if (b < min):\n        min = b\n    if (c < min):\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        min_num = a \n    elif b < c: \n        min_num = b \n    else: \n        min_num = c \n    return min_num \n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a\n    if b < minimum:\n        minimum = b\n    if c < minimum:\n        minimum = c\n    return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c: \n        return a\n    elif b<=a and b<=c: \n        return b\n    else: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a>=b and a>=c):\n        print(\"The minimum number is: \", a)\n    elif(b>=a and b>=c):\n        print(\"The minimum number is: \", b)\n    elif(c>=a and c>=b):\n        print(\"The minimum number is: \", c)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = ~(0 << (r-l+1)) \n    #~ is for bitwise not operator\n    return n & mask == 0 \n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x=n\n    while n>0:\n        x=(x^(x-1))\n        n=n-1\n    if x>r:\n        return False\n    elif x>=l and x<=r:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bits = bin(n)\n    count = 0\n    for i in range(len(bits)):\n        if bits[i]=='1':\n            count+=1\n    if count>=l and count<=r:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = (n ^ (n >> 1)) + (n ^ (n >> 2)) + (n ^ (n >> 4)) + (n ^ (n >> 8)) + (n ^ (n >> 16))\n    return n < r - l + 1\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # function body goes here\n    # print(\"Hello World\")\n    x=n\n    for i in range(0,l):\n        x=x & ~(1<<i)\n    for i in range(l,r):\n        x=x & ~(1<<i)\n    for i in range(r,32):\n        x=x & ~(1<<i)\n    if(x==0):\n        return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = n\n    for i in range(l,r+1):\n        if n & (1 << i)!= 0:\n            x = x ^ (1 << i)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(\"The given range is =\",n,\"from\",l,\"to\",r)\n    for i in range(l,r+1):\n        print(\"Bit number\",i,\"is =\",bin(i))\n    for j in range(l,r+1):\n        for k in range(n-1,-1,-1):\n            print(\"The binary number of\",k,\"is\",bin(k))\n            if (j&(1<<k)):\n                print(\"Bit number\",j,\"is set\")\n            else:\n                print(\"Bit number\",j,\"is unset\")\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(bin(n))\n    print(bin(l))\n    print(bin(r))\n    for i in range(l,r+1):\n        print(bin(i))\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s = 0\n    for i in range(l,r+1):\n        s = s | i\n    return(n&s == 0)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = bin(n)[2:]\n    r = bin(r)[2:]\n    l = bin(l)[2:]\n    print('n:',n)\n    print('r:',r)\n    print('l:',l)\n    if n==r:\n        return True\n    if len(n)>len(r):\n        l='0'*(len(n)-len(r))+l\n    if len(n)<len(r):\n        n='0'*(len(r)-len(n))+n\n    for i in range(len(n)):\n        if n[i]!=r[i]:\n            return False\n    return True\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # split the array into two halves, positive and negative\n    # merge the arrays into one, sorted by their absolute values\n    # O(n) time | O(1) space\n    # for i in range(len(arr)):\n    #     if arr[i] < 0:\n    #         arr.insert(0,arr.pop(i))\n    #         break\n    # for i in range(len(arr)):\n    #     if arr[i] < 0:\n    #         arr.insert(0,arr.pop(i))\n    #         break\n    # for i in range(len(arr)):\n    #     if arr[i] < 0:\n    #         arr.insert(0,arr.pop(i))\n    #         break\n    # for i in range(len(arr)):\n    #     if arr[i] < 0:\n    #         arr.insert(0,arr.pop(i))\n    #         break\n    # return arr\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        while arr[left] < 0 and left < len(arr):\n            left += 1\n        while arr[right] >= 0 and right >= 0:\n            right -= 1\n        if left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n        else:\n            break\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low, mid, high = 0, 0, n-1\n    while mid <= high:\n        if arr[mid] < 0:\n            arr[mid], arr[low] = arr[low], arr[mid]\n            low += 1\n            mid += 1\n        elif arr[mid] > 0:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high -= 1\n        else:\n            mid += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left = 0\n    right = n - 1\n    while left < right:\n        while arr[left] < 0 and left < n:\n            left += 1\n        while arr[right] >= 0 and right >= 0:\n            right -= 1\n        if left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n        else:\n            break\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    #create the list of positive and negative numbers\n    pos = []\n    neg = []\n    \n    #loop through arr and add the numbers to the correct list\n    for i in arr:\n        if i > 0:\n            pos.append(i)\n        elif i < 0:\n            neg.append(i)\n    #append the negative numbers to the end of the list\n    neg.extend(pos)\n    \n    #return the negative list\n    return neg\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = n - 1\n    i = n - 1\n    while i >= 0:\n        if arr[i] < 0:\n            arr[low], arr[i] = arr[i], arr[low]\n            low += 1\n            i -= 1\n        else:\n            i -= 1\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low, high = 0, n - 1\n    while low < high:\n        if arr[low] < 0 and arr[high] > 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] < 0:\n            low += 1\n        elif arr[high] > 0:\n            high -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] < 0:\n            i += 1\n        if arr[j] >= 0:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_list = []\n    positive_list = []\n    for i in arr:\n        if i < 0:\n            negative_list.append(i)\n        else:\n            positive_list.append(i)\n    return negative_list + positive_list\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    l=len(arr)\n    for i in range(l):\n        if arr[i]<0:\n            arr.append(arr.pop(i))\n    return arr[:n]\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",\"\"+char)\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    newstr = \"\"\n    for i in range(len(str1)):\n        if str1[i]==\" \":\n            newstr = newstr + char\n        else:\n            newstr = newstr + str1[i]\n    return newstr\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ','')\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s')%char\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1 + char\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\")%(char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\")\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i =='':\n            str2 += char\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=[]\n    for i in range(n):\n        new_list.append(max(list1))\n        list1.remove(max(list1))\n    return new_list\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[0:n]\n    heapq.heapify(heap)\n    for item in list1[n:]:\n        if item > heap[0]:\n            heapq.heapreplace(heap,item)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #heapq.heapify(list1)\n    #return heapq.nlargest(n, list1)\n    list1=list1[:]\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=[]\n    for i in range(n):\n        max=0\n        for j in range(len(list1)):\n            if list1[j]>max:\n                max=list1[j]\n        new_list.append(max)\n        list1.remove(max)\n    return new_list\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # list1 = [1, 6, 2, 5, 9, 3, 0, 4, 7, 8, 10]\n    # n = 2\n    result = []\n    # 1. Calculate the size of the list (how many items are in the list)\n    size = len(list1)\n    # 2. Build a max-heap and insert all of the list items into the heap.\n    # 3. Repeat steps 1-2 while the size of the list is greater than n.\n    # 4. Once the size of the heap is greater than or equal to n, remove n items from the heap.\n    # 5. Repeat steps 1-4 until the size of the heap is equal to 0.\n    # 6. Return the result.\n    heapq.heapify(list1)\n    while size>n:\n        result.append(heapq.heappop(list1))\n        size-=1\n    return result\n    # return list1[0:2]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in list1:\n        heapq.heappush(max_heap, -i)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [-i for i in max_heap]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sorted_list=[]\n    for i in range(n):\n        max_num=0\n        for j in range(len(list1)):\n            if list1[j]>max_num:\n                max_num=list1[j]\n        sorted_list.append(max_num)\n        list1.remove(max_num)\n    print(sorted_list)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    surface_area = 2 * pi * r * (r + h)\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h\n    \ndef lateral_volume(r,h):\n    '''\n    Write a function to find the lateral surface volume of a cylinder.\n    '''\n    return 3.14*r*r*h\n    \ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14*r*r\n    \ndef lateral_volume_cylinder(r):\n    '''\n    Write a function to find the lateral volume of a cylinder.\n    '''\n    return 3.14*r*r\n    \ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    S = 2*np.pi*r*h + 2*np.pi*r**2\n    return S\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\n    \ndef lateralsurfacearea_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.1415926535\n    lateral=2*pi*r*h\n    return lateral\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    return 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = (2*math.pi*r**2)+(2*math.pi*r*h)\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(h+r)\n    \nprint(lateralsuface_cylinder(2,3))\nprint(lateralsuface_cylinder(5,4))\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    lateral_surface_area=2*math.pi*r*(r+h)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area=2*pi*r*h+2*pi*r*r\n    print(lateral_surface_area)\nlateralsuface_cylinder(5,10)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if type(l)!= int:\n        raise Exception(\"Input must be an integer\")\n    elif l < 0:\n        raise Exception(\"Input must be a positive number\")\n    else:\n        return (l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l**3)\n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid given its height, width and depth.\n    '''\n    print(l*w*h)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    print(1/3*3.14*r**2*h)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    print(3.14*r**2*h)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    print(4/3*3.14*r**3)\n    \ndef volume_pyramid(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid given its base, height and sides.\n    '''\n    print((1/3)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h)\n    \ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given its base, height, top length and number of sides.\n    '''\n    print((1/2)*l*w*h"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return int(l*l*l)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n    \nprint(volume_cube(2))\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return float(l*l*l)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(32):\n        if n & (1 << i) and i % 2 == 0:\n            n = n ^ (1 << i)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # all bits of n\n    x = bin(n)[2:]\n    # mask all even bits\n    x = x[::2]\n    # convert binary back to integer\n    x = int(x, 2)\n    return x\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if(n < 0):\n        n = n & 0xffffffff\n    return n ^ 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 2 ** n - 1 \n    mask = mask << 1\n    mask = mask >> 1\n    return mask\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0, 16): \n        if (n & (2 ** i)): \n            print(1, end='') \n        else: \n            print(0, end='') \n        \n    print() \n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int('{0:032b}'.format(n)) \n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_bin = bin(n)[2:]\n    return int(n_bin[::2], 2) \n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0: n = -n\n    return n & 0xAAAAAAAA\n    \n    "
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n    return 0\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = dict(Counter(test_list))\n    return occurences_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #return a dict where the key is the tuple and the value is how many times it occurs\n    occurrences = {}\n    for tup in test_list:\n        if tup not in occurrences:\n            occurrences[tup] = 0\n        occurrences[tup] += 1\n    return occurrences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    dict = {}\n    for tup in test_list:\n        if tup in dict:\n            dict[tup] = dict[tup] + 1\n        else:\n            dict[tup] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    if len(test_list) == 0:\n        return {}\n    dict_occurences = {}\n    for element in test_list:\n        if not element in dict_occurences:\n            dict_occurences[element] = 0\n        dict_occurences[element] += 1\n    return dict_occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for item in test_list:\n        if item not in result.keys():\n            result[item] = 1\n        else:\n            result[item] += 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # for loop to loop through each item in test_list\n    # dictionary to store the list of tuples to a dictionary where each unique tuple is mapped to it's frequency\n    # return the dictionary\n    occurences = dict()\n    for item in test_list:\n        if item not in occurences:\n            occurences[item] = 1\n        else:\n            occurences[item] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    list_dict = {}\n    for item in test_list:\n        if item in list_dict:\n            list_dict[item] += 1\n        else:\n            list_dict[item] = 1\n    return list_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #print(test_list)\n    test_list_occurences = dict(Counter(test_list))\n    return test_list_occurences\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str) \n    for i in range(n): \n        for j in range(i,n): \n            subs = str[i:j+1] \n            if(len(subs)>0): \n                count+=1\n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    non_empty_substrings = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)+1): \n            if str[i:j]!= '': \n                non_empty_substrings += 1\n    print(non_empty_substrings)\n    return non_empty_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i:j+1]!= \"\": \n                count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str = \"abcabcabc\"\n    non_empty_substring = 0\n    str_len = len(str)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            print(str[i:j+1])\n            count+=1\n    print(count)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            sub = str[i:j+1]\n            if sub:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(re.findall(r'\\w+', str))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str)\n    i = 0\n    j = 0\n    count = 0\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substr = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            substr += 1\n    return substr\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str) \n    cnt = 0\n    for i in range(n): \n        for j in range(i,n): \n            if (str[i:j+1]!= ''): \n                cnt += 1\n    return cnt \n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==1:\n        return m\n    elif n==2:\n        return 2*m\n    else:\n        return m*get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m**n\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # I have used the pattern given in the question to solve this problem.\n    # Find the number of ways to choose the first element as an integer such that it is less than m and is greater than or equal to 2 times the value of the previous element\n    # Find the number of ways to choose the second element as an integer such that it is less than m and is greater than 2 times the value of the first element and is less than 2 times the value of the second element\n    # Similarly, iterate for the remaining elements in the sequence\n    # Finally, divide the answer by m to get the total number of sequences of length n\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int((m*(m+1)/2)**(n/2))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence = []\n    for i in range(1, m + 1):\n        for j in range(1, 2*i + 1):\n            if j <= m and j >= 2:\n                sequence.append(j)\n    return len(sequence)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # dictionary of each element's two previous element\n    dp = {}\n    # base case\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    elif n == 2:\n        return int(m * (m + 1) / 2)\n    else:\n        return m * get_total_number_of_sequences(m - 1, n - 1) + get_total_number_of_sequences(m, n - 2)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Example:\n    # m = 10, n = 4\n    # Valid sequences:\n    # 1, 3, 2, 2, 6, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 8, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 8, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 9, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 9, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 9, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    \n    # To calculate the number of sequences we need to find the number of elements in the set (1, 3, 2, 2,..., m-1, m)\n    # The number of elements in the set of length n is equal to the binomial coefficient (m choose n)\n    # The binomial coefficient is a function of m and n and is defined as (m!/n!)*(m-n)!\n    \n    return factorial(m)/(factorial(n)*factorial(m-n))\n    \n    \ndef get_total_number_of_sequences_v2(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Example:\n    # m = 10, n = 4\n    # Valid sequences:\n    # 1, 3, 2, 2, 6, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 8, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 8, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 9, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 9, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 9, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    \n    # To calculate the number of sequences we need to find the number of elements in the set (1, 3, 2, 2,..., m-1, m)\n    # The number of elements in the set of length n is equal to the binomial coefficient (m choose n)\n    # The binomial coefficient is a function of m and n and is defined as (m!/n!)*(m-n)!\n    \n    # factorial(m-1)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-1*2\n    \n    # factorial(m-2)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-2*2\n    \n    # factorial(m-3)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-3*2\n    \n    # factorial(m-4)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-4*2\n    \n    # factorial(m-5)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-5*2\n    \n    #...\n    # 2*m-n*2\n    \n    return factorial(m-n+1)/(factorial(m-n)*factorial(n))\n    \ndef get_total_number_of_sequences_v3(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Example:\n    # m = 10, n = 4\n    # Valid sequences:\n    # 1, 3, 2, 2, 6, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 8, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 8, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 9, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 9, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 9, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 10, 4, 7, 8, 9, 10\n    \n    # To calculate the number of sequences we need to find the number of elements in the set (1, 3, 2, 2,..., m-1, m)\n    # The number of elements in the set of length n is equal to the binomial coefficient (m choose n)\n    # The binomial coefficient is a function of m and n and is defined as (m!/n!)*(m-n)!\n    \n    # factorial(m-1)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-1*2\n    \n    # factorial(m-2)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-2*2\n    \n    # factorial(m-3)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-3*2\n    \n    # factorial(m-4)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-4*2\n    \n    # factorial(m-5)\n    # 1*3*2*2\n    # 2*3*2*2\n    #...\n    # 2*m-5*2\n    \n    #...\n    # 2*m-n*2\n    \n    return factorial(m-n+1)/(factorial(m-n)*factorial(n))\n    \ndef get_total_number_of_sequences_v4(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Example:\n    # m = 10, n = 4\n    # Valid sequences:\n    # 1, 3, 2, 2, 6, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 8, 4, 7, 8, 9, 10\n    # 1, 3, 2, 2, 8, 4, 7, 8, 9, 1"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    combinations = [1,2]\n    n -= 1\n    while n > 0:\n        new_combinations = [1,1]\n        for i in range(2,len(combinations)):\n            new_combinations.append(combinations[i]+combinations[i-1])\n        combinations = new_combinations\n        n -= 1\n    print(combinations)\n    return combinations[m-1]\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # If there are no elements, then the only possible sequence is an empty sequence\n    if n == 0:\n        return 1\n    # If there is only one element, then the only possible sequence is an sequence of that element\n    if n == 1:\n        return m\n    # If we have more than 1 element, then we need to find the number of sequences by adding the total sequences from all elements that are greater than or equal to 2 times the previous element\n    else:\n        return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m, n - 2)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:]=list2\n    return list1\ndef open_file(filename):\n    '''\n    Write a function that takes in a filename as a string and opens the file in the current directory and returns the contents as a string.\n    '''\n    with open(filename,'r') as file:\n        return file.read()\ndef read_file(filename):\n    '''\n    Write a function that takes in a filename as a string and opens the file in the current directory and returns a list of the lines of that file.\n    '''\n    with open(filename,'r') as file:\n        return file.readlines()\ndef save_file(filename,content):\n    '''\n    Write a function that takes in a filename as a string and a content as a string and creates a file in the current directory with that content.\n    '''\n    with open(filename,'w') as file:\n        file.write(content)\ndef add_to_file(filename,content):\n    '''\n    Write a function that takes in a filename as a string and a content as a string and appends that content to the end of the file.\n    '''\n    with open(filename,'a') as file:\n        file.write(content)\ndef sort_list(list):\n    '''\n    Write a function that takes in a list as an argument and returns that list in sorted order.\n    '''\n    return sorted(list)\ndef create_list(n):\n    '''\n    Write a function that takes in a number as an argument and returns a list of numbers from 1 to that number.\n    '''\n    new_list=[]\n    for i in range(n):\n        new_list.append(i)\n    return new_list\ndef delete_item(list,item):\n    '''\n    Write a function that takes in a list as an argument and deletes the first instance of that item.\n    '''\n    list.remove(item)\n    return list\ndef delete_index(list,item):\n    '''\n    Write a function that takes in a list as an argument and removes an item at a specified index.\n    '''\n    list.pop(item)\n    return list\ndef delete_range(list,index1,index2):\n    '''\n    Write a function that takes in a list as an argument and removes all items in the specified range.\n    '''\n    list[index1:index2] = []\n    return list\ndef duplicate_list(list):\n    '''\n    Write a function that takes in a list as an argument and duplicates that list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n    return new_list\ndef multiply_by_two(list):\n    '''\n    Write a function that takes in a list as an argument and multiplies each element by two.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i]*2)\n    return new_list\ndef increment(list):\n    '''\n    Write a function that takes in a list as an argument and adds one to each element in the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i]+1)\n    return new_list\ndef element_greater_than(list,item):\n    '''\n    Write a function that takes in a list as an argument and returns True if there is an element greater than the specified number. Otherwise, it should return False.\n    '''\n    for i in range(len(list)):\n        if list[i]>item:\n            return True\n    return False\ndef length_list(list):\n    '''\n    Write a function that takes in a list as an argument and returns the length of that list.\n    '''\n    return len(list)\ndef join_list(list):\n    '''\n    Write a function that takes in a list as an argument and returns a string that is a concatenation of all the elements of that list separated by a comma and space.\n    '''\n    new_string=''\n    for i in range(len(list)):\n        new_string=new_string+list[i]+', '\n    return new_string[:-2]\ndef append_list(list1,list2):\n    '''\n    Write a function that takes in two lists as arguments and returns a new list consisting of the items in the first list followed by the items in the second list.\n    '''\n    new_list=list1.copy()\n    new_list.extend(list2)\n    return new_list\ndef list_intersection(list1,list2):\n    '''\n    Write a function that takes in two lists as arguments and returns a new list that contains only the elements that are common between the lists.\n    '''\n    list_intersection=[]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                list_intersection.append(list1[i])\n    return list_intersection\ndef list_difference(list1,list2):\n    '''\n    Write a function that takes in two lists as arguments and returns a new list that contains all the elements that are not common between the two lists.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!=list2[j]:\n                new_list.append(list1[i])\n    return new_list\ndef list_union(list1,list2):\n    '''\n    Write a function that takes in two lists as arguments and returns a new list that contains all the elements that are in either list.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    for i in range(len(list2)):\n        new_list.append(list2[i])\n    return new_list\ndef even_number_of_evens(list):\n    '''\n    Write a function that takes in a list as an argument and returns True if the number of even numbers is even. Otherwise, it should return False.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]%2==0:\n            count=count+1\n    if count%2==0:\n        return True\n    return False\ndef even_number_of_evens_alt(list):\n    '''\n    Write a function that takes in a list as an argument and returns True if the number of even numbers is even. Otherwise, it should return False.\n    '''\n    return len([i for i in list if i%2==0])%2==0\ndef big_diff(list):\n    '''\n    Write a function that takes in a list as an argument and returns the difference between the biggest and smallest elements.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n    return max(new_list)-min(new_list)\ndef capitalize(string):\n    '''\n    Write a function that takes in a string as an argument and returns a capitalized version of that string.\n    '''\n    return string.upper()\ndef compact(list):\n    '''\n    Write a function that takes in a list as an argument and returns a version of that list with all of the empty values removed.\n    '''\n    return [i for i in list if i!='']\ndef sum_of_cubes(list):\n    '''\n    Write a function that takes in a list as an argument and returns the sum of the cubes of all of the numbers in that list.\n    '''\n    sum_of_cubes=0\n    for i in range(len(list)):\n        sum_of_cubes+=list[i]**3\n    return sum_of_cubes\ndef sum_of_squares(list):\n    '''\n    Write a function that takes in a list as an argument and returns the sum of the squares of all of the numbers in that list.\n    '''\n    sum_of_squares=0\n    for i in range(len(list)):\n        sum_of_squares+=list"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\nprint(replace_list([1,2,3],[4,5,6]))\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    print(list1)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for i in list2:\n        list1.append(i)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[0:]\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    pass #TODO: Write function\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = {}\n    for char in str1:\n        if char in charac:\n            charac[char] += 1\n        else:\n            charac[char] = 1\n    print(charac)\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(len(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_char = 0\n    for i in str1:\n        total_char = total_char + 1\n    return total_char\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Your code here\n    return str1.count(\" \") + 1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print(f'Total characters in the given string is {count}')\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = \"ABCDEFG\"\n    count = 0\n    for i in str1:\n        count += 1\n    print(count)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # return int(math.sqrt(N) + 1) ** 2\n    x = math.ceil(math.sqrt(N))\n    return x**2\n  \n  \ndef max_product(n): \n    '''\n    Write a python function to find the maximum product of three numbers in the array. The array can be large.\n    '''\n    # max = -1\n    # if len(n) < 3:\n    #     return -1\n    # for i in range(len(n)):\n    #     for j in range(i+1,len(n)):\n    #         if n[i] * n[j] > max:\n    #             max = n[i] * n[j]\n    # return max\n    # mx = 0\n    # while n:\n    #     a = n.pop()\n    #     b = n.pop()\n    #     c = n.pop()\n    #     if a*b*c > mx:\n    #         mx = a*b*c\n    #     n.append(a)\n    #     n.append(b)\n    #     n.append(c)\n    # return mx\n    max1,max2 = -1, -1\n    if len(n) < 3:\n        return -1\n    for i in range(len(n)):\n        if max1 < n[i] and n[i] > max2:\n            max1 = n[i]\n        elif max1 < n[i] and n[i] > max2:\n            max2 = n[i]\n        elif n[i] * max1 > max1 * max2:\n            max2 = max1\n            max1 = n[i]\n        elif n[i] * max1 > max1 * max2:\n            max2 = n[i]\n    return max1 * max2\n  \n  \ndef max_min_products(l): \n    '''\n    Write a python function to find the maximum and minimum product of three numbers in the array. The array can be large.\n    '''\n    # min1,min2 = 0,0\n    # max1,max2 = -1, -1\n    # for i in l:\n    #     if max1 < i and i > max2:\n    #         max1 = i\n    #     elif max1 < i and i > max2:\n    #         max2 = i\n    #     elif min1 > i and i < min2:\n    #         min1 = i\n    #     elif min1 > i and i < min2:\n    #         min2 = i\n    #     elif max1 * max2 < max1 * min2:\n    #         max2 = max1\n    #         max1 = i\n    #     elif max1 * max2 < max1 * min2:\n    #         min2 = min1\n    #         min1 = i\n    # return max1 * max2, min1 * min2\n    # min = -1\n    # max = -1\n    # if len(l) < 3:\n    #     return -1, -1\n    # for i in range(len(l)):\n    #     for j in range(i+1,len(l)):\n    #         if min == -1 and max == -1:\n    #             min = l[i] * l[j]\n    #             max = l[i] * l[j]\n    #         else:\n    #             if l[i] * l[j] < min:\n    #                 min = l[i] * l[j]\n    #             elif l[i] * l[j] > max:\n    #                 max = l[i] * l[j]\n    # return max, min\n    # if len(l) < 3:\n    #     return -1\n    # l.sort()\n    # return l[-1] * l[-2], l[0] * l[1]\n    min1, min2 = 0, 0\n    max1, max2 = -1, -1\n    for i in l:\n        if max1 < i and i > max2:\n            max1 = i\n        elif max1 < i and i > max2:\n            max2 = i\n        elif min1 > i and i < min2:\n            min1 = i\n        elif min1 > i and i < min2:\n            min2 = i\n        elif max1 * max2 < max1 * min2:\n            max2 = max1\n            max1 = i\n        elif max1 * max2 < max1 * min2:\n            min2 = min1\n            min1 = i\n    return max1 * max2, min1 * min2\n  \n  \ndef min_absolute_difference(n):\n    '''\n    Write a python function to find the minimum absolute difference between two numbers in the array. The array can be large.\n    '''\n    # if len(n) < 2:\n    #     return -1\n    # min = -1\n    # for i in range(len(n)):\n    #     for j in range(i+1,len(n)):\n    #         if abs(n[i] - n[j]) < min or min == -1:\n    #             min = abs(n[i] - n[j])\n    # return min\n    # n.sort()\n    # return min(abs(n[i] - n[i+1]) for i in range(len(n)-1))\n    n.sort()\n    return min(abs(n[i] - n[i+1]) for i in range(len(n)-1))\n  \n  \ndef product_difference(n):\n    '''\n    Write a python function to find the maximum product of two numbers in the array. The array can be large.\n    '''\n    # if len(n) < 2:\n    #     return -1\n    # max = -1\n    # for i in range(len(n)):\n    #     for j in range(i+1,len(n)):\n    #         if n[i] * n[j] > max:\n    #             max = n[i] * n[j]\n    # return max\n    # n.sort()\n    # return n[-1] * n[-2]\n    return max(n[i] * n[j] for i in range(len(n)) for j in range(len(n))) - min(n[i] * n[j] for i in range(len(n)) for j in range(len(n)))\n  \n  \ndef find_the_number(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    # if n < 2:\n    #     return 1\n    # return n * find_the_number(n-1)\n    return math.factorial(n)\n  \n  \ndef find_the_number_2(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    # if n < 2:\n    #     return 1\n    # return n * find_the_number(n-1)\n    return math.factorial(n)\n  \n  \ndef find_the_number_3(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    if n < 2:\n        return 1\n    return math.factorial(n) // math.factorial(n-2)\n  \n  \ndef find_the_number_4(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    if n < 2:\n        return 1\n    return math.factorial(n) // math.factorial(n-2)\n  \n  \ndef find_the_number_5(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    if n < 2:\n        return 1\n    return math.factorial(n) // math.factorial(n-2)\n    return math"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        return -1\n    if N == 0: \n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N)) == math.sqrt(N): \n        return -1\n    return (int(math.sqrt(N)) + 1) ** 2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N < 0): \n        return -1;  \n    if (N <= 1): \n        return 2;  \n    start = math.sqrt(N)\n    while(math.sqrt(start)!= math.sqrt(start + 1)): \n        start += 1;  \n    return (int)(start + 1);  \n  "
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil((math.sqrt(N)))\n    \n    \ndef count_Divisors(N):\n    '''\n    Write a python function to find the number of divisors of a given number.\n    '''\n    count=0\n    if N>0:\n        for i in range(1,int(math.sqrt(N))+1):\n            if N%i==0:\n                count+=1\n    return count\n    \ndef count_Divisors_2(N):\n    '''\n    Write a python function to find the number of divisors of a given number.\n    '''\n    count=0\n    if N>0:\n        for i in range(1,int(math.sqrt(N))+1):\n            if N%i==0:\n                count+=1\n                if N%i!=0:\n                    count+=1\n    return count\n    \ndef sum_Fibonacci(N):\n    '''\n    Write a python function to find the sum of first N fibonacci numbers.\n    '''\n    Fibonacci = [0,1]\n    for i in range(2,N+1):\n        Fibonacci.append(Fibonacci[i-1]+Fibonacci[i-2])\n    return Fibonacci[N]\n    \ndef sum_Fibonacci_2(N):\n    '''\n    Write a python function to find the sum of first N fibonacci numbers.\n    '''\n    return int((((1+math.sqrt(5))/2)*(math.pow(math.pow(1+math.sqrt(5),N)+math.pow(1-math.sqrt(5),N)))/math.sqrt(5)))\n    \ndef sum_Fibonacci_3(N):\n    '''\n    Write a python function to find the sum of first N fibonacci numbers.\n    '''\n    # return int((1/math.sqrt(5))*((math.pow(1+math.sqrt(5),N)+math.pow(1-math.sqrt(5),N))/math.sqrt(5)))\n    return int((math.pow(1+math.sqrt(5),N)+math.pow(1-math.sqrt(5),N))/math.sqrt(5))\n    \ndef sum_Fibonacci_4(N):\n    '''\n    Write a python function to find the sum of first N fibonacci numbers.\n    '''\n    \n    result = 0\n    first = 0\n    second = 1\n    if N >= 2:\n        for i in range(2, N+1):\n            result = first + second\n            first = second\n            second = result\n        return result\n    else:\n        return N\n    \ndef is_Prime(N):\n    '''\n    Write a python function to find whether a given number is a prime number or not.\n    '''\n    return math.sqrt(N)%1==0\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if int(root + 1) ** 2 == N:\n        return (int(root + 1) ** 2)\n    else:\n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # This function takes 1 argument n, the number you want to find its next perfect square\n    # This function returns the next perfect square of n\n    # Example : n = 6, then next perfect square of 6 is 8.\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N)) == math.sqrt(N):\n        return 2 * int(math.sqrt(N)) - 1\n    else:\n        return int(math.sqrt(N)) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Let us consider a number N as input and store its square value.\n    \n    sq = N * N\n    \n    # Now let us loop through all numbers from this number to its square root and keep on increasing it by 1.\n    \n    for i in range(N, int(math.sqrt(N) + 1)): \n        if (i * i == N): \n            return (i)\n        i += 1\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N <= 0): \n        return 1\n    s = int(math.sqrt(N)) \n    # N = s*s \n    if ((s * s == N)): \n        return (s * s) \n    else: \n        return ((s * s) + 1) \n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return sum_bitonic_array(arr, len(arr) - 1, 0)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # O(n) time | O(1) space\n    max_sum = 0\n    max_sum_so_far = 0\n    for i in range(1, len(arr) - 1):\n        if arr[i - 1] <= arr[i] and arr[i] >= arr[i + 1]:\n            max_sum_so_far = arr[i] + max_sum\n        else:\n            max_sum_so_far = arr[i]\n        max_sum = max(max_sum_so_far, max_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    max_ending_here = [0] * n\n    max_ending_here[0] = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here[i] = max(max_ending_here[i - 1], arr[i])\n        \n    \n    min_ending_here = [0] * n\n    min_ending_here[0] = arr[0]\n    \n    for i in range(1, n):\n        min_ending_here[i] = min(min_ending_here[i - 1], arr[i])\n        \n    # We will need two arrays: one for min sum and one for max sum\n    # We will need to iterate over the array, two times\n    max_sum = -sys.maxsize\n    for i in range(0, n):\n        max_ending_here[i] = max(max_ending_here[i], min_ending_here[i])\n        max_sum = max(max_sum, max_ending_here[i])\n        \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    arr = sorted(arr)\n    # Traverse through all array elements \n    sum = arr[0]\n    for i in range(1,n):\n        sum = max(sum, arr[i])\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = arr[0]\n    min_sum = 0\n    max_sum_global = 0\n    min_sum_global = 0\n    for i in range(1,n):\n        if arr[i] >= arr[i-1]:\n            min_sum = arr[i]\n        else:\n            min_sum = arr[i] - arr[i-1]\n        max_sum_global = max(max_sum_global, max_sum)\n        max_sum = max(max_sum, min_sum)\n        max_sum_global = max(max_sum_global, max_sum)\n    return max_sum_global\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    left = [0] * n\n    right = [0] * n\n    for i in range(n):\n        left[i] = max(arr[i], arr[i] + left[i - 1])\n        right[i] = max(arr[i], arr[i] + right[i - 1])\n    return max(left) + max(right)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    size = len(arr)\n    max_sum = arr[0]\n    curr_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr,0,len(arr)-1)\n    \ndef max_sum_helper(arr,left,right):\n    if left==right:\n        return arr[left]\n    if right==left+1:\n        return max(arr[left],arr[right])\n    mid=(left+right)//2\n    sm1=max_sum_helper(arr,left,mid)\n    sm2=max_sum_helper(arr,mid,right)\n    sm3=sm4=0\n    i=mid-1\n    j=mid+1\n    while i>=left or j<=right:\n        if arr[i]>arr[j]:\n            sm3=max(sm3,arr[i])\n            i-=1\n        elif arr[i]<arr[j]:\n            sm4=max(sm4,arr[j])\n            j+=1\n        else:\n            sm3=max(sm3,arr[i])\n            sm4=max(sm4,arr[j])\n            i-=1\n            j+=1\n    return max(sm1,sm2,sm3+sm4)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    cur_max, max_sum = 0, 0\n    for x in arr:\n        cur_max = max(x, cur_max + x)\n        max_sum = max(max_sum, cur_max)\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    guess = number/2\n    while True:\n        if guess**2 > number:\n            guess = (guess+number/guess)/2\n        elif guess**2 < number:\n            guess = (guess+number/guess)/2\n        elif guess**2 == number:\n            return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    increment = number/2\n    while abs(guess**2 - number) >= 0.001:\n        guess += increment\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    while True:\n        y = (x + number / x) / 2\n        if abs(y - x) < 0.00001:\n            return y\n        x = y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    guess = x / 2.0\n    while abs(guess * guess - x) >= 0.000001:\n        guess = (guess + x / guess) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    while True:\n        y = (x + number / x) / 2\n        if y == x:\n            return y\n        x = y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    guess = number/guess\n    guess = (guess+number/guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"This function does not work with negative numbers.\")\n        return\n    else:\n        x = number\n        y = (x + 1)//2\n        while (x - y)**2 > 0.000001:\n            x = (x + y)/2\n            y = (x + y)/2\n        return x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while abs(guess * guess - number) >= 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + number // x) // 2\n    return x\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    l = len(str)\n    t = [[0 for x in range(l)] for y in range(l)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    l = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        l[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                l[i][j] = 2\n            elif str[i] == str[j]: \n                l[i][j] = l[i+1][j-1] + 2\n            else: \n                l[i][j] = max(l[i][j-1], l[i+1][j]); \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n+1)] for y in range(n+1)]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    l = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        l[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                l[i][j] = 2\n            elif str[i] == str[j]: \n                l[i][j] = l[i + 1][j - 1] + 2\n            else: \n                l[i][j] = max(l[i][j - 1], l[i + 1][j]); \n    return l[0][n - 1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return len(longestPalindromicSubsequence(str))\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in range(n)]for y in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    m = [[0 for i in range(n)] for j in range(n)] \n    for i in range(n): \n        m[i][i] = 1\n    for i in range(n - 1): \n        if str[i] == str[i + 1]: \n            m[i][i + 1] = 2\n        else: \n            m[i][i + 1] = 1\n    for j in range(n - 1): \n        for i in range(j + 2, n): \n            if str[i] == str[j] and m[i - 1][j + 1] > 0: \n                m[i][j] = m[i - 1][j + 1] + 2\n            else: \n                m[i][j] = max(m[i - 1][j], m[i][j - 1]) \n    return m[n - 1][n - 1]\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def sum_for(n):\n        '''\n        Write a function that takes in an integer n and returns the sum of the positive integers from 1 to n.\n        '''\n        if n == 1:\n            return 1\n        return n + sum_for(n-1)\n    \n    if n == 1:\n        return 0\n    return 1 + sum_for(n-1) / n\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert n > 0\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def factorial(n):\n        product = 1\n        for i in range(2, n + 1):\n            product *= i\n        return product\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # base case:\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/reduce(lambda x, y: x+y, list(map(lambda x: 1/x, range(1, n))))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum = sum + 1/x\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/(1-(1/n))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/i for i in range(1, n))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    for i in set_nums1:\n        if i in set_nums2:\n            intersection_list.append(i)\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    l1,l2 = len(array_nums1),len(array_nums2)\n    inter = []\n    i,j = 0,0\n    while i < l1 and j < l2:\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            inter.append(array_nums1[i])\n            i += 1\n            j += 1\n    return inter\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #O(n) for both\n    #O(n) for array creation\n    #O(n) for interating and inserting\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here\n    intersec = []\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    for i in nums1:\n        if i in nums2:\n            intersec.append(i)\n    return intersec\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    l1=[]\n    for i in array_nums1:\n        if i in array_nums2:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # convert lists to sets\n    array_nums1 = set(array_nums1)\n    array_nums2 = set(array_nums2)\n    # return the intersection of the two sets\n    return list(array_nums1 & array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # first solution\n    # dict1 = {num:array_nums1.count(num) for num in array_nums1}\n    # dict2 = {num:array_nums2.count(num) for num in array_nums2}\n    # print(dict1)\n    # print(dict2)\n    # return dict1.keys() & dict2.keys()\n    # second solution\n    return sorted(list(set(array_nums1) & set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    array_nums1.sort()\n    array_nums2.sort()\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            res.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # using dict\n    # d = {}\n    # for i in array_nums1:\n    #     if i in d:\n    #         d[i] += 1\n    #     else:\n    #         d[i] = 1\n    # for i in array_nums2:\n    #     if i in d:\n    #         d[i] += 1\n    #     else:\n    #         d[i] = 1\n    # return list(d.values())\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return set(array_nums1).intersection(set(array_nums2))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if(i==x):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_str = str(tup)\n    tup_str = tup_str.replace(' ', '')\n    tup_str = tup_str.replace('(', '')\n    tup_str = tup_str.replace(')', '')\n    tup_str = tup_str.replace(',', '')\n    tup_list = tup_str.split('\\'')\n    count = 0\n    for element in tup_list:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    # write code here\n    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c\n    \n    \ndef count_X_v2(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    # write code here\n    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c\n    \n    "
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            x_count += 1\n    return x_count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(0,len(list)):\n        if i==0:\n            new_list.append(element)\n            new_list.append(list[i])\n        else:\n            new_list.append(list[i])\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = list[:]\n    if list:\n        if element in result:\n            result.insert(result.index(element), element)\n            return result\n        else:\n            return list\n    else:\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # [0, 1, 2, 3]\n    # 'a'\n    # ['a', 0, 1, 2, 3]\n    \n    # [0, 1, 2, 3]\n    # 'b'\n    # ['b', 0, 'b', 1, 'b', 2, 'b', 3]\n    \n    new_list = []\n    for element in list:\n        new_list.append(element)\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element in list:\n        list.remove(element)\n    list.insert(list.index(list[0])+1,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result=[]\n    for i in list:\n        result.append(i)\n        result.append(element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    print('convert function takes in list of complex numbers and converts them to polar coordinates')\n    \n    c = numbers\n    num = []\n    for i in c:\n        x = complex(i)\n        a = cmath.polar(x)\n        num.append(a)\n    return num\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return list(map(lambda z: (z.real, z.imag, cmath.polar(z)), numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if isinstance(numbers, (int,float)):\n        return(round(abs(numbers), 2), round(cmath.phase(numbers),2))\n    elif isinstance(numbers, complex):\n        return(round(abs(numbers), 2), round(cmath.phase(numbers),2))\n    else:\n        return(\"Input must be a single integer or a complex number\")\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #get the real and imaginary part of the complex number and store it into separate lists\n    r, i = numbers.real, numbers.imag\n    #get the modulus and the phase of the complex number\n    mod, phase = cmath.polar(numbers)\n    #returning a list of real and imaginary part and modulus and phase\n    return [r,i,mod,phase]\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real=numbers.real\n    imag=numbers.imag\n    polar=complex(real,imag)\n    polar_conversion=cmath.polar(polar)\n    print('The complex number is:',polar)\n    print('The magnitude of the complex number is:',polar_conversion[0])\n    print('The phase of the complex number is:',polar_conversion[1])\n    print('The argument of the complex number is:',polar_conversion[2])\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = complex(numbers.split(\",\"))\n    return cmath.polar(a)\n    \nif __name__ == \"__main__\":\n    #a = convert(\"1,1\")\n    #print(a)\n    import math\n    import cmath\n    \n    # Write a Python program to test whether a number is within 100 of 1000 or 2000\n    \n    \n    def test_range(num):\n        \"\"\"\n        Test whether num is within 100 of 1000 or 2000 \n        \"\"\"\n        if abs(num - 1000) <= 100 or abs(num - 2000) <= 100:\n            return True\n        else:\n            return False\n    \n    if __name__ == \"__main__\":\n        print(test_range(1000))\n        print(test_range(900))\n        print(test_range(800))\n    \n    # Write a Python program to test whether a number is positive, negative or zero\n    \n    def positive_negative_zero(num):\n        \"\"\"\n        Test whether num is positive, negative or zero\n        \"\"\"\n        if num > 0:\n            return \"positive\"\n        elif num == 0:\n            return \"Zero\"\n        else:\n            return \"negative\"\n    \n    if __name__ == \"__main__\":\n        print(positive_negative_zero(4))\n        print(positive_negative_zero(0))\n        print(positive_negative_zero(-8))\n        print(positive_negative_zero(0.5))\n    \n    # Write a Python program to find the number of input strings where the string length is 2 or more and the first and last character are same from a given list of input strings\n    \n    def string_list(string_list):\n        \"\"\"\n        Find the number of input strings where the string length is 2 or more and the first and last character are same from a given list of input strings\n        \"\"\"\n        counter = 0\n        for i in range(0, len(string_list)):\n            if len(string_list[i]) >= 2 and string_list[i][0] == string_list[i][-1]:\n                counter += 1\n        return counter\n    \n    if __name__ == \"__main__\":\n        print(string_list([\"abc\", \"xyz\", \"aba\", \"1221\"]))\n        print(string_list([\"abc\", \"xyz\", \"aba\", \"1221\", \"1222\"]))\n        print(string_list([\"abc\", \"xyz\", \"aba\", \"1221\", \"aaaa\"]))\n    \n    # Write a Python program to create a list of empty dictionaries\n    \n    def empty_dictionaries(n):\n        \"\"\"\n        Create a list of empty dictionaries\n        \"\"\"\n        list_of_empty_dictionaries = []\n        for i in range(0, n):\n            list_of_empty_dictionaries.append({})\n        return list_of_empty_dictionaries\n    \n    if __name__ == \"__main__\":\n        print(empty_dictionaries(3))\n        print(empty_dictionaries(6))\n        print(empty_dictionaries(9))\n    \n    # Write a Python program to find the most common character in a given string\n    \n    def common_character(string):\n        \"\"\"\n        Find the most common character in a given string\n        \"\"\"\n        dict_of_characters = {}\n        for i in range(0, len(string)):\n            if string[i] in dict_of_characters:\n                dict_of_characters[string[i]] += 1\n            else:\n                dict_of_characters[string[i]] = 1\n        max_count = max(dict_of_characters.values())\n        for key in dict_of_characters.keys():\n            if dict_of_characters[key] == max_count:\n                return key\n    \n    if __name__ == \"__main__\":\n        print(common_character(\"Python\"))\n        print(common_character(\"Java\"))\n    \n    # Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of input strings\n    \n    def count_strings(string_list):\n        \"\"\"\n        Count the number of strings where the string length is 2 or more and the first and last character are same from a given list of input strings\n        \"\"\"\n        counter = 0\n        for i in range(0, len(string_list)):\n            if len(string_list[i]) >= 2 and string_list[i][0] == string_list[i][-1]:\n                counter += 1\n        return counter\n    \n    if __name__ == \"__main__\":\n        print(count_strings([\"abc\", \"xyz\", \"aba\", \"1221\"]))\n        print(count_strings([\"abc\", \"xyz\", \"aba\", \"1221\", \"1222\"]))\n        print(count_strings([\"abc\", \"xyz\", \"aba\", \"1221\", \"aaaa\"]))\n    \n    # Write a Python program to find the longest common prefix string amongst a given array of strings.\n    \n    def longest_common_prefix(string_list):\n        \"\"\"\n        Find the longest common prefix string amongst a given array of strings.\n        \"\"\"\n        common_prefix = \"\"\n        for i in range(0, len(string_list)):\n            if i == 0:\n                common_prefix = string_list[0]\n            else:\n                for j in range(0, len(string_list[i])):\n                    if string_list[i][j]!= common_prefix[j]:\n                        common_prefix = common_prefix[:j]\n                        break\n                if len(common_prefix) == 0:\n                    return common_prefix\n        return common_prefix\n    \n    if __name__ == \"__main__\":\n        print(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\n        print(longest_common_prefix([\"dog\",\"racecar\",\"car\"]))\n        print(longest_common_prefix([\"abcd\",\"abc\",\"ab\"]))\n    \n    # Write a Python program to create a list of empty dictionaries\n    \n    def empty_dictionaries(n):\n        \"\"\"\n        Create a list of empty dictionaries\n        \"\"\"\n        list_of_empty_dictionaries = []\n        for i in range(0, n):\n            list_of_empty_dictionaries.append({})\n        return list_of_empty_dictionaries\n    \n    if __name__ == \"__main__\":\n        print(empty_dictionaries(3))\n        print(empty_dictionaries(6))\n        print(empty_dictionaries(9))\n    \n    # Write a Python program to print a specified list after removing the 0th, 4th and 5th elements. Sample List : ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\n    \n    def print_list_of_element(list_of_element):\n        \"\"\"\n        Print a specified list after removing the 0th, 4th and 5th elements.\n        \"\"\"\n        list_of_element = [elem for i, elem in enumerate(list_of_element) if i not in (0, 4, 5)]\n        return list_of_element\n    \n    if __name__ == \"__main__\":\n        print(print_list_of_element(['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']))\n        print(print_list_of_element(['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow', 'Orange']))\n        print(print_list_of_element(['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow', 'Orange', 'Green']))\n    \n    # Write a Python program to check whether a specified value is contained in a group of values\n    \n    def group_check(group_of_element, value):\n        \"\"\"\n        Check whether a specified value is contained in a group of values\n        \"\"\"\n        return value in group_of_element\n    \n    if __name__ == \"__main__\":\n        print(group_check(['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow'], 'Red'))\n        print(group_check(['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow'], 'Orange'))\n    \n    # Write a Python program to create groups of five consecutive numbers in a list.\n    \n    def group_of_five_consecutive(list_of"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = convert(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return cmath.polar(numbers)\n    # else:\n    #     return None\n    # return numbers\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = convert(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return cmath.polar(numbers)\n    # else:\n    #     return None\n    # return numbers\n    if isinstance(numbers, list):\n        for i in range(len(numbers)):\n            numbers[i] = convert(numbers[i])\n    elif isinstance(numbers, complex):\n        return cmath.polar(numbers)\n    else:\n        return None\n    return numbers\n    # else:\n    #     return None\ndef complex_add(numbers):\n    '''\n    Write a python function to add two complex numbers.\n    '''\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = complex_add(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return complex(numbers.real, numbers.imag) + complex(1, 1)\n    # else:\n    #     return None\n    # return numbers\n    if isinstance(numbers, list):\n        for i in range(len(numbers)):\n            numbers[i] = complex_add(numbers[i])\n    elif isinstance(numbers, complex):\n        return numbers + complex(1, 1)\n    else:\n        return None\n    return numbers\n    # else:\n    #     return None\ndef complex_sub(numbers):\n    '''\n    Write a python function to subtract two complex numbers.\n    '''\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = complex_sub(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return complex(numbers.real, numbers.imag) - complex(1, 1)\n    # else:\n    #     return None\n    # return numbers\n    if isinstance(numbers, list):\n        for i in range(len(numbers)):\n            numbers[i] = complex_sub(numbers[i])\n    elif isinstance(numbers, complex):\n        return numbers - complex(1, 1)\n    else:\n        return None\n    return numbers\n    # else:\n    #     return None\ndef complex_mul(numbers):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = complex_mul(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return complex(numbers.real, numbers.imag) * complex(1, 1)\n    # else:\n    #     return None\n    # return numbers\n    if isinstance(numbers, list):\n        for i in range(len(numbers)):\n            numbers[i] = complex_mul(numbers[i])\n    elif isinstance(numbers, complex):\n        return numbers * complex(1, 1)\n    else:\n        return None\n    return numbers\n    # else:\n    #     return None\ndef complex_div(numbers):\n    '''\n    Write a python function to divide two complex numbers.\n    '''\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = complex_div(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return complex(numbers.real, numbers.imag) / complex(1, 1)\n    # else:\n    #     return None\n    # return numbers\n    if isinstance(numbers, list):\n        for i in range(len(numbers)):\n            numbers[i] = complex_div(numbers[i])\n    elif isinstance(numbers, complex):\n        return numbers / complex(1, 1)\n    else:\n        return None\n    return numbers\n    # else:\n    #     return None\ndef complex_conj(numbers):\n    '''\n    Write a python function to find the conjugate of a complex number.\n    '''\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = complex_conj(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return complex(numbers.real, -numbers.imag)\n    # else:\n    #     return None\n    # return numbers\n    if isinstance(numbers, list):\n        for i in range(len(numbers)):\n            numbers[i] = complex_conj(numbers[i])\n    elif isinstance(numbers, complex):\n        return complex(numbers.real, -numbers.imag)\n    else:\n        return None\n    return numbers\n    # else:\n    #     return None\ndef complex_abs(numbers):\n    '''\n    Write a python function to find the absolute value of a complex number.\n    '''\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = complex_abs(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return (numbers.real ** 2 + numbers.imag ** 2) ** 0.5\n    # else:\n    #     return None\n    # return numbers\n    if isinstance(numbers, list):\n        for i in range(len(numbers)):\n            numbers[i] = complex_abs(numbers[i])\n    elif isinstance(numbers, complex):\n        return (numbers.real ** 2 + numbers.imag ** 2) ** 0.5\n    else:\n        return None\n    return numbers\n    # else:\n    #     return None\ndef complex_inv(numbers):\n    '''\n    Write a python function to find the inverse of a complex number.\n    '''\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = complex_inv(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return complex(numbers.real, -numbers.imag) / (numbers.real ** 2 + numbers.imag ** 2)\n    # else:\n    #     return None\n    # return numbers\n    if isinstance(numbers, list):\n        for i in range(len(numbers)):\n            numbers[i] = complex_inv(numbers[i])\n    elif isinstance(numbers, complex):\n        return complex(numbers.real, -numbers.imag) / (numbers.real ** 2 + numbers.imag ** 2)\n    else:\n        return None\n    return numbers\n    # else:\n    #     return None\ndef complex_arg(numbers):\n    '''\n    Write a python function to find the argument of a complex number.\n    '''\n    # if isinstance(numbers, list):\n    #     for i in range(len(numbers)):\n    #         numbers[i] = complex_arg(numbers[i])\n    # elif isinstance(numbers, complex):\n    #     return cmath.phase(numbers)\n    # else:\n    #     return None\n    # return numbers\n    if isinstance(numbers, list):\n        for i in range(len(numbers)):\n            numbers["
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Your function should take in a complex number and output a tuple containing the magnitude of the complex number and a direction. \n    Your function should return a tuple\n    '''\n    #converts complex number to complex number of polar form\n    def complex2polar(complex_num):\n        #convert complex number to polar\n        return cmath.polar(complex_num)\n    #converts polar number to complex number\n    def polar2complex(polar_num):\n        #convert polar number to complex\n        return cmath.rect(polar_num[0],polar_num[1])\n    #create a list with the first element being the magnitude of the complex number and the second being the direction\n    return [complex2polar(complex_num)[0],complex2polar(complex_num)[1]*(180/cmath.pi)]\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print \"The complex number is : \", numbers\n    polar_numbers = cmath.polar(numbers)\n    print \"The polar coordinates are : \", polar_numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print('Polar Coordinates',numbers)\n    print('Polar Coordinates: ',cmath.polar(numbers))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list(filter(lambda x: type(x) == int, list1)))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # for i in list1:\n    #     if isinstance(i,int):\n    #         return list1.count(i)\n    #     elif isinstance(i,float):\n    #         pass\n    return list1.count(int(i))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1 = list(list1)\n    for x in list1:\n        if x.isalpha() == True:\n            list1.remove(x)\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count +=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count+=1\n    return count\nprint(count_integer([1, 2, 3, 4, 5, 'a', '6']))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\nlist1=[1,2,3,4,5,'a','b',[1,2,3,4]]\nprint(count_integer(list1))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if list1 is None:\n        return None\n    elif len(list1) == 0:\n        return None\n    else:\n        count = 0\n        for i in list1:\n            if type(i) == int:\n                count += 1\n        return count\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n    # return combinations(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(x,)*i for i in range(1, n+1) for x in l]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)+1):\n        if i == 0 or i == n:\n            combs.append((l[i],))\n        else:\n            combs.extend(list(combinations_with_replacement(l, i)))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    print(list(combinations_with_replacement(l, n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, i+1):\n            if len(j) == n:\n                combs.append(tuple(j))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors=[]\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if(j>=len(l)):\n                break\n            colors.append((l[i],l[j]))\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list1 = []\n    for i in l:\n        list1.append(i)\n    return list(combinations_with_replacement(list1,n))\n    # you can also use list(combinations(list1,n))\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            \n    return count\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if the n is a prime number and False if the n is not a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef count_Primes_eratosthenes(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number using the sieve of eratosthenes.\n    '''\n    if n <= 1:\n        return 0\n        \n    number_list = [False] * n\n    \n    number_list[0] = number_list[1] = True\n    \n    for i in range(2, n):\n        if number_list[i] == False:\n            for j in range(i * i, n, i):\n                number_list[j] = True\n                \n    return sum(number_list)\n    "
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n):\n        if check_prime(i) == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = [2]\n    i = 3\n    while len(prime_nums) < n:\n        for p in prime_nums:\n            if i % p == 0:\n                break\n            if p ** 2 >= i:\n                prime_nums.append(i)\n                break\n        else:\n            prime_nums.append(i)\n        i += 2\n    return len(prime_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n==1:\n            return False\n        elif n==2:\n            return True\n        else:\n            for i in range(2,n):\n                if n%i==0:\n                    return False\n            return True\n    c=0\n    for i in range(1,n):\n        if is_prime(i):\n            c+=1\n    return c\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n - sum(is_prime(n, prime_number))\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n):\n        if all(i%j!= 0 for j in range(2,int(i**0.5)+1)):\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 2:\n        return 0\n    primes = [2]\n    for i in range(3, n, 2):\n        for j in primes:\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return False\n            return True\n        else:\n            return False\n    count = 0\n    for i in range(1, n):\n        if isPrime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a < b:\n        new_tuple = (a,b)\n    else:\n        new_tuple = (b,a)\n    return new_tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = b\n    b = a\n    a = c\n    return(a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return(b,a)\n    "
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\nprint(swap_numbers(2,1))"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elements = ()\n    i = 0\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    for elem in test_tup1:\n        if elem < max1:\n            i += 1\n    for elem in test_tup2:\n        if elem < max2:\n            i += 1\n    return i\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # create a list of all the elements from both tuples and return the max of it\n    return max(list(test_tup1) + list(test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max(test_tup1)\n    else:\n        return max(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = tuple()\n    if test_tup1 < test_tup2:\n        result = test_tup2\n    elif test_tup1 > test_tup2:\n        result = test_tup1\n    return result\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_list.append(test_tup1[i])\n        elif test_tup1[i] < test_tup2[i]:\n            max_list.append(test_tup2[i])\n        else:\n            max_list.append(test_tup1[i])\n    return max_list\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # hint: use min and list comprehension\n    return tuple(min([i,j]) for i,j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0]*test_tup2[1],test_tup2[0]*test_tup1[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = ()\n    for i, j in zip(test_tup1, test_tup2):\n        if i > j:\n            result = (i, j)\n        else:\n            result = (j, i)\n    return result\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = list(test_tup1)\n    for i in range(len(test_tup1)):\n        result[i] = max(test_tup1[i], test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n<=0:\n        return None\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    a = 2\n    b = 3\n    i = 3\n    while True:\n        p = a + b\n        if p >= n:\n            return p\n        a = b\n        b = p\n        i+=1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = int(n)\n    if (p % 2 == 0):\n        return 2\n    s = 1\n    q = p // 2\n    while (q % 2 == 0):\n        s += 1\n        q //= 2\n    \n    r = (2 ** s) % p\n    if r == 0:\n        return p - 1\n    for i in range(1, s):\n        r = ((r ** 2) % p) % p\n        if r == 1 and i % 2 == 0:\n            return p - 1\n    return p - 1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b = 2, 1\n    while b < n:\n        a, b = a + 1, a + b + 2\n    return a\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n<=1: return False\n    if n == 2: return 3\n    if n == 3: return 5\n    if n == 4: return 7\n    \n    s, p, q = 4, 2, 1\n    while s < n:\n        p = p + 2\n        if miller_rabin(p) == True:\n            s, q = s+1, q+1\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def sieve(n):\n        is_prime = [True]*n\n        is_prime[0] = False\n        is_prime[1] = False\n        is_prime[2] = True\n        for i in range(3, int(n**0.5+1), 2):\n            index = i*2\n            while index < n:\n                is_prime[index] = False\n                index = index+i\n        prime = [2]\n        for i in range(3, n, 2):\n            if is_prime[i]:\n                prime.append(i)\n        return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    prime = [2, 3]\n    if n <= len(prime):\n        return prime[n - 1]\n    # first stage\n    a = 2\n    b = (n - 1) // 2\n    p = 0\n    while True:\n        b = int((n - 1) / a)\n        p = (a + b) * (b - 1) // 2\n        if p % 2 == 1:\n            break\n        a += 1\n    while True:\n        x = newman_shanks(p)\n        if x not in prime:\n            return x\n        prime.append(x)\n        p = x * x - p\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # global x\n    # global s\n    # global counter\n    # global i\n    # global num_list\n    # global i_list\n    # global s_list\n    # global x_list\n    # global n_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list\n    # global num_list"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    phi = n - 1\n    s = 0\n    d = n\n    while(d%2 == 0):\n        d = d / 2\n        s += 1\n    for i in range(5, n+1):\n        x = pow(i, phi, n)\n        if x == 1 or x == n-1:\n            continue\n        for j in range(1, s):\n            x = (x * x) % n\n            if x == n-1:\n                break\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    \n    count = 1\n    a = 2\n    b = 3\n    while count < n:\n        a, b = b, a + b\n        count += 1\n    return b\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    res = ()\n    for i, j in zip(test_tup1, test_tup2):\n        res = res + (i/j,)\n    return res\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([i / j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        output = tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n    except ZeroDivisionError:\n        output = ('zero division error',)\n    return output\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1 + test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return(tuple(map(lambda x, y: x/y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # create empty list\n    list = []\n    # populate list\n    for i, j in zip(test_tup1, test_tup2):\n        list.append(i/j)\n    # return tuple\n    return tuple(list)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i]/test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        res_tup1 = []\n        for i in range(len(test_tup1)):\n            res_tup1.append(test_tup1[i]/test_tup2[i])\n        return tuple(res_tup1)\n    except ZeroDivisionError:\n        print(\"\\nERROR: Division by 0 is not allowed!\")\n    except:\n        print(\"\\nERROR: Something else went wrong.\")\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Cannot perform element-wise division on tuples of different length.'\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    return (list1[0:L], list1[L:len(list1)])\n    \nprint(split_two_parts([1,2,3,4,5,6,7,8,9,10], 4)"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[0:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    print('\\nSplit Two Parts:')\n    list2 = list1[L:]\n    list1 = list1[:L]\n    print('List 1: {}\\nList 2: {}'.format(list1, list2))\n    return (list1, list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_half = list1[:L]\n    second_half = list1[L:]\n    return first_half, second_half\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return [list1], []\n    else:\n        return [list1[:L]], [list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    list1_1 = list1[:L]\n    list1_2 = list1[L:]\n    return (list1_1, list1_2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split1 = []\n    split2 = []\n    if len(list1) % L == 0:\n        for i in range(0, len(list1), L):\n            split1.append(list1[i])\n        for i in range(L, len(list1)):\n            split2.append(list1[i])\n        return split1, split2\n    else:\n        for i in range(0, len(list1)):\n            if i < L:\n                split1.append(list1[i])\n            else:\n                split2.append(list1[i])\n        return split1, split2\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # slice the list in two parts, the first one has L elements\n    # the second part has the rest of the list\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if not isinstance(h_age, int):\n        raise ValueError('Please pass in an integer')\n    return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # h_age = int(input(\"Enter the dog's age in human years: \"))\n    if h_age < 2:\n        dog_age = h_age * 10.5\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 2 and h_age < 4:\n        dog_age = (h_age * 4) + 20.5\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 4 and h_age < 7:\n        dog_age = ((h_age - 2) * 7) + 24\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 7 and h_age < 10:\n        dog_age = ((h_age - 4) * 10) + 30\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 10 and h_age < 13:\n        dog_age = ((h_age - 7) * 15) + 37\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 13 and h_age < 16:\n        dog_age = ((h_age - 10) * 20) + 50\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 16 and h_age < 19:\n        dog_age = ((h_age - 13) * 25) + 62\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 19 and h_age < 23:\n        dog_age = ((h_age - 16) * 30) + 75\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 23 and h_age < 27:\n        dog_age = ((h_age - 19) * 35) + 87\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 27 and h_age < 31:\n        dog_age = ((h_age - 23) * 40) + 100\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 31 and h_age < 36:\n        dog_age = ((h_age - 27) * 45) + 112\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 36 and h_age < 41:\n        dog_age = ((h_age - 31) * 50) + 125\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 41 and h_age < 46:\n        dog_age = ((h_age - 36) * 55) + 137\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 46 and h_age < 51:\n        dog_age = ((h_age - 41) * 60) + 150\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 51 and h_age < 56:\n        dog_age = ((h_age - 46) * 65) + 162\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 56 and h_age < 61:\n        dog_age = ((h_age - 51) * 70) + 175\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 61 and h_age < 66:\n        dog_age = ((h_age - 56) * 75) + 187\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 66 and h_age < 71:\n        dog_age = ((h_age - 61) * 80) + 200\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 71 and h_age < 76:\n        dog_age = ((h_age - 66) * 85) + 212\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 76 and h_age < 81:\n        dog_age = ((h_age - 71) * 90) + 225\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 81 and h_age < 86:\n        dog_age = ((h_age - 76) * 95) + 237\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 86 and h_age < 91:\n        dog_age = ((h_age - 81) * 100) + 250\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 91 and h_age < 96:\n        dog_age = ((h_age - 86) * 105) + 262\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 96 and h_age < 101:\n        dog_age = ((h_age - 91) * 110) + 275\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 101 and h_age < 106:\n        dog_age = ((h_age - 96) * 115) + 285\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 106 and h_age < 111:\n        dog_age = ((h_age - 101) * 120) + 295\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 111 and h_age < 116:\n        dog_age = ((h_age - 106) * 125) + 305\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 116 and h_age < 121:\n        dog_age = ((h_age - 111) * 130) + 315\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 121 and h_age < 126:\n        dog_age = ((h_age - 116) * 135) + 325\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 126 and h_age < 131:\n        dog_age = ((h_age - 121) * 140) + 335\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 131 and h_age < 136:\n        dog_age = ((h_age - 126) * 145) + 345\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 136 and h_age < 141:\n        dog_age = ((h_age - 131) * 150) + 355\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 141 and h_age < 146:\n        dog_age = ((h_age - 136) * 155) + 365\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 146 and h_age < 151:\n        dog_age = ((h_age - 141) * 160) + 375\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 151 and h_age < 156:\n        dog_age = ((h_age - 146) * 165) + 385\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 156 and h_age < 161:\n        dog_age = ((h_age - 151) * 170) + 395\n        print(f\"The dog's age in dog's years is {dog_age}\")\n    elif h_age >= 161 and h_age < 166:\n        dog_age = ((h_ag"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 0:\n        return h_age * 10.5\n    else:\n        return \"Your dog is not born yet.\"\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 2:\n        return 15\n    elif h_age > 2:\n        return 20 + 10*(h_age - 2)\n    else:\n        return \"Error\"\n    # convert the age to dog's years, then return it\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #h_age = input(\"Input a dog's age in human years: \")\n    if h_age >= 2:\n        print(h_age * 15)\n    else:\n        print(h_age * 10)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + 4 * (h_age - 2)\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = S\n    L = [L[i:i+step] for i in range(0, len(L), step)]\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    for i in range(0,len(S),step):\n        yield S[i:i+step]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    for i in range(0,len(S),step):\n        out.append(S[i:i+step])\n    return out\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(0, len(S), step):\n        lst.append(S[i: i+step])\n    return lst\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0,len(S),step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0,len(S),step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    assert S, 'Empty list'\n    if step == 1:\n        return [S]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ans = []\n    for i in range(0, len(S), step):\n        ans.append(S[i:i+step])\n    return ans\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(f'The lateral surface area of a cube with a side length of {l} is {l * l * 6}')\n    print()\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    def lateral_surface_area(l):\n        return 6*l**2\n    print(\"The lateral surface area of the cube is:\", lateral_surface_area(l))\n    return lateral_surface_area(l)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # TODO\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*3.14*r**2\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*3.14*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    return 3.14*r*h\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    a = l**2\n    return a\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 1:\n        return None\n    return sum(i*i for i in range(1, n+1, 2))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #import numpy as np\n    #def square_Sum(n):\n    #    return np.sum(np.arange(1,n+1,2))\n    \n    #return int(np.sum(np.arange(1,n+1,2)))\n    #return int(np.sum(np.arange(1,n+1,2)))\n    return int(sum([i**2 for i in range(1,n+1,2)]))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(n)\n    if n >= 0:\n        return (((n*(n+1))/2)*((n+1)*(n+2))/2)\n    else:\n        return 0\n    \ndef list_all_stars(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of all possible arrangements of n-star shaped star with the central star filled with a space.\n    '''\n    def _get_list_of_lists(m, stars):\n        res = []\n        if m == 0:\n            res.append([stars])\n        else:\n            for i in range(0, len(stars)):\n                sub_list = stars[:]\n                sub_list[i] = \" \"\n                res += _get_list_of_lists(m-1, sub_list)\n        return res\n    \n    return _get_list_of_lists(n, [\"*\"]*n)\n    \ndef unique_Strings(s):\n    '''\n    Write a python function that takes in a string s and returns a list of all possible combinations of s.\n    '''\n    if s == \"\":\n        return [[]]\n    \n    l = s.split(s[0])\n    l[1] = l[1][0]\n    return [[l[0]] + i for i in unique_Strings(l[1])] + [[s[0]] + i for i in unique_Strings(s[1:])]\n    \ndef print_combinations(s, n):\n    '''\n    Write a python function that takes in a string s and an integer n and returns a list of all possible combinations of n elements in s.\n    '''\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [i for i in s]\n    \n    l = s.split(s[0])\n    l[1] = l[1][0]\n    return [i + j for i in print_combinations(l[1], n-1) for j in print_combinations(s[1:], n)]\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum( [ x ** 2 for x in range(1, n) if x % 2 == 1 ] )\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for x in range(n):\n        result += x*x\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += (x * x)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if(i%2!=0):\n            total += i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    def square_Sum_helper(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n        \n    return square_Sum_helper(n)\n    \ndef digit_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of n\n    '''\n    def digit_Sum_helper(n):\n        total = 0\n        while n!= 0:\n            total += n % 10\n            n //= 10\n        return total\n    \n    return digit_Sum_helper(n)\n    \ndef number_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of n squared.\n    '''\n    def number_Sum_helper(n):\n        return sum([int(i) for i in str(n * n)])\n    \n    return number_Sum_helper(n)\n    \ndef Sum_of_N_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n squares\n    '''\n    \n    def Sum_of_N_Squares_helper(n):\n        return (n * (n + 1)) * (2 * n + 1) // 6\n        \n    return Sum_of_N_Squares_helper(n)\n    \ndef Sum_of_Digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of n\n    '''\n    \n    def Sum_of_Digits_helper(n):\n        total = 0\n        while n!= 0:\n            total += n % 10\n            n //= 10\n        return total\n    \n    return Sum_of_Digits_helper(n)\n    \ndef Sum_of_Digits_Squared(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the digits of n\n    '''\n    \n    def Sum_of_Digits_Squared_helper(n):\n        return sum([int(i) ** 2 for i in str(n)])\n    \n    return Sum_of_Digits_Squared_helper(n)\n    \ndef Digit_Square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the digits of n\n    '''\n    \n    def Digit_Square_Sum_helper(n):\n        return sum([int(i) ** 2 for i in str(n)])\n    \n    return Digit_Square_Sum_helper(n)\n    \ndef digit_Square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the digits of n\n    '''\n    def digit_Square_Sum_helper(n):\n        total = 0\n        while n!= 0:\n            total += n % 10\n            n //= 10\n        return total ** 2\n    \n    return digit_Square_Sum_helper(n)\n    \ndef Digit_Sum_of_N(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of n\n    '''\n    def Digit_Sum_of_N_helper(n):\n        return sum([int(i) for i in str(n)])\n    \n    return Digit_Sum_of_N_helper(n)\n    \ndef Digit_Sum_of_N_Squared(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the digits of n\n    '''\n    def Digit_Sum_of_N_Squared_helper(n):\n        return sum([int(i) ** 2 for i in str(n)])\n    \n    return Digit_Sum_of_N_Squared_helper(n)\n    \ndef Digit_Square_Sum_of_N(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the digits of n\n    '''\n    def Digit_Square_Sum_of_N_helper(n):\n        return sum([int(i) ** 2 for i in str(n)])\n    \n    return Digit_Square_Sum_of_N_helper(n)\n    \ndef num_to_word_helper(n):\n    if n == 1:\n        return \"one\"\n    elif n == 2:\n        return \"two\"\n    elif n == 3:\n        return \"three\"\n    elif n == 4:\n        return \"four\"\n    elif n == 5:\n        return \"five\"\n    elif n == 6:\n        return \"six\"\n    elif n == 7:\n        return \"seven\"\n    elif n == 8:\n        return \"eight\"\n    elif n == 9:\n        return \"nine\"\n    elif n == 10:\n        return \"ten\"\n    elif n == 11:\n        return \"eleven\"\n    elif n == 12:\n        return \"twelve\"\n    elif n == 13:\n        return \"thirteen\"\n    elif n == 14:\n        return \"fourteen\"\n    elif n == 15:\n        return \"fifteen\"\n    elif n == 16:\n        return \"sixteen\"\n    elif n == 17:\n        return \"seventeen\"\n    elif n == 18:\n        return \"eighteen\"\n    elif n == 19:\n        return \"nineteen\"\n    elif n == 20:\n        return \"twenty\"\n    elif n == 30:\n        return \"thirty\"\n    elif n == 40:\n        return \"forty\"\n    elif n == 50:\n        return \"fifty\"\n    elif n == 60:\n        return \"sixty\"\n    elif n == 70:\n        return \"seventy\"\n    elif n == 80:\n        return \"eighty\"\n    elif n == 90:\n        return \"ninety\"\n    else:\n        return \"error\"\n        \ndef num_to_word(n):\n    '''\n    Write a python function that takes in an integer n and returns the English words of the digits of n\n    '''\n    \n    def num_to_word_helper(n):\n        if n >= 1000:\n            return \"thousand\" + \" \" + num_to_word_helper(n % 1000)\n        elif n >= 100:\n            return num_to_word_helper(n // 100) + \"hundred\" + \" \" + num_to_word_helper(n % 100)\n        elif n >= 20:\n            return num_to_word_helper(n // 10) + \"ty\" + \" \" + num_to_word_helper(n % 10)\n        elif n >= 10:\n            return num_to_word_helper(n // 10) + \"ten\" + \" \" + num_to_word_helper(n % 10)\n        elif n == 1:\n            return \"one\"\n        elif n == 2:\n            return \"two\"\n        elif n == 3:\n            return \"three\"\n        elif n == 4:\n            return \"four\"\n        elif n == 5:\n            return \"five\"\n        elif n == 6:\n            return \"six\"\n        elif n == 7:\n            return \"seven\"\n        elif n == 8:\n            return \"eight\"\n        elif n == 9:\n            return \"nine\"\n        elif n == 10:\n            return \"ten\"\n        elif n == 11:\n            return \"eleven\"\n        elif n == 12:\n            return \"twelve\"\n        elif n == 13:\n            return \"thirteen\"\n        elif n == 14:\n            return \"fourteen\"\n        elif n == 15:\n            return \"fifteen\"\n        elif n == 16:\n            return \"sixteen\"\n        elif n == 17:\n            return \"seventeen\"\n        elif n == 18:\n            return \"eighteen\"\n        elif n == 19:\n            return \"nineteen\"\n        elif n == 20:\n            return \"twenty\"\n        elif n ="
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2)]))\n    \ndef smallest_Number(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n odd natural numbers.\n    '''\n    return(sum([i for i in range(1,n+1,2)]))\n    \ndef squares_Div_By_Seven(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2) if i%7==0]))\n    \ndef smallest_Number(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n odd natural numbers.\n    '''\n    return(sum([i for i in range(1,n+1,2) if i%7==0]))\n    \ndef squares_Div_By_Seven(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2) if i%7==0]))\n    \ndef sum_Of_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2)]))\n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return(max([i for i in range(2,n+1) if n%i==0]))\n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return(max([i for i in range(2,n+1) if n%i==0]))\n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return(max([i for i in range(2,n+1) if n%i==0]))\n    \ndef smallest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the smallest prime factor of n.\n    '''\n    return(min([i for i in range(2,n+1) if n%i==0]))\n    \ndef sum_Of_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2)]))\n    \ndef smallest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the smallest prime factor of n.\n    '''\n    return(min([i for i in range(2,n+1) if n%i==0]))\n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return(max([i for i in range(2,n+1) if n%i==0]))\n    \ndef sum_Of_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2)]))\n    \ndef smallest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the smallest prime factor of n.\n    '''\n    return(min([i for i in range(2,n+1) if n%i==0]))\n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return(max([i for i in range(2,n+1) if n%i==0]))\n    \ndef sum_Of_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2)]))\n    \ndef smallest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the smallest prime factor of n.\n    '''\n    return(min([i for i in range(2,n+1) if n%i==0]))\n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return(max([i for i in range(2,n+1) if n%i==0]))\n    \ndef sum_Of_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2)]))\n    \ndef smallest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the smallest prime factor of n.\n    '''\n    return(min([i for i in range(2,n+1) if n%i==0]))\n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return(max([i for i in range(2,n+1) if n%i==0]))\n    \ndef sum_Of_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2)]))\n    \ndef smallest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the smallest prime factor of n.\n    '''\n    return(min([i for i in range(2,n+1) if n%i==0]))\n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return(max([i for i in range(2,n+1) if n%i==0]))\n    \ndef sum_Of_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2)]))\n    \ndef smallest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the smallest prime factor of n.\n    '''\n    return(min([i for i in range(2,n+1) if n%i==0]))\n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return(max([i for i in range(2,n+1) if n%i==0]))\n    \ndef sum_Of_Squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum([i*i for i in range(1,n+1,2)]))\n    \ndef smallest_Prime_Factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the smallest prime factor of n.\n    '''\n    return(min([i for i i"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(1,n+1,2))\n    \ndef square_Sum_V2(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(n))\n    \ndef square_Sum_V3(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum((i*2 + 1)**2 for i in range(n))\n    \ndef square_Sum_V4(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum((n*2 - 1)**2 for n in range(n))\n    \ndef square_Sum_V5(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(1,n+1) if i % 2 == 1)\n    \ndef square_Sum_V6(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum((i*2 + 1)**2 for i in range(n) if i % 2 == 1)\n    \ndef square_Sum_V7(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum((n*2 - 1)**2 for n in range(n) if n % 2 == 1)\n    \ndef square_Sum_V8(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(1,n+1) if i % 2)\n    \ndef square_Sum_V9(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(n) if i % 2)\n    \ndef square_Sum_V10(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(n+1) if i % 2 == 1)\n    "
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if not n:\n        return None\n    \n    return n + 1 + find_star_num(n - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (2**n) * n\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    l = []\n    star = 1\n    while star < n:\n        l.append(star)\n        star = star + 3 * star + 1\n    return l[n-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    s = '+' + '-' * n + '+' + '\\n'\n    for i in range(n):\n        s += '|' + '*' * (2 * i + 1) + '|' + '\\n'\n        \n    s += '+' + '-' * n + '+' + '\\n'\n    return s\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(str(n) * 2)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*n-1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n**2 - n + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = \"*\"\n    space = \" \"\n    star_num = 0\n    i = 0\n    \n    while star_num < n:\n        star_num += 2 ** i\n        i += 1\n        \n    return star_num - 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #star_num = [1, 5, 10, 20, 25, 50, 100, 200, 500, 1000]\n    #star_num = [1,2,3,4,5,6,7,8,9,10]\n    #star_num = [5,8,13,21,34,55,89,144,233,377,610]\n    star_num = [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025]\n    i = 0\n    while star_num[i] < n:\n        i += 1\n    return star_num[i]\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    return find_star_num(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    return ord(k)\n    \ndef ascii_values(s):\n    '''\n    Write a function to find the ascii values of a string\n    '''\n    \n    return [ascii_value(i) for i in s]\n    \ndef max_word_len(s):\n    '''\n    Write a function to get the maximum length of a word in a sentence\n    '''\n    \n    return max(len(i) for i in s.split(' '))\n    \ndef is_pangram(s):\n    '''\n    Write a function to check if a sentence is a pangram or not\n    '''\n    \n    return set(ascii_values(s)).issuperset(set(range(97,123)))\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome or not\n    '''\n    \n    return s.lower() == s.lower()[::-1]\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return 32\n    if k == '\\n':\n        return 10\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # return ord(k)\n    return ord('a') + k - 1\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        return ord(k)\n    else:\n        raise TypeError(\"Input must be a character.\")\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_index.append(i)\n            even_sum = even_sum + arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list_and_even_index = []\n    for x in arr:\n        if x % 2 == 0:\n            even_list_and_even_index.append(x)\n    return sum(even_list_and_even_index)\nprint(sum_even_and_even_index([1,2,3,4,5,6,7,8]))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # even_list = []\n    # for i in range(0, len(arr)):\n    #     if i % 2 == 0:\n    #         even_list.append(arr[i])\n    # return sum(even_list)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0 and i % 2 == 0):\n            sum += arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0 and value % 2 == 0:\n            total += value\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not isinstance(arr, list):\n        return 0\n    sum = 0\n    for index in range(len(arr)):\n        if index % 2 == 0 and arr[index] % 2 == 0:\n            sum = sum + arr[index]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 0:\n        return 0\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in arr:\n        if i % 2 == 0:\n            even_sum += i\n            even_index += 1\n    return even_sum/even_index\n    \ndef sum_all_even_numbers(arr):\n    '''\n    Write a Python program to sum all the items in a list of lists.\n    '''\n    sum = 0\n    for i in arr:\n        for j in i:\n            sum += j\n    return sum\n    \ndef sum_all_even_numbers_2(arr):\n    '''\n    Write a Python program to sum all the items in a list of lists.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n    \ndef sum_all_even_numbers_3(arr):\n    '''\n    Write a Python program to sum all the items in a list of lists.\n    '''\n    return sum(list(sum(i) for i in arr if i % 2 == 0))\n    \ndef sum_all_even_numbers_4(arr):\n    '''\n    Write a Python program to sum all the items in a list of lists.\n    '''\n    return sum([sum(i) for i in arr if i % 2 == 0])\n    \ndef sum_all_even_numbers_5(arr):\n    '''\n    Write a Python program to sum all the items in a list of lists.\n    '''\n    return sum([sum(i) for i in arr if sum(i) % 2 == 0])\n    \ndef flatten_list(arr):\n    '''\n    Write a Python program to flatten a given list.\n    '''\n    return sum(arr,[])\n    \ndef find_all_combination_sum(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    # res = []\n    # for i in range(len(arr)-2):\n    #     for j in range(i+1, len(arr)-1):\n    #         for m in range(j+1, len(arr)):\n    #             if arr[i]+arr[j]+arr[m] == k:\n    #                 res.append([arr[i],arr[j],arr[m]])\n    # return res\n    return [[arr[i],arr[j],arr[m]] for i in range(len(arr)-2) for j in range(i+1, len(arr)-1) for m in range(j+1, len(arr)) if arr[i]+arr[j]+arr[m] == k]\n    \ndef find_all_combination_sum_2(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return [i for i in combinations(arr,3) if sum(i) == k]\n    \ndef find_all_combination_sum_3(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return [i for i in combinations(arr,3) if sum(i) == k]\n    \ndef find_all_combination_sum_4(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return [i for i in combinations(arr,3) if sum(i) == k and (i[0] + i[1]) <= i[2] and (i[1] + i[2]) <= i[0] and (i[0] + i[2]) <= i[1]]\n    \ndef find_all_combination_sum_5(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return [i for i in combinations(arr,3) if sum(i) == k and (i[0] + i[1]) <= i[2] and (i[1] + i[2]) <= i[0] and (i[0] + i[2]) <= i[1]]\n    \ndef find_all_combination_sum_6(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_7(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_8(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations_with_replacement(arr, 3))\n    \ndef find_all_combination_sum_9(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_10(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_11(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_12(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.permutations(arr, 3))\n    \ndef find_all_combination_sum_13(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.permutations(arr, 3))\n    \ndef find_all_combination_sum_14(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.permutations(arr, 3))\n    \ndef find_all_combination_sum_15(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.permutations(arr, 3))\n    \ndef find_all_combination_sum_16(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_17(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_18(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_19(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_20(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    '''\n    return list(itertools.combinations(arr, 3))\n    \ndef find_all_combination_sum_21(arr, k):\n    '''\n    Write a Python program to find all combination of three numbers whose sum is equal to k.\n    ''"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even=0\n    for num in arr:\n        if num %2 == 0:\n            sum_even+=num\n    return sum_even\nprint(sum_even_and_even_index([5,8,6,10,13,5,7,8]))"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i**5)\n    return sum\n    "
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    if n == 0:\n        return 0\n    else:\n        sum += n**5\n        sum += ((n-1)**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    def power(n): \n        return n**5\n    \n    return sum(map(power, range(1, n+1, 2)))\n    "
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for x in range(1, n+1):\n        total += pow(x, 5)\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    x = 0\n    for i in range(0, n):\n        if (i**5 % 2) == 0:\n            x += i**5\n    return(x)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # sum = 0\n    \n    # for i in range(1, n+1):\n    #     sum += i ** 5\n    \n    # return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #start writing your code here\n    num = n**5\n    sum = num + n\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    def sum_of_first_n_even_raised_to_n_power(n):\n        '''\n        Returns the sum of the first n even numbers raised to the 5th power\n        '''\n        result = 0\n        for num in range(0,n+1,2):\n            result += num ** 5\n        return result\n        \n    return sum_of_first_n_even_raised_to_n_power(n)\n    "
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x:x[1], test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][-1]\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extracted_list = []\n    for item in test_list:\n        extracted_list.append(item[1])\n    return extracted_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for index in range(len(test_tup1)):\n        new_tup += (test_tup1[index] - test_tup2[index],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # Create a new tuple with a length equal to the length of test_tup1\n    substracted_tup = tuple([None] * len(test_tup1))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if not test_tup1 and not test_tup2:\n        return []\n    return tuple([i - j for i, j in zip(test_tup1, test_tup2)])\n    \nassert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3), \"Should be (-3, -3, -3)\"\nassert substract_elements((1, 2, 3), (2, 2, 2)) == (0, 0, 0), \"Should be (0, 0, 0)\"\nassert substract_elements((1, 2, 3), (0, 0, 0)) == (1, 2, 3), \"Should be (1, 2, 3)\"\nassert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3), \"Should be (-3, -3, -3)\"\nassert substract_elements((1, 2, 3), (1, 1, 1)) == (0, 0, 0), \"Should be (0, 0, 0)\"\nassert substract_elements((1, 2, 3), (0, 0, 0)) == (1, 2, 3), \"Should be (1, 2, 3)\"\nassert substract_elements((1, 2, 3), (4, 5, 6, 7, 8, 9)) == (-3, -3, -3, -3, -3, -3), \"Should be (-3, -3, -3, -3, -3, -3)\"\nassert substract_elements((1, 2, 3, 4), (0, 0, 0, 0)) == (1, 2, 3, 4), \"Should be (1, 2, 3, 4)\"\nassert substract_elements((0, 0, 0), (1, 2, 3, 4)) == (0, 0, 0, 0), \"Should be (0, 0, 0, 0)\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Hint: Tuples can be iterated through using a for loop.\n    # Hint: You may need to create a new tuple using tuple packing.\n    \n    # test_tup1 = (\"Max\", \"Alber\", \"Cord\", \"Dani\", \"Carmen\")\n    # test_tup2 = (\"Alber\", \"Max\", \"Cord\", \"Dani\", \"Carmen\")\n    \n    # # Expected output: (\"Alber\", \"Max\", \"Cord\", \"Dani\", \"Carmen\")\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(tuple(a - b for a, b in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    test_tup1_elements = []\n    test_tup2_elements = []\n    for element in tup1:\n        test_tup1_elements.append(element)\n    for element in tup2:\n        test_tup2_elements.append(element)\n    tup1_elements = test_tup1_elements\n    tup2_elements = test_tup2_elements\n    new_tup1_elements = []\n    new_tup2_elements = []\n    for index in range(len(tup1_elements)):\n        if type(tup1_elements[index]) == int or type(tup1_elements[index]) == float:\n            new_tup1_elements.append(tup1_elements[index] - tup2_elements[index])\n            new_tup2_elements.append(tup2_elements[index] - tup1_elements[index])\n        else:\n            new_tup1_elements.append(tup1_elements[index])\n            new_tup2_elements.append(tup2_elements[index])\n    new_tup1 = tuple(new_tup1_elements)\n    new_tup2 = tuple(new_tup2_elements)\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    def subs(tup1, tup2):\n        for i in range(len(tup1)):\n            tup1[i] = tup1[i] - tup2[i]\n        return tup1\n    return subs(test_tup1, test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(tuple([substract_elements(test_tup1[i],test_tup2[i]) for i in range(len(test_tup1))]))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x: x[0] - x[1], zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(substract_elements(test_tup1, test_tup2))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # base case\n    if (n == 0): \n        return 0\n    # base case\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 4\n    # logic\n    return n * even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coefficient( n,k): \n        if (k==0 or k==n): \n            return 1\n        else: \n            return (binomial_coefficient(n-1,k-1) + binomial_coefficient(n-1,k)) \n    return sum([binomial_coefficient(n,k) for k in range(0,n,2)]) \n    \n    \ndef fibonacci_sum_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n Fibonacci numbers.\n    '''\n    def fib(n): \n        if n<=1: \n            return n \n        else: \n            return (fib(n-1) + fib(n-2)) \n    def fib_square(n):\n        return fib(n)**2\n    def square_of_fib_sum(n):\n        return int(fib_square(n))\n    return square_of_fib_sum(n)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for x in range(1,n+1):\n        if x%2==0:\n            sum += math.factorial(x)/(math.factorial(x/2)*math.factorial(x/2))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coefficients = [] \n    for i in range(n+1):\n        binomial_coefficients.append(binomial(n,i))\n    sum_of_coefficients = 0\n    for x in range(1,len(binomial_coefficients)):\n        sum_of_coefficients += binomial_coefficients[x]\n    return sum_of_coefficients\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # An efficient way to find the sum of binomial coefficient of the even terms \n    # is to only use terms which are multiples of 2.\n    # Use this information to find the sum of the even terms in the binomial coefficient sequence.\n    # Note that the binomial coefficient sequence is an arithmetic progression with common difference k = 2.\n    # The sum of the even terms is therefore the sum of the series (2 + 4 +... + 2k)\n    # This can be found using the sum function of the arithmetic progression series function.\n    return n*(2*n + 1) // 2 \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([math.factorial(n) // (math.factorial(i) * math.factorial(n-i)) for i in range(1, int(n/2+1))])\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(binomial_coefficient(2, i) for i in range(n+1)) \ndef binomial_coefficient(r,n):\n    '''\n    Write a python function that takes in two positive integers and returns the binomial coefficient (n choose r)\n    '''\n    a=math.factorial(n)\n    b=math.factorial(r)\n    c=math.factorial(n-r)\n    return a/b/c\ndef binomial_coefficient_Iter(r,n):\n    '''\n    Write a python function that takes in two positive integers and returns the binomial coefficient (n choose r)\n    '''\n    a=math.factorial(n)\n    b=math.factorial(r)\n    c=math.factorial(n-r)\n    return a//b//c\ndef binomial_coefficient_2(n,r):\n    '''\n    Write a python function that takes in two positive integers and returns the binomial coefficient (n choose r)\n    '''\n    a=math.factorial(n)\n    b=math.factorial(r)\n    c=math.factorial(n-r)\n    return a//b//c\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0 and n!=i:\n            return False\n    if n>=prime:\n        return True\n    return True\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0 and n!=i:\n            return False\n    if n>=prime:\n        return True\n    return True\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0 and n!=i:\n            return False\n    if n>=prime:\n        return True\n    return True\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0 and n!=i:\n            return False\n    if n>=prime:\n        return True\n    return True\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0 and n!=i:\n            return False\n    if n>=prime:\n        return True\n    return True\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0 and n!=i:\n            return False\n    if n>=prime:\n        return True\n    return True\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0 and n!=i:\n            return False\n    if n>=prime:\n        return True\n    return True\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0 and n!=i:\n            return False\n    if n>=prime:\n        return True\n    return True\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0 and n!=i:\n            return False\n    if n>=prime:\n        return True\n    return True\ndef find_n_prime_Func(n,prime):\n    '''\n    Write a python function that takes in two positive integers n and prime and returns the count of primes less than n.\n    '''\n    return len([1 for i in range(1,n) if is_prime_Iter(i,prime)])\ndef is_prime_Iter(n,prime):\n    '''\n    Write a python function tha"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    i=0\n    sum = 0\n    while(i<=n):\n        sum+= math.factorial(n)/(math.factorial(n-i)*math.factorial(i))\n        i+=2\n    return int(sum)\n    \nprint(even_binomial_Coeff_Sum(6))\nprint(even_binomial_Coeff_Sum(10))\nprint(even_binomial_Coeff_Sum(20))\nprint(even_binomial_Coeff_Sum(100))\nprint(even_binomial_Coeff_Sum(200))\nprint(even_binomial_Coeff_Sum(500))\nprint(even_binomial_Coeff_Sum(1000))\nprint(even_binomial_Coeff_Sum(2000))\nprint(even_binomial_Coeff_Sum(5000))\nprint(even_binomial_Coeff_Sum(10000))\nprint(even_binomial_Coeff_Sum(20000))\nprint(even_binomial_Coeff_Sum(50000))\nprint(even_binomial_Coeff_Sum(100000))\nprint(even_binomial_Coeff_Sum(200000))\nprint(even_binomial_Coeff_Sum(500000))\nprint(even_binomial_Coeff_Sum(1000000))\nprint(even_binomial_Coeff_Sum(2000000))\nprint(even_binomial_Coeff_Sum(5000000))\nprint(even_binomial_Coeff_Sum(10000000))\nprint(even_binomial_Coeff_Sum(20000000))\nprint(even_binomial_Coeff_Sum(50000000))\nprint(even_binomial_Coeff_Sum(100000000))\nprint(even_binomial_Coeff_Sum(200000000))\nprint(even_binomial_Coeff_Sum(500000000))\nprint(even_binomial_Coeff_Sum(1000000000))\nprint(even_binomial_Coeff_Sum(2000000000))\nprint(even_binomial_Coeff_Sum(5000000000))\nprint(even_binomial_Coeff_Sum(10000000000))\nprint(even_binomial_Coeff_Sum(20000000000))\nprint(even_binomial_Coeff_Sum(50000000000))\nprint(even_binomial_Coeff_Sum(100000000000))\nprint(even_binomial_Coeff_Sum(2000000000000))\nprint(even_binomial_Coeff_Sum(5000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000))\nprint(even_binomial_Coeff_Sum(500000000000000))\nprint(even_binomial_Coeff_Sum(1000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000))\nprint(even_binomial_Coeff_Sum(5000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000))\nprint(even_binomial_Coeff_Sum(1000000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(500000000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000000))\nprint(even_binomial_Coeff_Sum(5000000000000000000000))\nprint(even_binomial_Coeff_Sum(100000000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000000))\nprint(even_binomial_Coeff_Sum(1000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(500000000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000000))\nprint(even_binomial_Coeff_Sum(5000000000000000000000))\nprint(even_binomial_Coeff_Sum(100000000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000000))\nprint(even_binomial_Coeff_Sum(1000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(500000000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000000))\nprint(even_binomial_Coeff_Sum(5000000000000000000000))\nprint(even_binomial_Coeff_Sum(100000000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000000))\nprint(even_binomial_Coeff_Sum(1000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(500000000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000000))\nprint(even_binomial_Coeff_Sum(5000000000000000000000))\nprint(even_binomial_Coeff_Sum(100000000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000000))\nprint(even_binomial_Coeff_Sum(1000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(500000000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000000))\nprint(even_binomial_Coeff_Sum(5000000000000000000000))\nprint(even_binomial_Coeff_Sum(100000000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000000))\nprint(even_binomial_Coeff_Sum(1000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000))\nprint(even_binomial_Coeff_Sum(50000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coeff_Sum(500000000000000000000))\nprint(even_binomial_Coeff_Sum(10000000000000000000))\nprint(even_binomial_Coeff_Sum(2000000000000000000000))\nprint(even_binomial_Coeff_Sum(5000000000000000000000))\nprint(even_binomial_Coeff_Sum(100000000000000000000))\nprint(even_binomial_Coeff_Sum(200000000000000000000))\nprint(even_binomial_Coef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # A binomial coefficient nk is defined as the product of n and k, namely n! / k!(n-k)! \n    # Where n! is the factorial of n.\n    \n    # Write a recursive function binomial(n,k) that takes in two positive integers n and k and returns the value of nk \n    \n    def binomial(n,k): \n        '''\n        Write a python function that takes in two positive integers n and k and returns the product of n and k.\n        '''\n        if k==0: \n            return 1\n        elif k==1: \n            return n\n        else: \n            return n*binomial(n-1,k-1)\n    # return the sum of all the even binomial coefficients\n    return sum([binomial(n,k) for k in range(0,n,2)])\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert type(n) == int, \"Input must be a positive integer\"\n    assert n >= 1, \"Input must be a positive integer\"\n    def find_sum_even_binomial_coefficient(n):\n        sum_even = 0\n        i = 0\n        while i <= n:\n            j = i\n            k = n-i\n            if k % 2 == 0:\n                x = math.factorial(i) * math.factorial(n-i)\n                x = x/(math.factorial(2)*math.factorial(n-2))\n                sum_even += x\n                break\n            i += 1\n        return sum_even\n    return find_sum_even_binomial_coefficient(n)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    def volume_cylinder(r,h):\n        return (pi*(r**2)*h)\n    return volume_cylinder(r,h)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    def volume_cylinder(r,h):\n        volume = math.pi * r * r * h\n        return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265\n    volume = pi*r*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=3.14*(r**2)*h\n    return volume\n    \nprint(volume_cylinder(3,5))\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume=math.pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume_cylinder = 3.14 * r * r * h\n    return volume_cylinder\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi)*(r**2)*(h)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key,value in dict.items():\n        if value<n:\n            del dict[key]\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # return {key:val for key, val in dict.items() if val >= n}\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return{k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return{key:value for key,value in dict.items() if value>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key in dict:\n        if dict[key]>=n:\n            new_dict[key]=dict[key]\n    return new_dict\n    "
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:val for key, val in dict.items() if val>=n}\n    # new_dict = dict.copy()\n    # for key,val in dict.items():\n    #     if val < n:\n    #         new_dict.pop(key)\n    # return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for item in test_tup:\n        if item == \"e\":\n            break\n        else:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup=tuple(test_tup)\n    if len(test_tup)==0:\n        return 0\n    elif test_tup[0] in test_tup[1:]:\n        return 1+count_first_elements(test_tup[test_tup[0]+1:])\n    else:\n        return 1+count_first_elements(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup_count = []\n    for elem in test_tup:\n        if elem == 1:\n            break\n        else:\n            tup_count.append(elem)\n    return len(tup_count)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for elem in test_tup:\n        if elem == \"e\":\n            count = count + 1\n        else:\n            break\n    print(count)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    x = 1\n    for i in range(len(test_tup)):\n        if test_tup[0] == test_tup[i]:\n            x += 1\n        else:\n            break\n    return x\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    s = set()\n    for i in test_tup:\n        if i in s:\n            return i\n        else:\n            s.add(i)\n    return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def count_first_elements_helper(elem_tup,elems_before):\n        if not elem_tup:\n            return 0\n        else:\n            return count_first_elements_helper(elem_tup[1:],elems_before+1)\n    return count_first_elements_helper(test_tup,0)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = (2, 4, 1, 2, 3, 3, 2, 1, 3, 4)\n    lst_test = [5, 5, 5, 6, 7]\n    test_tup = tuple(lst_test)\n    count = 0\n    for i in test_tup:\n        if i == 5:\n            count += 1\n    print(count)\n    \ndef count_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = (2, 4, 1, 2, 3, 3, 2, 1, 3, 4)\n    lst_test = [5, 5, 5, 6, 7]\n    test_tup = tuple(lst_test)\n    count = 0\n    for i in test_tup:\n        if i == 5:\n            count += 1\n        elif i == 6:\n            count += 1\n        elif i == 7:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    for elm in test_tup:\n        if elm == 1:\n            return num\n        else:\n            num += 1\n    return None\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_decagonal(num):\n        if is_num_decagonal.dec_array.count(num):\n            return True\n        else:\n            return False\n    is_num_decagonal.dec_array = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550,560,570,580,590,600,610,620,630,640,650,660,670,680,690,700,710,720,730,740,750,760,770,780,790,800,810,820,830,840,850,860,870,880,890,900,910,920,930,940,950,960,970,980,990,1000,1010,1020,1030,1040,1050,1060,1070,1080,1090,1100,1110,1120,1130,1140,1150,1160,1170,1180,1190,1200,1210,1220,1230,1240,1250,1260,1270,1280,1290,1300,1310,1320,1330,1340,1350,1360,1370,1380,1390,1400,1410,1420,1430,1440,1450,1460,1470,1480,1490,1500,1510,1520,1530,1540,1550,1560,1570,1580,1590,1600,1610,1620,1630,1640,1650,1660,1670,1680,1690,1700,1710,1720,1730,1740,1750,1760,1770,1780,1790,1800,1810,1820,1830,1840,1850,1860,1870,1880,1890,1900,1910,1920,1930,1940,1950,1960,1970,1980,1990,2000,2010,2020,2030,2040,2050,2060,2070,2080,2090,2100,2110,2120,2130,2140,2150,2160,2170,2180,2190,2200,2210,2220,2230,2240,2250,2260,2270,2280,2290,2300,2310,2320,2330,2340,2350,2360,2370,2380,2390,2400,2410,2420,2430,2440,2450,2460,2470,2480,2490,2500]\n    n = n - 1\n    i = 0\n    while i < n:\n        dec_num = is_decagonal(is_num_decagonal.dec_array[i] + is_num_decagonal.dec_array[i+1])\n        i = i + 1\n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(3*n - 1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+9)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: return 0\n    return int(n * (n+1) / 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1: \n        return 10\n    return n*9 + (10-n)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = int((1 + math.sqrt(24 * n + 1)) / 6)\n    return int(n + x * (x + 1) / 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0: \n        return False \n    else: \n        return n == sum([(10 - i) * 9 ** i for i in range(1, 11)])\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+9) == n*(n+10) - 1\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n - 1 # Because the index starts with 1 and not 0\n    return int(n * (n+1) / 2)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return (found, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return_list = [False, -1]\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return_list[0] = True\n            return_list[1] = i\n            return return_list\n    return return_list\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index_pos = 0\n    found = False\n    for index_pos in range(len(dlist)):\n        if dlist[index_pos] == item:\n            found = True\n            break\n    return (found, index_pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    return (found, pos)\n    \ndef sequential_search_alt(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n    \ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    first = 0\n    last = len(dlist) - 1\n    while first <= last and not found:\n        midpoint = (first + last) // 2\n        if dlist[midpoint] == item:\n            found = True\n            break\n        elif dlist[midpoint] > item:\n            last = midpoint - 1\n        else:\n            first = midpoint + 1\n    return (found, midpoint)\n    \ndef binary_search_alt(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    first = 0\n    last = len(dlist) - 1\n    while first <= last and not found:\n        midpoint = (first + last) // 2\n        if dlist[midpoint] == item:\n            found = True\n            break\n        elif dlist[midpoint] < item:\n            first = midpoint + 1\n        else:\n            last = midpoint - 1\n    if first > last and not found:\n        return (False, -1)\n    return (found, midpoint)\n    \ndef binary_search_recursive(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, -1)\n    else:\n        midpoint = len(dlist) // 2\n        if dlist[midpoint] == item:\n            return (True, midpoint)\n        else:\n            if dlist[midpoint] < item:\n                return binary_search_recursive(dlist[midpoint+1:], item)\n            else:\n                return binary_search_recursive(dlist[:midpoint], item)\n                \ndef binary_search_recursive_alt(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, -1)\n    else:\n        midpoint = len(dlist) // 2\n        if dlist[midpoint] == item:\n            return (True, midpoint)\n        else:\n            if dlist[midpoint] < item:\n                return binary_search_recursive_alt(dlist[midpoint+1:], item)\n            else:\n                return binary_search_recursive_alt(dlist[:midpoint], item)\n                \ndef insertion_sort(dlist):\n    '''\n    Write a function that takes in an array and returns a sorted array using the insertion sort algorithm.\n    '''\n    for i in range(1, len(dlist)):\n        j = i\n        while j > 0 and dlist[j] < dlist[j-1]:\n            temp = dlist[j]\n            dlist[j] = dlist[j-1]\n            dlist[j-1] = temp\n            j = j - 1\n    return dlist\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (False, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #initiate a counter to track the number of iterations\n    counter = 0\n    for i in range(0, len(dlist)):\n        counter += 1\n        if item == dlist[i]:\n            return True, i\n    else:\n        return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    def search(alist, item):\n        # return tuple: (boolean, index)\n        for i in range(0, len(alist)):\n            if alist[i] == item:\n                return (True, i)\n        return (False, -1)\n    # start the search\n    return search(dlist, item)\n    "
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index = index + 1\n    return found, index\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #uniq = []\n    #for x in test_list:\n        #if x in uniq:\n            #return False\n        #uniq.append(x)\n    #return True\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #create empty set\n    unique_set = set()\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Use if statement to check if all the elements are unique or not.\n    # If all the elements are unique, return True, else return False.\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list=[]\n    for i in test_list:\n        if i not in temp_list:\n            temp_list.append(i)\n        else:\n            return False\n    return True\nprint(all_unique([1,2,3,3,4,5]))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == len(nums2):\n        return [nums1[i] - nums2[i] for i in range(len(nums1))]\n    else:\n        print(\"error,length of two lists are not equal\")\n        return\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    n1=len(nums1)\n    n2=len(nums2)\n    n=min(n1,n2)\n    nums1=nums1[:n]\n    nums2=nums2[:n]\n    \n    sub=[]\n    for i in range(n):\n        sub.append(nums1[i]-nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums3=[]\n    for i in range(len(nums1)):\n        nums3.append(nums1[i]-nums2[i])\n    return nums3\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y: x-y, nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in nums1:\n        if i in nums2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #Convert lists to sets\n    s1 = set(nums1)\n    s2 = set(nums2)\n    return list(s1 - s2)\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)<len(nums2):\n        nums1,nums2=nums2,nums1\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len(str(n)) == len(set(str(n)))\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Create a list of numbers from 0-9\n    nums = [0,1,2,3,4,5,6,7,8,9]\n    # n is a string, so we will need to convert it to integer before we can iterate through it\n    n = int(n)\n    # A list to store the frequencies of each digit in n\n    freq = [0] * 10\n    # Loop through the string n\n    while n > 0:\n        # Calculate the frequency of each digit in n\n        freq[n % 10] += 1\n        # n = n // 10\n        n //= 10\n    # Check whether the frequency of each digit in n is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict={}\n    for i in str(n):\n        if(i in dict):\n            if(dict[i]<=int(i)):\n                return \"False\"\n            else:\n                return \"True\"\n        else:\n            dict[i]=int(i)\n    return \"False\""
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n) \n    return sorted(list(s)) == list(s) \n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0]*10\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) <= 1:\n        return True\n    else:\n        # First we split the integer into a list of digits\n        digits = [int(i) for i in str(n)]\n        # For each digit we check if the frequency of that digit is less than or equal to the digit itself\n        for i in digits:\n            if digits.count(i) > i:\n                return False\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0]*10\n    while n!= 0:\n        count[n % 10] += 1\n        n //= 10\n    return all(i <= count[i] for i in range(10))\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(0, n): \n        \n        if n % 10 == 0: \n            print(\"Not a Valid Number\")\n            return False\n        \n        elif (n % 10 > n // 10): \n            print(\"Not a Valid Number\")\n            return False\n        \n    print(\"Valid Number\") \n    return True\n  "
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # the digit of an integer can range from 0-9, we'll go through all of them\n    for i in range(0, 10): \n        # check if the frequency of each digit is less than or equal to the digit itself\n        if n[i] > i: \n            return False \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    dict = {}\n    \n    if n < 0:\n        return \"the number cannot be negative\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    else:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return not(any(i!= element for i in list))\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    equal = False\n    for elem in list:\n        if elem == element:\n            equal = True\n        else:\n            equal = False\n    return equal\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return True\n    return all(list[0] == element for element in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if element is in list\n    # Check if all items in list are the same\n    return element in list\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\nprint(check_element([1,1,1,1,1],1))\nprint(check_element([1,2,3,4,5],6))\nprint(check_element([5,5,5,5,5],5))\ndef search(list,element):\n    '''\n    Write a function that takes in a list and element and searches for the first element in the list that is equal to the given element.\n    '''\n    for i in list:\n        if i==element:\n            return True\n    return False\nprint(search([1,2,3,4,5],5))\nprint(search([1,2,3,4,5],6))\nprint(search([5,5,5,5,5],5))\ndef find_first(list,element):\n    '''\n    Write a function that takes in a list and element and searches for the first element in the list that is equal to the given element.\n    '''\n    for i in list:\n        if i==element:\n            return i\n    return None\nprint(find_first([1,2,3,4,5],5))\nprint(find_first([1,2,3,4,5],6))\nprint(find_first([5,5,5,5,5],5))\ndef count_elements(list,element):\n    '''\n    Write a function that takes in a list and element and returns the number of times that element appears in the list.\n    '''\n    counter = 0\n    for i in list:\n        if i==element:\n            counter+=1\n    return counter\nprint(count_elements([1,1,1,1,1,1],1))\nprint(count_elements([1,2,3,4,5],5))\nprint(count_elements([5,5,5,5,5],5))\ndef sum_elements(list):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements in the list.\n    '''\n    sum=0\n    for i in list:\n        sum+=i\n    return sum\nprint(sum_elements([1,2,3,4,5]))\nprint(sum_elements([1,2,3,4,5,6]))\nprint(sum_elements([1,2,3,4,5,6,7,8,9]))\ndef largest_element(list):\n    '''\n    Write a function that takes in a list and returns the largest element in the list.\n    '''\n    largest=list[0]\n    for i in list:\n        if i>largest:\n            largest=i\n    return largest\nprint(largest_element([1,2,3,4,5]))\nprint(largest_element([1,2,3,4,5,6]))\nprint(largest_element([1,2,3,4,5,6,7,8,9]))\ndef length_list(list):\n    '''\n    Write a function that takes in a list and returns the length of the list.\n    '''\n    return len(list)\nprint(length_list([1,2,3,4,5]))\nprint(length_list([1,2,3,4,5,6]))\nprint(length_list([1,2,3,4,5,6,7,8,9]))\ndef max_element(list):\n    '''\n    Write a function that takes in a list and returns the largest element in the list.\n    '''\n    largest=list[0]\n    for i in list:\n        if i>largest:\n            largest=i\n    return largest\nprint(max_element([1,2,3,4,5]))\nprint(max_element([1,2,3,4,5,6]))\nprint(max_element([1,2,3,4,5,6,7,8,9]))\ndef min_element(list):\n    '''\n    Write a function that takes in a list and returns the smallest element in the list.\n    '''\n    smallest=list[0]\n    for i in list:\n        if i<smallest:\n            smallest=i\n    return smallest\nprint(min_element([1,2,3,4,5]))\nprint(min_element([1,2,3,4,5,6]))\nprint(min_element([1,2,3,4,5,6,7,8,9]))\ndef sum_list(list):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements in the list.\n    '''\n    sum=0\n    for i in list:\n        sum+=i\n    return sum\nprint(sum_list([1,2,3,4,5]))\nprint(sum_list([1,2,3,4,5,6]))\nprint(sum_list([1,2,3,4,5,6,7,8,9]))\ndef mean_list(list):\n    '''\n    Write a function that takes in a list and returns the mean of all the elements in the list.\n    '''\n    return sum_list(list)/length_list(list)\nprint(mean_list([1,2,3,4,5]))\nprint(mean_list([1,2,3,4,5,6]))\nprint(mean_list([1,2,3,4,5,6,7,8,9]))\ndef median_list(list):\n    '''\n    Write a function that takes in a list and returns the median of all the elements in the list.\n    '''\n    list.sort()\n    return list[int((length_list(list)/2))]\nprint(median_list([1,2,3,4,5]))\nprint(median_list([1,2,3,4,5,6]))\nprint(median_list([1,2,3,4,5,6,7,8,9]))\ndef average_list(list):\n    '''\n    Write a function that takes in a list and returns the average of all the elements in the list.\n    '''\n    return sum_list(list)/length_list(list)\nprint(average_list([1,2,3,4,5]))\nprint(average_list([1,2,3,4,5,6]))\nprint(average_list([1,2,3,4,5,6,7,8,9]))\ndef mode_list(list):\n    '''\n    Write a function that takes in a list and returns the mode of all the elements in the list.\n    '''\n    list.sort()\n    counter=1\n    last_item=list[0]\n    for i in list:\n        if i==last_item:\n            counter+=1\n        elif i!=last_item:\n            if counter>1:\n                return last_item\n            else:\n                counter=1\n                last_item=i\n    return last_item\nprint(mode_list([1,2,3,4,5]))\nprint(mode_list([1,2,3,4,5,6]))\nprint(mode_list([1,2,3,4,5,6,7,8,9]))\ndef factorial(number):\n    '''\n    Write a function that takes in a number and returns the factorial of that number.\n    '''\n    if number==0:\n        return 1\n    return number*factorial(number-1)\nprint(factorial(5))\nprint(factorial(4))\nprint(factorial(3))\ndef fibonacci(number):\n    '''\n    Write a function that takes in a number and returns the Fibonacci of that number.\n    '''\n    if number==0:\n        return 0\n    elif number==1:\n        return 1\n    return fibonacci(number-2)+fibonacci(number-1)\nprint(fibonacci(5))\nprint(fibonacci(4))\nprint(fibonacci(3))\ndef prime(number):\n    '''\n    Write a function that takes in a number and returns whether it is a prime number or not.\n    '''\n    if number==0 or number==1:\n        return False\n    for i in range"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(re.findall(r'a.{2,3}b',text))>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text:\n        if text.count('a') == 1:\n            if text.count('b') in [2,3]:\n                return True\n        if text.count('a') == 2:\n            if text.count('b') == 2:\n                return True\n        if text.count('a') == 3:\n            if text.count('b') == 3:\n                return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a..b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ab{2,3}a', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2}',text):\n        flag=True\n    if re.search(r'ab{3}',text):\n        flag=True\n    return flag\n    \n    \n    \ndef text_match_two_three_and_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters, followed by zero or more 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \n    \ndef text_match_three_or_more_and_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or more 'b' characters, followed by zero or more 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{3,}c',text):\n        flag=True\n    return flag\n    \n    \n    \ndef text_match_three_or_more_and_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or more 'b' characters, followed by one 'c' character.\n    '''\n    flag=False\n    if re.search(r'ab{3,}c',text):\n        flag=True\n    return flag\n    \n    \ndef text_match_three_or_more_and_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or more 'b' characters, followed by two 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{3,}c',text):\n        flag=True\n    return flag\n    \n    \ndef text_match_three_or_more_and_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or more 'b' characters, followed by three 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{3,}c',text):\n        flag=True\n    return flag\n    \n    \ndef text_match_four_or_more(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters.\n    '''\n    flag=False\n    if re.search(r'ab{4,}',text):\n        flag=True\n    return flag\n    \ndef text_match_four_or_more_and_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters, followed by zero 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{4,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_four_or_more_and_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters, followed by one 'c' character.\n    '''\n    flag=False\n    if re.search(r'ab{4,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_four_or_more_and_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters, followed by two 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{4,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_four_or_more_and_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters, followed by three 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{4,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by zero 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by one 'c' character.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by two 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by three 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by four 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by five 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by six 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by seven 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by eight 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by nine 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by ten 'c' characters.\n    '''\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '[ab]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.match(\"ab{2,3}\", text)\n    return result!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    b = re.findall(r'[a][b]{2}|[a][b]{3}',text)\n    return 'The string is a match' if len(b) else 'The string is not a match'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a.{2}b', text):\n        return True\n    elif re.search(r'a.{3}b', text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ab{2}|ab{3}', text):\n        return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        max_sum += sum(a)\n    max_sum = max_sum % 1000000007\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = 1\n    s = a[0]\n    for i in range(1, n):\n        if s + a[i] >= a[i]:\n            s += a[i]\n        else:\n            s = a[i]\n            l += 1\n            if l == k:\n                return s\n    return s\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if(k == 0): \n        return 0\n    if(n == 0): \n        return 0\n    if(k < 0 or n < 0): \n        return -1\n    if(n == 1): \n        return a[0]\n    max_sum = -1\n    for i in range(0, n+1): \n        current_sum = sum(a[0:i]) \n        for j in range(1, k+1): \n            current_sum = current_sum + sum(a[i:i+j*n]) \n            if(current_sum > max_sum): \n                max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max_sub_array(a, n)\n    else:\n        max_sum = 0\n        for i in range(0, n):\n            total = 0\n            for j in range(0, k):\n                if i+j < n:\n                    total += a[i+j]\n                else:\n                    break\n            max_sum = max(total, max_sum)\n        return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0: \n        return -1\n    if n == 0: \n        return 0\n    if k == 1: \n        return max(a)\n    if k == n: \n        return sum(a)\n    current_sum = 0\n    max_sum = -1\n    for i in range(n): \n        current_sum += a[i] \n        if i >= k and i % k == 0: \n            current_sum = 0\n        if current_sum > max_sum: \n            max_sum = current_sum\n    return max_sum \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(0, n + 1): \n        current_sum = 0\n        for j in range(i, n * k + 1): \n            current_sum += a[j % n] \n            if (current_sum > max_sum): \n                max_sum = current_sum\n    return max_sum\na = [1,2,3,4,5,6,7] \nk = 3\nprint(\"Maximum contiguous sum is \", max_sub_array_sum_repeated(a, len(a), k)) \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a)\n    m = max(a)\n    max_sum = 0\n    for i in range(0, n):\n        summ = 0\n        for j in range(i, i+k*n):\n            if j < n:\n                summ += a[j%n]\n            else:\n                break\n        max_sum = max(max_sum, summ)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = 0\n    for i in range(0, n): \n        for j in range(i, n): \n            total = 0\n            for l in range(i, j + 1): \n                total += a[l] \n            result = max(result, total) \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    curr_sum = 0\n    for i in range(n): \n        curr_sum = (curr_sum + a[i])%k\n        sum = max(sum, curr_sum)\n        if curr_sum == 0: \n            sum = sum + a[i]\n            break\n    return sum\n    "
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = sum(a)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j + k <= n:\n                curr_sum = sum(a[i:j + 1])\n                max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 1:\n        return \"Not possible\"\n    sum_num = (n*(n+1))/2\n    sum_sqr = ((n*(n+1)*(2*n+1))/6)\n    return sum_sqr-sum_num\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            even_numbers.append(i)\n        i += 1\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    num = n\n    sum_even_squares = 0\n    while num>0:\n        sum_even_squares += (num*num)\n        num -= 2\n    return sum_even_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # implement this function\n    return (((n+1)*n)//2)**2\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x*x for x in range(1,n+1) if x % 2 == 0])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #sum=0\n    #for i in range(n+1):\n    #    if(i%2==0):\n    #        sum+=i**2\n    #return sum\n    return sum([i**2 for i in range(n) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([num**2 for num in range(2, n+1, 2)])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return int((n ** 2 + n) / 2)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return len(max(list1,key=len))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = []\n    for item in list1:\n        if len(item) > len(max_len):\n            max_len = item\n    return max_len\n    \n    \nprint(max_length([[1, 2, 3], [4, 5], [], [1, 2, 3, 4, 5, 6]]))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in list1:\n        if max < len(i):\n            max = len(i)\n            result = i\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max=0\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    for i in list1:\n        if len(i)==max:\n            return i\n    \nprint(max_length([[1,2,3,4],[3,4,5,6,7],[8,9,10,11,12]]))\nprint(max_length([[1,2,3,4],[3,4,5,6],[8,9,10,11,12],[5,6,7,8,9]]))\nprint(max_length([[1,2,3,4],[3,4,5,6,7],[8,9,10,11,12]]))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max=0\n    for l in list1:\n        if max<len(l):\n            max=len(l)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len_list=[]\n    for sublist in list1:\n        if len(max_len_list) < len(sublist):\n            max_len_list = sublist\n    return max_len_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for item in list1:\n        if len(item) > max:\n            max = len(item)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n            long_list = i\n    return long_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list=[]\n    length_list=[]\n    for sublist in list1:\n        length_list.append(len(sublist))\n    for i in range(len(length_list)):\n        max_length_list.append(list1[i][length_list[i]-1])\n    return max_length_list\nlist1=[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b']]\nprint(max_length(list1))"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    total_ways = 0\n    if n == 0 or n == 1:\n        return n\n    if k == 1:\n        total_ways = n\n    else:\n        for i in range(1, n+1):\n            total_ways += count_no_of_ways(n-i, k-1)\n    return total_ways\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(n, k):\n        if n == 0: \n            return 0\n        elif n == 1: \n            return 1\n        elif n == 2: \n            if k >= 2:\n                return k\n            elif k == 1:\n                return k + 1\n        elif k == 1:\n            return n\n        elif k == 2:\n            return n + 1\n        else:\n            return count_ways(n - 2, k - 2) + count_ways(n - 1, k - 1) + count_ways(n - 1, k)\n    return count_ways(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_rec(n, k): \n      \n        if n == 0: \n            return 0\n        elif n == 1: \n            return k \n        elif k == 1: \n            return n \n        return count_rec(n - 1, k - 1) + count_rec(n - 2, k - 1) \n    return count_rec(n, k) "
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    if k == 1:\n        return n\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if k == 1:\n        return 1\n    if k == 2:\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return 3\n    elif k == 3:\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        else:\n            return 4\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) + count_no_of_ways(n - 3, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2: \n        return n \n    if k <= 1: \n        return 0\n    if k == 2: \n        return n - 1 \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n < 2 or k < 2): \n        return 0\n    return count_no_of_ways_util(n, k, {}) \ndef count_no_of_ways_util(n, k, memo): \n    if (n < 0): \n        return 0\n    if (k < 0): \n        return 0\n    if (n == 0): \n        return 1\n    if (n == 1): \n        return k\n    if (n == 2): \n        if (k == 2): \n            return 3\n        return k*(k - 1)\n    if (memo[n][k]!= -1): \n        return memo[n][k] \n    result = (count_no_of_ways_util(n-1, k-1, memo) + count_no_of_ways_util(n-2, k-1, memo)) \n    memo[n][k] = result \n    return result "
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n < 2: \n        return 0\n    \n    # Storing the results of subproblems \n    same = diff = 0\n    \n    for i in range(1, n + 1): \n        # if current post has same color as the post on its left, \n        # increment same, else increment diff \n        same, diff = diff, same + diff\n        \n    return same + diff \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0: \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_no_of_ways_rec(n, k): \n        if (n == 0 or k == 0): \n            return 0; \n        elif (n == 1): \n            return k; \n        elif (k == 1): \n            return n; \n        return (count_no_of_ways_rec(n - 1, k) + count_no_of_ways_rec(n - 2, k - 1)); \n    return count_no_of_ways_rec(n, k); \n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    div = n // m\n    print(div)\n    return div\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        n = int(n)\n        m = int(m)\n        if n > m :\n            print('The quotient of %d and %d is: %d' %(n,m,n//m))\n        else:\n            print('The quotient of %d and %d is: %d' %(n,m,m//n))\n    except:\n        print('Please enter a valid integer')\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    while m>0:\n        n,m=m,n%m\n    return n\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        quotient=n//m\n        return quotient\n    elif m>n:\n        quotient=m//n\n        return quotient\n    else:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m:\n        n,m = m,n\n    if m%n == 0:\n        return m//n\n    else:\n        for i in range(m,0,-1):\n            if n%i == 0 and m%i == 0:\n                return i\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # print(divmod(n,m))\n    return divmod(n,m)[0]\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Use the // operator to perform integer division on integers.\n    # The // operator always returns an integer result (flooring the quotient).\n    \n    print(n // m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # get quotient of n/m\n    quotient = n // m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = 0\n    def hypotenuse(a,b):\n        thirdside = math.sqrt(a**2 + b**2)\n        return thirdside\n    x = hypotenuse(w,h)\n    return x\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return None\n    elif w!= h:\n        if w < h:\n            return w\n        if w > h:\n            return h\n        else:\n            return w\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (math.sqrt(w**2 + h**2) - w)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        print(\"The third side of the triangle is\",w,\". There are no other sides.\")\n    else:\n        print(\"The third side of the triangle is\",math.sqrt(w*w+h*h),\". There are other two sides.\")\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2) + (h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = (w**2 + h**2)**(1/2)\n    return thirdside\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2+w**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        a = int(w)\n        b = int(h)\n        c = math.sqrt((a ** 2) + (b ** 2))\n    except:\n        print('Invalid Input')\n    else:\n        print(c)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=listval[0]\n    for x in listval:\n        if x>maxval:\n            maxval=x\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxi=listval[0]\n    for x in listval:\n        if x>maxi:\n            maxi=x\n    return maxi\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for elem in listval:\n        if elem > max_val:\n            max_val = elem\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        maxval = listval[0]\n        for each in listval:\n            if each > maxval:\n                maxval=each\n        return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    if len(listval) > 1:\n        i = 1\n        while i < len(listval):\n            if max(listval[:i]) < max(listval[i:]):\n                listval[:i], listval[i:] = listval[i:], listval[:i]\n            i += 1\n        return listval[0]\n    else:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=listval[0]\n    for val in listval:\n        if val>maxval:\n            maxval=val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #\u00a0Your\u00a0code\u00a0goes\u00a0here:\n    if not listval:\n        return 0\n    l = len(listval)\n    lst = []\n    for i in range(l):\n        lst.append(listval[i])\n    max_val = lst[0]\n    for i in range(1, l):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(0, len(listval)):\n        if max < listval[i]:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    x = []\n    sum = 0\n    for i in range(1,number):\n        if(number%i == 0):\n            x.append(i)\n    for i in x:\n        sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = [1]\n    for x in range(2,number):\n        if number % x == 0:\n            div.append(x)\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(number / 2) + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, number):\n        if (number % i) == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_ = 0\n    for i in range(1,number+1):\n        if number%i==0:\n            sum_ += i\n    return sum_\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv += 1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    else:\n        return merge_sort(arr,0,len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\ndef get_Inv_Count_Opt(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    start, end = 0, 0\n    for i in range(len(arr)):\n        end = i + 1\n        while end < len(arr) and arr[i] > arr[end]:\n            end += 1\n            inversions += end - start\n        start = end\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #arr = [2,4,1,3,5]\n    #arr = [2, 4, 1, 3, 5]\n    #arr = [2, 3, 4, 1, 5]\n    def swap(i, j, arr):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n    def merge_count_inversions(arr, start, mid, end, inv_count):\n        left = start\n        right = mid + 1\n        temp_arr = [None]*(len(arr))\n        k = 0\n        i = left\n        while left <= mid and right <= end:\n            if arr[left] <= arr[right]:\n                temp_arr[k] = arr[left]\n                k += 1\n                left += 1\n            else:\n                temp_arr[k] = arr[right]\n                k += 1\n                right += 1\n                inv_count += (mid-left + 1)\n        while left <= mid:\n            temp_arr[k] = arr[left]\n            k += 1\n            left += 1\n        while right <= end:\n            temp_arr[k] = arr[right]\n            k += 1\n            right += 1\n        for index in range(start, end+1):\n            arr[index] = temp_arr[index-start]\n        return inv_count\n    def count_inversions(arr, start, end, inv_count):\n        if start >= end:\n            return inv_count\n        mid = int((start + end)/2)\n        inv_count = count_inversions(arr, start, mid, inv_count)\n        inv_count = count_inversions(arr, mid+1, end, inv_count)\n        inv_count = merge_count_inversions(arr, start, mid, end, inv_count)\n        return inv_count\n    return count_inversions(arr, 0, len(arr)-1, 0)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergeSort(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    return mergeSort(arr, 0, n-1) \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_count(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_length = len(arr)\n    if arr_length < 2:\n        return 0\n    split_index = arr_length // 2\n    return merge_sort(arr[0:split_index], arr[split_index:])\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = sorted(arr)\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]>arr[j]):\n                count = count + 1\n    return count\n    \n    \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_count(arr, [], 0, len(arr) - 1)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for i in list1:\n        if type(i) is list:\n            flattened_list += flatten_list(i)\n        else:\n            flattened_list.append(i)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for element in list1:\n        if type(element) is list:\n            flat_list += flatten_list(element)\n        else:\n            flat_list.append(element)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten_list = []\n    for i in list1:\n        if type(i) == type([]):\n            flatten_list.extend(i)\n        else:\n            flatten_list.append(i)\n    return flatten_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n    for i in list1:\n        if type(i) == list:\n            final_list += flatten_list(i)\n        else:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten_list = []\n    for item in list1:\n        if type(item) == list:\n            flatten_list += flatten_list(item)\n        else:\n            flatten_list.append(item)\n    return flatten_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if type(item) == list:\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat = []\n    for sublist in list1:\n        for element in sublist:\n            flat.append(element)\n    return flat\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate1(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate4(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate5(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate6(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate7(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate8(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate9(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate10(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate11(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate12(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate13(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate14(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata:\n        listtuple.append(i)\n    for i in listtuple:\n        dictt[i[0]]=i[1]\n    for i in sorted(dictt.keys()):\n        new_list.append(dictt[i])\n    return max(new_list)\ndef max_aggregate15(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    listtuple=[]\n    new_list=[]\n    dictt={}\n    for i in stdata"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #d = defaultdict(list)\n    #for x,y in stdata:\n    #    d[x].append(y)\n    #return max(sum(stdata, tuple))\n    return max(sum(stdata, tuple))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    print(stdata)\n    tup_list = []\n    for tup in stdata:\n        tup_list.append(tup[0])\n        tup_list.append(tup[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = defaultdict(list)\n    l = []\n    for x, y in stdata:\n        stdata[x].append(y)\n    for i in stdata:\n        l.append(max(stdata[i]))\n    return l\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for i in stdata:\n        data[i[0]].append(i[1])\n    for i in data:\n        data[i] = max(data[i])\n    return data\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(list)\n    for st in stdata:\n        for x in st:\n            max_agg[x].append(st.count(x))\n    max_agg = max_agg.items()\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    print(\"Given list of tuples:\",stdata)\n    lst=list(stdata)\n    print(\"After converting to a list:\",lst)\n    lst.sort()\n    print(\"After sorting:\",lst)\n    print(\"Final list of tuples:\")\n    count=0\n    for i in lst:\n        if count==0:\n            t=tuple(i)\n            count=count+1\n        else:\n            t=t+tuple(i)\n    print(t)\n    t=list(t)\n    t.sort()\n    print(\"Maximum aggregate tuple:\",t[-1])\n    return t[-1]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dict_of_tuple=defaultdict(list)\n    for item in stdata:\n        dict_of_tuple[item[0]].append(item[1])\n    return dict_of_tuple\n    \n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = max(stdata, key=lambda x: x[1])[1]\n    return aggregate\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    aggregate = min(stdata, key=lambda x: x[1])[1]\n    return aggregate\ndef count_aggregate(stdata):\n    '''\n    Write a function to count the number of occurrences of each aggregate.\n    '''\n    d = defaultdict(int)\n    for st in stdata:\n        d[st[1]] += 1\n    return d\ndef sum_aggregate(stdata):\n    '''\n    Write a function to calculate the sum of the aggregate values.\n    '''\n    aggregate = sum([a[1] for a in stdata])\n    return aggregate\ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average of the aggregate values.\n    '''\n    aggregate = sum([a[1] for a in stdata])\n    total_len = len(stdata)\n    avg = aggregate/total_len\n    return avg\ndef print_report(d):\n    '''\n    Write a function to print a report from the dictionary.\n    '''\n    for key, value in d.items():\n        print(key + \" : \" + str(value))\ndef main():\n    # your code goes here\n    data = [\n        ('student', 1),\n        ('student', 2),\n        ('student', 3),\n        ('teacher', 1),\n        ('teacher', 2),\n        ('assistant', 2),\n        ('assistant', 3),\n        ('assistant', 4),\n        ('assistant', 5)\n    ]\n    print(\"Maximum aggregate value : \" + str(max_aggregate(data)))\n    print(\"Minimum aggregate value : \" + str(min_aggregate(data)))\n    print(\"Number of occurrences for each aggregate value : \" + str(count_aggregate(data)))\n    print(\"Sum of aggregate values : \" + str(sum_aggregate(data)))\n    print(\"Average of aggregate values : \" + str(avg_aggregate(data)))\n    print_report(count_aggregate(data))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort(key=lambda x: x[0])\n    max_aggregate = 0\n    # initializing all possible combinations\n    total_cnt = 1\n    for i in range(len(stdata)):\n        total_cnt *= stdata[i][1]\n    # iterating the list to find the maximum\n    for i in range(len(stdata)):\n        max_aggregate += (stdata[i][1]/total_cnt)*stdata[i][2]\n        max_aggregate = round(max_aggregate, 2)\n    return max_aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2) + count_binary_seq(n-3)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        if bin(i)[2:].zfill(2*n).count('1') == bin(i)[2:].zfill(2*n)[::-1].count('1'):\n            count += 1\n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 4\n    else:\n        return 2**(n-1)*count_binary_seq(n-1)+(2**(n-1))*count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return ((2 ** (2 * n)) - 1) \n  "
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seq(n):\n        seq_count = 0\n        for i in range(1, (2**(2*n))):\n            if ((i & (2**n - 1)) + (i >> (2*n)) == (i >> n)):\n                seq_count += 1\n        return seq_count\n    return count_seq(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**(2*n)):\n        if(i>>n)==(i&((2**n)-1))>>n:\n            count += 1\n    return count\n    \nif __name__ == '__main__':\n    n = 2\n    print(count_binary_seq(n))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Base case: n is 1. We can have 2 sequences:\n    # 00, 11\n    if n == 1:\n        return 2\n    \n    # recursion base case: n is 0. We have 1 sequence: 0\n    if n == 0:\n        return 1\n    \n    # if n is even, the number of sequences reduces by 1. So, we have n/2 sequences.\n    # For every new sequence created, we have two new sequences to create, so the number of new sequences is 2^(n/2)\n    if n % 2 == 0:\n        return (2 ** (n/2)) * count_binary_seq(n/2)\n    \n    # if n is odd, we have one sequence with sum of first n bits same as sum of last n bits.\n    # For every new sequence created, we have one new sequence to create, so the number of new sequences is 2^(n/2)\n    else:\n        return (2 ** ((n-1)/2)) * count_binary_seq((n-1)/2)\n    \ndef huffman_encoding(data):\n    '''\n    Write a function that takes a variable length ASCII encoded string and returns a dict representing the huffman tree.\n    '''\n    if len(data) == 1:\n        return {data: ''}\n        \n    if data == '':\n        return ''\n        \n    counts = get_frequency_distribution(data)\n    \n    # merge frequencies and build priority queue\n    queue = []\n    for k, v in counts.items():\n        node = Node(k, v)\n        heapq.heappush(queue, node)\n    \n    # construct huffman tree\n    while len(queue) > 1:\n        smallest_two_nodes = heapq.heappop(queue), heapq.heappop(queue)\n        smallest_two_nodes[0].merge_node(smallest_two_nodes[1])\n        heapq.heappush(queue, smallest_two_nodes[0])\n    \n    # encode data\n    huffman_tree = queue[0]\n    encoded_data = {}\n    \n    def encode_helper(node, current_bit = ''):\n        if node.is_leaf():\n            encoded_data[node.char] = current_bit\n        else:\n            encode_helper(node.left_child, current_bit + '0')\n            encode_helper(node.right_child, current_bit + '1')\n        return\n    \n    encode_helper(huffman_tree)\n    \n    return encoded_data\n    \ndef huffman_decoding(data, tree):\n    '''\n    Write a function to decode a variable length ASCII encoded string.\n    '''\n    if tree == '':\n        return ''\n    \n    decoded_string = ''\n    curr = tree\n    for bit in data:\n        if bit == '0':\n            curr = curr.left_child\n        else:\n            curr = curr.right_child\n            \n        if curr.is_leaf():\n            decoded_string += curr.char\n            curr = tree\n    return decoded_string\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # create a list of all binary sequences of length 2n\n    bin_sequences = []\n    for i in range(2**(2*n)):\n        bin_seq = bin(i)\n        bin_seq = bin_seq.replace('0b','')\n        bin_seq = bin_seq.zfill(2*n)\n        bin_sequences.append(bin_seq)\n    \n    print(bin_sequences)\n    \n    # iterate through all sequences and get their first and last bits\n    for i, binary_seq in enumerate(bin_sequences):\n        first_bits = binary_seq[0:n]\n        last_bits = binary_seq[n:]\n        \n        # if sum of first bits == sum of last bits, append the sequence to the result list\n        if sum(int(bit) for bit in first_bits) == sum(int(bit) for bit in last_bits):\n            print(binary_seq)\n            \n    return bin_sequences\n    \n    \ndef count_binary_seq2(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # create a list of all binary sequences of length 2n\n    bin_sequences = []\n    for i in range(2**(2*n)):\n        bin_seq = bin(i)\n        bin_seq = bin_seq.replace('0b','')\n        bin_seq = bin_seq.zfill(2*n)\n        bin_sequences.append(bin_seq)\n    \n    print(bin_sequences)\n    \n    # iterate through all sequences and get their first and last bits\n    for i, binary_seq in enumerate(bin_sequences):\n        first_bits = binary_seq[0:n]\n        last_bits = binary_seq[n:]\n        \n        # if sum of first bits == sum of last bits, append the sequence to the result list\n        if sum(int(bit) for bit in first_bits) == sum(int(bit) for bit in last_bits):\n            print(binary_seq)\n            \n    return bin_sequences\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[1,1], [0,0]]\n    t = 2\n    while t <= 2*n:\n        dp.append([0,0])\n        for j in range(t):\n            dp[t][0] += dp[j][0] + dp[j][1]\n            dp[t][1] += dp[j][0]\n        t += 1\n    return dp[2*n][0]\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return max(map(dict_depth, d.values())) + 1\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for v in d.values():\n            depth = max(depth, dict_depth(v))\n    return depth+1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def _dict_depth(d, level):\n        max_depth = level\n        for key, value in d.items():\n            if isinstance(value, dict):\n                depth = _dict_depth(value, level + 1)\n                if depth > max_depth:\n                    max_depth = depth\n            else:\n                max_depth = level\n        return max_depth\n    return _dict_depth(d, 1)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d,dict):\n        return 1 + (max(map(dict_depth,d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d,dict):\n        return 1 + (max(map(dict_depth,d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    first = 0\n    last = len(arr)-1\n    while (last >= first) :\n        mid = first + (last-first)//2\n        if arr[mid] == ranges[index] and rotations[index] == 0 :\n            return arr[mid]\n        if ranges[index] < arr[mid] :\n            last = mid -1\n        else :\n            first = mid +1\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(arr[index], ranges[index])\n    if(index>=ranges[index]):\n        return(find_Element(arr,ranges,rotations,index+1))\n    elif(index<ranges[index]):\n        return(arr[index])\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index<0 or index>len(arr)-1 :\n        return None \n    if index in ranges :\n        return arr[index]\n    else :\n        if index in rotations :\n            index = (index + r - rotations[index])%len(arr)\n            return arr[index]\n    return None \n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = [i for i in range(1,arr+1)]\n    for i in range(rotations) :\n        arr.append(arr[0])\n        arr.pop(0)\n    print(arr[index-1])\n    return \n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # for i in range(0,ranges) :\n    #     arr[i] = arr[i] + rotations\n    #     print(arr[i])\n    #     arr[i] = arr[i] - rotations\n    #     print(arr[i])\n    #     if index == i :\n    #         return arr[index]\n    # return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        if (index + i) % rations == 0 :\n            return arr[index + i]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    size = len(arr)\n    for i in range(index+1,size+1) :\n        if arr[i%size]>=ranges[0] and arr[i%size]<=ranges[1] and arr[i%size]>=rotations[0] and arr[i%size]<=rotations[1] :\n            print(arr[i%size])\n            break\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (rotations<=ranges[0][0]) :\n        return arr[ranges[0][1]+rotations]\n    elif (rotations>ranges[0][0]) :\n        rotations = rotations - ranges[0][0]\n        return find_Element(arr,ranges[1:],rotations,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(\"\\nInput array: \\n\",arr)\n    print(\"\\nRange of rotation: \\n\",ranges)\n    print(\"\\nRotation index: \\n\",index)\n    rotation_index = index\n    if (rotations < ranges) :\n        print(\"\\nIndex %d after %d rotations is %d\" %(index,ranges,rotation_index))\n        \n    else :\n        print(\"\\nCannot rotate further\")\n        \n    return rotation_index\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)) :\n        if ranges[i] == ranges[index] :\n            return arr[i]\n    return None \n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = re.findall(r'\\b(p\\w+\\b)',words)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if len(words) >= 2:\n        return words[0:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_list=[]\n    for words in words:\n        if words[0]=='p':\n            new_list.append(words)\n    return new_list\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = [word for word in words if word.startswith('p')]\n    return result\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words = input(\"Enter words: \")\n        words_list = words.split()\n        for i in words_list:\n            if i[0] == 'p':\n                print(i)\n    start_withp(words)\n    \ndef start_withp1(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if words_list[i][0] == 'p':\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if i%2 == 0:\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp3(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if i%2!= 0:\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp4(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if words_list[i][0]!= 'p' and words_list[i][0]!= 'q' and words_list[i][0]!='m' and words_list[i][0]!= 'n':\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp5(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if words_list[i][0] == 'p' or words_list[i][0] == 'q' or words_list[i][0] =='m' or words_list[i][0] == 'n':\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp6(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if words_list[i][0]!= 'p' and words_list[i][0]!= 'q' and words_list[i][0]!='m' and words_list[i][0]!= 'n':\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp7(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if words_list[i][0]!= 'p' and words_list[i][0]!= 'q' and words_list[i][0]!='m' and words_list[i][0]!= 'n' and words_list[i][0]!='s' and words_list[i][0]!= 'o':\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp8(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if words_list[i][0]!= 'p' and words_list[i][0]!= 'q' and words_list[i][0]!='m' and words_list[i][0]!= 'n' and words_list[i][0]!='s' and words_list[i][0]!= 'o' and words_list[i][0]!= 'u':\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp9(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if words_list[i][0]!= 'p' and words_list[i][0]!= 'q' and words_list[i][0]!='m' and words_list[i][0]!= 'n' and words_list[i][0]!='s' and words_list[i][0]!= 'o' and words_list[i][0]!= 'u' and words_list[i][0]!= 'i':\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp10(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if words_list[i][0]!= 'p' and words_list[i][0]!= 'q' and words_list[i][0]!='m' and words_list[i][0]!= 'n' and words_list[i][0]!='s' and words_list[i][0]!= 'o' and words_list[i][0]!= 'u' and words_list[i][0]!= 'i' and words_list[i][0]!= 'w':\n                print(words_list[i])\n            i += 1\n    start_withp(words)\n    \ndef start_withp11(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input(\"Enter words: \")\n    \n    def start_withp(words):\n        words_list = words.split()\n        i = 0\n        while i < len(words_list):\n            if words_list[i][0]!= 'p' and words_list[i][0]!= 'q' and words_list[i][0]!='m' and words_list[i][0]!= 'n' and words_list[i][0]!='s' and words_list[i][0]!= 'o' and words_list[i][0]!= 'u' and words_list[i][0]!= 'i' and words_list[i][0]!= '"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            print(word)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # words = ['python','matlab', 'java','swift']\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_l=[]\n    for i in words:\n        if re.match(r'^p.*',i):\n            new_l.append(i)\n    return(new_l)\n    \nprint(start_withp([\"Python\",\"is\",\"awesome\",\"!\"]))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global max_sum\n    if(n==k):\n        if(sum(a) > max_sum):\n            max_sum = sum(a)\n        return\n    for i in range(index, n):\n        max_sum_increasing_subseq(a, n, i+1, k)\n        a[k] = a[i]\n        max_sum_increasing_subseq(a, n, i+1, k+1)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    \n    max_sum = 0\n    \n    for i in range(n):\n        if i == k:\n            break\n            \n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n        max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n        \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if k == 0:\n        return 0\n    \n    if index < k:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    \n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1)\n    )\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    for j in range(1, n+1):\n        for i in range(1, k+1):\n            if i == 1 or j == 1:\n                dp[j][i] = a[j-1]\n            else:\n                dp[j][i] = max(dp[j-1][i-1]+a[j-1], dp[j-1][i])\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n or k > index:\n        return 0\n    if k == index:\n        return a[k]\n    ans = max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global max_sum\n    if n == index:\n        if sum(a[index-k:index]) > max_sum:\n            max_sum = sum(a[index-k:index])\n    else:\n        for i in range(index, n):\n            max_sum_increasing_subseq(a, n, index, k)\n            index += 1\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    max_sum = 0\n    for j in range(index, n):\n        current_sum = a[j]\n        for m in range(j + 1, n):\n            current_sum += a[m]\n            if current_sum >= a[j] + k:\n                current_sum = a[j] + k\n            if max_sum < current_sum:\n                max_sum = current_sum\n    return max_sum\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base case\n    if k >= n:\n        return 0\n    \n    # max sum for prefix up to i\n    max_sum_k = float(\"-inf\")\n    \n    # dp[i][j] represents max_sum_k for prefix ending at i with index j.\n    dp = [[0 for i in range(index+1)] for j in range(n+1)]\n    for i in range(index+1):\n        dp[0][i] = 0\n    \n    # Sum of all numbers from 1 to i\n    sum_ = 0\n    for i in range(index+1):\n        dp[1][i] = sum_\n        sum_ += a[i]\n    \n    for i in range(1, n+1):\n        for j in range(1, index+1):\n            # If the current index is k-th index, then we will consider the sum upto k-th index as current sum.\n            # dp[i][j] represents max sum upto i, i.e., prefix upto j\n            if j == k:\n                dp[i][j] = dp[i-1][j-1] + a[j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n][index]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < k:\n        return -1\n    if index == n:\n        return 0\n    if index > k:\n        return -1\n    if k == index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    if k == index + 1:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if k > n:\n        return float('-inf')\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ''\n    for i in range(m):\n        if i!= 0:\n            colon += ':'\n        for j in range(n):\n            if j!= 0:\n                colon += ','\n            if i == m-1 and j == n-1:\n                colon += str(tuplex[j][i])\n            else:\n                colon += str(tuplex[j][i])\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_str = ''.join(tuplex)\n    tuplex_list = list(tuplex)\n    colon_list = []\n    #print(tuplex_str)\n    for x in range(m):\n        for y in range(n):\n            if x+y<m+n-1:\n                new_str = tuplex_str[:x+y+1]\n                #print(new_str)\n                if len(new_str)==(m+n-1):\n                    #print(new_str)\n                    colon_list.append(new_str[-1])\n    \n    return colon_list\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    assert type(tuplex) == tuple, 'invalid type, not tuple'\n    assert type(m) == int, 'invalid type, not int'\n    assert type(n) == int, 'invalid type, not int'\n    assert n >= 0, 'invalid type, not int'\n    if m == 0:\n        return tuplex[0:n]\n    elif n == 0:\n        return tuplex[m:]\n    else:\n        return tuplex[m:n]\ndef find_index(arr, n):\n    '''\n    Write a function to find the first index of an array of array.\n    '''\n    assert type(arr) == list, 'invalid type, not list'\n    assert type(n) == int, 'invalid type, not int'\n    assert n >= 0, 'invalid type, not int'\n    for i in range(len(arr)):\n        if arr[i] == n:\n            return i\n    return 'not found'\ndef sort_by_attr(arr, attr):\n    '''\n    Write a function to sort a list by attr.\n    '''\n    assert type(arr) == list, 'invalid type, not list'\n    assert type(attr) == str, 'invalid type, not str'\n    assert attr in ['price','name'], 'invalid attr, not str'\n    attr = attr[0].lower() + attr[1:]\n    arr.sort(key=lambda x: x[attr])\n    return arr\ndef search_by_attr(arr, attr, n):\n    '''\n    Write a function to search a list by attr.\n    '''\n    assert type(arr) == list, 'invalid type, not list'\n    assert type(attr) == str, 'invalid type, not str'\n    assert type(n) == int, 'invalid type, not int'\n    assert n >= 0, 'invalid type, not int'\n    attr = attr[0].lower() + attr[1:]\n    arr = sort_by_attr(arr,attr)\n    print(arr)\n    return arr[n]\ndef search_by_attr_re(arr, attr, n):\n    '''\n    Write a function to search a list by attr.\n    '''\n    assert type(arr) == list, 'invalid type, not list'\n    assert type(attr) == str, 'invalid type, not str'\n    assert type(n) == int, 'invalid type, not int'\n    assert n >= 0, 'invalid type, not int'\n    attr = attr[0].lower() + attr[1:]\n    arr = sort_by_attr(arr,attr)\n    arr_temp = []\n    for i in arr:\n        arr_temp.append(i[attr])\n    arr_temp = set(arr_temp)\n    arr_temp = list(arr_temp)\n    arr_temp.sort()\n    print(arr_temp)\n    return arr_temp[n]\ndef find_by_attr(arr, attr, n):\n    '''\n    Write a function to search a list by attr.\n    '''\n    assert type(arr) == list, 'invalid type, not list'\n    assert type(attr) == str, 'invalid type, not str'\n    assert type(n) == int, 'invalid type, not int'\n    assert n >= 0, 'invalid type, not int'\n    attr = attr[0].lower() + attr[1:]\n    arr = sort_by_attr(arr,attr)\n    return arr[n]\ndef count_by_attr(arr, attr):\n    '''\n    Write a function to count the attr by a list.\n    '''\n    assert type(arr) == list, 'invalid type, not list'\n    assert type(attr) == str, 'invalid type, not str'\n    assert attr in ['price','name'], 'invalid attr, not str'\n    attr = attr[0].lower() + attr[1:]\n    dic = {}\n    for i in arr:\n        if attr in i:\n            if i[attr] not in dic:\n                dic[i[attr]] = 1\n            else:\n                dic[i[attr]] += 1\n    return dic\ndef count_by_attr_re(arr, attr):\n    '''\n    Write a function to count the attr by a list.\n    '''\n    assert type(arr) == list, 'invalid type, not list'\n    assert type(attr) == str, 'invalid type, not str'\n    assert attr in ['price','name'], 'invalid attr, not str'\n    attr = attr[0].lower() + attr[1:]\n    dic = {}\n    for i in arr:\n        if attr in i:\n            if i[attr] not in dic:\n                dic[i[attr]] = 1\n            else:\n                dic[i[attr]] += 1\n    dic = sort_by_attr(dic,attr)\n    return dic\ndef union(arr1,arr2):\n    '''\n    Write a function to union two list.\n    '''\n    assert type(arr1) == list, 'invalid type, not list'\n    assert type(arr2) == list, 'invalid type, not list'\n    assert len(arr1) > 0 and len(arr2) > 0, 'invalid type, not list'\n    arr3 = deepcopy(arr1)\n    for i in arr2:\n        if i not in arr3:\n            arr3.append(i)\n    return arr3\ndef intersection(arr1,arr2):\n    '''\n    Write a function to intersection two list.\n    '''\n    assert type(arr1) == list, 'invalid type, not list'\n    assert type(arr2) == list, 'invalid type, not list'\n    assert len(arr1) > 0 and len(arr2) > 0, 'invalid type, not list'\n    arr3 = []\n    for i in arr1:\n        if i in arr2:\n            arr3.append(i)\n    return arr3\ndef difference(arr1,arr2):\n    '''\n    Write a function to difference two list.\n    '''\n    assert type(arr1) == list, 'invalid type, not list'\n    assert type(arr2) == list, 'invalid type, not list'\n    assert len(arr1) > 0 and len(arr2) > 0, 'invalid type, not list'\n    arr3 = []\n    for i in arr1:\n        if i not in arr2:\n            arr3.append(i)\n    return arr3\ndef intersection_re(arr1,arr2):\n    '''\n    Write a function to intersection two list.\n    '''\n    assert type(arr1) == list, 'invalid type, not list'\n    assert type(arr2) == list, 'invalid type, not list'\n    assert len(arr1) > 0 and len(arr2) > 0, 'invalid type, not list'\n    arr3 = []\n    for i in arr1:\n        if i in arr2:\n            arr3.append(i)\n    return arr3\ndef difference_re(arr1,arr2):\n    '''\n    Write a function to difference two list.\n    '''\n    assert type(arr1) == list, 'invalid type, not list'\n    assert type(arr2) == list, 'invalid type, not list'\n    assert len(arr1) > 0 and len(arr2) > 0, 'invalid type, not list'\n    arr3 = []\n    for i in arr1:\n        if i not in arr2:\n            arr3.append(i)\n    return arr3\ndef inter_diff_re(arr1,arr2):\n    '''\n    Write a function to intersection and difference two list.\n    '''\n    assert type(arr1) == list, 'invalid type, not list'\n    assert type(arr2) == list, 'invalid type, not list'\n    assert len(arr1) > 0 and len(arr2) > 0, 'invalid type, not list'\n    arr3 = []\n    for i in arr1:"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    temp=tuple(i for i in tuplex[1:m+1])\n    return (tuplex[0],temp,tuplex[-n:])\ndef tuple_dictionary(tuplex):\n    '''\n    Write a function to convert tuple to a dictionary\n    '''\n    temp=dict()\n    for i in tuplex:\n        temp[i[0]]=i[1]\n    return temp\ndef tuple_dictionary_2(tuplex):\n    '''\n    Write a function to convert tuple to a dictionary\n    '''\n    temp=dict()\n    for i in range(len(tuplex)):\n        temp[tuplex[i][0]]=tuplex[i][1]\n    return temp\ndef tuple_list_dictionary(tuplex):\n    '''\n    Write a function to convert tuple to a list of dictionaries\n    '''\n    temp=list()\n    for i in range(len(tuplex)):\n        temp.append(dict(zip(tuplex[i][0],tuplex[i][1])))\n    return temp\ndef list_tuple_dictionary(listx):\n    '''\n    Write a function to convert list of tuples to a dictionary\n    '''\n    temp=dict()\n    for i in listx:\n        temp[i[0]]=i[1]\n    return temp\ndef tuple_list_list_tuple(tuplex):\n    '''\n    Write a function to convert list of lists of tuples to a list of tuples\n    '''\n    temp=list()\n    for i in tuplex:\n        temp.append(tuple(j for j in i))\n    return temp\ndef tuple_list_tuple_dictionary(tuplex):\n    '''\n    Write a function to convert list of tuples to a dictionary of tuples\n    '''\n    temp=dict()\n    for i in tuplex:\n        temp[i[0]]=i[1]\n    return temp\ndef tuple_dictionary_list(tuplex):\n    '''\n    Write a function to convert a dictionary of tuples to a list of tuples\n    '''\n    temp=list()\n    for i in tuplex.items():\n        temp.append(i)\n    return temp\ndef dic_tuple_list(dicx):\n    '''\n    Write a function to convert a dictionary to a list of tuples\n    '''\n    temp=list()\n    for i in dicx.items():\n        temp.append((i[0],i[1]))\n    return temp\ndef dict_from_tuples_list(listx):\n    '''\n    Write a function to convert a list of tuples to a dictionary\n    '''\n    temp=dict()\n    for i in listx:\n        temp[i[0]]=i[1]\n    return temp\ndef dict_from_tuple_list(listx):\n    '''\n    Write a function to convert a list of tuples to a dictionary\n    '''\n    temp=dict()\n    for i in listx:\n        temp[i[0]]=i[1]\n    return temp\ndef dictionaries_lists_lists_tuple(dictx,n):\n    '''\n    Write a function to create a list of lists of tuples.\n    '''\n    temp=list()\n    for i in dictx.items():\n        temp.append((i[0],i[1]) for j in range(n))\n    return temp\ndef dict_tuple_list(dicx):\n    '''\n    Write a function to convert a dictionary to a list of tuples\n    '''\n    temp=list()\n    for i in dicx.items():\n        temp.append((i[0],i[1]))\n    return temp\ndef list_dict_tuple(listx):\n    '''\n    Write a function to convert a list of tuples to a dictionary\n    '''\n    temp=dict()\n    for i in listx:\n        temp[i[0]]=i[1]\n    return temp\ndef list_dict_tuple_list(listx):\n    '''\n    Write a function to convert a list of tuples to a list of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef list_list_dict_tuple(listx):\n    '''\n    Write a function to convert a list of lists of tuples to a list of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef list_tuple_dict_tuple(listx):\n    '''\n    Write a function to convert a list of tuples to a list of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef list_tuple_list_dict(listx):\n    '''\n    Write a function to convert a list of tuples to a list of lists of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef dict_list_tuple(dictx):\n    '''\n    Write a function to convert a dictionary to a list of tuples\n    '''\n    temp=list()\n    for i in dictx.items():\n        temp.append((i[0],i[1]))\n    return temp\ndef tuple_dict_list(tuplex):\n    '''\n    Write a function to convert a tuple to a list of dictionaries\n    '''\n    temp=list()\n    for i in tuplex:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef dictionary_lists_lists_tuples(dictx,n):\n    '''\n    Write a function to create a list of lists of tuples.\n    '''\n    temp=list()\n    for i in dictx.items():\n        temp.append((i[0],i[1]) for j in range(n))\n    return temp\ndef dict_list_list_tuple(dictx):\n    '''\n    Write a function to convert a dictionary to a list of lists of tuples\n    '''\n    temp=list()\n    for i in dictx.items():\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef lists_lists_tuples_dict(listx,n):\n    '''\n    Write a function to create a list of lists of tuples.\n    '''\n    temp=list()\n    for i in listx:\n        temp.append((i[0],i[1]) for j in range(n))\n    return temp\ndef tuple_tuple_list_dict(tuplex):\n    '''\n    Write a function to convert a tuple to a list of dictionaries\n    '''\n    temp=list()\n    for i in tuplex:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef list_tuple_list_list(listx):\n    '''\n    Write a function to convert a list of tuples to a list of lists of tuples\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef list_list_list_tuple(listx):\n    '''\n    Write a function to convert a list of lists of tuples to a list of lists of tuples\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef list_list_dict_tuple(listx):\n    '''\n    Write a function to convert a list of lists of tuples to a list of lists of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef list_list_list_list_tuple(listx):\n    ''"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n==0:\n        return None\n    if n==1:\n        return tuplex[0]\n    result=tuplex[0:m]\n    for i in range(m,n):\n        result=result+(tuplex[m],)\n    return result\ndef new_tuple(tuplex,m,n):\n    '''\n    Write a function to get a new tuple.\n    '''\n    if n==0:\n        return None\n    if n==1:\n        return (tuplex[0],)\n    result=tuplex[0:m]\n    for i in range(m,n):\n        result=result+(tuplex[m],)\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if tuplex == None:\n        return tuplex\n    tuplex_list = list(tuplex)\n    for i in range(len(tuplex_list)):\n        if type(tuplex_list[i]) == tuple:\n            tuplex_list[i] = colon_tuplex(tuplex_list[i],m,n)\n        else:\n            break\n    tuplex_list = tuple(tuplex_list)\n    return tuplex_list\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    L=[]\n    for i in range(m):\n        L.append(tuplex[i*n:(i+1)*n])\n    return L\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > 0 and n > 0:\n        tuplex = tuplex[1::]\n        tuplex = tuplex + (tuplex[0],)\n    elif m > 0 and n == 0:\n        tuplex = tuplex[1::]\n    elif m == 0 and n > 0:\n        tuplex = (tuplex[0],) + tuplex\n    elif m == 0 and n == 0:\n        tuplex = tuplex\n    return tuplex\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def comb(arr, n):\n        '''\n        Calculate combination of n distinct elements in array arr.\n        '''\n        res = 1\n        for i in range(n):\n            res = res * (arr[i] - n + i + 1) // (i + 1)\n        return res\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for x in nums1:\n        for y in nums2:\n            if x * y > largest_products[-1] and x * y <= N:\n                largest_products.append(x * y)\n    return largest_products[N-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def rselect(nums, k):\n        '''\n        Find the k-th largest element in a list.\n        '''\n        def partition(nums, l, r):\n            i = l - 1\n            pivot = nums[r]\n            for j in range(l, r):\n                if nums[j] <= pivot:\n                    i += 1\n                    nums[j], nums[i] = nums[i], nums[j]\n            nums[i+1], nums[r] = nums[r], nums[i+1]\n            return i+1\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from itertools import product\n    products = set()\n    for i in range(N):\n        for j in range(N):\n            prod = nums1[i] * nums2[j]\n            products.add(prod)\n    return sorted(products)[-N:]\n    "
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Use reduce to compute the product\n    from functools import reduce\n    from operator import mul\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    k = N\n    j = N\n    comb = list(itertools.combinations(nums1, 1)) + list(itertools.combinations(nums2, 1))\n    comb.sort(key=lambda x: x[0] * x[1], reverse=True)\n    return comb[k]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # set up variables\n    nums1 = nums1[:N]\n    nums2 = nums2[:N]\n    products = []\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # n1 = len(nums1)\n    # n2 = len(nums2)\n    # n = min(n1, n2)\n    # res = 0\n    # for i in range(n):\n    #     res = max(res, nums1[i] * nums2[i])\n    # return res\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import heapq\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    The time complexity of the above algorithm is O(NlogN), where \u2018N\u2019 is the total number of elements in the input arrays.\n    The space complexity of the above algorithm will also be O(N), as the size of the output array is N.\n    '''\n    nums1.sort()\n    nums2.sort()\n    res = []\n    i, j = 0, 0\n    while i < N and j < N:\n        res.append(nums1[i] * nums2[j])\n        i += 1\n        j += 1\n    return res\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a,'is the maximum.')\n    elif(a==b):\n        print('Both numbers are equal.')\n    else:\n        print(b,'is the maximum.')\n    return\nmaximum(4,5)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    "
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max=0\n    if a>b:\n        max=a\n    else:\n        max=b\n    return max\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min=0\n    if a<b:\n        min=a\n    else:\n        min=b\n    return min\ndef total(a):   \n    '''\n    Write a python function to calculate the sum of all the numbers of a list.\n    '''\n    sum=0\n    for x in range(len(a)):\n        sum=sum+a[x]\n    return sum\ndef mean(a):   \n    '''\n    Write a python function to calculate the mean of all the numbers of a list.\n    '''\n    sum=0\n    mean=0\n    for x in range(len(a)):\n        sum=sum+a[x]\n    mean=sum/len(a)\n    return mean\ndef median(a):   \n    '''\n    Write a python function to calculate the median of a list of numbers.\n    '''\n    a.sort()\n    if len(a)%2==0:\n        median=(a[int(len(a)/2)-1]+a[int(len(a)/2)])/2\n    else:\n        median=a[int(len(a)/2)]\n    return median\ndef mode(a):   \n    '''\n    Write a python function to calculate the mode of a list of numbers.\n    '''\n    count={}\n    for i in a:\n        count[i]=count.get(i,0)+1\n    modes=[]\n    for i in count:\n        if count[i]==max(count.values()):\n            modes.append(i)\n    return modes\ndef range(a):   \n    '''\n    Write a python function to calculate the range of a list of numbers.\n    '''\n    min=a[0]\n    max=a[0]\n    for i in range(1,len(a)):\n        if a[i]>max:\n            max=a[i]\n        if a[i]<min:\n            min=a[i]\n    return max-min\ndef variance(a):   \n    '''\n    Write a python function to calculate the variance of a list of numbers.\n    '''\n    mean=mean(a)\n    sum=0\n    for i in a:\n        sum=sum+(i-mean)**2\n    variance=sum/(len(a)-1)\n    return variance\ndef standard_deviation(a):   \n    '''\n    Write a python function to calculate the standard deviation of a list of numbers.\n    '''\n    variance=variance(a)\n    standard_deviation=variance**0.5\n    return standard_deviation\ndef start_end(a):   \n    '''\n    Write a python function to calculate the range between first and last number of a list.\n    '''\n    min=a[0]\n    max=a[0]\n    for i in range(1,len(a)):\n        if a[i]>max:\n            max=a[i]\n        if a[i]<min:\n            min=a[i]\n    return max-min\ndef make_list(a):\n    '''\n    Write a python function to split a list of numbers into sublists of 5\n    '''\n    c=[]\n    for i in range(0,len(a),5):\n        c.append(a[i:i+5])\n    return c\ndef common_elements(a,b):\n    '''\n    Write a python function to find common elements between two lists.\n    '''\n    c=[]\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i]==b[j]:\n                c.append(a[i])\n    return c\ndef difference(a,b):\n    '''\n    Write a python function to find difference between two lists.\n    '''\n    c=[]\n    for i in range(len(a)):\n        if a[i] not in b:\n            c.append(a[i])\n    for j in range(len(b)):\n        if b[j] not in a:\n            c.append(b[j])\n    return c\ndef average(a):\n    '''\n    Write a python function to calculate the mean of all the numbers of a list after removing the minimum and maximum numbers from that list.\n    '''\n    a.sort()\n    min=a[0]\n    max=a[-1]\n    a.pop(0)\n    a.pop(-1)\n    mean=mean(a)\n    return mean\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n    \ndef sum(a,b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b\n    \ndef substract(a,b):\n    '''\n    Write a python function to substract two numbers.\n    '''\n    return a-b\n    \ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\n    \ndef divide(a,b):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a/b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a=input(\"enter the first number : \")\n    b=input(\"enter the second number : \")\n    if a>b:\n        return a\n    else:\n        return b\ndef print_dict(a):\n    '''\n    Write a python function to print a dictionary line by line.\n    Hint : Use a for loop to iterate through the dictionary\n    '''\n    a=input(\"enter the key-value pairs for the dictionary : \")\n    x=a.split(\",\")\n    d={}\n    for i in x:\n        y=i.split(\":\")\n        d[y[0]]=y[1]\n    print(d)\ndef list_of_tuples(a):\n    '''\n    Write a python function to convert a given list of\n    tuples into a dictionary.\n    '''\n    a=input(\"enter the list of tuples : \")\n    x=a.split(\",\")\n    d={}\n    for i in x:\n        y=i.split(\":\")\n        d[y[0]]=y[1]\n    print(d)\ndef sort_list(a):\n    '''\n    Write a python function to sort a list of numbers and strings.\n    '''\n    a=input(\"enter the list of values : \")\n    x=a.split(\",\")\n    b=[]\n    for i in x:\n        if i.isdigit():\n            b.append(int(i))\n        else:\n            b.append(i)\n    print(b)\n    b.sort()\n    print(b)\ndef string_match(a):\n    '''\n    Write a python function to check if the given strings match\n    with the given regular expression.\n    '''\n    import re\n    a=input(\"enter the string : \")\n    b=input(\"enter the regular expression : \")\n    if re.match(b,a):\n        print(\"yes\")\n    else:\n        print(\"no\")\ndef dict_from_keys(a):\n    '''\n    Write a python function to create a dictionary\n    from the given keys.\n    '''\n    a=input(\"enter the keys for the dictionary : \")\n    b=a.split(\",\")\n    d={}\n    for i in b:\n        d[i]=None\n    print(d)\ndef list_from_keys(a):\n    '''\n    Write a python function to create a list from the given keys.\n    '''\n    a=input(\"enter the keys for the list : \")\n    b=a.split(\",\")\n    c=[]\n    for i in b:\n        c.append(i)\n    print(c)\ndef dict_from_values(a):\n    '''\n    Write a python function to create a dictionary from the\n    given values.\n    '''\n    a=input(\"enter the values for the dictionary : \")\n    b=a.split(\",\")\n    d={}\n    for i in b:\n        if i.isdigit():\n            d[i]=None\n        else:\n            d[i]=None\n    print(d)\ndef count_words(a):\n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    a=input(\"enter the string : \")\n    b=a.split(\" \")\n    d={}\n    for i in b:\n        d[i]=0\n    for j in b:\n        d[j]=d[j]+1\n    print(d)\ndef dict_from_list(a):\n    '''\n    Write a python function to create a dictionary from the\n    given list. The list should contain the keys and the list\n    should contain the values.\n    '''\n    a=input(\"enter the keys and values for the dictionary : \")\n    b=a.split(\",\")\n    c={}\n    for i in range(0,len(b),2):\n        c[b[i]]=b[i+1]\n    print(c)\ndef dict_in_list(a):\n    '''\n    Write a python function to create a dictionary from the\n    given list. The list should contain the keys and the list\n    should contain the values.\n    '''\n    a=input(\"enter the keys and values for the dictionary : \")\n    b=a.split(\",\")\n    c=[]\n    for i in range(0,len(b),2):\n        c.append(b[i],b[i+1])\n    print(c)\ndef list_in_dict(a):\n    '''\n    Write a python function to create a list from the given\n    dictionary. The list should contain all the keys from the\n    dictionary.\n    '''\n    a=input(\"enter the keys and values for the dictionary : \")\n    b=a.split(\",\")\n    c=[]\n    for i in range(0,len(b),2):\n        c.append(b[i])\n    print(c)\ndef dict_in_dict(a):\n    '''\n    Write a python function to create a dictionary from the given\n    dictionary. The dictionary should contain all the keys from the\n    original dictionary. The values for the new dictionary should\n    be a list containing all the values from the original dictionary.\n    '''\n    a=input(\"enter the keys and values for the dictionary : \")\n    b=a.split(\",\")\n    c={}\n    for i in range(0,len(b),2):\n        c[b[i]]=b[i+1]\n    print(c)\ndef is_leap_year(a):\n    '''\n    Write a python function to check if the given year is a leap year or not.\n    '''\n    a=int(input(\"enter the year : \"))\n    if a%4==0 and a%100!=0 or a%400==0:\n        print(a,\"is a leap year\")\n    else:\n        print(a,\"is not a leap year\")\ndef is_palindrome(a):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    Hint: Use slicing and comparison\n    '''\n    a=input(\"enter the string : \")\n    if a[::-1]==a:\n        print(\"yes\")\n    else:\n        print(\"no\")\ndef leap_years(a):\n    '''\n    Write a python function to find the number of leap years\n    between the given range of years.\n    '''\n    a=input(\"enter the start year and end year : \")\n    b=a.split(\" \")\n    start=int(b[0])\n    end=int(b[1])\n    count=0\n    for i in range(start,end+1):\n        if i%4==0 and i%100!=0 or i%400==0:\n            count=count+1\n    print(count)\ndef dict_from_keys_values(a):\n    '''\n    Write a python function to create a dictionary from the\n    given keys and values. The keys should contain the characters\n    and the values should contain the words.\n    Hint: Use list comprehension\n    '''\n    a=input(\"enter the keys and values : \")\n    b=a.split(\",\")\n    c={}\n    for i in b:\n        c[i[0]]=i[1:]\n    print(c)\ndef smallest_number(a):\n    '''\n    Write a python function to find the smallest number\n    from the list of numbers.\n    Hint: Use sort() function\n    '''\n    a=input(\"enter the list of numbers : \")\n    b=a.split(\",\")\n    b.sort()\n    print(b[0])\ndef factorial(a):\n    '''\n    Write a python function to calculate the factorial of the given number.\n    Hint: Use recursion\n    '''\n    a=int(input(\"enter the number : \"))\n    if a<0:\n        print(\"factorial does not exist for negative numbers\")\n    elif a==0:\n        print(\"factorial is 1 for 0\")\n    else:\n        return a*factorial(a-1)\ndef prime_number(a):\n    '''\n    Write a python function to check if the given number is a prime number or not.\n    Hint: Use recursion\n    '''\n    a=int(inpu"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \na=int(input(\"enter first number:\"))\nb=int(input(\"enter second number:\"))\nprint(\"maximum number is:\",maximum(a,b))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        lst.append(str1[i])\n    return tuple(lst)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = []\n    for i in range(len(str1)):\n        tup.append(str1[i])\n    return tuple(tup)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split(\";\")\n    str1 = [x.split(\",\") for x in str1]\n    str1 = [(x[0], x[1]) for x in str1]\n    return str1\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = []\n    for i in str1:\n        list1.append(i)\n    return tuple(list1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \nstring_to_tuple('hello')\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    tuple1 = tuple(list1)\n    return tuple1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    res = 0\n    while n & (n - 1)!= 0:\n        res += 1\n        n &= (n - 1)\n    return res\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #Check if the binary representation of the number is a power of 2.\n    #If so, then it is the left most unset bit. Otherwise we can check for the\n    #last unset bit by using the right bit shift operator.\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= n - 1 # Flipping the rightmost unset bit\n    n |= ~n + 1 # Flipping all unset bits\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & -n)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 1\n    while (n & i == 0):\n        i <<= 1\n    return i\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #set leftmost unset bit with bit_length -1\n    return n - (n & -n)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (n - 1) == 0:\n        return n\n    else:\n        return n | (n + 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while (n):\n        print(n & ~(n-1))\n        n &= (n-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1\n    while mask <= n:\n        mask = mask << 1\n    mask = mask >> 1\n    return mask\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    s = bin(n)[2:]\n    return s.zfill(32).replace(\"0\", \"a\")\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=1/3*math.pi*r**2*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def pi():\n        return math.pi\n    \n    def volume_cone(r,h):\n        pi=math.pi\n        v=(pi*r**2*h)/3\n        return v\n    #return volume_cone(r,h)\n    #print(volume_cone(r,h))\n    #return volume_cone(r,h)\n    #print(volume_cone(r,h))\n    print(volume_cone(r,h))\n    return volume_cone(r,h)\n    #print(volume_cone(r,h))\n    #print(volume_cone(r,h))\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    \n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    \n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #return volume_cone(r,h)\n    #retur"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r=float(r)\n    h=float(h)\n    volume=1/3*math.pi*r**2*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print(\"The volume of the cone is: {}\".format(1/3*math.pi*r*r*h))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = (1/3)*math.pi*(r**2)*h\n    print(volume_cone)\n    return volume_cone\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume_cylinder = math.pi*(r**2)*h\n    print(volume_cylinder)\n    return volume_cylinder\ndef volume_cone_from_base(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = 1/3*math.pi*(r**2)*h\n    print(volume_cone)\n    return volume_cone\ndef volume_cylinder_from_base(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume_cylinder = math.pi*(r**2)*h\n    print(volume_cylinder)\n    return volume_cylinder\ndef volume_cone_from_base_and_height(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = 1/3*math.pi*(r**2)*h\n    print(volume_cone)\n    return volume_cone\ndef volume_cylinder_from_base_and_height(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume_cylinder = math.pi*(r**2)*h\n    print(volume_cylinder)\n    return volume_cylinder\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = 4/3*math.pi*(r**3)\n    print(volume_sphere)\n    return volume_sphere\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume_cube = 6*(s**3)\n    print(volume_cube)\n    return volume_cube\ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume_cuboid = l*b*h\n    print(volume_cuboid)\n    return volume_cuboid\ndef volume_pyramid(l,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume_pyramid = 1/3*(l*b*h)\n    print(volume_pyramid)\n    return volume_pyramid\ndef volume_cuboid_from_base(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume_cuboid = l*b*h\n    print(volume_cuboid)\n    return volume_cuboid\ndef volume_pyramid_from_base(l,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume_pyramid = 1/3*(l*b*h)\n    print(volume_pyramid)\n    return volume_pyramid\ndef volume_cuboid_from_base_and_height(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume_cuboid = l*b*h\n    print(volume_cuboid)\n    return volume_cuboid\ndef volume_pyramid_from_base_and_height(l,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume_pyramid = 1/3*(l*b*h)\n    print(volume_pyramid)\n    return volume_pyramid\ndef volume_sphere_from_radius(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = 4/3*math.pi*(r**3)\n    print(volume_sphere)\n    return volume_sphere\ndef volume_cube_from_side(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume_cube = 6*(s**3)\n    print(volume_cube)\n    return volume_cube\ndef volume_cuboid_from_side(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume_cuboid = l*b*h\n    print(volume_cuboid)\n    return volume_cuboid\ndef volume_pyramid_from_side(l,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume_pyramid = 1/3*(l*b*h)\n    print(volume_pyramid)\n    return volume_pyramid\ndef volume_sphere_from_radius_and_side(r,s):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = 4/3*math.pi*(r**3)*(s**2)\n    print(volume_sphere)\n    return volume_sphere\ndef volume_cube_from_side_and_side(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume_cube = 6*(s**3)\n    print(volume_cube)\n    return volume_cube\ndef volume_cuboid_from_side_and_side(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume_cuboid = l*b*h\n    print(volume_cuboid)\n    return volume_cuboid\ndef volume_pyramid_from_side_and_side(l,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume_pyramid = 1/3*(l*b*h)\n    print(volume_pyramid)\n    return volume_pyramid\ndef volume_sphere_from_radius_and_side_and_side(r,s):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = 4/3*math.pi*(r**3)*(s**2)\n    print(volume_sphere)\n    return volume_sphere\ndef volume_cube_from_side_and_side_and_side(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume_cube = 6*(s**3)\n    print(volume_cube)\n    return volume_cube\ndef volume_cuboid_from_side_and_side_and_side(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume_cuboid = l*b*h\n    print(volume_cuboid)\n    return volume_cuboid\ndef volume_pyramid_from_side_and_side_and_side(l,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume_pyramid = 1/3*(l*b*h)\n    print(volume_pyramid)\n    return volume_pyramid\ndef volume_sphere_from_radius_and_side_and_side_and_side(r,s):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = 4/3*math.pi*(r**3)*(s**2)\n    print(volume_sphere)\n    return volume_sphere\ndef volume_cube_from_side_and_side_and_side_and_side(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume_cube = 6*(s**3)\n    print(volume_cube)\n    return volume_cube\ndef volume_cuboid_from_side_and_side_and_side_and_side(l,b,h):\n    '''\n    Write "
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # r = radius, h = height\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #defining the volume of a cone using the formula V = 1/3\u03c0r^2h\n    #for radius r and height h\n    #find the volume V using the formula V = 1/3\u03c0r^2h\n    #variable pi = 3.14159\n    pi = 3.14159\n    volume = (1/3)*pi*r**2*h\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Assigning a variable to zero, so that later on the value of n can be used as the highest power of 2\n    power_of_2 = 0\n    # For loop to iterate through each digit in the number\n    for x in range(0, len(str(n))):\n        # x is assigned to the current number and it is cast as a string and converted to a list\n        x = str(n)\n        x = list(x)\n        # A variable y is assigned to the current number\n        y = n\n        # y is converted to a string and cast as a list\n        y = str(y)\n        y = list(y)\n        # The value of the number is reduced by 2 because the highest power of 2 is a number that is divisible by 4\n        y = int(y)\n        y = y / 4\n        # y is cast as an integer\n        y = int(y)\n        # The value of the number is then divided by 2 to get the highest power of 2 less than or equal to n\n        y = y / 2\n        # y is cast as an integer\n        y = int(y)\n        # The value of the variable y is then added to the variable power_of_2\n        power_of_2 += y\n    # power_of_2 is returned\n    return power_of_2\n    \nprint(highest_Power_of
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 0\n    while n>=pow(2,p):\n        p+=1\n    return p\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n < 2):\n        return 0\n    else:\n        return int(log(n,2))+1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0\n    while n:\n        highest = n\n        n >>= 1\n    return highest\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while True:\n        if power <= n:\n            power *= 2\n        else:\n            return power // 2\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 1 if (n==0) else math.ceil(math.log(n,2))\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Find n in binary\n    n_bin = bin(n).lstrip('0b')\n    \n    # If n is even, return the power of 2 equal to n/2\n    if n % 2 == 0:\n        return n // 2\n    \n    # Else, return the power of 2 equal to n/2 + 1\n    else:\n        return n // 2 + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return \"This number is too small\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = -1\n    while(highest_power > -1):\n        highest_power += 1\n        if((1<<highest_power) <= n):\n            return (1<<highest_power)\n    return -1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i=0\n    while(1<<i<=n):\n        i+=1\n    return i-1\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    lucas = [0,1]\n    \n    for i in range(2,n+1):\n        lucas.append(lucas[i-2] + lucas[i-1])\n    \n    return lucas[n]\n    \nprint(find_lucas(20))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = []\n    lucas.append(2)\n    lucas.append(1)\n    \n    if n == 0:\n        return 2\n    \n    if n == 1:\n        return 1\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base case\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return lucas(n-1) + lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n    \n    \ndef fibonacci_lucas(n):\n    '''\n    Write a function to find then'th Fibonacci number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    return fibonacci_lucas(n - 1) + fibonacci_lucas(n - 2) + fibonacci_lucas(n - 3)\n    \ndef fibonacci_memo(n, memo):\n    '''\n    Write a function to find then'th Fibonacci number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    if n in memo:\n        return memo[n]\n    memo[n] = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo) + fibonacci_memo(n - 3, memo)\n    return memo[n]\n    \ndef fibonacci_tail(n, a, b):\n    '''\n    Write a function to find then'th Fibonacci number.\n    '''\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    return fibonacci_tail(n - 1, b, a + b)\n    \ndef fibonacci_recur(n):\n    '''\n    Write a function to find then'th Fibonacci number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return fibonacci_recur(n - 1) + fibonacci_recur(n - 2)\n    \ndef lucas_memo(n, memo):\n    '''\n    Write a function to find then'th Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    if n in memo:\n        return memo[n]\n    memo[n] = lucas_memo(n - 1, memo) + lucas_memo(n - 2, memo) + lucas_memo(n - 3, memo)\n    return memo[n]\n    \ndef lucas_tail(n, a, b):\n    '''\n    Write a function to find then'th Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    return lucas_tail(n - 1, b, a + b)\n    \ndef lucas_recur(n):\n    '''\n    Write a function to find then'th Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    return lucas_recur(n - 1) + lucas_recur(n - 2)\n    \ndef sum_series(n, a = 0, b = 1):\n    '''\n    Write a function to find then'th Fibonacci number.\n    '''\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    return sum_series(n - 1, a, b) + sum_series(n - 2, a, b)\n    \ndef test_lucas():\n    assert lucas(0) == 2\n    assert lucas(1) == 1\n    assert lucas(2) == 3\n    assert lucas(3) == 4\n    assert lucas(4) == 7\n    assert lucas(5) == 11\n    assert lucas(6) == 18\n    assert lucas(7) == 29\n    assert lucas(8) == 47\n    assert lucas(9) == 76\n    assert lucas(10) == 123\n    assert lucas(11) == 199\n    assert lucas(12) == 322\n    assert lucas(13) == 521\n    assert lucas(14) == 843\n    assert lucas(15) == 1379\n    assert lucas(16) == 2980\n    assert lucas(17) == 5542\n    assert lucas(18) == 90611\n    assert lucas(19) == 104525\n    assert lucas(20) == 177147\n    assert lucas(21) == 2865713\n    assert lucas(22) == 4665699\n    assert lucas(23) == 81490011\n    assert lucas(24) == 1355947033\n    assert lucas(25) == 2182868445\n    assert lucas(26) == 3735500717\n    assert lucas(27) == 5782969347\n    assert lucas(28) == 9718269112\n    assert lucas(29) == 1056352655\n    assert lucas(30) == 15480087559\n    assert lucas(31) == 25047307859\n    assert lucas(32) == 405273953789\n    assert lucas(33) == 6617517245988\n    assert lucas(34) == 1072466781120\n    assert lucas(35) == 1510476574442\n    assert lucas(36) == 24157847303610\n    assert lucas(37) == 392886353553218\n    assert lucas(38) == 745838244598137\n    assert lucas(39) == 1215533363960421\n    assert lucas(40) == 19224447512101020\n    assert lucas(41) == 275834380809328205\n    assert lucas(42) == 4318368389370986527\n    assert lucas(43) == 5136733121403752827\n    assert lucas(44) == 78115300485326120330\n    assert lucas(45) == 125880144510067381335\n    assert lucas(46) == 177936637181653142765\n    assert lucas(47) == 2679148617595270431183\n    assert lucas(48) == 4334944372450122352409\n    assert lucas(49) == 62211790058440822145833\n    assert lucas(50) == 102554285647671611506181\n    assert lucas(51) == 15480087559\n    assert lucas(52) == 222305838452758943044445\n    assert lucas(53) == 31522127044268457976507\n    assert lucas(54) == 442309007447671611506182\n    assert lucas(55) == 6892760327687842933355928\n    assert lucas(56) == 10725118045341674193046294\n    assert lucas(57) == 1510476574442\n    assert lucas(58) == 23445447512101020\n    assert lucas(59) == 39293108268989898305084477\n    assert lucas(60) == 617717245988\n    assert lucas(61) == 1048425315221270442684579\n    assert lucas(62) == 1510476574442\n    assert lucas(61) == 23445447512101020\n    assert lucas(60) == 39293108268989898305084477\n    assert lucas(59) == 617717245988\n    assert lucas(58) == 1048425315221270442684579\n    assert lucas(57) == 1510476574442\n    assert lucas(56) == 23445447512101020\n    assert lucas(55) == 39293108268989898305084477\n    assert lucas(54) == 617717245988\n    assert lucas(53) == 102554285647671611506181\n    assert lucas(52) == 15480087559\n    assert lucas(51) == 222305838452758943044445\n    assert lucas(50) == 3152212704426"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [2,1]\n    for i in range(n):\n        next_lucas = lucas_numbers[-1] + lucas_numbers[-2]\n        lucas_numbers.append(next_lucas)\n    return lucas_numbers[-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # using loops.\n    # result = 0\n    # for i in range(n):\n    #     result = result + 2\n    # return result\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # base case\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 2\n    elif n == 1: return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    assert type(string) == str\n    assert type(list_) == list\n    assert all([type(x) == int for x in list_])\n    assert all([type(x) == float for x in list_])\n    assert string.count('{}') == len(list_)\n    assert all([x > 0 for x in list_])\n    assert all([x >= 0 for x in list_])\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # TODO: Create a function that applies a format string to all of the elements in a list.\n    list_ = [format(x, string) for x in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        if i!= len(list_) - 1:\n            list_[i] = string.format(list_[i])\n        else:\n            list_[i] = string.format(list_[i], i)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    assert type(list_) == list, \"Input argument must be a list.\"\n    \n    for i, e in enumerate(list_):\n        list_[i] = str(e) + string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(element, string) for element in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    assert type(list_) == list, \"List is not a list.\"\n    assert type(string) == str, \"String is not a string.\"\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l1 = ['E', 'N', 'C', 'H', 'S', 'O', 'R', 'S', 'T', 'A', 'L']\n    # l2 = ['A', 'E', 'I', 'O', 'U']\n    # l3 = ['D', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'R', 'S', 'T', 'V', 'W', 'Y']\n    #\n    # my_dict = {l1[i]:{l2[i]:l3[i] for i in range(len(l1))}}\n    # print(my_dict)\n    # print(type(my_dict))\n    # for key, value in my_dict.items():\n    #     print(key)\n    #     for k, v in value.items():\n    #         print(k, v)\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) and len(l1) == len(l3):\n        dic = {}\n        for i in range(len(l1)):\n            dic[l1[i]] = {l2[i]:l3[i]}\n        return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]:{l2[i]:l3[i] for i in range(len(l2))} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{k: v for k, v in zip(l1, l2)} for l1, l2 in zip(l1, l2)]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        d1 = {}\n        d1[l1[i]] = l2[i]\n        d1[l3[i]] = l2[i]\n        result.append(d1)\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    i = 0\n    while i < len(l1):\n        new_dict[l1[i]] = {}\n        new_dict[l1[i]][l2[i]] = l3[i]\n        i += 1\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) and len(l2) == len(l3):\n        for i in range(len(l1)):\n            if isinstance(l1[i], list):\n                l1[i] = convert_list_dictionary(l1[i], l2[i], l3[i])\n            else:\n                l1[i] = dict(zip(l2[i], l3[i]))\n        return l1\n    else:\n        print(\"Lists do not have the same length.\")\n        return False\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {l1[i]:{l2[i]:l3[i] for i in range(len(l2))} for i in range(len(l1))}\n    return dict1\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary['team'] = l1[i]\n        dictionary['players'] = []\n        for j in range(len(l2)):\n            if l2[j] == l1[i]:\n                dictionary['players'].append(l3[j])\n        result.append(dictionary)\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n    return d\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n%2 == 0:\n        n = n/2\n    if n%3 == 0:\n        n = n/3\n    if n%4 == 0:\n        n = n/4\n    if n%5 == 0:\n        n = n/5\n    return n\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    s1 = get_max_sum(n/2)\n    s2 = get_max_sum(n/3)\n    s3 = get_max_sum(n/4)\n    s4 = get_max_sum(n/5)\n    if s1 >= s2:\n        if s1 >= s3:\n            if s1 >= s4:\n                return s1 + n\n            else:\n                return s4 + n\n        else:\n            if s3 >= s4:\n                return s3 + n\n            else:\n                return s4 + n\n    else:\n        if s2 >= s3:\n            if s2 >= s4:\n                return s2 + n\n            else:\n                return s4 + n\n        else:\n            if s3 >= s4:\n                return s3 + n\n            else:\n                return s4 + n\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # #Time O(n^2)\n    #     if n<=5:\n    #         return n\n    #     else:\n    #         if n%2==0:\n    #             return get_max_sum(n//2)+n\n    #         else:\n    #             return max(get_max_sum(n//2)+n,get_max_sum(n//3)+n,get_max_sum(n//4)+n,get_max_sum(n//5)+n)\n    \n    # #Time O(n)\n    #     if n<=5:\n    #         return n\n    #     else:\n    #         d=[1,n]\n    #         while True:\n    #             if n==1:\n    #                 return d[n//2]\n    #             elif n%2==0:\n    #                 n=n//2\n    #             else:\n    #                 break\n    #         while True:\n    #             if n==1:\n    #                 return d[n//3]\n    #             elif n%3==0:\n    #                 n=n//3\n    #             else:\n    #                 break\n    #         while True:\n    #             if n==1:\n    #                 return d[n//4]\n    #             elif n%4==0:\n    #                 n=n//4\n    #             else:\n    #                 break\n    #         while True:\n    #             if n==1:\n    #                 return d[n//5]\n    #             elif n%5==0:\n    #                 n=n//5\n    #             else:\n    #                 break\n    #         # return max(d[n//2],d[n//3],d[n//4],d[n//5])\n    #         return max(d[n//2]+get_max_sum(n//2),d[n//3]+get_max_sum(n//3),d[n//4]+get_max_sum(n//4),d[n//5]+get_max_sum(n//5))\n    \n    # #Time O(n)\n    #     if n<=5:\n    #         return n\n    #     else:\n    #         d=[n]\n    #         while True:\n    #             if n==1:\n    #                 return d[n//2]\n    #             elif n%2==0:\n    #                 n=n//2\n    #             else:\n    #                 break\n    #         while True:\n    #             if n==1:\n    #                 return d[n//3]\n    #             elif n%3==0:\n    #                 n=n//3\n    #             else:\n    #                 break\n    #         while True:\n    #             if n==1:\n    #                 return d[n//4]\n    #             elif n%4==0:\n    #                 n=n//4\n    #             else:\n    #                 break\n    #         while True:\n    #             if n==1:\n    #                 return d[n//5]\n    #             elif n%5==0:\n    #                 n=n//5\n    #             else:\n    #                 break\n    #         # return max(d[n//2],d[n//3],d[n//4],d[n//5])\n    #         return max(d[n//2]+get_max_sum(n//2),d[n//3]+get_max_sum(n//3),d[n//4]+get_max_sum(n//4),d[n//5]+get_max_sum(n//5))\n    \n    #Time O(n)\n         if n<=5:\n             return n\n         else:\n             d=[n]\n             while True:\n                 if n==1:\n                     return d[n//2]\n                 elif n%2==0:\n                     n=n//2\n                 else:\n                     break\n             while True:\n                 if n==1:\n                     return d[n//3]\n                 elif n%3==0:\n                     n=n//3\n                 else:\n                     break\n             while True:\n                 if n==1:\n                     return d[n//4]\n                 elif n%4==0:\n                     n=n//4\n                 else:\n                     break\n             while True:\n                 if n==1:\n                     return d[n//5]\n                 elif n%5==0:\n                     n=n//5\n                 else:\n                     break\n             # return max(d[n//2],d[n//3],d[n//4],d[n//5])\n             return max(d[n//2]+get_max_sum(n//2),d[n//3]+get_max_sum(n//3),d[n//4]+get_max_sum(n//4),d[n//5]+get_max_sum(n//5))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    max_sum = n\n    list_max_sum = [n]\n    while (n > 1):\n        next_max = max(n, n//2, n//3, n//4, n//5)\n        if next_max in list_max_sum:\n            break\n        else:\n            list_max_sum.append(next_max)\n            max_sum = max_sum - n + next_max\n            n = next_max\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    import sys\n    try:\n        n = int(n)\n        if (n < 1):\n            print (\"Invalid number.\")\n            sys.exit()\n    except:\n        print (\"Invalid input.\")\n        sys.exit()\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    if (n == 3):\n        return 4\n    else:\n        return max (n, get_max_sum_helper(n, get_max_sum_helper(n/2, n/3), n/4, n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # y = list(range(1, n+1))\n    # # list of numbers\n    # x = [1,2,3,4,5]\n    # print(x)\n    # # square root of list\n    # print(x ** (1/2))\n    # # square of list\n    # print(x ** 2)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    assert isinstance(n, int)\n    assert n >= 0\n    assert n % 2 == 0 or n % 3 == 0 or n % 4 == 0 or n % 5 == 0\n    max_sum = float('-inf')\n    for i in range(1, n + 1):\n        temp_sum = max( (get_max_sum(i//2) + get_max_sum(i//3) + get_max_sum(i//4) + get_max_sum(i//5)), i)\n        max_sum = max(temp_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result_list = input_list[0]\n    for element in input_list:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            result_list = element\n    return result_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # return max(input_list,key=len)\n    return max([len(i) for i in input_list])\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for l in input_list:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    result_list = []\n    for item in input_list:\n        result_list.append(len(item))\n    result_list.sort()\n    return result_list[-1]\n    \n    \nif __name__ == '__main__':\n    input_list = [[1, 1], [1, 2, 3], ['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e', 'f'], 'a']\n    print(max_length_list(input_list))"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    for j in range(len(input_list)):\n        if len(input_list[j]) == max_len:\n            return input_list[j]\n    return []\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    l=[]\n    m=len(input_list[0])\n    for i in range(len(input_list)):\n        if m<len(input_list[i]):\n            m=len(input_list[i])\n    for j in range(len(input_list)):\n        if m==len(input_list[j]):\n            l.append(input_list[j])\n    return l"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list.sort()\n    max_length = len(input_list[-1])\n    return input_list[-1]\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    l = []\n    max_length = 0\n    for item in input_list:\n        l.append(len(item))\n        if max_length < len(item):\n            max_length = len(item)\n    return max_length\n    \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    l = []\n    min_length = 10000000000\n    for item in input_list:\n        l.append(len(item))\n        if min_length > len(item):\n            min_length = len(item)\n    return min_length\n    \ndef are_all_strings(input_list):\n    '''\n    Write a function which return True if all elements in list are string type. Otherwise return False.\n    '''\n    is_string = True\n    for item in input_list:\n        if type(item)!= str:\n            is_string = False\n    return is_string\n    \ndef is_all_unique(input_list):\n    '''\n    Write a function to check if all items in an input_list are unique.\n    '''\n    is_unique = True\n    l = []\n    for item in input_list:\n        l.append(item)\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] == l[j]:\n                is_unique = False\n    return is_unique\n    \ndef is_all_unique_2(input_list):\n    '''\n    Write a function to check if all items in an input_list are unique.\n    '''\n    is_unique = True\n    l = []\n    for item in input_list:\n        if item in l:\n            is_unique = False\n        l.append(item)\n    return is_unique\n    \ndef are_all_ints(input_list):\n    '''\n    Write a function to check if all items in an input_list are integers. Return True if all items in list are integer type. Otherwise, return False.\n    '''\n    is_int = True\n    for item in input_list:\n        if type(item)!= int:\n            is_int = False\n    return is_int\n    \ndef is_all_ints_2(input_list):\n    '''\n    Write a function to check if all items in an input_list are integers. Return True if all items in list are integer type. Otherwise, return False.\n    '''\n    is_int = True\n    for item in input_list:\n        if type(item)!= int:\n            is_int = False\n    return is_int\n    \ndef is_all_floats(input_list):\n    '''\n    Write a function to check if all items in an input_list are float type. Return True if all items in list are float type. Otherwise, return False.\n    '''\n    is_float = True\n    for item in input_list:\n        if type(item)!= float:\n            is_float = False\n    return is_float\n    \ndef is_all_floats_2(input_list):\n    '''\n    Write a function to check if all items in an input_list are float type. Return True if all items in list are float type. Otherwise, return False.\n    '''\n    is_float = True\n    for item in input_list:\n        if type(item)!= float:\n            is_float = False\n    return is_float\n    \ndef is_all_floats_or_ints(input_list):\n    '''\n    Write a function to check if all items in an input_list are float type or integer type. Return True if all items in list are float type or integer type. Otherwise, return False.\n    '''\n    is_float_or_int = True\n    for item in input_list:\n        if type(item)!= float and type(item)!= int:\n            is_float_or_int = False\n    return is_float_or_int\n    \ndef is_all_floats_or_ints_2(input_list):\n    '''\n    Write a function to check if all items in an input_list are float type or integer type. Return True if all items in list are float type or integer type. Otherwise, return False.\n    '''\n    is_float_or_int = True\n    for item in input_list:\n        if type(item)!= float and type(item)!= int:\n            is_float_or_int = False\n    return is_float_or_int\n    \ndef are_all_same_data_type(input_list):\n    '''\n    Write a function to check if all items in an input_list have the same data type. Return True if all items in list have the same data type. Otherwise, return False.\n    '''\n    is_same_type = True\n    type_value = type(input_list[0])\n    for item in input_list:\n        if type(item)!= type_value:\n            is_same_type = False\n    return is_same_type\n    \ndef are_all_same_data_type_2(input_list):\n    '''\n    Write a function to check if all items in an input_list have the same data type. Return True if all items in list have the same data type. Otherwise, return False.\n    '''\n    is_same_type = True\n    type_value = type(input_list[0])\n    for item in input_list:\n        if type(item)!= type_value:\n            is_same_type = False\n    return is_same_type\n    \ndef are_all_strings_or_integers_2(input_list):\n    '''\n    Write a function to check if all items in an input_list have the same data type. Return True if all items in list have the same data type. Otherwise, return False.\n    '''\n    is_same_type = True\n    type_value = type(input_list[0])\n    for item in input_list:\n        if type(item)!= type_value:\n            is_same_type = False\n    return is_same_type\n    \ndef is_all_strings_or_integers(input_list):\n    '''\n    Write a function to check if all items in an input_list have the same data type. Return True if all items in list have the same data type. Otherwise, return False.\n    '''\n    is_same_type = True\n    type_value = type(input_list[0])\n    for item in input_list:\n        if type(item)!= type_value:\n            is_same_type = False\n    return is_same_type\n    \ndef min_num_in_list(input_list):\n    '''\n    Write a function to get the minimum number in an input_list. If input_list is empty, return False.\n    '''\n    if input_list == []:\n        return False\n    min_num = input_list[0]\n    for item in input_list:\n        if item < min_num:\n            min_num = item\n    return min_num\n    \ndef min_num_in_list_2(input_list):\n    '''\n    Write a function to get the minimum number in an input_list. If input_list is empty, return False.\n    '''\n    if input_list == []:\n        return False\n    min_num = input_list[0]\n    for item in input_list:\n        if item < min_num:\n            min_num = item\n    return min_num\n    \ndef max_num_in_list(input_list):\n    '''\n    Write a function to get the maximum number in an input_list. If input_list is empty, return False.\n    '''\n    if input_list == []:\n        return False\n    max_num = input_list[0]\n    for item in input_list:\n        if item > max_num:\n            max_num = item\n    return max_num\n    \ndef max_num_in_list_2(input_list):\n    '''\n    Write a function to get the maximum number in an input_list. If input_list is empty, return False.\n    '''\n    if input_list == []:\n        return False\n    max_num = input_list[0]\n    for item in input_list:\n        if item > max_num:\n        "
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #tup_list = list(test_tup)\n    #if len(test_tup)!= len(set(test_tup)):\n    #    return False\n    #else:\n    #    return True\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #return len(test_tup) == len(set(test_tup))\n    return len(test_tup) == len(set(tuple(sorted(sub)) for sub in test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup == tuple(set(test_tup)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Solution 1\n    # len_tup = len(test_tup)\n    # list_tup = list(test_tup)\n    # set_tup = set(test_tup)\n    # if len_tup == len(set_tup):\n    #     return True\n    # return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = []\n    for i in test_tup:\n        if i in test_list:\n            return False\n        else:\n            test_list.append(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct_list = []\n    for tup in test_tup:\n        if tup not in distinct_list:\n            distinct_list.append(tup)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    alphabet = {}\n    for letter in str1:\n        alphabet[letter] = 0\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict.keys():\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for i, key in enumerate(char_dict.keys()):\n        if char_dict[key] == 1:\n            return key\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    character_dict = {}\n    for character in str1:\n        if character in character_dict:\n            character_dict[character] += 1\n        else:\n            character_dict[character] = 1\n    non_repeating_char = None\n    for character in str1:\n        if character_dict[character] == 1:\n            non_repeating_char = character\n    return non_repeating_char\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_dict = {}\n    for i in range(len(str1)):\n        if str1[i] not in str_dict:\n            str_dict[str1[i]] = 1\n        else:\n            str_dict[str1[i]] += 1\n    for i in range(len(str1)):\n        if str_dict[str1[i]] == 1:\n            return str1[i]\n    return \"_\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Your code here\n    for i in range(len(str1)):\n        if str1.count(str1[i])==1:\n            return str1[i]\n    return '_'\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict={}\n    for i in str1:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    for i in str1:\n        if dict[i]==1:\n            return i\n            break\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = \"Agustin\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return [i for i in str1 if str1.lower().count(i.lower()) == 1][0]\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    import re\n    return re.findall('(?:\\W+)?(?:[a-zA-Z])[a-zA-Z]*', str1)[0]\n    # list1 = []\n    # for i in str1:\n    #     list1.append(i)\n    # for i in list1:\n    #     if list1.count(i)==1:\n    #         return i\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == '':\n        return ''\n    if str1 == None:\n        return ''\n    if len(str1) == 1:\n        return str1\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return ''\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Write your code here\n    if (string[0] == string[-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string)) \n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)!= None\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1]) \n    \nprint(check_char('a'))  \nprint(check_char('aabcdda'))  \n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(string, bool(re.match(regex,string)))\ncheck_char('mat')\ncheck_char('me')\ncheck_char('a')\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pass\n    \ndef check_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a,b,c]\n    num_list.sort()\n    n = len(num_list)\n    if n % 2 == 0:\n        m1 = num_list[n//2]\n        m2 = num_list[n//2 - 1]\n        median = (m1 + m2)/2\n    else:\n        median = num_list[n//2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    return a+b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return nsmallest(1, (a,b,c))[0]\n    \n    \n    \ndef remove_smallest_element(a,b):\n    '''\n    Given two numbers, remove the smallest of them.\n    '''\n    if a>b:\n        return a-b\n    return b-a\n    \ndef sum_triplets(a,b,c):\n    '''\n    Given three numbers, return the sum of all the numbers that can be formed by removing either two or one of the numbers.\n    '''\n    return a+b+c-min(a,b,c)\n    \ndef sum_three_numbers(a,b,c):\n    '''\n    Given three numbers, return the sum of all the numbers that can be formed by adding any two of the numbers.\n    '''\n    return a+b+c-max(a,b,c)\n    \ndef get_nth_number(a,b,c,n):\n    '''\n    Given three numbers, return the nth number (0 for a, 1 for b, 2 for c).\n    '''\n    return n%3 if n<3 else n+1-3 if n<6 else n-6 if n<9 else n-9+3\n    \ndef max_three_numbers(a,b,c):\n    '''\n    Given three numbers, return the number with the highest exponent.\n    '''\n    return max(a,b,c)\n    \ndef min_three_numbers(a,b,c):\n    '''\n    Given three numbers, return the number with the lowest exponent.\n    '''\n    return min(a,b,c)\n    \ndef max_three_numbers_without_two(a,b,c):\n    '''\n    Given three numbers, return the number with the highest exponent.\n    '''\n    if a>b and b>c:\n        return a\n    if a>c and c>b:\n        return a\n    if b>a and a>c:\n        return b\n    if b>c and c>a:\n        return b\n    if c>a and a>b:\n        return c\n    if c>b and b>a:\n        return c\n    \ndef reverse_string(a):\n    '''\n    Given a string, return the string reversed.\n    '''\n    return a[::-1]\n    \ndef string_reversed(a):\n    '''\n    Given a string, return the string with its letters reversed.\n    '''\n    return a[::-1]\n    \ndef remove_duplicates(a):\n    '''\n    Given a string, return the string with duplicate letters removed.\n    '''\n    return ''.join(list(set(a)))\n    \ndef remove_characters(a,b):\n    '''\n    Given two strings, return the string with all the characters in the first string removed.\n    '''\n    return a.replace(b,'')\n    \ndef replace_characters(a):\n    '''\n    Given a string, replace every letter with its position in the alphabet.\n    '''\n    return ''.join(str(ord(x)) for x in a)\n    \ndef check_anagrams(a,b):\n    '''\n    Given two strings, return True if they are anagrams.\n    '''\n    return sorted(a)==sorted(b)\n    \ndef rotate_string(a):\n    '''\n    Given a string, rotate the string by 1 character.\n    '''\n    return a[-1]+a[:-1]\n    \ndef to_lower_case(a):\n    '''\n    Given a string, return a copy of the string in lowercase.\n    '''\n    return a.lower()\n    \ndef check_permutation(a,b):\n    '''\n    Given two strings, return True if they are permutations of each other.\n    '''\n    return sorted(a)==sorted(b)\n    \ndef check_palindrome(a):\n    '''\n    Given a string, return True if it is a palindrome.\n    '''\n    return a==a[::-1]\n    \ndef delete_kth_last_character(a,k):\n    '''\n    Given a string, return a copy of the string with the kth last character removed.\n    '''\n    return a[:-k]\n    \ndef check_match(a,b):\n    '''\n    Given two strings, return True if they match.\n    '''\n    return a==b\n    \ndef check_match_without_replacement(a,b):\n    '''\n    Given two strings, return True if they match.\n    '''\n    return a==b\n    \ndef swap_characters(a,b):\n    '''\n    Given two strings, return the string with the first two characters swapped.\n    '''\n    return b[:2]+a[2:]\n    \ndef return_last_two_characters(a):\n    '''\n    Given a string, return the string with the first two and last two characters removed.\n    '''\n    return a[2:-2]\n    \ndef replace_characters_solution(a):\n    '''\n    Given a string, return a string where for every character in the original there are three characters.\n    '''\n    return ''.join([a[i]*3 for i in range(len(a))])\n    \ndef string_to_list_of_ints(a):\n    '''\n    Given a string, return a list of the numbers contained in the string.\n    '''\n    return [int(x) for x in a.split(' ')]\n    \ndef reverse_list_in_place(a):\n    '''\n    Given a list, reverse the list in-place.\n    '''\n    a.reverse()\n    \ndef add_integers_in_list(a):\n    '''\n    Given a list of integers, return the sum of all the elements in the list.\n    '''\n    return sum(a)\n    \ndef print_integers_in_list(a):\n    '''\n    Given a list of integers, print them out in ascending order.\n    '''\n    print(' '.join(map(str,sorted(a))))\n    \ndef flip_list_in_place(a):\n    '''\n    Given a list, flip the order of the elements in the list in-place.\n    '''\n    a.reverse()\n    \ndef duplicate_last_elements(a):\n    '''\n    Given a list, duplicate the last element and add it to the beginning.\n    '''\n    return [a[-1]]+a[:-1]\n    \ndef sum_all_even_elements(a):\n    '''\n    Given a list of numbers, return the sum of all the even numbers in the list.\n    '''\n    return sum([x for x in a if x%2==0])\n    \ndef reverse_every_other_element(a):\n    '''\n    Given a list, reverse every other element in the list in-place.\n    '''\n    return [a[x] if x%2==0 else a[x][::-1] for x in range(len(a))]\n    \ndef rotate_list(a):\n    '''\n    Given a list, rotate it to the right by one index.\n    '''\n    return a[-1:]+a[:-1]\n    \ndef largest_number(a):\n    '''\n    Given a list of numbers, return the largest number in the list.\n    '''\n    return max(a)\n    \ndef smallest_number(a):\n    '''\n    Given a list of numbers, return the smallest number in the list.\n    '''\n    return min(a)\n    \ndef create_matrix(a,b,c,d):\n    '''\n    Given the dimensions of a matrix, return a new matrix with the correct dimensions filled with zeroes.\n    '''\n    return [[0]*a for _ in range(b)]+[[0]*(c-a) for _ in range(d-b)] if c>a else [[0]*(c-a) for _ in range(d-b)]+[[0]*a for _ in range(b)]\n    \ndef string_to_list_of_integers(a):\n    '''\n    Given a string, return a list of the numbers contained in the string."
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            print(a)\n        elif b > c:\n            print(b)\n        else:\n            print(c)\n    elif a > c:\n        print(a)\n    elif b > a:\n        print(b)\n    else:\n        print(c)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a >= b and a <= c) or (a >= c and a <= b):\n        return a\n    elif (b >= a and b <= c) or (b >= c and b <= a):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if a!= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    return nums[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = [a,b,c]\n    lst.sort()\n    if len(lst)%2 == 0:\n        return (lst[int(len(lst)/2)]+lst[int(len(lst)/2)-1])/2\n    else:\n        return lst[int(len(lst)/2)]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif a<c:\n            return c\n        else:\n            return a\n    elif a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        return a\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [int(i) for i in str(sum([int(i) for i in nums]))]\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        return sum(int(i) for i in str(num))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # using map\n    return sum(map(int, str(nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s = s + num_sum(num)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(sum(map(int, str(i))))\n    return new_list\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for n in nums:\n        sum += sum_of_digits_helper(n)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in list(str(nums))])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    return sum\n    \nprint(sum_of_digits(['1','2','3']))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize the result variable\n    result = 0\n    # loop through the list and accumulate the sum\n    for num in nums:\n        result += sum(list(map(int, num)))\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    for i in range(0, len(test_tup1_list)):\n        test_tup1_list[i] = test_tup1_list[i] ^ test_tup2_list[i]\n    return tuple(test_tup1_list)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for item1, item2 in zip(test_tup1, test_tup2):\n        result.append(item1 ^ item2)\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    length = len(test_tup1)\n    result = []\n    for i in range(length):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # assigning the tuples to local variables\n    tup1, tup2 = test_tup1, test_tup2\n    # initializing an empty list\n    out_tup = []\n    # for each tuple \n    for tup1, tup2 in zip(tup1, tup2):\n        # applying bitwise xor operation\n        out_tup.append(tup1 ^ tup2)\n    return out_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (5,6,7,8)\n    def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = "
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x,y: x^y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    def bitwise_xor_tup(tup1, tup2):\n        temp = list(zip(tup1, tup2))\n        temp = [(a, b) for (a, b) in temp if a!= b]\n        if len(temp) == 0:\n            return 0\n        else:\n            return max(temp)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    test_list = []\n    for i in range(0,len(test_tup1_list)):\n        test_list.append(test_tup1_list[i]^test_tup2_list[i])\n    print(tuple(test_list))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #print(test_tup1[0])\n    #print(test_tup2[0])\n    return tuple((a ^ b) for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        if len(i) == len(set(i)):\n            count += 1\n        else:\n            continue\n    print(count)\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # your code here\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n    freq = {}\n    for x in test_list:\n        if freq.get(x):\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_dict = {}\n    for tuple in test_list:\n        if tuple not in test_dict:\n            test_dict[tuple] = 1\n        else:\n            test_dict[tuple] += 1\n    return len(test_dict.keys())\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    freq = {}\n    for i in test_list:\n        try:\n            freq[i] += 1\n        except:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    uniq = set(test_list)\n    return len(uniq)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # print(set(test_list))\n    print('Number of unique tuples in the list: {}'.format(len(set(test_list))))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return (len(set(tuple(l) for l in test_list)))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([i+j for i,j in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i],)\n    \n    return result_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for x in range(len(test_tup1)):\n        a = test_tup1[x]\n        b = test_tup2[x]\n        result.append(a+b)\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_list = []\n    for i in range(0,len(test_tup1)):\n        new_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(new_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1 = []\n    for i in range(len(test_tup1)):\n        l1.append(test_tup1[i]+test_tup2[i])\n    return tuple(l1)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    output_list = []\n    for index in range(len(test_tup1)):\n        element = test_tup1[index] + test_tup2[index]\n        output_list.append(element)\n    return tuple(output_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        result += (tup1 + tup2,)\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for index in range(len(test_tup1)):\n        new_tup.append(test_tup1[index] + test_tup2[index])\n    return tuple(new_tup)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef greater(a,b,c):   \n    '''\n    Write a python function to check if the first number is greater than the second number and the third number.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\ndef lesser(a,b,c):   \n    '''\n    Write a python function to check if the first number is lesser than the second number and the third number.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\ndef is_greater_lesser(a,b,c):   \n    '''\n    Write a python function to check if the first number is greater than the second number and the third number.\n    '''\n    if a>b and a<c:\n        return \"a is greater than b and c\"\n    elif b>a and b<c:\n        return \"b is greater than a and c\"\n    else:\n        return \"c is greater than a and b\"\n    \nprint(\"minimum(1,2):\",minimum(1,2))\nprint(\"minimum(3,2):\",minimum(3,2))\nprint(\"maximum(1,2):\",maximum(1,2))\nprint(\"maximum(3,2):\",maximum(3,2))\nprint(\"greater(1,2,3):\",greater(1,2,3))\nprint(\"greater(3,2,1):\",greater(3,2,1))\nprint(\"greater(3,1,2):\",greater(3,1,2))\nprint(\"greater(3,3,3):\",greater(3,3,3))\nprint(\"lesser(1,2,3):\",lesser(1,2,3))\nprint(\"lesser(3,2,1):\",lesser(3,2,1))\nprint(\"lesser(3,1,2):\",lesser(3,1,2))\nprint(\"lesser(3,3,3):\",lesser(3,3,3))\nprint(\"is_greater_lesser(1,2,3):\",is_greater_lesser(1,2,3))\nprint(\"is_greater_lesser(3,2,1):\",is_greater_lesser(3,2,1))\nprint(\"is_greater_lesser(3,1,2):\",is_greater_lesser(3,1,2))\nprint(\"is_greater_lesser(3,3,3):\",is_greater_lesser(3,3,3))"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        print(b)\n    else:\n        print(a)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        min=a\n    else:\n        min=b\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(input(\"Enter the first number :\"))\n    b=int(input(\"Enter the second number :\"))\n    if a>b:\n        print(\"The minimum of \",a,\" and \",b,\" is \",b)\n    else:\n        print(\"The minimum of \",a,\" and \",b,\" is \",a)\nminimum(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min_value = a\n    if a < b:\n        min_value = b\n    return min_value\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return element\n            \ndef print_tuplex(tuplex,tuple1):\n    '''\n    Write a function to print a tuple.\n    '''\n    print(tuplex)\n    \ndef check_tuplex_count(tuplex,tuple1):\n    '''\n    Write a function to count the number of times a element occurs in a tuple.\n    '''\n    return tuplex.count(tuple1)\n    \ndef print_tuplex_range(tuplex,tuple1,tuple2):\n    '''\n    Write a function to print a tuple within a specified range.\n    '''\n    for element in tuplex:\n        if element >= tuple1 and element <= tuple2:\n            print(element)\n            \ndef print_tuplex_ranger(tuplex,tuple1,tuple2):\n    '''\n    Write a function to print a tuple within a specified range.\n    '''\n    for element in tuplex:\n        if element >= tuple1 and element <= tuple2:\n            print(element)\n            \ndef sort_tuplex(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return sorted(tuplex)\n    \ndef sort_tuplex_reverse(tuplex):\n    '''\n    Write a function to sort a tuple in reverse order.\n    '''\n    return sorted(tuplex,reverse=True)\n    \ndef reverse_tuplex(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return reversed(tuplex)\n    \ndef check_tuplex_length(tuplex):\n    '''\n    Write a function to check the length of a tuple.\n    '''\n    return len(tuplex)\n    \ndef check_tuplex_value(tuplex,value):\n    '''\n    Write a function to check whether a value exists within a tuple.\n    '''\n    return value in tuplex\n    \ndef join_tuples(tuplex,tuple2):\n    '''\n    Write a function to join two tuples.\n    '''\n    return tuplex+tuple2\n    \ndef check_tuplex_membership(tuplex,tuple2):\n    '''\n    Write a function to check whether a tuple is a subset of a larger tuple.\n    '''\n    return set(tuple2).issubset(tuplex)\n    \ndef find_difference_tuplex(tuplex,tuple2):\n    '''\n    Write a function to find the difference between two tuples.\n    '''\n    return set(tuplex).difference(tuple2)\n    \ndef find_intersection_tuplex(tuplex,tuple2):\n    '''\n    Write a function to find the intersection between two tuples.\n    '''\n    return set(tuplex).intersection(tuple2)\n    \ndef check_tuplex_multiply(tuplex,tuple1):\n    '''\n    Write a function to check whether a tuple can be multiplied with a number.\n    '''\n    for element in tuplex:\n        if element*tuple1 > 0:\n            return True\n    return False\n    \ndef print_tuplex_multiply(tuplex,tuple1):\n    '''\n    Write a function to print a tuple if it can be multiplied with a number.\n    '''\n    for element in tuplex:\n        if element*tuple1 > 0:\n            print(element)\n            \ndef tuplex_multiply(tuplex,tuple1):\n    '''\n    Write a function to multiply all elements in a tuple.\n    '''\n    if check_tuplex_multiply(tuplex,tuple1) == True:\n        return tuple(element*tuple1 for element in tuplex)\n        \ndef split_tuplex(tuplex,index):\n    '''\n    Write a function to split a tuple into two smaller tuples.\n    '''\n    return tuplex[:index],tuplex[index:]\n    \ndef check_tuplex_sort(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists in a sorted tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex_sort_reverse(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists in a sorted tuple in reverse order.\n    '''\n    return tuple1 in tuplex\n    \ndef tuplex_sort(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return sorted(tuplex)\n    \ndef tuplex_sort_reverse(tuplex):\n    '''\n    Write a function to sort a tuple in reverse order.\n    '''\n    return sorted(tuplex,reverse=True)\n    \ndef print_tuplex_sort(tuplex,tuple1):\n    '''\n    Write a function to print a tuple.\n    '''\n    print(tuplex)\n    \ndef print_tuplex_sort_reverse(tuplex,tuple1):\n    '''\n    Write a function to print a tuple in reverse order.\n    '''\n    print(tuplex)\n    \ndef split_tuplex_sort(tuplex,tuple1):\n    '''\n    Write a function to split a tuple into two smaller tuples.\n    '''\n    return sorted(tuplex)[:index],sorted(tuplex)[index:]\n    \ndef split_tuplex_sort_reverse(tuplex,tuple1):\n    '''\n    Write a function to split a tuple into two smaller tuples.\n    '''\n    return sorted(tuplex,reverse=True)[:index],sorted(tuplex,reverse=True)[index:]\n    \ndef first_tuplex_last_index(tuplex,tuple1):\n    '''\n    Write a function to find the last index of an element in a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return tuplex.index(element)\n            \ndef first_tuplex_last_index_reverse(tuplex,tuple1):\n    '''\n    Write a function to find the last index of an element in a tuple in reverse order.\n    '''\n    for element in reversed(tuplex):\n        if element == tuple1:\n            return reversed(tuplex).index(element)\n            \ndef first_tuplex_sort(tuplex,tuple1):\n    '''\n    Write a function to find the last index of an element in a tuple in reverse order.\n    '''\n    return sorted(tuplex)[first_tuplex_last_index(tuplex,tuple1)]\n    \ndef first_tuplex_sort_reverse(tuplex,tuple1):\n    '''\n    Write a function to find the last index of an element in a tuple in reverse order.\n    '''\n    return sorted(tuplex,reverse=True)[first_tuplex_last_index_reverse(tuplex,tuple1)]\n    \ndef get_all_values_tuplex(tuplex,tuple1):\n    '''\n    Write a function to print all values in a tuple.\n    '''\n    return [element for element in tuplex if element == tuple1]\n    \ndef get_all_values_tuplex_reverse(tuplex,tuple1):\n    '''\n    Write a function to print all values in a tuple in reverse order.\n    '''\n    return [element for element in reversed(tuplex) if element == tuple1]\n    \ndef check_tuplex_index(tuplex,tuple1,tuple2):\n    '''\n    Write a function to check if an element exists at a specific index within a tuple.\n    '''\n    return tuple1 in tuplex[tuple2]\n    \ndef check_tuplex_index_reverse(tuplex,tuple1,tuple2):\n    '''\n    Write a function to check if an element exists at a specific index within a tupl"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuple1[0] in tuplex):\n        return True\n    elif(tuple1[1] in tuplex):\n        return True\n    elif(tuple1[2] in tuplex):\n        return True\n    elif(tuple1[3] in tuplex):\n        return True\n    elif(tuple1[4] in tuplex):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = tuple1\n    tuplex = set(tuplex)\n    tuplex = tuple(tuplex)\n    return any(item in tuplex for item in tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex) is not tuple or type(tuple1) is not tuple:\n        return False\n    for i in range(len(tuplex)):\n        if tuplex[i] in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1: \n            return True\n        else: \n            return False\n    \nprint(check_tuplex(tuplex,tuple1)"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1)==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    for i in tuplex:\n        if i in tuple1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x==tuple1:\n            print (\"element exists in the tuple\")\n        else:\n            print (\"element does not exists in the tuple\")\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"The number is even\")\n    else: \n        print(\"The number is odd\")\n    return\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = 0\n    while (x): \n        result ^= x & 1\n        x >>= 1\n    return result \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 0): \n        print(\"The parity of a number is even\") \n    else: \n        print(\"The parity of a number is odd\") \n    return\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    for i in range(len(x)):\n        if x[i]%2!= 0:\n            return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum = 0\n    while x:\n        sum = sum + 1\n        x = x & (x-1)\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2 == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    even = False\n    while(x): \n        even = not even\n        x &= x - 1\n    return even\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 1\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_arr = list(map(int, str(n)))\n    next_num = list()\n    for i in range(len(num_arr)-1, -1, -1):\n        if i == len(num_arr)-1:\n            next_num.insert(0, num_arr[i])\n            break\n        elif num_arr[i] > num_arr[i+1]:\n            next_num.insert(0, num_arr[i])\n            break\n    num_arr = list(map(int, str(next_num[0]))) + list(map(int, str(next_num[1:])))\n    next_num = int(''.join(map(str, num_arr)))\n    return next_num\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = list(map(int, str(n)))\n    # make sure the array is ascending\n    # if it is not ascending, sort it\n    # if it is ascending, swap with the right index\n    # if the length of the array is one, return the number as it is\n    if arr[-1] - arr[0] > 0:\n        arr = sorted(arr)\n        arr[-1], arr[-2] = arr[-2], arr[-1]\n    elif arr[-1] - arr[0] == 0:\n        return n\n    else:\n        arr = arr\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return n\n    prev = n[:-1]\n    last = n[-1]\n    subs = ''\n    for d in reversed(prev):\n        subs += str(int(d) > int(last))\n        last = d\n    return int(subs + last)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Get digits\n    digits = [int(digit) for digit in str(n)]\n    result = []\n    # Sort digits by descending order\n    digits.sort(reverse = True)\n    # Remove smaller digits than the last digit and add the last digit to the beginning of the list\n    for digit in digits[:digits.index(max(digits))+1]:\n        result.append(digit)\n    # Add in larger digits\n    for digit in digits[digits.index(max(digits)):]:\n        result.append(digit)\n    # Rebuild the result string\n    result_string = ''.join(str(digit) for digit in result)\n    return int(result_string)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    str_n = str(n)\n    res = []\n    for i in range(len(str_n)):\n        res.append(max(int(str_n[i]), int(str_n[i-1]) + 1))\n    return int(''.join(str(n) for n in res))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    string_n = str(n)\n    list_n = list(string_n)\n    list_n.sort(reverse=True)\n    new_list = []\n    for i in list_n:\n        new_list.append(i)\n    return \"\".join(new_list)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digit_list = []\n    for digit in str(n):\n        digit_list.append(int(digit))\n    digit_list.sort()\n    print(digit_list)\n    return int(\"\".join(map(str, digit_list)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    for i in range(len(n) - 1):\n        if int(n[i]) < int(n[i + 1]):\n            n[i], n[i + 1] = n[i + 1], n[i]\n            break\n    print(''.join(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    print(\"Number is: \", n)\n    for i in range(len(n) - 1):\n        if n[i] < n[i + 1]:\n            break\n    print(\"the index of first number is: \", i)\n    print(\"the index of last number is: \", i+1)\n    if i >= len(n) - 1:\n        return -1\n    n1 = n[:i+1]\n    n2 = n[i+1:]\n    n2 = n2[::-1]\n    n3 = n1 + n2\n    print(n3)\n    return int(n3)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(map(int, list(str(n))))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for n1 in nums1:\n        for n2 in nums2:\n            pairs.append((n1, n2))\n    heapq.heapify(pairs)\n    return pairs[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #Create a minheap with k elements.\n    pq = []\n    #initialize result array\n    res = []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heapq.heapify(result)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # O(klog(n) + nlog(k)) time\n    # O(n) space\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = [(nums1[0] + nums2[0], 0, 0)]\n    result = []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            else:\n                if num1 + num2 < min_heap[0][0]:\n                    heapq.heappushpop(min_heap, (num1 + num2, (num1, num2)))\n    return [x[1] for x in min_heap]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    pairs = []\n    \n    if k == 0 or len(nums1) == 0 or len(nums2) == 0:\n        return pairs\n    \n    min_heap = []\n    if len(nums1) >= len(nums2):\n        for num in nums2:\n            for num1 in nums1:\n                if len(min_heap) < k:\n                    heapq.heappush(min_heap, (num + num1, num1, num))\n                elif num + num1 < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num + num1, num1, num))\n                \n    else:\n        for num in nums1:\n            for num1 in nums2:\n                if len(min_heap) < k:\n                    heapq.heappush(min_heap, (num + num1, num1, num))\n                elif num + num1 < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num + num1, num1, num))\n    \n    return [pair for pair in min_heap]\n    \nprint(k_smallest_pairs([1,2,3,4,5], [6,7,8,9,10], 3))\nprint(k_smallest_pairs([1,2,3,4,5], [6,7,8,9,10], 0))\nprint(k_smallest_pairs([1,2,3,4,5], [6,7,8,9,10], 11))\nprint(k_smallest_pairs([1,2,3,4,5], [6,7,8,9,10], 10))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append((nums1[i],nums2[j]))\n    print(pairs)\n    heapq.heapify(pairs)\n    return [heapq.heappop(pairs) for _ in range(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #p1, p2 = 0, 0\n    #out = []\n    #for i in range(k):\n    #    if p1 < len(nums1) and p2 < len(nums2):\n    #        out.append(min((nums1[p1], nums2[p2])))\n    #        if nums1[p1] < nums2[p2]:\n    #            p1 += 1\n    #        else:\n    #            p2 += 1\n    #return out\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #create a dictinary to store the list of tuples\n    dict1 = {}\n    #loop through the list1 \n    for i in range(len(list1)):\n        #if the list1[i] is not in the dictionary\n        if list1[i] not in dict1:\n            #add the list1[i] to the dictionary\n            dict1[list1[i]] = []\n            #loop through the list1\n            for j in range(len(list1)):\n                #if the list1[j] is not in the dictionary\n                if list1[j] not in dict1:\n                    #add the list1[j] to the dictionary\n                    dict1[list1[j]] = []\n                    #add the list1[j] to the list of list1[i]\n                    dict1[list1[i]].append(list1[j])\n    #create a list for storing the min number of product in a given list\n    list2 = []\n    #loop through the dictionary\n    for k, v in dict1.items():\n        #loop through the list of list in the dictionary\n        for m in range(len(v)):\n            #loop through the list of list in the dictionary\n            for n in range(m+1, len(v)):\n                #calculate the product of the two list[m] and list[n] in the dictionary\n                #add the number of product to list2\n                list2.append(v[m]*v[n])\n    #calculate the minimum number of product\n    return min(list2)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #The tuples will be in the form (2,1) and the product of all the tuples will give the minimum product\n    min_prod = 1\n    #O(n)\n    for x in list1:\n        if x[0]*x[1] < min_prod:\n            min_prod = x[0]*x[1]\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # set the initial list\n    list2 = [[list1[i], list1[i+1]] for i in range(0, len(list1), 2)]\n    # set the list of products\n    list3 = [pair[0]*pair[1] for pair in list2]\n    # print(list3)\n    # return the minimum of the list of products\n    return min(list3)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    i = 0\n    min_val = list1[0]\n    while i < len(list1) - 1:\n        if min_val[0] * min_val[1] > list1[i+1][0] * list1[i+1][1]:\n            min_val = list1[i+1]\n        i += 1\n    return min_val[0] * min_val[1]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = list(set(list1))\n    list2.sort()\n    min_value = min(list2)\n    return min_value\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    from functools import reduce\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            t = tuple(sorted([list1[i], list1[j]]))\n            list2.append(t)\n    return reduce(lambda x,y: x*y,list(min(list2)))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = min(list1,key = lambda x: x[0]*x[1])\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([x * y for x, y in list1])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    for i in list1:\n        if (i[0]*i[1]) < min_product:\n            min_product = (i[0]*i[1])\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n    minval = listval[0]\n    for x in listval:\n        if x < minval:\n            minval = x\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if type(listval)!= list:\n        return None\n    min = listval[0]\n    for i in listval:\n        if type(i) in (int,float,complex):\n            if i < min:\n                min = i\n        elif type(i) == list:\n            if len(i) > 1:\n                return i[0]\n        elif type(i) == dict:\n            if len(i) > 1:\n                return i[list(i.keys())[0]]\n        elif type(i) == tuple:\n            if len(i) > 1:\n                return i[0]\n        elif type(i) == str:\n            if len(i) > 1:\n                return i[0]\n        else:\n            return None\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    assert type(listval) is list, 'Please provide a list value'\n    if len(listval) == 0:\n        return 'No list provided.'\n    else:\n        return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize value as the first element of the list.\n    min_val = listval[0]\n    # iterate through the list\n    for i in listval:\n        # if the element is less than the min_val, change the min_val\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(_\\w)', lambda x: x.group(1)[1].upper(), word)\nprint(snake_to_camel('a_b_c'))\nprint(snake_to_camel('__private_key'))\nprint(snake_to_camel('_a_B_C'))\nprint(snake_to_camel('_A_B_C'))\nprint(snake_to_camel('a_b_c'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('__private_key'))\nprint(snake_to_camel('__private_key_'))\nprint(snake_to_camel('A_B_C'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('a_b_c'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('A_B_C'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('a_b_c'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('_A_B_C'))\nprint(snake_to_camel('_A_B_C_'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B_C_'))\nprint(snake_to_camel('A_B_C__'))\nprint(snake_to_camel('A_B_C___'))\nprint(snake_to_camel('a_b_c_'))\nprint(snake_to_camel('a_b_c__'))\nprint(snake_to_camel('a_b_c___'))\nprint(snake_to_camel('A_B"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # first, split on snake_case\n    return ''.join(map(str.title,word.split('_')))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = '[a-zA-Z0-9]*'\n    s = re.findall(regex, word)\n    s = ''.join(s)\n    if len(s) > 0:\n        s = s[0].lower() + s[1:]\n    print(s)\n    return s\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n    \ndef snake_to_pascal(word):\n    '''\n    Write a function to convert the given snake case string to pascal case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_kebab(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string.\n    '''\n    return ''.join(x.capitalize() or '-' for x in word.split('_'))\n    \ndef pascal_to_snake(word):\n    '''\n    Write a function to convert the given pascal case string to snake case string.\n    '''\n    return word[0].lower() + re.sub(r'(?!^)([A-Z]+)', r'_\\1', word[1:]).lower()\n    \ndef pascal_to_camel(word):\n    '''\n    Write a function to convert the given pascal case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n    \ndef pascal_to_kebab(word):\n    '''\n    Write a function to convert the given pascal case string to kebab case string.\n    '''\n    return ''.join(x.capitalize() or '-' for x in word.split('_'))\n    \ndef kebab_to_pascal(word):\n    '''\n    Write a function to convert the given kebab case string to pascal case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef kebab_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string to snake case string.\n    '''\n    return word[0].lower() + re.sub(r'(?!^)([A-Z]+)', r'_\\1', word[1:]).lower()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'(?!^)([A-Z]+)', r'_\\1', word).lower()\n    \ndef camel_to_pascal(word):\n    '''\n    Write a function to convert the given camel case string to pascal case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef camel_to_kebab(word):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    return ''.join(x.capitalize() or '-' for x in word.split('_'))\n    \ndef snake_to_kebab(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string.\n    '''\n    return ''.join(x.capitalize() or '-' for x in word.split('_'))\n    \ndef camel_to_kebab(word):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    return ''.join(x.capitalize() or '-' for x in word.split('_'))\n    \ndef snake_to_pascal(word):\n    '''\n    Write a function to convert the given snake case string to pascal case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return word\n    \ndef pascal_to_snake(word):\n    '''\n    Write a function to convert the given pascal case string to snake case string.\n    '''\n    return word[0].lower() + re.sub(r'(?!^)([A-Z]+)', r'_\\1', word[1:]).lower()\n    \ndef kebab_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string to snake case string.\n    '''\n    return word[0].lower() + re.sub(r'(?!^)([A-Z]+)', r'_\\1', word[1:]).lower()\n    \ndef kebab_to_pascal(word):\n    '''\n    Write a function to convert the given kebab case string to pascal case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_kebab(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string.\n    '''\n    return ''.join(x.capitalize() or '-' for x in word.split('_'))\n    \ndef kebab_to_pascal(word):\n    '''\n    Write a function to convert the given kebab case string to pascal case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_kebab(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string.\n    '''\n    return ''.join(x.capitalize() or '-' for x in word.split('_'))\n    \ndef camel_to_kebab(word):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    return ''.join(x.capitalize() or '-' for x in word.split('_'))\n    \ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'(?!^)([A-Z]+)', r'_\\1', word).lower()\n    \ndef camel_to_pascal(word):\n    '''\n    Write a function to convert the given camel case string to pascal case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return word\n    \ndef pascal_to_camel(word):\n    '''\n    Write a function to convert the given pascal case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_pascal(word):\n    '''\n    Write a function to convert the given snake case string to pascal case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef kebab_to_camel(word):\n    '''\n    Write a function to convert the given kebab case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_kebab(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string.\n    '''\n    return ''.join(x.capitalize() or '-' for x in word.split('_'))\n    \ndef kebab_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string to snake cas"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    split = re.split('([_|-])',word)\n    word = ''\n    for i in range(len(split)):\n        if split[i] == '':\n            continue\n        if split[i] in ['_','-']:\n            split[i+1] = split[i+1].capitalize()\n        word += split[i]\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('_','', word)\n    word = word.title()\n    word = word.replace(\" \", \"\")\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word)==0:\n        return word\n    elif len(word)==1:\n        return word.upper()\n    else:\n        new_word=word[0].upper()\n        for i in range(1,len(word)):\n            if word[i]=='_':\n                new_word+=word[i+1].upper()\n                i+=1\n            else:\n                new_word+=word[i]\n        return new_word\ndef rotate(strng,d):\n    '''\n    Rotate the given string the given number of characters.\n    '''\n    if len(strng)==0 or len(strng)==1:\n        return strng\n    elif len(strng)==2:\n        if d>=0:\n            if strng[0]==strng[1]:\n                return strng[0]\n            else:\n                return strng\n        else:\n            if strng[0]==strng[1]:\n                return strng[1]\n            else:\n                return strng\n    else:\n        if d>=0:\n            if strng[0]==strng[1]:\n                return strng[0]\n            elif strng[1]==strng[2]:\n                return rotate(strng[1:]+strng[0],d+1)\n            else:\n                return rotate(strng[1:]+strng[0],d+1)+strng[0]\n        else:\n            if strng[0]==strng[1]:\n                return strng[0]\n            elif strng[1]==strng[2]:\n                return rotate(strng[1:]+strng[0],d+1)+strng[0]\n            else:\n                return rotate(strng[1:]+strng[0],d+1)\ndef find_number(strng):\n    '''\n    Find the first number in the given string.\n    '''\n    if len(strng)==0:\n        return strng\n    else:\n        if re.match('[0-9]',strng[0])==None:\n            return strng[0]\n        else:\n            return find_number(strng[1:])\ndef to_camel_case(strng):\n    '''\n    Write a function to convert the given string to the camel case string.\n    '''\n    if len(strng)==0:\n        return strng\n    else:\n        if re.match('[a-z]',strng[0])==None:\n            return strng[0].upper()+to_camel_case(strng[1:])\n        else:\n            return strng[0].upper()+to_camel_case(strng[1:])\ndef is_valid(strng):\n    '''\n    Write a function to check if the given string is a valid UID.\n    '''\n    if len(strng)==0:\n        return False\n    elif len(strng)>=2:\n        if re.match('[a-zA-Z]',strng[0])==None:\n            return False\n        for i in range(len(strng)-1):\n            if re.match('[a-zA-Z0-9]',strng[i])==None:\n                return False\n            if re.match('[a-zA-Z0-9]',strng[i+1])==None:\n                return False\n            if i>=1:\n                if strng[i]=='-' and strng[i-1]==strng[i+1]:\n                    return False\n                elif strng[i]==strng[i+1]:\n                    return False\n        if strng[-1]=='-':\n            return False\n    return True\ndef generate_valid_parentheses(n):\n    '''\n    Write a function to generate all valid parentheses.\n    '''\n    def generate(open,close,n,strng,res):\n        if open>=n:\n            res.append(strng)\n        else:\n            generate(open+1,close,n,strng+'(',res)\n            generate(open,close+1,n,strng+')',res)\n    if n==0:\n        return []\n    else:\n        res=[]\n        generate(0,0,n,'',res)\n        return res\ndef encode(strng):\n    '''\n    Write a function to encode the given string.\n    '''\n    if len(strng)==0:\n        return ''\n    elif len(strng)==1:\n        return strng\n    else:\n        if re.match('[a-zA-Z]',strng[0])==None:\n            return strng[0]\n        else:\n            return strng[0]+encode(strng[1:])\ndef generate_parenthesis(n):\n    '''\n    Write a function to generate all possible parentheses.\n    '''\n    def generate(open,close,res):\n        if open==0:\n            res.append(''.join(close))\n        else:\n            if open>close:\n                generate(open-1,close,res)\n            if open<n:\n                generate(open,close+1,res)\n    if n==0:\n        return []\n    else:\n        res=[]\n        generate(n,0,res)\n        return res\ndef compress_string(strng):\n    '''\n    Write a function to compress the given string.\n    '''\n    def replace_next(strng):\n        if len(strng)==0:\n            return strng\n        elif len(strng)==1:\n            return strng\n        else:\n            if strng[0]==strng[1]:\n                return replace_next(strng[1:])\n            else:\n                return strng[0]+str(len(strng[1:]))+strng[1:]\n    if len(strng)==0:\n        return strng\n    else:\n        if len(strng)==1:\n            return strng\n        else:\n            if strng[0]==strng[1]:\n                return replace_next(strng[1:])\n            else:\n                return strng[0]+str(len(strng[1:]))+strng[1:]\ndef fib(n):\n    '''\n    Write a function to return the nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\ndef rot_string(strng):\n    '''\n    Write a function to rotate the given string.\n    '''\n    if len(strng)==0:\n        return strng\n    else:\n        if len(strng)==1:\n            return strng\n        else:\n            if strng[0]==strng[1]:\n                return rot_string(strng[1:])\n            else:\n                return strng[0]+rot_string(strng[1:])\ndef get_spiral_order(arr):\n    '''\n    Write a function to return the spiral order of the given array.\n    '''\n    def get_spiral(arr,y,x,i,j,res):\n        if x<0 or y<0 or x>=len(arr) or y>=len(arr[0]) or arr[y][x]=='#':\n            return\n        else:\n            res.append(arr[y][x])\n            arr[y][x]='#'\n            get_spiral(arr,y-1,x,i,j,res)\n            get_spiral(arr,y+1,x,i,j,res)\n            get_spiral(arr,y,x-1,i,j,res)\n            get_spiral(arr,y,x+1,i,j,res)\n    if len(arr)==0:\n        return []\n    else:\n        res=[]\n        get_spiral(arr,0,0,0,0,res)\n        return res\ndef move(strng,c):\n    '''\n    Write a function to move the given character in the given string.\n    '''\n    if le"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for index, char in enumerate(word):\n        if char.isupper():\n            if index!= 0:\n                camel_case += '_' + char.lower()\n            else:\n                camel_case += char\n        else:\n            camel_case += char\n    return camel_case\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # camel = word.title().replace('_', '')\n    # return camel\n    word = re.sub('_', '', word)\n    print(word.title())\n    return word.title()\nprint(snake_to_camel('test_word_to_test'))\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = [i for i in l if i%2 == 0]\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = [i for i in l if i % 2 == 0]\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = [i for i in l if i%2 == 0]\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2!= 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # l=list(l)\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l.remove(l[i])\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    temp = []\n    for i in l:\n        if i % 2 == 0:\n            temp.append(i)\n    return temp\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in list1:\n        if len(i) < n:\n            raise Exception('Not enough items')\n    return [i[n-1] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [element[n-1] for element in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list(zip(*list1))[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1) is not list:\n        return \"Invalid input\"\n    if n >= len(list1):\n        return \"Invalid index\"\n    return list1[n][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #list_tuple = [(1,2), (3,4), (5,6), (7,8)]\n    list_tuple = list1\n    list_tuple.sort(key=lambda x: x[1])\n    print(list_tuple)\n    return list_tuple[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1)>0:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    new_list = []\n    for tuple1 in list1:\n        new_list.append(tuple1[n])\n    return new_list\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(num in list1 for num in list2)\n    "
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val1 in list1:\n        for val2 in list2:\n            if val1==val2:\n                return True\n    return False\n    \nlist1=[1,2,3,4]\nlist2=[4,5,6,7]\nprint(overlapping(list1,list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item1 in list1:\n        if item1 in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1=set(list1)\n    set2=set(list2)\n    if len(set1.intersection(set2))!=0:\n        print(\"There is an overlapping\")\n    else:\n        print(\"No overlapping\")\n    return\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    # print(list1)\n    # print(list2)\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list_check=set(list1).intersection(list2)\n    if len(list_check)>0:\n        return list_check\n    else:\n        return \"No overlapping values in the sequences\"\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    for a in list1:\n        if a in list2:\n            print(\"The value is in list2\")\n        else:\n            print(\"The value is not in list2\")\n    \n    '''\n    Write a python function to combine two dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    d3 = {}\n    for d in (d1, d2):\n        d3.update(d)\n    print(\"Combine the dictionary:\", d3)\n    \n    '''\n    Write a python function to combine the two dictionary with the help of zip.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    d3 = dict(zip(d1, d2))\n    print(\"Combine the dictionary:\", d3)\n    \n    '''\n    Write a python function to check the key exists or not in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    key = 'Age'\n    if key in d1.keys():\n        print(\"The key exists in dictionary\")\n    else:\n        print(\"The key does not exists in dictionary\")\n    \n    '''\n    Write a python function to check the key does not exists in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    key = 'Sex'\n    if key not in d1.keys():\n        print(\"The key does not exists in dictionary\")\n    else:\n        print(\"The key exists in dictionary\")\n    \n    '''\n    Write a python function to check the value exists or not in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    value = 'Second'\n    if value in d2.values():\n        print(\"The value exists in dictionary\")\n    else:\n        print(\"The value does not exists in dictionary\")\n    \n    '''\n    Write a python function to check the value does not exists in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    value = 'Sex'\n    if value not in d2.values():\n        print(\"The value does not exists in dictionary\")\n    else:\n        print(\"The value exists in dictionary\")\n    \n    '''\n    Write a python function to check the key and value exists in the dictionary or not.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    key = 'Age'\n    value = 'Second'\n    if key in d1.keys() and value in d2.values():\n        print(\"The key and value exists in dictionary\")\n    else:\n        print(\"The key and value does not exists in dictionary\")\n    \n    '''\n    Write a python function to check the key and value exists in the dictionary or not.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    key = 'Age'\n    value = 'Sex'\n    if key in d1.keys() and value in d2.values():\n        print(\"The key and value exists in dictionary\")\n    else:\n        print(\"The key and value does not exists in dictionary\")\n    \n    '''\n    Write a python function to check the key and value does not exists in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    key = 'Sex'\n    value = 'Second'\n    if key not in d1.keys() and value not in d2.values():\n        print(\"The key and value does not exists in dictionary\")\n    else:\n        print(\"The key and value exists in dictionary\")\n    \n    '''\n    Write a python function to check the key and value does not exists in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    key = 'Sex'\n    value = 'First'\n    if key not in d1.keys() and value not in d2.values():\n        print(\"The key and value does not exists in dictionary\")\n    else:\n        print(\"The key and value exists in dictionary\")\n    \n    '''\n    Write a python function to check the value exists or not in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    value = 'Second'\n    if value in d2.values():\n        print(\"The value exists in dictionary\")\n    else:\n        print(\"The value does not exists in dictionary\")\n    \n    '''\n    Write a python function to check the value exists or not in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    value = 'First'\n    if value in d2.values():\n        print(\"The value exists in dictionary\")\n    else:\n        print(\"The value does not exists in dictionary\")\n    \n    '''\n    Write a python function to check the value does not exists in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    value = 'Sex'\n    if value not in d2.values():\n        print(\"The value does not exists in dictionary\")\n    else:\n        print(\"The value exists in dictionary\")\n    \n    '''\n    Write a python function to check the value exists or not in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    value = 'First'\n    if value in d2.values():\n        print(\"The value exists in dictionary\")\n    else:\n        print(\"The value does not exists in dictionary\")\n    \n    '''\n    Write a python function to check the value does not exists in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    value = 'Sex'\n    if value not in d2.values():\n        print(\"The value does not exists in dictionary\")\n    else:\n        print(\"The value exists in dictionary\")\n    \n    '''\n    Write a python function to check the value does not exists in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    value = 'First'\n    if value not in d2.values():\n        print(\"The value does not exists in dictionary\")\n    else:\n        print(\"The value exists in dictionary\")\n    \n    '''\n    Write a python function to check the value exists or not in the dictionary.\n    '''\n    d1 = {'name': 'Python', 'Age': 6, 'Class': 'First'}\n    d2 = {'Class': 'Second', 'Subject': 'Math'}\n    value = "
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in list1:\n        if i in list2:\n            return i\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \ndef max_occured_char(string):\n    '''\n    Write a Python function to get maximum occurring character in a given string.\n    '''\n    max = 0\n    for i in string:\n        count = 0\n        for j in string:\n            if i == j:\n                count+=1\n        if count >= max:\n            max = count\n            c = i\n    return c\n    \ndef check_palindrome(string):\n    '''\n    Write a Python function to check whether a given string is a palindrome or not.\n    '''\n    length = len(string)\n    for i in range(0,length//2):\n        if string[i]!=string[length-i-1]:\n            return False\n    return True\n    \ndef find_substring_occurrences(string,substring):\n    '''\n    Write a Python function to count the occurrences of a substring in a given string.\n    '''\n    count = 0\n    length = len(substring)\n    for i in range(0,len(string)-length):\n        if string[i:i+length] == substring:\n            count+=1\n    return count\n    \ndef find_key(dictionary,value):\n    '''\n    Write a Python function to find the key of a given value in a dictionary.\n    '''\n    for i in dictionary:\n        if dictionary[i] == value:\n            return i\n    return \"Key not found\"\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    result = arr[-1]*arr[-2]\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1: \n        return []\n    max_product = arr[0] * arr[1] \n    max_pair = [0, 1] \n    \n    for i in range(0, len(arr) - 1): \n        for j in range(i + 1, len(arr)): \n            if max_product < arr[i] * arr[j]: \n                max_product = arr[i] * arr[j] \n                max_pair = [i, j]\n    return max_pair \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        print(\"Not enough input to calculate the product\")\n    max_product = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n    print(f\"Pair of numbers having highest product are: {max_pair}\")\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr_len = len(arr)\n    if arr_len < 2:\n        return None\n    if arr_len == 2:\n        return (arr[0], arr[1])\n    if arr_len == 3:\n        return max((arr[0], arr[1]), (arr[0], arr[2]), (arr[1], arr[2]))\n    n = arr_len // 2\n    m1 = max_Product(arr[:n])\n    m2 = max_Product(arr[n:])\n    return max((m1[0] * m1[1], m2[0] * m2[1]), (m1[0] * m2[1], m1[1] * m2[0]))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize max value\n    max = -sys.maxsize - 1\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # To store the maximum product from left and right subarrays\n    max_from_left = arr[0]\n    max_from_right = arr[-1]\n    n = len(arr)\n    # To store the maximum product from left and right subarrays\n    max_from_left_right = arr[0]*arr[1]\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        raise Exception(\"Array must have at least 2 integers\")\n    max_product = -1\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                first = arr[i]\n                second = arr[j]\n    return [first,second]\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = []\n    if len(arr) < 2:\n        return None\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            l.append(arr[i]*arr[j])\n    \n    print(max(l))\n    return l.index(max(l))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m = max(arr)\n    arr = [m * i for i in arr if i * m >= 0]\n    if arr:\n        return arr[-1] * arr[-2]\n    return -1\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = list()\n    for i in range(len(Input)):\n        first_element.append(Input[i][0])\n    return set(first_element)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_tuples = []\n    tuple1 = []\n    for i in Input:\n        if i[0] not in tuple1:\n            tuple1.append(i[0])\n            grouped_tuples.append([i])\n        else:\n            for j in grouped_tuples:\n                if i[0] == j[0]:\n                    j.append(i)\n                    break\n    return grouped_tuples\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Input = [(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7)]\n    #Output = [1, 2, 3, 4]\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for each_tuple in Input:\n        for each_element in each_tuple:\n            if each_element not in common_element:\n                common_element.append(each_element)\n    return common_element\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #convert list of tuples to a dictionary\n    \n    InputDict = {}\n    for t in Input:\n        InputDict[t[0]] = InputDict.get(t[0],0) + 1\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique = []\n    for item in Input:\n        if item not in unique:\n            unique.append(item)\n    return unique\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if Input[i][0] not in Output:\n            Output.append(Input[i][0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = list(Input)\n    len_of_list = len(Input)\n    if len_of_list >= 2:\n        Output = []\n        for i in range(len_of_list-1):\n            for j in range(i+1,len_of_list):\n                if Input[i][0] == Input[j][0] and Input[i] not in Output:\n                    Output.append(Input[i])\n                else:\n                    pass\n        return Output\n    else:\n        return Input\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return  list(set([i[0] for i in Input]))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('r', 10), ('a', 20), ('a', 30), ('b', 15), ('b', 15), ('b', 25)]\n    Output = []\n    Output_keys = []\n    Output_values = []\n    for i in range(len(Input)):\n        if Input[i] not in Output_keys:\n            Output_keys.append(Input[i][0])\n            Output_values.append([Input[i][1]])\n        else:\n            Output_values[Output_keys.index(Input[i][0])].append(Input[i][1])\n    print(Output_keys)\n    print(Output_values)\n    Output = [key for key in Output_keys if len(Output_values[Output_keys.index(key)])>1]\n    print(Output)\n    return Output\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = len(lst[0])\n    for i in range(len(lst)):\n        if(len(lst[i])>max):\n            max = len(lst[i])\n    print(max)\n    for i in range(len(lst)):\n        if(len(lst[i]) == max):\n            print(lst[i])\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1 = list(lst)\n    max = 0\n    for i in lst1:\n        if len(i) > max:\n            max = len(i)\n            word = i\n    return word\nprint(Find_Max([\"Hello\", \"World\", \"Today\"]))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Defining Function\n    def MaxLen(lst):\n        # using length() method to find length of list\n        max1 = len(lst)\n        # looping through elements of list\n        for i in lst:\n            # finding length of each element of list\n            max1 = max(max1, len(i))\n        return max1\n    # Calling Function\n    ans = MaxLen(lst)\n    return ans\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if(len(lst)>0):\n        Max=len(lst[0])\n        for i in range(len(lst)):\n            if(len(lst[i])>Max):\n                Max=len(lst[i])\n        return Max\n    else:\n        return -1\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = None\n    for i in lst:\n        if len(i)>len(maximum):\n            maximum = i\n    return maximum\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = len(lst[0])\n    for i in range(0,len(lst)):\n        if(len(lst[i])>max):\n            max = len(lst[i])\n    for i in range(0,len(lst)):\n        if(len(lst[i])==max):\n            return lst[i]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len) \n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in range(0, len(lst)):\n        if len(lst[i]) > len(lst[i + 1]):\n            return lst[i]\n    return lst[i + 1]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=len(lst[0]) \n    i=0\n    for i in range(len(lst)): \n        if(len(lst[i])>max): \n            max=len(lst[i]) \n            t=i\n    print(\"Element with maximum length is:\") \n    print(lst[t]) \nlst = [[1,2,3,4,5],[10,20,30,40,50],[\"python\",\"java\",'c++',\"c#\",\"php']] \nprint(\"Given List: \",lst)\nFind_Max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(len(i))\n    max_length = max(lst1)\n    for i in range(len(lst1)):\n        if lst1[i] == max_length:\n            return lst[i]\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # your code here\n    sum = 0\n    for i in list1:\n        sum = sum + i\n        i = round(i)\n    print(sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += (round(i))\n    print(total*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(len(list1), total)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = list(map(lambda x: round(x), list1))\n    return round(sum(rounded_list) * len(list1), 3)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += round(num)\n    print(sum * len(list1))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_list = 0\n    for num in list1:\n        sum_of_list += round(num)\n    print(sum_of_list * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = 0\n    for i in list1:\n        if i < 0:\n            i = -1 * i\n        s += int(i)\n    print(s)\n    return s * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 3)\n        sum += list1[i]\n    print(\"The sum of the list is: \" + str(sum) + \" and the length of the list is: \" + str(len(list1)))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for x in list1:\n        sum += math.floor(x)\n    return sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x)\n    print(total*len(list1))\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n*n*n\n    \ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact=1\n    for i in range(n):\n        fact=fact*(i+1)\n    return fact\n    \ndef is_leap(year):\n    '''\n    Write a python program to find whether a year is leap year or not.\n    '''\n    if(year%4==0 and (year%100!=0 or year%400==0)):\n        return True\n    return False\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a python program to check whether a triangle is valid or not.\n    '''\n    if(a+b>c and a+c>b and b+c>a):\n        return True\n    return False\n    \ndef square_root(n):\n    '''\n    Write a python program to find the square root of a number.\n    '''\n    return n**0.5\n    \ndef fibonacci(n):\n    '''\n    Write a python program to find the nth term of fibonacci series.\n    '''\n    return int(n%60==0)\n    \ndef nth_fibonacci(n):\n    '''\n    Write a python program to find the nth term of fibonacci series.\n    '''\n    return n if n==0 or n==1 else (nth_fibonacci(n-2)+nth_fibonacci(n-1))\n    \ndef sum_of_divisors(n): \n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    s=0\n    for i in range(1,n):\n        if(n%i==0):\n            s=s+i\n    return s\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    return n>1 and sum_of_divisors(n)==n\n    \ndef find_nth_prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    c=0\n    for i in range(2,n+1):\n        if(is_prime(i)):\n            c=c+1\n            if(c==n):\n                return i\n    return \"Wrong Input\"\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubes = []\n    for num in range(n+1):\n        if num % 2 == 0:\n            cubes.append(num**3)\n    return sum(cubes)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(2,n+1,2)])\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for num in range(n):\n        if num%2 == 0:\n            cube_sum += num ** 3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if (i%2==0):\n            sum+=i*i*i\n    return sum\nprint(cube_Sum(3))\nprint(cube_Sum(4))\nprint(cube_Sum(5))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i=0\n    sum1=0\n    while i<=n:\n        sum1+=i*i*i\n        i+=1\n    return sum1\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # n = int(input(\"enter the number: \"))\n    sum = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            sum += i**3\n    print(\"Cube Sum of first \",n,\" even natural numbers is: \",sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if i%2==0:\n            sum+=i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return int((n ** 3 + 1) / 2)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Test.assert_equals(concatenate_tuple(test_tup), 'a,b,c,d,e,f')\n    return ','.join(test_tup)\n    \n    # Solution:\n    # return ''.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    sep = '-'\n    s = \"\"\n    for i in test_tup:\n        s += str(i) + sep\n    return s\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '{delimiter}'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delim = ', '\n    return delim.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result = result + element\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out = ''\n    for i in test_tup:\n        out += i + delimiter\n    return out[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delim.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str1 = ''\n    for word in test_tup:\n        str1 += word + ','\n    str1 = str1[:-1]\n    return str1\n    \nprint(concatenate_tuple((\"apple\",\"banana\",\"cherry\")))\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        Sum += i**3\n    return Sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum=0\n    for i in range(1,n+1):\n        Sum+=i*i*i\n    return Sum/(n*n*n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    a = 1\n    sum = 0\n    for i in range(1,n+1):\n        a = a*i\n        sum += a\n    avg = sum/n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 0:\n        print(\"Incorrect input.\")\n    else:\n        Average_Of_Cube = (n * (n + 1) * (n + 2))/6\n        print(round(Average_Of_Cube, 2))\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum=0\n    for i in range(1,n+1):\n        total_sum=total_sum+i*i*i\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # base case:\n    if n == 1:\n        return 1\n    # recusive case\n    return n ** 3 + find_Average_Of_Cube(n - 1)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #start writing your code here\n    summation=0\n    for i in range(1,n+1):\n        summation=summation+i*i*i\n    average=summation/n\n    return average\nn=5\nprint(find_Average_Of_Cube(n))\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum +=i*i*i\n    print(sum)\n    avg = sum/n\n    return avg\n    \ndef find_Average_Of_Cube2(n):\n    return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[len(test_tuple)-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([tuple[-1] for tuple in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    lst = []\n    for i in test_tuple:\n        lst.append(i[-1])\n    return lst\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        sublist = list1[i] \n        if x in sublist: \n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if type(list1[i]) == type([]) and x in list1[i]: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            yield i\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # We can use the filter function to filter out\n    # the odd numbers from a list\n    odds = filter(lambda x: x % 2!= 0, nums)\n    return list(odds)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Filter odd numbers from list of numbers.\n    return [x for x in nums if x%2!=0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # nums = [1,2,3,4,5]\n    # nums = list(filter(lambda x: x%2 == 1, nums))\n    nums = [1,2,3,4,5]\n    nums = [i for i in nums if i%2 == 1]\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            nums.remove(i)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = [num for num in nums if num%2!= 0]\n    return filtered_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for x in nums:\n        if x % 2 == 1:\n            new_nums.append(x)\n    return new_nums\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'\\d{4}-\\d{2}-\\d{2}',r'\\d{2}-\\d{2}-\\d{4}',dt)\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    dt[0],dt[1],dt[2] = dt[2],dt[1],dt[0]\n    dt = \"-\".join(dt)\n    print(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt=str(dt)\n    dt=dt.split('-')\n    dt.reverse()\n    date=''\n    for i in dt:\n        date+=i\n    return date[:-2]\n    \n    \n    \ndef concatenate_words_and_numbers(sentence, seperator = '-'):\n    '''\n    Write a function which takes a string and returns a new string with all \n    numbers and words seperated by a seperator.\n    '''\n    sentence=str(sentence)\n    sentence=sentence.split(' ')\n    if len(sentence)==0:\n        return ''\n    else:\n        \n        new_string=sentence[0]\n        for i in range(1,len(sentence)):\n            if sentence[i].isnumeric():\n                new_string=new_string+seperator+sentence[i]\n            else:\n                new_string=new_string+' '+sentence[i]\n    return new_string\n    \n    \ndef split_string_on_last_occurrence(string, split_character):\n    '''\n    Write a function which takes a string and a character and returns a list where \n    the string is split at the last occurrence of the character.\n    '''\n    string=str(string)\n    if split_character in string:\n        string=string.split(split_character)\n        return string[:-1]\n    else:\n        return [string]\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'[0-9]{4}\\-[0-9]{1,2}\\-[0-9]{1,2}',dt):\n        dt = dt.split('-')\n        dt = dt[2] + '-' + dt[1] + '-' + dt[0]\n        return dt\n    else:\n        return None\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10]+\"-\"+dt[5:7]+\"-\"+dt[:4]\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import datetime\n    dt=datetime.datetime.strptime(dt,'%Y-%m-%d')\n    return dt.strftime('%d-%m-%Y')\ndef find_acc_no(text):\n    '''\n    Write a function to find account numbers using regular expression.\n    '''\n    acc_no=re.findall(r'\\d{4}\\s{1}\\d{4}\\s{1}\\d{4}',text)\n    return acc_no\ndef check_mail(text):\n    '''\n    Write a function to find email id using regular expression.\n    '''\n    email_id=re.findall(r'[\\w.]+@[\\w.]+',text)\n    return email_id\ndef check_phone_no(text):\n    '''\n    Write a function to find phone numbers using regular expression.\n    '''\n    phone_no=re.findall(r'\\d{10}',text)\n    return phone_no\ndef find_IP(text):\n    '''\n    Write a function to find IP addresses using regular expression.\n    '''\n    IP=re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}',text)\n    return IP\ndef domain_name(text):\n    '''\n    Write a function to find domain name using regular expression.\n    '''\n    domain=re.findall(r'[a-zA-Z]{1,}[.][a-zA-Z]{1,}',text)\n    return domain\ndef find_url(text):\n    '''\n    Write a function to find URL using regular expression.\n    '''\n    url=re.findall(r'(http|https)://[a-zA-Z0-9\\-]+\\.[a-zA-Z0-9\\-.]+',text)\n    return url\ndef find_all(text):\n    '''\n    Write a function to find all the URLs, email id and phone numbers in a text.\n    '''\n    result=re.findall(r'(http|https)://[a-zA-Z0-9\\-]+\\.[a-zA-Z0-9\\-.]+|[\\w.]+@[\\w.]+|\\d{10}|[0-9a-zA-Z]{10}',text)\n    return result\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_split = dt.split('-')\n    dt_date = dt_split[2]+'-'+dt_split[1]+'-'+dt_split[0]\n    return dt_date\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = list(map(lambda x: int(x), dt))\n    dt = list(map(str, dt))\n    return '-'.join(dt[::-1])\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '-'.join(dt.split('-')[::-1])\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    list_len = len(my_list)\n    gap = int(list_len/2)\n    while gap > 0:\n        for i in range(gap, list_len):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap/2)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert type(my_list) == list\n    assert all(isinstance(x, int) for x in my_list)\n    assert len(my_list) > 0\n    \n    \n    def sort(arr):\n        assert type(arr) == list\n        assert len(arr) > 0\n        \n        increment = len(arr) // 2\n        while increment > 0:\n            for i in range(increment, len(arr)):\n                key = arr[i]\n                j = i\n                while j >= increment and arr[j - increment] > key:\n                    arr[j] = arr[j - increment]\n                    j -= increment\n                arr[j] = key\n            increment //= 2\n        return arr\n    \n    return sort(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    gap = N // 2\n    while gap > 0:\n        for i in range(gap, N):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # My Solution\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            tmp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > tmp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = tmp\n        gap //= 2\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([t for t in zip(test_tup1, test_tup2) if t[0] and t[1]])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple([t1 and t2 for t1, t2 in zip(test_tup1, test_tup2)])\n    else:\n        raise Exception('Both tuples should have same length.')\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(tup1).intersection(tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] and test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(tuple(map(lambda x,y: x and y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = tuple(el1 & el2 for el1, el2 in zip(test_tup1, test_tup2))\n    return res\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if c == 0:\n        return None\n    x0 = -b/(2*a)\n    y0 = a*x0*x0 + b*x0 + c\n    return (x0, y0)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        raise ValueError\n    else:\n        return -b / (2 * a)\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    if a == 0:\n        raise ValueError\n    else:\n        return (-b) / (2 * a)\n    \ndef parabola_focus(a, b, c):\n    '''\n    Write a function to find the focus of a parabola.\n    '''\n    if a == 0:\n        raise ValueError\n    else:\n        return -c / b\n    \ndef parabola_x_intercept(a, b, c):\n    '''\n    Write a function to find the x-intercept of a parabola.\n    '''\n    if a == 0:\n        raise ValueError\n    else:\n        return c / b\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        print('a cannot be 0')\n        return\n    else:\n        d = b**2 - 4*a*c\n        if d < 0:\n            print('No real solutions')\n            return\n        else:\n            x1 = (-b + sqrt(d)) / (2 * a)\n            x2 = (-b - sqrt(d)) / (2 * a)\n            return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import numpy as np\n    import math\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = -b/(2*a)\n    print(d)\n    \nparabola_directrix(2, -8, 8)"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = (b**2) - (4*a*c)\n    if disc >= 0:\n        return (-b - disc**0.5)/(2*a)\n    elif disc == 0:\n        return -b/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b ** 2 - 4 * a * c\n    if d > 0:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n    elif d == 0:\n        x1 = -b / (2 * a)\n        x2 = None\n    else:\n        x1 = None\n        x2 = None\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def directrix_equation(a, b, c):\n        if b**2 == 4 * a * c:\n            return ((-b + (b**2 - 4 * a * c)**0.5)/(2*a))\n        elif b**2 > 4 * a * c:\n            return \"This parabola doesn't have a directrix\"\n        else:\n            return \"The directrix doesn't exist\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return None\n            else:\n                return -1 * c / 2\n        else:\n            if c == 0:\n                return -1 * b / 2\n            else:\n                return -1 * b / 2 + sqrt(c / 2)\n    else:\n        if b == 0:\n            if c == 0:\n                return None\n            else:\n                return -1 * c / 2\n        else:\n            if c == 0:\n                return -1 * b / 2\n            else:\n                return -1 * b / 2 + sqrt(c / 2)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) <= len(list2):\n        # shorter list is compared with the longer one\n        for element in list1:\n            if element in list2:\n                return True\n    else:\n        # longer list is compared with the shorter one\n        for element in list2:\n            if element in list1:\n                return True\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    if list1[0] in list2:\n        return True\n    if list2[0] in list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1).intersection(list2):\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > 0 and len(list2) > 0:\n        for x in list1:\n            if x in list2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1) & set(list2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == []:\n        return False\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #initialise empty set\n    set1 = set()\n    set2 = set()\n    #iterate through the first list\n    for i in list1:\n        #if the element is not in the set1, add to set1\n        if i not in set1:\n            set1.add(i)\n    #iterate through the second list\n    for i in list2:\n        #if the element is not in the set1, add to set1\n        if i not in set2:\n            set2.add(i)\n    #if the size of set1 is not the same as set2, they have at least one common element\n    if len(set1)!= len(set2):\n        return True\n    #otherwise, they don't have at least one common element\n    else:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1+base2)*height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1+base2)*height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(input(\"Enter the length of the base of the trapezium.\\n\"))\n    base2 = float(input(\"Enter the length of the other base of the trapezium.\\n\"))\n    height = float(input(\"Enter the height of the trapezium.\\n\"))\n    area = 0.5 * (base1 + base2) * height\n    print(area)\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print('The median length of a trapezium with bases {} and {} and height {} is {}'.format(base1,base2,height,((base1+base2)/2)*height))\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1+base2/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_total = base1 + base2\n    median = base_total/2\n    median_height = height/2\n    \n    return median_height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if number < x:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    if number > max(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > max(arr)\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    new_arr = []\n    for i in range(len(arr)):\n        if arr[i] > number:\n            new_arr.append(arr[i])\n    if new_arr:\n        print(\"True\")\n    else:\n        print(\"False\")\n    return\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print(f'Array: {arr}')\n    if number < arr[0]:\n        print('The entered number is greater than the elements of the given array.')\n    elif number > arr[-1]:\n        print('The entered number is greater than the elements of the given array.')\n    else:\n        for i in arr:\n            if number > i:\n                print('The entered number is greater than the elements of the given array.')\n            elif number < i:\n                print('The entered number is less than the elements of the given array.')\n            else:\n                print('The entered number is equal to the elements of the given array.')\n    return None\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if number > max(arr) else False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b*')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.findall(r'a+b*', text)\n    print(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall('a+b', text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab+\")\n    if pattern.search(text):\n        return \"Found a match\"\n    else:\n        return \"Not found\"\n    return pattern.search(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    if re.search(r'^ab*?$', text) == None:\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(text)\n    result = re.findall(\"ab*\",text)\n    print(result)\n    if(result):\n        print(\"Match Found\")\n    else:\n        print(\"No Match\")\n    return\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab*')\n    result = pattern.search(text)\n    print(bool(result))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'ab*', text)\n    print(result)\n    \n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'ab+', text)\n    print(result)\n    \n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'ab?', text)\n    print(result)\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall(r'ab?', text)\n    print(result)\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall(r'ab{1,2}', text)\n    print(result)\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall(r'ab{1,2}?', text)\n    print(result)\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'ab{1,2}?', 'AB', text)\n    print(result)\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'ab{1,2}?', 'AB', text, count=1)\n    print(result)\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'ab{1,2}?', 'AB', text, count=2)\n    print(result)\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'ab{1,2}?', 'AB', text, count=2)\n    print(result)\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}', text)\n    print(result)\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'(ab){1,2}', 'AB', text)\n    print(result)\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'(ab){1,2}?', 'AB', text)\n    print(result)\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'(ab){1,2}?', 'AB', text, count=2)\n    print(result)\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'(ab){1,2}?', 'AB', text, count=1)\n    print(result)\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'(ab){1,2}?', 'AB', text, count=0)\n    print(result)\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'(ab){1,2}?', 'AB', text, count=0)\n    print(result)\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.sub(r'(ab){1,2}?', 'AB', text, count=2)\n    print(result)\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(result)\n    \ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'(ab){1,2}?', text)\n    print(resul"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # list comprehension \n    return bool(re.match('a.*?b', text))\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n!=0:\n        rem=n%10\n        n=n//10\n    return rem\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Code here\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 10**14 :\n        print('The number should be less than', 10**14)\n        return None\n    if n < 0 :\n        print('The number should be greater than 0.')\n        return None\n    if type(n)!= int :\n        print('The number should be an integer.')\n        return None\n    if n < 10 :\n        return n\n    \n    elif n % 10 == 0 :\n        return last_Digit(n//10)\n        \n    else :\n        return n % 10\n    \ndef binary_to_decimal(n) :\n    '''\n    Write a python function to convert a given binary number to its corresponding decimal number.\n    '''\n    if type(n)!= str :\n        print('The number should be a string.')\n        return None\n    if n[0]!= '0' :\n        print('The number should start with 0.')\n        return None\n    if n[-1] == '0' :\n        return int(n, 2)\n        \n    else :\n        return binary_to_decimal(n[1:]) + int(n[0])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    num = int(n)\n    while(num > 10):\n        num /= 10\n    return int(num)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = [i for i in list1 if i < 0]\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\nprint(neg_nos([1,2,3,4,5,6,7,8,9,10,12,-11,0,-23]))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    print(\"Negative numbers in the list : \",list2)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [n for n in list1 if n < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    print(neg_list)\n    return neg_list\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    output = \"\"\n    for i in str1:\n        if i % 2 == 0:\n            output += i\n    return output\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i%2==0])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if not i in '13579':\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i%2==0])\nprint(remove_odd('hameet'))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(char for char in str1 if char%2==0)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if ord(c) % 2 == 0])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    str_no_odd = \"\"\n    for i in range(0, len(str1)):\n        if i % 2 == 0:\n            str_no_odd += str1[i]\n            \n    return str_no_odd\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    out = ''\n    for char in str1:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            out += char\n    return out\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        if str1[i] in \"0123456789\":\n            res += str1[i]\n    print(res)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # return ''.join([c for c in str1 if c % 2 == 0])\n    return ''.join([c for c in str1 if c not in '13579'])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(i+1, len(test_list)):\n                for l in range(len(test_list[k])):\n                    if test_list[i][j] == test_list[k][l]:\n                        total_pairs += 1\n    return total_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #print(test_list)\n    for i in range(0,len(test_list)-1,2):\n        #print(i)\n        if test_list[i] == test_list[i+1][::-1]:\n            print(test_list[i], test_list[i+1])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([(i, j) for i in test_list for j in test_list if i < j and test_list.index(i) < test_list.index(j)])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i][1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result_list = []\n    for i, (item1, item2) in enumerate(test_list):\n        result_list.append((item1, item2, i))\n    return result_list\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    print(\"count_bidirectional: \" + str(test_list))\n    if test_list == None:\n        return\n    temp_list = []\n    for i in range(len(test_list) - 1):\n        if i % 2 == 0:\n            temp_list.append((test_list[i], test_list[i + 1]))\n    for i in range(len(temp_list)):\n        if temp_list[i][1] == temp_list[i][0]:\n            print(\"count_bidirectional: \" + str((temp_list[i][0], temp_list[i][1])))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your code here\n    count = 0\n    for index, value in enumerate(test_list):\n        try:\n            if value == test_list[index + 1]:\n                count += 1\n        except:\n            pass\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your code here\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = \"\"\n    for i in range(len(L)):\n        s = s + str(L[i])\n    return int(s)\n    \ndef single_to_multiple(s):\n    '''\n    Write a function to split a single integer into a list of integers.\n    '''\n    L = []\n    while(len(s) > 0):\n        L.append(int(s[:s.find('0')]))\n        s = s[s.find('0')+1:]\n    return L\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    # Use slicing:\n    # s[::-1]\n    # We will need a variable to store the reversed string:\n    reversed_string = \"\"\n    # Loop through s and add each character to reversed_string.\n    # range(0, len(s), 1) is useful for a loop.\n    # range(0, len(s)-1, -1) is useful for a loop.\n    for i in range(0, len(s)):\n        reversed_string = reversed_string + s[i]\n    return reversed_string\n    \ndef get_all_strings(n):\n    '''\n    Write a function to generate all binary strings of length n, where n is\n    a positive integer.\n    '''\n    # Use slicing:\n    # s[i:j:k] means we will loop through s from index i, up to but not\n    # including index j, in increments of k.\n    # s[0:i:1] means we will loop through s from index 0, up to but not\n    # including index i, in increments of 1.\n    # We will need a variable to store the reversed string:\n    all_strings = []\n    # Loop through s and add each character to reversed_string.\n    # range(0, len(s), 1) is useful for a loop.\n    # range(0, len(s)-1, -1) is useful for a loop.\n    for i in range(0, len(bin(n)) - 2):\n        all_strings.append(bin(n)[i:i+n])\n    return all_strings\n    \ndef get_all_strings_bin(n):\n    '''\n    Write a function to generate all binary strings of length n, where n is\n    a positive integer.\n    '''\n    # Use slicing:\n    # s[i:j:k] means we will loop through s from index i, up to but not\n    # including index j, in increments of k.\n    # s[0:i:1] means we will loop through s from index 0, up to but not\n    # including index i, in increments of 1.\n    # We will need a variable to store the reversed string:\n    all_strings = []\n    # Loop through s and add each character to reversed_string.\n    # range(0, len(s), 1) is useful for a loop.\n    # range(0, len(s)-1, -1) is useful for a loop.\n    for i in range(0, len(bin(n)) - 2):\n        all_strings.append(bin(n)[2:i+n])\n    return all_strings\n    \ndef get_n_letter_strings(s, n):\n    '''\n    Write a function to generate all binary strings of length n, where n is\n    a positive integer.\n    '''\n    # Use slicing:\n    # s[i:j:k] means we will loop through s from index i, up to but not\n    # including index j, in increments of k.\n    # s[0:i:1] means we will loop through s from index 0, up to but not\n    # including index i, in increments of 1.\n    # We will need a variable to store the reversed string:\n    all_strings = []\n    # Loop through s and add each character to reversed_string.\n    # range(0, len(s), 1) is useful for a loop.\n    # range(0, len(s)-1, -1) is useful for a loop.\n    for i in range(0, len(s) - n + 1):\n        all_strings.append(s[i:i+n])\n    return all_strings\n    \ndef get_n_letter_strings_bin(s, n):\n    '''\n    Write a function to generate all binary strings of length n, where n is\n    a positive integer.\n    '''\n    # Use slicing:\n    # s[i:j:k] means we will loop through s from index i, up to but not\n    # including index j, in increments of k.\n    # s[0:i:1] means we will loop through s from index 0, up to but not\n    # including index i, in increments of 1.\n    # We will need a variable to store the reversed string:\n    all_strings = []\n    # Loop through s and add each character to reversed_string.\n    # range(0, len(s), 1) is useful for a loop.\n    # range(0, len(s)-1, -1) is useful for a loop.\n    for i in range(0, len(s) - n + 1):\n        all_strings.append(s[i+n-1:i+2*n-1])\n    return all_strings\n    \ndef get_n_letter_strings_bin_old(s, n):\n    '''\n    Write a function to generate all binary strings of length n, where n is\n    a positive integer.\n    '''\n    # Use slicing:\n    # s[i:j:k] means we will loop through s from index i, up to but not\n    # including index j, in increments of k.\n    # s[0:i:1] means we will loop through s from index 0, up to but not\n    # including index i, in increments of 1.\n    # We will need a variable to store the reversed string:\n    all_strings = []\n    # Loop through s and add each character to reversed_string.\n    # range(0, len(s), 1) is useful for a loop.\n    # range(0, len(s)-1, -1) is useful for a loop.\n    for i in range(0, len(s) - n + 1):\n        all_strings.append(s[i:i+n])\n    return all_strings\n    \ndef get_substring(s, n):\n    '''\n    Write a function to find the substring of length n in the string.\n    '''\n    # Use slicing:\n    # s[i:j:k] means we will loop through s from index i, up to but not\n    # including index j, in increments of k.\n    # s[0:i:1] means we will loop through s from index 0, up to but not\n    # including index i, in increments of 1.\n    # We will need a variable to store the reversed string:\n    all_strings = []\n    # Loop through s and add each character to reversed_string.\n    # range(0, len(s), 1) is useful for a loop.\n    # range(0, len(s)-1, -1) is useful for a loop.\n    for i in range(0, len(s) - n + 1):\n        all_strings.append(s[i:i+n])\n    return all_strings\n    \ndef get_n_letter_strings_s(s, n):\n    '''\n    Write a function to generate all binary strings of length n, where n is\n    a positive integer.\n    '''\n    # Use slicing:\n    # s[i:j:k] means we will loop through s from index i, up to but not\n    # including index j, in increments of k.\n    # s[0:i:1] means we will loop through s from index 0, up to but not\n    # including index i, in increments of 1.\n    # We will need a variable to store the reversed string:\n    all_strings = []\n    # Loop through s and add each character to reversed_string.\n    # range(0, len(s), 1) is useful for a loop.\n    # range(0, len(s)-1, -1) is useful for a loop.\n    for i in range(0, len(s) - n + 1):\n        all_strings.append(s[i:i+n])\n    return all_strings\n    \ndef is_palindrome(s):\n    '''"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return int(''.join([str(i) for i in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    print(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    new_num = \"\"\n    for i in L:\n        new_num += str(i)\n    return int(new_num)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    str_number = ''\n    for i in L:\n        str_number += str(i)\n    return int(str_number)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # d_values = {}\n    # for i in L:\n    #     if i in d_values:\n    #         d_values[i] += 1\n    #     else:\n    #         d_values[i] = 1\n    # single = 0\n    # for i in d_values:\n    #     single += i * d_values[i]\n    # return single\n    return sum([(i * 10 ** d_values[i]) for i in L])\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a = []\n    for i in text.split():\n        m = re.findall(r'\\w+ly',i)\n        if m:\n            a.append((i,m[0]))\n    return a\n    \nprint(find_adverb_position(\"The quick brown fox jumps over the lazy dog\"))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'(?=\\b(adj|adv)\\b)')\n    result = pattern.finditer(text)\n    list_of_matches = []\n    for match in result:\n        list_of_matches.append(match)\n    return list_of_matches\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(\"(?:ADV\\b|ADV(\\W))\", text)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Write a regex pattern to match adverbs.\n    pattern = r'\\b[a-z]{2,20}ly'\n    # Find all matches of the pattern in text.\n    adverbs = re.findall(pattern,text)\n    # Return the matches.\n    return adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regex to find adverbs\n    result = re.search(r\"\\w+ly|\\w+ness\", text)\n    if result is None:\n        return -1, -1\n    else:\n        # Save the location of the first adverb\n        position = result.span()[0]\n        return position, position + len(result.group())\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = \"^\\w+(([^,]+,)|(,+\\s+))\\w+\"\n    result = re.findall(pattern, text)\n    adverb_position = []\n    for word in result:\n        adverb_position.append(word[0])\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos = []\n    for i in range(len(text)):\n        if re.match('(ADVB|ADV)', text[i]):\n            pos.append(i+1)\n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find position of first adverb in given text\n    first_adverb_position = re.search(r\"\\s([a-zA-Z]\\w*)\\s\",text)\n    #print(first_adverb_position.group(1))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text\n    result = []\n    adverb = []\n    for index, sentence in enumerate(sentence):\n        word = sentence.split(' ')\n        for index_word, words in enumerate(word):\n            if words.endswith('ly') or words.endswith('ing') or words.endswith('s') or words.endswith('ed'):\n                adverb.append(index)\n                adverb.append(index_word)\n                result.append(adverb)\n                adverb = []\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # search the text for any adverbial phrase and return the position\n    result = re.search(r'\\w+ly', text)\n    # if there is one adverbial phrase then return the postion of the first adverbial phrase\n    if result:\n        return result.start()\n    # if there is no adverbial phrase then return None\n    return None\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6 * l**2\n    return sa\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    surface_area=6*l**2\n    return surface_area\n    \nprint(surfacearea_cube(5))\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a=l*l*l\n    print(\"surface area of cube with l =\",l, \"is :\",a)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2 * 6\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l = int(l)\n    sa = 6 * (l**2)\n    return sa\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for x in nums:\n        if x>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n    \ndef positive_count_2(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i >= 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    total = 0\n    for i in nums:\n        total += 1\n        if i > 0:\n            positives += 1\n    ratio = float(positives / total) * 100\n    print('{:.2f} %'.format(ratio))\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    result = 0\n    for i in nums:\n        if i > 0:\n            result += 1\n    return result / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # The above function is called a closure.\n    positive_nums = filter(lambda n: n > 0, nums)\n    return len(list(positive_nums)) / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # return max(list1)\n    i = 0\n    while i < len(list1):\n        if list1[i] < 0:\n            return list1[i]\n        i += 1\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # return max(num for num in list1 if num < 0)\n    # using lambda functions\n    return max(list1, key=lambda x: x if x < 0 else -1)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            return list1[i]\n    return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    result = None\n    for x in list1:\n        if result is None or x < result:\n            result = x\n    return result\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = 0\n    for i in list1:\n        if i < 0 and i > largest_neg:\n            largest_neg = i\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l = len(list1)\n    # list1.sort()\n    # print list1[-1]\n    return l\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for x in range(0, len(list1)):\n        if list1[x]<0:\n            return list1[x]\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #initialize the result variable\n    result = 0\n    #search the list for the largest negative number\n    for i in list1:\n        if i<0 and i > result:\n            result = i\n    #return the result\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:-K] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:-K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for x in test_list:\n        if len(x)>K:\n            new_list.append(x[:K])\n        else:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize the trimmed list\n    trimmed_list = []\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for x in test_list:\n        if len(x) > K:\n            x = x[:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_tuple_list = []\n    for tuple in test_list:\n        tuple_trim = tuple[K:]\n        new_tuple_list.append(tuple_trim)\n    return new_tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple([x for i, x in enumerate(y) if i < K]) for y in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    i = 0\n    while i < len(test_list):\n        if len(test_list[i]) > K:\n            test_list.pop(i)\n        else:\n            i += 1\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your code goes here\n    return None\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][0:K]\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    l1 = []\n    for i in range(len(test_tup1)):\n        l1.append(test_tup1[i] * test_tup2[i])\n    return tuple(l1)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i * j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [i * j for i, j in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] * test_tup2[i],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    assert isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple), 'Input should be of type tuple'\n    return tuple([elm * elm2 for elm, elm2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple( i * j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = list()\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] * test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_list = []\n    for i in range(len(test_tup1)):\n        multiplication_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(multiplication_list)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index = 0\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        print(\"The product of the index {} is : \".format(index), tup1 * tup2)\n        index += 1\n        \ntest_tup1 = (5, 7, 10)\ntest_tup2 = (3, 4, 1)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # test_tup1 = (1,2,3)\n    # test_tup2 = (4,5,6)\n    # print(index_multiplication(test_tup1, test_tup2))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrences = []\n    for i in range(0, len(tup)):\n        #checking if the element is in the tuple\n        if tup[i] in lst:\n            #check if it is already in the list of occurences\n            if tup[i] not in occurrences:\n                occurrences.append(tup[i])\n    return occurrences\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = [] \n    for item in tup: \n        if type(item) == tuple: \n            lst.append(item[0])\n        elif type(item) == list: \n            lst.append(item[0])\n        elif type(item) == str: \n            lst.append(item)\n        elif type(item) == int: \n            lst.append(item)\n    for i in set(lst): \n        print((i, lst.count(i)), end = \" \") \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup=tuple(lst)\n    d={} \n    for i in range(len(tup)): \n        d[tup[i]]=tup.count(tup[i]) \n    return d \nlst=['a', 'a', 'b', 'a', 'a', 'a', 'b', 'c', 'd', 'e', 'f', 'f', 'g', 'h'] \ntup=('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h') \nprint(count_Occurrence(tup, lst)) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for ele in tup:\n        if ele in lst:\n            print(f'{ele}: {tup.count(ele)}') \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = []\n    for el in tup:\n        if lst == el:\n            res.append(el)\n    return res\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for tup_ele in tup:\n        if tup_ele in lst:\n            lst[tup_ele] += 1\n    return lst \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = Counter(lst) \n    return(d.items()) "
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if type(lst) is list:\n        lst = set(lst)\n        dct = Counter(tup) \n        lst = set(dct.values())\n        return list(lst)\n    else:\n        return 0\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # return a dictionary of elements in tuple and their occurence\n    return dict(Counter(lst) for lst in tup) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    print(\"Count Occurrence\")\n    lst=sorted(lst)\n    cnt = Counter(lst) \n    print(cnt)\n    for i in tup: \n        print(i, \" = \", cnt[i]) \n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # function definition goes here\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes_list = []\n    for num in nums:\n        cubes_list.append(num ** 3)\n    return cubes_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    results = []\n    for i in nums:\n        results.append(i**3)\n    return results\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i ** 3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 1\n    return 2 * (n+1) * cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 1\n    b = 2\n    sum = 0\n    while a <= n:\n        while b <= n:\n            if a*b == (a+b)*(a+b+1)/2:\n                sum += a+b\n            b += 1\n        a += 1\n        b = a+1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += perrin_number(i)\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum([a for a in range(1,n+1) if n%(2*a)==0 and n%(2*a)%a==0])\n    \ndef cal_palindrome(n):\n    '''\n    Write a function to calculate the sum of palindromic numbers.\n    '''\n    return sum([a for a in range(1,n+1) if str(a)==str(a)[::-1]])\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i * (2 * i - 1) // 2\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if n % 2 == 0:\n            total += i * 4\n        else:\n            total += i * 6\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #Initialize a list for the sum\n    sum = []\n    for i in range(0,n+1):\n        sum.append(0)\n        \n    #Calculate the sum of perrin numbers\n    for i in range(2,n+1):\n        for j in range(1,int(math.sqrt(i))+1):\n            if i % j == 0:\n                sum[i] += j\n                if j!= 1 and j!= i:\n                    sum[i] += i/j\n                if sum[i] > n:\n                    break\n        if sum[i] <= n:\n            sum[i] = 1\n            \n    #Print the sum\n    for i in range(2,n+1):\n        if sum[i] == 1:\n            print(i)\n        \ndef create_dic(l):\n    '''\n    Write a function to create the dictionary from a list.\n    '''\n    dic = {}\n    for i in l:\n        dic[i] = []\n    return dic\n    \ndef cal_sum_dic(n,dic):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #Initialize a list for the sum\n    sum = create_dic(dic)\n    for i in range(2,n+1):\n        for j in range(1,int(math.sqrt(i))+1):\n            if i % j == 0:\n                if j!= 1 and j!= i:\n                    sum[i].append(i/j)\n                sum[i].append(j)\n                if sum[i] > n:\n                    break\n        if sum[i] <= n:\n            sum[i] = 1\n            \n    #Print the sum\n    for i in range(2,n+1):\n        if sum[i] == 1:\n            print(i)\n        \ndef write_to_file(l):\n    '''\n    Write the dictionary to a file\n    '''\n    dic_file = open('perrin_dic.txt','w')\n    for i in l:\n        dic_file.write(str(i)+\"\\t\"+str(l[i])+\"\\n\")\n    dic_file.close()\n    \ndef read_from_file():\n    '''\n    Read the file back to the dictionary\n    '''\n    dic_file = open('perrin_dic.txt','r')\n    l = dic_file.readlines()\n    l_ls = []\n    for i in l:\n        l_ls.append(i[:-1])\n    dic_file.close()\n    return l_ls\n    \nif __name__ == '__main__':\n    #a = cal_sum(5)\n    #print(a)\n    #l = create_dic(a)\n    #cal_sum_dic(5,l)\n    #write_to_file(l)\n    #print(read_from_file())\n    pass\n    "
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Returns the sum of perrin numbers from 1 to n.\n    return n * (3*n + 1) // 2\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        return 'Invalid Input'\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 2)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for s in str:\n        if len(s) == l:\n            res.append(s)\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    a = []\n    for i in l:\n        if len(i) == l:\n            a.append(i)\n    return a\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    strings = []\n    for string in str:\n        strings.append(string[:l])\n    return strings\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # l = [str for str in input(\"Enter list of strings with space : \").split()]\n    l1 = []\n    for i in range(len(l)):\n        if len(l[i]) == l:\n            l1.append(l[i])\n    return l1\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for i in range(l):\n        str_list.append(str[i::l])\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in l:\n        s += i[0:l]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    length = len(l)\n    result = []\n    for i in range(0, length):\n        s = str[0:l[i]]\n        result.append(s)\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    j = 0\n    for x in str:\n        j += 1\n        if j >= l:\n            return(x)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(str[l[0]:l[1]])\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # text1 = \"I am going to the %s. I'm interested in %s\" % ('python','movies')\n    # print(text1)\n    text = text1.strip()\n    # print(text)\n    # print(text.replace(\" \", \"\"))\n    text1 = re.sub(' +',' ',text)\n    # print(text1)\n    text = text1.strip()\n    # print(text)\n    return text\n    \n    # return \" \".join(text1.split())\n    "
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    text1 = re.sub(r'[\\s]+', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result=text1.replace(\" \",\"\")\n    return result\ndef find_longest_word(text1):\n    '''\n    Write a function to find the longest word in the given string.\n    '''\n    text1=text1.split()\n    max_length=len(text1[0])\n    max_word=text1[0]\n    for word in text1:\n        if(len(word)>max_length):\n            max_word=word\n            max_length=len(word)\n    return max_word\ndef find_nth_word(text1,n):\n    '''\n    Write a function to return the nth word in the given string.\n    '''\n    text1=text1.split()\n    return text1[n-1]\ndef text_justification(text1,max_len):\n    '''\n    Write a function to return the string with each line having equal number of characters.\n    '''\n    text1=text1.split(\" \")\n    result=[]\n    result.append(text1[0])\n    sum=len(text1[0])\n    for word in text1[1:]:\n        if(sum+len(word)+1<=max_len):\n            result[-1]+=(\" \"+word)\n            sum+=len(word)+1\n        else:\n            sum=len(word)\n            result.append(word)\n    for index,line in enumerate(result):\n        result[index]=line.ljust(max_len)\n    return \" \".join(result)\ndef decode_morse(text1):\n    '''\n    Write a function to return the decoded string of morse code of the given string.\n    '''\n    decode={}\n    decode['A']='\u00b7\u2212'\n    decode['B']='\u2212\u00b7\u00b7\u00b7'\n    decode['C']='\u2212\u00b7\u2212\u00b7'\n    decode['D']='\u2212\u00b7\u00b7'\n    decode['E']='\u00b7'\n    decode['F']='\u00b7\u00b7\u2212\u00b7'\n    decode['G']='\u2212\u2212\u00b7'\n    decode['H']='\u00b7\u00b7\u00b7\u00b7'\n    decode['I']='\u00b7\u00b7'\n    decode['J']='\u00b7\u2212\u2212\u2212'\n    decode['K']='\u2212\u00b7\u2212'\n    decode['L']='\u00b7\u2212\u00b7\u00b7'\n    decode['M']='\u2212\u2212'\n    decode['N']='\u2212\u00b7'\n    decode['O']='\u2212\u2212\u2212'\n    decode['P']='\u00b7\u2212\u2212\u00b7'\n    decode['Q']='\u2212\u2212\u00b7\u2212'\n    decode['R']='\u00b7\u2212\u00b7'\n    decode['S']='\u00b7\u00b7\u00b7'\n    decode['T']='\u2212'\n    decode['U']='\u00b7\u00b7\u2212'\n    decode['V']='\u00b7\u00b7\u00b7\u2212'\n    decode['W']='\u00b7\u2014\u2014'\n    decode['X']='\u2212\u00b7\u00b7\u2212'\n    decode['Y']='\u2212\u00b7\u2014\u2014'\n    decode['Z']='\u2212\u2212\u00b7\u00b7'\n    decode['1']='\u00b7----'\n    decode['2']='\u00b7\u00b7---'\n    decode['3']='\u00b7\u00b7\u00b7--'\n    decode['4']='\u00b7\u00b7\u00b7\u00b7-'\n    decode['5']='\u00b7\u00b7\u00b7\u00b7\u00b7'\n    decode['6']='\u2212\u00b7\u00b7\u00b7\u00b7'\n    decode['7']='--\u00b7\u00b7\u00b7'\n    decode['8']='---\u00b7\u00b7'\n    decode['9']='----\u00b7'\n    decode['0']='----- '\n    decode['.']='\u00b7\u2212\u00b7\u2212\u00b7'\n    decode[',']='\u2212\u2212\u2212\u00b7\u2212'\n    decode['?']='\u00b7\u00b7--\u00b7\u00b7'\n    decode['!']='\u2212\u2212\u00b7\u2212\u00b7'\n    decode['-']='\u2212\u00b7\u00b7\u00b7'\n    decode['/']='\u2212\u00b7\u2212\u2212'\n    decode['(']='\u2212\u00b7\u2212.'\n    decode[')']='\u2212\u00b7\u2212\u00b7'\n    decode['&']='\u00b7\u2212\u00b7'\n    decode['$']='\u00b7\u00b7\u00b7\u2212'\n    decode['=']='\u00b7\u2212\u00b7\u2212'\n    decode['+']='\u00b7\u2212\u2212.\u2212'\n    decode['@']='\u00b7\u2212\u2212\u2212\u00b7'\n    decode[' ']='  '\n    decode['\\n']='\\n'\n    text1=text1.split('/')\n    text1='/'.join([decode[letter] for letter in text1])\n    return text1\ndef make_readable(text1):\n    '''\n    Write a function to return the text with all words in the given text split by a space and the word made readable by capitalizing the first letter of every word.\n    '''\n    text1=text1.split(' ')\n    text1=[word[0].upper()+word[1:] for word in text1]\n    return \" \".join(text1)\ndef merge_the_tools(string, k):\n    '''\n    Write a function to return the string of length k in which the character frequency of each character in the original string is equal to atmost k.\n    '''\n    string=string.split(' ')\n    result=[]\n    temp=[]\n    for word in string:\n        if(len(word)<k):\n            result.append(word)\n        else:\n            while(len(word)>k):\n                for letter in word:\n                    if(word.count(letter)>k):\n                        temp.append(letter)\n                        word=word.replace(letter,'')\n                result.append(word)\n            result.append(word)\n            while(len(temp)>0):\n                result.append(temp.pop())\n    return \" \".join(result)\ndef count_substring(string,substring):\n    '''\n    Write a function to return the number of times that the given substring occurs in the given string.\n    '''\n    count=0\n    i=0\n    while(i<len(string)-len(substring)+1):\n        if(string[i:i+len(substring)]==substring):\n            count+=1\n            i+=len(substring)\n        else:\n            i+=1\n    return count\ndef validate_credit_card(cc_num):\n    '''\n    Write a function to return the validity of the given credit card number.\n    '''\n    regex1=re.compile(r'^[456]')\n    regex2=re.compile(r'(\\d)\\1{3}')\n    regex3=re.compile(r'(\\d)\\1{2}')\n    if(regex1.match(cc_num)):\n        if(regex2.search(str(cc_num)[0:len(str(cc_num))-1])):\n            return False\n        elif(regex3.search(str(cc_num)[0:len(str(cc_num))-1])):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef prime_factorization(n):\n    '''\n    Write a function to return the list of prime factors of the given number.\n    '''\n    result=[]\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            result.append(i)\n            n=n//i\n        else:\n            i+=1\n    result.append(n)\n    return result\ndef make_change(n,c):\n    '''\n    Write a function to return the minimum number of coins required to make change for the given number.\n    '''\n    coins=[25,10,5,1]\n    result=0\n    for coin in coins:\n        result+=n//coin\n        n=n%coin\n    return result\ndef fibonacci_sum(n):\n    '''\n    Write a function to return the sum of the first n Fibonacci numbers.\n    '''\n    result=[]\n    result.append(0)\n    result.append(1)\n    for i in range(2,n+1):\n        result.append(result[i-2]+result[i-1])\n    return result[-1]\ndef count_div(n):\n    '''\n    Write a function to return the number of divisors of the given number.\n    '''\n    result=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            result+=1\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # text1 = input(\"Enter the string\")\n    text1 = re.sub(\"[\\n\\t\\s]*\", \"\", text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return \" \".join(text1.split())\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss < 0:\n        return 0\n    else:\n        return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        loss_amount = actual_cost-sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss < 0:\n        return 0\n    else:\n        return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount-actual_cost\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(2, int(math.sqrt(n) + 1)) :\n        if n % i == 0 :\n            factors.append(i)\n    if sum(factors) == n :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i=1\n    sum=0\n    while i<n:\n        if n%i==0:\n            if i%2==0:\n                sum+=i\n        i+=1\n    return sum\n    \ndef printSquareOfDigits(n) : \n    '''\n    Write a python function to print the square of digits of a number.\n    '''\n    i=1\n    while i<=n:\n        print(int(i*i),end=' ')\n        i+=1\n    return\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    sqrt = int(math.sqrt(n))\n    for i in range(1, sqrt+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i\n            elif i % 2 == 1 : \n                sum += 0\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    if n == 0:\n        return 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\nprint(sumofFactors(126)) \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    a = []\n    sum = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            if (i % 2 == 0):\n                a.append(i)\n                sum += i\n    if n == 0:\n        return 0\n    elif n % 2!= 0:\n        return -1\n    else:\n        return sum \n    \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, int(n/2)+1) :\n        if (n % i == 0) :\n            s += i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1,n+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                total += i \n    return total \ndef isPrime(n) : \n    '''\n    Write a python function to find whether a number is prime or not. \n    '''\n    flag = False\n    if (n <= 1) : \n        flag = False \n    for i in range(2,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            flag = False\n            break\n        flag = True\n    return flag \ndef isPerfect(n) : \n    '''\n    Write a python function to find whether a number is perfect or not. \n    '''\n    flag = False\n    sum = 0\n    for i in range(1,n) : \n        if (n%i == 0) : \n            sum += i \n    if (sum == n) : \n        flag = True\n    return flag \ndef isPerfectSqrt(n) : \n    '''\n    Write a python function to find whether a number is perfect square or not. \n    '''\n    flag = False\n    s = int(math.sqrt(n))\n    if (s*s == n) : \n        flag = True\n    return flag \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not. \n    '''\n    a = 0\n    b = 1\n    c = a+b\n    while (c < n) : \n        c = a+b \n        a = b \n        b = c \n    if (c == n) : \n        return True\n    return False \ndef largestPrimeFactor(n) : \n    '''\n    Write a python function to find the largest prime factor of a number. \n    '''\n    i = 2\n    while (i < n) : \n        if (n%i == 0) : \n            if (isPrime(i)) : \n                return i \n        i += 1\n    return n \ndef largestPrimeFactor2(n) : \n    '''\n    Write a python function to find the largest prime factor of a number. \n    '''\n    i = 2\n    while (i < int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (isPrime(i)) : \n                return i \n        i += 1\n    return n \ndef numberOfDivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1 \n    i = 2 \n    while (i <= math.sqrt(n)) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += 1\n            else : \n                total += 2\n        i += 1\n    return total \ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1\n    i = 2 \n    while (i <= math.sqrt(n)) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += i \n            else : \n                total += (i+n/i)\n        i += 1\n    return total \ndef sumofDivisors2(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1 \n    i = 2 \n    while (i <= math.sqrt(n)) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += i \n            else : \n                total += (i+n/i)\n        i += 1\n    return total \ndef sumofDivisors3(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1 \n    i = 2 \n    while (i <= int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += i \n            else : \n                total += (i+n/i)\n        i += 1\n    return total \ndef sumofDivisors4(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1 \n    i = 2 \n    while (i <= math.sqrt(n)) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += i \n            else : \n                total += (i+n/i)\n        i += 1\n    return total \ndef sumofDivisors5(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1 \n    i = 2 \n    while (i <= int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += i \n            else : \n                total += (i+n/i)\n        i += 1\n    return total \ndef sumofDivisors6(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1 \n    i = 2 \n    while (i <= math.sqrt(n)) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += i \n            else : \n                total += (i+n/i)\n        i += 1\n    return total \ndef sumofDivisors7(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1 \n    i = 2 \n    while (i <= int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += i \n            else : \n                total += (i+n/i)\n        i += 1\n    return total \ndef sumofDivisors8(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1 \n    i = 2 \n    while (i <= math.sqrt(n)) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += i \n            else : \n                total += (i+n/i)\n        i += 1\n    return total \ndef sumofDivisors9(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    if (n<=1) : \n        return 0\n    total = 1 \n    i = 2 \n    while (i <= math.sqrt(n)) : \n        if (n%i == 0) : \n            if (n/i == i) : \n                total += i \n            else : \n                total += (i+n/i)\n        i +"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(1, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            res = res + i \n            if (i!= (n // i)): \n                res = res + n // i \n    return res \ndef isPrime(n) :\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef primeList(n) :\n    '''\n    Write a python function to generate a list of all the primes upto n.\n    '''\n    result = []\n    for i in range(2, n+1):\n        if isPrime(i):\n            result.append(i)\n    return result \ndef isPerfectSquare(n) :\n    '''\n    Write a python function to check if a number is perfect square or not.\n    '''\n    x = int(math.sqrt(n))\n    return (x * x == n) \ndef isFibonacci(n) :\n    '''\n    Write a python function to check if a number is fibonacci or not.\n    '''\n    return isPerfectSquare(5 * n * n + 4) or isPerfectSquare(5 * n * n - 4) \ndef numberOfPrimefactors(n) :\n    '''\n    Write a python function to find the number of prime factors of a number.\n    '''\n    res = 0\n    for i in primeList(n) :\n        if n % i == 0 :\n            res += 1\n    return res \ndef computeGCD(a, b): \n    '''\n    Write a python function to find the gcd of a and b.\n    '''\n    if a == 0 : \n        return b \n    return computeGCD(b % a, a) \ndef computeLCM(a, b): \n    '''\n    Write a python function to find the lcm of a and b.\n    '''\n    return (a * b) // computeGCD(a, b) \ndef computeHcf(a, b): \n    '''\n    Write a python function to find the hcf of a and b.\n    '''\n    if(a == 0): \n        return b; \n    return computeHcf(b % a, a); \ndef computeSumOfDigits(n): \n    '''\n    Write a python function to compute the sum of digits of a number.\n    '''\n    sum = 0\n    while(n!= 0): \n        sum = sum + n % 10\n        n = n // 10\n    return sum \ndef findFactors(n): \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    result = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            result.append(i)\n            if (i!= (n // i)): \n                result.append(n // i)\n    return result\ndef computeSumOfDigitsRec(n, sum=0): \n    '''\n    Write a python function to compute the sum of digits of a number using recursion.\n    '''\n    sum = 0\n    if(n == 0): \n        return 0\n    sum = sum + (n % 10) \n    return computeSumOfDigitsRec(n // 10, sum) \ndef findDigits(n): \n    '''\n    Write a python function to find the digits of a number.\n    '''\n    result = []\n    while(n!= 0): \n        result.append(n % 10) \n        n = n // 10\n    return result \ndef computeProductofDigits(n): \n    '''\n    Write a python function to compute the product of digits of a number.\n    '''\n    product = 1\n    while(n!= 0): \n        product = product * (n % 10) \n        n = n // 10\n    return product \ndef computeArmstrongNumber(n): \n    '''\n    Write a python function to compute the armstrong number of a number.\n    '''\n    sum = 0\n    temp = n \n    while(temp!= 0): \n        digit = temp % 10\n        sum += computeSumOfDigits(digit ** 3) \n        temp = temp // 10\n    if(sum == n): \n        return True\n    return False\ndef computePerfectNumber(n): \n    '''\n    Write a python function to compute the perfect number of a number.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if(n % i == 0): \n            sum += i \n    return sum == n \ndef computeHarshadNumber(n): \n    '''\n    Write a python function to compute the harshad number of a number.\n    '''\n    sum = 0\n    temp = n \n    while(temp!= 0): \n        digit = temp % 10\n        sum += computeSumOfDigits(digit) \n        temp = temp // 10\n    return (n % sum == 0) \ndef computeStrongNumber(n): \n    '''\n    Write a python function to compute the strong number of a number.\n    '''\n    sum = 0\n    temp = n \n    while(temp!= 0): \n        digit = temp % 10\n        sum += computeSumOfDigits(digit) \n        temp = temp // 10\n    return sum \ndef computeStrongHarshadNumber(n): \n    '''\n    Write a python function to compute the strong harshad number of a number.\n    '''\n    return computeStrongNumber(n) and computeHarshadNumber(n) \ndef computePalindrome(n): \n    '''\n    Write a python function to check if the number is palindrome or not.\n    '''\n    return n == n[::-1] \ndef computePanlindrome(n): \n    '''\n    Write a python function to check if the number is panlindrome or not.\n    '''\n    return computePalindrome(str(n) + str(n)[::-1]) \ndef computeStrongPanlindrome(n): \n    '''\n    Write a python function to check if the number is strong palindrome or not.\n    '''\n    temp = str(n) + str(n)[::-1] \n    sum = 0\n    for i in temp: \n        sum += computeSumOfDigits(int(i)) \n    return sum == n and n!= 0\ndef findSumofDigits(n): \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    sum = 0\n    while(n!= 0): \n        sum = sum + (n % 10) \n        n = n // 10\n    return sum \ndef checkRecur(n): \n    '''\n    Write a python function to check if a number is recurssive or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return True\n    else: \n        if(checkRecur(n - 1) or checkRecur(n - 2)): \n            return True\n        else: \n            return False\ndef computeSumofDigitsIter(n): \n    '''\n    Write a python function to compute the sum of digits of a number.\n    '''\n    sum = 0\n    while(n!= 0): \n        sum = sum + (n % 10) \n        n = n // 10\n    return sum \ndef computeFactorial(n): \n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if(n == 1 or n == 0): \n        return 1\n    else: \n        return n * computeFactorial(n - 1) \ndef computeSumofDigitsRecur(n): \n    '''\n    Write a python function to compute the sum of digits of a number.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n % 10) + computeSumofDigitsRecur(n // 10) \ndef findNthDigit("
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Variable to store the sum \n    sum = 0\n    # Find the sum of all even factors \n    for i in range(2,(n+1)):\n        if n % i == 0:\n            if n % i == 0 and i % 2 == 0:\n                sum += i\n    return sum\n    \ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(sumofFactors(n))\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    #initializing the sum \n    for i in range(1, n//2 + 1): \n        #iterating for each number between 1 and n/2 \n        if (n % i == 0): \n            #checking if n is divisible by i \n            sum += i \n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\b\\w*z\\w*\\b\"\n    if re.search(pattern, text):\n        return \"Matched\"\n    return \"Not matched\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # r'\\b\\w*z\\w*\\b'\n    return re.findall(r'\\b\\w*z\\w*\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('\\w*z\\w*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return 'z' in text\n    \n    \ndef text_match_word_start(text):\n    '''\n    Write a regex that matches the word 'at' followed by two letters.\n    '''\n    return re.search(r'\\bat\\b',text)\n    \n    \ndef text_match_word_boundary(text):\n    '''\n    Match the word 'ball', but only if it's surrounded by digits.\n    '''\n    return re.search(r'\\d\\bal\\b',text)\n    \n    \ndef text_match_url(text):\n    '''\n    Write a regex that matches a url. The regex should have one group that matches the entire url. The group should have three separate regex matches: the protocol, the domain, and the path. The protocol and the domain should match only if they're present (if you have no domain, the first part of the url should simply be None).\n    '''\n    url = r'https://www.thisisnotaurl.com'\n    return re.search(r'https?://([a-zA-Z0-9]+\\.)+\\w+', url)\n    \n    \ndef text_match_ip(text):\n    '''\n    Write a regular expression that matches a valid IP address. An IP address consists of four numbers, each in the range 0-255, separated by periods (.). For example:\n    Valid IP Addresses\n    0.0.0.0\n    192.168.1.1\n    172.16.254.1\n    256.0.0.0\n    Invalid IP Addresses\n    10.0.0\n    10.0.0.0:4567\n    10.0.0.0-10.0.0.0\n    10.0.0.0-10.0.0.1\n    10.0.0.0-10\n    10.0.0.0-10.0.1.1\n    10.0.0.0-10.1\n    10.0.0.0-10.0.1.0\n    10.0.0.0-10.0.1.10\n    10.0.0.0-10.0.1.255\n    10.0.0.1-10.0.0.0\n    10.0.0.1-10.0.0.1\n    10.0.0.1-10.0.1.0\n    10.0.0.1-10.0.1.1\n    10.0.0.1-10.0.1.10\n    10.0.0.1-10.0.1.255\n    10.0.0.1-10.0.1.256\n    10.0.0.1-10.0.1.254\n    10.0.0.0-10.0.0.1-10.0.0.10\n    10.0.0.0-10.0.0.1-10.0.1.10\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.254\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.255\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10.0.0.1-10.0.1.256\n    10.0.0.0-10"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match('\\w*z\\w*',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # return re.search('z[a-z]*z', text)\n    # return''.join([m.group() for m in re.finditer('z[a-z]*z', text)])\n    return bool(re.search('z[a-z]*z', text))\n    "
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z[\\w]*',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    a = []\n    \n    for word in text.split():\n        if 'z' in word:\n            a.append(word)\n    return a\n    \n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # text = \"This is a test to match words containing 'z'\"\n    return re.search(r'\\w*z\\w*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    print(\"word z is:\", re.findall(r'\\b[^\\d\\W]+z[^\\d\\W]+\\b',text))\n    print(\"word z is:\", re.findall(r'\\b[^\\d\\W]+z[^\\d\\W]+\\b',text,re.I))\n    print(\"word z is:\", re.findall(r'z[^\\d\\W]+',text))\n    print(\"word z is:\", re.findall(r'z[^\\d\\W]+',text,re.I))\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthlist=[1,3,5,7,8,10,12]\n    if monthnum2 in monthlist:\n        return 31\n    elif monthnum2==2:\n        return 29\n    else:\n        return 0\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return 31\n    elif monthnum2 in [4,6,9,11]:\n        return 30\n    else:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 31\n    elif monthnum2 == 3:\n        return 31\n    elif monthnum2 == 5:\n        return 31\n    elif monthnum2 == 7:\n        return 31\n    elif monthnum2 == 8:\n        return 31\n    elif monthnum2 == 10:\n        return 31\n    elif monthnum2 == 12:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        print('Error! Please enter a valid month number')\n    else:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            print('The number is valid.')\n        elif monthnum2 == 2:\n            if leap_year(year2) == True:\n                print('The number is valid.')\n            else:\n                print('The number is not valid.')\n        else:\n            print('The number is valid.')\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        print(\"31 days\")\n    elif monthnum2 % 2!= 0:\n        print(\"30 days\")\n    else:\n        print(\"Error: Invalid month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None\n        \ndef check_monthnum_number(monthnum):\n    '''\n    Write a function to check whether the given month number is valid or not.\n    '''\n    if monthnum in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]:\n        return True\n    else:\n        return False\n        \ndef get_next_monthnum(monthnum2):\n    '''\n    Write a function to get the next month number.\n    '''\n    next_monthnum = monthnum2 + 1\n    if check_monthnum_number(next_monthnum) == True:\n        return next_monthnum\n    else:\n        next_monthnum = 1\n        return next_monthnum\n        \ndef get_next_monthnumb(monthnum):\n    '''\n    Write a function to get the next month number.\n    '''\n    next_monthnumb = monthnum + 1\n    if check_monthnumb_number(next_monthnumb) == True:\n        return next_monthnumb\n    else:\n        next_monthnumb = 1\n        return next_monthnumb\n        \ndef get_month(monthnumb):\n    '''\n    Write a function to get the month name by the given month number.\n    '''\n    if monthnumb == 1:\n        return \"January\"\n    elif monthnumb == 2:\n        return \"February\"\n    elif monthnumb == 3:\n        return \"March\"\n    elif monthnumb == 4:\n        return \"April\"\n    elif monthnumb == 5:\n        return \"May\"\n    elif monthnumb == 6:\n        return \"June\"\n    elif monthnumb == 7:\n        return \"July\"\n    elif monthnumb == 8:\n        return \"August\"\n    elif monthnumb == 9:\n        return \"September\"\n    elif monthnumb == 10:\n        return \"October\"\n    elif monthnumb == 11:\n        return \"November\"\n    elif monthnumb == 12:\n        return \"December\"\n    else:\n        return None\n        \ndef get_monthnumb(month):\n    '''\n    Write a function to get the month number by the given month name.\n    '''\n    if month == \"January\":\n        return 1\n    elif month == \"February\":\n        return 2\n    elif month == \"March\":\n        return 3\n    elif month == \"April\":\n        return 4\n    elif month == \"May\":\n        return 5\n    elif month == \"June\":\n        return 6\n    elif month == \"July\":\n        return 7\n    elif month == \"August\":\n        return 8\n    elif month == \"September\":\n        return 9\n    elif month == \"October\":\n        return 10\n    elif month == \"November\":\n        return 11\n    elif month == \"December\":\n        return 12\n    else:\n        return None\n        \ndef get_monthnumb_year(monthyear):\n    '''\n    Write a function to get the month number and year by the given month and year string.\n    '''\n    monthnumb = get_monthnumb(monthyear.split(' ')[0])\n    year = int(monthyear.split(' ')[1])\n    return monthnumb, year\n    \ndef get_monthyear(monthnumb, year):\n    '''\n    Write a function to get the month and year by the given month number and year number.\n    '''\n    monthyear = get_month(monthnumb) +'' + str(year)\n    return monthyear\n    \ndef get_monthyear_month(monthnumb, year):\n    '''\n    Write a function to get the month and year by the given month number and year number.\n    '''\n    monthyear = get_month(monthnumb) +'' + str(year)\n    return monthyear, monthnumb\n    \ndef get_monthyear_monthnumb(monthyear):\n    '''\n    Write a function to get the month number and year by the given month and year string.\n    '''\n    monthnumb = get_monthnumb(monthyear.split(' ')[0])\n    year = int(monthyear.split(' ')[1])\n    return monthnumb, year\n    \ndef get_monthyear_monthnumb_year(monthyear):\n    '''\n    Write a function to get the month number, year and month by the given month and year string.\n    '''\n    monthyear, monthnumb, year = monthyear.split(' ')\n    monthnumb = int(monthnumb)\n    year = int(year)\n    return monthnumb, year, monthyear\n    \ndef get_monthnumb_year(monthyear):\n    '''\n    Write a function to get the month number and year by the given month and year string.\n    '''\n    monthnumb = get_monthnumb(monthyear.split(' ')[0])\n    year = int(monthyear.split(' ')[1])\n    return monthnumb, year\n    \ndef get_monthyear(monthnumb, year):\n    '''\n    Write a function to get the month and year by the given month number and year number.\n    '''\n    monthyear = get_month(monthnumb) +'' + str(year)\n    return monthyear\n    \ndef get_monthnumb_year_month(monthyear):\n    '''\n    Write a function to get the month number, year and month by the given month and year string.\n    '''\n    monthyear, monthnumb, year = monthyear.split(' ')\n    monthnumb = int(monthnumb)\n    year = int(year)\n    return monthnumb, year, monthyear\n    \ndef get_monthyear_monthnumb(monthyear):\n    '''\n    Write a function to get the month number and year by the given month and year string.\n    '''\n    monthyear, monthnumb = monthyear.split(' ')\n    monthnumb = int(monthnumb)\n    return monthnumb, monthyear\n    \ndef get_monthyear_monthnumb_year(monthyear):\n    '''\n    Write a function to get the month number, year and month by the given month and year string.\n    '''\n    monthyear, monthnumb, year = monthyear.split(' ')\n    monthnumb = int(monthnumb)\n    year = int(year)\n    return monthnumb, year, monthyear\n    \ndef get_monthnumb_monthyear(monthnumb, monthyear):\n    '''\n    Write a function to get the month and year by the given month number and year string.\n    '''\n    monthyear = get_month(monthnumb) +'' + str(monthyear)\n    return monthyear, monthnumb\n    \ndef get_monthnumb_monthyear(monthnumb, monthyear):\n    '''\n    Write a function to get the month number and year by the given month and year string.\n    '''\n    monthyear, monthnumb = monthyear.split(' ')\n    monthnumb = int(monthnumb)\n    return monthnumb, monthyear\n    \ndef get_monthnumb_monthyear_month(monthnumb, monthyear):\n    '''\n    Write a function to get the month number, year, month by the given month number, year and month string.\n    '''\n    monthyear, monthnumb = monthyear.split(' ')\n    monthnumb = int(monthnumb)\n    return monthnumb, monthyear, monthnumb\n    \ndef get_monthnumb_monthyear_monthnumb(monthnumb, monthyear):\n    '''\n    Write a function to get the month number, year, month by the given month number, year and month string.\n    '''\n    monthyear, monthnumb = monthyear.split(' ')\n    monthnumb = int(monthnumb)\n    return monthnumb, monthyear, monthnumb\n    \ndef get_monthnumb_monthyear_monthnumb_year(monthnumb, monthyear):\n    '''\n    Write a function to get the month number, year, month by the give"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    elif monthnum2 == 2:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # import month number from given text file\n    month_number = open(monthnum2,'r')\n    month_number = month_number.read()\n    # the month number\n    monthnum = int(month_number)\n    # if the number is divisible by 7 and by 400\n    if monthnum%7 == 0 and monthnum%400 == 0:\n        # return True\n        return True\n    # else\n    elif monthnum%7 == 0 and monthnum%4 == 0:\n        # return True\n        return True\n    # else\n    else:\n        # return False\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0,len(stringlist)):\n        if len(stringlist[i]) > 1:\n            stringlist[i] = stringlist[i][::-1]\n        else:\n            pass\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Create an empty list\n    reversed_list = []\n    # Loop through each string in the original list\n    for string in stringlist:\n        # Reverse the string using slicing\n        reversed_string = string[::-1]\n        # Append the reversed string to the new list\n        reversed_list.append(reversed_string)\n    # Return the list\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for string in stringlist:\n        reversedlist.append(string[::-1])\n    return reversedlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedstringlist = []\n    for string in stringlist:\n        reversedstringlist.append(string[::-1])\n    return reversedstringlist"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for word in stringlist:\n        new_list.append(word[::-1])\n    return new_list\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)): \n        if len(lst[i]) < min_length: \n            min_length = len(lst[i]) \n            index = i\n    return index \n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = lst[0]\n    for i in lst:\n        if len(i) < len(sublist):\n            sublist = i\n    return sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if len(lst[i:j+1]) < len(lst[i:j+1-1]):\n                break\n    return lst[i:j+1]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_min = [0, len(lst[0])]\n    for i in range(len(lst)):\n        if len(lst[i]) < lst_min[1]:\n            lst_min = [i, len(lst[i])]\n    return lst_min\n    \ndef test_Find_Min():\n    print(Find_Min([[\"abcd\",\"qwerty\"],[\"qwerty1\"],[\"qwerty2\",\"qwerty3\",\"qwerty4\"]]))\n    print(Find_Min([[\"abcd\",\"qwerty\"],[\"qwerty1\"],[\"qwerty2\",\"qwerty3\",\"qwerty4\"]]))\n    print(Find_Min([[\"abcd\",\"qwerty\"],[\"qwerty1\"],[\"qwerty2\",\"qwerty3\",\"qwerty4\"]]))\n    print(Find_Min([[\"abcd\",\"qwerty\"],[\"qwerty1\"],[\"qwerty2\",\"qwerty3\",\"qwerty4\"]]))\n    print(Find_Min([[\"abcd\",\"qwerty\"],[\"qwerty1\"],[\"qwerty2\",\"qwerty3\",\"qwerty4\"]]))\n    print(Find_Min([[\"abcd\",\"qwerty\"],[\"qwerty1\"],[\"qwerty2\",\"qwerty3\",\"qwerty4\"]]))\n    \ntest_Find_Min()\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = i\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = []\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            length.append(len(lst[i:j+1]))\n    return(length.index(min(length)))\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in lst:\n        if min_len > len(i):\n            min_len = len(i)\n            min_lst = i\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=len(lst[0])\n    sub_list=[]\n    for i in range(len(lst)):\n        if len(lst[i])<min_len:\n            min_len=len(lst[i])\n            sub_list=lst[i]\n    return sub_list\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # list containing sublists\n    sublst = []\n    # variable to store length of the sublist\n    minlen = len(lst[0])\n    # variable to store minimum length\n    minlst = lst[0]\n    \n    for i in lst:\n        if len(i) < minlen:\n            minlen = len(i)\n            minlst = i\n    \n    return minlst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = lst[0] \n    for i in range(len(lst)): \n        if len(lst[i]) < len(min_lst): \n            min_lst = lst[i] \n    return min_lst \n"
    }
]